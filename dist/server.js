module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var PORT = 3000;
	// polyfills have to be first
	//import 'angular2-universal-polyfills';
	__webpack_require__(2);
	__webpack_require__(247);
	__webpack_require__(259);
	__webpack_require__(265);
	__webpack_require__(266);
	var angular2_express_engine_1 = __webpack_require__(346);
	var main_module_1 = __webpack_require__(353); // will change depending on your app
	var express = __webpack_require__(356);
	var app = express();
	/*app.get('/',(req,res)=>{
	    res.send("Hello World");
	});
	
	app.listen(3000,()=>{
	    console.log("Cool, it's running on localhost:3000");
	});*/
	// 1. set up Angular Universal to be the rendering engine for Express
	app.engine('html', angular2_express_engine_1.createEngine({}));
	app.set('port', PORT);
	app.set('views', "dist");
	app.set('view engine', 'html');
	app.set('json spaces', 2);
	// 2. get the top level NgModule for the app and pass in important values to Angular Universal
	app.get('/*', function (req, res) {
	    // Our Universal - express configuration object
	    var expressConfig = {
	        req: req,
	        res: res,
	        ngModule: main_module_1.MainModule,
	        preboot: false,
	        baseUrl: '/',
	        requestUrl: req.originalUrl,
	        originUrl: 'http://localhost:3000'
	    };
	    // NOTE: everything passed in here will be set as properties to the top level Zone
	    // access these values in your code like this: Zone.current.get('req');
	    // this is temporary; we will have a non-Zone way of getting these soon
	    res.render('index', expressConfig);
	});
	var server = app.listen(app.get('port'), function () {
	    console.log("Listening on: http://localhost:" + server.address().port);
	});


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(3);
	__webpack_require__(52);
	__webpack_require__(53);
	__webpack_require__(54);
	__webpack_require__(55);
	__webpack_require__(57);
	__webpack_require__(60);
	__webpack_require__(61);
	__webpack_require__(62);
	__webpack_require__(63);
	__webpack_require__(64);
	__webpack_require__(65);
	__webpack_require__(66);
	__webpack_require__(67);
	__webpack_require__(68);
	__webpack_require__(70);
	__webpack_require__(72);
	__webpack_require__(74);
	__webpack_require__(76);
	__webpack_require__(79);
	__webpack_require__(80);
	__webpack_require__(81);
	__webpack_require__(85);
	__webpack_require__(87);
	__webpack_require__(89);
	__webpack_require__(92);
	__webpack_require__(93);
	__webpack_require__(94);
	__webpack_require__(95);
	__webpack_require__(97);
	__webpack_require__(98);
	__webpack_require__(99);
	__webpack_require__(100);
	__webpack_require__(101);
	__webpack_require__(102);
	__webpack_require__(103);
	__webpack_require__(105);
	__webpack_require__(106);
	__webpack_require__(107);
	__webpack_require__(109);
	__webpack_require__(110);
	__webpack_require__(111);
	__webpack_require__(113);
	__webpack_require__(114);
	__webpack_require__(115);
	__webpack_require__(116);
	__webpack_require__(117);
	__webpack_require__(118);
	__webpack_require__(119);
	__webpack_require__(120);
	__webpack_require__(121);
	__webpack_require__(122);
	__webpack_require__(123);
	__webpack_require__(124);
	__webpack_require__(125);
	__webpack_require__(126);
	__webpack_require__(131);
	__webpack_require__(132);
	__webpack_require__(136);
	__webpack_require__(137);
	__webpack_require__(138);
	__webpack_require__(139);
	__webpack_require__(141);
	__webpack_require__(142);
	__webpack_require__(143);
	__webpack_require__(144);
	__webpack_require__(145);
	__webpack_require__(146);
	__webpack_require__(147);
	__webpack_require__(148);
	__webpack_require__(149);
	__webpack_require__(150);
	__webpack_require__(151);
	__webpack_require__(152);
	__webpack_require__(153);
	__webpack_require__(154);
	__webpack_require__(155);
	__webpack_require__(156);
	__webpack_require__(157);
	__webpack_require__(159);
	__webpack_require__(160);
	__webpack_require__(166);
	__webpack_require__(167);
	__webpack_require__(169);
	__webpack_require__(170);
	__webpack_require__(171);
	__webpack_require__(175);
	__webpack_require__(176);
	__webpack_require__(177);
	__webpack_require__(178);
	__webpack_require__(179);
	__webpack_require__(181);
	__webpack_require__(182);
	__webpack_require__(183);
	__webpack_require__(184);
	__webpack_require__(187);
	__webpack_require__(189);
	__webpack_require__(190);
	__webpack_require__(191);
	__webpack_require__(193);
	__webpack_require__(195);
	__webpack_require__(197);
	__webpack_require__(198);
	__webpack_require__(199);
	__webpack_require__(201);
	__webpack_require__(202);
	__webpack_require__(203);
	__webpack_require__(204);
	__webpack_require__(211);
	__webpack_require__(214);
	__webpack_require__(215);
	__webpack_require__(217);
	__webpack_require__(218);
	__webpack_require__(221);
	__webpack_require__(222);
	__webpack_require__(224);
	__webpack_require__(225);
	__webpack_require__(226);
	__webpack_require__(227);
	__webpack_require__(228);
	__webpack_require__(229);
	__webpack_require__(230);
	__webpack_require__(231);
	__webpack_require__(232);
	__webpack_require__(233);
	__webpack_require__(234);
	__webpack_require__(235);
	__webpack_require__(236);
	__webpack_require__(237);
	__webpack_require__(238);
	__webpack_require__(239);
	__webpack_require__(240);
	__webpack_require__(241);
	__webpack_require__(242);
	__webpack_require__(244);
	__webpack_require__(245);
	__webpack_require__(246);
	module.exports = __webpack_require__(9);

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(4)
	  , has            = __webpack_require__(5)
	  , DESCRIPTORS    = __webpack_require__(6)
	  , $export        = __webpack_require__(8)
	  , redefine       = __webpack_require__(18)
	  , META           = __webpack_require__(22).KEY
	  , $fails         = __webpack_require__(7)
	  , shared         = __webpack_require__(23)
	  , setToStringTag = __webpack_require__(24)
	  , uid            = __webpack_require__(19)
	  , wks            = __webpack_require__(25)
	  , wksExt         = __webpack_require__(26)
	  , wksDefine      = __webpack_require__(27)
	  , keyOf          = __webpack_require__(29)
	  , enumKeys       = __webpack_require__(42)
	  , isArray        = __webpack_require__(45)
	  , anObject       = __webpack_require__(12)
	  , toIObject      = __webpack_require__(32)
	  , toPrimitive    = __webpack_require__(16)
	  , createDesc     = __webpack_require__(17)
	  , _create        = __webpack_require__(46)
	  , gOPNExt        = __webpack_require__(49)
	  , $GOPD          = __webpack_require__(51)
	  , $DP            = __webpack_require__(11)
	  , $keys          = __webpack_require__(30)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(50).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(44).f  = $propertyIsEnumerable;
	  __webpack_require__(43).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(28)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(10)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 4 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 5 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(7)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(4)
	  , core      = __webpack_require__(9)
	  , hide      = __webpack_require__(10)
	  , redefine  = __webpack_require__(18)
	  , ctx       = __webpack_require__(20)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
	    , key, own, out, exp;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // extend global
	    if(target)redefine(target, key, out, type & $export.U);
	    // export
	    if(exports[key] != out)hide(exports, key, exp);
	    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
	  }
	};
	global.core = core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 9 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(11)
	  , createDesc = __webpack_require__(17);
	module.exports = __webpack_require__(6) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(12)
	  , IE8_DOM_DEFINE = __webpack_require__(14)
	  , toPrimitive    = __webpack_require__(16)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(6) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(6) && !__webpack_require__(7)(function(){
	  return Object.defineProperty(__webpack_require__(15)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13)
	  , document = __webpack_require__(4).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(13);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 17 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(4)
	  , hide      = __webpack_require__(10)
	  , has       = __webpack_require__(5)
	  , SRC       = __webpack_require__(19)('src')
	  , TO_STRING = 'toString'
	  , $toString = Function[TO_STRING]
	  , TPL       = ('' + $toString).split(TO_STRING);
	
	__webpack_require__(9).inspectSource = function(it){
	  return $toString.call(it);
	};
	
	(module.exports = function(O, key, val, safe){
	  var isFunction = typeof val == 'function';
	  if(isFunction)has(val, 'name') || hide(val, 'name', key);
	  if(O[key] === val)return;
	  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if(O === global){
	    O[key] = val;
	  } else {
	    if(!safe){
	      delete O[key];
	      hide(O, key, val);
	    } else {
	      if(O[key])O[key] = val;
	      else hide(O, key, val);
	    }
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString(){
	  return typeof this == 'function' && this[SRC] || $toString.call(this);
	});

/***/ },
/* 19 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(21);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 21 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(19)('meta')
	  , isObject = __webpack_require__(13)
	  , has      = __webpack_require__(5)
	  , setDesc  = __webpack_require__(11).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(7)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(11).f
	  , has = __webpack_require__(5)
	  , TAG = __webpack_require__(25)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(23)('wks')
	  , uid        = __webpack_require__(19)
	  , Symbol     = __webpack_require__(4).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(25);

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(4)
	  , core           = __webpack_require__(9)
	  , LIBRARY        = __webpack_require__(28)
	  , wksExt         = __webpack_require__(26)
	  , defineProperty = __webpack_require__(11).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 28 */
/***/ function(module, exports) {

	module.exports = false;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(30)
	  , toIObject = __webpack_require__(32);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(31)
	  , enumBugKeys = __webpack_require__(41);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(5)
	  , toIObject    = __webpack_require__(32)
	  , arrayIndexOf = __webpack_require__(36)(false)
	  , IE_PROTO     = __webpack_require__(40)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(33)
	  , defined = __webpack_require__(35);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(34);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 34 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 35 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(32)
	  , toLength  = __webpack_require__(37)
	  , toIndex   = __webpack_require__(39);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(38)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 38 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(38)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(23)('keys')
	  , uid    = __webpack_require__(19);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 41 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(30)
	  , gOPS    = __webpack_require__(43)
	  , pIE     = __webpack_require__(44);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 43 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 44 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(34);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(12)
	  , dPs         = __webpack_require__(47)
	  , enumBugKeys = __webpack_require__(41)
	  , IE_PROTO    = __webpack_require__(40)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(15)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(48).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(11)
	  , anObject = __webpack_require__(12)
	  , getKeys  = __webpack_require__(30);
	
	module.exports = __webpack_require__(6) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(4).document && document.documentElement;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(32)
	  , gOPN      = __webpack_require__(50).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(31)
	  , hiddenKeys = __webpack_require__(41).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(44)
	  , createDesc     = __webpack_require__(17)
	  , toIObject      = __webpack_require__(32)
	  , toPrimitive    = __webpack_require__(16)
	  , has            = __webpack_require__(5)
	  , IE8_DOM_DEFINE = __webpack_require__(14)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(6) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(46)});

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(6), 'Object', {defineProperty: __webpack_require__(11).f});

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	$export($export.S + $export.F * !__webpack_require__(6), 'Object', {defineProperties: __webpack_require__(47)});

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject                 = __webpack_require__(32)
	  , $getOwnPropertyDescriptor = __webpack_require__(51).f;
	
	__webpack_require__(56)('getOwnPropertyDescriptor', function(){
	  return function getOwnPropertyDescriptor(it, key){
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(8)
	  , core    = __webpack_require__(9)
	  , fails   = __webpack_require__(7);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject        = __webpack_require__(58)
	  , $getPrototypeOf = __webpack_require__(59);
	
	__webpack_require__(56)('getPrototypeOf', function(){
	  return function getPrototypeOf(it){
	    return $getPrototypeOf(toObject(it));
	  };
	});

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(35);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(5)
	  , toObject    = __webpack_require__(58)
	  , IE_PROTO    = __webpack_require__(40)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(58)
	  , $keys    = __webpack_require__(30);
	
	__webpack_require__(56)('keys', function(){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 Object.getOwnPropertyNames(O)
	__webpack_require__(56)('getOwnPropertyNames', function(){
	  return __webpack_require__(49).f;
	});

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.5 Object.freeze(O)
	var isObject = __webpack_require__(13)
	  , meta     = __webpack_require__(22).onFreeze;
	
	__webpack_require__(56)('freeze', function($freeze){
	  return function freeze(it){
	    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
	  };
	});

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.17 Object.seal(O)
	var isObject = __webpack_require__(13)
	  , meta     = __webpack_require__(22).onFreeze;
	
	__webpack_require__(56)('seal', function($seal){
	  return function seal(it){
	    return $seal && isObject(it) ? $seal(meta(it)) : it;
	  };
	});

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.15 Object.preventExtensions(O)
	var isObject = __webpack_require__(13)
	  , meta     = __webpack_require__(22).onFreeze;
	
	__webpack_require__(56)('preventExtensions', function($preventExtensions){
	  return function preventExtensions(it){
	    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
	  };
	});

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.12 Object.isFrozen(O)
	var isObject = __webpack_require__(13);
	
	__webpack_require__(56)('isFrozen', function($isFrozen){
	  return function isFrozen(it){
	    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
	  };
	});

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.13 Object.isSealed(O)
	var isObject = __webpack_require__(13);
	
	__webpack_require__(56)('isSealed', function($isSealed){
	  return function isSealed(it){
	    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
	  };
	});

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.11 Object.isExtensible(O)
	var isObject = __webpack_require__(13);
	
	__webpack_require__(56)('isExtensible', function($isExtensible){
	  return function isExtensible(it){
	    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
	  };
	});

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(8);
	
	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(69)});

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys  = __webpack_require__(30)
	  , gOPS     = __webpack_require__(43)
	  , pIE      = __webpack_require__(44)
	  , toObject = __webpack_require__(58)
	  , IObject  = __webpack_require__(33)
	  , $assign  = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(7)(function(){
	  var A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , aLen  = arguments.length
	    , index = 1
	    , getSymbols = gOPS.f
	    , isEnum     = pIE.f;
	  while(aLen > index){
	    var S      = IObject(arguments[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  } return T;
	} : $assign;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.10 Object.is(value1, value2)
	var $export = __webpack_require__(8);
	$export($export.S, 'Object', {is: __webpack_require__(71)});

/***/ },
/* 71 */
/***/ function(module, exports) {

	// 7.2.9 SameValue(x, y)
	module.exports = Object.is || function is(x, y){
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(8);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(73).set});

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(13)
	  , anObject = __webpack_require__(12);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(20)(Function.call, __webpack_require__(51).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.3.6 Object.prototype.toString()
	var classof = __webpack_require__(75)
	  , test    = {};
	test[__webpack_require__(25)('toStringTag')] = 'z';
	if(test + '' != '[object z]'){
	  __webpack_require__(18)(Object.prototype, 'toString', function toString(){
	    return '[object ' + classof(this) + ']';
	  }, true);
	}

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(34)
	  , TAG = __webpack_require__(25)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
	var $export = __webpack_require__(8);
	
	$export($export.P, 'Function', {bind: __webpack_require__(77)});

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var aFunction  = __webpack_require__(21)
	  , isObject   = __webpack_require__(13)
	  , invoke     = __webpack_require__(78)
	  , arraySlice = [].slice
	  , factories  = {};
	
	var construct = function(F, len, args){
	  if(!(len in factories)){
	    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
	    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
	  } return factories[len](F, args);
	};
	
	module.exports = Function.bind || function bind(that /*, args... */){
	  var fn       = aFunction(this)
	    , partArgs = arraySlice.call(arguments, 1);
	  var bound = function(/* args... */){
	    var args = partArgs.concat(arraySlice.call(arguments));
	    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
	  };
	  if(isObject(fn.prototype))bound.prototype = fn.prototype;
	  return bound;
	};

/***/ },
/* 78 */
/***/ function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return              fn.apply(that, args);
	};

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(11).f
	  , createDesc = __webpack_require__(17)
	  , has        = __webpack_require__(5)
	  , FProto     = Function.prototype
	  , nameRE     = /^\s*function ([^ (]*)/
	  , NAME       = 'name';
	
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	
	// 19.2.4.2 name
	NAME in FProto || __webpack_require__(6) && dP(FProto, NAME, {
	  configurable: true,
	  get: function(){
	    try {
	      var that = this
	        , name = ('' + that).match(nameRE)[1];
	      has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
	      return name;
	    } catch(e){
	      return '';
	    }
	  }
	});

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var isObject       = __webpack_require__(13)
	  , getPrototypeOf = __webpack_require__(59)
	  , HAS_INSTANCE   = __webpack_require__(25)('hasInstance')
	  , FunctionProto  = Function.prototype;
	// 19.2.3.6 Function.prototype[@@hasInstance](V)
	if(!(HAS_INSTANCE in FunctionProto))__webpack_require__(11).f(FunctionProto, HAS_INSTANCE, {value: function(O){
	  if(typeof this != 'function' || !isObject(O))return false;
	  if(!isObject(this.prototype))return O instanceof this;
	  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	  while(O = getPrototypeOf(O))if(this.prototype === O)return true;
	  return false;
	}});

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(8)
	  , $parseInt = __webpack_require__(82);
	// 18.2.5 parseInt(string, radix)
	$export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	var $parseInt = __webpack_require__(4).parseInt
	  , $trim     = __webpack_require__(83).trim
	  , ws        = __webpack_require__(84)
	  , hex       = /^[\-+]?0[xX]/;
	
	module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){
	  var string = $trim(String(str), 3);
	  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
	} : $parseInt;

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8)
	  , defined = __webpack_require__(35)
	  , fails   = __webpack_require__(7)
	  , spaces  = __webpack_require__(84)
	  , space   = '[' + spaces + ']'
	  , non     = '\u200b\u0085'
	  , ltrim   = RegExp('^' + space + space + '*')
	  , rtrim   = RegExp(space + space + '*$');
	
	var exporter = function(KEY, exec, ALIAS){
	  var exp   = {};
	  var FORCE = fails(function(){
	    return !!spaces[KEY]() || non[KEY]() != non;
	  });
	  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
	  if(ALIAS)exp[ALIAS] = fn;
	  $export($export.P + $export.F * FORCE, 'String', exp);
	};
	
	// 1 -> String#trimLeft
	// 2 -> String#trimRight
	// 3 -> String#trim
	var trim = exporter.trim = function(string, TYPE){
	  string = String(defined(string));
	  if(TYPE & 1)string = string.replace(ltrim, '');
	  if(TYPE & 2)string = string.replace(rtrim, '');
	  return string;
	};
	
	module.exports = exporter;

/***/ },
/* 84 */
/***/ function(module, exports) {

	module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
	  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	var $export     = __webpack_require__(8)
	  , $parseFloat = __webpack_require__(86);
	// 18.2.4 parseFloat(string)
	$export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var $parseFloat = __webpack_require__(4).parseFloat
	  , $trim       = __webpack_require__(83).trim;
	
	module.exports = 1 / $parseFloat(__webpack_require__(84) + '-0') !== -Infinity ? function parseFloat(str){
	  var string = $trim(String(str), 3)
	    , result = $parseFloat(string);
	  return result === 0 && string.charAt(0) == '-' ? -0 : result;
	} : $parseFloat;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global            = __webpack_require__(4)
	  , has               = __webpack_require__(5)
	  , cof               = __webpack_require__(34)
	  , inheritIfRequired = __webpack_require__(88)
	  , toPrimitive       = __webpack_require__(16)
	  , fails             = __webpack_require__(7)
	  , gOPN              = __webpack_require__(50).f
	  , gOPD              = __webpack_require__(51).f
	  , dP                = __webpack_require__(11).f
	  , $trim             = __webpack_require__(83).trim
	  , NUMBER            = 'Number'
	  , $Number           = global[NUMBER]
	  , Base              = $Number
	  , proto             = $Number.prototype
	  // Opera ~12 has broken Object#toString
	  , BROKEN_COF        = cof(__webpack_require__(46)(proto)) == NUMBER
	  , TRIM              = 'trim' in String.prototype;
	
	// 7.1.3 ToNumber(argument)
	var toNumber = function(argument){
	  var it = toPrimitive(argument, false);
	  if(typeof it == 'string' && it.length > 2){
	    it = TRIM ? it.trim() : $trim(it, 3);
	    var first = it.charCodeAt(0)
	      , third, radix, maxCode;
	    if(first === 43 || first === 45){
	      third = it.charCodeAt(2);
	      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if(first === 48){
	      switch(it.charCodeAt(1)){
	        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
	        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
	        default : return +it;
	      }
	      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
	        code = digits.charCodeAt(i);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if(code < 48 || code > maxCode)return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};
	
	if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
	  $Number = function Number(value){
	    var it = arguments.length < 1 ? 0 : value
	      , that = this;
	    return that instanceof $Number
	      // check on 1..constructor(foo) case
	      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
	        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
	  };
	  for(var keys = __webpack_require__(6) ? gOPN(Base) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES6 (in case, if modules with ES6 Number statics required before):
	    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
	  ).split(','), j = 0, key; keys.length > j; j++){
	    if(has(Base, key = keys[j]) && !has($Number, key)){
	      dP($Number, key, gOPD(Base, key));
	    }
	  }
	  $Number.prototype = proto;
	  proto.constructor = $Number;
	  __webpack_require__(18)(global, NUMBER, $Number);
	}

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	var isObject       = __webpack_require__(13)
	  , setPrototypeOf = __webpack_require__(73).set;
	module.exports = function(that, target, C){
	  var P, S = target.constructor;
	  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
	    setPrototypeOf(that, P);
	  } return that;
	};

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(8)
	  , toInteger    = __webpack_require__(38)
	  , aNumberValue = __webpack_require__(90)
	  , repeat       = __webpack_require__(91)
	  , $toFixed     = 1..toFixed
	  , floor        = Math.floor
	  , data         = [0, 0, 0, 0, 0, 0]
	  , ERROR        = 'Number.toFixed: incorrect invocation!'
	  , ZERO         = '0';
	
	var multiply = function(n, c){
	  var i  = -1
	    , c2 = c;
	  while(++i < 6){
	    c2 += n * data[i];
	    data[i] = c2 % 1e7;
	    c2 = floor(c2 / 1e7);
	  }
	};
	var divide = function(n){
	  var i = 6
	    , c = 0;
	  while(--i >= 0){
	    c += data[i];
	    data[i] = floor(c / n);
	    c = (c % n) * 1e7;
	  }
	};
	var numToString = function(){
	  var i = 6
	    , s = '';
	  while(--i >= 0){
	    if(s !== '' || i === 0 || data[i] !== 0){
	      var t = String(data[i]);
	      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
	    }
	  } return s;
	};
	var pow = function(x, n, acc){
	  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
	};
	var log = function(x){
	  var n  = 0
	    , x2 = x;
	  while(x2 >= 4096){
	    n += 12;
	    x2 /= 4096;
	  }
	  while(x2 >= 2){
	    n  += 1;
	    x2 /= 2;
	  } return n;
	};
	
	$export($export.P + $export.F * (!!$toFixed && (
	  0.00008.toFixed(3) !== '0.000' ||
	  0.9.toFixed(0) !== '1' ||
	  1.255.toFixed(2) !== '1.25' ||
	  1000000000000000128..toFixed(0) !== '1000000000000000128'
	) || !__webpack_require__(7)(function(){
	  // V8 ~ Android 4.3-
	  $toFixed.call({});
	})), 'Number', {
	  toFixed: function toFixed(fractionDigits){
	    var x = aNumberValue(this, ERROR)
	      , f = toInteger(fractionDigits)
	      , s = ''
	      , m = ZERO
	      , e, z, j, k;
	    if(f < 0 || f > 20)throw RangeError(ERROR);
	    if(x != x)return 'NaN';
	    if(x <= -1e21 || x >= 1e21)return String(x);
	    if(x < 0){
	      s = '-';
	      x = -x;
	    }
	    if(x > 1e-21){
	      e = log(x * pow(2, 69, 1)) - 69;
	      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if(e > 0){
	        multiply(0, z);
	        j = f;
	        while(j >= 7){
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow(10, j, 1), 0);
	        j = e - 1;
	        while(j >= 23){
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        m = numToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        m = numToString() + repeat.call(ZERO, f);
	      }
	    }
	    if(f > 0){
	      k = m.length;
	      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
	    } else {
	      m = s + m;
	    } return m;
	  }
	});

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var cof = __webpack_require__(34);
	module.exports = function(it, msg){
	  if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);
	  return +it;
	};

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var toInteger = __webpack_require__(38)
	  , defined   = __webpack_require__(35);
	
	module.exports = function repeat(count){
	  var str = String(defined(this))
	    , res = ''
	    , n   = toInteger(count);
	  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
	  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
	  return res;
	};

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(8)
	  , $fails       = __webpack_require__(7)
	  , aNumberValue = __webpack_require__(90)
	  , $toPrecision = 1..toPrecision;
	
	$export($export.P + $export.F * ($fails(function(){
	  // IE7-
	  return $toPrecision.call(1, undefined) !== '1';
	}) || !$fails(function(){
	  // V8 ~ Android 4.3-
	  $toPrecision.call({});
	})), 'Number', {
	  toPrecision: function toPrecision(precision){
	    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
	    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); 
	  }
	});

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.1 Number.EPSILON
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.2 Number.isFinite(number)
	var $export   = __webpack_require__(8)
	  , _isFinite = __webpack_require__(4).isFinite;
	
	$export($export.S, 'Number', {
	  isFinite: function isFinite(it){
	    return typeof it == 'number' && _isFinite(it);
	  }
	});

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', {isInteger: __webpack_require__(96)});

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var isObject = __webpack_require__(13)
	  , floor    = Math.floor;
	module.exports = function isInteger(it){
	  return !isObject(it) && isFinite(it) && floor(it) === it;
	};

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.4 Number.isNaN(number)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', {
	  isNaN: function isNaN(number){
	    return number != number;
	  }
	});

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.5 Number.isSafeInteger(number)
	var $export   = __webpack_require__(8)
	  , isInteger = __webpack_require__(96)
	  , abs       = Math.abs;
	
	$export($export.S, 'Number', {
	  isSafeInteger: function isSafeInteger(number){
	    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
	  }
	});

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.6 Number.MAX_SAFE_INTEGER
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.10 Number.MIN_SAFE_INTEGER
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	var $export     = __webpack_require__(8)
	  , $parseFloat = __webpack_require__(86);
	// 20.1.2.12 Number.parseFloat(string)
	$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(8)
	  , $parseInt = __webpack_require__(82);
	// 20.1.2.13 Number.parseInt(string, radix)
	$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.3 Math.acosh(x)
	var $export = __webpack_require__(8)
	  , log1p   = __webpack_require__(104)
	  , sqrt    = Math.sqrt
	  , $acosh  = Math.acosh;
	
	$export($export.S + $export.F * !($acosh
	  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
	  && Math.floor($acosh(Number.MAX_VALUE)) == 710
	  // Tor Browser bug: Math.acosh(Infinity) -> NaN 
	  && $acosh(Infinity) == Infinity
	), 'Math', {
	  acosh: function acosh(x){
	    return (x = +x) < 1 ? NaN : x > 94906265.62425156
	      ? Math.log(x) + Math.LN2
	      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
	  }
	});

/***/ },
/* 104 */
/***/ function(module, exports) {

	// 20.2.2.20 Math.log1p(x)
	module.exports = Math.log1p || function log1p(x){
	  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
	};

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.5 Math.asinh(x)
	var $export = __webpack_require__(8)
	  , $asinh  = Math.asinh;
	
	function asinh(x){
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
	}
	
	// Tor Browser bug: Math.asinh(0) -> -0 
	$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.7 Math.atanh(x)
	var $export = __webpack_require__(8)
	  , $atanh  = Math.atanh;
	
	// Tor Browser bug: Math.atanh(-0) -> 0 
	$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
	  atanh: function atanh(x){
	    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
	  }
	});

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.9 Math.cbrt(x)
	var $export = __webpack_require__(8)
	  , sign    = __webpack_require__(108);
	
	$export($export.S, 'Math', {
	  cbrt: function cbrt(x){
	    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
	  }
	});

/***/ },
/* 108 */
/***/ function(module, exports) {

	// 20.2.2.28 Math.sign(x)
	module.exports = Math.sign || function sign(x){
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.11 Math.clz32(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  clz32: function clz32(x){
	    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
	  }
	});

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.12 Math.cosh(x)
	var $export = __webpack_require__(8)
	  , exp     = Math.exp;
	
	$export($export.S, 'Math', {
	  cosh: function cosh(x){
	    return (exp(x = +x) + exp(-x)) / 2;
	  }
	});

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.14 Math.expm1(x)
	var $export = __webpack_require__(8)
	  , $expm1  = __webpack_require__(112);
	
	$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});

/***/ },
/* 112 */
/***/ function(module, exports) {

	// 20.2.2.14 Math.expm1(x)
	var $expm1 = Math.expm1;
	module.exports = (!$expm1
	  // Old FF bug
	  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
	  // Tor Browser bug
	  || $expm1(-2e-17) != -2e-17
	) ? function expm1(x){
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
	} : $expm1;

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.16 Math.fround(x)
	var $export   = __webpack_require__(8)
	  , sign      = __webpack_require__(108)
	  , pow       = Math.pow
	  , EPSILON   = pow(2, -52)
	  , EPSILON32 = pow(2, -23)
	  , MAX32     = pow(2, 127) * (2 - EPSILON32)
	  , MIN32     = pow(2, -126);
	
	var roundTiesToEven = function(n){
	  return n + 1 / EPSILON - 1 / EPSILON;
	};
	
	
	$export($export.S, 'Math', {
	  fround: function fround(x){
	    var $abs  = Math.abs(x)
	      , $sign = sign(x)
	      , a, result;
	    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	    a = (1 + EPSILON32 / EPSILON) * $abs;
	    result = a - (a - $abs);
	    if(result > MAX32 || result != result)return $sign * Infinity;
	    return $sign * result;
	  }
	});

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
	var $export = __webpack_require__(8)
	  , abs     = Math.abs;
	
	$export($export.S, 'Math', {
	  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
	    var sum  = 0
	      , i    = 0
	      , aLen = arguments.length
	      , larg = 0
	      , arg, div;
	    while(i < aLen){
	      arg = abs(arguments[i++]);
	      if(larg < arg){
	        div  = larg / arg;
	        sum  = sum * div * div + 1;
	        larg = arg;
	      } else if(arg > 0){
	        div  = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
	  }
	});

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.18 Math.imul(x, y)
	var $export = __webpack_require__(8)
	  , $imul   = Math.imul;
	
	// some WebKit versions fails with big numbers, some has wrong arity
	$export($export.S + $export.F * __webpack_require__(7)(function(){
	  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
	}), 'Math', {
	  imul: function imul(x, y){
	    var UINT16 = 0xffff
	      , xn = +x
	      , yn = +y
	      , xl = UINT16 & xn
	      , yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.21 Math.log10(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  log10: function log10(x){
	    return Math.log(x) / Math.LN10;
	  }
	});

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.20 Math.log1p(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {log1p: __webpack_require__(104)});

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.22 Math.log2(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  log2: function log2(x){
	    return Math.log(x) / Math.LN2;
	  }
	});

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.28 Math.sign(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {sign: __webpack_require__(108)});

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.30 Math.sinh(x)
	var $export = __webpack_require__(8)
	  , expm1   = __webpack_require__(112)
	  , exp     = Math.exp;
	
	// V8 near Chromium 38 has a problem with very small numbers
	$export($export.S + $export.F * __webpack_require__(7)(function(){
	  return !Math.sinh(-2e-17) != -2e-17;
	}), 'Math', {
	  sinh: function sinh(x){
	    return Math.abs(x = +x) < 1
	      ? (expm1(x) - expm1(-x)) / 2
	      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
	  }
	});

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.33 Math.tanh(x)
	var $export = __webpack_require__(8)
	  , expm1   = __webpack_require__(112)
	  , exp     = Math.exp;
	
	$export($export.S, 'Math', {
	  tanh: function tanh(x){
	    var a = expm1(x = +x)
	      , b = expm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
	  }
	});

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	// 20.2.2.34 Math.trunc(x)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Math', {
	  trunc: function trunc(it){
	    return (it > 0 ? Math.floor : Math.ceil)(it);
	  }
	});

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	var $export        = __webpack_require__(8)
	  , toIndex        = __webpack_require__(39)
	  , fromCharCode   = String.fromCharCode
	  , $fromCodePoint = String.fromCodePoint;
	
	// length should be 1, old FF problem
	$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
	    var res  = []
	      , aLen = arguments.length
	      , i    = 0
	      , code;
	    while(aLen > i){
	      code = +arguments[i++];
	      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
	      res.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
	      );
	    } return res.join('');
	  }
	});

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(8)
	  , toIObject = __webpack_require__(32)
	  , toLength  = __webpack_require__(37);
	
	$export($export.S, 'String', {
	  // 21.1.2.4 String.raw(callSite, ...substitutions)
	  raw: function raw(callSite){
	    var tpl  = toIObject(callSite.raw)
	      , len  = toLength(tpl.length)
	      , aLen = arguments.length
	      , res  = []
	      , i    = 0;
	    while(len > i){
	      res.push(String(tpl[i++]));
	      if(i < aLen)res.push(String(arguments[i]));
	    } return res.join('');
	  }
	});

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 21.1.3.25 String.prototype.trim()
	__webpack_require__(83)('trim', function($trim){
	  return function trim(){
	    return $trim(this, 3);
	  };
	});

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(127)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(128)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(38)
	  , defined   = __webpack_require__(35);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(28)
	  , $export        = __webpack_require__(8)
	  , redefine       = __webpack_require__(18)
	  , hide           = __webpack_require__(10)
	  , has            = __webpack_require__(5)
	  , Iterators      = __webpack_require__(129)
	  , $iterCreate    = __webpack_require__(130)
	  , setToStringTag = __webpack_require__(24)
	  , getPrototypeOf = __webpack_require__(59)
	  , ITERATOR       = __webpack_require__(25)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 129 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(46)
	  , descriptor     = __webpack_require__(17)
	  , setToStringTag = __webpack_require__(24)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(10)(IteratorPrototype, __webpack_require__(25)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $at     = __webpack_require__(127)(false);
	$export($export.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos){
	    return $at(this, pos);
	  }
	});

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
	'use strict';
	var $export   = __webpack_require__(8)
	  , toLength  = __webpack_require__(37)
	  , context   = __webpack_require__(133)
	  , ENDS_WITH = 'endsWith'
	  , $endsWith = ''[ENDS_WITH];
	
	$export($export.P + $export.F * __webpack_require__(135)(ENDS_WITH), 'String', {
	  endsWith: function endsWith(searchString /*, endPosition = @length */){
	    var that = context(this, searchString, ENDS_WITH)
	      , endPosition = arguments.length > 1 ? arguments[1] : undefined
	      , len    = toLength(that.length)
	      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
	      , search = String(searchString);
	    return $endsWith
	      ? $endsWith.call(that, search, end)
	      : that.slice(end - search.length, end) === search;
	  }
	});

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	// helper for String#{startsWith, endsWith, includes}
	var isRegExp = __webpack_require__(134)
	  , defined  = __webpack_require__(35);
	
	module.exports = function(that, searchString, NAME){
	  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
	  return String(defined(that));
	};

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.8 IsRegExp(argument)
	var isObject = __webpack_require__(13)
	  , cof      = __webpack_require__(34)
	  , MATCH    = __webpack_require__(25)('match');
	module.exports = function(it){
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
	};

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	var MATCH = __webpack_require__(25)('match');
	module.exports = function(KEY){
	  var re = /./;
	  try {
	    '/./'[KEY](re);
	  } catch(e){
	    try {
	      re[MATCH] = false;
	      return !'/./'[KEY](re);
	    } catch(f){ /* empty */ }
	  } return true;
	};

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.7 String.prototype.includes(searchString, position = 0)
	'use strict';
	var $export  = __webpack_require__(8)
	  , context  = __webpack_require__(133)
	  , INCLUDES = 'includes';
	
	$export($export.P + $export.F * __webpack_require__(135)(INCLUDES), 'String', {
	  includes: function includes(searchString /*, position = 0 */){
	    return !!~context(this, searchString, INCLUDES)
	      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	
	$export($export.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: __webpack_require__(91)
	});

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
	'use strict';
	var $export     = __webpack_require__(8)
	  , toLength    = __webpack_require__(37)
	  , context     = __webpack_require__(133)
	  , STARTS_WITH = 'startsWith'
	  , $startsWith = ''[STARTS_WITH];
	
	$export($export.P + $export.F * __webpack_require__(135)(STARTS_WITH), 'String', {
	  startsWith: function startsWith(searchString /*, position = 0 */){
	    var that   = context(this, searchString, STARTS_WITH)
	      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))
	      , search = String(searchString);
	    return $startsWith
	      ? $startsWith.call(that, search, index)
	      : that.slice(index, index + search.length) === search;
	  }
	});

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.2 String.prototype.anchor(name)
	__webpack_require__(140)('anchor', function(createHTML){
	  return function anchor(name){
	    return createHTML(this, 'a', 'name', name);
	  }
	});

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8)
	  , fails   = __webpack_require__(7)
	  , defined = __webpack_require__(35)
	  , quot    = /"/g;
	// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
	var createHTML = function(string, tag, attribute, value) {
	  var S  = String(defined(string))
	    , p1 = '<' + tag;
	  if(attribute !== '')p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};
	module.exports = function(NAME, exec){
	  var O = {};
	  O[NAME] = exec(createHTML);
	  $export($export.P + $export.F * fails(function(){
	    var test = ''[NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  }), 'String', O);
	};

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.3 String.prototype.big()
	__webpack_require__(140)('big', function(createHTML){
	  return function big(){
	    return createHTML(this, 'big', '', '');
	  }
	});

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.4 String.prototype.blink()
	__webpack_require__(140)('blink', function(createHTML){
	  return function blink(){
	    return createHTML(this, 'blink', '', '');
	  }
	});

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.5 String.prototype.bold()
	__webpack_require__(140)('bold', function(createHTML){
	  return function bold(){
	    return createHTML(this, 'b', '', '');
	  }
	});

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.6 String.prototype.fixed()
	__webpack_require__(140)('fixed', function(createHTML){
	  return function fixed(){
	    return createHTML(this, 'tt', '', '');
	  }
	});

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.7 String.prototype.fontcolor(color)
	__webpack_require__(140)('fontcolor', function(createHTML){
	  return function fontcolor(color){
	    return createHTML(this, 'font', 'color', color);
	  }
	});

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.8 String.prototype.fontsize(size)
	__webpack_require__(140)('fontsize', function(createHTML){
	  return function fontsize(size){
	    return createHTML(this, 'font', 'size', size);
	  }
	});

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.9 String.prototype.italics()
	__webpack_require__(140)('italics', function(createHTML){
	  return function italics(){
	    return createHTML(this, 'i', '', '');
	  }
	});

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.10 String.prototype.link(url)
	__webpack_require__(140)('link', function(createHTML){
	  return function link(url){
	    return createHTML(this, 'a', 'href', url);
	  }
	});

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.11 String.prototype.small()
	__webpack_require__(140)('small', function(createHTML){
	  return function small(){
	    return createHTML(this, 'small', '', '');
	  }
	});

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.12 String.prototype.strike()
	__webpack_require__(140)('strike', function(createHTML){
	  return function strike(){
	    return createHTML(this, 'strike', '', '');
	  }
	});

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.13 String.prototype.sub()
	__webpack_require__(140)('sub', function(createHTML){
	  return function sub(){
	    return createHTML(this, 'sub', '', '');
	  }
	});

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.14 String.prototype.sup()
	__webpack_require__(140)('sup', function(createHTML){
	  return function sup(){
	    return createHTML(this, 'sup', '', '');
	  }
	});

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	// 20.3.3.1 / 15.9.4.4 Date.now()
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export     = __webpack_require__(8)
	  , toObject    = __webpack_require__(58)
	  , toPrimitive = __webpack_require__(16);
	
	$export($export.P + $export.F * __webpack_require__(7)(function(){
	  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;
	}), 'Date', {
	  toJSON: function toJSON(key){
	    var O  = toObject(this)
	      , pv = toPrimitive(O);
	    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
	  }
	});

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	var $export = __webpack_require__(8)
	  , fails   = __webpack_require__(7)
	  , getTime = Date.prototype.getTime;
	
	var lz = function(num){
	  return num > 9 ? num : '0' + num;
	};
	
	// PhantomJS / old WebKit has a broken implementations
	$export($export.P + $export.F * (fails(function(){
	  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
	}) || !fails(function(){
	  new Date(NaN).toISOString();
	})), 'Date', {
	  toISOString: function toISOString(){
	    if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');
	    var d = this
	      , y = d.getUTCFullYear()
	      , m = d.getUTCMilliseconds()
	      , s = y < 0 ? '-' : y > 9999 ? '+' : '';
	    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
	      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
	      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
	      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
	  }
	});

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	var DateProto    = Date.prototype
	  , INVALID_DATE = 'Invalid Date'
	  , TO_STRING    = 'toString'
	  , $toString    = DateProto[TO_STRING]
	  , getTime      = DateProto.getTime;
	if(new Date(NaN) + '' != INVALID_DATE){
	  __webpack_require__(18)(DateProto, TO_STRING, function toString(){
	    var value = getTime.call(this);
	    return value === value ? $toString.call(this) : INVALID_DATE;
	  });
	}

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	var TO_PRIMITIVE = __webpack_require__(25)('toPrimitive')
	  , proto        = Date.prototype;
	
	if(!(TO_PRIMITIVE in proto))__webpack_require__(10)(proto, TO_PRIMITIVE, __webpack_require__(158));

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var anObject    = __webpack_require__(12)
	  , toPrimitive = __webpack_require__(16)
	  , NUMBER      = 'number';
	
	module.exports = function(hint){
	  if(hint !== 'string' && hint !== NUMBER && hint !== 'default')throw TypeError('Incorrect hint');
	  return toPrimitive(anObject(this), hint != NUMBER);
	};

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Array', {isArray: __webpack_require__(45)});

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ctx            = __webpack_require__(20)
	  , $export        = __webpack_require__(8)
	  , toObject       = __webpack_require__(58)
	  , call           = __webpack_require__(161)
	  , isArrayIter    = __webpack_require__(162)
	  , toLength       = __webpack_require__(37)
	  , createProperty = __webpack_require__(163)
	  , getIterFn      = __webpack_require__(164);
	
	$export($export.S + $export.F * !__webpack_require__(165)(function(iter){ Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
	    var O       = toObject(arrayLike)
	      , C       = typeof this == 'function' ? this : Array
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , index   = 0
	      , iterFn  = getIterFn(O)
	      , length, result, step, iterator;
	    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
	      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for(result = new C(length); length > index; index++){
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(12);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(129)
	  , ITERATOR   = __webpack_require__(25)('iterator')
	  , ArrayProto = Array.prototype;
	
	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $defineProperty = __webpack_require__(11)
	  , createDesc      = __webpack_require__(17);
	
	module.exports = function(object, index, value){
	  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(75)
	  , ITERATOR  = __webpack_require__(25)('iterator')
	  , Iterators = __webpack_require__(129);
	module.exports = __webpack_require__(9).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(25)('iterator')
	  , SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	
	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export        = __webpack_require__(8)
	  , createProperty = __webpack_require__(163);
	
	// WebKit Array.of isn't generic
	$export($export.S + $export.F * __webpack_require__(7)(function(){
	  function F(){}
	  return !(Array.of.call(F) instanceof F);
	}), 'Array', {
	  // 22.1.2.3 Array.of( ...items)
	  of: function of(/* ...args */){
	    var index  = 0
	      , aLen   = arguments.length
	      , result = new (typeof this == 'function' ? this : Array)(aLen);
	    while(aLen > index)createProperty(result, index, arguments[index++]);
	    result.length = aLen;
	    return result;
	  }
	});

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.13 Array.prototype.join(separator)
	var $export   = __webpack_require__(8)
	  , toIObject = __webpack_require__(32)
	  , arrayJoin = [].join;
	
	// fallback for not array-like strings
	$export($export.P + $export.F * (__webpack_require__(33) != Object || !__webpack_require__(168)(arrayJoin)), 'Array', {
	  join: function join(separator){
	    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
	  }
	});

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var fails = __webpack_require__(7);
	
	module.exports = function(method, arg){
	  return !!method && fails(function(){
	    arg ? method.call(null, function(){}, 1) : method.call(null);
	  });
	};

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export    = __webpack_require__(8)
	  , html       = __webpack_require__(48)
	  , cof        = __webpack_require__(34)
	  , toIndex    = __webpack_require__(39)
	  , toLength   = __webpack_require__(37)
	  , arraySlice = [].slice;
	
	// fallback for not array-like ES3 strings and DOM objects
	$export($export.P + $export.F * __webpack_require__(7)(function(){
	  if(html)arraySlice.call(html);
	}), 'Array', {
	  slice: function slice(begin, end){
	    var len   = toLength(this.length)
	      , klass = cof(this);
	    end = end === undefined ? len : end;
	    if(klass == 'Array')return arraySlice.call(this, begin, end);
	    var start  = toIndex(begin, len)
	      , upTo   = toIndex(end, len)
	      , size   = toLength(upTo - start)
	      , cloned = Array(size)
	      , i      = 0;
	    for(; i < size; i++)cloned[i] = klass == 'String'
	      ? this.charAt(start + i)
	      : this[start + i];
	    return cloned;
	  }
	});

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export   = __webpack_require__(8)
	  , aFunction = __webpack_require__(21)
	  , toObject  = __webpack_require__(58)
	  , fails     = __webpack_require__(7)
	  , $sort     = [].sort
	  , test      = [1, 2, 3];
	
	$export($export.P + $export.F * (fails(function(){
	  // IE8-
	  test.sort(undefined);
	}) || !fails(function(){
	  // V8 bug
	  test.sort(null);
	  // Old WebKit
	}) || !__webpack_require__(168)($sort)), 'Array', {
	  // 22.1.3.25 Array.prototype.sort(comparefn)
	  sort: function sort(comparefn){
	    return comparefn === undefined
	      ? $sort.call(toObject(this))
	      : $sort.call(toObject(this), aFunction(comparefn));
	  }
	});

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export  = __webpack_require__(8)
	  , $forEach = __webpack_require__(172)(0)
	  , STRICT   = __webpack_require__(168)([].forEach, true);
	
	$export($export.P + $export.F * !STRICT, 'Array', {
	  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
	  forEach: function forEach(callbackfn /* , thisArg */){
	    return $forEach(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx      = __webpack_require__(20)
	  , IObject  = __webpack_require__(33)
	  , toObject = __webpack_require__(58)
	  , toLength = __webpack_require__(37)
	  , asc      = __webpack_require__(173);
	module.exports = function(TYPE, $create){
	  var IS_MAP        = TYPE == 1
	    , IS_FILTER     = TYPE == 2
	    , IS_SOME       = TYPE == 3
	    , IS_EVERY      = TYPE == 4
	    , IS_FIND_INDEX = TYPE == 6
	    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
	    , create        = $create || asc;
	  return function($this, callbackfn, that){
	    var O      = toObject($this)
	      , self   = IObject(O)
	      , f      = ctx(callbackfn, that, 3)
	      , length = toLength(self.length)
	      , index  = 0
	      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
	      , val, res;
	    for(;length > index; index++)if(NO_HOLES || index in self){
	      val = self[index];
	      res = f(val, index, O);
	      if(TYPE){
	        if(IS_MAP)result[index] = res;            // map
	        else if(res)switch(TYPE){
	          case 3: return true;                    // some
	          case 5: return val;                     // find
	          case 6: return index;                   // findIndex
	          case 2: result.push(val);               // filter
	        } else if(IS_EVERY)return false;          // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(174);
	
	module.exports = function(original, length){
	  return new (speciesConstructor(original))(length);
	};

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13)
	  , isArray  = __webpack_require__(45)
	  , SPECIES  = __webpack_require__(25)('species');
	
	module.exports = function(original){
	  var C;
	  if(isArray(original)){
	    C = original.constructor;
	    // cross-realm fallback
	    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
	    if(isObject(C)){
	      C = C[SPECIES];
	      if(C === null)C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $map    = __webpack_require__(172)(1);
	
	$export($export.P + $export.F * !__webpack_require__(168)([].map, true), 'Array', {
	  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
	  map: function map(callbackfn /* , thisArg */){
	    return $map(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $filter = __webpack_require__(172)(2);
	
	$export($export.P + $export.F * !__webpack_require__(168)([].filter, true), 'Array', {
	  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
	  filter: function filter(callbackfn /* , thisArg */){
	    return $filter(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $some   = __webpack_require__(172)(3);
	
	$export($export.P + $export.F * !__webpack_require__(168)([].some, true), 'Array', {
	  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
	  some: function some(callbackfn /* , thisArg */){
	    return $some(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $every  = __webpack_require__(172)(4);
	
	$export($export.P + $export.F * !__webpack_require__(168)([].every, true), 'Array', {
	  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
	  every: function every(callbackfn /* , thisArg */){
	    return $every(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $reduce = __webpack_require__(180);
	
	$export($export.P + $export.F * !__webpack_require__(168)([].reduce, true), 'Array', {
	  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
	  reduce: function reduce(callbackfn /* , initialValue */){
	    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
	  }
	});

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	var aFunction = __webpack_require__(21)
	  , toObject  = __webpack_require__(58)
	  , IObject   = __webpack_require__(33)
	  , toLength  = __webpack_require__(37);
	
	module.exports = function(that, callbackfn, aLen, memo, isRight){
	  aFunction(callbackfn);
	  var O      = toObject(that)
	    , self   = IObject(O)
	    , length = toLength(O.length)
	    , index  = isRight ? length - 1 : 0
	    , i      = isRight ? -1 : 1;
	  if(aLen < 2)for(;;){
	    if(index in self){
	      memo = self[index];
	      index += i;
	      break;
	    }
	    index += i;
	    if(isRight ? index < 0 : length <= index){
	      throw TypeError('Reduce of empty array with no initial value');
	    }
	  }
	  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){
	    memo = callbackfn(memo, self[index], index, O);
	  }
	  return memo;
	};

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(8)
	  , $reduce = __webpack_require__(180);
	
	$export($export.P + $export.F * !__webpack_require__(168)([].reduceRight, true), 'Array', {
	  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
	  reduceRight: function reduceRight(callbackfn /* , initialValue */){
	    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
	  }
	});

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export       = __webpack_require__(8)
	  , $indexOf      = __webpack_require__(36)(false)
	  , $native       = [].indexOf
	  , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
	
	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(168)($native)), 'Array', {
	  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
	  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? $native.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments[1]);
	  }
	});

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export       = __webpack_require__(8)
	  , toIObject     = __webpack_require__(32)
	  , toInteger     = __webpack_require__(38)
	  , toLength      = __webpack_require__(37)
	  , $native       = [].lastIndexOf
	  , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
	
	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(168)($native)), 'Array', {
	  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
	  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){
	    // convert -0 to +0
	    if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;
	    var O      = toIObject(this)
	      , length = toLength(O.length)
	      , index  = length - 1;
	    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));
	    if(index < 0)index = length + index;
	    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;
	    return -1;
	  }
	});

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	var $export = __webpack_require__(8);
	
	$export($export.P, 'Array', {copyWithin: __webpack_require__(185)});
	
	__webpack_require__(186)('copyWithin');

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	'use strict';
	var toObject = __webpack_require__(58)
	  , toIndex  = __webpack_require__(39)
	  , toLength = __webpack_require__(37);
	
	module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
	  var O     = toObject(this)
	    , len   = toLength(O.length)
	    , to    = toIndex(target, len)
	    , from  = toIndex(start, len)
	    , end   = arguments.length > 2 ? arguments[2] : undefined
	    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
	    , inc   = 1;
	  if(from < to && to < from + count){
	    inc  = -1;
	    from += count - 1;
	    to   += count - 1;
	  }
	  while(count-- > 0){
	    if(from in O)O[to] = O[from];
	    else delete O[to];
	    to   += inc;
	    from += inc;
	  } return O;
	};

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = __webpack_require__(25)('unscopables')
	  , ArrayProto  = Array.prototype;
	if(ArrayProto[UNSCOPABLES] == undefined)__webpack_require__(10)(ArrayProto, UNSCOPABLES, {});
	module.exports = function(key){
	  ArrayProto[UNSCOPABLES][key] = true;
	};

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	var $export = __webpack_require__(8);
	
	$export($export.P, 'Array', {fill: __webpack_require__(188)});
	
	__webpack_require__(186)('fill');

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	'use strict';
	var toObject = __webpack_require__(58)
	  , toIndex  = __webpack_require__(39)
	  , toLength = __webpack_require__(37);
	module.exports = function fill(value /*, start = 0, end = @length */){
	  var O      = toObject(this)
	    , length = toLength(O.length)
	    , aLen   = arguments.length
	    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)
	    , end    = aLen > 2 ? arguments[2] : undefined
	    , endPos = end === undefined ? length : toIndex(end, length);
	  while(endPos > index)O[index++] = value;
	  return O;
	};

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
	var $export = __webpack_require__(8)
	  , $find   = __webpack_require__(172)(5)
	  , KEY     = 'find'
	  , forced  = true;
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  find: function find(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(186)(KEY);

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
	var $export = __webpack_require__(8)
	  , $find   = __webpack_require__(172)(6)
	  , KEY     = 'findIndex'
	  , forced  = true;
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  findIndex: function findIndex(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(186)(KEY);

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(192)('Array');

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global      = __webpack_require__(4)
	  , dP          = __webpack_require__(11)
	  , DESCRIPTORS = __webpack_require__(6)
	  , SPECIES     = __webpack_require__(25)('species');
	
	module.exports = function(KEY){
	  var C = global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(186)
	  , step             = __webpack_require__(194)
	  , Iterators        = __webpack_require__(129)
	  , toIObject        = __webpack_require__(32);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(128)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 194 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	var global            = __webpack_require__(4)
	  , inheritIfRequired = __webpack_require__(88)
	  , dP                = __webpack_require__(11).f
	  , gOPN              = __webpack_require__(50).f
	  , isRegExp          = __webpack_require__(134)
	  , $flags            = __webpack_require__(196)
	  , $RegExp           = global.RegExp
	  , Base              = $RegExp
	  , proto             = $RegExp.prototype
	  , re1               = /a/g
	  , re2               = /a/g
	  // "new" creates a new object, old webkit buggy here
	  , CORRECT_NEW       = new $RegExp(re1) !== re1;
	
	if(__webpack_require__(6) && (!CORRECT_NEW || __webpack_require__(7)(function(){
	  re2[__webpack_require__(25)('match')] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
	}))){
	  $RegExp = function RegExp(p, f){
	    var tiRE = this instanceof $RegExp
	      , piRE = isRegExp(p)
	      , fiU  = f === undefined;
	    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
	      : inheritIfRequired(CORRECT_NEW
	        ? new Base(piRE && !fiU ? p.source : p, f)
	        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
	      , tiRE ? this : proto, $RegExp);
	  };
	  var proxy = function(key){
	    key in $RegExp || dP($RegExp, key, {
	      configurable: true,
	      get: function(){ return Base[key]; },
	      set: function(it){ Base[key] = it; }
	    });
	  };
	  for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);
	  proto.constructor = $RegExp;
	  $RegExp.prototype = proto;
	  __webpack_require__(18)(global, 'RegExp', $RegExp);
	}
	
	__webpack_require__(192)('RegExp');

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 21.2.5.3 get RegExp.prototype.flags
	var anObject = __webpack_require__(12);
	module.exports = function(){
	  var that   = anObject(this)
	    , result = '';
	  if(that.global)     result += 'g';
	  if(that.ignoreCase) result += 'i';
	  if(that.multiline)  result += 'm';
	  if(that.unicode)    result += 'u';
	  if(that.sticky)     result += 'y';
	  return result;
	};

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	__webpack_require__(198);
	var anObject    = __webpack_require__(12)
	  , $flags      = __webpack_require__(196)
	  , DESCRIPTORS = __webpack_require__(6)
	  , TO_STRING   = 'toString'
	  , $toString   = /./[TO_STRING];
	
	var define = function(fn){
	  __webpack_require__(18)(RegExp.prototype, TO_STRING, fn, true);
	};
	
	// 21.2.5.14 RegExp.prototype.toString()
	if(__webpack_require__(7)(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){
	  define(function toString(){
	    var R = anObject(this);
	    return '/'.concat(R.source, '/',
	      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
	  });
	// FF44- RegExp#toString has a wrong name
	} else if($toString.name != TO_STRING){
	  define(function toString(){
	    return $toString.call(this);
	  });
	}

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	// 21.2.5.3 get RegExp.prototype.flags()
	if(__webpack_require__(6) && /./g.flags != 'g')__webpack_require__(11).f(RegExp.prototype, 'flags', {
	  configurable: true,
	  get: __webpack_require__(196)
	});

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	// @@match logic
	__webpack_require__(200)('match', 1, function(defined, MATCH, $match){
	  // 21.1.3.11 String.prototype.match(regexp)
	  return [function match(regexp){
	    'use strict';
	    var O  = defined(this)
	      , fn = regexp == undefined ? undefined : regexp[MATCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
	  }, $match];
	});

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var hide     = __webpack_require__(10)
	  , redefine = __webpack_require__(18)
	  , fails    = __webpack_require__(7)
	  , defined  = __webpack_require__(35)
	  , wks      = __webpack_require__(25);
	
	module.exports = function(KEY, length, exec){
	  var SYMBOL   = wks(KEY)
	    , fns      = exec(defined, SYMBOL, ''[KEY])
	    , strfn    = fns[0]
	    , rxfn     = fns[1];
	  if(fails(function(){
	    var O = {};
	    O[SYMBOL] = function(){ return 7; };
	    return ''[KEY](O) != 7;
	  })){
	    redefine(String.prototype, KEY, strfn);
	    hide(RegExp.prototype, SYMBOL, length == 2
	      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	      ? function(string, arg){ return rxfn.call(string, this, arg); }
	      // 21.2.5.6 RegExp.prototype[@@match](string)
	      // 21.2.5.9 RegExp.prototype[@@search](string)
	      : function(string){ return rxfn.call(string, this); }
	    );
	  }
	};

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	// @@replace logic
	__webpack_require__(200)('replace', 2, function(defined, REPLACE, $replace){
	  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
	  return [function replace(searchValue, replaceValue){
	    'use strict';
	    var O  = defined(this)
	      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
	    return fn !== undefined
	      ? fn.call(searchValue, O, replaceValue)
	      : $replace.call(String(O), searchValue, replaceValue);
	  }, $replace];
	});

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	// @@search logic
	__webpack_require__(200)('search', 1, function(defined, SEARCH, $search){
	  // 21.1.3.15 String.prototype.search(regexp)
	  return [function search(regexp){
	    'use strict';
	    var O  = defined(this)
	      , fn = regexp == undefined ? undefined : regexp[SEARCH];
	    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
	  }, $search];
	});

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	// @@split logic
	__webpack_require__(200)('split', 2, function(defined, SPLIT, $split){
	  'use strict';
	  var isRegExp   = __webpack_require__(134)
	    , _split     = $split
	    , $push      = [].push
	    , $SPLIT     = 'split'
	    , LENGTH     = 'length'
	    , LAST_INDEX = 'lastIndex';
	  if(
	    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
	    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
	    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
	    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
	    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
	    ''[$SPLIT](/.?/)[LENGTH]
	  ){
	    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
	    // based on es5-shim implementation, need to rework it
	    $split = function(separator, limit){
	      var string = String(this);
	      if(separator === undefined && limit === 0)return [];
	      // If `separator` is not a regex, use native split
	      if(!isRegExp(separator))return _split.call(string, separator, limit);
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var separator2, match, lastIndex, lastLength, i;
	      // Doesn't need flags gy, but they don't hurt
	      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
	      while(match = separatorCopy.exec(string)){
	        // `separatorCopy.lastIndex` is not reliable cross-browser
	        lastIndex = match.index + match[0][LENGTH];
	        if(lastIndex > lastLastIndex){
	          output.push(string.slice(lastLastIndex, match.index));
	          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
	          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){
	            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;
	          });
	          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));
	          lastLength = match[0][LENGTH];
	          lastLastIndex = lastIndex;
	          if(output[LENGTH] >= splitLimit)break;
	        }
	        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
	      }
	      if(lastLastIndex === string[LENGTH]){
	        if(lastLength || !separatorCopy.test(''))output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
	    };
	  // Chakra, V8
	  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){
	    $split = function(separator, limit){
	      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
	    };
	  }
	  // 21.1.3.17 String.prototype.split(separator, limit)
	  return [function split(separator, limit){
	    var O  = defined(this)
	      , fn = separator == undefined ? undefined : separator[SPLIT];
	    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
	  }, $split];
	});

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY            = __webpack_require__(28)
	  , global             = __webpack_require__(4)
	  , ctx                = __webpack_require__(20)
	  , classof            = __webpack_require__(75)
	  , $export            = __webpack_require__(8)
	  , isObject           = __webpack_require__(13)
	  , aFunction          = __webpack_require__(21)
	  , anInstance         = __webpack_require__(205)
	  , forOf              = __webpack_require__(206)
	  , speciesConstructor = __webpack_require__(207)
	  , task               = __webpack_require__(208).set
	  , microtask          = __webpack_require__(209)()
	  , PROMISE            = 'Promise'
	  , TypeError          = global.TypeError
	  , process            = global.process
	  , $Promise           = global[PROMISE]
	  , process            = global.process
	  , isNode             = classof(process) == 'process'
	  , empty              = function(){ /* empty */ }
	  , Internal, GenericPromiseCapability, Wrapper;
	
	var USE_NATIVE = !!function(){
	  try {
	    // correct subclassing with @@species support
	    var promise     = $Promise.resolve(1)
	      , FakePromise = (promise.constructor = {})[__webpack_require__(25)('species')] = function(exec){ exec(empty, empty); };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch(e){ /* empty */ }
	}();
	
	// helpers
	var sameConstructor = function(a, b){
	  // with library wrapper special case
	  return a === b || a === $Promise && b === Wrapper;
	};
	var isThenable = function(it){
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var newPromiseCapability = function(C){
	  return sameConstructor($Promise, C)
	    ? new PromiseCapability(C)
	    : new GenericPromiseCapability(C);
	};
	var PromiseCapability = GenericPromiseCapability = function(C){
	  var resolve, reject;
	  this.promise = new C(function($$resolve, $$reject){
	    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject  = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject  = aFunction(reject);
	};
	var perform = function(exec){
	  try {
	    exec();
	  } catch(e){
	    return {error: e};
	  }
	};
	var notify = function(promise, isReject){
	  if(promise._n)return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function(){
	    var value = promise._v
	      , ok    = promise._s == 1
	      , i     = 0;
	    var run = function(reaction){
	      var handler = ok ? reaction.ok : reaction.fail
	        , resolve = reaction.resolve
	        , reject  = reaction.reject
	        , domain  = reaction.domain
	        , result, then;
	      try {
	        if(handler){
	          if(!ok){
	            if(promise._h == 2)onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if(handler === true)result = value;
	          else {
	            if(domain)domain.enter();
	            result = handler(value);
	            if(domain)domain.exit();
	          }
	          if(result === reaction.promise){
	            reject(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(result)){
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch(e){
	        reject(e);
	      }
	    };
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if(isReject && !promise._h)onUnhandled(promise);
	  });
	};
	var onUnhandled = function(promise){
	  task.call(global, function(){
	    var value = promise._v
	      , abrupt, handler, console;
	    if(isUnhandled(promise)){
	      abrupt = perform(function(){
	        if(isNode){
	          process.emit('unhandledRejection', value, promise);
	        } else if(handler = global.onunhandledrejection){
	          handler({promise: promise, reason: value});
	        } else if((console = global.console) && console.error){
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if(abrupt)throw abrupt.error;
	  });
	};
	var isUnhandled = function(promise){
	  if(promise._h == 1)return false;
	  var chain = promise._a || promise._c
	    , i     = 0
	    , reaction;
	  while(chain.length > i){
	    reaction = chain[i++];
	    if(reaction.fail || !isUnhandled(reaction.promise))return false;
	  } return true;
	};
	var onHandleUnhandled = function(promise){
	  task.call(global, function(){
	    var handler;
	    if(isNode){
	      process.emit('rejectionHandled', promise);
	    } else if(handler = global.onrejectionhandled){
	      handler({promise: promise, reason: promise._v});
	    }
	  });
	};
	var $reject = function(value){
	  var promise = this;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if(!promise._a)promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function(value){
	  var promise = this
	    , then;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if(promise === value)throw TypeError("Promise can't be resolved itself");
	    if(then = isThenable(value)){
	      microtask(function(){
	        var wrapper = {_w: promise, _d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch(e){
	    $reject.call({_w: promise, _d: false}, e); // wrap
	  }
	};
	
	// constructor polyfill
	if(!USE_NATIVE){
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor){
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch(err){
	      $reject.call(this, err);
	    }
	  };
	  Internal = function Promise(executor){
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(210)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail   = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if(this._a)this._a.push(reaction);
	      if(this._s)notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	  PromiseCapability = function(){
	    var promise  = new Internal;
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject  = ctx($reject, promise, 1);
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
	__webpack_require__(24)($Promise, PROMISE);
	__webpack_require__(192)(PROMISE);
	Wrapper = __webpack_require__(9)[PROMISE];
	
	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    var capability = newPromiseCapability(this)
	      , $$reject   = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
	    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
	    var capability = newPromiseCapability(this)
	      , $$resolve  = capability.resolve;
	    $$resolve(x);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(165)(function(iter){
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , resolve    = capability.resolve
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      var values    = []
	        , index     = 0
	        , remaining = 1;
	      forOf(iterable, false, function(promise){
	        var $index        = index++
	          , alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function(value){
	          if(alreadyCalled)return;
	          alreadyCalled  = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  }
	});

/***/ },
/* 205 */
/***/ function(module, exports) {

	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(20)
	  , call        = __webpack_require__(161)
	  , isArrayIter = __webpack_require__(162)
	  , anObject    = __webpack_require__(12)
	  , toLength    = __webpack_require__(37)
	  , getIterFn   = __webpack_require__(164)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject  = __webpack_require__(12)
	  , aFunction = __webpack_require__(21)
	  , SPECIES   = __webpack_require__(25)('species');
	module.exports = function(O, D){
	  var C = anObject(O).constructor, S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var ctx                = __webpack_require__(20)
	  , invoke             = __webpack_require__(78)
	  , html               = __webpack_require__(48)
	  , cel                = __webpack_require__(15)
	  , global             = __webpack_require__(4)
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	var run = function(){
	  var id = +this;
	  if(queue.hasOwnProperty(id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function(event){
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!setTask || !clearTask){
	  setTask = function setImmediate(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(__webpack_require__(34)(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if(MessageChannel){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(4)
	  , macrotask = __webpack_require__(208).set
	  , Observer  = global.MutationObserver || global.WebKitMutationObserver
	  , process   = global.process
	  , Promise   = global.Promise
	  , isNode    = __webpack_require__(34)(process) == 'process';
	
	module.exports = function(){
	  var head, last, notify;
	
	  var flush = function(){
	    var parent, fn;
	    if(isNode && (parent = process.domain))parent.exit();
	    while(head){
	      fn   = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch(e){
	        if(head)notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if(parent)parent.enter();
	  };
	
	  // Node.js
	  if(isNode){
	    notify = function(){
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver
	  } else if(Observer){
	    var toggle = true
	      , node   = document.createTextNode('');
	    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
	    notify = function(){
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if(Promise && Promise.resolve){
	    var promise = Promise.resolve();
	    notify = function(){
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function(){
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }
	
	  return function(fn){
	    var task = {fn: fn, next: undefined};
	    if(last)last.next = task;
	    if(!head){
	      head = task;
	      notify();
	    } last = task;
	  };
	};

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	var redefine = __webpack_require__(18);
	module.exports = function(target, src, safe){
	  for(var key in src)redefine(target, key, src[key], safe);
	  return target;
	};

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(212);
	
	// 23.1 Map Objects
	module.exports = __webpack_require__(213)('Map', function(get){
	  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key){
	    var entry = strong.getEntry(this, key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value){
	    return strong.def(this, key === 0 ? 0 : key, value);
	  }
	}, strong, true);

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var dP          = __webpack_require__(11).f
	  , create      = __webpack_require__(46)
	  , redefineAll = __webpack_require__(210)
	  , ctx         = __webpack_require__(20)
	  , anInstance  = __webpack_require__(205)
	  , defined     = __webpack_require__(35)
	  , forOf       = __webpack_require__(206)
	  , $iterDefine = __webpack_require__(128)
	  , step        = __webpack_require__(194)
	  , setSpecies  = __webpack_require__(192)
	  , DESCRIPTORS = __webpack_require__(6)
	  , fastKey     = __webpack_require__(22).fastKey
	  , SIZE        = DESCRIPTORS ? '_s' : 'size';
	
	var getEntry = function(that, key){
	  // fast case
	  var index = fastKey(key), entry;
	  if(index !== 'F')return that._i[index];
	  // frozen object case
	  for(entry = that._f; entry; entry = entry.n){
	    if(entry.k == key)return entry;
	  }
	};
	
	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear(){
	        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
	          entry.r = true;
	          if(entry.p)entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function(key){
	        var that  = this
	          , entry = getEntry(that, key);
	        if(entry){
	          var next = entry.n
	            , prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if(prev)prev.n = next;
	          if(next)next.p = prev;
	          if(that._f == entry)that._f = next;
	          if(that._l == entry)that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /*, that = undefined */){
	        anInstance(this, C, 'forEach');
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
	          , entry;
	        while(entry = entry ? entry.n : this._f){
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while(entry && entry.r)entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key){
	        return !!getEntry(this, key);
	      }
	    });
	    if(DESCRIPTORS)dP(C.prototype, 'size', {
	      get: function(){
	        return defined(this[SIZE]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var entry = getEntry(that, key)
	      , prev, index;
	    // change existing entry
	    if(entry){
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if(!that._f)that._f = entry;
	      if(prev)prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if(index !== 'F')that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function(C, NAME, IS_MAP){
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function(iterated, kind){
	      this._t = iterated;  // target
	      this._k = kind;      // kind
	      this._l = undefined; // previous
	    }, function(){
	      var that  = this
	        , kind  = that._k
	        , entry = that._l;
	      // revert to the last existing entry
	      while(entry && entry.r)entry = entry.p;
	      // get next entry
	      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if(kind == 'keys'  )return step(0, entry.k);
	      if(kind == 'values')return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);
	
	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global            = __webpack_require__(4)
	  , $export           = __webpack_require__(8)
	  , redefine          = __webpack_require__(18)
	  , redefineAll       = __webpack_require__(210)
	  , meta              = __webpack_require__(22)
	  , forOf             = __webpack_require__(206)
	  , anInstance        = __webpack_require__(205)
	  , isObject          = __webpack_require__(13)
	  , fails             = __webpack_require__(7)
	  , $iterDetect       = __webpack_require__(165)
	  , setToStringTag    = __webpack_require__(24)
	  , inheritIfRequired = __webpack_require__(88);
	
	module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
	  var Base  = global[NAME]
	    , C     = Base
	    , ADDER = IS_MAP ? 'set' : 'add'
	    , proto = C && C.prototype
	    , O     = {};
	  var fixMethod = function(KEY){
	    var fn = proto[KEY];
	    redefine(proto, KEY,
	      KEY == 'delete' ? function(a){
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'has' ? function has(a){
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'get' ? function get(a){
	        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
	        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
	    );
	  };
	  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
	    new C().entries().next();
	  }))){
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    var instance             = new C
	      // early implementations not supports chaining
	      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
	      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
	      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
	      // most early implementations doesn't supports iterables, most modern - not close it correctly
	      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
	      // for early implementations -0 and +0 not the same
	      , BUGGY_ZERO = !IS_WEAK && fails(function(){
	        // V8 ~ Chromium 42- fails only with 5+ elements
	        var $instance = new C()
	          , index     = 5;
	        while(index--)$instance[ADDER](index, index);
	        return !$instance.has(-0);
	      });
	    if(!ACCEPT_ITERABLES){ 
	      C = wrapper(function(target, iterable){
	        anInstance(target, C, NAME);
	        var that = inheritIfRequired(new Base, target, C);
	        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
	    // weak collections should not contains .clear method
	    if(IS_WEAK && proto.clear)delete proto.clear;
	  }
	
	  setToStringTag(C, NAME);
	
	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F * (C != Base), O);
	
	  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);
	
	  return C;
	};

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(212);
	
	// 23.2 Set Objects
	module.exports = __webpack_require__(213)('Set', function(get){
	  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value){
	    return strong.def(this, value = value === 0 ? 0 : value, value);
	  }
	}, strong);

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var each         = __webpack_require__(172)(0)
	  , redefine     = __webpack_require__(18)
	  , meta         = __webpack_require__(22)
	  , assign       = __webpack_require__(69)
	  , weak         = __webpack_require__(216)
	  , isObject     = __webpack_require__(13)
	  , getWeak      = meta.getWeak
	  , isExtensible = Object.isExtensible
	  , uncaughtFrozenStore = weak.ufstore
	  , tmp          = {}
	  , InternalMap;
	
	var wrapper = function(get){
	  return function WeakMap(){
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	};
	
	var methods = {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key){
	    if(isObject(key)){
	      var data = getWeak(key);
	      if(data === true)return uncaughtFrozenStore(this).get(key);
	      return data ? data[this._i] : undefined;
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value){
	    return weak.def(this, key, value);
	  }
	};
	
	// 23.3 WeakMap Objects
	var $WeakMap = module.exports = __webpack_require__(213)('WeakMap', wrapper, methods, weak, true, true);
	
	// IE11 WeakMap frozen keys fix
	if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
	  InternalMap = weak.getConstructor(wrapper);
	  assign(InternalMap.prototype, methods);
	  meta.NEED = true;
	  each(['delete', 'has', 'get', 'set'], function(key){
	    var proto  = $WeakMap.prototype
	      , method = proto[key];
	    redefine(proto, key, function(a, b){
	      // store frozen objects on internal weakmap shim
	      if(isObject(a) && !isExtensible(a)){
	        if(!this._f)this._f = new InternalMap;
	        var result = this._f[key](a, b);
	        return key == 'set' ? this : result;
	      // store all the rest on native weakmap
	      } return method.call(this, a, b);
	    });
	  });
	}

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var redefineAll       = __webpack_require__(210)
	  , getWeak           = __webpack_require__(22).getWeak
	  , anObject          = __webpack_require__(12)
	  , isObject          = __webpack_require__(13)
	  , anInstance        = __webpack_require__(205)
	  , forOf             = __webpack_require__(206)
	  , createArrayMethod = __webpack_require__(172)
	  , $has              = __webpack_require__(5)
	  , arrayFind         = createArrayMethod(5)
	  , arrayFindIndex    = createArrayMethod(6)
	  , id                = 0;
	
	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function(that){
	  return that._l || (that._l = new UncaughtFrozenStore);
	};
	var UncaughtFrozenStore = function(){
	  this.a = [];
	};
	var findUncaughtFrozen = function(store, key){
	  return arrayFind(store.a, function(it){
	    return it[0] === key;
	  });
	};
	UncaughtFrozenStore.prototype = {
	  get: function(key){
	    var entry = findUncaughtFrozen(this, key);
	    if(entry)return entry[1];
	  },
	  has: function(key){
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function(key, value){
	    var entry = findUncaughtFrozen(this, key);
	    if(entry)entry[1] = value;
	    else this.a.push([key, value]);
	  },
	  'delete': function(key){
	    var index = arrayFindIndex(this.a, function(it){
	      return it[0] === key;
	    });
	    if(~index)this.a.splice(index, 1);
	    return !!~index;
	  }
	};
	
	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = id++;      // collection id
	      that._l = undefined; // leak store for uncaught frozen objects
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function(key){
	        if(!isObject(key))return false;
	        var data = getWeak(key);
	        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
	        return data && $has(data, this._i) && delete data[this._i];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key){
	        if(!isObject(key))return false;
	        var data = getWeak(key);
	        if(data === true)return uncaughtFrozenStore(this).has(key);
	        return data && $has(data, this._i);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var data = getWeak(anObject(key), true);
	    if(data === true)uncaughtFrozenStore(that).set(key, value);
	    else data[that._i] = value;
	    return that;
	  },
	  ufstore: uncaughtFrozenStore
	};

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var weak = __webpack_require__(216);
	
	// 23.4 WeakSet Objects
	__webpack_require__(213)('WeakSet', function(get){
	  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.4.3.1 WeakSet.prototype.add(value)
	  add: function add(value){
	    return weak.def(this, value, true);
	  }
	}, weak, false, true);

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(8)
	  , $typed       = __webpack_require__(219)
	  , buffer       = __webpack_require__(220)
	  , anObject     = __webpack_require__(12)
	  , toIndex      = __webpack_require__(39)
	  , toLength     = __webpack_require__(37)
	  , isObject     = __webpack_require__(13)
	  , ArrayBuffer  = __webpack_require__(4).ArrayBuffer
	  , speciesConstructor = __webpack_require__(207)
	  , $ArrayBuffer = buffer.ArrayBuffer
	  , $DataView    = buffer.DataView
	  , $isView      = $typed.ABV && ArrayBuffer.isView
	  , $slice       = $ArrayBuffer.prototype.slice
	  , VIEW         = $typed.VIEW
	  , ARRAY_BUFFER = 'ArrayBuffer';
	
	$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});
	
	$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
	  // 24.1.3.1 ArrayBuffer.isView(arg)
	  isView: function isView(it){
	    return $isView && $isView(it) || isObject(it) && VIEW in it;
	  }
	});
	
	$export($export.P + $export.U + $export.F * __webpack_require__(7)(function(){
	  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
	}), ARRAY_BUFFER, {
	  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
	  slice: function slice(start, end){
	    if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix
	    var len    = anObject(this).byteLength
	      , first  = toIndex(start, len)
	      , final  = toIndex(end === undefined ? len : end, len)
	      , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))
	      , viewS  = new $DataView(this)
	      , viewT  = new $DataView(result)
	      , index  = 0;
	    while(first < final){
	      viewT.setUint8(index++, viewS.getUint8(first++));
	    } return result;
	  }
	});
	
	__webpack_require__(192)(ARRAY_BUFFER);

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(4)
	  , hide   = __webpack_require__(10)
	  , uid    = __webpack_require__(19)
	  , TYPED  = uid('typed_array')
	  , VIEW   = uid('view')
	  , ABV    = !!(global.ArrayBuffer && global.DataView)
	  , CONSTR = ABV
	  , i = 0, l = 9, Typed;
	
	var TypedArrayConstructors = (
	  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
	).split(',');
	
	while(i < l){
	  if(Typed = global[TypedArrayConstructors[i++]]){
	    hide(Typed.prototype, TYPED, true);
	    hide(Typed.prototype, VIEW, true);
	  } else CONSTR = false;
	}
	
	module.exports = {
	  ABV:    ABV,
	  CONSTR: CONSTR,
	  TYPED:  TYPED,
	  VIEW:   VIEW
	};

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global         = __webpack_require__(4)
	  , DESCRIPTORS    = __webpack_require__(6)
	  , LIBRARY        = __webpack_require__(28)
	  , $typed         = __webpack_require__(219)
	  , hide           = __webpack_require__(10)
	  , redefineAll    = __webpack_require__(210)
	  , fails          = __webpack_require__(7)
	  , anInstance     = __webpack_require__(205)
	  , toInteger      = __webpack_require__(38)
	  , toLength       = __webpack_require__(37)
	  , gOPN           = __webpack_require__(50).f
	  , dP             = __webpack_require__(11).f
	  , arrayFill      = __webpack_require__(188)
	  , setToStringTag = __webpack_require__(24)
	  , ARRAY_BUFFER   = 'ArrayBuffer'
	  , DATA_VIEW      = 'DataView'
	  , PROTOTYPE      = 'prototype'
	  , WRONG_LENGTH   = 'Wrong length!'
	  , WRONG_INDEX    = 'Wrong index!'
	  , $ArrayBuffer   = global[ARRAY_BUFFER]
	  , $DataView      = global[DATA_VIEW]
	  , Math           = global.Math
	  , RangeError     = global.RangeError
	  , Infinity       = global.Infinity
	  , BaseBuffer     = $ArrayBuffer
	  , abs            = Math.abs
	  , pow            = Math.pow
	  , floor          = Math.floor
	  , log            = Math.log
	  , LN2            = Math.LN2
	  , BUFFER         = 'buffer'
	  , BYTE_LENGTH    = 'byteLength'
	  , BYTE_OFFSET    = 'byteOffset'
	  , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER
	  , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH
	  , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;
	
	// IEEE754 conversions based on https://github.com/feross/ieee754
	var packIEEE754 = function(value, mLen, nBytes){
	  var buffer = Array(nBytes)
	    , eLen   = nBytes * 8 - mLen - 1
	    , eMax   = (1 << eLen) - 1
	    , eBias  = eMax >> 1
	    , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0
	    , i      = 0
	    , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0
	    , e, m, c;
	  value = abs(value)
	  if(value != value || value === Infinity){
	    m = value != value ? 1 : 0;
	    e = eMax;
	  } else {
	    e = floor(log(value) / LN2);
	    if(value * (c = pow(2, -e)) < 1){
	      e--;
	      c *= 2;
	    }
	    if(e + eBias >= 1){
	      value += rt / c;
	    } else {
	      value += rt * pow(2, 1 - eBias);
	    }
	    if(value * c >= 2){
	      e++;
	      c /= 2;
	    }
	    if(e + eBias >= eMax){
	      m = 0;
	      e = eMax;
	    } else if(e + eBias >= 1){
	      m = (value * c - 1) * pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * pow(2, eBias - 1) * pow(2, mLen);
	      e = 0;
	    }
	  }
	  for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
	  e = e << mLen | m;
	  eLen += mLen;
	  for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
	  buffer[--i] |= s * 128;
	  return buffer;
	};
	var unpackIEEE754 = function(buffer, mLen, nBytes){
	  var eLen  = nBytes * 8 - mLen - 1
	    , eMax  = (1 << eLen) - 1
	    , eBias = eMax >> 1
	    , nBits = eLen - 7
	    , i     = nBytes - 1
	    , s     = buffer[i--]
	    , e     = s & 127
	    , m;
	  s >>= 7;
	  for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
	  m = e & (1 << -nBits) - 1;
	  e >>= -nBits;
	  nBits += mLen;
	  for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
	  if(e === 0){
	    e = 1 - eBias;
	  } else if(e === eMax){
	    return m ? NaN : s ? -Infinity : Infinity;
	  } else {
	    m = m + pow(2, mLen);
	    e = e - eBias;
	  } return (s ? -1 : 1) * m * pow(2, e - mLen);
	};
	
	var unpackI32 = function(bytes){
	  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
	};
	var packI8 = function(it){
	  return [it & 0xff];
	};
	var packI16 = function(it){
	  return [it & 0xff, it >> 8 & 0xff];
	};
	var packI32 = function(it){
	  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
	};
	var packF64 = function(it){
	  return packIEEE754(it, 52, 8);
	};
	var packF32 = function(it){
	  return packIEEE754(it, 23, 4);
	};
	
	var addGetter = function(C, key, internal){
	  dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});
	};
	
	var get = function(view, bytes, index, isLittleEndian){
	  var numIndex = +index
	    , intIndex = toInteger(numIndex);
	  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b
	    , start = intIndex + view[$OFFSET]
	    , pack  = store.slice(start, start + bytes);
	  return isLittleEndian ? pack : pack.reverse();
	};
	var set = function(view, bytes, index, conversion, value, isLittleEndian){
	  var numIndex = +index
	    , intIndex = toInteger(numIndex);
	  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b
	    , start = intIndex + view[$OFFSET]
	    , pack  = conversion(+value);
	  for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
	};
	
	var validateArrayBufferArguments = function(that, length){
	  anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
	  var numberLength = +length
	    , byteLength   = toLength(numberLength);
	  if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);
	  return byteLength;
	};
	
	if(!$typed.ABV){
	  $ArrayBuffer = function ArrayBuffer(length){
	    var byteLength = validateArrayBufferArguments(this, length);
	    this._b       = arrayFill.call(Array(byteLength), 0);
	    this[$LENGTH] = byteLength;
	  };
	
	  $DataView = function DataView(buffer, byteOffset, byteLength){
	    anInstance(this, $DataView, DATA_VIEW);
	    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = buffer[$LENGTH]
	      , offset       = toInteger(byteOffset);
	    if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
	    if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);
	    this[$BUFFER] = buffer;
	    this[$OFFSET] = offset;
	    this[$LENGTH] = byteLength;
	  };
	
	  if(DESCRIPTORS){
	    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
	    addGetter($DataView, BUFFER, '_b');
	    addGetter($DataView, BYTE_LENGTH, '_l');
	    addGetter($DataView, BYTE_OFFSET, '_o');
	  }
	
	  redefineAll($DataView[PROTOTYPE], {
	    getInt8: function getInt8(byteOffset){
	      return get(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset){
	      return get(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset /*, littleEndian */){
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset /*, littleEndian */){
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset /*, littleEndian */){
	      return unpackI32(get(this, 4, byteOffset, arguments[1]));
	    },
	    getUint32: function getUint32(byteOffset /*, littleEndian */){
	      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset /*, littleEndian */){
	      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
	    },
	    getFloat64: function getFloat64(byteOffset /*, littleEndian */){
	      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
	    },
	    setInt8: function setInt8(byteOffset, value){
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setUint8: function setUint8(byteOffset, value){
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setInt16: function setInt16(byteOffset, value /*, littleEndian */){
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setUint16: function setUint16(byteOffset, value /*, littleEndian */){
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setInt32: function setInt32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setUint32: function setUint32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){
	      set(this, 4, byteOffset, packF32, value, arguments[2]);
	    },
	    setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){
	      set(this, 8, byteOffset, packF64, value, arguments[2]);
	    }
	  });
	} else {
	  if(!fails(function(){
	    new $ArrayBuffer;     // eslint-disable-line no-new
	  }) || !fails(function(){
	    new $ArrayBuffer(.5); // eslint-disable-line no-new
	  })){
	    $ArrayBuffer = function ArrayBuffer(length){
	      return new BaseBuffer(validateArrayBufferArguments(this, length));
	    };
	    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
	    for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){
	      if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);
	    };
	    if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;
	  }
	  // iOS Safari 7.x bug
	  var view = new $DataView(new $ArrayBuffer(2))
	    , $setInt8 = $DataView[PROTOTYPE].setInt8;
	  view.setInt8(0, 2147483648);
	  view.setInt8(1, 2147483649);
	  if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {
	    setInt8: function setInt8(byteOffset, value){
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value){
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, true);
	}
	setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	setToStringTag($DataView, DATA_VIEW);
	hide($DataView[PROTOTYPE], $typed.VIEW, true);
	exports[ARRAY_BUFFER] = $ArrayBuffer;
	exports[DATA_VIEW] = $DataView;

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(8);
	$export($export.G + $export.W + $export.F * !__webpack_require__(219).ABV, {
	  DataView: __webpack_require__(220).DataView
	});

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Int8', 1, function(init){
	  return function Int8Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	if(__webpack_require__(6)){
	  var LIBRARY             = __webpack_require__(28)
	    , global              = __webpack_require__(4)
	    , fails               = __webpack_require__(7)
	    , $export             = __webpack_require__(8)
	    , $typed              = __webpack_require__(219)
	    , $buffer             = __webpack_require__(220)
	    , ctx                 = __webpack_require__(20)
	    , anInstance          = __webpack_require__(205)
	    , propertyDesc        = __webpack_require__(17)
	    , hide                = __webpack_require__(10)
	    , redefineAll         = __webpack_require__(210)
	    , toInteger           = __webpack_require__(38)
	    , toLength            = __webpack_require__(37)
	    , toIndex             = __webpack_require__(39)
	    , toPrimitive         = __webpack_require__(16)
	    , has                 = __webpack_require__(5)
	    , same                = __webpack_require__(71)
	    , classof             = __webpack_require__(75)
	    , isObject            = __webpack_require__(13)
	    , toObject            = __webpack_require__(58)
	    , isArrayIter         = __webpack_require__(162)
	    , create              = __webpack_require__(46)
	    , getPrototypeOf      = __webpack_require__(59)
	    , gOPN                = __webpack_require__(50).f
	    , getIterFn           = __webpack_require__(164)
	    , uid                 = __webpack_require__(19)
	    , wks                 = __webpack_require__(25)
	    , createArrayMethod   = __webpack_require__(172)
	    , createArrayIncludes = __webpack_require__(36)
	    , speciesConstructor  = __webpack_require__(207)
	    , ArrayIterators      = __webpack_require__(193)
	    , Iterators           = __webpack_require__(129)
	    , $iterDetect         = __webpack_require__(165)
	    , setSpecies          = __webpack_require__(192)
	    , arrayFill           = __webpack_require__(188)
	    , arrayCopyWithin     = __webpack_require__(185)
	    , $DP                 = __webpack_require__(11)
	    , $GOPD               = __webpack_require__(51)
	    , dP                  = $DP.f
	    , gOPD                = $GOPD.f
	    , RangeError          = global.RangeError
	    , TypeError           = global.TypeError
	    , Uint8Array          = global.Uint8Array
	    , ARRAY_BUFFER        = 'ArrayBuffer'
	    , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER
	    , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'
	    , PROTOTYPE           = 'prototype'
	    , ArrayProto          = Array[PROTOTYPE]
	    , $ArrayBuffer        = $buffer.ArrayBuffer
	    , $DataView           = $buffer.DataView
	    , arrayForEach        = createArrayMethod(0)
	    , arrayFilter         = createArrayMethod(2)
	    , arraySome           = createArrayMethod(3)
	    , arrayEvery          = createArrayMethod(4)
	    , arrayFind           = createArrayMethod(5)
	    , arrayFindIndex      = createArrayMethod(6)
	    , arrayIncludes       = createArrayIncludes(true)
	    , arrayIndexOf        = createArrayIncludes(false)
	    , arrayValues         = ArrayIterators.values
	    , arrayKeys           = ArrayIterators.keys
	    , arrayEntries        = ArrayIterators.entries
	    , arrayLastIndexOf    = ArrayProto.lastIndexOf
	    , arrayReduce         = ArrayProto.reduce
	    , arrayReduceRight    = ArrayProto.reduceRight
	    , arrayJoin           = ArrayProto.join
	    , arraySort           = ArrayProto.sort
	    , arraySlice          = ArrayProto.slice
	    , arrayToString       = ArrayProto.toString
	    , arrayToLocaleString = ArrayProto.toLocaleString
	    , ITERATOR            = wks('iterator')
	    , TAG                 = wks('toStringTag')
	    , TYPED_CONSTRUCTOR   = uid('typed_constructor')
	    , DEF_CONSTRUCTOR     = uid('def_constructor')
	    , ALL_CONSTRUCTORS    = $typed.CONSTR
	    , TYPED_ARRAY         = $typed.TYPED
	    , VIEW                = $typed.VIEW
	    , WRONG_LENGTH        = 'Wrong length!';
	
	  var $map = createArrayMethod(1, function(O, length){
	    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
	  });
	
	  var LITTLE_ENDIAN = fails(function(){
	    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
	  });
	
	  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){
	    new Uint8Array(1).set({});
	  });
	
	  var strictToLength = function(it, SAME){
	    if(it === undefined)throw TypeError(WRONG_LENGTH);
	    var number = +it
	      , length = toLength(it);
	    if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);
	    return length;
	  };
	
	  var toOffset = function(it, BYTES){
	    var offset = toInteger(it);
	    if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');
	    return offset;
	  };
	
	  var validate = function(it){
	    if(isObject(it) && TYPED_ARRAY in it)return it;
	    throw TypeError(it + ' is not a typed array!');
	  };
	
	  var allocate = function(C, length){
	    if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){
	      throw TypeError('It is not a typed array constructor!');
	    } return new C(length);
	  };
	
	  var speciesFromList = function(O, list){
	    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
	  };
	
	  var fromList = function(C, list){
	    var index  = 0
	      , length = list.length
	      , result = allocate(C, length);
	    while(length > index)result[index] = list[index++];
	    return result;
	  };
	
	  var addGetter = function(it, key, internal){
	    dP(it, key, {get: function(){ return this._d[internal]; }});
	  };
	
	  var $from = function from(source /*, mapfn, thisArg */){
	    var O       = toObject(source)
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , iterFn  = getIterFn(O)
	      , i, length, values, result, step, iterator;
	    if(iterFn != undefined && !isArrayIter(iterFn)){
	      for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){
	        values.push(step.value);
	      } O = values;
	    }
	    if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);
	    for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){
	      result[i] = mapping ? mapfn(O[i], i) : O[i];
	    }
	    return result;
	  };
	
	  var $of = function of(/*...items*/){
	    var index  = 0
	      , length = arguments.length
	      , result = allocate(this, length);
	    while(length > index)result[index] = arguments[index++];
	    return result;
	  };
	
	  // iOS Safari 6.x fails here
	  var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });
	
	  var $toLocaleString = function toLocaleString(){
	    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
	  };
	
	  var proto = {
	    copyWithin: function copyWithin(target, start /*, end */){
	      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    every: function every(callbackfn /*, thisArg */){
	      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars
	      return arrayFill.apply(validate(this), arguments);
	    },
	    filter: function filter(callbackfn /*, thisArg */){
	      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
	        arguments.length > 1 ? arguments[1] : undefined));
	    },
	    find: function find(predicate /*, thisArg */){
	      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    findIndex: function findIndex(predicate /*, thisArg */){
	      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    forEach: function forEach(callbackfn /*, thisArg */){
	      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    indexOf: function indexOf(searchElement /*, fromIndex */){
	      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    includes: function includes(searchElement /*, fromIndex */){
	      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    join: function join(separator){ // eslint-disable-line no-unused-vars
	      return arrayJoin.apply(validate(this), arguments);
	    },
	    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars
	      return arrayLastIndexOf.apply(validate(this), arguments);
	    },
	    map: function map(mapfn /*, thisArg */){
	      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
	      return arrayReduce.apply(validate(this), arguments);
	    },
	    reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
	      return arrayReduceRight.apply(validate(this), arguments);
	    },
	    reverse: function reverse(){
	      var that   = this
	        , length = validate(that).length
	        , middle = Math.floor(length / 2)
	        , index  = 0
	        , value;
	      while(index < middle){
	        value         = that[index];
	        that[index++] = that[--length];
	        that[length]  = value;
	      } return that;
	    },
	    some: function some(callbackfn /*, thisArg */){
	      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    sort: function sort(comparefn){
	      return arraySort.call(validate(this), comparefn);
	    },
	    subarray: function subarray(begin, end){
	      var O      = validate(this)
	        , length = O.length
	        , $begin = toIndex(begin, length);
	      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
	        O.buffer,
	        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
	        toLength((end === undefined ? length : toIndex(end, length)) - $begin)
	      );
	    }
	  };
	
	  var $slice = function slice(start, end){
	    return speciesFromList(this, arraySlice.call(validate(this), start, end));
	  };
	
	  var $set = function set(arrayLike /*, offset */){
	    validate(this);
	    var offset = toOffset(arguments[1], 1)
	      , length = this.length
	      , src    = toObject(arrayLike)
	      , len    = toLength(src.length)
	      , index  = 0;
	    if(len + offset > length)throw RangeError(WRONG_LENGTH);
	    while(index < len)this[offset + index] = src[index++];
	  };
	
	  var $iterators = {
	    entries: function entries(){
	      return arrayEntries.call(validate(this));
	    },
	    keys: function keys(){
	      return arrayKeys.call(validate(this));
	    },
	    values: function values(){
	      return arrayValues.call(validate(this));
	    }
	  };
	
	  var isTAIndex = function(target, key){
	    return isObject(target)
	      && target[TYPED_ARRAY]
	      && typeof key != 'symbol'
	      && key in target
	      && String(+key) == String(key);
	  };
	  var $getDesc = function getOwnPropertyDescriptor(target, key){
	    return isTAIndex(target, key = toPrimitive(key, true))
	      ? propertyDesc(2, target[key])
	      : gOPD(target, key);
	  };
	  var $setDesc = function defineProperty(target, key, desc){
	    if(isTAIndex(target, key = toPrimitive(key, true))
	      && isObject(desc)
	      && has(desc, 'value')
	      && !has(desc, 'get')
	      && !has(desc, 'set')
	      // TODO: add validation descriptor w/o calling accessors
	      && !desc.configurable
	      && (!has(desc, 'writable') || desc.writable)
	      && (!has(desc, 'enumerable') || desc.enumerable)
	    ){
	      target[key] = desc.value;
	      return target;
	    } else return dP(target, key, desc);
	  };
	
	  if(!ALL_CONSTRUCTORS){
	    $GOPD.f = $getDesc;
	    $DP.f   = $setDesc;
	  }
	
	  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
	    getOwnPropertyDescriptor: $getDesc,
	    defineProperty:           $setDesc
	  });
	
	  if(fails(function(){ arrayToString.call({}); })){
	    arrayToString = arrayToLocaleString = function toString(){
	      return arrayJoin.call(this);
	    }
	  }
	
	  var $TypedArrayPrototype$ = redefineAll({}, proto);
	  redefineAll($TypedArrayPrototype$, $iterators);
	  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
	  redefineAll($TypedArrayPrototype$, {
	    slice:          $slice,
	    set:            $set,
	    constructor:    function(){ /* noop */ },
	    toString:       arrayToString,
	    toLocaleString: $toLocaleString
	  });
	  addGetter($TypedArrayPrototype$, 'buffer', 'b');
	  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
	  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
	  addGetter($TypedArrayPrototype$, 'length', 'e');
	  dP($TypedArrayPrototype$, TAG, {
	    get: function(){ return this[TYPED_ARRAY]; }
	  });
	
	  module.exports = function(KEY, BYTES, wrapper, CLAMPED){
	    CLAMPED = !!CLAMPED;
	    var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'
	      , ISNT_UINT8 = NAME != 'Uint8Array'
	      , GETTER     = 'get' + KEY
	      , SETTER     = 'set' + KEY
	      , TypedArray = global[NAME]
	      , Base       = TypedArray || {}
	      , TAC        = TypedArray && getPrototypeOf(TypedArray)
	      , FORCED     = !TypedArray || !$typed.ABV
	      , O          = {}
	      , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
	    var getter = function(that, index){
	      var data = that._d;
	      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
	    };
	    var setter = function(that, index, value){
	      var data = that._d;
	      if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
	      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
	    };
	    var addElement = function(that, index){
	      dP(that, index, {
	        get: function(){
	          return getter(this, index);
	        },
	        set: function(value){
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };
	    if(FORCED){
	      TypedArray = wrapper(function(that, data, $offset, $length){
	        anInstance(that, TypedArray, NAME, '_d');
	        var index  = 0
	          , offset = 0
	          , buffer, byteLength, length, klass;
	        if(!isObject(data)){
	          length     = strictToLength(data, true)
	          byteLength = length * BYTES;
	          buffer     = new $ArrayBuffer(byteLength);
	        } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
	          buffer = data;
	          offset = toOffset($offset, BYTES);
	          var $len = data.byteLength;
	          if($length === undefined){
	            if($len % BYTES)throw RangeError(WRONG_LENGTH);
	            byteLength = $len - offset;
	            if(byteLength < 0)throw RangeError(WRONG_LENGTH);
	          } else {
	            byteLength = toLength($length) * BYTES;
	            if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if(TYPED_ARRAY in data){
	          return fromList(TypedArray, data);
	        } else {
	          return $from.call(TypedArray, data);
	        }
	        hide(that, '_d', {
	          b: buffer,
	          o: offset,
	          l: byteLength,
	          e: length,
	          v: new $DataView(buffer)
	        });
	        while(index < length)addElement(that, index++);
	      });
	      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
	      hide(TypedArrayPrototype, 'constructor', TypedArray);
	    } else if(!$iterDetect(function(iter){
	      // V8 works with iterators, but fails in many other cases
	      // https://code.google.com/p/v8/issues/detail?id=4552
	      new TypedArray(null); // eslint-disable-line no-new
	      new TypedArray(iter); // eslint-disable-line no-new
	    }, true)){
	      TypedArray = wrapper(function(that, data, $offset, $length){
	        anInstance(that, TypedArray, NAME);
	        var klass;
	        // `ws` module bug, temporarily remove validation length for Uint8Array
	        // https://github.com/websockets/ws/pull/645
	        if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));
	        if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
	          return $length !== undefined
	            ? new Base(data, toOffset($offset, BYTES), $length)
	            : $offset !== undefined
	              ? new Base(data, toOffset($offset, BYTES))
	              : new Base(data);
	        }
	        if(TYPED_ARRAY in data)return fromList(TypedArray, data);
	        return $from.call(TypedArray, data);
	      });
	      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){
	        if(!(key in TypedArray))hide(TypedArray, key, Base[key]);
	      });
	      TypedArray[PROTOTYPE] = TypedArrayPrototype;
	      if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;
	    }
	    var $nativeIterator   = TypedArrayPrototype[ITERATOR]
	      , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)
	      , $iterator         = $iterators.values;
	    hide(TypedArray, TYPED_CONSTRUCTOR, true);
	    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
	    hide(TypedArrayPrototype, VIEW, true);
	    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);
	
	    if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){
	      dP(TypedArrayPrototype, TAG, {
	        get: function(){ return NAME; }
	      });
	    }
	
	    O[NAME] = TypedArray;
	
	    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
	
	    $export($export.S, NAME, {
	      BYTES_PER_ELEMENT: BYTES,
	      from: $from,
	      of: $of
	    });
	
	    if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
	
	    $export($export.P, NAME, proto);
	
	    setSpecies(NAME);
	
	    $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});
	
	    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
	
	    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});
	
	    $export($export.P + $export.F * fails(function(){
	      new TypedArray(1).slice();
	    }), NAME, {slice: $slice});
	
	    $export($export.P + $export.F * (fails(function(){
	      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
	    }) || !fails(function(){
	      TypedArrayPrototype.toLocaleString.call([1, 2]);
	    })), NAME, {toLocaleString: $toLocaleString});
	
	    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
	    if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);
	  };
	} else module.exports = function(){ /* empty */ };

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Uint8', 1, function(init){
	  return function Uint8Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Uint8', 1, function(init){
	  return function Uint8ClampedArray(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	}, true);

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Int16', 2, function(init){
	  return function Int16Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Uint16', 2, function(init){
	  return function Uint16Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Int32', 4, function(init){
	  return function Int32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Uint32', 4, function(init){
	  return function Uint32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Float32', 4, function(init){
	  return function Float32Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(223)('Float64', 8, function(init){
	  return function Float64Array(data, byteOffset, length){
	    return init(this, data, byteOffset, length);
	  };
	});

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
	var $export   = __webpack_require__(8)
	  , aFunction = __webpack_require__(21)
	  , anObject  = __webpack_require__(12)
	  , rApply    = (__webpack_require__(4).Reflect || {}).apply
	  , fApply    = Function.apply;
	// MS Edge argumentsList argument is optional
	$export($export.S + $export.F * !__webpack_require__(7)(function(){
	  rApply(function(){});
	}), 'Reflect', {
	  apply: function apply(target, thisArgument, argumentsList){
	    var T = aFunction(target)
	      , L = anObject(argumentsList);
	    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
	  }
	});

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
	var $export    = __webpack_require__(8)
	  , create     = __webpack_require__(46)
	  , aFunction  = __webpack_require__(21)
	  , anObject   = __webpack_require__(12)
	  , isObject   = __webpack_require__(13)
	  , fails      = __webpack_require__(7)
	  , bind       = __webpack_require__(77)
	  , rConstruct = (__webpack_require__(4).Reflect || {}).construct;
	
	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = fails(function(){
	  function F(){}
	  return !(rConstruct(function(){}, [], F) instanceof F);
	});
	var ARGS_BUG = !fails(function(){
	  rConstruct(function(){});
	});
	
	$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
	  construct: function construct(Target, args /*, newTarget*/){
	    aFunction(Target);
	    anObject(args);
	    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
	    if(ARGS_BUG && !NEW_TARGET_BUG)return rConstruct(Target, args, newTarget);
	    if(Target == newTarget){
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch(args.length){
	        case 0: return new Target;
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (bind.apply(Target, $args));
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto    = newTarget.prototype
	      , instance = create(isObject(proto) ? proto : Object.prototype)
	      , result   = Function.apply.call(Target, instance, args);
	    return isObject(result) ? result : instance;
	  }
	});

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
	var dP          = __webpack_require__(11)
	  , $export     = __webpack_require__(8)
	  , anObject    = __webpack_require__(12)
	  , toPrimitive = __webpack_require__(16);
	
	// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
	$export($export.S + $export.F * __webpack_require__(7)(function(){
	  Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
	}), 'Reflect', {
	  defineProperty: function defineProperty(target, propertyKey, attributes){
	    anObject(target);
	    propertyKey = toPrimitive(propertyKey, true);
	    anObject(attributes);
	    try {
	      dP.f(target, propertyKey, attributes);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.4 Reflect.deleteProperty(target, propertyKey)
	var $export  = __webpack_require__(8)
	  , gOPD     = __webpack_require__(51).f
	  , anObject = __webpack_require__(12);
	
	$export($export.S, 'Reflect', {
	  deleteProperty: function deleteProperty(target, propertyKey){
	    var desc = gOPD(anObject(target), propertyKey);
	    return desc && !desc.configurable ? false : delete target[propertyKey];
	  }
	});

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 26.1.5 Reflect.enumerate(target)
	var $export  = __webpack_require__(8)
	  , anObject = __webpack_require__(12);
	var Enumerate = function(iterated){
	  this._t = anObject(iterated); // target
	  this._i = 0;                  // next index
	  var keys = this._k = []       // keys
	    , key;
	  for(key in iterated)keys.push(key);
	};
	__webpack_require__(130)(Enumerate, 'Object', function(){
	  var that = this
	    , keys = that._k
	    , key;
	  do {
	    if(that._i >= keys.length)return {value: undefined, done: true};
	  } while(!((key = keys[that._i++]) in that._t));
	  return {value: key, done: false};
	});
	
	$export($export.S, 'Reflect', {
	  enumerate: function enumerate(target){
	    return new Enumerate(target);
	  }
	});

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.6 Reflect.get(target, propertyKey [, receiver])
	var gOPD           = __webpack_require__(51)
	  , getPrototypeOf = __webpack_require__(59)
	  , has            = __webpack_require__(5)
	  , $export        = __webpack_require__(8)
	  , isObject       = __webpack_require__(13)
	  , anObject       = __webpack_require__(12);
	
	function get(target, propertyKey/*, receiver*/){
	  var receiver = arguments.length < 3 ? target : arguments[2]
	    , desc, proto;
	  if(anObject(target) === receiver)return target[propertyKey];
	  if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')
	    ? desc.value
	    : desc.get !== undefined
	      ? desc.get.call(receiver)
	      : undefined;
	  if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);
	}
	
	$export($export.S, 'Reflect', {get: get});

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
	var gOPD     = __webpack_require__(51)
	  , $export  = __webpack_require__(8)
	  , anObject = __webpack_require__(12);
	
	$export($export.S, 'Reflect', {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
	    return gOPD.f(anObject(target), propertyKey);
	  }
	});

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.8 Reflect.getPrototypeOf(target)
	var $export  = __webpack_require__(8)
	  , getProto = __webpack_require__(59)
	  , anObject = __webpack_require__(12);
	
	$export($export.S, 'Reflect', {
	  getPrototypeOf: function getPrototypeOf(target){
	    return getProto(anObject(target));
	  }
	});

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.9 Reflect.has(target, propertyKey)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Reflect', {
	  has: function has(target, propertyKey){
	    return propertyKey in target;
	  }
	});

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.10 Reflect.isExtensible(target)
	var $export       = __webpack_require__(8)
	  , anObject      = __webpack_require__(12)
	  , $isExtensible = Object.isExtensible;
	
	$export($export.S, 'Reflect', {
	  isExtensible: function isExtensible(target){
	    anObject(target);
	    return $isExtensible ? $isExtensible(target) : true;
	  }
	});

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.11 Reflect.ownKeys(target)
	var $export = __webpack_require__(8);
	
	$export($export.S, 'Reflect', {ownKeys: __webpack_require__(243)});

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	// all object keys, includes non-enumerable and symbols
	var gOPN     = __webpack_require__(50)
	  , gOPS     = __webpack_require__(43)
	  , anObject = __webpack_require__(12)
	  , Reflect  = __webpack_require__(4).Reflect;
	module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
	  var keys       = gOPN.f(anObject(it))
	    , getSymbols = gOPS.f;
	  return getSymbols ? keys.concat(getSymbols(it)) : keys;
	};

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.12 Reflect.preventExtensions(target)
	var $export            = __webpack_require__(8)
	  , anObject           = __webpack_require__(12)
	  , $preventExtensions = Object.preventExtensions;
	
	$export($export.S, 'Reflect', {
	  preventExtensions: function preventExtensions(target){
	    anObject(target);
	    try {
	      if($preventExtensions)$preventExtensions(target);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
	var dP             = __webpack_require__(11)
	  , gOPD           = __webpack_require__(51)
	  , getPrototypeOf = __webpack_require__(59)
	  , has            = __webpack_require__(5)
	  , $export        = __webpack_require__(8)
	  , createDesc     = __webpack_require__(17)
	  , anObject       = __webpack_require__(12)
	  , isObject       = __webpack_require__(13);
	
	function set(target, propertyKey, V/*, receiver*/){
	  var receiver = arguments.length < 4 ? target : arguments[3]
	    , ownDesc  = gOPD.f(anObject(target), propertyKey)
	    , existingDescriptor, proto;
	  if(!ownDesc){
	    if(isObject(proto = getPrototypeOf(target))){
	      return set(proto, propertyKey, V, receiver);
	    }
	    ownDesc = createDesc(0);
	  }
	  if(has(ownDesc, 'value')){
	    if(ownDesc.writable === false || !isObject(receiver))return false;
	    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
	    existingDescriptor.value = V;
	    dP.f(receiver, propertyKey, existingDescriptor);
	    return true;
	  }
	  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
	}
	
	$export($export.S, 'Reflect', {set: set});

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	// 26.1.14 Reflect.setPrototypeOf(target, proto)
	var $export  = __webpack_require__(8)
	  , setProto = __webpack_require__(73);
	
	if(setProto)$export($export.S, 'Reflect', {
	  setPrototypeOf: function setPrototypeOf(target, proto){
	    setProto.check(target, proto);
	    try {
	      setProto.set(target, proto);
	      return true;
	    } catch(e){
	      return false;
	    }
	  }
	});

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(248);
	__webpack_require__(250);
	__webpack_require__(251);
	__webpack_require__(252);
	__webpack_require__(254);
	__webpack_require__(255);
	__webpack_require__(256);
	__webpack_require__(257);
	__webpack_require__(258);
	module.exports = __webpack_require__(9).Reflect;


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                  = __webpack_require__(249)
	  , anObject                  = __webpack_require__(12)
	  , toMetaKey                 = metadata.key
	  , ordinaryDefineOwnMetadata = metadata.set;
	
	metadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){
	  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
	}});

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	var Map     = __webpack_require__(211)
	  , $export = __webpack_require__(8)
	  , shared  = __webpack_require__(23)('metadata')
	  , store   = shared.store || (shared.store = new (__webpack_require__(215)));
	
	var getOrCreateMetadataMap = function(target, targetKey, create){
	  var targetMetadata = store.get(target);
	  if(!targetMetadata){
	    if(!create)return undefined;
	    store.set(target, targetMetadata = new Map);
	  }
	  var keyMetadata = targetMetadata.get(targetKey);
	  if(!keyMetadata){
	    if(!create)return undefined;
	    targetMetadata.set(targetKey, keyMetadata = new Map);
	  } return keyMetadata;
	};
	var ordinaryHasOwnMetadata = function(MetadataKey, O, P){
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
	};
	var ordinaryGetOwnMetadata = function(MetadataKey, O, P){
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
	};
	var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){
	  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
	};
	var ordinaryOwnMetadataKeys = function(target, targetKey){
	  var metadataMap = getOrCreateMetadataMap(target, targetKey, false)
	    , keys        = [];
	  if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });
	  return keys;
	};
	var toMetaKey = function(it){
	  return it === undefined || typeof it == 'symbol' ? it : String(it);
	};
	var exp = function(O){
	  $export($export.S, 'Reflect', O);
	};
	
	module.exports = {
	  store: store,
	  map: getOrCreateMetadataMap,
	  has: ordinaryHasOwnMetadata,
	  get: ordinaryGetOwnMetadata,
	  set: ordinaryDefineOwnMetadata,
	  keys: ordinaryOwnMetadataKeys,
	  key: toMetaKey,
	  exp: exp
	};

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(249)
	  , anObject               = __webpack_require__(12)
	  , toMetaKey              = metadata.key
	  , getOrCreateMetadataMap = metadata.map
	  , store                  = metadata.store;
	
	metadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){
	  var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])
	    , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
	  if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;
	  if(metadataMap.size)return true;
	  var targetMetadata = store.get(target);
	  targetMetadata['delete'](targetKey);
	  return !!targetMetadata.size || store['delete'](target);
	}});

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(249)
	  , anObject               = __webpack_require__(12)
	  , getPrototypeOf         = __webpack_require__(59)
	  , ordinaryHasOwnMetadata = metadata.has
	  , ordinaryGetOwnMetadata = metadata.get
	  , toMetaKey              = metadata.key;
	
	var ordinaryGetMetadata = function(MetadataKey, O, P){
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
	};
	
	metadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	var Set                     = __webpack_require__(214)
	  , from                    = __webpack_require__(253)
	  , metadata                = __webpack_require__(249)
	  , anObject                = __webpack_require__(12)
	  , getPrototypeOf          = __webpack_require__(59)
	  , ordinaryOwnMetadataKeys = metadata.keys
	  , toMetaKey               = metadata.key;
	
	var ordinaryMetadataKeys = function(O, P){
	  var oKeys  = ordinaryOwnMetadataKeys(O, P)
	    , parent = getPrototypeOf(O);
	  if(parent === null)return oKeys;
	  var pKeys  = ordinaryMetadataKeys(parent, P);
	  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
	};
	
	metadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){
	  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	}});

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	var forOf = __webpack_require__(206);
	
	module.exports = function(iter, ITERATOR){
	  var result = [];
	  forOf(iter, false, result.push, result, ITERATOR);
	  return result;
	};


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(249)
	  , anObject               = __webpack_require__(12)
	  , ordinaryGetOwnMetadata = metadata.get
	  , toMetaKey              = metadata.key;
	
	metadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                = __webpack_require__(249)
	  , anObject                = __webpack_require__(12)
	  , ordinaryOwnMetadataKeys = metadata.keys
	  , toMetaKey               = metadata.key;
	
	metadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){
	  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	}});

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(249)
	  , anObject               = __webpack_require__(12)
	  , getPrototypeOf         = __webpack_require__(59)
	  , ordinaryHasOwnMetadata = metadata.has
	  , toMetaKey              = metadata.key;
	
	var ordinaryHasMetadata = function(MetadataKey, O, P){
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if(hasOwn)return true;
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
	};
	
	metadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(249)
	  , anObject               = __webpack_require__(12)
	  , ordinaryHasOwnMetadata = metadata.has
	  , toMetaKey              = metadata.key;
	
	metadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                  = __webpack_require__(249)
	  , anObject                  = __webpack_require__(12)
	  , aFunction                 = __webpack_require__(21)
	  , toMetaKey                 = metadata.key
	  , ordinaryDefineOwnMetadata = metadata.set;
	
	metadata.exp({metadata: function metadata(metadataKey, metadataValue){
	  return function decorator(target, targetKey){
	    ordinaryDefineOwnMetadata(
	      metadataKey, metadataValue,
	      (targetKey !== undefined ? anObject : aFunction)(target),
	      toMetaKey(targetKey)
	    );
	  };
	}});

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	/**
	* @license
	* Copyright Google Inc. All Rights Reserved.
	*
	* Use of this source code is governed by an MIT-style license that can be
	* found in the LICENSE file at https://angular.io/license
	*/
	(function (global, factory) {
	     true ? factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    (factory());
	}(this, (function () { 'use strict';
	
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	
	
	var Zone$1 = (function (global) {
	    if (global.Zone) {
	        throw new Error('Zone already loaded.');
	    }
	    var Zone = (function () {
	        function Zone(parent, zoneSpec) {
	            this._properties = null;
	            this._parent = parent;
	            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';
	            this._properties = zoneSpec && zoneSpec.properties || {};
	            this._zoneDelegate =
	                new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
	        }
	        Zone.assertZonePatched = function () {
	            if (global.Promise !== ZoneAwarePromise) {
	                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +
	                    'has been overwritten.\n' +
	                    'Most likely cause is that a Promise polyfill has been loaded ' +
	                    'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +
	                    'If you must load one, do so before loading zone.js.)');
	            }
	        };
	        Object.defineProperty(Zone, "current", {
	            get: function () {
	                return _currentZone;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Object.defineProperty(Zone, "currentTask", {
	            get: function () {
	                return _currentTask;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Object.defineProperty(Zone.prototype, "parent", {
	            get: function () {
	                return this._parent;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Object.defineProperty(Zone.prototype, "name", {
	            get: function () {
	                return this._name;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Zone.prototype.get = function (key) {
	            var zone = this.getZoneWith(key);
	            if (zone)
	                return zone._properties[key];
	        };
	        Zone.prototype.getZoneWith = function (key) {
	            var current = this;
	            while (current) {
	                if (current._properties.hasOwnProperty(key)) {
	                    return current;
	                }
	                current = current._parent;
	            }
	            return null;
	        };
	        Zone.prototype.fork = function (zoneSpec) {
	            if (!zoneSpec)
	                throw new Error('ZoneSpec required!');
	            return this._zoneDelegate.fork(this, zoneSpec);
	        };
	        Zone.prototype.wrap = function (callback, source) {
	            if (typeof callback !== 'function') {
	                throw new Error('Expecting function got: ' + callback);
	            }
	            var _callback = this._zoneDelegate.intercept(this, callback, source);
	            var zone = this;
	            return function () {
	                return zone.runGuarded(_callback, this, arguments, source);
	            };
	        };
	        Zone.prototype.run = function (callback, applyThis, applyArgs, source) {
	            if (applyThis === void 0) { applyThis = null; }
	            if (applyArgs === void 0) { applyArgs = null; }
	            if (source === void 0) { source = null; }
	            var oldZone = _currentZone;
	            _currentZone = this;
	            try {
	                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
	            }
	            finally {
	                _currentZone = oldZone;
	            }
	        };
	        Zone.prototype.runGuarded = function (callback, applyThis, applyArgs, source) {
	            if (applyThis === void 0) { applyThis = null; }
	            if (applyArgs === void 0) { applyArgs = null; }
	            if (source === void 0) { source = null; }
	            var oldZone = _currentZone;
	            _currentZone = this;
	            try {
	                try {
	                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
	                }
	                catch (error) {
	                    if (this._zoneDelegate.handleError(this, error)) {
	                        throw error;
	                    }
	                }
	            }
	            finally {
	                _currentZone = oldZone;
	            }
	        };
	        Zone.prototype.runTask = function (task, applyThis, applyArgs) {
	            task.runCount++;
	            if (task.zone != this)
	                throw new Error('A task can only be run in the zone which created it! (Creation: ' + task.zone.name +
	                    '; Execution: ' + this.name + ')');
	            var previousTask = _currentTask;
	            _currentTask = task;
	            var oldZone = _currentZone;
	            _currentZone = this;
	            try {
	                if (task.type == 'macroTask' && task.data && !task.data.isPeriodic) {
	                    task.cancelFn = null;
	                }
	                try {
	                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
	                }
	                catch (error) {
	                    if (this._zoneDelegate.handleError(this, error)) {
	                        throw error;
	                    }
	                }
	            }
	            finally {
	                _currentZone = oldZone;
	                _currentTask = previousTask;
	            }
	        };
	        Zone.prototype.scheduleMicroTask = function (source, callback, data, customSchedule) {
	            return this._zoneDelegate.scheduleTask(this, new ZoneTask('microTask', this, source, callback, data, customSchedule, null));
	        };
	        Zone.prototype.scheduleMacroTask = function (source, callback, data, customSchedule, customCancel) {
	            return this._zoneDelegate.scheduleTask(this, new ZoneTask('macroTask', this, source, callback, data, customSchedule, customCancel));
	        };
	        Zone.prototype.scheduleEventTask = function (source, callback, data, customSchedule, customCancel) {
	            return this._zoneDelegate.scheduleTask(this, new ZoneTask('eventTask', this, source, callback, data, customSchedule, customCancel));
	        };
	        Zone.prototype.cancelTask = function (task) {
	            var value = this._zoneDelegate.cancelTask(this, task);
	            task.runCount = -1;
	            task.cancelFn = null;
	            return value;
	        };
	        Zone.__symbol__ = __symbol__;
	        return Zone;
	    }());
	    
	    var ZoneDelegate = (function () {
	        function ZoneDelegate(zone, parentDelegate, zoneSpec) {
	            this._taskCounts = { microTask: 0, macroTask: 0, eventTask: 0 };
	            this.zone = zone;
	            this._parentDelegate = parentDelegate;
	            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
	            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
	            this._interceptZS =
	                zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
	            this._interceptDlgt =
	                zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
	            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
	            this._invokeDlgt =
	                zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
	            this._handleErrorZS =
	                zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
	            this._handleErrorDlgt =
	                zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
	            this._scheduleTaskZS =
	                zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
	            this._scheduleTaskDlgt =
	                zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
	            this._invokeTaskZS =
	                zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
	            this._invokeTaskDlgt =
	                zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
	            this._cancelTaskZS =
	                zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
	            this._cancelTaskDlgt =
	                zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
	            this._hasTaskZS = zoneSpec && (zoneSpec.onHasTask ? zoneSpec : parentDelegate._hasTaskZS);
	            this._hasTaskDlgt =
	                zoneSpec && (zoneSpec.onHasTask ? parentDelegate : parentDelegate._hasTaskDlgt);
	        }
	        ZoneDelegate.prototype.fork = function (targetZone, zoneSpec) {
	            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :
	                new Zone(targetZone, zoneSpec);
	        };
	        ZoneDelegate.prototype.intercept = function (targetZone, callback, source) {
	            return this._interceptZS ?
	                this._interceptZS.onIntercept(this._interceptDlgt, this.zone, targetZone, callback, source) :
	                callback;
	        };
	        ZoneDelegate.prototype.invoke = function (targetZone, callback, applyThis, applyArgs, source) {
	            return this._invokeZS ?
	                this._invokeZS.onInvoke(this._invokeDlgt, this.zone, targetZone, callback, applyThis, applyArgs, source) :
	                callback.apply(applyThis, applyArgs);
	        };
	        ZoneDelegate.prototype.handleError = function (targetZone, error) {
	            return this._handleErrorZS ?
	                this._handleErrorZS.onHandleError(this._handleErrorDlgt, this.zone, targetZone, error) :
	                true;
	        };
	        ZoneDelegate.prototype.scheduleTask = function (targetZone, task) {
	            try {
	                if (this._scheduleTaskZS) {
	                    return this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this.zone, targetZone, task);
	                }
	                else if (task.scheduleFn) {
	                    task.scheduleFn(task);
	                }
	                else if (task.type == 'microTask') {
	                    scheduleMicroTask(task);
	                }
	                else {
	                    throw new Error('Task is missing scheduleFn.');
	                }
	                return task;
	            }
	            finally {
	                if (targetZone == this.zone) {
	                    this._updateTaskCount(task.type, 1);
	                }
	            }
	        };
	        ZoneDelegate.prototype.invokeTask = function (targetZone, task, applyThis, applyArgs) {
	            try {
	                return this._invokeTaskZS ?
	                    this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this.zone, targetZone, task, applyThis, applyArgs) :
	                    task.callback.apply(applyThis, applyArgs);
	            }
	            finally {
	                if (targetZone == this.zone && (task.type != 'eventTask') &&
	                    !(task.data && task.data.isPeriodic)) {
	                    this._updateTaskCount(task.type, -1);
	                }
	            }
	        };
	        ZoneDelegate.prototype.cancelTask = function (targetZone, task) {
	            var value;
	            if (this._cancelTaskZS) {
	                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this.zone, targetZone, task);
	            }
	            else if (!task.cancelFn) {
	                throw new Error('Task does not support cancellation, or is already canceled.');
	            }
	            else {
	                value = task.cancelFn(task);
	            }
	            if (targetZone == this.zone) {
	                // this should not be in the finally block, because exceptions assume not canceled.
	                this._updateTaskCount(task.type, -1);
	            }
	            return value;
	        };
	        ZoneDelegate.prototype.hasTask = function (targetZone, isEmpty) {
	            return this._hasTaskZS &&
	                this._hasTaskZS.onHasTask(this._hasTaskDlgt, this.zone, targetZone, isEmpty);
	        };
	        ZoneDelegate.prototype._updateTaskCount = function (type, count) {
	            var counts = this._taskCounts;
	            var prev = counts[type];
	            var next = counts[type] = prev + count;
	            if (next < 0) {
	                throw new Error('More tasks executed then were scheduled.');
	            }
	            if (prev == 0 || next == 0) {
	                var isEmpty = {
	                    microTask: counts.microTask > 0,
	                    macroTask: counts.macroTask > 0,
	                    eventTask: counts.eventTask > 0,
	                    change: type
	                };
	                try {
	                    this.hasTask(this.zone, isEmpty);
	                }
	                finally {
	                    if (this._parentDelegate) {
	                        this._parentDelegate._updateTaskCount(type, count);
	                    }
	                }
	            }
	        };
	        return ZoneDelegate;
	    }());
	    var ZoneTask = (function () {
	        function ZoneTask(type, zone, source, callback, options, scheduleFn, cancelFn) {
	            this.runCount = 0;
	            this.type = type;
	            this.zone = zone;
	            this.source = source;
	            this.data = options;
	            this.scheduleFn = scheduleFn;
	            this.cancelFn = cancelFn;
	            this.callback = callback;
	            var self = this;
	            this.invoke = function () {
	                _numberOfNestedTaskFrames++;
	                try {
	                    return zone.runTask(self, this, arguments);
	                }
	                finally {
	                    if (_numberOfNestedTaskFrames == 1) {
	                        drainMicroTaskQueue();
	                    }
	                    _numberOfNestedTaskFrames--;
	                }
	            };
	        }
	        ZoneTask.prototype.toString = function () {
	            if (this.data && typeof this.data.handleId !== 'undefined') {
	                return this.data.handleId;
	            }
	            else {
	                return Object.prototype.toString.call(this);
	            }
	        };
	        return ZoneTask;
	    }());
	    function __symbol__(name) {
	        return '__zone_symbol__' + name;
	    }
	    
	    var symbolSetTimeout = __symbol__('setTimeout');
	    var symbolPromise = __symbol__('Promise');
	    var symbolThen = __symbol__('then');
	    var _currentZone = new Zone(null, null);
	    var _currentTask = null;
	    var _microTaskQueue = [];
	    var _isDrainingMicrotaskQueue = false;
	    var _uncaughtPromiseErrors = [];
	    var _numberOfNestedTaskFrames = 0;
	    function scheduleQueueDrain() {
	        // if we are not running in any task, and there has not been anything scheduled
	        // we must bootstrap the initial task creation by manually scheduling the drain
	        if (_numberOfNestedTaskFrames == 0 && _microTaskQueue.length == 0) {
	            // We are not running in Task, so we need to kickstart the microtask queue.
	            if (global[symbolPromise]) {
	                global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);
	            }
	            else {
	                global[symbolSetTimeout](drainMicroTaskQueue, 0);
	            }
	        }
	    }
	    function scheduleMicroTask(task) {
	        scheduleQueueDrain();
	        _microTaskQueue.push(task);
	    }
	    function consoleError(e) {
	        var rejection = e && e.rejection;
	        if (rejection) {
	            console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);
	        }
	        console.error(e);
	    }
	    function drainMicroTaskQueue() {
	        if (!_isDrainingMicrotaskQueue) {
	            _isDrainingMicrotaskQueue = true;
	            while (_microTaskQueue.length) {
	                var queue = _microTaskQueue;
	                _microTaskQueue = [];
	                for (var i = 0; i < queue.length; i++) {
	                    var task = queue[i];
	                    try {
	                        task.zone.runTask(task, null, null);
	                    }
	                    catch (e) {
	                        consoleError(e);
	                    }
	                }
	            }
	            while (_uncaughtPromiseErrors.length) {
	                var _loop_1 = function() {
	                    var uncaughtPromiseError = _uncaughtPromiseErrors.shift();
	                    try {
	                        uncaughtPromiseError.zone.runGuarded(function () {
	                            throw uncaughtPromiseError;
	                        });
	                    }
	                    catch (e) {
	                        consoleError(e);
	                    }
	                };
	                while (_uncaughtPromiseErrors.length) {
	                    _loop_1();
	                }
	            }
	            _isDrainingMicrotaskQueue = false;
	        }
	    }
	    function isThenable(value) {
	        return value && value.then;
	    }
	    function forwardResolution(value) {
	        return value;
	    }
	    function forwardRejection(rejection) {
	        return ZoneAwarePromise.reject(rejection);
	    }
	    var symbolState = __symbol__('state');
	    var symbolValue = __symbol__('value');
	    var source = 'Promise.then';
	    var UNRESOLVED = null;
	    var RESOLVED = true;
	    var REJECTED = false;
	    var REJECTED_NO_CATCH = 0;
	    function makeResolver(promise, state) {
	        return function (v) {
	            resolvePromise(promise, state, v);
	            // Do not return value or you will break the Promise spec.
	        };
	    }
	    function resolvePromise(promise, state, value) {
	        if (promise[symbolState] === UNRESOLVED) {
	            if (value instanceof ZoneAwarePromise && value[symbolState] !== UNRESOLVED) {
	                clearRejectedNoCatch(value);
	                resolvePromise(promise, value[symbolState], value[symbolValue]);
	            }
	            else if (isThenable(value)) {
	                value.then(makeResolver(promise, state), makeResolver(promise, false));
	            }
	            else {
	                promise[symbolState] = state;
	                var queue = promise[symbolValue];
	                promise[symbolValue] = value;
	                for (var i = 0; i < queue.length;) {
	                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
	                }
	                if (queue.length == 0 && state == REJECTED) {
	                    promise[symbolState] = REJECTED_NO_CATCH;
	                    try {
	                        throw new Error('Uncaught (in promise): ' + value +
	                            (value && value.stack ? '\n' + value.stack : ''));
	                    }
	                    catch (e) {
	                        var error_1 = e;
	                        error_1.rejection = value;
	                        error_1.promise = promise;
	                        error_1.zone = Zone.current;
	                        error_1.task = Zone.currentTask;
	                        _uncaughtPromiseErrors.push(error_1);
	                        scheduleQueueDrain();
	                    }
	                }
	            }
	        }
	        // Resolving an already resolved promise is a noop.
	        return promise;
	    }
	    function clearRejectedNoCatch(promise) {
	        if (promise[symbolState] === REJECTED_NO_CATCH) {
	            promise[symbolState] = REJECTED;
	            for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
	                if (promise === _uncaughtPromiseErrors[i].promise) {
	                    _uncaughtPromiseErrors.splice(i, 1);
	                    break;
	                }
	            }
	        }
	    }
	    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
	        clearRejectedNoCatch(promise);
	        var delegate = promise[symbolState] ? onFulfilled || forwardResolution : onRejected || forwardRejection;
	        zone.scheduleMicroTask(source, function () {
	            try {
	                resolvePromise(chainPromise, true, zone.run(delegate, null, [promise[symbolValue]]));
	            }
	            catch (error) {
	                resolvePromise(chainPromise, false, error);
	            }
	        });
	    }
	    var ZoneAwarePromise = (function () {
	        function ZoneAwarePromise(executor) {
	            var promise = this;
	            if (!(promise instanceof ZoneAwarePromise)) {
	                throw new Error('Must be an instanceof Promise.');
	            }
	            promise[symbolState] = UNRESOLVED;
	            promise[symbolValue] = []; // queue;
	            try {
	                executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
	            }
	            catch (e) {
	                resolvePromise(promise, false, e);
	            }
	        }
	        ZoneAwarePromise.resolve = function (value) {
	            return resolvePromise(new this(null), RESOLVED, value);
	        };
	        ZoneAwarePromise.reject = function (error) {
	            return resolvePromise(new this(null), REJECTED, error);
	        };
	        ZoneAwarePromise.race = function (values) {
	            var resolve;
	            var reject;
	            var promise = new this(function (res, rej) {
	                _a = [res, rej], resolve = _a[0], reject = _a[1];
	                var _a;
	            });
	            function onResolve(value) {
	                promise && (promise = null || resolve(value));
	            }
	            function onReject(error) {
	                promise && (promise = null || reject(error));
	            }
	            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
	                var value = values_1[_i];
	                if (!isThenable(value)) {
	                    value = this.resolve(value);
	                }
	                value.then(onResolve, onReject);
	            }
	            return promise;
	        };
	        ZoneAwarePromise.all = function (values) {
	            var resolve;
	            var reject;
	            var promise = new this(function (res, rej) {
	                resolve = res;
	                reject = rej;
	            });
	            var count = 0;
	            var resolvedValues = [];
	            for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
	                var value = values_2[_i];
	                if (!isThenable(value)) {
	                    value = this.resolve(value);
	                }
	                value.then((function (index) { return function (value) {
	                    resolvedValues[index] = value;
	                    count--;
	                    if (!count) {
	                        resolve(resolvedValues);
	                    }
	                }; })(count), reject);
	                count++;
	            }
	            if (!count)
	                resolve(resolvedValues);
	            return promise;
	        };
	        ZoneAwarePromise.prototype.then = function (onFulfilled, onRejected) {
	            var chainPromise = new this.constructor(null);
	            var zone = Zone.current;
	            if (this[symbolState] == UNRESOLVED) {
	                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
	            }
	            else {
	                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
	            }
	            return chainPromise;
	        };
	        ZoneAwarePromise.prototype.catch = function (onRejected) {
	            return this.then(null, onRejected);
	        };
	        return ZoneAwarePromise;
	    }());
	    // Protect against aggressive optimizers dropping seemingly unused properties.
	    // E.g. Closure Compiler in advanced mode.
	    ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;
	    ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;
	    ZoneAwarePromise['race'] = ZoneAwarePromise.race;
	    ZoneAwarePromise['all'] = ZoneAwarePromise.all;
	    var NativePromise = global[__symbol__('Promise')] = global.Promise;
	    global.Promise = ZoneAwarePromise;
	    function patchThen(NativePromise) {
	        var NativePromiseProtototype = NativePromise.prototype;
	        var NativePromiseThen = NativePromiseProtototype[__symbol__('then')] =
	            NativePromiseProtototype.then;
	        NativePromiseProtototype.then = function (onResolve, onReject) {
	            var nativePromise = this;
	            return new ZoneAwarePromise(function (resolve, reject) {
	                NativePromiseThen.call(nativePromise, resolve, reject);
	            })
	                .then(onResolve, onReject);
	        };
	    }
	    if (NativePromise) {
	        patchThen(NativePromise);
	        if (typeof global['fetch'] !== 'undefined') {
	            var fetchPromise = void 0;
	            try {
	                // In MS Edge this throws
	                fetchPromise = global['fetch']();
	            }
	            catch (e) {
	                // In Chrome this throws instead.
	                fetchPromise = global['fetch']('about:blank');
	            }
	            // ignore output to prevent error;
	            fetchPromise.then(function () { return null; }, function () { return null; });
	            if (fetchPromise.constructor != NativePromise &&
	                fetchPromise.constructor != ZoneAwarePromise) {
	                patchThen(fetchPromise.constructor);
	            }
	        }
	    }
	    // This is not part of public API, but it is usefull for tests, so we expose it.
	    Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;
	    return global.Zone = Zone;
	})(typeof window === 'object' && window || typeof self === 'object' && self || global);
	
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var zoneSymbol = Zone['__symbol__'];
	var _global$1 = typeof window === 'object' && window || typeof self === 'object' && self || global;
	function bindArguments(args, source) {
	    for (var i = args.length - 1; i >= 0; i--) {
	        if (typeof args[i] === 'function') {
	            args[i] = Zone.current.wrap(args[i], source + '_' + i);
	        }
	    }
	    return args;
	}
	
	
	
	
	var isNode = (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]');
	
	function patchProperty(obj, prop) {
	    var desc = Object.getOwnPropertyDescriptor(obj, prop) || { enumerable: true, configurable: true };
	    // A property descriptor cannot have getter/setter and be writable
	    // deleting the writable and value properties avoids this error:
	    //
	    // TypeError: property descriptors must not specify a value or be writable when a
	    // getter or setter has been specified
	    delete desc.writable;
	    delete desc.value;
	    // substr(2) cuz 'onclick' -> 'click', etc
	    var eventName = prop.substr(2);
	    var _prop = '_' + prop;
	    desc.set = function (fn) {
	        if (this[_prop]) {
	            this.removeEventListener(eventName, this[_prop]);
	        }
	        if (typeof fn === 'function') {
	            var wrapFn = function (event) {
	                var result;
	                result = fn.apply(this, arguments);
	                if (result != undefined && !result)
	                    event.preventDefault();
	            };
	            this[_prop] = wrapFn;
	            this.addEventListener(eventName, wrapFn, false);
	        }
	        else {
	            this[_prop] = null;
	        }
	    };
	    // The getter would return undefined for unassigned properties but the default value of an
	    // unassigned property is null
	    desc.get = function () {
	        return this[_prop] || null;
	    };
	    Object.defineProperty(obj, prop, desc);
	}
	
	
	
	var EVENT_TASKS = zoneSymbol('eventTasks');
	// For EventTarget
	var ADD_EVENT_LISTENER = 'addEventListener';
	var REMOVE_EVENT_LISTENER = 'removeEventListener';
	function findExistingRegisteredTask(target, handler, name, capture, remove) {
	    var eventTasks = target[EVENT_TASKS];
	    if (eventTasks) {
	        for (var i = 0; i < eventTasks.length; i++) {
	            var eventTask = eventTasks[i];
	            var data = eventTask.data;
	            if (data.handler === handler && data.useCapturing === capture && data.eventName === name) {
	                if (remove) {
	                    eventTasks.splice(i, 1);
	                }
	                return eventTask;
	            }
	        }
	    }
	    return null;
	}
	function attachRegisteredEvent(target, eventTask) {
	    var eventTasks = target[EVENT_TASKS];
	    if (!eventTasks) {
	        eventTasks = target[EVENT_TASKS] = [];
	    }
	    eventTasks.push(eventTask);
	}
	function makeZoneAwareAddListener(addFnName, removeFnName, useCapturingParam, allowDuplicates) {
	    if (useCapturingParam === void 0) { useCapturingParam = true; }
	    if (allowDuplicates === void 0) { allowDuplicates = false; }
	    var addFnSymbol = zoneSymbol(addFnName);
	    var removeFnSymbol = zoneSymbol(removeFnName);
	    var defaultUseCapturing = useCapturingParam ? false : undefined;
	    function scheduleEventListener(eventTask) {
	        var meta = eventTask.data;
	        attachRegisteredEvent(meta.target, eventTask);
	        return meta.target[addFnSymbol](meta.eventName, eventTask.invoke, meta.useCapturing);
	    }
	    function cancelEventListener(eventTask) {
	        var meta = eventTask.data;
	        findExistingRegisteredTask(meta.target, eventTask.invoke, meta.eventName, meta.useCapturing, true);
	        meta.target[removeFnSymbol](meta.eventName, eventTask.invoke, meta.useCapturing);
	    }
	    return function zoneAwareAddListener(self, args) {
	        var eventName = args[0];
	        var handler = args[1];
	        var useCapturing = args[2] || defaultUseCapturing;
	        // - Inside a Web Worker, `this` is undefined, the context is `global`
	        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
	        // see https://github.com/angular/zone.js/issues/190
	        var target = self || _global$1;
	        var delegate = null;
	        if (typeof handler == 'function') {
	            delegate = handler;
	        }
	        else if (handler && handler.handleEvent) {
	            delegate = function (event) { return handler.handleEvent(event); };
	        }
	        var validZoneHandler = false;
	        try {
	            // In cross site contexts (such as WebDriver frameworks like Selenium),
	            // accessing the handler object here will cause an exception to be thrown which
	            // will fail tests prematurely.
	            validZoneHandler = handler && handler.toString() === '[object FunctionWrapper]';
	        }
	        catch (e) {
	            // Returning nothing here is fine, because objects in a cross-site context are unusable
	            return;
	        }
	        // Ignore special listeners of IE11 & Edge dev tools, see
	        // https://github.com/angular/zone.js/issues/150
	        if (!delegate || validZoneHandler) {
	            return target[addFnSymbol](eventName, handler, useCapturing);
	        }
	        if (!allowDuplicates) {
	            var eventTask = findExistingRegisteredTask(target, handler, eventName, useCapturing, false);
	            if (eventTask) {
	                // we already registered, so this will have noop.
	                return target[addFnSymbol](eventName, eventTask.invoke, useCapturing);
	            }
	        }
	        var zone = Zone.current;
	        var source = target.constructor['name'] + '.' + addFnName + ':' + eventName;
	        var data = {
	            target: target,
	            eventName: eventName,
	            name: eventName,
	            useCapturing: useCapturing,
	            handler: handler
	        };
	        zone.scheduleEventTask(source, delegate, data, scheduleEventListener, cancelEventListener);
	    };
	}
	function makeZoneAwareRemoveListener(fnName, useCapturingParam) {
	    if (useCapturingParam === void 0) { useCapturingParam = true; }
	    var symbol = zoneSymbol(fnName);
	    var defaultUseCapturing = useCapturingParam ? false : undefined;
	    return function zoneAwareRemoveListener(self, args) {
	        var eventName = args[0];
	        var handler = args[1];
	        var useCapturing = args[2] || defaultUseCapturing;
	        // - Inside a Web Worker, `this` is undefined, the context is `global`
	        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
	        // see https://github.com/angular/zone.js/issues/190
	        var target = self || _global$1;
	        var eventTask = findExistingRegisteredTask(target, handler, eventName, useCapturing, true);
	        if (eventTask) {
	            eventTask.zone.cancelTask(eventTask);
	        }
	        else {
	            target[symbol](eventName, handler, useCapturing);
	        }
	    };
	}
	function makeZoneAwareListeners(fnName) {
	    var symbol = zoneSymbol(fnName);
	    return function zoneAwareEventListeners(self, args) {
	        var eventName = args[0];
	        var target = self || _global$1;
	        if (!target[EVENT_TASKS]) {
	            return [];
	        }
	        return target[EVENT_TASKS]
	            .filter(function (task) { return task.data.eventName === eventName; })
	            .map(function (task) { return task.data.handler; });
	    };
	}
	var zoneAwareAddEventListener = makeZoneAwareAddListener(ADD_EVENT_LISTENER, REMOVE_EVENT_LISTENER);
	var zoneAwareRemoveEventListener = makeZoneAwareRemoveListener(REMOVE_EVENT_LISTENER);
	
	var originalInstanceKey = zoneSymbol('originalInstance');
	// wrap some native API on `window`
	
	
	function createNamedFn(name, delegate) {
	    try {
	        return (Function('f', "return function " + name + "(){return f(this, arguments)}"))(delegate);
	    }
	    catch (e) {
	        // if we fail, we must be CSP, just return delegate.
	        return function () {
	            return delegate(this, arguments);
	        };
	    }
	}
	function patchMethod(target, name, patchFn) {
	    var proto = target;
	    while (proto && Object.getOwnPropertyNames(proto).indexOf(name) === -1) {
	        proto = Object.getPrototypeOf(proto);
	    }
	    if (!proto && target[name]) {
	        // somehow we did not find it, but we can see it. This happens on IE for Window properties.
	        proto = target;
	    }
	    var delegateName = zoneSymbol(name);
	    var delegate;
	    if (proto && !(delegate = proto[delegateName])) {
	        delegate = proto[delegateName] = proto[name];
	        proto[name] = createNamedFn(name, patchFn(delegate, delegateName, name));
	    }
	    return delegate;
	}
	
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// For EventEmitter
	var EE_ADD_LISTENER = 'addListener';
	var EE_PREPEND_LISTENER = 'prependListener';
	var EE_REMOVE_LISTENER = 'removeListener';
	var EE_LISTENERS = 'listeners';
	var EE_ON = 'on';
	var zoneAwareAddListener$1 = makeZoneAwareAddListener(EE_ADD_LISTENER, EE_REMOVE_LISTENER, false, true);
	var zoneAwarePrependListener = makeZoneAwareAddListener(EE_PREPEND_LISTENER, EE_REMOVE_LISTENER, false, true);
	var zoneAwareRemoveListener$1 = makeZoneAwareRemoveListener(EE_REMOVE_LISTENER, false);
	var zoneAwareListeners = makeZoneAwareListeners(EE_LISTENERS);
	function patchEventEmitterMethods(obj) {
	    if (obj && obj.addListener) {
	        patchMethod(obj, EE_ADD_LISTENER, function () { return zoneAwareAddListener$1; });
	        patchMethod(obj, EE_PREPEND_LISTENER, function () { return zoneAwarePrependListener; });
	        patchMethod(obj, EE_REMOVE_LISTENER, function () { return zoneAwareRemoveListener$1; });
	        patchMethod(obj, EE_LISTENERS, function () { return zoneAwareListeners; });
	        obj[EE_ON] = obj[EE_ADD_LISTENER];
	        return true;
	    }
	    else {
	        return false;
	    }
	}
	// EventEmitter
	var events;
	try {
	    events = __webpack_require__(260);
	}
	catch (err) {
	}
	if (events && events.EventEmitter) {
	    patchEventEmitterMethods(events.EventEmitter.prototype);
	}
	
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var fs;
	try {
	    fs = __webpack_require__(261);
	}
	catch (err) {
	}
	// TODO(alxhub): Patch `watch` and `unwatchFile`.
	var TO_PATCH = [
	    'access', 'appendFile', 'chmod', 'chown', 'close', 'exists', 'fchmod',
	    'fchown', 'fdatasync', 'fstat', 'fsync', 'ftruncate', 'futimes', 'lchmod',
	    'lchown', 'link', 'lstat', 'mkdir', 'mkdtemp', 'open', 'read',
	    'readdir', 'readFile', 'readlink', 'realpath', 'rename', 'rmdir', 'stat',
	    'symlink', 'truncate', 'unlink', 'utimes', 'write', 'writeFile',
	];
	if (fs) {
	    TO_PATCH.filter(function (name) { return !!fs[name] && typeof fs[name] === 'function'; }).forEach(function (name) {
	        fs[name] = (function (delegate) {
	            return function () {
	                return delegate.apply(this, bindArguments(arguments, 'fs.' + name));
	            };
	        })(fs[name]);
	    });
	}
	
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function patchTimer(window, setName, cancelName, nameSuffix) {
	    var setNative = null;
	    var clearNative = null;
	    setName += nameSuffix;
	    cancelName += nameSuffix;
	    var tasksByHandleId = {};
	    function scheduleTask(task) {
	        var data = task.data;
	        data.args[0] = function () {
	            task.invoke.apply(this, arguments);
	            delete tasksByHandleId[data.handleId];
	        };
	        data.handleId = setNative.apply(window, data.args);
	        tasksByHandleId[data.handleId] = task;
	        return task;
	    }
	    function clearTask(task) {
	        delete tasksByHandleId[task.data.handleId];
	        return clearNative(task.data.handleId);
	    }
	    setNative =
	        patchMethod(window, setName, function (delegate) { return function (self, args) {
	            if (typeof args[0] === 'function') {
	                var zone = Zone.current;
	                var options = {
	                    handleId: null,
	                    isPeriodic: nameSuffix === 'Interval',
	                    delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 : null,
	                    args: args
	                };
	                var task = zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);
	                if (!task) {
	                    return task;
	                }
	                // Node.js must additionally support the ref and unref functions.
	                var handle = task.data.handleId;
	                if (handle.ref && handle.unref) {
	                    task.ref = handle.ref.bind(handle);
	                    task.unref = handle.unref.bind(handle);
	                }
	                return task;
	            }
	            else {
	                // cause an error by calling it directly.
	                return delegate.apply(window, args);
	            }
	        }; });
	    clearNative =
	        patchMethod(window, cancelName, function (delegate) { return function (self, args) {
	            var task = typeof args[0] === 'number' ? tasksByHandleId[args[0]] : args[0];
	            if (task && typeof task.type === 'string') {
	                if (task.cancelFn && task.data.isPeriodic || task.runCount === 0) {
	                    // Do not cancel already canceled functions
	                    task.zone.cancelTask(task);
	                }
	            }
	            else {
	                // cause an error by calling it directly.
	                delegate.apply(window, args);
	            }
	        }; });
	}
	
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var set = 'set';
	var clear = 'clear';
	var _global = typeof window === 'object' && window || typeof self === 'object' && self || global;
	// Timers
	var timers = __webpack_require__(262);
	patchTimer(timers, set, clear, 'Timeout');
	patchTimer(timers, set, clear, 'Interval');
	patchTimer(timers, set, clear, 'Immediate');
	var shouldPatchGlobalTimers = global.setTimeout !== timers.setTimeout;
	if (shouldPatchGlobalTimers) {
	    patchTimer(_global, set, clear, 'Timeout');
	    patchTimer(_global, set, clear, 'Interval');
	    patchTimer(_global, set, clear, 'Immediate');
	}
	// Crypto
	var crypto;
	try {
	    crypto = __webpack_require__(263);
	}
	catch (err) {
	}
	// TODO(gdi2290): implement a better way to patch these methods
	if (crypto) {
	    var nativeRandomBytes_1 = crypto.randomBytes;
	    crypto.randomBytes = function randomBytesZone(size, callback) {
	        if (!callback) {
	            return nativeRandomBytes_1(size);
	        }
	        else {
	            var zone = Zone.current;
	            var source = crypto.constructor.name + '.randomBytes';
	            return nativeRandomBytes_1(size, zone.wrap(callback, source));
	        }
	    }.bind(crypto);
	    var nativePbkdf2_1 = crypto.pbkdf2;
	    crypto.pbkdf2 = function pbkdf2Zone() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i - 0] = arguments[_i];
	        }
	        var fn = args[args.length - 1];
	        if (typeof fn === 'function') {
	            var zone = Zone.current;
	            var source = crypto.constructor.name + '.pbkdf2';
	            args[args.length - 1] = zone.wrap(fn, source);
	            return nativePbkdf2_1.apply(void 0, args);
	        }
	        else {
	            return nativePbkdf2_1.apply(void 0, args);
	        }
	    }.bind(crypto);
	}
	// HTTP Client
	var httpClient;
	try {
	    httpClient = __webpack_require__(264);
	}
	catch (err) {
	}
	if (httpClient && httpClient.ClientRequest) {
	    var ClientRequest_1 = httpClient.ClientRequest.bind(httpClient);
	    httpClient.ClientRequest = function (options, callback) {
	        if (!callback) {
	            return new ClientRequest_1(options);
	        }
	        else {
	            var zone = Zone.current;
	            return new ClientRequest_1(options, zone.wrap(callback, 'http.ClientRequest'));
	        }
	    };
	}
	
	})));


/***/ },
/* 260 */
/***/ function(module, exports) {

	module.exports = require("events");

/***/ },
/* 261 */
/***/ function(module, exports) {

	module.exports = require("fs");

/***/ },
/* 262 */
/***/ function(module, exports) {

	module.exports = require("timers");

/***/ },
/* 263 */
/***/ function(module, exports) {

	module.exports = require("crypto");

/***/ },
/* 264 */
/***/ function(module, exports) {

	module.exports = require("_http_client");

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	/**
	* @license
	* Copyright Google Inc. All Rights Reserved.
	*
	* Use of this source code is governed by an MIT-style license that can be
	* found in the LICENSE file at https://angular.io/license
	*/
	(function (global, factory) {
	     true ? factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    (factory());
	}(this, (function () { 'use strict';
	
	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NEWLINE = '\n';
	var SEP = '  -------------  ';
	var IGNORE_FRAMES = [];
	var creationTrace = '__creationTrace__';
	var LongStackTrace = (function () {
	    function LongStackTrace() {
	        this.error = getStacktrace();
	        this.timestamp = new Date();
	    }
	    return LongStackTrace;
	}());
	function getStacktraceWithUncaughtError() {
	    return new Error('STACKTRACE TRACKING');
	}
	function getStacktraceWithCaughtError() {
	    try {
	        throw getStacktraceWithUncaughtError();
	    }
	    catch (e) {
	        return e;
	    }
	}
	// Some implementations of exception handling don't create a stack trace if the exception
	// isn't thrown, however it's faster not to actually throw the exception.
	var error = getStacktraceWithUncaughtError();
	var coughtError = getStacktraceWithCaughtError();
	var getStacktrace = error.stack ?
	    getStacktraceWithUncaughtError :
	    (coughtError.stack ? getStacktraceWithCaughtError : getStacktraceWithUncaughtError);
	function getFrames(error) {
	    return error.stack ? error.stack.split(NEWLINE) : [];
	}
	function addErrorStack(lines, error) {
	    var trace = getFrames(error);
	    for (var i = 0; i < trace.length; i++) {
	        var frame = trace[i];
	        // Filter out the Frames which are part of stack capturing.
	        if (!(i < IGNORE_FRAMES.length && IGNORE_FRAMES[i] === frame)) {
	            lines.push(trace[i]);
	        }
	    }
	}
	function renderLongStackTrace(frames, stack) {
	    var longTrace = [stack];
	    if (frames) {
	        var timestamp = new Date().getTime();
	        for (var i = 0; i < frames.length; i++) {
	            var traceFrames = frames[i];
	            var lastTime = traceFrames.timestamp;
	            longTrace.push(SEP + " Elapsed: " + (timestamp - lastTime.getTime()) + " ms; At: " + lastTime + " " + SEP);
	            addErrorStack(longTrace, traceFrames.error);
	            timestamp = lastTime.getTime();
	        }
	    }
	    return longTrace.join(NEWLINE);
	}
	Zone['longStackTraceZoneSpec'] = {
	    name: 'long-stack-trace',
	    longStackTraceLimit: 10,
	    onScheduleTask: function (parentZoneDelegate, currentZone, targetZone, task) {
	        var currentTask = Zone.currentTask;
	        var trace = currentTask && currentTask.data && currentTask.data[creationTrace] || [];
	        trace = [new LongStackTrace()].concat(trace);
	        if (trace.length > this.longStackTraceLimit) {
	            trace.length = this.longStackTraceLimit;
	        }
	        if (!task.data)
	            task.data = {};
	        task.data[creationTrace] = trace;
	        return parentZoneDelegate.scheduleTask(targetZone, task);
	    },
	    onHandleError: function (parentZoneDelegate, currentZone, targetZone, error) {
	        var parentTask = Zone.currentTask || error.task;
	        if (error instanceof Error && parentTask) {
	            var stackSetSucceded = null;
	            try {
	                var descriptor = Object.getOwnPropertyDescriptor(error, 'stack');
	                if (descriptor && descriptor.configurable) {
	                    var delegateGet_1 = descriptor.get;
	                    var value_1 = descriptor.value;
	                    descriptor = {
	                        get: function () {
	                            return renderLongStackTrace(parentTask.data && parentTask.data[creationTrace], delegateGet_1 ? delegateGet_1.apply(this) : value_1);
	                        }
	                    };
	                    Object.defineProperty(error, 'stack', descriptor);
	                    stackSetSucceded = true;
	                }
	            }
	            catch (e) {
	            }
	            var longStack = stackSetSucceded ?
	                null :
	                renderLongStackTrace(parentTask.data && parentTask.data[creationTrace], error.stack);
	            if (!stackSetSucceded) {
	                try {
	                    stackSetSucceded = error.stack = longStack;
	                }
	                catch (e) {
	                }
	            }
	            if (!stackSetSucceded) {
	                try {
	                    stackSetSucceded = error.longStack = longStack;
	                }
	                catch (e) {
	                }
	            }
	        }
	        return parentZoneDelegate.handleError(targetZone, error);
	    }
	};
	function captureStackTraces(stackTraces, count) {
	    if (count > 0) {
	        stackTraces.push(getFrames((new LongStackTrace()).error));
	        captureStackTraces(stackTraces, count - 1);
	    }
	}
	function computeIgnoreFrames() {
	    var frames = [];
	    captureStackTraces(frames, 2);
	    var frames1 = frames[0];
	    var frames2 = frames[1];
	    for (var i = 0; i < frames1.length; i++) {
	        var frame1 = frames1[i];
	        var frame2 = frames2[i];
	        if (frame1 === frame2) {
	            IGNORE_FRAMES.push(frame1);
	        }
	        else {
	            break;
	        }
	    }
	}
	computeIgnoreFrames();
	
	})));


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * THIS IS TEMPORARY TO PATCH 2.1.1+ Core bugs
	 */
	"use strict";
	/* tslint:disable */
	var __compiler__ = __webpack_require__(267);
	var platform_browser_1 = __webpack_require__(286);
	var core_1 = __webpack_require__(268);
	var patch = false;
	if (!core_1.__core_private__['ViewUtils']) {
	    patch = true;
	    core_1.__core_private__['ViewUtils'] = core_1.__core_private__['view_utils'];
	}
	if (__compiler__ && __compiler__.SelectorMatcher && __compiler__.CssSelector) {
	    patch = true;
	    (__compiler__).__compiler_private__ = {
	        SelectorMatcher: __compiler__.SelectorMatcher,
	        CssSelector: __compiler__.CssSelector
	    };
	}
	if (patch) {
	    var __universal__ = __webpack_require__(288);
	    __universal__.ViewUtils = core_1.__core_private__['view_utils'];
	    __universal__.CssSelector = __universal__.CssSelector || __compiler__.CssSelector;
	    __universal__.SelectorMatcher = __universal__.SelectorMatcher || __compiler__.SelectorMatcher;
	}
	// Fix Material Support
	function universalMaterialSupports(eventName) { return Boolean(this.isCustomEvent(eventName)); }
	platform_browser_1.__platform_browser_private__.HammerGesturesPlugin.prototype.supports = universalMaterialSupports;
	// End Fix Material Support
	// Fix Universal Style
	var node_1 = __webpack_require__(289);
	function renderComponentFix(componentProto) {
	    return new node_1.NodeDomRenderer(this, componentProto, this._animationDriver);
	}
	node_1.NodeDomRootRenderer.prototype.renderComponent = renderComponentFix;
	// End Fix Universal Style 


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v2.3.1
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	   true ? factory(exports, __webpack_require__(268)) :
	  typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	  (factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}),global.ng.core));
	}(this, function (exports,_angular_core) { 'use strict';
	
	  /**
	   * @stable
	   */
	  var /** @type {?} */ VERSION = new _angular_core.Version('2.3.1');
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  /**
	   *  A segment of text within the template.
	   */
	  var TextAst = (function () {
	      /**
	       * @param {?} value
	       * @param {?} ngContentIndex
	       * @param {?} sourceSpan
	       */
	      function TextAst(value, ngContentIndex, sourceSpan) {
	          this.value = value;
	          this.ngContentIndex = ngContentIndex;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      TextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	      return TextAst;
	  }());
	  /**
	   *  A bound expression within the text of a template.
	   */
	  var BoundTextAst = (function () {
	      /**
	       * @param {?} value
	       * @param {?} ngContentIndex
	       * @param {?} sourceSpan
	       */
	      function BoundTextAst(value, ngContentIndex, sourceSpan) {
	          this.value = value;
	          this.ngContentIndex = ngContentIndex;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      BoundTextAst.prototype.visit = function (visitor, context) {
	          return visitor.visitBoundText(this, context);
	      };
	      return BoundTextAst;
	  }());
	  /**
	   *  A plain attribute on an element.
	   */
	  var AttrAst = (function () {
	      /**
	       * @param {?} name
	       * @param {?} value
	       * @param {?} sourceSpan
	       */
	      function AttrAst(name, value, sourceSpan) {
	          this.name = name;
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      AttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context); };
	      return AttrAst;
	  }());
	  /**
	   *  A binding for an element property (e.g. `[property]="expression"`) or an animation trigger (e.g.
	    * `[@trigger]="stateExp"`)
	   */
	  var BoundElementPropertyAst = (function () {
	      /**
	       * @param {?} name
	       * @param {?} type
	       * @param {?} securityContext
	       * @param {?} needsRuntimeSecurityContext
	       * @param {?} value
	       * @param {?} unit
	       * @param {?} sourceSpan
	       */
	      function BoundElementPropertyAst(name, type, securityContext, needsRuntimeSecurityContext, value, unit, sourceSpan) {
	          this.name = name;
	          this.type = type;
	          this.securityContext = securityContext;
	          this.needsRuntimeSecurityContext = needsRuntimeSecurityContext;
	          this.value = value;
	          this.unit = unit;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      BoundElementPropertyAst.prototype.visit = function (visitor, context) {
	          return visitor.visitElementProperty(this, context);
	      };
	      Object.defineProperty(BoundElementPropertyAst.prototype, "isAnimation", {
	          /**
	           * @return {?}
	           */
	          get: function () { return this.type === PropertyBindingType.Animation; },
	          enumerable: true,
	          configurable: true
	      });
	      return BoundElementPropertyAst;
	  }());
	  /**
	   *  A binding for an element event (e.g. `(event)="handler()"`) or an animation trigger event (e.g.
	    * `(@trigger.phase)="callback($event)"`).
	   */
	  var BoundEventAst = (function () {
	      /**
	       * @param {?} name
	       * @param {?} target
	       * @param {?} phase
	       * @param {?} handler
	       * @param {?} sourceSpan
	       */
	      function BoundEventAst(name, target, phase, handler, sourceSpan) {
	          this.name = name;
	          this.target = target;
	          this.phase = phase;
	          this.handler = handler;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} name
	       * @param {?} target
	       * @param {?} phase
	       * @return {?}
	       */
	      BoundEventAst.calcFullName = function (name, target, phase) {
	          if (target) {
	              return target + ":" + name;
	          }
	          else if (phase) {
	              return "@" + name + "." + phase;
	          }
	          else {
	              return name;
	          }
	      };
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      BoundEventAst.prototype.visit = function (visitor, context) {
	          return visitor.visitEvent(this, context);
	      };
	      Object.defineProperty(BoundEventAst.prototype, "fullName", {
	          /**
	           * @return {?}
	           */
	          get: function () { return BoundEventAst.calcFullName(this.name, this.target, this.phase); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(BoundEventAst.prototype, "isAnimation", {
	          /**
	           * @return {?}
	           */
	          get: function () { return !!this.phase; },
	          enumerable: true,
	          configurable: true
	      });
	      return BoundEventAst;
	  }());
	  /**
	   *  A reference declaration on an element (e.g. `let someName="expression"`).
	   */
	  var ReferenceAst = (function () {
	      /**
	       * @param {?} name
	       * @param {?} value
	       * @param {?} sourceSpan
	       */
	      function ReferenceAst(name, value, sourceSpan) {
	          this.name = name;
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      ReferenceAst.prototype.visit = function (visitor, context) {
	          return visitor.visitReference(this, context);
	      };
	      return ReferenceAst;
	  }());
	  /**
	   *  A variable declaration on a <template> (e.g. `var-someName="someLocalName"`).
	   */
	  var VariableAst = (function () {
	      /**
	       * @param {?} name
	       * @param {?} value
	       * @param {?} sourceSpan
	       */
	      function VariableAst(name, value, sourceSpan) {
	          this.name = name;
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      VariableAst.prototype.visit = function (visitor, context) {
	          return visitor.visitVariable(this, context);
	      };
	      return VariableAst;
	  }());
	  /**
	   *  An element declaration in a template.
	   */
	  var ElementAst = (function () {
	      /**
	       * @param {?} name
	       * @param {?} attrs
	       * @param {?} inputs
	       * @param {?} outputs
	       * @param {?} references
	       * @param {?} directives
	       * @param {?} providers
	       * @param {?} hasViewContainer
	       * @param {?} children
	       * @param {?} ngContentIndex
	       * @param {?} sourceSpan
	       * @param {?} endSourceSpan
	       */
	      function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan, endSourceSpan) {
	          this.name = name;
	          this.attrs = attrs;
	          this.inputs = inputs;
	          this.outputs = outputs;
	          this.references = references;
	          this.directives = directives;
	          this.providers = providers;
	          this.hasViewContainer = hasViewContainer;
	          this.children = children;
	          this.ngContentIndex = ngContentIndex;
	          this.sourceSpan = sourceSpan;
	          this.endSourceSpan = endSourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      ElementAst.prototype.visit = function (visitor, context) {
	          return visitor.visitElement(this, context);
	      };
	      return ElementAst;
	  }());
	  /**
	   *  A `<template>` element included in an Angular template.
	   */
	  var EmbeddedTemplateAst = (function () {
	      /**
	       * @param {?} attrs
	       * @param {?} outputs
	       * @param {?} references
	       * @param {?} variables
	       * @param {?} directives
	       * @param {?} providers
	       * @param {?} hasViewContainer
	       * @param {?} children
	       * @param {?} ngContentIndex
	       * @param {?} sourceSpan
	       */
	      function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
	          this.attrs = attrs;
	          this.outputs = outputs;
	          this.references = references;
	          this.variables = variables;
	          this.directives = directives;
	          this.providers = providers;
	          this.hasViewContainer = hasViewContainer;
	          this.children = children;
	          this.ngContentIndex = ngContentIndex;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      EmbeddedTemplateAst.prototype.visit = function (visitor, context) {
	          return visitor.visitEmbeddedTemplate(this, context);
	      };
	      return EmbeddedTemplateAst;
	  }());
	  /**
	   *  A directive property with a bound value (e.g. `*ngIf="condition").
	   */
	  var BoundDirectivePropertyAst = (function () {
	      /**
	       * @param {?} directiveName
	       * @param {?} templateName
	       * @param {?} value
	       * @param {?} sourceSpan
	       */
	      function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
	          this.directiveName = directiveName;
	          this.templateName = templateName;
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      BoundDirectivePropertyAst.prototype.visit = function (visitor, context) {
	          return visitor.visitDirectiveProperty(this, context);
	      };
	      return BoundDirectivePropertyAst;
	  }());
	  /**
	   *  A directive declared on an element.
	   */
	  var DirectiveAst = (function () {
	      /**
	       * @param {?} directive
	       * @param {?} inputs
	       * @param {?} hostProperties
	       * @param {?} hostEvents
	       * @param {?} sourceSpan
	       */
	      function DirectiveAst(directive, inputs, hostProperties, hostEvents, sourceSpan) {
	          this.directive = directive;
	          this.inputs = inputs;
	          this.hostProperties = hostProperties;
	          this.hostEvents = hostEvents;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      DirectiveAst.prototype.visit = function (visitor, context) {
	          return visitor.visitDirective(this, context);
	      };
	      return DirectiveAst;
	  }());
	  /**
	   *  A provider declared on an element
	   */
	  var ProviderAst = (function () {
	      /**
	       * @param {?} token
	       * @param {?} multiProvider
	       * @param {?} eager
	       * @param {?} providers
	       * @param {?} providerType
	       * @param {?} lifecycleHooks
	       * @param {?} sourceSpan
	       */
	      function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {
	          this.token = token;
	          this.multiProvider = multiProvider;
	          this.eager = eager;
	          this.providers = providers;
	          this.providerType = providerType;
	          this.lifecycleHooks = lifecycleHooks;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      ProviderAst.prototype.visit = function (visitor, context) {
	          // No visit method in the visitor for now...
	          return null;
	      };
	      return ProviderAst;
	  }());
	  var ProviderAstType = {};
	  ProviderAstType.PublicService = 0;
	  ProviderAstType.PrivateService = 1;
	  ProviderAstType.Component = 2;
	  ProviderAstType.Directive = 3;
	  ProviderAstType.Builtin = 4;
	  ProviderAstType[ProviderAstType.PublicService] = "PublicService";
	  ProviderAstType[ProviderAstType.PrivateService] = "PrivateService";
	  ProviderAstType[ProviderAstType.Component] = "Component";
	  ProviderAstType[ProviderAstType.Directive] = "Directive";
	  ProviderAstType[ProviderAstType.Builtin] = "Builtin";
	  /**
	   *  Position where content is to be projected (instance of `<ng-content>` in a template).
	   */
	  var NgContentAst = (function () {
	      /**
	       * @param {?} index
	       * @param {?} ngContentIndex
	       * @param {?} sourceSpan
	       */
	      function NgContentAst(index, ngContentIndex, sourceSpan) {
	          this.index = index;
	          this.ngContentIndex = ngContentIndex;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      NgContentAst.prototype.visit = function (visitor, context) {
	          return visitor.visitNgContent(this, context);
	      };
	      return NgContentAst;
	  }());
	  var PropertyBindingType = {};
	  PropertyBindingType.Property = 0;
	  PropertyBindingType.Attribute = 1;
	  PropertyBindingType.Class = 2;
	  PropertyBindingType.Style = 3;
	  PropertyBindingType.Animation = 4;
	  PropertyBindingType[PropertyBindingType.Property] = "Property";
	  PropertyBindingType[PropertyBindingType.Attribute] = "Attribute";
	  PropertyBindingType[PropertyBindingType.Class] = "Class";
	  PropertyBindingType[PropertyBindingType.Style] = "Style";
	  PropertyBindingType[PropertyBindingType.Animation] = "Animation";
	  /**
	   *  Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.
	   * @param {?} visitor
	   * @param {?} asts
	   * @param {?=} context
	   * @return {?}
	   */
	  function templateVisitAll(visitor, asts, context) {
	      if (context === void 0) { context = null; }
	      var /** @type {?} */ result = [];
	      var /** @type {?} */ visit = visitor.visit ?
	          function (ast) { return visitor.visit(ast, context) || ast.visit(visitor, context); } :
	          function (ast) { return ast.visit(visitor, context); };
	      asts.forEach(function (ast) {
	          var /** @type {?} */ astResult = visit(ast);
	          if (astResult) {
	              result.push(astResult);
	          }
	      });
	      return result;
	  }
	
	  /**
	   *  A token representing the a reference to a static type.
	    * *
	    * This token is unique for a filePath and name and can be used as a hash table key.
	   */
	  var StaticSymbol = (function () {
	      /**
	       * @param {?} filePath
	       * @param {?} name
	       * @param {?=} members
	       */
	      function StaticSymbol(filePath, name, members) {
	          this.filePath = filePath;
	          this.name = name;
	          this.members = members;
	      }
	      return StaticSymbol;
	  }());
	
	  /**
	   * @param {?} obj
	   * @return {?}
	   */
	  function isPresent(obj) {
	      return obj != null;
	  }
	  /**
	   * @param {?} obj
	   * @return {?}
	   */
	  function isBlank(obj) {
	      return obj == null;
	  }
	  var /** @type {?} */ STRING_MAP_PROTO = Object.getPrototypeOf({});
	  /**
	   * @param {?} obj
	   * @return {?}
	   */
	  function isStrictStringMap(obj) {
	      return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
	  }
	  /**
	   * @param {?} token
	   * @return {?}
	   */
	  function stringify(token) {
	      if (typeof token === 'string') {
	          return token;
	      }
	      if (token == null) {
	          return '' + token;
	      }
	      if (token.overriddenName) {
	          return "" + token.overriddenName;
	      }
	      if (token.name) {
	          return "" + token.name;
	      }
	      var /** @type {?} */ res = token.toString();
	      var /** @type {?} */ newLineIndex = res.indexOf('\n');
	      return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	  }
	  var NumberWrapper = (function () {
	      function NumberWrapper() {
	      }
	      /**
	       * @param {?} text
	       * @return {?}
	       */
	      NumberWrapper.parseIntAutoRadix = function (text) {
	          var /** @type {?} */ result = parseInt(text);
	          if (isNaN(result)) {
	              throw new Error('Invalid integer literal when parsing ' + text);
	          }
	          return result;
	      };
	      /**
	       * @param {?} value
	       * @return {?}
	       */
	      NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };
	      return NumberWrapper;
	  }());
	  /**
	   * @param {?} o
	   * @return {?}
	   */
	  function isJsObject(o) {
	      return o !== null && (typeof o === 'function' || typeof o === 'object');
	  }
	  /**
	   * @param {?} obj
	   * @return {?}
	   */
	  function isPrimitive(obj) {
	      return !isJsObject(obj);
	  }
	  /**
	   * @param {?} s
	   * @return {?}
	   */
	  function escapeRegExp(s) {
	      return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
	  }
	
	  /**
	   *  Wraps Javascript Objects
	   */
	  var StringMapWrapper = (function () {
	      function StringMapWrapper() {
	      }
	      /**
	       * @param {?} m1
	       * @param {?} m2
	       * @return {?}
	       */
	      StringMapWrapper.merge = function (m1, m2) {
	          var /** @type {?} */ m = {};
	          for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	              var k = _a[_i];
	              m[k] = m1[k];
	          }
	          for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	              var k = _c[_b];
	              m[k] = m2[k];
	          }
	          return m;
	      };
	      /**
	       * @param {?} m1
	       * @param {?} m2
	       * @return {?}
	       */
	      StringMapWrapper.equals = function (m1, m2) {
	          var /** @type {?} */ k1 = Object.keys(m1);
	          var /** @type {?} */ k2 = Object.keys(m2);
	          if (k1.length != k2.length) {
	              return false;
	          }
	          for (var /** @type {?} */ i = 0; i < k1.length; i++) {
	              var /** @type {?} */ key = k1[i];
	              if (m1[key] !== m2[key]) {
	                  return false;
	              }
	          }
	          return true;
	      };
	      return StringMapWrapper;
	  }());
	  var ListWrapper = (function () {
	      function ListWrapper() {
	      }
	      /**
	       * @param {?} arr
	       * @param {?} condition
	       * @return {?}
	       */
	      ListWrapper.findLast = function (arr, condition) {
	          for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {
	              if (condition(arr[i])) {
	                  return arr[i];
	              }
	          }
	          return null;
	      };
	      /**
	       * @param {?} list
	       * @param {?} items
	       * @return {?}
	       */
	      ListWrapper.removeAll = function (list, items) {
	          for (var /** @type {?} */ i = 0; i < items.length; ++i) {
	              var /** @type {?} */ index = list.indexOf(items[i]);
	              if (index > -1) {
	                  list.splice(index, 1);
	              }
	          }
	      };
	      /**
	       * @param {?} list
	       * @param {?} el
	       * @return {?}
	       */
	      ListWrapper.remove = function (list, el) {
	          var /** @type {?} */ index = list.indexOf(el);
	          if (index > -1) {
	              list.splice(index, 1);
	              return true;
	          }
	          return false;
	      };
	      /**
	       * @param {?} a
	       * @param {?} b
	       * @return {?}
	       */
	      ListWrapper.equals = function (a, b) {
	          if (a.length != b.length)
	              return false;
	          for (var /** @type {?} */ i = 0; i < a.length; ++i) {
	              if (a[i] !== b[i])
	                  return false;
	          }
	          return true;
	      };
	      /**
	       * @param {?} list
	       * @return {?}
	       */
	      ListWrapper.flatten = function (list) {
	          return list.reduce(function (flat, item) {
	              var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
	              return ((flat)).concat(flatItem);
	          }, []);
	      };
	      return ListWrapper;
	  }());
	
	  var /** @type {?} */ isDefaultChangeDetectionStrategy = _angular_core.__core_private__.isDefaultChangeDetectionStrategy;
	  var /** @type {?} */ ChangeDetectorStatus = _angular_core.__core_private__.ChangeDetectorStatus;
	  var /** @type {?} */ LifecycleHooks = _angular_core.__core_private__.LifecycleHooks;
	  var /** @type {?} */ LIFECYCLE_HOOKS_VALUES = _angular_core.__core_private__.LIFECYCLE_HOOKS_VALUES;
	  var /** @type {?} */ ReflectorReader = _angular_core.__core_private__.ReflectorReader;
	  var /** @type {?} */ ViewContainer = _angular_core.__core_private__.ViewContainer;
	  var /** @type {?} */ CodegenComponentFactoryResolver = _angular_core.__core_private__.CodegenComponentFactoryResolver;
	  var /** @type {?} */ ComponentRef_ = _angular_core.__core_private__.ComponentRef_;
	  var /** @type {?} */ AppView = _angular_core.__core_private__.AppView;
	  var /** @type {?} */ DebugAppView = _angular_core.__core_private__.DebugAppView;
	  var /** @type {?} */ NgModuleInjector = _angular_core.__core_private__.NgModuleInjector;
	  var /** @type {?} */ registerModuleFactory = _angular_core.__core_private__.registerModuleFactory;
	  var /** @type {?} */ ViewType = _angular_core.__core_private__.ViewType;
	  var /** @type {?} */ view_utils = _angular_core.__core_private__.view_utils;
	  var /** @type {?} */ DebugContext = _angular_core.__core_private__.DebugContext;
	  var /** @type {?} */ StaticNodeDebugInfo = _angular_core.__core_private__.StaticNodeDebugInfo;
	  var /** @type {?} */ devModeEqual = _angular_core.__core_private__.devModeEqual;
	  var /** @type {?} */ UNINITIALIZED = _angular_core.__core_private__.UNINITIALIZED;
	  var /** @type {?} */ ValueUnwrapper = _angular_core.__core_private__.ValueUnwrapper;
	  var /** @type {?} */ TemplateRef_ = _angular_core.__core_private__.TemplateRef_;
	  var /** @type {?} */ Console = _angular_core.__core_private__.Console;
	  var /** @type {?} */ reflector = _angular_core.__core_private__.reflector;
	  var /** @type {?} */ Reflector = _angular_core.__core_private__.Reflector;
	  var /** @type {?} */ ReflectionCapabilities = _angular_core.__core_private__.ReflectionCapabilities;
	  var /** @type {?} */ NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer;
	  var /** @type {?} */ AnimationSequencePlayer = _angular_core.__core_private__.AnimationSequencePlayer;
	  var /** @type {?} */ AnimationGroupPlayer = _angular_core.__core_private__.AnimationGroupPlayer;
	  var /** @type {?} */ AnimationKeyframe = _angular_core.__core_private__.AnimationKeyframe;
	  var /** @type {?} */ AnimationStyles = _angular_core.__core_private__.AnimationStyles;
	  var /** @type {?} */ ANY_STATE = _angular_core.__core_private__.ANY_STATE;
	  var /** @type {?} */ DEFAULT_STATE = _angular_core.__core_private__.DEFAULT_STATE;
	  var /** @type {?} */ EMPTY_STATE = _angular_core.__core_private__.EMPTY_STATE;
	  var /** @type {?} */ FILL_STYLE_FLAG = _angular_core.__core_private__.FILL_STYLE_FLAG;
	  var /** @type {?} */ prepareFinalAnimationStyles = _angular_core.__core_private__.prepareFinalAnimationStyles;
	  var /** @type {?} */ balanceAnimationKeyframes = _angular_core.__core_private__.balanceAnimationKeyframes;
	  var /** @type {?} */ clearStyles = _angular_core.__core_private__.clearStyles;
	  var /** @type {?} */ collectAndResolveStyles = _angular_core.__core_private__.collectAndResolveStyles;
	  var /** @type {?} */ renderStyles = _angular_core.__core_private__.renderStyles;
	  var /** @type {?} */ ComponentStillLoadingError = _angular_core.__core_private__.ComponentStillLoadingError;
	  var /** @type {?} */ AnimationTransition = _angular_core.__core_private__.AnimationTransition;
	
	  var TagContentType = {};
	  TagContentType.RAW_TEXT = 0;
	  TagContentType.ESCAPABLE_RAW_TEXT = 1;
	  TagContentType.PARSABLE_DATA = 2;
	  TagContentType[TagContentType.RAW_TEXT] = "RAW_TEXT";
	  TagContentType[TagContentType.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT";
	  TagContentType[TagContentType.PARSABLE_DATA] = "PARSABLE_DATA";
	  /**
	   * @param {?} elementName
	   * @return {?}
	   */
	  function splitNsName(elementName) {
	      if (elementName[0] != ':') {
	          return [null, elementName];
	      }
	      var /** @type {?} */ colonIndex = elementName.indexOf(':', 1);
	      if (colonIndex == -1) {
	          throw new Error("Unsupported format \"" + elementName + "\" expecting \":namespace:name\"");
	      }
	      return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
	  }
	  /**
	   * @param {?} fullName
	   * @return {?}
	   */
	  function getNsPrefix(fullName) {
	      return fullName === null ? null : splitNsName(fullName)[0];
	  }
	  /**
	   * @param {?} prefix
	   * @param {?} localName
	   * @return {?}
	   */
	  function mergeNsAndName(prefix, localName) {
	      return prefix ? ":" + prefix + ":" + localName : localName;
	  }
	  // see http://www.w3.org/TR/html51/syntax.html#named-character-references
	  // see https://html.spec.whatwg.org/multipage/entities.json
	  // This list is not exhaustive to keep the compiler footprint low.
	  // The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not exist.
	  var /** @type {?} */ NAMED_ENTITIES = {
	      'Aacute': '\u00C1',
	      'aacute': '\u00E1',
	      'Acirc': '\u00C2',
	      'acirc': '\u00E2',
	      'acute': '\u00B4',
	      'AElig': '\u00C6',
	      'aelig': '\u00E6',
	      'Agrave': '\u00C0',
	      'agrave': '\u00E0',
	      'alefsym': '\u2135',
	      'Alpha': '\u0391',
	      'alpha': '\u03B1',
	      'amp': '&',
	      'and': '\u2227',
	      'ang': '\u2220',
	      'apos': '\u0027',
	      'Aring': '\u00C5',
	      'aring': '\u00E5',
	      'asymp': '\u2248',
	      'Atilde': '\u00C3',
	      'atilde': '\u00E3',
	      'Auml': '\u00C4',
	      'auml': '\u00E4',
	      'bdquo': '\u201E',
	      'Beta': '\u0392',
	      'beta': '\u03B2',
	      'brvbar': '\u00A6',
	      'bull': '\u2022',
	      'cap': '\u2229',
	      'Ccedil': '\u00C7',
	      'ccedil': '\u00E7',
	      'cedil': '\u00B8',
	      'cent': '\u00A2',
	      'Chi': '\u03A7',
	      'chi': '\u03C7',
	      'circ': '\u02C6',
	      'clubs': '\u2663',
	      'cong': '\u2245',
	      'copy': '\u00A9',
	      'crarr': '\u21B5',
	      'cup': '\u222A',
	      'curren': '\u00A4',
	      'dagger': '\u2020',
	      'Dagger': '\u2021',
	      'darr': '\u2193',
	      'dArr': '\u21D3',
	      'deg': '\u00B0',
	      'Delta': '\u0394',
	      'delta': '\u03B4',
	      'diams': '\u2666',
	      'divide': '\u00F7',
	      'Eacute': '\u00C9',
	      'eacute': '\u00E9',
	      'Ecirc': '\u00CA',
	      'ecirc': '\u00EA',
	      'Egrave': '\u00C8',
	      'egrave': '\u00E8',
	      'empty': '\u2205',
	      'emsp': '\u2003',
	      'ensp': '\u2002',
	      'Epsilon': '\u0395',
	      'epsilon': '\u03B5',
	      'equiv': '\u2261',
	      'Eta': '\u0397',
	      'eta': '\u03B7',
	      'ETH': '\u00D0',
	      'eth': '\u00F0',
	      'Euml': '\u00CB',
	      'euml': '\u00EB',
	      'euro': '\u20AC',
	      'exist': '\u2203',
	      'fnof': '\u0192',
	      'forall': '\u2200',
	      'frac12': '\u00BD',
	      'frac14': '\u00BC',
	      'frac34': '\u00BE',
	      'frasl': '\u2044',
	      'Gamma': '\u0393',
	      'gamma': '\u03B3',
	      'ge': '\u2265',
	      'gt': '>',
	      'harr': '\u2194',
	      'hArr': '\u21D4',
	      'hearts': '\u2665',
	      'hellip': '\u2026',
	      'Iacute': '\u00CD',
	      'iacute': '\u00ED',
	      'Icirc': '\u00CE',
	      'icirc': '\u00EE',
	      'iexcl': '\u00A1',
	      'Igrave': '\u00CC',
	      'igrave': '\u00EC',
	      'image': '\u2111',
	      'infin': '\u221E',
	      'int': '\u222B',
	      'Iota': '\u0399',
	      'iota': '\u03B9',
	      'iquest': '\u00BF',
	      'isin': '\u2208',
	      'Iuml': '\u00CF',
	      'iuml': '\u00EF',
	      'Kappa': '\u039A',
	      'kappa': '\u03BA',
	      'Lambda': '\u039B',
	      'lambda': '\u03BB',
	      'lang': '\u27E8',
	      'laquo': '\u00AB',
	      'larr': '\u2190',
	      'lArr': '\u21D0',
	      'lceil': '\u2308',
	      'ldquo': '\u201C',
	      'le': '\u2264',
	      'lfloor': '\u230A',
	      'lowast': '\u2217',
	      'loz': '\u25CA',
	      'lrm': '\u200E',
	      'lsaquo': '\u2039',
	      'lsquo': '\u2018',
	      'lt': '<',
	      'macr': '\u00AF',
	      'mdash': '\u2014',
	      'micro': '\u00B5',
	      'middot': '\u00B7',
	      'minus': '\u2212',
	      'Mu': '\u039C',
	      'mu': '\u03BC',
	      'nabla': '\u2207',
	      'nbsp': '\u00A0',
	      'ndash': '\u2013',
	      'ne': '\u2260',
	      'ni': '\u220B',
	      'not': '\u00AC',
	      'notin': '\u2209',
	      'nsub': '\u2284',
	      'Ntilde': '\u00D1',
	      'ntilde': '\u00F1',
	      'Nu': '\u039D',
	      'nu': '\u03BD',
	      'Oacute': '\u00D3',
	      'oacute': '\u00F3',
	      'Ocirc': '\u00D4',
	      'ocirc': '\u00F4',
	      'OElig': '\u0152',
	      'oelig': '\u0153',
	      'Ograve': '\u00D2',
	      'ograve': '\u00F2',
	      'oline': '\u203E',
	      'Omega': '\u03A9',
	      'omega': '\u03C9',
	      'Omicron': '\u039F',
	      'omicron': '\u03BF',
	      'oplus': '\u2295',
	      'or': '\u2228',
	      'ordf': '\u00AA',
	      'ordm': '\u00BA',
	      'Oslash': '\u00D8',
	      'oslash': '\u00F8',
	      'Otilde': '\u00D5',
	      'otilde': '\u00F5',
	      'otimes': '\u2297',
	      'Ouml': '\u00D6',
	      'ouml': '\u00F6',
	      'para': '\u00B6',
	      'permil': '\u2030',
	      'perp': '\u22A5',
	      'Phi': '\u03A6',
	      'phi': '\u03C6',
	      'Pi': '\u03A0',
	      'pi': '\u03C0',
	      'piv': '\u03D6',
	      'plusmn': '\u00B1',
	      'pound': '\u00A3',
	      'prime': '\u2032',
	      'Prime': '\u2033',
	      'prod': '\u220F',
	      'prop': '\u221D',
	      'Psi': '\u03A8',
	      'psi': '\u03C8',
	      'quot': '\u0022',
	      'radic': '\u221A',
	      'rang': '\u27E9',
	      'raquo': '\u00BB',
	      'rarr': '\u2192',
	      'rArr': '\u21D2',
	      'rceil': '\u2309',
	      'rdquo': '\u201D',
	      'real': '\u211C',
	      'reg': '\u00AE',
	      'rfloor': '\u230B',
	      'Rho': '\u03A1',
	      'rho': '\u03C1',
	      'rlm': '\u200F',
	      'rsaquo': '\u203A',
	      'rsquo': '\u2019',
	      'sbquo': '\u201A',
	      'Scaron': '\u0160',
	      'scaron': '\u0161',
	      'sdot': '\u22C5',
	      'sect': '\u00A7',
	      'shy': '\u00AD',
	      'Sigma': '\u03A3',
	      'sigma': '\u03C3',
	      'sigmaf': '\u03C2',
	      'sim': '\u223C',
	      'spades': '\u2660',
	      'sub': '\u2282',
	      'sube': '\u2286',
	      'sum': '\u2211',
	      'sup': '\u2283',
	      'sup1': '\u00B9',
	      'sup2': '\u00B2',
	      'sup3': '\u00B3',
	      'supe': '\u2287',
	      'szlig': '\u00DF',
	      'Tau': '\u03A4',
	      'tau': '\u03C4',
	      'there4': '\u2234',
	      'Theta': '\u0398',
	      'theta': '\u03B8',
	      'thetasym': '\u03D1',
	      'thinsp': '\u2009',
	      'THORN': '\u00DE',
	      'thorn': '\u00FE',
	      'tilde': '\u02DC',
	      'times': '\u00D7',
	      'trade': '\u2122',
	      'Uacute': '\u00DA',
	      'uacute': '\u00FA',
	      'uarr': '\u2191',
	      'uArr': '\u21D1',
	      'Ucirc': '\u00DB',
	      'ucirc': '\u00FB',
	      'Ugrave': '\u00D9',
	      'ugrave': '\u00F9',
	      'uml': '\u00A8',
	      'upsih': '\u03D2',
	      'Upsilon': '\u03A5',
	      'upsilon': '\u03C5',
	      'Uuml': '\u00DC',
	      'uuml': '\u00FC',
	      'weierp': '\u2118',
	      'Xi': '\u039E',
	      'xi': '\u03BE',
	      'Yacute': '\u00DD',
	      'yacute': '\u00FD',
	      'yen': '\u00A5',
	      'yuml': '\u00FF',
	      'Yuml': '\u0178',
	      'Zeta': '\u0396',
	      'zeta': '\u03B6',
	      'zwj': '\u200D',
	      'zwnj': '\u200C',
	  };
	
	  var HtmlTagDefinition = (function () {
	      /**
	       * @param {?=} __0
	       */
	      function HtmlTagDefinition(_a) {
	          var _this = this;
	          var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, _c = _b.contentType, contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c, _d = _b.closedByParent, closedByParent = _d === void 0 ? false : _d, _e = _b.isVoid, isVoid = _e === void 0 ? false : _e, _f = _b.ignoreFirstLf, ignoreFirstLf = _f === void 0 ? false : _f;
	          this.closedByChildren = {};
	          this.closedByParent = false;
	          this.canSelfClose = false;
	          if (closedByChildren && closedByChildren.length > 0) {
	              closedByChildren.forEach(function (tagName) { return _this.closedByChildren[tagName] = true; });
	          }
	          this.isVoid = isVoid;
	          this.closedByParent = closedByParent || isVoid;
	          if (requiredParents && requiredParents.length > 0) {
	              this.requiredParents = {};
	              // The first parent is the list is automatically when none of the listed parents are present
	              this.parentToAdd = requiredParents[0];
	              requiredParents.forEach(function (tagName) { return _this.requiredParents[tagName] = true; });
	          }
	          this.implicitNamespacePrefix = implicitNamespacePrefix;
	          this.contentType = contentType;
	          this.ignoreFirstLf = ignoreFirstLf;
	      }
	      /**
	       * @param {?} currentParent
	       * @return {?}
	       */
	      HtmlTagDefinition.prototype.requireExtraParent = function (currentParent) {
	          if (!this.requiredParents) {
	              return false;
	          }
	          if (!currentParent) {
	              return true;
	          }
	          var /** @type {?} */ lcParent = currentParent.toLowerCase();
	          return this.requiredParents[lcParent] != true && lcParent != 'template';
	      };
	      /**
	       * @param {?} name
	       * @return {?}
	       */
	      HtmlTagDefinition.prototype.isClosedByChild = function (name) {
	          return this.isVoid || name.toLowerCase() in this.closedByChildren;
	      };
	      return HtmlTagDefinition;
	  }());
	  // see http://www.w3.org/TR/html51/syntax.html#optional-tags
	  // This implementation does not fully conform to the HTML5 spec.
	  var /** @type {?} */ TAG_DEFINITIONS = {
	      'base': new HtmlTagDefinition({ isVoid: true }),
	      'meta': new HtmlTagDefinition({ isVoid: true }),
	      'area': new HtmlTagDefinition({ isVoid: true }),
	      'embed': new HtmlTagDefinition({ isVoid: true }),
	      'link': new HtmlTagDefinition({ isVoid: true }),
	      'img': new HtmlTagDefinition({ isVoid: true }),
	      'input': new HtmlTagDefinition({ isVoid: true }),
	      'param': new HtmlTagDefinition({ isVoid: true }),
	      'hr': new HtmlTagDefinition({ isVoid: true }),
	      'br': new HtmlTagDefinition({ isVoid: true }),
	      'source': new HtmlTagDefinition({ isVoid: true }),
	      'track': new HtmlTagDefinition({ isVoid: true }),
	      'wbr': new HtmlTagDefinition({ isVoid: true }),
	      'p': new HtmlTagDefinition({
	          closedByChildren: [
	              'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form',
	              'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr',
	              'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'
	          ],
	          closedByParent: true
	      }),
	      'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),
	      'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),
	      'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),
	      'tr': new HtmlTagDefinition({
	          closedByChildren: ['tr'],
	          requiredParents: ['tbody', 'tfoot', 'thead'],
	          closedByParent: true
	      }),
	      'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	      'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	      'col': new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),
	      'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),
	      'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),
	      'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),
	      'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),
	      'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),
	      'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	      'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	      'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),
	      'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	      'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),
	      'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),
	      'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),
	      'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),
	      'style': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
	      'script': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
	      'title': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }),
	      'textarea': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),
	  };
	  var /** @type {?} */ _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
	  /**
	   * @param {?} tagName
	   * @return {?}
	   */
	  function getHtmlTagDefinition(tagName) {
	      return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
	  }
	
	  var /** @type {?} */ _SELECTOR_REGEXP = new RegExp('(\\:not\\()|' +
	      '([-\\w]+)|' +
	      '(?:\\.([-\\w]+))|' +
	      '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' +
	      '(\\))|' +
	      '(\\s*,\\s*)', // ","
	  'g');
	  /**
	   *  A css selector contains an element name,
	    * css classes and attribute/value pairs with the purpose
	    * of selecting subsets out of them.
	   */
	  var CssSelector = (function () {
	      function CssSelector() {
	          this.element = null;
	          this.classNames = [];
	          this.attrs = [];
	          this.notSelectors = [];
	      }
	      /**
	       * @param {?} selector
	       * @return {?}
	       */
	      CssSelector.parse = function (selector) {
	          var /** @type {?} */ results = [];
	          var /** @type {?} */ _addResult = function (res, cssSel) {
	              if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 &&
	                  cssSel.attrs.length == 0) {
	                  cssSel.element = '*';
	              }
	              res.push(cssSel);
	          };
	          var /** @type {?} */ cssSelector = new CssSelector();
	          var /** @type {?} */ match;
	          var /** @type {?} */ current = cssSelector;
	          var /** @type {?} */ inNot = false;
	          _SELECTOR_REGEXP.lastIndex = 0;
	          while (match = _SELECTOR_REGEXP.exec(selector)) {
	              if (match[1]) {
	                  if (inNot) {
	                      throw new Error('Nesting :not is not allowed in a selector');
	                  }
	                  inNot = true;
	                  current = new CssSelector();
	                  cssSelector.notSelectors.push(current);
	              }
	              if (match[2]) {
	                  current.setElement(match[2]);
	              }
	              if (match[3]) {
	                  current.addClassName(match[3]);
	              }
	              if (match[4]) {
	                  current.addAttribute(match[4], match[5]);
	              }
	              if (match[6]) {
	                  inNot = false;
	                  current = cssSelector;
	              }
	              if (match[7]) {
	                  if (inNot) {
	                      throw new Error('Multiple selectors in :not are not supported');
	                  }
	                  _addResult(results, cssSelector);
	                  cssSelector = current = new CssSelector();
	              }
	          }
	          _addResult(results, cssSelector);
	          return results;
	      };
	      /**
	       * @return {?}
	       */
	      CssSelector.prototype.isElementSelector = function () {
	          return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 &&
	              this.notSelectors.length === 0;
	      };
	      /**
	       * @return {?}
	       */
	      CssSelector.prototype.hasElementSelector = function () { return !!this.element; };
	      /**
	       * @param {?=} element
	       * @return {?}
	       */
	      CssSelector.prototype.setElement = function (element) {
	          if (element === void 0) { element = null; }
	          this.element = element;
	      };
	      /**
	       *  Gets a template string for an element that matches the selector.
	       * @return {?}
	       */
	      CssSelector.prototype.getMatchingElementTemplate = function () {
	          var /** @type {?} */ tagName = this.element || 'div';
	          var /** @type {?} */ classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
	          var /** @type {?} */ attrs = '';
	          for (var /** @type {?} */ i = 0; i < this.attrs.length; i += 2) {
	              var /** @type {?} */ attrName = this.attrs[i];
	              var /** @type {?} */ attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
	              attrs += " " + attrName + attrValue;
	          }
	          return getHtmlTagDefinition(tagName).isVoid ? "<" + tagName + classAttr + attrs + "/>" :
	              "<" + tagName + classAttr + attrs + "></" + tagName + ">";
	      };
	      /**
	       * @param {?} name
	       * @param {?=} value
	       * @return {?}
	       */
	      CssSelector.prototype.addAttribute = function (name, value) {
	          if (value === void 0) { value = ''; }
	          this.attrs.push(name, value && value.toLowerCase() || '');
	      };
	      /**
	       * @param {?} name
	       * @return {?}
	       */
	      CssSelector.prototype.addClassName = function (name) { this.classNames.push(name.toLowerCase()); };
	      /**
	       * @return {?}
	       */
	      CssSelector.prototype.toString = function () {
	          var /** @type {?} */ res = this.element || '';
	          if (this.classNames) {
	              this.classNames.forEach(function (klass) { return res += "." + klass; });
	          }
	          if (this.attrs) {
	              for (var /** @type {?} */ i = 0; i < this.attrs.length; i += 2) {
	                  var /** @type {?} */ name_1 = this.attrs[i];
	                  var /** @type {?} */ value = this.attrs[i + 1];
	                  res += "[" + name_1 + (value ? '=' + value : '') + "]";
	              }
	          }
	          this.notSelectors.forEach(function (notSelector) { return res += ":not(" + notSelector + ")"; });
	          return res;
	      };
	      return CssSelector;
	  }());
	  /**
	   *  Reads a list of CssSelectors and allows to calculate which ones
	    * are contained in a given CssSelector.
	   */
	  var SelectorMatcher = (function () {
	      function SelectorMatcher() {
	          this._elementMap = new Map();
	          this._elementPartialMap = new Map();
	          this._classMap = new Map();
	          this._classPartialMap = new Map();
	          this._attrValueMap = new Map();
	          this._attrValuePartialMap = new Map();
	          this._listContexts = [];
	      }
	      /**
	       * @param {?} notSelectors
	       * @return {?}
	       */
	      SelectorMatcher.createNotMatcher = function (notSelectors) {
	          var /** @type {?} */ notMatcher = new SelectorMatcher();
	          notMatcher.addSelectables(notSelectors, null);
	          return notMatcher;
	      };
	      /**
	       * @param {?} cssSelectors
	       * @param {?=} callbackCtxt
	       * @return {?}
	       */
	      SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {
	          var /** @type {?} */ listContext = null;
	          if (cssSelectors.length > 1) {
	              listContext = new SelectorListContext(cssSelectors);
	              this._listContexts.push(listContext);
	          }
	          for (var /** @type {?} */ i = 0; i < cssSelectors.length; i++) {
	              this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
	          }
	      };
	      /**
	       *  Add an object that can be found later on by calling `match`.
	       * @param {?} cssSelector A css selector
	       * @param {?} callbackCtxt An opaque object that will be given to the callback of the `match` function
	       * @param {?} listContext
	       * @return {?}
	       */
	      SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {
	          var /** @type {?} */ matcher = this;
	          var /** @type {?} */ element = cssSelector.element;
	          var /** @type {?} */ classNames = cssSelector.classNames;
	          var /** @type {?} */ attrs = cssSelector.attrs;
	          var /** @type {?} */ selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
	          if (element) {
	              var /** @type {?} */ isTerminal = attrs.length === 0 && classNames.length === 0;
	              if (isTerminal) {
	                  this._addTerminal(matcher._elementMap, element, selectable);
	              }
	              else {
	                  matcher = this._addPartial(matcher._elementPartialMap, element);
	              }
	          }
	          if (classNames) {
	              for (var /** @type {?} */ i = 0; i < classNames.length; i++) {
	                  var /** @type {?} */ isTerminal = attrs.length === 0 && i === classNames.length - 1;
	                  var /** @type {?} */ className = classNames[i];
	                  if (isTerminal) {
	                      this._addTerminal(matcher._classMap, className, selectable);
	                  }
	                  else {
	                      matcher = this._addPartial(matcher._classPartialMap, className);
	                  }
	              }
	          }
	          if (attrs) {
	              for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
	                  var /** @type {?} */ isTerminal = i === attrs.length - 2;
	                  var /** @type {?} */ name_2 = attrs[i];
	                  var /** @type {?} */ value = attrs[i + 1];
	                  if (isTerminal) {
	                      var /** @type {?} */ terminalMap = matcher._attrValueMap;
	                      var /** @type {?} */ terminalValuesMap = terminalMap.get(name_2);
	                      if (!terminalValuesMap) {
	                          terminalValuesMap = new Map();
	                          terminalMap.set(name_2, terminalValuesMap);
	                      }
	                      this._addTerminal(terminalValuesMap, value, selectable);
	                  }
	                  else {
	                      var /** @type {?} */ partialMap = matcher._attrValuePartialMap;
	                      var /** @type {?} */ partialValuesMap = partialMap.get(name_2);
	                      if (!partialValuesMap) {
	                          partialValuesMap = new Map();
	                          partialMap.set(name_2, partialValuesMap);
	                      }
	                      matcher = this._addPartial(partialValuesMap, value);
	                  }
	              }
	          }
	      };
	      /**
	       * @param {?} map
	       * @param {?} name
	       * @param {?} selectable
	       * @return {?}
	       */
	      SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {
	          var /** @type {?} */ terminalList = map.get(name);
	          if (!terminalList) {
	              terminalList = [];
	              map.set(name, terminalList);
	          }
	          terminalList.push(selectable);
	      };
	      /**
	       * @param {?} map
	       * @param {?} name
	       * @return {?}
	       */
	      SelectorMatcher.prototype._addPartial = function (map, name) {
	          var /** @type {?} */ matcher = map.get(name);
	          if (!matcher) {
	              matcher = new SelectorMatcher();
	              map.set(name, matcher);
	          }
	          return matcher;
	      };
	      /**
	       *  Find the objects that have been added via `addSelectable`
	        * whose css selector is contained in the given css selector.
	       * @param {?} cssSelector A css selector
	       * @param {?} matchedCallback This callback will be called with the object handed into `addSelectable`
	       * @return {?} boolean true if a match was found
	       */
	      SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) {
	          var /** @type {?} */ result = false;
	          var /** @type {?} */ element = cssSelector.element;
	          var /** @type {?} */ classNames = cssSelector.classNames;
	          var /** @type {?} */ attrs = cssSelector.attrs;
	          for (var /** @type {?} */ i = 0; i < this._listContexts.length; i++) {
	              this._listContexts[i].alreadyMatched = false;
	          }
	          result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
	          result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||
	              result;
	          if (classNames) {
	              for (var /** @type {?} */ i = 0; i < classNames.length; i++) {
	                  var /** @type {?} */ className = classNames[i];
	                  result =
	                      this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
	                  result =
	                      this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||
	                          result;
	              }
	          }
	          if (attrs) {
	              for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
	                  var /** @type {?} */ name_3 = attrs[i];
	                  var /** @type {?} */ value = attrs[i + 1];
	                  var /** @type {?} */ terminalValuesMap = this._attrValueMap.get(name_3);
	                  if (value) {
	                      result =
	                          this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;
	                  }
	                  result =
	                      this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
	                  var /** @type {?} */ partialValuesMap = this._attrValuePartialMap.get(name_3);
	                  if (value) {
	                      result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;
	                  }
	                  result =
	                      this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
	              }
	          }
	          return result;
	      };
	      /**
	       * @param {?} map
	       * @param {?} name
	       * @param {?} cssSelector
	       * @param {?} matchedCallback
	       * @return {?}
	       */
	      SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) {
	          if (!map || typeof name !== 'string') {
	              return false;
	          }
	          var /** @type {?} */ selectables = map.get(name) || [];
	          var /** @type {?} */ starSelectables = map.get('*');
	          if (starSelectables) {
	              selectables = selectables.concat(starSelectables);
	          }
	          if (selectables.length === 0) {
	              return false;
	          }
	          var /** @type {?} */ selectable;
	          var /** @type {?} */ result = false;
	          for (var /** @type {?} */ i = 0; i < selectables.length; i++) {
	              selectable = selectables[i];
	              result = selectable.finalize(cssSelector, matchedCallback) || result;
	          }
	          return result;
	      };
	      /**
	       * @param {?} map
	       * @param {?} name
	       * @param {?} cssSelector
	       * @param {?} matchedCallback
	       * @return {?}
	       */
	      SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback) {
	          if (!map || typeof name !== 'string') {
	              return false;
	          }
	          var /** @type {?} */ nestedSelector = map.get(name);
	          if (!nestedSelector) {
	              return false;
	          }
	          // TODO(perf): get rid of recursion and measure again
	          // TODO(perf): don't pass the whole selector into the recursion,
	          // but only the not processed parts
	          return nestedSelector.match(cssSelector, matchedCallback);
	      };
	      return SelectorMatcher;
	  }());
	  var SelectorListContext = (function () {
	      /**
	       * @param {?} selectors
	       */
	      function SelectorListContext(selectors) {
	          this.selectors = selectors;
	          this.alreadyMatched = false;
	      }
	      return SelectorListContext;
	  }());
	  // Store context to pass back selector and context when a selector is matched
	  var SelectorContext = (function () {
	      /**
	       * @param {?} selector
	       * @param {?} cbContext
	       * @param {?} listContext
	       */
	      function SelectorContext(selector, cbContext, listContext) {
	          this.selector = selector;
	          this.cbContext = cbContext;
	          this.listContext = listContext;
	          this.notSelectors = selector.notSelectors;
	      }
	      /**
	       * @param {?} cssSelector
	       * @param {?} callback
	       * @return {?}
	       */
	      SelectorContext.prototype.finalize = function (cssSelector, callback) {
	          var /** @type {?} */ result = true;
	          if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
	              var /** @type {?} */ notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
	              result = !notMatcher.match(cssSelector, null);
	          }
	          if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
	              if (this.listContext) {
	                  this.listContext.alreadyMatched = true;
	              }
	              callback(this.selector, this.cbContext);
	          }
	          return result;
	      };
	      return SelectorContext;
	  }());
	
	  var /** @type {?} */ MODULE_SUFFIX = '';
	  var /** @type {?} */ DASH_CASE_REGEXP = /-+([a-z0-9])/g;
	  /**
	   * @param {?} input
	   * @return {?}
	   */
	  function dashCaseToCamelCase(input) {
	      return input.replace(DASH_CASE_REGEXP, function () {
	          var m = [];
	          for (var _i = 0; _i < arguments.length; _i++) {
	              m[_i - 0] = arguments[_i];
	          }
	          return m[1].toUpperCase();
	      });
	  }
	  /**
	   * @param {?} input
	   * @param {?} defaultValues
	   * @return {?}
	   */
	  function splitAtColon(input, defaultValues) {
	      return _splitAt(input, ':', defaultValues);
	  }
	  /**
	   * @param {?} input
	   * @param {?} defaultValues
	   * @return {?}
	   */
	  function splitAtPeriod(input, defaultValues) {
	      return _splitAt(input, '.', defaultValues);
	  }
	  /**
	   * @param {?} input
	   * @param {?} character
	   * @param {?} defaultValues
	   * @return {?}
	   */
	  function _splitAt(input, character, defaultValues) {
	      var /** @type {?} */ characterIndex = input.indexOf(character);
	      if (characterIndex == -1)
	          return defaultValues;
	      return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];
	  }
	  /**
	   * @param {?} value
	   * @param {?} visitor
	   * @param {?} context
	   * @return {?}
	   */
	  function visitValue(value, visitor, context) {
	      if (Array.isArray(value)) {
	          return visitor.visitArray(/** @type {?} */ (value), context);
	      }
	      if (isStrictStringMap(value)) {
	          return visitor.visitStringMap(/** @type {?} */ (value), context);
	      }
	      if (value == null || isPrimitive(value)) {
	          return visitor.visitPrimitive(value, context);
	      }
	      return visitor.visitOther(value, context);
	  }
	  var ValueTransformer = (function () {
	      function ValueTransformer() {
	      }
	      /**
	       * @param {?} arr
	       * @param {?} context
	       * @return {?}
	       */
	      ValueTransformer.prototype.visitArray = function (arr, context) {
	          var _this = this;
	          return arr.map(function (value) { return visitValue(value, _this, context); });
	      };
	      /**
	       * @param {?} map
	       * @param {?} context
	       * @return {?}
	       */
	      ValueTransformer.prototype.visitStringMap = function (map, context) {
	          var _this = this;
	          var /** @type {?} */ result = {};
	          Object.keys(map).forEach(function (key) { result[key] = visitValue(map[key], _this, context); });
	          return result;
	      };
	      /**
	       * @param {?} value
	       * @param {?} context
	       * @return {?}
	       */
	      ValueTransformer.prototype.visitPrimitive = function (value, context) { return value; };
	      /**
	       * @param {?} value
	       * @param {?} context
	       * @return {?}
	       */
	      ValueTransformer.prototype.visitOther = function (value, context) { return value; };
	      return ValueTransformer;
	  }());
	  var SyncAsyncResult = (function () {
	      /**
	       * @param {?} syncResult
	       * @param {?=} asyncResult
	       */
	      function SyncAsyncResult(syncResult, asyncResult) {
	          if (asyncResult === void 0) { asyncResult = null; }
	          this.syncResult = syncResult;
	          this.asyncResult = asyncResult;
	          if (!asyncResult) {
	              this.asyncResult = Promise.resolve(syncResult);
	          }
	      }
	      return SyncAsyncResult;
	  }());
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$1 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  // group 0: "[prop] or (event) or @trigger"
	  // group 1: "prop" from "[prop]"
	  // group 2: "event" from "(event)"
	  // group 3: "@trigger" from "@trigger"
	  var /** @type {?} */ HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;
	  var CompileAnimationEntryMetadata = (function () {
	      /**
	       * @param {?=} name
	       * @param {?=} definitions
	       */
	      function CompileAnimationEntryMetadata(name, definitions) {
	          if (name === void 0) { name = null; }
	          if (definitions === void 0) { definitions = null; }
	          this.name = name;
	          this.definitions = definitions;
	      }
	      return CompileAnimationEntryMetadata;
	  }());
	  /**
	   * @abstract
	   */
	  var CompileAnimationStateMetadata = (function () {
	      function CompileAnimationStateMetadata() {
	      }
	      return CompileAnimationStateMetadata;
	  }());
	  var CompileAnimationStateDeclarationMetadata = (function (_super) {
	      __extends$1(CompileAnimationStateDeclarationMetadata, _super);
	      /**
	       * @param {?} stateNameExpr
	       * @param {?} styles
	       */
	      function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
	          _super.call(this);
	          this.stateNameExpr = stateNameExpr;
	          this.styles = styles;
	      }
	      return CompileAnimationStateDeclarationMetadata;
	  }(CompileAnimationStateMetadata));
	  var CompileAnimationStateTransitionMetadata = (function (_super) {
	      __extends$1(CompileAnimationStateTransitionMetadata, _super);
	      /**
	       * @param {?} stateChangeExpr
	       * @param {?} steps
	       */
	      function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
	          _super.call(this);
	          this.stateChangeExpr = stateChangeExpr;
	          this.steps = steps;
	      }
	      return CompileAnimationStateTransitionMetadata;
	  }(CompileAnimationStateMetadata));
	  /**
	   * @abstract
	   */
	  var CompileAnimationMetadata = (function () {
	      function CompileAnimationMetadata() {
	      }
	      return CompileAnimationMetadata;
	  }());
	  var CompileAnimationKeyframesSequenceMetadata = (function (_super) {
	      __extends$1(CompileAnimationKeyframesSequenceMetadata, _super);
	      /**
	       * @param {?=} steps
	       */
	      function CompileAnimationKeyframesSequenceMetadata(steps) {
	          if (steps === void 0) { steps = []; }
	          _super.call(this);
	          this.steps = steps;
	      }
	      return CompileAnimationKeyframesSequenceMetadata;
	  }(CompileAnimationMetadata));
	  var CompileAnimationStyleMetadata = (function (_super) {
	      __extends$1(CompileAnimationStyleMetadata, _super);
	      /**
	       * @param {?} offset
	       * @param {?=} styles
	       */
	      function CompileAnimationStyleMetadata(offset, styles) {
	          if (styles === void 0) { styles = null; }
	          _super.call(this);
	          this.offset = offset;
	          this.styles = styles;
	      }
	      return CompileAnimationStyleMetadata;
	  }(CompileAnimationMetadata));
	  var CompileAnimationAnimateMetadata = (function (_super) {
	      __extends$1(CompileAnimationAnimateMetadata, _super);
	      /**
	       * @param {?=} timings
	       * @param {?=} styles
	       */
	      function CompileAnimationAnimateMetadata(timings, styles) {
	          if (timings === void 0) { timings = 0; }
	          if (styles === void 0) { styles = null; }
	          _super.call(this);
	          this.timings = timings;
	          this.styles = styles;
	      }
	      return CompileAnimationAnimateMetadata;
	  }(CompileAnimationMetadata));
	  /**
	   * @abstract
	   */
	  var CompileAnimationWithStepsMetadata = (function (_super) {
	      __extends$1(CompileAnimationWithStepsMetadata, _super);
	      /**
	       * @param {?=} steps
	       */
	      function CompileAnimationWithStepsMetadata(steps) {
	          if (steps === void 0) { steps = null; }
	          _super.call(this);
	          this.steps = steps;
	      }
	      return CompileAnimationWithStepsMetadata;
	  }(CompileAnimationMetadata));
	  var CompileAnimationSequenceMetadata = (function (_super) {
	      __extends$1(CompileAnimationSequenceMetadata, _super);
	      /**
	       * @param {?=} steps
	       */
	      function CompileAnimationSequenceMetadata(steps) {
	          if (steps === void 0) { steps = null; }
	          _super.call(this, steps);
	      }
	      return CompileAnimationSequenceMetadata;
	  }(CompileAnimationWithStepsMetadata));
	  var CompileAnimationGroupMetadata = (function (_super) {
	      __extends$1(CompileAnimationGroupMetadata, _super);
	      /**
	       * @param {?=} steps
	       */
	      function CompileAnimationGroupMetadata(steps) {
	          if (steps === void 0) { steps = null; }
	          _super.call(this, steps);
	      }
	      return CompileAnimationGroupMetadata;
	  }(CompileAnimationWithStepsMetadata));
	  /**
	   * @param {?} name
	   * @return {?}
	   */
	  function _sanitizeIdentifier(name) {
	      return name.replace(/\W/g, '_');
	  }
	  var /** @type {?} */ _anonymousTypeIndex = 0;
	  /**
	   * @param {?} compileIdentifier
	   * @return {?}
	   */
	  function identifierName(compileIdentifier) {
	      if (!compileIdentifier || !compileIdentifier.reference) {
	          return null;
	      }
	      var /** @type {?} */ ref = compileIdentifier.reference;
	      if (ref instanceof StaticSymbol) {
	          return ref.name;
	      }
	      if (ref['__anonymousType']) {
	          return ref['__anonymousType'];
	      }
	      var /** @type {?} */ identifier = stringify(ref);
	      if (identifier.indexOf('(') >= 0) {
	          // case: anonymous functions!
	          identifier = "anonymous_" + _anonymousTypeIndex++;
	          ref['__anonymousType'] = identifier;
	      }
	      else {
	          identifier = _sanitizeIdentifier(identifier);
	      }
	      return identifier;
	  }
	  /**
	   * @param {?} compileIdentifier
	   * @return {?}
	   */
	  function identifierModuleUrl(compileIdentifier) {
	      var /** @type {?} */ ref = compileIdentifier.reference;
	      if (ref instanceof StaticSymbol) {
	          return ref.filePath;
	      }
	      return reflector.importUri(ref);
	  }
	  var CompileSummaryKind = {};
	  CompileSummaryKind.Template = 0;
	  CompileSummaryKind.Pipe = 1;
	  CompileSummaryKind.Directive = 2;
	  CompileSummaryKind.NgModule = 3;
	  CompileSummaryKind[CompileSummaryKind.Template] = "Template";
	  CompileSummaryKind[CompileSummaryKind.Pipe] = "Pipe";
	  CompileSummaryKind[CompileSummaryKind.Directive] = "Directive";
	  CompileSummaryKind[CompileSummaryKind.NgModule] = "NgModule";
	  /**
	   * @param {?} token
	   * @return {?}
	   */
	  function tokenName(token) {
	      return isPresent(token.value) ? _sanitizeIdentifier(token.value) :
	          identifierName(token.identifier);
	  }
	  /**
	   * @param {?} token
	   * @return {?}
	   */
	  function tokenReference(token) {
	      if (isPresent(token.identifier)) {
	          return token.identifier.reference;
	      }
	      else {
	          return token.value;
	      }
	  }
	  /**
	   *  Metadata about a stylesheet
	   */
	  var CompileStylesheetMetadata = (function () {
	      /**
	       * @param {?=} __0
	       */
	      function CompileStylesheetMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, moduleUrl = _b.moduleUrl, styles = _b.styles, styleUrls = _b.styleUrls;
	          this.moduleUrl = moduleUrl;
	          this.styles = _normalizeArray(styles);
	          this.styleUrls = _normalizeArray(styleUrls);
	      }
	      return CompileStylesheetMetadata;
	  }());
	  /**
	   *  Metadata regarding compilation of a template.
	   */
	  var CompileTemplateMetadata = (function () {
	      /**
	       * @param {?=} __0
	       */
	      function CompileTemplateMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, encapsulation = _b.encapsulation, template = _b.template, templateUrl = _b.templateUrl, styles = _b.styles, styleUrls = _b.styleUrls, externalStylesheets = _b.externalStylesheets, animations = _b.animations, ngContentSelectors = _b.ngContentSelectors, interpolation = _b.interpolation;
	          this.encapsulation = encapsulation;
	          this.template = template;
	          this.templateUrl = templateUrl;
	          this.styles = _normalizeArray(styles);
	          this.styleUrls = _normalizeArray(styleUrls);
	          this.externalStylesheets = _normalizeArray(externalStylesheets);
	          this.animations = animations ? ListWrapper.flatten(animations) : [];
	          this.ngContentSelectors = ngContentSelectors || [];
	          if (interpolation && interpolation.length != 2) {
	              throw new Error("'interpolation' should have a start and an end symbol.");
	          }
	          this.interpolation = interpolation;
	      }
	      /**
	       * @return {?}
	       */
	      CompileTemplateMetadata.prototype.toSummary = function () {
	          return {
	              summaryKind: CompileSummaryKind.Template,
	              animations: this.animations.map(function (anim) { return anim.name; }),
	              ngContentSelectors: this.ngContentSelectors,
	              encapsulation: this.encapsulation
	          };
	      };
	      return CompileTemplateMetadata;
	  }());
	  /**
	   *  Metadata regarding compilation of a directive.
	   */
	  var CompileDirectiveMetadata = (function () {
	      /**
	       * @param {?=} __0
	       */
	      function CompileDirectiveMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, isHost = _b.isHost, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, hostListeners = _b.hostListeners, hostProperties = _b.hostProperties, hostAttributes = _b.hostAttributes, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template;
	          this.isHost = !!isHost;
	          this.type = type;
	          this.isComponent = isComponent;
	          this.selector = selector;
	          this.exportAs = exportAs;
	          this.changeDetection = changeDetection;
	          this.inputs = inputs;
	          this.outputs = outputs;
	          this.hostListeners = hostListeners;
	          this.hostProperties = hostProperties;
	          this.hostAttributes = hostAttributes;
	          this.providers = _normalizeArray(providers);
	          this.viewProviders = _normalizeArray(viewProviders);
	          this.queries = _normalizeArray(queries);
	          this.viewQueries = _normalizeArray(viewQueries);
	          this.entryComponents = _normalizeArray(entryComponents);
	          this.template = template;
	      }
	      /**
	       * @param {?=} __0
	       * @return {?}
	       */
	      CompileDirectiveMetadata.create = function (_a) {
	          var _b = _a === void 0 ? {} : _a, isHost = _b.isHost, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, host = _b.host, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template;
	          var /** @type {?} */ hostListeners = {};
	          var /** @type {?} */ hostProperties = {};
	          var /** @type {?} */ hostAttributes = {};
	          if (isPresent(host)) {
	              Object.keys(host).forEach(function (key) {
	                  var /** @type {?} */ value = host[key];
	                  var /** @type {?} */ matches = key.match(HOST_REG_EXP);
	                  if (matches === null) {
	                      hostAttributes[key] = value;
	                  }
	                  else if (isPresent(matches[1])) {
	                      hostProperties[matches[1]] = value;
	                  }
	                  else if (isPresent(matches[2])) {
	                      hostListeners[matches[2]] = value;
	                  }
	              });
	          }
	          var /** @type {?} */ inputsMap = {};
	          if (isPresent(inputs)) {
	              inputs.forEach(function (bindConfig) {
	                  // canonical syntax: `dirProp: elProp`
	                  // if there is no `:`, use dirProp = elProp
	                  var /** @type {?} */ parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                  inputsMap[parts[0]] = parts[1];
	              });
	          }
	          var /** @type {?} */ outputsMap = {};
	          if (isPresent(outputs)) {
	              outputs.forEach(function (bindConfig) {
	                  // canonical syntax: `dirProp: elProp`
	                  // if there is no `:`, use dirProp = elProp
	                  var /** @type {?} */ parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                  outputsMap[parts[0]] = parts[1];
	              });
	          }
	          return new CompileDirectiveMetadata({
	              isHost: isHost,
	              type: type,
	              isComponent: !!isComponent, selector: selector, exportAs: exportAs, changeDetection: changeDetection,
	              inputs: inputsMap,
	              outputs: outputsMap,
	              hostListeners: hostListeners,
	              hostProperties: hostProperties,
	              hostAttributes: hostAttributes,
	              providers: providers,
	              viewProviders: viewProviders,
	              queries: queries,
	              viewQueries: viewQueries,
	              entryComponents: entryComponents,
	              template: template,
	          });
	      };
	      /**
	       * @return {?}
	       */
	      CompileDirectiveMetadata.prototype.toSummary = function () {
	          return {
	              summaryKind: CompileSummaryKind.Directive,
	              type: this.type,
	              isComponent: this.isComponent,
	              selector: this.selector,
	              exportAs: this.exportAs,
	              inputs: this.inputs,
	              outputs: this.outputs,
	              hostListeners: this.hostListeners,
	              hostProperties: this.hostProperties,
	              hostAttributes: this.hostAttributes,
	              providers: this.providers,
	              viewProviders: this.viewProviders,
	              queries: this.queries,
	              entryComponents: this.entryComponents,
	              changeDetection: this.changeDetection,
	              template: this.template && this.template.toSummary()
	          };
	      };
	      return CompileDirectiveMetadata;
	  }());
	  /**
	   *  Construct {@link CompileDirectiveMetadata} from {@link ComponentTypeMetadata} and a selector.
	   * @param {?} typeReference
	   * @param {?} compMeta
	   * @return {?}
	   */
	  function createHostComponentMeta(typeReference, compMeta) {
	      var /** @type {?} */ template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();
	      return CompileDirectiveMetadata.create({
	          isHost: true,
	          type: { reference: typeReference, diDeps: [], lifecycleHooks: [] },
	          template: new CompileTemplateMetadata({
	              encapsulation: _angular_core.ViewEncapsulation.None,
	              template: template,
	              templateUrl: '',
	              styles: [],
	              styleUrls: [],
	              ngContentSelectors: [],
	              animations: []
	          }),
	          changeDetection: _angular_core.ChangeDetectionStrategy.Default,
	          inputs: [],
	          outputs: [],
	          host: {},
	          isComponent: true,
	          selector: '*',
	          providers: [],
	          viewProviders: [],
	          queries: [],
	          viewQueries: []
	      });
	  }
	  var CompilePipeMetadata = (function () {
	      /**
	       * @param {?=} __0
	       */
	      function CompilePipeMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, type = _b.type, name = _b.name, pure = _b.pure;
	          this.type = type;
	          this.name = name;
	          this.pure = !!pure;
	      }
	      /**
	       * @return {?}
	       */
	      CompilePipeMetadata.prototype.toSummary = function () {
	          return {
	              summaryKind: CompileSummaryKind.Pipe,
	              type: this.type,
	              name: this.name,
	              pure: this.pure
	          };
	      };
	      return CompilePipeMetadata;
	  }());
	  /**
	   *  Metadata regarding compilation of a module.
	   */
	  var CompileNgModuleMetadata = (function () {
	      /**
	       * @param {?=} __0
	       */
	      function CompileNgModuleMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, type = _b.type, providers = _b.providers, declaredDirectives = _b.declaredDirectives, exportedDirectives = _b.exportedDirectives, declaredPipes = _b.declaredPipes, exportedPipes = _b.exportedPipes, entryComponents = _b.entryComponents, bootstrapComponents = _b.bootstrapComponents, importedModules = _b.importedModules, exportedModules = _b.exportedModules, schemas = _b.schemas, transitiveModule = _b.transitiveModule, id = _b.id;
	          this.type = type;
	          this.declaredDirectives = _normalizeArray(declaredDirectives);
	          this.exportedDirectives = _normalizeArray(exportedDirectives);
	          this.declaredPipes = _normalizeArray(declaredPipes);
	          this.exportedPipes = _normalizeArray(exportedPipes);
	          this.providers = _normalizeArray(providers);
	          this.entryComponents = _normalizeArray(entryComponents);
	          this.bootstrapComponents = _normalizeArray(bootstrapComponents);
	          this.importedModules = _normalizeArray(importedModules);
	          this.exportedModules = _normalizeArray(exportedModules);
	          this.schemas = _normalizeArray(schemas);
	          this.id = id;
	          this.transitiveModule = transitiveModule;
	      }
	      /**
	       * @return {?}
	       */
	      CompileNgModuleMetadata.prototype.toSummary = function () {
	          return {
	              summaryKind: CompileSummaryKind.NgModule,
	              type: this.type,
	              entryComponents: this.transitiveModule.entryComponents,
	              providers: this.transitiveModule.providers,
	              modules: this.transitiveModule.modules,
	              exportedDirectives: this.transitiveModule.exportedDirectives,
	              exportedPipes: this.transitiveModule.exportedPipes
	          };
	      };
	      return CompileNgModuleMetadata;
	  }());
	  var TransitiveCompileNgModuleMetadata = (function () {
	      function TransitiveCompileNgModuleMetadata() {
	          this.directivesSet = new Set();
	          this.directives = [];
	          this.exportedDirectivesSet = new Set();
	          this.exportedDirectives = [];
	          this.pipesSet = new Set();
	          this.pipes = [];
	          this.exportedPipesSet = new Set();
	          this.exportedPipes = [];
	          this.modulesSet = new Set();
	          this.modules = [];
	          this.entryComponentsSet = new Set();
	          this.entryComponents = [];
	          this.providers = [];
	      }
	      /**
	       * @param {?} provider
	       * @param {?} module
	       * @return {?}
	       */
	      TransitiveCompileNgModuleMetadata.prototype.addProvider = function (provider, module) {
	          this.providers.push({ provider: provider, module: module });
	      };
	      /**
	       * @param {?} id
	       * @return {?}
	       */
	      TransitiveCompileNgModuleMetadata.prototype.addDirective = function (id) {
	          if (!this.directivesSet.has(id.reference)) {
	              this.directivesSet.add(id.reference);
	              this.directives.push(id);
	          }
	      };
	      /**
	       * @param {?} id
	       * @return {?}
	       */
	      TransitiveCompileNgModuleMetadata.prototype.addExportedDirective = function (id) {
	          if (!this.exportedDirectivesSet.has(id.reference)) {
	              this.exportedDirectivesSet.add(id.reference);
	              this.exportedDirectives.push(id);
	          }
	      };
	      /**
	       * @param {?} id
	       * @return {?}
	       */
	      TransitiveCompileNgModuleMetadata.prototype.addPipe = function (id) {
	          if (!this.pipesSet.has(id.reference)) {
	              this.pipesSet.add(id.reference);
	              this.pipes.push(id);
	          }
	      };
	      /**
	       * @param {?} id
	       * @return {?}
	       */
	      TransitiveCompileNgModuleMetadata.prototype.addExportedPipe = function (id) {
	          if (!this.exportedPipesSet.has(id.reference)) {
	              this.exportedPipesSet.add(id.reference);
	              this.exportedPipes.push(id);
	          }
	      };
	      /**
	       * @param {?} id
	       * @return {?}
	       */
	      TransitiveCompileNgModuleMetadata.prototype.addModule = function (id) {
	          if (!this.modulesSet.has(id.reference)) {
	              this.modulesSet.add(id.reference);
	              this.modules.push(id);
	          }
	      };
	      /**
	       * @param {?} id
	       * @return {?}
	       */
	      TransitiveCompileNgModuleMetadata.prototype.addEntryComponent = function (id) {
	          if (!this.entryComponentsSet.has(id.reference)) {
	              this.entryComponentsSet.add(id.reference);
	              this.entryComponents.push(id);
	          }
	      };
	      return TransitiveCompileNgModuleMetadata;
	  }());
	  /**
	   * @param {?} obj
	   * @return {?}
	   */
	  function _normalizeArray(obj) {
	      return obj || [];
	  }
	  var ProviderMeta = (function () {
	      /**
	       * @param {?} token
	       * @param {?} __1
	       */
	      function ProviderMeta(token, _a) {
	          var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
	          this.token = token;
	          this.useClass = useClass;
	          this.useValue = useValue;
	          this.useExisting = useExisting;
	          this.useFactory = useFactory;
	          this.dependencies = deps;
	          this.multi = !!multi;
	      }
	      return ProviderMeta;
	  }());
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var /** @type {?} */ $EOF = 0;
	  var /** @type {?} */ $TAB = 9;
	  var /** @type {?} */ $LF = 10;
	  var /** @type {?} */ $VTAB = 11;
	  var /** @type {?} */ $FF = 12;
	  var /** @type {?} */ $CR = 13;
	  var /** @type {?} */ $SPACE = 32;
	  var /** @type {?} */ $BANG = 33;
	  var /** @type {?} */ $DQ = 34;
	  var /** @type {?} */ $HASH = 35;
	  var /** @type {?} */ $$ = 36;
	  var /** @type {?} */ $PERCENT = 37;
	  var /** @type {?} */ $AMPERSAND = 38;
	  var /** @type {?} */ $SQ = 39;
	  var /** @type {?} */ $LPAREN = 40;
	  var /** @type {?} */ $RPAREN = 41;
	  var /** @type {?} */ $STAR = 42;
	  var /** @type {?} */ $PLUS = 43;
	  var /** @type {?} */ $COMMA = 44;
	  var /** @type {?} */ $MINUS = 45;
	  var /** @type {?} */ $PERIOD = 46;
	  var /** @type {?} */ $SLASH = 47;
	  var /** @type {?} */ $COLON = 58;
	  var /** @type {?} */ $SEMICOLON = 59;
	  var /** @type {?} */ $LT = 60;
	  var /** @type {?} */ $EQ = 61;
	  var /** @type {?} */ $GT = 62;
	  var /** @type {?} */ $QUESTION = 63;
	  var /** @type {?} */ $0 = 48;
	  var /** @type {?} */ $9 = 57;
	  var /** @type {?} */ $A = 65;
	  var /** @type {?} */ $E = 69;
	  var /** @type {?} */ $F = 70;
	  var /** @type {?} */ $X = 88;
	  var /** @type {?} */ $Z = 90;
	  var /** @type {?} */ $LBRACKET = 91;
	  var /** @type {?} */ $BACKSLASH = 92;
	  var /** @type {?} */ $RBRACKET = 93;
	  var /** @type {?} */ $CARET = 94;
	  var /** @type {?} */ $_ = 95;
	  var /** @type {?} */ $a = 97;
	  var /** @type {?} */ $e = 101;
	  var /** @type {?} */ $f = 102;
	  var /** @type {?} */ $n = 110;
	  var /** @type {?} */ $r = 114;
	  var /** @type {?} */ $t = 116;
	  var /** @type {?} */ $u = 117;
	  var /** @type {?} */ $v = 118;
	  var /** @type {?} */ $x = 120;
	  var /** @type {?} */ $z = 122;
	  var /** @type {?} */ $LBRACE = 123;
	  var /** @type {?} */ $BAR = 124;
	  var /** @type {?} */ $RBRACE = 125;
	  var /** @type {?} */ $NBSP = 160;
	  var /** @type {?} */ $BT = 96;
	  /**
	   * @param {?} code
	   * @return {?}
	   */
	  function isWhitespace(code) {
	      return (code >= $TAB && code <= $SPACE) || (code == $NBSP);
	  }
	  /**
	   * @param {?} code
	   * @return {?}
	   */
	  function isDigit(code) {
	      return $0 <= code && code <= $9;
	  }
	  /**
	   * @param {?} code
	   * @return {?}
	   */
	  function isAsciiLetter(code) {
	      return code >= $a && code <= $z || code >= $A && code <= $Z;
	  }
	  /**
	   * @param {?} code
	   * @return {?}
	   */
	  function isAsciiHexDigit(code) {
	      return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
	  }
	
	  /**
	   * @param {?} identifier
	   * @param {?} value
	   * @return {?}
	   */
	  function assertArrayOfStrings(identifier, value) {
	      if (!_angular_core.isDevMode() || isBlank(value)) {
	          return;
	      }
	      if (!Array.isArray(value)) {
	          throw new Error("Expected '" + identifier + "' to be an array of strings.");
	      }
	      for (var /** @type {?} */ i = 0; i < value.length; i += 1) {
	          if (typeof value[i] !== 'string') {
	              throw new Error("Expected '" + identifier + "' to be an array of strings.");
	          }
	      }
	  }
	  var /** @type {?} */ INTERPOLATION_BLACKLIST_REGEXPS = [
	      /^\s*$/,
	      /[<>]/,
	      /^[{}]$/,
	      /&(#|[a-z])/i,
	      /^\/\//,
	  ];
	  /**
	   * @param {?} identifier
	   * @param {?} value
	   * @return {?}
	   */
	  function assertInterpolationSymbols(identifier, value) {
	      if (isPresent(value) && !(Array.isArray(value) && value.length == 2)) {
	          throw new Error("Expected '" + identifier + "' to be an array, [start, end].");
	      }
	      else if (_angular_core.isDevMode() && !isBlank(value)) {
	          var /** @type {?} */ start_1 = (value[0]);
	          var /** @type {?} */ end_1 = (value[1]);
	          // black list checking
	          INTERPOLATION_BLACKLIST_REGEXPS.forEach(function (regexp) {
	              if (regexp.test(start_1) || regexp.test(end_1)) {
	                  throw new Error("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
	              }
	          });
	      }
	  }
	
	  var InterpolationConfig = (function () {
	      /**
	       * @param {?} start
	       * @param {?} end
	       */
	      function InterpolationConfig(start, end) {
	          this.start = start;
	          this.end = end;
	      }
	      /**
	       * @param {?} markers
	       * @return {?}
	       */
	      InterpolationConfig.fromArray = function (markers) {
	          if (!markers) {
	              return DEFAULT_INTERPOLATION_CONFIG;
	          }
	          assertInterpolationSymbols('interpolation', markers);
	          return new InterpolationConfig(markers[0], markers[1]);
	      };
	      ;
	      return InterpolationConfig;
	  }());
	  var /** @type {?} */ DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$2 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var ParserError = (function () {
	      /**
	       * @param {?} message
	       * @param {?} input
	       * @param {?} errLocation
	       * @param {?=} ctxLocation
	       */
	      function ParserError(message, input, errLocation, ctxLocation) {
	          this.input = input;
	          this.errLocation = errLocation;
	          this.ctxLocation = ctxLocation;
	          this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation;
	      }
	      return ParserError;
	  }());
	  var ParseSpan = (function () {
	      /**
	       * @param {?} start
	       * @param {?} end
	       */
	      function ParseSpan(start, end) {
	          this.start = start;
	          this.end = end;
	      }
	      return ParseSpan;
	  }());
	  var AST = (function () {
	      /**
	       * @param {?} span
	       */
	      function AST(span) {
	          this.span = span;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      AST.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return null;
	      };
	      /**
	       * @return {?}
	       */
	      AST.prototype.toString = function () { return 'AST'; };
	      return AST;
	  }());
	  /**
	   *  Represents a quoted expression of the form:
	    * *
	    * quote = prefix `:` uninterpretedExpression
	    * prefix = identifier
	    * uninterpretedExpression = arbitrary string
	    * *
	    * A quoted expression is meant to be pre-processed by an AST transformer that
	    * converts it into another AST that no longer contains quoted expressions.
	    * It is meant to allow third-party developers to extend Angular template
	    * expression language. The `uninterpretedExpression` part of the quote is
	    * therefore not interpreted by the Angular's own expression parser.
	   */
	  var Quote = (function (_super) {
	      __extends$2(Quote, _super);
	      /**
	       * @param {?} span
	       * @param {?} prefix
	       * @param {?} uninterpretedExpression
	       * @param {?} location
	       */
	      function Quote(span, prefix, uninterpretedExpression, location) {
	          _super.call(this, span);
	          this.prefix = prefix;
	          this.uninterpretedExpression = uninterpretedExpression;
	          this.location = location;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      Quote.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitQuote(this, context);
	      };
	      /**
	       * @return {?}
	       */
	      Quote.prototype.toString = function () { return 'Quote'; };
	      return Quote;
	  }(AST));
	  var EmptyExpr = (function (_super) {
	      __extends$2(EmptyExpr, _super);
	      function EmptyExpr() {
	          _super.apply(this, arguments);
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      EmptyExpr.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          // do nothing
	      };
	      return EmptyExpr;
	  }(AST));
	  var ImplicitReceiver = (function (_super) {
	      __extends$2(ImplicitReceiver, _super);
	      function ImplicitReceiver() {
	          _super.apply(this, arguments);
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      ImplicitReceiver.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitImplicitReceiver(this, context);
	      };
	      return ImplicitReceiver;
	  }(AST));
	  /**
	   *  Multiple expressions separated by a semicolon.
	   */
	  var Chain = (function (_super) {
	      __extends$2(Chain, _super);
	      /**
	       * @param {?} span
	       * @param {?} expressions
	       */
	      function Chain(span, expressions) {
	          _super.call(this, span);
	          this.expressions = expressions;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      Chain.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitChain(this, context);
	      };
	      return Chain;
	  }(AST));
	  var Conditional = (function (_super) {
	      __extends$2(Conditional, _super);
	      /**
	       * @param {?} span
	       * @param {?} condition
	       * @param {?} trueExp
	       * @param {?} falseExp
	       */
	      function Conditional(span, condition, trueExp, falseExp) {
	          _super.call(this, span);
	          this.condition = condition;
	          this.trueExp = trueExp;
	          this.falseExp = falseExp;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      Conditional.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitConditional(this, context);
	      };
	      return Conditional;
	  }(AST));
	  var PropertyRead = (function (_super) {
	      __extends$2(PropertyRead, _super);
	      /**
	       * @param {?} span
	       * @param {?} receiver
	       * @param {?} name
	       */
	      function PropertyRead(span, receiver, name) {
	          _super.call(this, span);
	          this.receiver = receiver;
	          this.name = name;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      PropertyRead.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitPropertyRead(this, context);
	      };
	      return PropertyRead;
	  }(AST));
	  var PropertyWrite = (function (_super) {
	      __extends$2(PropertyWrite, _super);
	      /**
	       * @param {?} span
	       * @param {?} receiver
	       * @param {?} name
	       * @param {?} value
	       */
	      function PropertyWrite(span, receiver, name, value) {
	          _super.call(this, span);
	          this.receiver = receiver;
	          this.name = name;
	          this.value = value;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      PropertyWrite.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitPropertyWrite(this, context);
	      };
	      return PropertyWrite;
	  }(AST));
	  var SafePropertyRead = (function (_super) {
	      __extends$2(SafePropertyRead, _super);
	      /**
	       * @param {?} span
	       * @param {?} receiver
	       * @param {?} name
	       */
	      function SafePropertyRead(span, receiver, name) {
	          _super.call(this, span);
	          this.receiver = receiver;
	          this.name = name;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      SafePropertyRead.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitSafePropertyRead(this, context);
	      };
	      return SafePropertyRead;
	  }(AST));
	  var KeyedRead = (function (_super) {
	      __extends$2(KeyedRead, _super);
	      /**
	       * @param {?} span
	       * @param {?} obj
	       * @param {?} key
	       */
	      function KeyedRead(span, obj, key) {
	          _super.call(this, span);
	          this.obj = obj;
	          this.key = key;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      KeyedRead.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitKeyedRead(this, context);
	      };
	      return KeyedRead;
	  }(AST));
	  var KeyedWrite = (function (_super) {
	      __extends$2(KeyedWrite, _super);
	      /**
	       * @param {?} span
	       * @param {?} obj
	       * @param {?} key
	       * @param {?} value
	       */
	      function KeyedWrite(span, obj, key, value) {
	          _super.call(this, span);
	          this.obj = obj;
	          this.key = key;
	          this.value = value;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      KeyedWrite.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitKeyedWrite(this, context);
	      };
	      return KeyedWrite;
	  }(AST));
	  var BindingPipe = (function (_super) {
	      __extends$2(BindingPipe, _super);
	      /**
	       * @param {?} span
	       * @param {?} exp
	       * @param {?} name
	       * @param {?} args
	       */
	      function BindingPipe(span, exp, name, args) {
	          _super.call(this, span);
	          this.exp = exp;
	          this.name = name;
	          this.args = args;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      BindingPipe.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitPipe(this, context);
	      };
	      return BindingPipe;
	  }(AST));
	  var LiteralPrimitive = (function (_super) {
	      __extends$2(LiteralPrimitive, _super);
	      /**
	       * @param {?} span
	       * @param {?} value
	       */
	      function LiteralPrimitive(span, value) {
	          _super.call(this, span);
	          this.value = value;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      LiteralPrimitive.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitLiteralPrimitive(this, context);
	      };
	      return LiteralPrimitive;
	  }(AST));
	  var LiteralArray = (function (_super) {
	      __extends$2(LiteralArray, _super);
	      /**
	       * @param {?} span
	       * @param {?} expressions
	       */
	      function LiteralArray(span, expressions) {
	          _super.call(this, span);
	          this.expressions = expressions;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      LiteralArray.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitLiteralArray(this, context);
	      };
	      return LiteralArray;
	  }(AST));
	  var LiteralMap = (function (_super) {
	      __extends$2(LiteralMap, _super);
	      /**
	       * @param {?} span
	       * @param {?} keys
	       * @param {?} values
	       */
	      function LiteralMap(span, keys, values) {
	          _super.call(this, span);
	          this.keys = keys;
	          this.values = values;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      LiteralMap.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitLiteralMap(this, context);
	      };
	      return LiteralMap;
	  }(AST));
	  var Interpolation = (function (_super) {
	      __extends$2(Interpolation, _super);
	      /**
	       * @param {?} span
	       * @param {?} strings
	       * @param {?} expressions
	       */
	      function Interpolation(span, strings, expressions) {
	          _super.call(this, span);
	          this.strings = strings;
	          this.expressions = expressions;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      Interpolation.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitInterpolation(this, context);
	      };
	      return Interpolation;
	  }(AST));
	  var Binary = (function (_super) {
	      __extends$2(Binary, _super);
	      /**
	       * @param {?} span
	       * @param {?} operation
	       * @param {?} left
	       * @param {?} right
	       */
	      function Binary(span, operation, left, right) {
	          _super.call(this, span);
	          this.operation = operation;
	          this.left = left;
	          this.right = right;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      Binary.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitBinary(this, context);
	      };
	      return Binary;
	  }(AST));
	  var PrefixNot = (function (_super) {
	      __extends$2(PrefixNot, _super);
	      /**
	       * @param {?} span
	       * @param {?} expression
	       */
	      function PrefixNot(span, expression) {
	          _super.call(this, span);
	          this.expression = expression;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      PrefixNot.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitPrefixNot(this, context);
	      };
	      return PrefixNot;
	  }(AST));
	  var MethodCall = (function (_super) {
	      __extends$2(MethodCall, _super);
	      /**
	       * @param {?} span
	       * @param {?} receiver
	       * @param {?} name
	       * @param {?} args
	       */
	      function MethodCall(span, receiver, name, args) {
	          _super.call(this, span);
	          this.receiver = receiver;
	          this.name = name;
	          this.args = args;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      MethodCall.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitMethodCall(this, context);
	      };
	      return MethodCall;
	  }(AST));
	  var SafeMethodCall = (function (_super) {
	      __extends$2(SafeMethodCall, _super);
	      /**
	       * @param {?} span
	       * @param {?} receiver
	       * @param {?} name
	       * @param {?} args
	       */
	      function SafeMethodCall(span, receiver, name, args) {
	          _super.call(this, span);
	          this.receiver = receiver;
	          this.name = name;
	          this.args = args;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      SafeMethodCall.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitSafeMethodCall(this, context);
	      };
	      return SafeMethodCall;
	  }(AST));
	  var FunctionCall = (function (_super) {
	      __extends$2(FunctionCall, _super);
	      /**
	       * @param {?} span
	       * @param {?} target
	       * @param {?} args
	       */
	      function FunctionCall(span, target, args) {
	          _super.call(this, span);
	          this.target = target;
	          this.args = args;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      FunctionCall.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitFunctionCall(this, context);
	      };
	      return FunctionCall;
	  }(AST));
	  var ASTWithSource = (function (_super) {
	      __extends$2(ASTWithSource, _super);
	      /**
	       * @param {?} ast
	       * @param {?} source
	       * @param {?} location
	       * @param {?} errors
	       */
	      function ASTWithSource(ast, source, location, errors) {
	          _super.call(this, new ParseSpan(0, isBlank(source) ? 0 : source.length));
	          this.ast = ast;
	          this.source = source;
	          this.location = location;
	          this.errors = errors;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      ASTWithSource.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return this.ast.visit(visitor, context);
	      };
	      /**
	       * @return {?}
	       */
	      ASTWithSource.prototype.toString = function () { return this.source + " in " + this.location; };
	      return ASTWithSource;
	  }(AST));
	  var TemplateBinding = (function () {
	      /**
	       * @param {?} span
	       * @param {?} key
	       * @param {?} keyIsVar
	       * @param {?} name
	       * @param {?} expression
	       */
	      function TemplateBinding(span, key, keyIsVar, name, expression) {
	          this.span = span;
	          this.key = key;
	          this.keyIsVar = keyIsVar;
	          this.name = name;
	          this.expression = expression;
	      }
	      return TemplateBinding;
	  }());
	  var RecursiveAstVisitor = (function () {
	      function RecursiveAstVisitor() {
	      }
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitBinary = function (ast, context) {
	          ast.left.visit(this);
	          ast.right.visit(this);
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitChain = function (ast, context) { return this.visitAll(ast.expressions, context); };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitConditional = function (ast, context) {
	          ast.condition.visit(this);
	          ast.trueExp.visit(this);
	          ast.falseExp.visit(this);
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitPipe = function (ast, context) {
	          ast.exp.visit(this);
	          this.visitAll(ast.args, context);
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitFunctionCall = function (ast, context) {
	          ast.target.visit(this);
	          this.visitAll(ast.args, context);
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitImplicitReceiver = function (ast, context) { return null; };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitInterpolation = function (ast, context) {
	          return this.visitAll(ast.expressions, context);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitKeyedRead = function (ast, context) {
	          ast.obj.visit(this);
	          ast.key.visit(this);
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitKeyedWrite = function (ast, context) {
	          ast.obj.visit(this);
	          ast.key.visit(this);
	          ast.value.visit(this);
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitLiteralArray = function (ast, context) {
	          return this.visitAll(ast.expressions, context);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitLiteralMap = function (ast, context) { return this.visitAll(ast.values, context); };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitLiteralPrimitive = function (ast, context) { return null; };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitMethodCall = function (ast, context) {
	          ast.receiver.visit(this);
	          return this.visitAll(ast.args, context);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitPrefixNot = function (ast, context) {
	          ast.expression.visit(this);
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitPropertyRead = function (ast, context) {
	          ast.receiver.visit(this);
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitPropertyWrite = function (ast, context) {
	          ast.receiver.visit(this);
	          ast.value.visit(this);
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitSafePropertyRead = function (ast, context) {
	          ast.receiver.visit(this);
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitSafeMethodCall = function (ast, context) {
	          ast.receiver.visit(this);
	          return this.visitAll(ast.args, context);
	      };
	      /**
	       * @param {?} asts
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitAll = function (asts, context) {
	          var _this = this;
	          asts.forEach(function (ast) { return ast.visit(_this, context); });
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveAstVisitor.prototype.visitQuote = function (ast, context) { return null; };
	      return RecursiveAstVisitor;
	  }());
	
	  var TokenType = {};
	  TokenType.Character = 0;
	  TokenType.Identifier = 1;
	  TokenType.Keyword = 2;
	  TokenType.String = 3;
	  TokenType.Operator = 4;
	  TokenType.Number = 5;
	  TokenType.Error = 6;
	  TokenType[TokenType.Character] = "Character";
	  TokenType[TokenType.Identifier] = "Identifier";
	  TokenType[TokenType.Keyword] = "Keyword";
	  TokenType[TokenType.String] = "String";
	  TokenType[TokenType.Operator] = "Operator";
	  TokenType[TokenType.Number] = "Number";
	  TokenType[TokenType.Error] = "Error";
	  var /** @type {?} */ KEYWORDS = ['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];
	  var Lexer = (function () {
	      function Lexer() {
	      }
	      /**
	       * @param {?} text
	       * @return {?}
	       */
	      Lexer.prototype.tokenize = function (text) {
	          var /** @type {?} */ scanner = new _Scanner(text);
	          var /** @type {?} */ tokens = [];
	          var /** @type {?} */ token = scanner.scanToken();
	          while (token != null) {
	              tokens.push(token);
	              token = scanner.scanToken();
	          }
	          return tokens;
	      };
	      Lexer.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      Lexer.ctorParameters = function () { return []; };
	      return Lexer;
	  }());
	  var Token = (function () {
	      /**
	       * @param {?} index
	       * @param {?} type
	       * @param {?} numValue
	       * @param {?} strValue
	       */
	      function Token(index, type, numValue, strValue) {
	          this.index = index;
	          this.type = type;
	          this.numValue = numValue;
	          this.strValue = strValue;
	      }
	      /**
	       * @param {?} code
	       * @return {?}
	       */
	      Token.prototype.isCharacter = function (code) {
	          return this.type == TokenType.Character && this.numValue == code;
	      };
	      /**
	       * @return {?}
	       */
	      Token.prototype.isNumber = function () { return this.type == TokenType.Number; };
	      /**
	       * @return {?}
	       */
	      Token.prototype.isString = function () { return this.type == TokenType.String; };
	      /**
	       * @param {?} operater
	       * @return {?}
	       */
	      Token.prototype.isOperator = function (operater) {
	          return this.type == TokenType.Operator && this.strValue == operater;
	      };
	      /**
	       * @return {?}
	       */
	      Token.prototype.isIdentifier = function () { return this.type == TokenType.Identifier; };
	      /**
	       * @return {?}
	       */
	      Token.prototype.isKeyword = function () { return this.type == TokenType.Keyword; };
	      /**
	       * @return {?}
	       */
	      Token.prototype.isKeywordLet = function () { return this.type == TokenType.Keyword && this.strValue == 'let'; };
	      /**
	       * @return {?}
	       */
	      Token.prototype.isKeywordNull = function () { return this.type == TokenType.Keyword && this.strValue == 'null'; };
	      /**
	       * @return {?}
	       */
	      Token.prototype.isKeywordUndefined = function () {
	          return this.type == TokenType.Keyword && this.strValue == 'undefined';
	      };
	      /**
	       * @return {?}
	       */
	      Token.prototype.isKeywordTrue = function () { return this.type == TokenType.Keyword && this.strValue == 'true'; };
	      /**
	       * @return {?}
	       */
	      Token.prototype.isKeywordFalse = function () { return this.type == TokenType.Keyword && this.strValue == 'false'; };
	      /**
	       * @return {?}
	       */
	      Token.prototype.isKeywordThis = function () { return this.type == TokenType.Keyword && this.strValue == 'this'; };
	      /**
	       * @return {?}
	       */
	      Token.prototype.isError = function () { return this.type == TokenType.Error; };
	      /**
	       * @return {?}
	       */
	      Token.prototype.toNumber = function () { return this.type == TokenType.Number ? this.numValue : -1; };
	      /**
	       * @return {?}
	       */
	      Token.prototype.toString = function () {
	          switch (this.type) {
	              case TokenType.Character:
	              case TokenType.Identifier:
	              case TokenType.Keyword:
	              case TokenType.Operator:
	              case TokenType.String:
	              case TokenType.Error:
	                  return this.strValue;
	              case TokenType.Number:
	                  return this.numValue.toString();
	              default:
	                  return null;
	          }
	      };
	      return Token;
	  }());
	  /**
	   * @param {?} index
	   * @param {?} code
	   * @return {?}
	   */
	  function newCharacterToken(index, code) {
	      return new Token(index, TokenType.Character, code, String.fromCharCode(code));
	  }
	  /**
	   * @param {?} index
	   * @param {?} text
	   * @return {?}
	   */
	  function newIdentifierToken(index, text) {
	      return new Token(index, TokenType.Identifier, 0, text);
	  }
	  /**
	   * @param {?} index
	   * @param {?} text
	   * @return {?}
	   */
	  function newKeywordToken(index, text) {
	      return new Token(index, TokenType.Keyword, 0, text);
	  }
	  /**
	   * @param {?} index
	   * @param {?} text
	   * @return {?}
	   */
	  function newOperatorToken(index, text) {
	      return new Token(index, TokenType.Operator, 0, text);
	  }
	  /**
	   * @param {?} index
	   * @param {?} text
	   * @return {?}
	   */
	  function newStringToken(index, text) {
	      return new Token(index, TokenType.String, 0, text);
	  }
	  /**
	   * @param {?} index
	   * @param {?} n
	   * @return {?}
	   */
	  function newNumberToken(index, n) {
	      return new Token(index, TokenType.Number, n, '');
	  }
	  /**
	   * @param {?} index
	   * @param {?} message
	   * @return {?}
	   */
	  function newErrorToken(index, message) {
	      return new Token(index, TokenType.Error, 0, message);
	  }
	  var /** @type {?} */ EOF = new Token(-1, TokenType.Character, 0, '');
	  var _Scanner = (function () {
	      /**
	       * @param {?} input
	       */
	      function _Scanner(input) {
	          this.input = input;
	          this.peek = 0;
	          this.index = -1;
	          this.length = input.length;
	          this.advance();
	      }
	      /**
	       * @return {?}
	       */
	      _Scanner.prototype.advance = function () {
	          this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
	      };
	      /**
	       * @return {?}
	       */
	      _Scanner.prototype.scanToken = function () {
	          var /** @type {?} */ input = this.input, /** @type {?} */ length = this.length;
	          var /** @type {?} */ peek = this.peek, /** @type {?} */ index = this.index;
	          // Skip whitespace.
	          while (peek <= $SPACE) {
	              if (++index >= length) {
	                  peek = $EOF;
	                  break;
	              }
	              else {
	                  peek = input.charCodeAt(index);
	              }
	          }
	          this.peek = peek;
	          this.index = index;
	          if (index >= length) {
	              return null;
	          }
	          // Handle identifiers and numbers.
	          if (isIdentifierStart(peek))
	              return this.scanIdentifier();
	          if (isDigit(peek))
	              return this.scanNumber(index);
	          var /** @type {?} */ start = index;
	          switch (peek) {
	              case $PERIOD:
	                  this.advance();
	                  return isDigit(this.peek) ? this.scanNumber(start) :
	                      newCharacterToken(start, $PERIOD);
	              case $LPAREN:
	              case $RPAREN:
	              case $LBRACE:
	              case $RBRACE:
	              case $LBRACKET:
	              case $RBRACKET:
	              case $COMMA:
	              case $COLON:
	              case $SEMICOLON:
	                  return this.scanCharacter(start, peek);
	              case $SQ:
	              case $DQ:
	                  return this.scanString();
	              case $HASH:
	              case $PLUS:
	              case $MINUS:
	              case $STAR:
	              case $SLASH:
	              case $PERCENT:
	              case $CARET:
	                  return this.scanOperator(start, String.fromCharCode(peek));
	              case $QUESTION:
	                  return this.scanComplexOperator(start, '?', $PERIOD, '.');
	              case $LT:
	              case $GT:
	                  return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');
	              case $BANG:
	              case $EQ:
	                  return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');
	              case $AMPERSAND:
	                  return this.scanComplexOperator(start, '&', $AMPERSAND, '&');
	              case $BAR:
	                  return this.scanComplexOperator(start, '|', $BAR, '|');
	              case $NBSP:
	                  while (isWhitespace(this.peek))
	                      this.advance();
	                  return this.scanToken();
	          }
	          this.advance();
	          return this.error("Unexpected character [" + String.fromCharCode(peek) + "]", 0);
	      };
	      /**
	       * @param {?} start
	       * @param {?} code
	       * @return {?}
	       */
	      _Scanner.prototype.scanCharacter = function (start, code) {
	          this.advance();
	          return newCharacterToken(start, code);
	      };
	      /**
	       * @param {?} start
	       * @param {?} str
	       * @return {?}
	       */
	      _Scanner.prototype.scanOperator = function (start, str) {
	          this.advance();
	          return newOperatorToken(start, str);
	      };
	      /**
	       *  Tokenize a 2/3 char long operator
	        * *
	       * @param {?} start start index in the expression
	       * @param {?} one first symbol (always part of the operator)
	       * @param {?} twoCode code point for the second symbol
	       * @param {?} two second symbol (part of the operator when the second code point matches)
	       * @param {?=} threeCode code point for the third symbol
	       * @param {?=} three third symbol (part of the operator when provided and matches source expression)
	       * @return {?}
	       */
	      _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) {
	          this.advance();
	          var /** @type {?} */ str = one;
	          if (this.peek == twoCode) {
	              this.advance();
	              str += two;
	          }
	          if (isPresent(threeCode) && this.peek == threeCode) {
	              this.advance();
	              str += three;
	          }
	          return newOperatorToken(start, str);
	      };
	      /**
	       * @return {?}
	       */
	      _Scanner.prototype.scanIdentifier = function () {
	          var /** @type {?} */ start = this.index;
	          this.advance();
	          while (isIdentifierPart(this.peek))
	              this.advance();
	          var /** @type {?} */ str = this.input.substring(start, this.index);
	          return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) :
	              newIdentifierToken(start, str);
	      };
	      /**
	       * @param {?} start
	       * @return {?}
	       */
	      _Scanner.prototype.scanNumber = function (start) {
	          var /** @type {?} */ simple = (this.index === start);
	          this.advance(); // Skip initial digit.
	          while (true) {
	              if (isDigit(this.peek)) {
	              }
	              else if (this.peek == $PERIOD) {
	                  simple = false;
	              }
	              else if (isExponentStart(this.peek)) {
	                  this.advance();
	                  if (isExponentSign(this.peek))
	                      this.advance();
	                  if (!isDigit(this.peek))
	                      return this.error('Invalid exponent', -1);
	                  simple = false;
	              }
	              else {
	                  break;
	              }
	              this.advance();
	          }
	          var /** @type {?} */ str = this.input.substring(start, this.index);
	          var /** @type {?} */ value = simple ? NumberWrapper.parseIntAutoRadix(str) : parseFloat(str);
	          return newNumberToken(start, value);
	      };
	      /**
	       * @return {?}
	       */
	      _Scanner.prototype.scanString = function () {
	          var /** @type {?} */ start = this.index;
	          var /** @type {?} */ quote = this.peek;
	          this.advance(); // Skip initial quote.
	          var /** @type {?} */ buffer = '';
	          var /** @type {?} */ marker = this.index;
	          var /** @type {?} */ input = this.input;
	          while (this.peek != quote) {
	              if (this.peek == $BACKSLASH) {
	                  buffer += input.substring(marker, this.index);
	                  this.advance();
	                  var /** @type {?} */ unescapedCode = void 0;
	                  if (this.peek == $u) {
	                      // 4 character hex code for unicode character.
	                      var /** @type {?} */ hex = input.substring(this.index + 1, this.index + 5);
	                      if (/^[0-9a-f]+$/i.test(hex)) {
	                          unescapedCode = parseInt(hex, 16);
	                      }
	                      else {
	                          return this.error("Invalid unicode escape [\\u" + hex + "]", 0);
	                      }
	                      for (var /** @type {?} */ i = 0; i < 5; i++) {
	                          this.advance();
	                      }
	                  }
	                  else {
	                      unescapedCode = unescape(this.peek);
	                      this.advance();
	                  }
	                  buffer += String.fromCharCode(unescapedCode);
	                  marker = this.index;
	              }
	              else if (this.peek == $EOF) {
	                  return this.error('Unterminated quote', 0);
	              }
	              else {
	                  this.advance();
	              }
	          }
	          var /** @type {?} */ last = input.substring(marker, this.index);
	          this.advance(); // Skip terminating quote.
	          return newStringToken(start, buffer + last);
	      };
	      /**
	       * @param {?} message
	       * @param {?} offset
	       * @return {?}
	       */
	      _Scanner.prototype.error = function (message, offset) {
	          var /** @type {?} */ position = this.index + offset;
	          return newErrorToken(position, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
	      };
	      return _Scanner;
	  }());
	  /**
	   * @param {?} code
	   * @return {?}
	   */
	  function isIdentifierStart(code) {
	      return ($a <= code && code <= $z) || ($A <= code && code <= $Z) ||
	          (code == $_) || (code == $$);
	  }
	  /**
	   * @param {?} input
	   * @return {?}
	   */
	  function isIdentifier(input) {
	      if (input.length == 0)
	          return false;
	      var /** @type {?} */ scanner = new _Scanner(input);
	      if (!isIdentifierStart(scanner.peek))
	          return false;
	      scanner.advance();
	      while (scanner.peek !== $EOF) {
	          if (!isIdentifierPart(scanner.peek))
	              return false;
	          scanner.advance();
	      }
	      return true;
	  }
	  /**
	   * @param {?} code
	   * @return {?}
	   */
	  function isIdentifierPart(code) {
	      return isAsciiLetter(code) || isDigit(code) || (code == $_) ||
	          (code == $$);
	  }
	  /**
	   * @param {?} code
	   * @return {?}
	   */
	  function isExponentStart(code) {
	      return code == $e || code == $E;
	  }
	  /**
	   * @param {?} code
	   * @return {?}
	   */
	  function isExponentSign(code) {
	      return code == $MINUS || code == $PLUS;
	  }
	  /**
	   * @param {?} code
	   * @return {?}
	   */
	  function isQuote(code) {
	      return code === $SQ || code === $DQ || code === $BT;
	  }
	  /**
	   * @param {?} code
	   * @return {?}
	   */
	  function unescape(code) {
	      switch (code) {
	          case $n:
	              return $LF;
	          case $f:
	              return $FF;
	          case $r:
	              return $CR;
	          case $t:
	              return $TAB;
	          case $v:
	              return $VTAB;
	          default:
	              return code;
	      }
	  }
	
	  var SplitInterpolation = (function () {
	      /**
	       * @param {?} strings
	       * @param {?} expressions
	       * @param {?} offsets
	       */
	      function SplitInterpolation(strings, expressions, offsets) {
	          this.strings = strings;
	          this.expressions = expressions;
	          this.offsets = offsets;
	      }
	      return SplitInterpolation;
	  }());
	  var TemplateBindingParseResult = (function () {
	      /**
	       * @param {?} templateBindings
	       * @param {?} warnings
	       * @param {?} errors
	       */
	      function TemplateBindingParseResult(templateBindings, warnings, errors) {
	          this.templateBindings = templateBindings;
	          this.warnings = warnings;
	          this.errors = errors;
	      }
	      return TemplateBindingParseResult;
	  }());
	  /**
	   * @param {?} config
	   * @return {?}
	   */
	  function _createInterpolateRegExp(config) {
	      var /** @type {?} */ pattern = escapeRegExp(config.start) + '([\\s\\S]*?)' + escapeRegExp(config.end);
	      return new RegExp(pattern, 'g');
	  }
	  var Parser = (function () {
	      /**
	       * @param {?} _lexer
	       */
	      function Parser(_lexer) {
	          this._lexer = _lexer;
	          this.errors = [];
	      }
	      /**
	       * @param {?} input
	       * @param {?} location
	       * @param {?=} interpolationConfig
	       * @return {?}
	       */
	      Parser.prototype.parseAction = function (input, location, interpolationConfig) {
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          this._checkNoInterpolation(input, location, interpolationConfig);
	          var /** @type {?} */ sourceToLex = this._stripComments(input);
	          var /** @type {?} */ tokens = this._lexer.tokenize(this._stripComments(input));
	          var /** @type {?} */ ast = new _ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length)
	              .parseChain();
	          return new ASTWithSource(ast, input, location, this.errors);
	      };
	      /**
	       * @param {?} input
	       * @param {?} location
	       * @param {?=} interpolationConfig
	       * @return {?}
	       */
	      Parser.prototype.parseBinding = function (input, location, interpolationConfig) {
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          var /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);
	          return new ASTWithSource(ast, input, location, this.errors);
	      };
	      /**
	       * @param {?} input
	       * @param {?} location
	       * @param {?=} interpolationConfig
	       * @return {?}
	       */
	      Parser.prototype.parseSimpleBinding = function (input, location, interpolationConfig) {
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          var /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);
	          var /** @type {?} */ errors = SimpleExpressionChecker.check(ast);
	          if (errors.length > 0) {
	              this._reportError("Host binding expression cannot contain " + errors.join(' '), input, location);
	          }
	          return new ASTWithSource(ast, input, location, this.errors);
	      };
	      /**
	       * @param {?} message
	       * @param {?} input
	       * @param {?} errLocation
	       * @param {?=} ctxLocation
	       * @return {?}
	       */
	      Parser.prototype._reportError = function (message, input, errLocation, ctxLocation) {
	          this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
	      };
	      /**
	       * @param {?} input
	       * @param {?} location
	       * @param {?} interpolationConfig
	       * @return {?}
	       */
	      Parser.prototype._parseBindingAst = function (input, location, interpolationConfig) {
	          // Quotes expressions use 3rd-party expression language. We don't want to use
	          // our lexer or parser for that, so we check for that ahead of time.
	          var /** @type {?} */ quote = this._parseQuote(input, location);
	          if (isPresent(quote)) {
	              return quote;
	          }
	          this._checkNoInterpolation(input, location, interpolationConfig);
	          var /** @type {?} */ sourceToLex = this._stripComments(input);
	          var /** @type {?} */ tokens = this._lexer.tokenize(sourceToLex);
	          return new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length)
	              .parseChain();
	      };
	      /**
	       * @param {?} input
	       * @param {?} location
	       * @return {?}
	       */
	      Parser.prototype._parseQuote = function (input, location) {
	          if (isBlank(input))
	              return null;
	          var /** @type {?} */ prefixSeparatorIndex = input.indexOf(':');
	          if (prefixSeparatorIndex == -1)
	              return null;
	          var /** @type {?} */ prefix = input.substring(0, prefixSeparatorIndex).trim();
	          if (!isIdentifier(prefix))
	              return null;
	          var /** @type {?} */ uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
	          return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
	      };
	      /**
	       * @param {?} prefixToken
	       * @param {?} input
	       * @param {?} location
	       * @return {?}
	       */
	      Parser.prototype.parseTemplateBindings = function (prefixToken, input, location) {
	          var /** @type {?} */ tokens = this._lexer.tokenize(input);
	          if (prefixToken) {
	              // Prefix the tokens with the tokens from prefixToken but have them take no space (0 index).
	              var /** @type {?} */ prefixTokens = this._lexer.tokenize(prefixToken).map(function (t) {
	                  t.index = 0;
	                  return t;
	              });
	              tokens.unshift.apply(tokens, prefixTokens);
	          }
	          return new _ParseAST(input, location, tokens, input.length, false, this.errors, 0)
	              .parseTemplateBindings();
	      };
	      /**
	       * @param {?} input
	       * @param {?} location
	       * @param {?=} interpolationConfig
	       * @return {?}
	       */
	      Parser.prototype.parseInterpolation = function (input, location, interpolationConfig) {
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          var /** @type {?} */ split = this.splitInterpolation(input, location, interpolationConfig);
	          if (split == null)
	              return null;
	          var /** @type {?} */ expressions = [];
	          for (var /** @type {?} */ i = 0; i < split.expressions.length; ++i) {
	              var /** @type {?} */ expressionText = split.expressions[i];
	              var /** @type {?} */ sourceToLex = this._stripComments(expressionText);
	              var /** @type {?} */ tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));
	              var /** @type {?} */ ast = new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length))
	                  .parseChain();
	              expressions.push(ast);
	          }
	          return new ASTWithSource(new Interpolation(new ParseSpan(0, isBlank(input) ? 0 : input.length), split.strings, expressions), input, location, this.errors);
	      };
	      /**
	       * @param {?} input
	       * @param {?} location
	       * @param {?=} interpolationConfig
	       * @return {?}
	       */
	      Parser.prototype.splitInterpolation = function (input, location, interpolationConfig) {
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          var /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);
	          var /** @type {?} */ parts = input.split(regexp);
	          if (parts.length <= 1) {
	              return null;
	          }
	          var /** @type {?} */ strings = [];
	          var /** @type {?} */ expressions = [];
	          var /** @type {?} */ offsets = [];
	          var /** @type {?} */ offset = 0;
	          for (var /** @type {?} */ i = 0; i < parts.length; i++) {
	              var /** @type {?} */ part = parts[i];
	              if (i % 2 === 0) {
	                  // fixed string
	                  strings.push(part);
	                  offset += part.length;
	              }
	              else if (part.trim().length > 0) {
	                  offset += interpolationConfig.start.length;
	                  expressions.push(part);
	                  offsets.push(offset);
	                  offset += part.length + interpolationConfig.end.length;
	              }
	              else {
	                  this._reportError('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
	                  expressions.push('$implict');
	                  offsets.push(offset);
	              }
	          }
	          return new SplitInterpolation(strings, expressions, offsets);
	      };
	      /**
	       * @param {?} input
	       * @param {?} location
	       * @return {?}
	       */
	      Parser.prototype.wrapLiteralPrimitive = function (input, location) {
	          return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, isBlank(input) ? 0 : input.length), input), input, location, this.errors);
	      };
	      /**
	       * @param {?} input
	       * @return {?}
	       */
	      Parser.prototype._stripComments = function (input) {
	          var /** @type {?} */ i = this._commentStart(input);
	          return isPresent(i) ? input.substring(0, i).trim() : input;
	      };
	      /**
	       * @param {?} input
	       * @return {?}
	       */
	      Parser.prototype._commentStart = function (input) {
	          var /** @type {?} */ outerQuote = null;
	          for (var /** @type {?} */ i = 0; i < input.length - 1; i++) {
	              var /** @type {?} */ char = input.charCodeAt(i);
	              var /** @type {?} */ nextChar = input.charCodeAt(i + 1);
	              if (char === $SLASH && nextChar == $SLASH && isBlank(outerQuote))
	                  return i;
	              if (outerQuote === char) {
	                  outerQuote = null;
	              }
	              else if (isBlank(outerQuote) && isQuote(char)) {
	                  outerQuote = char;
	              }
	          }
	          return null;
	      };
	      /**
	       * @param {?} input
	       * @param {?} location
	       * @param {?} interpolationConfig
	       * @return {?}
	       */
	      Parser.prototype._checkNoInterpolation = function (input, location, interpolationConfig) {
	          var /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);
	          var /** @type {?} */ parts = input.split(regexp);
	          if (parts.length > 1) {
	              this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
	          }
	      };
	      /**
	       * @param {?} parts
	       * @param {?} partInErrIdx
	       * @param {?} interpolationConfig
	       * @return {?}
	       */
	      Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx, interpolationConfig) {
	          var /** @type {?} */ errLocation = '';
	          for (var /** @type {?} */ j = 0; j < partInErrIdx; j++) {
	              errLocation += j % 2 === 0 ?
	                  parts[j] :
	                  "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
	          }
	          return errLocation.length;
	      };
	      Parser.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      Parser.ctorParameters = function () { return [
	          { type: Lexer, },
	      ]; };
	      return Parser;
	  }());
	  var _ParseAST = (function () {
	      /**
	       * @param {?} input
	       * @param {?} location
	       * @param {?} tokens
	       * @param {?} inputLength
	       * @param {?} parseAction
	       * @param {?} errors
	       * @param {?} offset
	       */
	      function _ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) {
	          this.input = input;
	          this.location = location;
	          this.tokens = tokens;
	          this.inputLength = inputLength;
	          this.parseAction = parseAction;
	          this.errors = errors;
	          this.offset = offset;
	          this.rparensExpected = 0;
	          this.rbracketsExpected = 0;
	          this.rbracesExpected = 0;
	          this.index = 0;
	      }
	      /**
	       * @param {?} offset
	       * @return {?}
	       */
	      _ParseAST.prototype.peek = function (offset) {
	          var /** @type {?} */ i = this.index + offset;
	          return i < this.tokens.length ? this.tokens[i] : EOF;
	      };
	      Object.defineProperty(_ParseAST.prototype, "next", {
	          /**
	           * @return {?}
	           */
	          get: function () { return this.peek(0); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(_ParseAST.prototype, "inputIndex", {
	          /**
	           * @return {?}
	           */
	          get: function () {
	              return (this.index < this.tokens.length) ? this.next.index + this.offset :
	                  this.inputLength + this.offset;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      /**
	       * @param {?} start
	       * @return {?}
	       */
	      _ParseAST.prototype.span = function (start) { return new ParseSpan(start, this.inputIndex); };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.advance = function () { this.index++; };
	      /**
	       * @param {?} code
	       * @return {?}
	       */
	      _ParseAST.prototype.optionalCharacter = function (code) {
	          if (this.next.isCharacter(code)) {
	              this.advance();
	              return true;
	          }
	          else {
	              return false;
	          }
	      };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.peekKeywordLet = function () { return this.next.isKeywordLet(); };
	      /**
	       * @param {?} code
	       * @return {?}
	       */
	      _ParseAST.prototype.expectCharacter = function (code) {
	          if (this.optionalCharacter(code))
	              return;
	          this.error("Missing expected " + String.fromCharCode(code));
	      };
	      /**
	       * @param {?} op
	       * @return {?}
	       */
	      _ParseAST.prototype.optionalOperator = function (op) {
	          if (this.next.isOperator(op)) {
	              this.advance();
	              return true;
	          }
	          else {
	              return false;
	          }
	      };
	      /**
	       * @param {?} operator
	       * @return {?}
	       */
	      _ParseAST.prototype.expectOperator = function (operator) {
	          if (this.optionalOperator(operator))
	              return;
	          this.error("Missing expected operator " + operator);
	      };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.expectIdentifierOrKeyword = function () {
	          var /** @type {?} */ n = this.next;
	          if (!n.isIdentifier() && !n.isKeyword()) {
	              this.error("Unexpected token " + n + ", expected identifier or keyword");
	              return '';
	          }
	          this.advance();
	          return n.toString();
	      };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
	          var /** @type {?} */ n = this.next;
	          if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
	              this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
	              return '';
	          }
	          this.advance();
	          return n.toString();
	      };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.parseChain = function () {
	          var /** @type {?} */ exprs = [];
	          var /** @type {?} */ start = this.inputIndex;
	          while (this.index < this.tokens.length) {
	              var /** @type {?} */ expr = this.parsePipe();
	              exprs.push(expr);
	              if (this.optionalCharacter($SEMICOLON)) {
	                  if (!this.parseAction) {
	                      this.error('Binding expression cannot contain chained expression');
	                  }
	                  while (this.optionalCharacter($SEMICOLON)) {
	                  } // read all semicolons
	              }
	              else if (this.index < this.tokens.length) {
	                  this.error("Unexpected token '" + this.next + "'");
	              }
	          }
	          if (exprs.length == 0)
	              return new EmptyExpr(this.span(start));
	          if (exprs.length == 1)
	              return exprs[0];
	          return new Chain(this.span(start), exprs);
	      };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.parsePipe = function () {
	          var /** @type {?} */ result = this.parseExpression();
	          if (this.optionalOperator('|')) {
	              if (this.parseAction) {
	                  this.error('Cannot have a pipe in an action expression');
	              }
	              do {
	                  var /** @type {?} */ name_1 = this.expectIdentifierOrKeyword();
	                  var /** @type {?} */ args = [];
	                  while (this.optionalCharacter($COLON)) {
	                      args.push(this.parseExpression());
	                  }
	                  result = new BindingPipe(this.span(result.span.start), result, name_1, args);
	              } while (this.optionalOperator('|'));
	          }
	          return result;
	      };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.parseExpression = function () { return this.parseConditional(); };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.parseConditional = function () {
	          var /** @type {?} */ start = this.inputIndex;
	          var /** @type {?} */ result = this.parseLogicalOr();
	          if (this.optionalOperator('?')) {
	              var /** @type {?} */ yes = this.parsePipe();
	              var /** @type {?} */ no = void 0;
	              if (!this.optionalCharacter($COLON)) {
	                  var /** @type {?} */ end = this.inputIndex;
	                  var /** @type {?} */ expression = this.input.substring(start, end);
	                  this.error("Conditional expression " + expression + " requires all 3 expressions");
	                  no = new EmptyExpr(this.span(start));
	              }
	              else {
	                  no = this.parsePipe();
	              }
	              return new Conditional(this.span(start), result, yes, no);
	          }
	          else {
	              return result;
	          }
	      };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.parseLogicalOr = function () {
	          // '||'
	          var /** @type {?} */ result = this.parseLogicalAnd();
	          while (this.optionalOperator('||')) {
	              var /** @type {?} */ right = this.parseLogicalAnd();
	              result = new Binary(this.span(result.span.start), '||', result, right);
	          }
	          return result;
	      };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.parseLogicalAnd = function () {
	          // '&&'
	          var /** @type {?} */ result = this.parseEquality();
	          while (this.optionalOperator('&&')) {
	              var /** @type {?} */ right = this.parseEquality();
	              result = new Binary(this.span(result.span.start), '&&', result, right);
	          }
	          return result;
	      };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.parseEquality = function () {
	          // '==','!=','===','!=='
	          var /** @type {?} */ result = this.parseRelational();
	          while (this.next.type == TokenType.Operator) {
	              var /** @type {?} */ operator = this.next.strValue;
	              switch (operator) {
	                  case '==':
	                  case '===':
	                  case '!=':
	                  case '!==':
	                      this.advance();
	                      var /** @type {?} */ right = this.parseRelational();
	                      result = new Binary(this.span(result.span.start), operator, result, right);
	                      continue;
	              }
	              break;
	          }
	          return result;
	      };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.parseRelational = function () {
	          // '<', '>', '<=', '>='
	          var /** @type {?} */ result = this.parseAdditive();
	          while (this.next.type == TokenType.Operator) {
	              var /** @type {?} */ operator = this.next.strValue;
	              switch (operator) {
	                  case '<':
	                  case '>':
	                  case '<=':
	                  case '>=':
	                      this.advance();
	                      var /** @type {?} */ right = this.parseAdditive();
	                      result = new Binary(this.span(result.span.start), operator, result, right);
	                      continue;
	              }
	              break;
	          }
	          return result;
	      };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.parseAdditive = function () {
	          // '+', '-'
	          var /** @type {?} */ result = this.parseMultiplicative();
	          while (this.next.type == TokenType.Operator) {
	              var /** @type {?} */ operator = this.next.strValue;
	              switch (operator) {
	                  case '+':
	                  case '-':
	                      this.advance();
	                      var /** @type {?} */ right = this.parseMultiplicative();
	                      result = new Binary(this.span(result.span.start), operator, result, right);
	                      continue;
	              }
	              break;
	          }
	          return result;
	      };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.parseMultiplicative = function () {
	          // '*', '%', '/'
	          var /** @type {?} */ result = this.parsePrefix();
	          while (this.next.type == TokenType.Operator) {
	              var /** @type {?} */ operator = this.next.strValue;
	              switch (operator) {
	                  case '*':
	                  case '%':
	                  case '/':
	                      this.advance();
	                      var /** @type {?} */ right = this.parsePrefix();
	                      result = new Binary(this.span(result.span.start), operator, result, right);
	                      continue;
	              }
	              break;
	          }
	          return result;
	      };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.parsePrefix = function () {
	          if (this.next.type == TokenType.Operator) {
	              var /** @type {?} */ start = this.inputIndex;
	              var /** @type {?} */ operator = this.next.strValue;
	              var /** @type {?} */ result = void 0;
	              switch (operator) {
	                  case '+':
	                      this.advance();
	                      return this.parsePrefix();
	                  case '-':
	                      this.advance();
	                      result = this.parsePrefix();
	                      return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);
	                  case '!':
	                      this.advance();
	                      result = this.parsePrefix();
	                      return new PrefixNot(this.span(start), result);
	              }
	          }
	          return this.parseCallChain();
	      };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.parseCallChain = function () {
	          var /** @type {?} */ result = this.parsePrimary();
	          while (true) {
	              if (this.optionalCharacter($PERIOD)) {
	                  result = this.parseAccessMemberOrMethodCall(result, false);
	              }
	              else if (this.optionalOperator('?.')) {
	                  result = this.parseAccessMemberOrMethodCall(result, true);
	              }
	              else if (this.optionalCharacter($LBRACKET)) {
	                  this.rbracketsExpected++;
	                  var /** @type {?} */ key = this.parsePipe();
	                  this.rbracketsExpected--;
	                  this.expectCharacter($RBRACKET);
	                  if (this.optionalOperator('=')) {
	                      var /** @type {?} */ value = this.parseConditional();
	                      result = new KeyedWrite(this.span(result.span.start), result, key, value);
	                  }
	                  else {
	                      result = new KeyedRead(this.span(result.span.start), result, key);
	                  }
	              }
	              else if (this.optionalCharacter($LPAREN)) {
	                  this.rparensExpected++;
	                  var /** @type {?} */ args = this.parseCallArguments();
	                  this.rparensExpected--;
	                  this.expectCharacter($RPAREN);
	                  result = new FunctionCall(this.span(result.span.start), result, args);
	              }
	              else {
	                  return result;
	              }
	          }
	      };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.parsePrimary = function () {
	          var /** @type {?} */ start = this.inputIndex;
	          if (this.optionalCharacter($LPAREN)) {
	              this.rparensExpected++;
	              var /** @type {?} */ result = this.parsePipe();
	              this.rparensExpected--;
	              this.expectCharacter($RPAREN);
	              return result;
	          }
	          else if (this.next.isKeywordNull()) {
	              this.advance();
	              return new LiteralPrimitive(this.span(start), null);
	          }
	          else if (this.next.isKeywordUndefined()) {
	              this.advance();
	              return new LiteralPrimitive(this.span(start), void 0);
	          }
	          else if (this.next.isKeywordTrue()) {
	              this.advance();
	              return new LiteralPrimitive(this.span(start), true);
	          }
	          else if (this.next.isKeywordFalse()) {
	              this.advance();
	              return new LiteralPrimitive(this.span(start), false);
	          }
	          else if (this.next.isKeywordThis()) {
	              this.advance();
	              return new ImplicitReceiver(this.span(start));
	          }
	          else if (this.optionalCharacter($LBRACKET)) {
	              this.rbracketsExpected++;
	              var /** @type {?} */ elements = this.parseExpressionList($RBRACKET);
	              this.rbracketsExpected--;
	              this.expectCharacter($RBRACKET);
	              return new LiteralArray(this.span(start), elements);
	          }
	          else if (this.next.isCharacter($LBRACE)) {
	              return this.parseLiteralMap();
	          }
	          else if (this.next.isIdentifier()) {
	              return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);
	          }
	          else if (this.next.isNumber()) {
	              var /** @type {?} */ value = this.next.toNumber();
	              this.advance();
	              return new LiteralPrimitive(this.span(start), value);
	          }
	          else if (this.next.isString()) {
	              var /** @type {?} */ literalValue = this.next.toString();
	              this.advance();
	              return new LiteralPrimitive(this.span(start), literalValue);
	          }
	          else if (this.index >= this.tokens.length) {
	              this.error("Unexpected end of expression: " + this.input);
	              return new EmptyExpr(this.span(start));
	          }
	          else {
	              this.error("Unexpected token " + this.next);
	              return new EmptyExpr(this.span(start));
	          }
	      };
	      /**
	       * @param {?} terminator
	       * @return {?}
	       */
	      _ParseAST.prototype.parseExpressionList = function (terminator) {
	          var /** @type {?} */ result = [];
	          if (!this.next.isCharacter(terminator)) {
	              do {
	                  result.push(this.parsePipe());
	              } while (this.optionalCharacter($COMMA));
	          }
	          return result;
	      };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.parseLiteralMap = function () {
	          var /** @type {?} */ keys = [];
	          var /** @type {?} */ values = [];
	          var /** @type {?} */ start = this.inputIndex;
	          this.expectCharacter($LBRACE);
	          if (!this.optionalCharacter($RBRACE)) {
	              this.rbracesExpected++;
	              do {
	                  var /** @type {?} */ key = this.expectIdentifierOrKeywordOrString();
	                  keys.push(key);
	                  this.expectCharacter($COLON);
	                  values.push(this.parsePipe());
	              } while (this.optionalCharacter($COMMA));
	              this.rbracesExpected--;
	              this.expectCharacter($RBRACE);
	          }
	          return new LiteralMap(this.span(start), keys, values);
	      };
	      /**
	       * @param {?} receiver
	       * @param {?=} isSafe
	       * @return {?}
	       */
	      _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {
	          if (isSafe === void 0) { isSafe = false; }
	          var /** @type {?} */ start = receiver.span.start;
	          var /** @type {?} */ id = this.expectIdentifierOrKeyword();
	          if (this.optionalCharacter($LPAREN)) {
	              this.rparensExpected++;
	              var /** @type {?} */ args = this.parseCallArguments();
	              this.expectCharacter($RPAREN);
	              this.rparensExpected--;
	              var /** @type {?} */ span = this.span(start);
	              return isSafe ? new SafeMethodCall(span, receiver, id, args) :
	                  new MethodCall(span, receiver, id, args);
	          }
	          else {
	              if (isSafe) {
	                  if (this.optionalOperator('=')) {
	                      this.error('The \'?.\' operator cannot be used in the assignment');
	                      return new EmptyExpr(this.span(start));
	                  }
	                  else {
	                      return new SafePropertyRead(this.span(start), receiver, id);
	                  }
	              }
	              else {
	                  if (this.optionalOperator('=')) {
	                      if (!this.parseAction) {
	                          this.error('Bindings cannot contain assignments');
	                          return new EmptyExpr(this.span(start));
	                      }
	                      var /** @type {?} */ value = this.parseConditional();
	                      return new PropertyWrite(this.span(start), receiver, id, value);
	                  }
	                  else {
	                      return new PropertyRead(this.span(start), receiver, id);
	                  }
	              }
	          }
	      };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.parseCallArguments = function () {
	          if (this.next.isCharacter($RPAREN))
	              return [];
	          var /** @type {?} */ positionals = [];
	          do {
	              positionals.push(this.parsePipe());
	          } while (this.optionalCharacter($COMMA));
	          return (positionals);
	      };
	      /**
	       *  An identifier, a keyword, a string with an optional `-` inbetween.
	       * @return {?}
	       */
	      _ParseAST.prototype.expectTemplateBindingKey = function () {
	          var /** @type {?} */ result = '';
	          var /** @type {?} */ operatorFound = false;
	          do {
	              result += this.expectIdentifierOrKeywordOrString();
	              operatorFound = this.optionalOperator('-');
	              if (operatorFound) {
	                  result += '-';
	              }
	          } while (operatorFound);
	          return result.toString();
	      };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.parseTemplateBindings = function () {
	          var /** @type {?} */ bindings = [];
	          var /** @type {?} */ prefix = null;
	          var /** @type {?} */ warnings = [];
	          while (this.index < this.tokens.length) {
	              var /** @type {?} */ start = this.inputIndex;
	              var /** @type {?} */ keyIsVar = this.peekKeywordLet();
	              if (keyIsVar) {
	                  this.advance();
	              }
	              var /** @type {?} */ key = this.expectTemplateBindingKey();
	              if (!keyIsVar) {
	                  if (prefix == null) {
	                      prefix = key;
	                  }
	                  else {
	                      key = prefix + key[0].toUpperCase() + key.substring(1);
	                  }
	              }
	              this.optionalCharacter($COLON);
	              var /** @type {?} */ name_2 = null;
	              var /** @type {?} */ expression = null;
	              if (keyIsVar) {
	                  if (this.optionalOperator('=')) {
	                      name_2 = this.expectTemplateBindingKey();
	                  }
	                  else {
	                      name_2 = '\$implicit';
	                  }
	              }
	              else if (this.next !== EOF && !this.peekKeywordLet()) {
	                  var /** @type {?} */ start_1 = this.inputIndex;
	                  var /** @type {?} */ ast = this.parsePipe();
	                  var /** @type {?} */ source = this.input.substring(start_1 - this.offset, this.inputIndex - this.offset);
	                  expression = new ASTWithSource(ast, source, this.location, this.errors);
	              }
	              bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name_2, expression));
	              if (!this.optionalCharacter($SEMICOLON)) {
	                  this.optionalCharacter($COMMA);
	              }
	          }
	          return new TemplateBindingParseResult(bindings, warnings, this.errors);
	      };
	      /**
	       * @param {?} message
	       * @param {?=} index
	       * @return {?}
	       */
	      _ParseAST.prototype.error = function (message, index) {
	          if (index === void 0) { index = null; }
	          this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
	          this.skip();
	      };
	      /**
	       * @param {?=} index
	       * @return {?}
	       */
	      _ParseAST.prototype.locationText = function (index) {
	          if (index === void 0) { index = null; }
	          if (isBlank(index))
	              index = this.index;
	          return (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" :
	              "at the end of the expression";
	      };
	      /**
	       * @return {?}
	       */
	      _ParseAST.prototype.skip = function () {
	          var /** @type {?} */ n = this.next;
	          while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) &&
	              (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) &&
	              (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) &&
	              (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {
	              if (this.next.isError()) {
	                  this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
	              }
	              this.advance();
	              n = this.next;
	          }
	      };
	      return _ParseAST;
	  }());
	  var SimpleExpressionChecker = (function () {
	      function SimpleExpressionChecker() {
	          this.errors = [];
	      }
	      /**
	       * @param {?} ast
	       * @return {?}
	       */
	      SimpleExpressionChecker.check = function (ast) {
	          var /** @type {?} */ s = new SimpleExpressionChecker();
	          ast.visit(s);
	          return s.errors;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast, context) { };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitInterpolation = function (ast, context) { };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast, context) { };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitPropertyRead = function (ast, context) { };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast, context) { };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast, context) { };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitMethodCall = function (ast, context) { };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast, context) { };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitFunctionCall = function (ast, context) { };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitLiteralArray = function (ast, context) { this.visitAll(ast.expressions); };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitLiteralMap = function (ast, context) { this.visitAll(ast.values); };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitBinary = function (ast, context) { };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitPrefixNot = function (ast, context) { };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitConditional = function (ast, context) { };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitPipe = function (ast, context) { this.errors.push('pipes'); };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitKeyedRead = function (ast, context) { };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast, context) { };
	      /**
	       * @param {?} asts
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitAll = function (asts) {
	          var _this = this;
	          return asts.map(function (node) { return node.visit(_this); });
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitChain = function (ast, context) { };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      SimpleExpressionChecker.prototype.visitQuote = function (ast, context) { };
	      return SimpleExpressionChecker;
	  }());
	
	  var ParseLocation = (function () {
	      /**
	       * @param {?} file
	       * @param {?} offset
	       * @param {?} line
	       * @param {?} col
	       */
	      function ParseLocation(file, offset, line, col) {
	          this.file = file;
	          this.offset = offset;
	          this.line = line;
	          this.col = col;
	      }
	      /**
	       * @return {?}
	       */
	      ParseLocation.prototype.toString = function () {
	          return isPresent(this.offset) ? this.file.url + "@" + this.line + ":" + this.col : this.file.url;
	      };
	      /**
	       * @param {?} delta
	       * @return {?}
	       */
	      ParseLocation.prototype.moveBy = function (delta) {
	          var /** @type {?} */ source = this.file.content;
	          var /** @type {?} */ len = source.length;
	          var /** @type {?} */ offset = this.offset;
	          var /** @type {?} */ line = this.line;
	          var /** @type {?} */ col = this.col;
	          while (offset > 0 && delta < 0) {
	              offset--;
	              delta++;
	              var /** @type {?} */ ch = source.charCodeAt(offset);
	              if (ch == $LF) {
	                  line--;
	                  var /** @type {?} */ priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode($LF));
	                  col = priorLine > 0 ? offset - priorLine : offset;
	              }
	              else {
	                  col--;
	              }
	          }
	          while (offset < len && delta > 0) {
	              var /** @type {?} */ ch = source.charCodeAt(offset);
	              offset++;
	              delta--;
	              if (ch == $LF) {
	                  line++;
	                  col = 0;
	              }
	              else {
	                  col++;
	              }
	          }
	          return new ParseLocation(this.file, offset, line, col);
	      };
	      return ParseLocation;
	  }());
	  var ParseSourceFile = (function () {
	      /**
	       * @param {?} content
	       * @param {?} url
	       */
	      function ParseSourceFile(content, url) {
	          this.content = content;
	          this.url = url;
	      }
	      return ParseSourceFile;
	  }());
	  var ParseSourceSpan = (function () {
	      /**
	       * @param {?} start
	       * @param {?} end
	       * @param {?=} details
	       */
	      function ParseSourceSpan(start, end, details) {
	          if (details === void 0) { details = null; }
	          this.start = start;
	          this.end = end;
	          this.details = details;
	      }
	      /**
	       * @return {?}
	       */
	      ParseSourceSpan.prototype.toString = function () {
	          return this.start.file.content.substring(this.start.offset, this.end.offset);
	      };
	      return ParseSourceSpan;
	  }());
	  var ParseErrorLevel = {};
	  ParseErrorLevel.WARNING = 0;
	  ParseErrorLevel.FATAL = 1;
	  ParseErrorLevel[ParseErrorLevel.WARNING] = "WARNING";
	  ParseErrorLevel[ParseErrorLevel.FATAL] = "FATAL";
	  var ParseError = (function () {
	      /**
	       * @param {?} span
	       * @param {?} msg
	       * @param {?=} level
	       */
	      function ParseError(span, msg, level) {
	          if (level === void 0) { level = ParseErrorLevel.FATAL; }
	          this.span = span;
	          this.msg = msg;
	          this.level = level;
	      }
	      /**
	       * @return {?}
	       */
	      ParseError.prototype.toString = function () {
	          var /** @type {?} */ source = this.span.start.file.content;
	          var /** @type {?} */ ctxStart = this.span.start.offset;
	          var /** @type {?} */ contextStr = '';
	          var /** @type {?} */ details = '';
	          if (isPresent(ctxStart)) {
	              if (ctxStart > source.length - 1) {
	                  ctxStart = source.length - 1;
	              }
	              var /** @type {?} */ ctxEnd = ctxStart;
	              var /** @type {?} */ ctxLen = 0;
	              var /** @type {?} */ ctxLines = 0;
	              while (ctxLen < 100 && ctxStart > 0) {
	                  ctxStart--;
	                  ctxLen++;
	                  if (source[ctxStart] == '\n') {
	                      if (++ctxLines == 3) {
	                          break;
	                      }
	                  }
	              }
	              ctxLen = 0;
	              ctxLines = 0;
	              while (ctxLen < 100 && ctxEnd < source.length - 1) {
	                  ctxEnd++;
	                  ctxLen++;
	                  if (source[ctxEnd] == '\n') {
	                      if (++ctxLines == 3) {
	                          break;
	                      }
	                  }
	              }
	              var /** @type {?} */ context = source.substring(ctxStart, this.span.start.offset) + '[ERROR ->]' +
	                  source.substring(this.span.start.offset, ctxEnd + 1);
	              contextStr = " (\"" + context + "\")";
	          }
	          if (this.span.details) {
	              details = ", " + this.span.details;
	          }
	          return "" + this.msg + contextStr + ": " + this.span.start + details;
	      };
	      return ParseError;
	  }());
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var Text = (function () {
	      /**
	       * @param {?} value
	       * @param {?} sourceSpan
	       */
	      function Text(value, sourceSpan) {
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      Text.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	      return Text;
	  }());
	  var Expansion = (function () {
	      /**
	       * @param {?} switchValue
	       * @param {?} type
	       * @param {?} cases
	       * @param {?} sourceSpan
	       * @param {?} switchValueSourceSpan
	       */
	      function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
	          this.switchValue = switchValue;
	          this.type = type;
	          this.cases = cases;
	          this.sourceSpan = sourceSpan;
	          this.switchValueSourceSpan = switchValueSourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      Expansion.prototype.visit = function (visitor, context) { return visitor.visitExpansion(this, context); };
	      return Expansion;
	  }());
	  var ExpansionCase = (function () {
	      /**
	       * @param {?} value
	       * @param {?} expression
	       * @param {?} sourceSpan
	       * @param {?} valueSourceSpan
	       * @param {?} expSourceSpan
	       */
	      function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
	          this.value = value;
	          this.expression = expression;
	          this.sourceSpan = sourceSpan;
	          this.valueSourceSpan = valueSourceSpan;
	          this.expSourceSpan = expSourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      ExpansionCase.prototype.visit = function (visitor, context) { return visitor.visitExpansionCase(this, context); };
	      return ExpansionCase;
	  }());
	  var Attribute$1 = (function () {
	      /**
	       * @param {?} name
	       * @param {?} value
	       * @param {?} sourceSpan
	       * @param {?=} valueSpan
	       */
	      function Attribute(name, value, sourceSpan, valueSpan) {
	          this.name = name;
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	          this.valueSpan = valueSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      Attribute.prototype.visit = function (visitor, context) { return visitor.visitAttribute(this, context); };
	      return Attribute;
	  }());
	  var Element = (function () {
	      /**
	       * @param {?} name
	       * @param {?} attrs
	       * @param {?} children
	       * @param {?} sourceSpan
	       * @param {?} startSourceSpan
	       * @param {?} endSourceSpan
	       */
	      function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
	          this.name = name;
	          this.attrs = attrs;
	          this.children = children;
	          this.sourceSpan = sourceSpan;
	          this.startSourceSpan = startSourceSpan;
	          this.endSourceSpan = endSourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      Element.prototype.visit = function (visitor, context) { return visitor.visitElement(this, context); };
	      return Element;
	  }());
	  var Comment = (function () {
	      /**
	       * @param {?} value
	       * @param {?} sourceSpan
	       */
	      function Comment(value, sourceSpan) {
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      Comment.prototype.visit = function (visitor, context) { return visitor.visitComment(this, context); };
	      return Comment;
	  }());
	  /**
	   * @param {?} visitor
	   * @param {?} nodes
	   * @param {?=} context
	   * @return {?}
	   */
	  function visitAll(visitor, nodes, context) {
	      if (context === void 0) { context = null; }
	      var /** @type {?} */ result = [];
	      var /** @type {?} */ visit = visitor.visit ?
	          function (ast) { return visitor.visit(ast, context) || ast.visit(visitor, context); } :
	          function (ast) { return ast.visit(visitor, context); };
	      nodes.forEach(function (ast) {
	          var /** @type {?} */ astResult = visit(ast);
	          if (astResult) {
	              result.push(astResult);
	          }
	      });
	      return result;
	  }
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$4 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var TokenType$1 = {};
	  TokenType$1.TAG_OPEN_START = 0;
	  TokenType$1.TAG_OPEN_END = 1;
	  TokenType$1.TAG_OPEN_END_VOID = 2;
	  TokenType$1.TAG_CLOSE = 3;
	  TokenType$1.TEXT = 4;
	  TokenType$1.ESCAPABLE_RAW_TEXT = 5;
	  TokenType$1.RAW_TEXT = 6;
	  TokenType$1.COMMENT_START = 7;
	  TokenType$1.COMMENT_END = 8;
	  TokenType$1.CDATA_START = 9;
	  TokenType$1.CDATA_END = 10;
	  TokenType$1.ATTR_NAME = 11;
	  TokenType$1.ATTR_VALUE = 12;
	  TokenType$1.DOC_TYPE = 13;
	  TokenType$1.EXPANSION_FORM_START = 14;
	  TokenType$1.EXPANSION_CASE_VALUE = 15;
	  TokenType$1.EXPANSION_CASE_EXP_START = 16;
	  TokenType$1.EXPANSION_CASE_EXP_END = 17;
	  TokenType$1.EXPANSION_FORM_END = 18;
	  TokenType$1.EOF = 19;
	  TokenType$1[TokenType$1.TAG_OPEN_START] = "TAG_OPEN_START";
	  TokenType$1[TokenType$1.TAG_OPEN_END] = "TAG_OPEN_END";
	  TokenType$1[TokenType$1.TAG_OPEN_END_VOID] = "TAG_OPEN_END_VOID";
	  TokenType$1[TokenType$1.TAG_CLOSE] = "TAG_CLOSE";
	  TokenType$1[TokenType$1.TEXT] = "TEXT";
	  TokenType$1[TokenType$1.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT";
	  TokenType$1[TokenType$1.RAW_TEXT] = "RAW_TEXT";
	  TokenType$1[TokenType$1.COMMENT_START] = "COMMENT_START";
	  TokenType$1[TokenType$1.COMMENT_END] = "COMMENT_END";
	  TokenType$1[TokenType$1.CDATA_START] = "CDATA_START";
	  TokenType$1[TokenType$1.CDATA_END] = "CDATA_END";
	  TokenType$1[TokenType$1.ATTR_NAME] = "ATTR_NAME";
	  TokenType$1[TokenType$1.ATTR_VALUE] = "ATTR_VALUE";
	  TokenType$1[TokenType$1.DOC_TYPE] = "DOC_TYPE";
	  TokenType$1[TokenType$1.EXPANSION_FORM_START] = "EXPANSION_FORM_START";
	  TokenType$1[TokenType$1.EXPANSION_CASE_VALUE] = "EXPANSION_CASE_VALUE";
	  TokenType$1[TokenType$1.EXPANSION_CASE_EXP_START] = "EXPANSION_CASE_EXP_START";
	  TokenType$1[TokenType$1.EXPANSION_CASE_EXP_END] = "EXPANSION_CASE_EXP_END";
	  TokenType$1[TokenType$1.EXPANSION_FORM_END] = "EXPANSION_FORM_END";
	  TokenType$1[TokenType$1.EOF] = "EOF";
	  var Token$1 = (function () {
	      /**
	       * @param {?} type
	       * @param {?} parts
	       * @param {?} sourceSpan
	       */
	      function Token(type, parts, sourceSpan) {
	          this.type = type;
	          this.parts = parts;
	          this.sourceSpan = sourceSpan;
	      }
	      return Token;
	  }());
	  var TokenError = (function (_super) {
	      __extends$4(TokenError, _super);
	      /**
	       * @param {?} errorMsg
	       * @param {?} tokenType
	       * @param {?} span
	       */
	      function TokenError(errorMsg, tokenType, span) {
	          _super.call(this, span, errorMsg);
	          this.tokenType = tokenType;
	      }
	      return TokenError;
	  }(ParseError));
	  var TokenizeResult = (function () {
	      /**
	       * @param {?} tokens
	       * @param {?} errors
	       */
	      function TokenizeResult(tokens, errors) {
	          this.tokens = tokens;
	          this.errors = errors;
	      }
	      return TokenizeResult;
	  }());
	  /**
	   * @param {?} source
	   * @param {?} url
	   * @param {?} getTagDefinition
	   * @param {?=} tokenizeExpansionForms
	   * @param {?=} interpolationConfig
	   * @return {?}
	   */
	  function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {
	      if (tokenizeExpansionForms === void 0) { tokenizeExpansionForms = false; }
	      if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	      return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig)
	          .tokenize();
	  }
	  var /** @type {?} */ _CR_OR_CRLF_REGEXP = /\r\n?/g;
	  /**
	   * @param {?} charCode
	   * @return {?}
	   */
	  function _unexpectedCharacterErrorMsg(charCode) {
	      var /** @type {?} */ char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);
	      return "Unexpected character \"" + char + "\"";
	  }
	  /**
	   * @param {?} entitySrc
	   * @return {?}
	   */
	  function _unknownEntityErrorMsg(entitySrc) {
	      return "Unknown entity \"" + entitySrc + "\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax";
	  }
	  var _ControlFlowError = (function () {
	      /**
	       * @param {?} error
	       */
	      function _ControlFlowError(error) {
	          this.error = error;
	      }
	      return _ControlFlowError;
	  }());
	  // See http://www.w3.org/TR/html51/syntax.html#writing
	  var _Tokenizer = (function () {
	      /**
	       * @param {?} _file The html source
	       * @param {?} _getTagDefinition
	       * @param {?} _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)
	       * @param {?=} _interpolationConfig
	       */
	      function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {
	          if (_interpolationConfig === void 0) { _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          this._file = _file;
	          this._getTagDefinition = _getTagDefinition;
	          this._tokenizeIcu = _tokenizeIcu;
	          this._interpolationConfig = _interpolationConfig;
	          this._peek = -1;
	          this._nextPeek = -1;
	          this._index = -1;
	          this._line = 0;
	          this._column = -1;
	          this._expansionCaseStack = [];
	          this._inInterpolation = false;
	          this.tokens = [];
	          this.errors = [];
	          this._input = _file.content;
	          this._length = _file.content.length;
	          this._advance();
	      }
	      /**
	       * @param {?} content
	       * @return {?}
	       */
	      _Tokenizer.prototype._processCarriageReturns = function (content) {
	          // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream
	          // In order to keep the original position in the source, we can not
	          // pre-process it.
	          // Instead CRs are processed right before instantiating the tokens.
	          return content.replace(_CR_OR_CRLF_REGEXP, '\n');
	      };
	      /**
	       * @return {?}
	       */
	      _Tokenizer.prototype.tokenize = function () {
	          while (this._peek !== $EOF) {
	              var /** @type {?} */ start = this._getLocation();
	              try {
	                  if (this._attemptCharCode($LT)) {
	                      if (this._attemptCharCode($BANG)) {
	                          if (this._attemptCharCode($LBRACKET)) {
	                              this._consumeCdata(start);
	                          }
	                          else if (this._attemptCharCode($MINUS)) {
	                              this._consumeComment(start);
	                          }
	                          else {
	                              this._consumeDocType(start);
	                          }
	                      }
	                      else if (this._attemptCharCode($SLASH)) {
	                          this._consumeTagClose(start);
	                      }
	                      else {
	                          this._consumeTagOpen(start);
	                      }
	                  }
	                  else if (!this._tokenizeIcu || !this._tokenizeExpansionForm()) {
	                      this._consumeText();
	                  }
	              }
	              catch (e) {
	                  if (e instanceof _ControlFlowError) {
	                      this.errors.push(e.error);
	                  }
	                  else {
	                      throw e;
	                  }
	              }
	          }
	          this._beginToken(TokenType$1.EOF);
	          this._endToken([]);
	          return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
	      };
	      /**
	       * @return {?}
	       */
	      _Tokenizer.prototype._tokenizeExpansionForm = function () {
	          if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
	              this._consumeExpansionFormStart();
	              return true;
	          }
	          if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {
	              this._consumeExpansionCaseStart();
	              return true;
	          }
	          if (this._peek === $RBRACE) {
	              if (this._isInExpansionCase()) {
	                  this._consumeExpansionCaseEnd();
	                  return true;
	              }
	              if (this._isInExpansionForm()) {
	                  this._consumeExpansionFormEnd();
	                  return true;
	              }
	          }
	          return false;
	      };
	      /**
	       * @return {?}
	       */
	      _Tokenizer.prototype._getLocation = function () {
	          return new ParseLocation(this._file, this._index, this._line, this._column);
	      };
	      /**
	       * @param {?=} start
	       * @param {?=} end
	       * @return {?}
	       */
	      _Tokenizer.prototype._getSpan = function (start, end) {
	          if (start === void 0) { start = this._getLocation(); }
	          if (end === void 0) { end = this._getLocation(); }
	          return new ParseSourceSpan(start, end);
	      };
	      /**
	       * @param {?} type
	       * @param {?=} start
	       * @return {?}
	       */
	      _Tokenizer.prototype._beginToken = function (type, start) {
	          if (start === void 0) { start = this._getLocation(); }
	          this._currentTokenStart = start;
	          this._currentTokenType = type;
	      };
	      /**
	       * @param {?} parts
	       * @param {?=} end
	       * @return {?}
	       */
	      _Tokenizer.prototype._endToken = function (parts, end) {
	          if (end === void 0) { end = this._getLocation(); }
	          var /** @type {?} */ token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));
	          this.tokens.push(token);
	          this._currentTokenStart = null;
	          this._currentTokenType = null;
	          return token;
	      };
	      /**
	       * @param {?} msg
	       * @param {?} span
	       * @return {?}
	       */
	      _Tokenizer.prototype._createError = function (msg, span) {
	          if (this._isInExpansionForm()) {
	              msg += " (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)";
	          }
	          var /** @type {?} */ error = new TokenError(msg, this._currentTokenType, span);
	          this._currentTokenStart = null;
	          this._currentTokenType = null;
	          return new _ControlFlowError(error);
	      };
	      /**
	       * @return {?}
	       */
	      _Tokenizer.prototype._advance = function () {
	          if (this._index >= this._length) {
	              throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());
	          }
	          if (this._peek === $LF) {
	              this._line++;
	              this._column = 0;
	          }
	          else if (this._peek !== $LF && this._peek !== $CR) {
	              this._column++;
	          }
	          this._index++;
	          this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);
	          this._nextPeek =
	              this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);
	      };
	      /**
	       * @param {?} charCode
	       * @return {?}
	       */
	      _Tokenizer.prototype._attemptCharCode = function (charCode) {
	          if (this._peek === charCode) {
	              this._advance();
	              return true;
	          }
	          return false;
	      };
	      /**
	       * @param {?} charCode
	       * @return {?}
	       */
	      _Tokenizer.prototype._attemptCharCodeCaseInsensitive = function (charCode) {
	          if (compareCharCodeCaseInsensitive(this._peek, charCode)) {
	              this._advance();
	              return true;
	          }
	          return false;
	      };
	      /**
	       * @param {?} charCode
	       * @return {?}
	       */
	      _Tokenizer.prototype._requireCharCode = function (charCode) {
	          var /** @type {?} */ location = this._getLocation();
	          if (!this._attemptCharCode(charCode)) {
	              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
	          }
	      };
	      /**
	       * @param {?} chars
	       * @return {?}
	       */
	      _Tokenizer.prototype._attemptStr = function (chars) {
	          var /** @type {?} */ len = chars.length;
	          if (this._index + len > this._length) {
	              return false;
	          }
	          var /** @type {?} */ initialPosition = this._savePosition();
	          for (var /** @type {?} */ i = 0; i < len; i++) {
	              if (!this._attemptCharCode(chars.charCodeAt(i))) {
	                  // If attempting to parse the string fails, we want to reset the parser
	                  // to where it was before the attempt
	                  this._restorePosition(initialPosition);
	                  return false;
	              }
	          }
	          return true;
	      };
	      /**
	       * @param {?} chars
	       * @return {?}
	       */
	      _Tokenizer.prototype._attemptStrCaseInsensitive = function (chars) {
	          for (var /** @type {?} */ i = 0; i < chars.length; i++) {
	              if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
	                  return false;
	              }
	          }
	          return true;
	      };
	      /**
	       * @param {?} chars
	       * @return {?}
	       */
	      _Tokenizer.prototype._requireStr = function (chars) {
	          var /** @type {?} */ location = this._getLocation();
	          if (!this._attemptStr(chars)) {
	              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
	          }
	      };
	      /**
	       * @param {?} predicate
	       * @return {?}
	       */
	      _Tokenizer.prototype._attemptCharCodeUntilFn = function (predicate) {
	          while (!predicate(this._peek)) {
	              this._advance();
	          }
	      };
	      /**
	       * @param {?} predicate
	       * @param {?} len
	       * @return {?}
	       */
	      _Tokenizer.prototype._requireCharCodeUntilFn = function (predicate, len) {
	          var /** @type {?} */ start = this._getLocation();
	          this._attemptCharCodeUntilFn(predicate);
	          if (this._index - start.offset < len) {
	              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
	          }
	      };
	      /**
	       * @param {?} char
	       * @return {?}
	       */
	      _Tokenizer.prototype._attemptUntilChar = function (char) {
	          while (this._peek !== char) {
	              this._advance();
	          }
	      };
	      /**
	       * @param {?} decodeEntities
	       * @return {?}
	       */
	      _Tokenizer.prototype._readChar = function (decodeEntities) {
	          if (decodeEntities && this._peek === $AMPERSAND) {
	              return this._decodeEntity();
	          }
	          else {
	              var /** @type {?} */ index = this._index;
	              this._advance();
	              return this._input[index];
	          }
	      };
	      /**
	       * @return {?}
	       */
	      _Tokenizer.prototype._decodeEntity = function () {
	          var /** @type {?} */ start = this._getLocation();
	          this._advance();
	          if (this._attemptCharCode($HASH)) {
	              var /** @type {?} */ isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
	              var /** @type {?} */ numberStart = this._getLocation().offset;
	              this._attemptCharCodeUntilFn(isDigitEntityEnd);
	              if (this._peek != $SEMICOLON) {
	                  throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
	              }
	              this._advance();
	              var /** @type {?} */ strNum = this._input.substring(numberStart, this._index - 1);
	              try {
	                  var /** @type {?} */ charCode = parseInt(strNum, isHex ? 16 : 10);
	                  return String.fromCharCode(charCode);
	              }
	              catch (e) {
	                  var /** @type {?} */ entity = this._input.substring(start.offset + 1, this._index - 1);
	                  throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
	              }
	          }
	          else {
	              var /** @type {?} */ startPosition = this._savePosition();
	              this._attemptCharCodeUntilFn(isNamedEntityEnd);
	              if (this._peek != $SEMICOLON) {
	                  this._restorePosition(startPosition);
	                  return '&';
	              }
	              this._advance();
	              var /** @type {?} */ name_1 = this._input.substring(start.offset + 1, this._index - 1);
	              var /** @type {?} */ char = NAMED_ENTITIES[name_1];
	              if (!char) {
	                  throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start));
	              }
	              return char;
	          }
	      };
	      /**
	       * @param {?} decodeEntities
	       * @param {?} firstCharOfEnd
	       * @param {?} attemptEndRest
	       * @return {?}
	       */
	      _Tokenizer.prototype._consumeRawText = function (decodeEntities, firstCharOfEnd, attemptEndRest) {
	          var /** @type {?} */ tagCloseStart;
	          var /** @type {?} */ textStart = this._getLocation();
	          this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);
	          var /** @type {?} */ parts = [];
	          while (true) {
	              tagCloseStart = this._getLocation();
	              if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
	                  break;
	              }
	              if (this._index > tagCloseStart.offset) {
	                  // add the characters consumed by the previous if statement to the output
	                  parts.push(this._input.substring(tagCloseStart.offset, this._index));
	              }
	              while (this._peek !== firstCharOfEnd) {
	                  parts.push(this._readChar(decodeEntities));
	              }
	          }
	          return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);
	      };
	      /**
	       * @param {?} start
	       * @return {?}
	       */
	      _Tokenizer.prototype._consumeComment = function (start) {
	          var _this = this;
	          this._beginToken(TokenType$1.COMMENT_START, start);
	          this._requireCharCode($MINUS);
	          this._endToken([]);
	          var /** @type {?} */ textToken = this._consumeRawText(false, $MINUS, function () { return _this._attemptStr('->'); });
	          this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end);
	          this._endToken([]);
	      };
	      /**
	       * @param {?} start
	       * @return {?}
	       */
	      _Tokenizer.prototype._consumeCdata = function (start) {
	          var _this = this;
	          this._beginToken(TokenType$1.CDATA_START, start);
	          this._requireStr('CDATA[');
	          this._endToken([]);
	          var /** @type {?} */ textToken = this._consumeRawText(false, $RBRACKET, function () { return _this._attemptStr(']>'); });
	          this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end);
	          this._endToken([]);
	      };
	      /**
	       * @param {?} start
	       * @return {?}
	       */
	      _Tokenizer.prototype._consumeDocType = function (start) {
	          this._beginToken(TokenType$1.DOC_TYPE, start);
	          this._attemptUntilChar($GT);
	          this._advance();
	          this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
	      };
	      /**
	       * @return {?}
	       */
	      _Tokenizer.prototype._consumePrefixAndName = function () {
	          var /** @type {?} */ nameOrPrefixStart = this._index;
	          var /** @type {?} */ prefix = null;
	          while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {
	              this._advance();
	          }
	          var /** @type {?} */ nameStart;
	          if (this._peek === $COLON) {
	              this._advance();
	              prefix = this._input.substring(nameOrPrefixStart, this._index - 1);
	              nameStart = this._index;
	          }
	          else {
	              nameStart = nameOrPrefixStart;
	          }
	          this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
	          var /** @type {?} */ name = this._input.substring(nameStart, this._index);
	          return [prefix, name];
	      };
	      /**
	       * @param {?} start
	       * @return {?}
	       */
	      _Tokenizer.prototype._consumeTagOpen = function (start) {
	          var /** @type {?} */ savedPos = this._savePosition();
	          var /** @type {?} */ tagName;
	          var /** @type {?} */ lowercaseTagName;
	          try {
	              if (!isAsciiLetter(this._peek)) {
	                  throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
	              }
	              var /** @type {?} */ nameStart = this._index;
	              this._consumeTagOpenStart(start);
	              tagName = this._input.substring(nameStart, this._index);
	              lowercaseTagName = tagName.toLowerCase();
	              this._attemptCharCodeUntilFn(isNotWhitespace);
	              while (this._peek !== $SLASH && this._peek !== $GT) {
	                  this._consumeAttributeName();
	                  this._attemptCharCodeUntilFn(isNotWhitespace);
	                  if (this._attemptCharCode($EQ)) {
	                      this._attemptCharCodeUntilFn(isNotWhitespace);
	                      this._consumeAttributeValue();
	                  }
	                  this._attemptCharCodeUntilFn(isNotWhitespace);
	              }
	              this._consumeTagOpenEnd();
	          }
	          catch (e) {
	              if (e instanceof _ControlFlowError) {
	                  // When the start tag is invalid, assume we want a "<"
	                  this._restorePosition(savedPos);
	                  // Back to back text tokens are merged at the end
	                  this._beginToken(TokenType$1.TEXT, start);
	                  this._endToken(['<']);
	                  return;
	              }
	              throw e;
	          }
	          var /** @type {?} */ contentTokenType = this._getTagDefinition(tagName).contentType;
	          if (contentTokenType === TagContentType.RAW_TEXT) {
	              this._consumeRawTextWithTagClose(lowercaseTagName, false);
	          }
	          else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
	              this._consumeRawTextWithTagClose(lowercaseTagName, true);
	          }
	      };
	      /**
	       * @param {?} lowercaseTagName
	       * @param {?} decodeEntities
	       * @return {?}
	       */
	      _Tokenizer.prototype._consumeRawTextWithTagClose = function (lowercaseTagName, decodeEntities) {
	          var _this = this;
	          var /** @type {?} */ textToken = this._consumeRawText(decodeEntities, $LT, function () {
	              if (!_this._attemptCharCode($SLASH))
	                  return false;
	              _this._attemptCharCodeUntilFn(isNotWhitespace);
	              if (!_this._attemptStrCaseInsensitive(lowercaseTagName))
	                  return false;
	              _this._attemptCharCodeUntilFn(isNotWhitespace);
	              return _this._attemptCharCode($GT);
	          });
	          this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end);
	          this._endToken([null, lowercaseTagName]);
	      };
	      /**
	       * @param {?} start
	       * @return {?}
	       */
	      _Tokenizer.prototype._consumeTagOpenStart = function (start) {
	          this._beginToken(TokenType$1.TAG_OPEN_START, start);
	          var /** @type {?} */ parts = this._consumePrefixAndName();
	          this._endToken(parts);
	      };
	      /**
	       * @return {?}
	       */
	      _Tokenizer.prototype._consumeAttributeName = function () {
	          this._beginToken(TokenType$1.ATTR_NAME);
	          var /** @type {?} */ prefixAndName = this._consumePrefixAndName();
	          this._endToken(prefixAndName);
	      };
	      /**
	       * @return {?}
	       */
	      _Tokenizer.prototype._consumeAttributeValue = function () {
	          this._beginToken(TokenType$1.ATTR_VALUE);
	          var /** @type {?} */ value;
	          if (this._peek === $SQ || this._peek === $DQ) {
	              var /** @type {?} */ quoteChar = this._peek;
	              this._advance();
	              var /** @type {?} */ parts = [];
	              while (this._peek !== quoteChar) {
	                  parts.push(this._readChar(true));
	              }
	              value = parts.join('');
	              this._advance();
	          }
	          else {
	              var /** @type {?} */ valueStart = this._index;
	              this._requireCharCodeUntilFn(isNameEnd, 1);
	              value = this._input.substring(valueStart, this._index);
	          }
	          this._endToken([this._processCarriageReturns(value)]);
	      };
	      /**
	       * @return {?}
	       */
	      _Tokenizer.prototype._consumeTagOpenEnd = function () {
	          var /** @type {?} */ tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;
	          this._beginToken(tokenType);
	          this._requireCharCode($GT);
	          this._endToken([]);
	      };
	      /**
	       * @param {?} start
	       * @return {?}
	       */
	      _Tokenizer.prototype._consumeTagClose = function (start) {
	          this._beginToken(TokenType$1.TAG_CLOSE, start);
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	          var /** @type {?} */ prefixAndName = this._consumePrefixAndName();
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	          this._requireCharCode($GT);
	          this._endToken(prefixAndName);
	      };
	      /**
	       * @return {?}
	       */
	      _Tokenizer.prototype._consumeExpansionFormStart = function () {
	          this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation());
	          this._requireCharCode($LBRACE);
	          this._endToken([]);
	          this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START);
	          this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
	          var /** @type {?} */ condition = this._readUntil($COMMA);
	          this._endToken([condition], this._getLocation());
	          this._requireCharCode($COMMA);
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	          this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
	          var /** @type {?} */ type = this._readUntil($COMMA);
	          this._endToken([type], this._getLocation());
	          this._requireCharCode($COMMA);
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	      };
	      /**
	       * @return {?}
	       */
	      _Tokenizer.prototype._consumeExpansionCaseStart = function () {
	          this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());
	          var /** @type {?} */ value = this._readUntil($LBRACE).trim();
	          this._endToken([value], this._getLocation());
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	          this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation());
	          this._requireCharCode($LBRACE);
	          this._endToken([], this._getLocation());
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	          this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);
	      };
	      /**
	       * @return {?}
	       */
	      _Tokenizer.prototype._consumeExpansionCaseEnd = function () {
	          this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation());
	          this._requireCharCode($RBRACE);
	          this._endToken([], this._getLocation());
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	          this._expansionCaseStack.pop();
	      };
	      /**
	       * @return {?}
	       */
	      _Tokenizer.prototype._consumeExpansionFormEnd = function () {
	          this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation());
	          this._requireCharCode($RBRACE);
	          this._endToken([]);
	          this._expansionCaseStack.pop();
	      };
	      /**
	       * @return {?}
	       */
	      _Tokenizer.prototype._consumeText = function () {
	          var /** @type {?} */ start = this._getLocation();
	          this._beginToken(TokenType$1.TEXT, start);
	          var /** @type {?} */ parts = [];
	          do {
	              if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
	                  parts.push(this._interpolationConfig.start);
	                  this._inInterpolation = true;
	              }
	              else if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.end) &&
	                  this._inInterpolation) {
	                  parts.push(this._interpolationConfig.end);
	                  this._inInterpolation = false;
	              }
	              else {
	                  parts.push(this._readChar(true));
	              }
	          } while (!this._isTextEnd());
	          this._endToken([this._processCarriageReturns(parts.join(''))]);
	      };
	      /**
	       * @return {?}
	       */
	      _Tokenizer.prototype._isTextEnd = function () {
	          if (this._peek === $LT || this._peek === $EOF) {
	              return true;
	          }
	          if (this._tokenizeIcu && !this._inInterpolation) {
	              if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
	                  // start of an expansion form
	                  return true;
	              }
	              if (this._peek === $RBRACE && this._isInExpansionCase()) {
	                  // end of and expansion case
	                  return true;
	              }
	          }
	          return false;
	      };
	      /**
	       * @return {?}
	       */
	      _Tokenizer.prototype._savePosition = function () {
	          return [this._peek, this._index, this._column, this._line, this.tokens.length];
	      };
	      /**
	       * @param {?} char
	       * @return {?}
	       */
	      _Tokenizer.prototype._readUntil = function (char) {
	          var /** @type {?} */ start = this._index;
	          this._attemptUntilChar(char);
	          return this._input.substring(start, this._index);
	      };
	      /**
	       * @param {?} position
	       * @return {?}
	       */
	      _Tokenizer.prototype._restorePosition = function (position) {
	          this._peek = position[0];
	          this._index = position[1];
	          this._column = position[2];
	          this._line = position[3];
	          var /** @type {?} */ nbTokens = position[4];
	          if (nbTokens < this.tokens.length) {
	              // remove any extra tokens
	              this.tokens = this.tokens.slice(0, nbTokens);
	          }
	      };
	      /**
	       * @return {?}
	       */
	      _Tokenizer.prototype._isInExpansionCase = function () {
	          return this._expansionCaseStack.length > 0 &&
	              this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
	                  TokenType$1.EXPANSION_CASE_EXP_START;
	      };
	      /**
	       * @return {?}
	       */
	      _Tokenizer.prototype._isInExpansionForm = function () {
	          return this._expansionCaseStack.length > 0 &&
	              this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
	                  TokenType$1.EXPANSION_FORM_START;
	      };
	      return _Tokenizer;
	  }());
	  /**
	   * @param {?} code
	   * @return {?}
	   */
	  function isNotWhitespace(code) {
	      return !isWhitespace(code) || code === $EOF;
	  }
	  /**
	   * @param {?} code
	   * @return {?}
	   */
	  function isNameEnd(code) {
	      return isWhitespace(code) || code === $GT || code === $SLASH ||
	          code === $SQ || code === $DQ || code === $EQ;
	  }
	  /**
	   * @param {?} code
	   * @return {?}
	   */
	  function isPrefixEnd(code) {
	      return (code < $a || $z < code) && (code < $A || $Z < code) &&
	          (code < $0 || code > $9);
	  }
	  /**
	   * @param {?} code
	   * @return {?}
	   */
	  function isDigitEntityEnd(code) {
	      return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
	  }
	  /**
	   * @param {?} code
	   * @return {?}
	   */
	  function isNamedEntityEnd(code) {
	      return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
	  }
	  /**
	   * @param {?} input
	   * @param {?} offset
	   * @param {?} interpolationConfig
	   * @return {?}
	   */
	  function isExpansionFormStart(input, offset, interpolationConfig) {
	      var /** @type {?} */ isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;
	      return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;
	  }
	  /**
	   * @param {?} peek
	   * @return {?}
	   */
	  function isExpansionCaseStart(peek) {
	      return peek === $EQ || isAsciiLetter(peek);
	  }
	  /**
	   * @param {?} code1
	   * @param {?} code2
	   * @return {?}
	   */
	  function compareCharCodeCaseInsensitive(code1, code2) {
	      return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
	  }
	  /**
	   * @param {?} code
	   * @return {?}
	   */
	  function toUpperCaseCharCode(code) {
	      return code >= $a && code <= $z ? code - $a + $A : code;
	  }
	  /**
	   * @param {?} srcTokens
	   * @return {?}
	   */
	  function mergeTextTokens(srcTokens) {
	      var /** @type {?} */ dstTokens = [];
	      var /** @type {?} */ lastDstToken;
	      for (var /** @type {?} */ i = 0; i < srcTokens.length; i++) {
	          var /** @type {?} */ token = srcTokens[i];
	          if (lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT) {
	              lastDstToken.parts[0] += token.parts[0];
	              lastDstToken.sourceSpan.end = token.sourceSpan.end;
	          }
	          else {
	              lastDstToken = token;
	              dstTokens.push(lastDstToken);
	          }
	      }
	      return dstTokens;
	  }
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$3 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var TreeError = (function (_super) {
	      __extends$3(TreeError, _super);
	      /**
	       * @param {?} elementName
	       * @param {?} span
	       * @param {?} msg
	       */
	      function TreeError(elementName, span, msg) {
	          _super.call(this, span, msg);
	          this.elementName = elementName;
	      }
	      /**
	       * @param {?} elementName
	       * @param {?} span
	       * @param {?} msg
	       * @return {?}
	       */
	      TreeError.create = function (elementName, span, msg) {
	          return new TreeError(elementName, span, msg);
	      };
	      return TreeError;
	  }(ParseError));
	  var ParseTreeResult = (function () {
	      /**
	       * @param {?} rootNodes
	       * @param {?} errors
	       */
	      function ParseTreeResult(rootNodes, errors) {
	          this.rootNodes = rootNodes;
	          this.errors = errors;
	      }
	      return ParseTreeResult;
	  }());
	  var Parser$1 = (function () {
	      /**
	       * @param {?} getTagDefinition
	       */
	      function Parser(getTagDefinition) {
	          this.getTagDefinition = getTagDefinition;
	      }
	      /**
	       * @param {?} source
	       * @param {?} url
	       * @param {?=} parseExpansionForms
	       * @param {?=} interpolationConfig
	       * @return {?}
	       */
	      Parser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	          if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          var /** @type {?} */ tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);
	          var /** @type {?} */ treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();
	          return new ParseTreeResult(treeAndErrors.rootNodes, ((tokensAndErrors.errors)).concat(treeAndErrors.errors));
	      };
	      return Parser;
	  }());
	  var _TreeBuilder = (function () {
	      /**
	       * @param {?} tokens
	       * @param {?} getTagDefinition
	       */
	      function _TreeBuilder(tokens, getTagDefinition) {
	          this.tokens = tokens;
	          this.getTagDefinition = getTagDefinition;
	          this._index = -1;
	          this._rootNodes = [];
	          this._errors = [];
	          this._elementStack = [];
	          this._advance();
	      }
	      /**
	       * @return {?}
	       */
	      _TreeBuilder.prototype.build = function () {
	          while (this._peek.type !== TokenType$1.EOF) {
	              if (this._peek.type === TokenType$1.TAG_OPEN_START) {
	                  this._consumeStartTag(this._advance());
	              }
	              else if (this._peek.type === TokenType$1.TAG_CLOSE) {
	                  this._consumeEndTag(this._advance());
	              }
	              else if (this._peek.type === TokenType$1.CDATA_START) {
	                  this._closeVoidElement();
	                  this._consumeCdata(this._advance());
	              }
	              else if (this._peek.type === TokenType$1.COMMENT_START) {
	                  this._closeVoidElement();
	                  this._consumeComment(this._advance());
	              }
	              else if (this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT ||
	                  this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT) {
	                  this._closeVoidElement();
	                  this._consumeText(this._advance());
	              }
	              else if (this._peek.type === TokenType$1.EXPANSION_FORM_START) {
	                  this._consumeExpansion(this._advance());
	              }
	              else {
	                  // Skip all other tokens...
	                  this._advance();
	              }
	          }
	          return new ParseTreeResult(this._rootNodes, this._errors);
	      };
	      /**
	       * @return {?}
	       */
	      _TreeBuilder.prototype._advance = function () {
	          var /** @type {?} */ prev = this._peek;
	          if (this._index < this.tokens.length - 1) {
	              // Note: there is always an EOF token at the end
	              this._index++;
	          }
	          this._peek = this.tokens[this._index];
	          return prev;
	      };
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      _TreeBuilder.prototype._advanceIf = function (type) {
	          if (this._peek.type === type) {
	              return this._advance();
	          }
	          return null;
	      };
	      /**
	       * @param {?} startToken
	       * @return {?}
	       */
	      _TreeBuilder.prototype._consumeCdata = function (startToken) {
	          this._consumeText(this._advance());
	          this._advanceIf(TokenType$1.CDATA_END);
	      };
	      /**
	       * @param {?} token
	       * @return {?}
	       */
	      _TreeBuilder.prototype._consumeComment = function (token) {
	          var /** @type {?} */ text = this._advanceIf(TokenType$1.RAW_TEXT);
	          this._advanceIf(TokenType$1.COMMENT_END);
	          var /** @type {?} */ value = isPresent(text) ? text.parts[0].trim() : null;
	          this._addToParent(new Comment(value, token.sourceSpan));
	      };
	      /**
	       * @param {?} token
	       * @return {?}
	       */
	      _TreeBuilder.prototype._consumeExpansion = function (token) {
	          var /** @type {?} */ switchValue = this._advance();
	          var /** @type {?} */ type = this._advance();
	          var /** @type {?} */ cases = [];
	          // read =
	          while (this._peek.type === TokenType$1.EXPANSION_CASE_VALUE) {
	              var /** @type {?} */ expCase = this._parseExpansionCase();
	              if (!expCase)
	                  return; // error
	              cases.push(expCase);
	          }
	          // read the final }
	          if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) {
	              this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
	              return;
	          }
	          var /** @type {?} */ sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
	          this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
	          this._advance();
	      };
	      /**
	       * @return {?}
	       */
	      _TreeBuilder.prototype._parseExpansionCase = function () {
	          var /** @type {?} */ value = this._advance();
	          // read {
	          if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) {
	              this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'."));
	              return null;
	          }
	          // read until }
	          var /** @type {?} */ start = this._advance();
	          var /** @type {?} */ exp = this._collectExpansionExpTokens(start);
	          if (!exp)
	              return null;
	          var /** @type {?} */ end = this._advance();
	          exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));
	          // parse everything in between { and }
	          var /** @type {?} */ parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
	          if (parsedExp.errors.length > 0) {
	              this._errors = this._errors.concat(/** @type {?} */ (parsedExp.errors));
	              return null;
	          }
	          var /** @type {?} */ sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
	          var /** @type {?} */ expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
	          return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
	      };
	      /**
	       * @param {?} start
	       * @return {?}
	       */
	      _TreeBuilder.prototype._collectExpansionExpTokens = function (start) {
	          var /** @type {?} */ exp = [];
	          var /** @type {?} */ expansionFormStack = [TokenType$1.EXPANSION_CASE_EXP_START];
	          while (true) {
	              if (this._peek.type === TokenType$1.EXPANSION_FORM_START ||
	                  this._peek.type === TokenType$1.EXPANSION_CASE_EXP_START) {
	                  expansionFormStack.push(this._peek.type);
	              }
	              if (this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {
	                  if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) {
	                      expansionFormStack.pop();
	                      if (expansionFormStack.length == 0)
	                          return exp;
	                  }
	                  else {
	                      this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                      return null;
	                  }
	              }
	              if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {
	                  if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) {
	                      expansionFormStack.pop();
	                  }
	                  else {
	                      this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                      return null;
	                  }
	              }
	              if (this._peek.type === TokenType$1.EOF) {
	                  this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                  return null;
	              }
	              exp.push(this._advance());
	          }
	      };
	      /**
	       * @param {?} token
	       * @return {?}
	       */
	      _TreeBuilder.prototype._consumeText = function (token) {
	          var /** @type {?} */ text = token.parts[0];
	          if (text.length > 0 && text[0] == '\n') {
	              var /** @type {?} */ parent_1 = this._getParentElement();
	              if (isPresent(parent_1) && parent_1.children.length == 0 &&
	                  this.getTagDefinition(parent_1.name).ignoreFirstLf) {
	                  text = text.substring(1);
	              }
	          }
	          if (text.length > 0) {
	              this._addToParent(new Text(text, token.sourceSpan));
	          }
	      };
	      /**
	       * @return {?}
	       */
	      _TreeBuilder.prototype._closeVoidElement = function () {
	          if (this._elementStack.length > 0) {
	              var /** @type {?} */ el = this._elementStack[this._elementStack.length - 1];
	              if (this.getTagDefinition(el.name).isVoid) {
	                  this._elementStack.pop();
	              }
	          }
	      };
	      /**
	       * @param {?} startTagToken
	       * @return {?}
	       */
	      _TreeBuilder.prototype._consumeStartTag = function (startTagToken) {
	          var /** @type {?} */ prefix = startTagToken.parts[0];
	          var /** @type {?} */ name = startTagToken.parts[1];
	          var /** @type {?} */ attrs = [];
	          while (this._peek.type === TokenType$1.ATTR_NAME) {
	              attrs.push(this._consumeAttr(this._advance()));
	          }
	          var /** @type {?} */ fullName = this._getElementFullName(prefix, name, this._getParentElement());
	          var /** @type {?} */ selfClosing = false;
	          // Note: There could have been a tokenizer error
	          // so that we don't get a token for the end tag...
	          if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {
	              this._advance();
	              selfClosing = true;
	              var /** @type {?} */ tagDef = this.getTagDefinition(fullName);
	              if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
	                  this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, "Only void and foreign elements can be self closed \"" + startTagToken.parts[1] + "\""));
	              }
	          }
	          else if (this._peek.type === TokenType$1.TAG_OPEN_END) {
	              this._advance();
	              selfClosing = false;
	          }
	          var /** @type {?} */ end = this._peek.sourceSpan.start;
	          var /** @type {?} */ span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);
	          var /** @type {?} */ el = new Element(fullName, attrs, [], span, span, null);
	          this._pushElement(el);
	          if (selfClosing) {
	              this._popElement(fullName);
	              el.endSourceSpan = span;
	          }
	      };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      _TreeBuilder.prototype._pushElement = function (el) {
	          if (this._elementStack.length > 0) {
	              var /** @type {?} */ parentEl = this._elementStack[this._elementStack.length - 1];
	              if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
	                  this._elementStack.pop();
	              }
	          }
	          var /** @type {?} */ tagDef = this.getTagDefinition(el.name);
	          var _a = this._getParentElementSkippingContainers(), parent = _a.parent, container = _a.container;
	          if (isPresent(parent) && tagDef.requireExtraParent(parent.name)) {
	              var /** @type {?} */ newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
	              this._insertBeforeContainer(parent, container, newParent);
	          }
	          this._addToParent(el);
	          this._elementStack.push(el);
	      };
	      /**
	       * @param {?} endTagToken
	       * @return {?}
	       */
	      _TreeBuilder.prototype._consumeEndTag = function (endTagToken) {
	          var /** @type {?} */ fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
	          if (this._getParentElement()) {
	              this._getParentElement().endSourceSpan = endTagToken.sourceSpan;
	          }
	          if (this.getTagDefinition(fullName).isVoid) {
	              this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Void elements do not have end tags \"" + endTagToken.parts[1] + "\""));
	          }
	          else if (!this._popElement(fullName)) {
	              this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Unexpected closing tag \"" + endTagToken.parts[1] + "\""));
	          }
	      };
	      /**
	       * @param {?} fullName
	       * @return {?}
	       */
	      _TreeBuilder.prototype._popElement = function (fullName) {
	          for (var /** @type {?} */ stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
	              var /** @type {?} */ el = this._elementStack[stackIndex];
	              if (el.name == fullName) {
	                  this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);
	                  return true;
	              }
	              if (!this.getTagDefinition(el.name).closedByParent) {
	                  return false;
	              }
	          }
	          return false;
	      };
	      /**
	       * @param {?} attrName
	       * @return {?}
	       */
	      _TreeBuilder.prototype._consumeAttr = function (attrName) {
	          var /** @type {?} */ fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
	          var /** @type {?} */ end = attrName.sourceSpan.end;
	          var /** @type {?} */ value = '';
	          var /** @type {?} */ valueSpan;
	          if (this._peek.type === TokenType$1.ATTR_VALUE) {
	              var /** @type {?} */ valueToken = this._advance();
	              value = valueToken.parts[0];
	              end = valueToken.sourceSpan.end;
	              valueSpan = valueToken.sourceSpan;
	          }
	          return new Attribute$1(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);
	      };
	      /**
	       * @return {?}
	       */
	      _TreeBuilder.prototype._getParentElement = function () {
	          return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;
	      };
	      /**
	       *  Returns the parent in the DOM and the container.
	        * *
	        * `<ng-container>` elements are skipped as they are not rendered as DOM element.
	       * @return {?}
	       */
	      _TreeBuilder.prototype._getParentElementSkippingContainers = function () {
	          var /** @type {?} */ container = null;
	          for (var /** @type {?} */ i = this._elementStack.length - 1; i >= 0; i--) {
	              if (this._elementStack[i].name !== 'ng-container') {
	                  return { parent: this._elementStack[i], container: container };
	              }
	              container = this._elementStack[i];
	          }
	          return { parent: this._elementStack[this._elementStack.length - 1], container: container };
	      };
	      /**
	       * @param {?} node
	       * @return {?}
	       */
	      _TreeBuilder.prototype._addToParent = function (node) {
	          var /** @type {?} */ parent = this._getParentElement();
	          if (isPresent(parent)) {
	              parent.children.push(node);
	          }
	          else {
	              this._rootNodes.push(node);
	          }
	      };
	      /**
	       *  Insert a node between the parent and the container.
	        * When no container is given, the node is appended as a child of the parent.
	        * Also updates the element stack accordingly.
	        * *
	       * @param {?} parent
	       * @param {?} container
	       * @param {?} node
	       * @return {?}
	       */
	      _TreeBuilder.prototype._insertBeforeContainer = function (parent, container, node) {
	          if (!container) {
	              this._addToParent(node);
	              this._elementStack.push(node);
	          }
	          else {
	              if (parent) {
	                  // replace the container with the new node in the children
	                  var /** @type {?} */ index = parent.children.indexOf(container);
	                  parent.children[index] = node;
	              }
	              else {
	                  this._rootNodes.push(node);
	              }
	              node.children.push(container);
	              this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
	          }
	      };
	      /**
	       * @param {?} prefix
	       * @param {?} localName
	       * @param {?} parentElement
	       * @return {?}
	       */
	      _TreeBuilder.prototype._getElementFullName = function (prefix, localName, parentElement) {
	          if (isBlank(prefix)) {
	              prefix = this.getTagDefinition(localName).implicitNamespacePrefix;
	              if (isBlank(prefix) && isPresent(parentElement)) {
	                  prefix = getNsPrefix(parentElement.name);
	              }
	          }
	          return mergeNsAndName(prefix, localName);
	      };
	      return _TreeBuilder;
	  }());
	  /**
	   * @param {?} stack
	   * @param {?} element
	   * @return {?}
	   */
	  function lastOnStack(stack, element) {
	      return stack.length > 0 && stack[stack.length - 1] === element;
	  }
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var Message = (function () {
	      /**
	       * @param {?} nodes message AST
	       * @param {?} placeholders maps placeholder names to static content
	       * @param {?} placeholderToMessage maps placeholder names to messages (used for nested ICU messages)
	       * @param {?} meaning
	       * @param {?} description
	       */
	      function Message(nodes, placeholders, placeholderToMessage, meaning, description) {
	          this.nodes = nodes;
	          this.placeholders = placeholders;
	          this.placeholderToMessage = placeholderToMessage;
	          this.meaning = meaning;
	          this.description = description;
	      }
	      return Message;
	  }());
	  var Text$1 = (function () {
	      /**
	       * @param {?} value
	       * @param {?} sourceSpan
	       */
	      function Text(value, sourceSpan) {
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      Text.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	      return Text;
	  }());
	  // TODO(vicb): do we really need this node (vs an array) ?
	  var Container = (function () {
	      /**
	       * @param {?} children
	       * @param {?} sourceSpan
	       */
	      function Container(children, sourceSpan) {
	          this.children = children;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      Container.prototype.visit = function (visitor, context) { return visitor.visitContainer(this, context); };
	      return Container;
	  }());
	  var Icu = (function () {
	      /**
	       * @param {?} expression
	       * @param {?} type
	       * @param {?} cases
	       * @param {?} sourceSpan
	       */
	      function Icu(expression, type, cases, sourceSpan) {
	          this.expression = expression;
	          this.type = type;
	          this.cases = cases;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      Icu.prototype.visit = function (visitor, context) { return visitor.visitIcu(this, context); };
	      return Icu;
	  }());
	  var TagPlaceholder = (function () {
	      /**
	       * @param {?} tag
	       * @param {?} attrs
	       * @param {?} startName
	       * @param {?} closeName
	       * @param {?} children
	       * @param {?} isVoid
	       * @param {?} sourceSpan
	       */
	      function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
	          this.tag = tag;
	          this.attrs = attrs;
	          this.startName = startName;
	          this.closeName = closeName;
	          this.children = children;
	          this.isVoid = isVoid;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      TagPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitTagPlaceholder(this, context); };
	      return TagPlaceholder;
	  }());
	  var Placeholder = (function () {
	      /**
	       * @param {?} value
	       * @param {?} name
	       * @param {?} sourceSpan
	       */
	      function Placeholder(value, name, sourceSpan) {
	          this.value = value;
	          this.name = name;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      Placeholder.prototype.visit = function (visitor, context) { return visitor.visitPlaceholder(this, context); };
	      return Placeholder;
	  }());
	  var IcuPlaceholder = (function () {
	      /**
	       * @param {?} value
	       * @param {?} name
	       * @param {?} sourceSpan
	       */
	      function IcuPlaceholder(value, name, sourceSpan) {
	          this.value = value;
	          this.name = name;
	          this.sourceSpan = sourceSpan;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?=} context
	       * @return {?}
	       */
	      IcuPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitIcuPlaceholder(this, context); };
	      return IcuPlaceholder;
	  }());
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var /** @type {?} */ TAG_TO_PLACEHOLDER_NAMES = {
	      'A': 'LINK',
	      'B': 'BOLD_TEXT',
	      'BR': 'LINE_BREAK',
	      'EM': 'EMPHASISED_TEXT',
	      'H1': 'HEADING_LEVEL1',
	      'H2': 'HEADING_LEVEL2',
	      'H3': 'HEADING_LEVEL3',
	      'H4': 'HEADING_LEVEL4',
	      'H5': 'HEADING_LEVEL5',
	      'H6': 'HEADING_LEVEL6',
	      'HR': 'HORIZONTAL_RULE',
	      'I': 'ITALIC_TEXT',
	      'LI': 'LIST_ITEM',
	      'LINK': 'MEDIA_LINK',
	      'OL': 'ORDERED_LIST',
	      'P': 'PARAGRAPH',
	      'Q': 'QUOTATION',
	      'S': 'STRIKETHROUGH_TEXT',
	      'SMALL': 'SMALL_TEXT',
	      'SUB': 'SUBSTRIPT',
	      'SUP': 'SUPERSCRIPT',
	      'TBODY': 'TABLE_BODY',
	      'TD': 'TABLE_CELL',
	      'TFOOT': 'TABLE_FOOTER',
	      'TH': 'TABLE_HEADER_CELL',
	      'THEAD': 'TABLE_HEADER',
	      'TR': 'TABLE_ROW',
	      'TT': 'MONOSPACED_TEXT',
	      'U': 'UNDERLINED_TEXT',
	      'UL': 'UNORDERED_LIST',
	  };
	  /**
	   *  Creates unique names for placeholder with different content.
	    * *
	    * Returns the same placeholder name when the content is identical.
	    * *
	   */
	  var PlaceholderRegistry = (function () {
	      function PlaceholderRegistry() {
	          this._placeHolderNameCounts = {};
	          this._signatureToName = {};
	      }
	      /**
	       * @param {?} tag
	       * @param {?} attrs
	       * @param {?} isVoid
	       * @return {?}
	       */
	      PlaceholderRegistry.prototype.getStartTagPlaceholderName = function (tag, attrs, isVoid) {
	          var /** @type {?} */ signature = this._hashTag(tag, attrs, isVoid);
	          if (this._signatureToName[signature]) {
	              return this._signatureToName[signature];
	          }
	          var /** @type {?} */ upperTag = tag.toUpperCase();
	          var /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
	          var /** @type {?} */ name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName);
	          this._signatureToName[signature] = name;
	          return name;
	      };
	      /**
	       * @param {?} tag
	       * @return {?}
	       */
	      PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function (tag) {
	          var /** @type {?} */ signature = this._hashClosingTag(tag);
	          if (this._signatureToName[signature]) {
	              return this._signatureToName[signature];
	          }
	          var /** @type {?} */ upperTag = tag.toUpperCase();
	          var /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
	          var /** @type {?} */ name = this._generateUniqueName("CLOSE_" + baseName);
	          this._signatureToName[signature] = name;
	          return name;
	      };
	      /**
	       * @param {?} name
	       * @param {?} content
	       * @return {?}
	       */
	      PlaceholderRegistry.prototype.getPlaceholderName = function (name, content) {
	          var /** @type {?} */ upperName = name.toUpperCase();
	          var /** @type {?} */ signature = "PH: " + upperName + "=" + content;
	          if (this._signatureToName[signature]) {
	              return this._signatureToName[signature];
	          }
	          var /** @type {?} */ uniqueName = this._generateUniqueName(upperName);
	          this._signatureToName[signature] = uniqueName;
	          return uniqueName;
	      };
	      /**
	       * @param {?} name
	       * @return {?}
	       */
	      PlaceholderRegistry.prototype.getUniquePlaceholder = function (name) {
	          return this._generateUniqueName(name.toUpperCase());
	      };
	      /**
	       * @param {?} tag
	       * @param {?} attrs
	       * @param {?} isVoid
	       * @return {?}
	       */
	      PlaceholderRegistry.prototype._hashTag = function (tag, attrs, isVoid) {
	          var /** @type {?} */ start = "<" + tag;
	          var /** @type {?} */ strAttrs = Object.keys(attrs).sort().map(function (name) { return (" " + name + "=" + attrs[name]); }).join('');
	          var /** @type {?} */ end = isVoid ? '/>' : "></" + tag + ">";
	          return start + strAttrs + end;
	      };
	      /**
	       * @param {?} tag
	       * @return {?}
	       */
	      PlaceholderRegistry.prototype._hashClosingTag = function (tag) { return this._hashTag("/" + tag, {}, false); };
	      /**
	       * @param {?} base
	       * @return {?}
	       */
	      PlaceholderRegistry.prototype._generateUniqueName = function (base) {
	          var /** @type {?} */ next = this._placeHolderNameCounts[base];
	          this._placeHolderNameCounts[base] = next ? next + 1 : 1;
	          return next ? base + "_" + next : base;
	      };
	      return PlaceholderRegistry;
	  }());
	
	  var /** @type {?} */ _expParser = new Parser(new Lexer());
	  /**
	   *  Returns a function converting html nodes to an i18n Message given an interpolationConfig
	   * @param {?} interpolationConfig
	   * @return {?}
	   */
	  function createI18nMessageFactory(interpolationConfig) {
	      var /** @type {?} */ visitor = new _I18nVisitor(_expParser, interpolationConfig);
	      return function (nodes, meaning, description) {
	          return visitor.toI18nMessage(nodes, meaning, description);
	      };
	  }
	  var _I18nVisitor = (function () {
	      /**
	       * @param {?} _expressionParser
	       * @param {?} _interpolationConfig
	       */
	      function _I18nVisitor(_expressionParser, _interpolationConfig) {
	          this._expressionParser = _expressionParser;
	          this._interpolationConfig = _interpolationConfig;
	      }
	      /**
	       * @param {?} nodes
	       * @param {?} meaning
	       * @param {?} description
	       * @return {?}
	       */
	      _I18nVisitor.prototype.toI18nMessage = function (nodes, meaning, description) {
	          this._isIcu = nodes.length == 1 && nodes[0] instanceof Expansion;
	          this._icuDepth = 0;
	          this._placeholderRegistry = new PlaceholderRegistry();
	          this._placeholderToContent = {};
	          this._placeholderToMessage = {};
	          var /** @type {?} */ i18nodes = visitAll(this, nodes, {});
	          return new Message(i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description);
	      };
	      /**
	       * @param {?} el
	       * @param {?} context
	       * @return {?}
	       */
	      _I18nVisitor.prototype.visitElement = function (el, context) {
	          var /** @type {?} */ children = visitAll(this, el.children);
	          var /** @type {?} */ attrs = {};
	          el.attrs.forEach(function (attr) {
	              // Do not visit the attributes, translatable ones are top-level ASTs
	              attrs[attr.name] = attr.value;
	          });
	          var /** @type {?} */ isVoid = getHtmlTagDefinition(el.name).isVoid;
	          var /** @type {?} */ startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
	          this._placeholderToContent[startPhName] = el.sourceSpan.toString();
	          var /** @type {?} */ closePhName = '';
	          if (!isVoid) {
	              closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);
	              this._placeholderToContent[closePhName] = "</" + el.name + ">";
	          }
	          return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);
	      };
	      /**
	       * @param {?} attribute
	       * @param {?} context
	       * @return {?}
	       */
	      _I18nVisitor.prototype.visitAttribute = function (attribute, context) {
	          return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
	      };
	      /**
	       * @param {?} text
	       * @param {?} context
	       * @return {?}
	       */
	      _I18nVisitor.prototype.visitText = function (text, context) {
	          return this._visitTextWithInterpolation(text.value, text.sourceSpan);
	      };
	      /**
	       * @param {?} comment
	       * @param {?} context
	       * @return {?}
	       */
	      _I18nVisitor.prototype.visitComment = function (comment, context) { return null; };
	      /**
	       * @param {?} icu
	       * @param {?} context
	       * @return {?}
	       */
	      _I18nVisitor.prototype.visitExpansion = function (icu, context) {
	          var _this = this;
	          this._icuDepth++;
	          var /** @type {?} */ i18nIcuCases = {};
	          var /** @type {?} */ i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
	          icu.cases.forEach(function (caze) {
	              i18nIcuCases[caze.value] = new Container(caze.expression.map(function (node) { return node.visit(_this, {}); }), caze.expSourceSpan);
	          });
	          this._icuDepth--;
	          if (this._isIcu || this._icuDepth > 0) {
	              // Returns an ICU node when:
	              // - the message (vs a part of the message) is an ICU message, or
	              // - the ICU message is nested.
	              var /** @type {?} */ expPh = this._placeholderRegistry.getUniquePlaceholder("VAR_" + icu.type);
	              i18nIcu.expressionPlaceholder = expPh;
	              this._placeholderToContent[expPh] = icu.switchValue;
	              return i18nIcu;
	          }
	          // Else returns a placeholder
	          // ICU placeholders should not be replaced with their original content but with the their
	          // translations. We need to create a new visitor (they are not re-entrant) to compute the
	          // message id.
	          // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg
	          var /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());
	          var /** @type {?} */ visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);
	          this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], '', '');
	          return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
	      };
	      /**
	       * @param {?} icuCase
	       * @param {?} context
	       * @return {?}
	       */
	      _I18nVisitor.prototype.visitExpansionCase = function (icuCase, context) {
	          throw new Error('Unreachable code');
	      };
	      /**
	       * @param {?} text
	       * @param {?} sourceSpan
	       * @return {?}
	       */
	      _I18nVisitor.prototype._visitTextWithInterpolation = function (text, sourceSpan) {
	          var /** @type {?} */ splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
	          if (!splitInterpolation) {
	              // No expression, return a single text
	              return new Text$1(text, sourceSpan);
	          }
	          // Return a group of text + expressions
	          var /** @type {?} */ nodes = [];
	          var /** @type {?} */ container = new Container(nodes, sourceSpan);
	          var _a = this._interpolationConfig, sDelimiter = _a.start, eDelimiter = _a.end;
	          for (var /** @type {?} */ i = 0; i < splitInterpolation.strings.length - 1; i++) {
	              var /** @type {?} */ expression = splitInterpolation.expressions[i];
	              var /** @type {?} */ baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';
	              var /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);
	              if (splitInterpolation.strings[i].length) {
	                  // No need to add empty strings
	                  nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));
	              }
	              nodes.push(new Placeholder(expression, phName, sourceSpan));
	              this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
	          }
	          // The last index contains no expression
	          var /** @type {?} */ lastStringIdx = splitInterpolation.strings.length - 1;
	          if (splitInterpolation.strings[lastStringIdx].length) {
	              nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));
	          }
	          return container;
	      };
	      return _I18nVisitor;
	  }());
	  var /** @type {?} */ _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g;
	  /**
	   * @param {?} input
	   * @return {?}
	   */
	  function _extractPlaceholderName(input) {
	      return input.split(_CUSTOM_PH_EXP)[1];
	  }
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$5 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  /**
	   *  An i18n error.
	   */
	  var I18nError = (function (_super) {
	      __extends$5(I18nError, _super);
	      /**
	       * @param {?} span
	       * @param {?} msg
	       */
	      function I18nError(span, msg) {
	          _super.call(this, span, msg);
	      }
	      return I18nError;
	  }(ParseError));
	
	  var /** @type {?} */ _I18N_ATTR = 'i18n';
	  var /** @type {?} */ _I18N_ATTR_PREFIX = 'i18n-';
	  var /** @type {?} */ _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
	  /**
	   *  Extract translatable messages from an html AST
	   * @param {?} nodes
	   * @param {?} interpolationConfig
	   * @param {?} implicitTags
	   * @param {?} implicitAttrs
	   * @return {?}
	   */
	  function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
	      var /** @type {?} */ visitor = new _Visitor(implicitTags, implicitAttrs);
	      return visitor.extract(nodes, interpolationConfig);
	  }
	  /**
	   * @param {?} nodes
	   * @param {?} translations
	   * @param {?} interpolationConfig
	   * @param {?} implicitTags
	   * @param {?} implicitAttrs
	   * @return {?}
	   */
	  function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
	      var /** @type {?} */ visitor = new _Visitor(implicitTags, implicitAttrs);
	      return visitor.merge(nodes, translations, interpolationConfig);
	  }
	  var ExtractionResult = (function () {
	      /**
	       * @param {?} messages
	       * @param {?} errors
	       */
	      function ExtractionResult(messages, errors) {
	          this.messages = messages;
	          this.errors = errors;
	      }
	      return ExtractionResult;
	  }());
	  var _VisitorMode = {};
	  _VisitorMode.Extract = 0;
	  _VisitorMode.Merge = 1;
	  _VisitorMode[_VisitorMode.Extract] = "Extract";
	  _VisitorMode[_VisitorMode.Merge] = "Merge";
	  /**
	   *  This Visitor is used:
	    * 1. to extract all the translatable strings from an html AST (see `extract()`),
	    * 2. to replace the translatable strings with the actual translations (see `merge()`)
	    * *
	   */
	  var _Visitor = (function () {
	      /**
	       * @param {?} _implicitTags
	       * @param {?} _implicitAttrs
	       */
	      function _Visitor(_implicitTags, _implicitAttrs) {
	          this._implicitTags = _implicitTags;
	          this._implicitAttrs = _implicitAttrs;
	      }
	      /**
	       *  Extracts the messages from the tree
	       * @param {?} nodes
	       * @param {?} interpolationConfig
	       * @return {?}
	       */
	      _Visitor.prototype.extract = function (nodes, interpolationConfig) {
	          var _this = this;
	          this._init(_VisitorMode.Extract, interpolationConfig);
	          nodes.forEach(function (node) { return node.visit(_this, null); });
	          if (this._inI18nBlock) {
	              this._reportError(nodes[nodes.length - 1], 'Unclosed block');
	          }
	          return new ExtractionResult(this._messages, this._errors);
	      };
	      /**
	       *  Returns a tree where all translatable nodes are translated
	       * @param {?} nodes
	       * @param {?} translations
	       * @param {?} interpolationConfig
	       * @return {?}
	       */
	      _Visitor.prototype.merge = function (nodes, translations, interpolationConfig) {
	          this._init(_VisitorMode.Merge, interpolationConfig);
	          this._translations = translations;
	          // Construct a single fake root element
	          var /** @type {?} */ wrapper = new Element('wrapper', [], nodes, null, null, null);
	          var /** @type {?} */ translatedNode = wrapper.visit(this, null);
	          if (this._inI18nBlock) {
	              this._reportError(nodes[nodes.length - 1], 'Unclosed block');
	          }
	          return new ParseTreeResult(translatedNode.children, this._errors);
	      };
	      /**
	       * @param {?} icuCase
	       * @param {?} context
	       * @return {?}
	       */
	      _Visitor.prototype.visitExpansionCase = function (icuCase, context) {
	          // Parse cases for translatable html attributes
	          var /** @type {?} */ expression = visitAll(this, icuCase.expression, context);
	          if (this._mode === _VisitorMode.Merge) {
	              return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
	          }
	      };
	      /**
	       * @param {?} icu
	       * @param {?} context
	       * @return {?}
	       */
	      _Visitor.prototype.visitExpansion = function (icu, context) {
	          this._mayBeAddBlockChildren(icu);
	          var /** @type {?} */ wasInIcu = this._inIcu;
	          if (!this._inIcu) {
	              // nested ICU messages should not be extracted but top-level translated as a whole
	              if (this._isInTranslatableSection) {
	                  this._addMessage([icu]);
	              }
	              this._inIcu = true;
	          }
	          var /** @type {?} */ cases = visitAll(this, icu.cases, context);
	          if (this._mode === _VisitorMode.Merge) {
	              icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
	          }
	          this._inIcu = wasInIcu;
	          return icu;
	      };
	      /**
	       * @param {?} comment
	       * @param {?} context
	       * @return {?}
	       */
	      _Visitor.prototype.visitComment = function (comment, context) {
	          var /** @type {?} */ isOpening = _isOpeningComment(comment);
	          if (isOpening && this._isInTranslatableSection) {
	              this._reportError(comment, 'Could not start a block inside a translatable section');
	              return;
	          }
	          var /** @type {?} */ isClosing = _isClosingComment(comment);
	          if (isClosing && !this._inI18nBlock) {
	              this._reportError(comment, 'Trying to close an unopened block');
	              return;
	          }
	          if (!this._inI18nNode && !this._inIcu) {
	              if (!this._inI18nBlock) {
	                  if (isOpening) {
	                      this._inI18nBlock = true;
	                      this._blockStartDepth = this._depth;
	                      this._blockChildren = [];
	                      this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();
	                      this._openTranslatableSection(comment);
	                  }
	              }
	              else {
	                  if (isClosing) {
	                      if (this._depth == this._blockStartDepth) {
	                          this._closeTranslatableSection(comment, this._blockChildren);
	                          this._inI18nBlock = false;
	                          var /** @type {?} */ message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);
	                          // merge attributes in sections
	                          var /** @type {?} */ nodes = this._translateMessage(comment, message);
	                          return visitAll(this, nodes);
	                      }
	                      else {
	                          this._reportError(comment, 'I18N blocks should not cross element boundaries');
	                          return;
	                      }
	                  }
	              }
	          }
	      };
	      /**
	       * @param {?} text
	       * @param {?} context
	       * @return {?}
	       */
	      _Visitor.prototype.visitText = function (text, context) {
	          if (this._isInTranslatableSection) {
	              this._mayBeAddBlockChildren(text);
	          }
	          return text;
	      };
	      /**
	       * @param {?} el
	       * @param {?} context
	       * @return {?}
	       */
	      _Visitor.prototype.visitElement = function (el, context) {
	          var _this = this;
	          this._mayBeAddBlockChildren(el);
	          this._depth++;
	          var /** @type {?} */ wasInI18nNode = this._inI18nNode;
	          var /** @type {?} */ wasInImplicitNode = this._inImplicitNode;
	          var /** @type {?} */ childNodes;
	          // Extract only top level nodes with the (implicit) "i18n" attribute if not in a block or an ICU
	          // message
	          var /** @type {?} */ i18nAttr = _getI18nAttr(el);
	          var /** @type {?} */ isImplicit = this._implicitTags.some(function (tag) { return el.name === tag; }) && !this._inIcu &&
	              !this._isInTranslatableSection;
	          var /** @type {?} */ isTopLevelImplicit = !wasInImplicitNode && isImplicit;
	          this._inImplicitNode = this._inImplicitNode || isImplicit;
	          if (!this._isInTranslatableSection && !this._inIcu) {
	              if (i18nAttr) {
	                  // explicit translation
	                  this._inI18nNode = true;
	                  var /** @type {?} */ message = this._addMessage(el.children, i18nAttr.value);
	                  childNodes = this._translateMessage(el, message);
	              }
	              else if (isTopLevelImplicit) {
	                  // implicit translation
	                  this._inI18nNode = true;
	                  var /** @type {?} */ message = this._addMessage(el.children);
	                  childNodes = this._translateMessage(el, message);
	              }
	              if (this._mode == _VisitorMode.Extract) {
	                  var /** @type {?} */ isTranslatable = i18nAttr || isTopLevelImplicit;
	                  if (isTranslatable) {
	                      this._openTranslatableSection(el);
	                  }
	                  visitAll(this, el.children);
	                  if (isTranslatable) {
	                      this._closeTranslatableSection(el, el.children);
	                  }
	              }
	              if (this._mode === _VisitorMode.Merge && !i18nAttr && !isTopLevelImplicit) {
	                  childNodes = [];
	                  el.children.forEach(function (child) {
	                      var /** @type {?} */ visited = child.visit(_this, context);
	                      if (visited && !_this._isInTranslatableSection) {
	                          // Do not add the children from translatable sections (= i18n blocks here)
	                          // They will be added when the section is close (i.e. on `<!-- /i18n -->`)
	                          childNodes = childNodes.concat(visited);
	                      }
	                  });
	              }
	          }
	          else {
	              if (i18nAttr || isTopLevelImplicit) {
	                  this._reportError(el, 'Could not mark an element as translatable inside a translatable section');
	              }
	              if (this._mode == _VisitorMode.Extract) {
	                  // Descend into child nodes for extraction
	                  visitAll(this, el.children);
	              }
	              if (this._mode == _VisitorMode.Merge) {
	                  // Translate attributes in ICU messages
	                  childNodes = [];
	                  el.children.forEach(function (child) {
	                      var /** @type {?} */ visited = child.visit(_this, context);
	                      if (visited && !_this._isInTranslatableSection) {
	                          // Do not add the children from translatable sections (= i18n blocks here)
	                          // They will be added when the section is close (i.e. on `<!-- /i18n -->`)
	                          childNodes = childNodes.concat(visited);
	                      }
	                  });
	              }
	          }
	          this._visitAttributesOf(el);
	          this._depth--;
	          this._inI18nNode = wasInI18nNode;
	          this._inImplicitNode = wasInImplicitNode;
	          if (this._mode === _VisitorMode.Merge) {
	              // There are no childNodes in translatable sections - those nodes will be replace anyway
	              var /** @type {?} */ translatedAttrs = this._translateAttributes(el);
	              return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
	          }
	      };
	      /**
	       * @param {?} attribute
	       * @param {?} context
	       * @return {?}
	       */
	      _Visitor.prototype.visitAttribute = function (attribute, context) {
	          throw new Error('unreachable code');
	      };
	      /**
	       * @param {?} mode
	       * @param {?} interpolationConfig
	       * @return {?}
	       */
	      _Visitor.prototype._init = function (mode, interpolationConfig) {
	          this._mode = mode;
	          this._inI18nBlock = false;
	          this._inI18nNode = false;
	          this._depth = 0;
	          this._inIcu = false;
	          this._msgCountAtSectionStart = void 0;
	          this._errors = [];
	          this._messages = [];
	          this._inImplicitNode = false;
	          this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
	      };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      _Visitor.prototype._visitAttributesOf = function (el) {
	          var _this = this;
	          var /** @type {?} */ explicitAttrNameToValue = {};
	          var /** @type {?} */ implicitAttrNames = this._implicitAttrs[el.name] || [];
	          el.attrs.filter(function (attr) { return attr.name.startsWith(_I18N_ATTR_PREFIX); })
	              .forEach(function (attr) { return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] =
	              attr.value; });
	          el.attrs.forEach(function (attr) {
	              if (attr.name in explicitAttrNameToValue) {
	                  _this._addMessage([attr], explicitAttrNameToValue[attr.name]);
	              }
	              else if (implicitAttrNames.some(function (name) { return attr.name === name; })) {
	                  _this._addMessage([attr]);
	              }
	          });
	      };
	      /**
	       * @param {?} ast
	       * @param {?=} meaningAndDesc
	       * @return {?}
	       */
	      _Visitor.prototype._addMessage = function (ast, meaningAndDesc) {
	          if (ast.length == 0 ||
	              ast.length == 1 && ast[0] instanceof Attribute$1 && !((ast[0])).value) {
	              // Do not create empty messages
	              return;
	          }
	          var _a = _splitMeaningAndDesc(meaningAndDesc), meaning = _a[0], description = _a[1];
	          var /** @type {?} */ message = this._createI18nMessage(ast, meaning, description);
	          this._messages.push(message);
	          return message;
	      };
	      /**
	       * @param {?} el
	       * @param {?} message
	       * @return {?}
	       */
	      _Visitor.prototype._translateMessage = function (el, message) {
	          if (message && this._mode === _VisitorMode.Merge) {
	              var /** @type {?} */ nodes = this._translations.get(message);
	              if (nodes) {
	                  return nodes;
	              }
	              this._reportError(el, "Translation unavailable for message id=\"" + this._translations.digest(message) + "\"");
	          }
	          return [];
	      };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      _Visitor.prototype._translateAttributes = function (el) {
	          var _this = this;
	          var /** @type {?} */ attributes = el.attrs;
	          var /** @type {?} */ i18nAttributeMeanings = {};
	          attributes.forEach(function (attr) {
	              if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
	                  i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)] =
	                      _splitMeaningAndDesc(attr.value)[0];
	              }
	          });
	          var /** @type {?} */ translatedAttributes = [];
	          attributes.forEach(function (attr) {
	              if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
	                  // strip i18n specific attributes
	                  return;
	              }
	              if (attr.value && attr.value != '' && i18nAttributeMeanings.hasOwnProperty(attr.name)) {
	                  var /** @type {?} */ meaning = i18nAttributeMeanings[attr.name];
	                  var /** @type {?} */ message = _this._createI18nMessage([attr], meaning, '');
	                  var /** @type {?} */ nodes = _this._translations.get(message);
	                  if (nodes) {
	                      if (nodes[0] instanceof Text) {
	                          var /** @type {?} */ value = ((nodes[0])).value;
	                          translatedAttributes.push(new Attribute$1(attr.name, value, attr.sourceSpan));
	                      }
	                      else {
	                          _this._reportError(el, "Unexpected translation for attribute \"" + attr.name + "\" (id=\"" + _this._translations.digest(message) + "\")");
	                      }
	                  }
	                  else {
	                      _this._reportError(el, "Translation unavailable for attribute \"" + attr.name + "\" (id=\"" + _this._translations.digest(message) + "\")");
	                  }
	              }
	              else {
	                  translatedAttributes.push(attr);
	              }
	          });
	          return translatedAttributes;
	      };
	      /**
	       *  Add the node as a child of the block when:
	        * - we are in a block,
	        * - we are not inside a ICU message (those are handled separately),
	        * - the node is a "direct child" of the block
	       * @param {?} node
	       * @return {?}
	       */
	      _Visitor.prototype._mayBeAddBlockChildren = function (node) {
	          if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
	              this._blockChildren.push(node);
	          }
	      };
	      /**
	       *  Marks the start of a section, see `_endSection`
	       * @param {?} node
	       * @return {?}
	       */
	      _Visitor.prototype._openTranslatableSection = function (node) {
	          if (this._isInTranslatableSection) {
	              this._reportError(node, 'Unexpected section start');
	          }
	          else {
	              this._msgCountAtSectionStart = this._messages.length;
	          }
	      };
	      Object.defineProperty(_Visitor.prototype, "_isInTranslatableSection", {
	          /**
	           *  A translatable section could be:
	            * - a translatable element,
	            * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments
	           * @return {?}
	           */
	          get: function () {
	              return this._msgCountAtSectionStart !== void 0;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      /**
	       *  Terminates a section.
	        * *
	        * If a section has only one significant children (comments not significant) then we should not
	        * keep the message from this children:
	        * *
	        * `<p i18n="meaning|description">{ICU message}</p>` would produce two messages:
	        * - one for the <p> content with meaning and description,
	        * - another one for the ICU message.
	        * *
	        * In this case the last message is discarded as it contains less information (the AST is
	        * otherwise identical).
	        * *
	        * Note that we should still keep messages extracted from attributes inside the section (ie in the
	        * ICU message here)
	       * @param {?} node
	       * @param {?} directChildren
	       * @return {?}
	       */
	      _Visitor.prototype._closeTranslatableSection = function (node, directChildren) {
	          if (!this._isInTranslatableSection) {
	              this._reportError(node, 'Unexpected section end');
	              return;
	          }
	          var /** @type {?} */ startIndex = this._msgCountAtSectionStart;
	          var /** @type {?} */ significantChildren = directChildren.reduce(function (count, node) { return count + (node instanceof Comment ? 0 : 1); }, 0);
	          if (significantChildren == 1) {
	              for (var /** @type {?} */ i = this._messages.length - 1; i >= startIndex; i--) {
	                  var /** @type {?} */ ast = this._messages[i].nodes;
	                  if (!(ast.length == 1 && ast[0] instanceof Text$1)) {
	                      this._messages.splice(i, 1);
	                      break;
	                  }
	              }
	          }
	          this._msgCountAtSectionStart = void 0;
	      };
	      /**
	       * @param {?} node
	       * @param {?} msg
	       * @return {?}
	       */
	      _Visitor.prototype._reportError = function (node, msg) {
	          this._errors.push(new I18nError(node.sourceSpan, msg));
	      };
	      return _Visitor;
	  }());
	  /**
	   * @param {?} n
	   * @return {?}
	   */
	  function _isOpeningComment(n) {
	      return n instanceof Comment && n.value && n.value.startsWith('i18n');
	  }
	  /**
	   * @param {?} n
	   * @return {?}
	   */
	  function _isClosingComment(n) {
	      return n instanceof Comment && n.value && n.value === '/i18n';
	  }
	  /**
	   * @param {?} p
	   * @return {?}
	   */
	  function _getI18nAttr(p) {
	      return p.attrs.find(function (attr) { return attr.name === _I18N_ATTR; }) || null;
	  }
	  /**
	   * @param {?} i18n
	   * @return {?}
	   */
	  function _splitMeaningAndDesc(i18n) {
	      if (!i18n)
	          return ['', ''];
	      var /** @type {?} */ pipeIndex = i18n.indexOf('|');
	      return pipeIndex == -1 ? ['', i18n] : [i18n.slice(0, pipeIndex), i18n.slice(pipeIndex + 1)];
	  }
	
	  var XmlTagDefinition = (function () {
	      function XmlTagDefinition() {
	          this.closedByParent = false;
	          this.contentType = TagContentType.PARSABLE_DATA;
	          this.isVoid = false;
	          this.ignoreFirstLf = false;
	          this.canSelfClose = true;
	      }
	      /**
	       * @param {?} currentParent
	       * @return {?}
	       */
	      XmlTagDefinition.prototype.requireExtraParent = function (currentParent) { return false; };
	      /**
	       * @param {?} name
	       * @return {?}
	       */
	      XmlTagDefinition.prototype.isClosedByChild = function (name) { return false; };
	      return XmlTagDefinition;
	  }());
	  var /** @type {?} */ _TAG_DEFINITION = new XmlTagDefinition();
	  /**
	   * @param {?} tagName
	   * @return {?}
	   */
	  function getXmlTagDefinition(tagName) {
	      return _TAG_DEFINITION;
	  }
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$6 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var XmlParser = (function (_super) {
	      __extends$6(XmlParser, _super);
	      function XmlParser() {
	          _super.call(this, getXmlTagDefinition);
	      }
	      /**
	       * @param {?} source
	       * @param {?} url
	       * @param {?=} parseExpansionForms
	       * @return {?}
	       */
	      XmlParser.prototype.parse = function (source, url, parseExpansionForms) {
	          if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	          return _super.prototype.parse.call(this, source, url, parseExpansionForms, null);
	      };
	      return XmlParser;
	  }(Parser$1));
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$7 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  /**
	   * @param {?} message
	   * @return {?}
	   */
	  function digest(message) {
	      return sha1(serializeNodes(message.nodes).join('') + ("[" + message.meaning + "]"));
	  }
	  /**
	   * @param {?} message
	   * @return {?}
	   */
	  function decimalDigest(message) {
	      var /** @type {?} */ visitor = new _SerializerIgnoreIcuExpVisitor();
	      var /** @type {?} */ parts = message.nodes.map(function (a) { return a.visit(visitor, null); });
	      return computeMsgId(parts.join(''), message.meaning);
	  }
	  /**
	   *  Serialize the i18n ast to something xml-like in order to generate an UID.
	    * *
	    * The visitor is also used in the i18n parser tests
	    * *
	   */
	  var _SerializerVisitor = (function () {
	      function _SerializerVisitor() {
	      }
	      /**
	       * @param {?} text
	       * @param {?} context
	       * @return {?}
	       */
	      _SerializerVisitor.prototype.visitText = function (text, context) { return text.value; };
	      /**
	       * @param {?} container
	       * @param {?} context
	       * @return {?}
	       */
	      _SerializerVisitor.prototype.visitContainer = function (container, context) {
	          var _this = this;
	          return "[" + container.children.map(function (child) { return child.visit(_this); }).join(', ') + "]";
	      };
	      /**
	       * @param {?} icu
	       * @param {?} context
	       * @return {?}
	       */
	      _SerializerVisitor.prototype.visitIcu = function (icu, context) {
	          var _this = this;
	          var /** @type {?} */ strCases = Object.keys(icu.cases).map(function (k) { return (k + " {" + icu.cases[k].visit(_this) + "}"); });
	          return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(', ') + "}";
	      };
	      /**
	       * @param {?} ph
	       * @param {?} context
	       * @return {?}
	       */
	      _SerializerVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	          var _this = this;
	          return ph.isVoid ?
	              "<ph tag name=\"" + ph.startName + "\"/>" :
	              "<ph tag name=\"" + ph.startName + "\">" + ph.children.map(function (child) { return child.visit(_this); }).join(', ') + "</ph name=\"" + ph.closeName + "\">";
	      };
	      /**
	       * @param {?} ph
	       * @param {?} context
	       * @return {?}
	       */
	      _SerializerVisitor.prototype.visitPlaceholder = function (ph, context) {
	          return ph.value ? "<ph name=\"" + ph.name + "\">" + ph.value + "</ph>" : "<ph name=\"" + ph.name + "\"/>";
	      };
	      /**
	       * @param {?} ph
	       * @param {?=} context
	       * @return {?}
	       */
	      _SerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	          return "<ph icu name=\"" + ph.name + "\">" + ph.value.visit(this) + "</ph>";
	      };
	      return _SerializerVisitor;
	  }());
	  var /** @type {?} */ serializerVisitor = new _SerializerVisitor();
	  /**
	   * @param {?} nodes
	   * @return {?}
	   */
	  function serializeNodes(nodes) {
	      return nodes.map(function (a) { return a.visit(serializerVisitor, null); });
	  }
	  /**
	   *  Serialize the i18n ast to something xml-like in order to generate an UID.
	    * *
	    * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.
	    * *
	   */
	  var _SerializerIgnoreIcuExpVisitor = (function (_super) {
	      __extends$7(_SerializerIgnoreIcuExpVisitor, _super);
	      function _SerializerIgnoreIcuExpVisitor() {
	          _super.apply(this, arguments);
	      }
	      /**
	       * @param {?} icu
	       * @param {?} context
	       * @return {?}
	       */
	      _SerializerIgnoreIcuExpVisitor.prototype.visitIcu = function (icu, context) {
	          var _this = this;
	          var /** @type {?} */ strCases = Object.keys(icu.cases).map(function (k) { return (k + " {" + icu.cases[k].visit(_this) + "}"); });
	          // Do not take the expression into account
	          return "{" + icu.type + ", " + strCases.join(', ') + "}";
	      };
	      return _SerializerIgnoreIcuExpVisitor;
	  }(_SerializerVisitor));
	  /**
	   *  Compute the SHA1 of the given string
	    * *
	    * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
	    * *
	    * WARNING: this function has not been designed not tested with security in mind.
	    * DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.
	   * @param {?} str
	   * @return {?}
	   */
	  function sha1(str) {
	      var /** @type {?} */ utf8 = utf8Encode(str);
	      var /** @type {?} */ words32 = stringToWords32(utf8, Endian.Big);
	      var /** @type {?} */ len = utf8.length * 8;
	      var /** @type {?} */ w = new Array(80);
	      var _a = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0], a = _a[0], b = _a[1], c = _a[2], d = _a[3], e = _a[4];
	      words32[len >> 5] |= 0x80 << (24 - len % 32);
	      words32[((len + 64 >> 9) << 4) + 15] = len;
	      for (var /** @type {?} */ i = 0; i < words32.length; i += 16) {
	          var _b = [a, b, c, d, e], h0 = _b[0], h1 = _b[1], h2 = _b[2], h3 = _b[3], h4 = _b[4];
	          for (var /** @type {?} */ j = 0; j < 80; j++) {
	              if (j < 16) {
	                  w[j] = words32[i + j];
	              }
	              else {
	                  w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
	              }
	              var _c = fk(j, b, c, d), f = _c[0], k = _c[1];
	              var /** @type {?} */ temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
	              _d = [d, c, rol32(b, 30), a, temp], e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4];
	          }
	          _e = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4];
	      }
	      return byteStringToHexString(words32ToByteString([a, b, c, d, e]));
	      var _d, _e;
	  }
	  /**
	   * @param {?} index
	   * @param {?} b
	   * @param {?} c
	   * @param {?} d
	   * @return {?}
	   */
	  function fk(index, b, c, d) {
	      if (index < 20) {
	          return [(b & c) | (~b & d), 0x5a827999];
	      }
	      if (index < 40) {
	          return [b ^ c ^ d, 0x6ed9eba1];
	      }
	      if (index < 60) {
	          return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];
	      }
	      return [b ^ c ^ d, 0xca62c1d6];
	  }
	  /**
	   *  Compute the fingerprint of the given string
	    * *
	    * The output is 64 bit number encoded as a decimal string
	    * *
	    * based on:
	    * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java
	   * @param {?} str
	   * @return {?}
	   */
	  function fingerprint(str) {
	      var /** @type {?} */ utf8 = utf8Encode(str);
	      var _a = [hash32(utf8, 0), hash32(utf8, 102072)], hi = _a[0], lo = _a[1];
	      if (hi == 0 && (lo == 0 || lo == 1)) {
	          hi = hi ^ 0x130f9bef;
	          lo = lo ^ -0x6b5f56d8;
	      }
	      return [hi, lo];
	  }
	  /**
	   * @param {?} msg
	   * @param {?} meaning
	   * @return {?}
	   */
	  function computeMsgId(msg, meaning) {
	      var _a = fingerprint(msg), hi = _a[0], lo = _a[1];
	      if (meaning) {
	          var _b = fingerprint(meaning), him = _b[0], lom = _b[1];
	          _c = add64(rol64([hi, lo], 1), [him, lom]), hi = _c[0], lo = _c[1];
	      }
	      return byteStringToDecString(words32ToByteString([hi & 0x7fffffff, lo]));
	      var _c;
	  }
	  /**
	   * @param {?} str
	   * @param {?} c
	   * @return {?}
	   */
	  function hash32(str, c) {
	      var _a = [0x9e3779b9, 0x9e3779b9], a = _a[0], b = _a[1];
	      var /** @type {?} */ i;
	      var /** @type {?} */ len = str.length;
	      for (i = 0; i + 12 <= len; i += 12) {
	          a = add32(a, wordAt(str, i, Endian.Little));
	          b = add32(b, wordAt(str, i + 4, Endian.Little));
	          c = add32(c, wordAt(str, i + 8, Endian.Little));
	          _b = mix([a, b, c]), a = _b[0], b = _b[1], c = _b[2];
	      }
	      a = add32(a, wordAt(str, i, Endian.Little));
	      b = add32(b, wordAt(str, i + 4, Endian.Little));
	      // the first byte of c is reserved for the length
	      c = add32(c, len);
	      c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);
	      return mix([a, b, c])[2];
	      var _b;
	  }
	  /**
	   * @param {?} __0
	   * @return {?}
	   */
	  function mix(_a) {
	      var a = _a[0], b = _a[1], c = _a[2];
	      a = sub32(a, b);
	      a = sub32(a, c);
	      a ^= c >>> 13;
	      b = sub32(b, c);
	      b = sub32(b, a);
	      b ^= a << 8;
	      c = sub32(c, a);
	      c = sub32(c, b);
	      c ^= b >>> 13;
	      a = sub32(a, b);
	      a = sub32(a, c);
	      a ^= c >>> 12;
	      b = sub32(b, c);
	      b = sub32(b, a);
	      b ^= a << 16;
	      c = sub32(c, a);
	      c = sub32(c, b);
	      c ^= b >>> 5;
	      a = sub32(a, b);
	      a = sub32(a, c);
	      a ^= c >>> 3;
	      b = sub32(b, c);
	      b = sub32(b, a);
	      b ^= a << 10;
	      c = sub32(c, a);
	      c = sub32(c, b);
	      c ^= b >>> 15;
	      return [a, b, c];
	  }
	  var Endian = {};
	  Endian.Little = 0;
	  Endian.Big = 1;
	  Endian[Endian.Little] = "Little";
	  Endian[Endian.Big] = "Big";
	  /**
	   * @param {?} str
	   * @return {?}
	   */
	  function utf8Encode(str) {
	      var /** @type {?} */ encoded = '';
	      for (var /** @type {?} */ index = 0; index < str.length; index++) {
	          var /** @type {?} */ codePoint = decodeSurrogatePairs(str, index);
	          if (codePoint <= 0x7f) {
	              encoded += String.fromCharCode(codePoint);
	          }
	          else if (codePoint <= 0x7ff) {
	              encoded += String.fromCharCode(0xc0 | codePoint >>> 6, 0x80 | codePoint & 0x3f);
	          }
	          else if (codePoint <= 0xffff) {
	              encoded += String.fromCharCode(0xe0 | codePoint >>> 12, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
	          }
	          else if (codePoint <= 0x1fffff) {
	              encoded += String.fromCharCode(0xf0 | codePoint >>> 18, 0x80 | codePoint >>> 12 & 0x3f, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
	          }
	      }
	      return encoded;
	  }
	  /**
	   * @param {?} str
	   * @param {?} index
	   * @return {?}
	   */
	  function decodeSurrogatePairs(str, index) {
	      if (index < 0 || index >= str.length) {
	          throw new Error("index=" + index + " is out of range in \"" + str + "\"");
	      }
	      var /** @type {?} */ high = str.charCodeAt(index);
	      if (high >= 0xd800 && high <= 0xdfff && str.length > index + 1) {
	          var /** @type {?} */ low = byteAt(str, index + 1);
	          if (low >= 0xdc00 && low <= 0xdfff) {
	              return (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;
	          }
	      }
	      return high;
	  }
	  /**
	   * @param {?} a
	   * @param {?} b
	   * @return {?}
	   */
	  function add32(a, b) {
	      return add32to64(a, b)[1];
	  }
	  /**
	   * @param {?} a
	   * @param {?} b
	   * @return {?}
	   */
	  function add32to64(a, b) {
	      var /** @type {?} */ low = (a & 0xffff) + (b & 0xffff);
	      var /** @type {?} */ high = (a >>> 16) + (b >>> 16) + (low >>> 16);
	      return [high >>> 16, (high << 16) | (low & 0xffff)];
	  }
	  /**
	   * @param {?} __0
	   * @param {?} __1
	   * @return {?}
	   */
	  function add64(_a, _b) {
	      var ah = _a[0], al = _a[1];
	      var bh = _b[0], bl = _b[1];
	      var _c = add32to64(al, bl), carry = _c[0], l = _c[1];
	      var /** @type {?} */ h = add32(add32(ah, bh), carry);
	      return [h, l];
	  }
	  /**
	   * @param {?} a
	   * @param {?} b
	   * @return {?}
	   */
	  function sub32(a, b) {
	      var /** @type {?} */ low = (a & 0xffff) - (b & 0xffff);
	      var /** @type {?} */ high = (a >> 16) - (b >> 16) + (low >> 16);
	      return (high << 16) | (low & 0xffff);
	  }
	  /**
	   * @param {?} a
	   * @param {?} count
	   * @return {?}
	   */
	  function rol32(a, count) {
	      return (a << count) | (a >>> (32 - count));
	  }
	  /**
	   * @param {?} __0
	   * @param {?} count
	   * @return {?}
	   */
	  function rol64(_a, count) {
	      var hi = _a[0], lo = _a[1];
	      var /** @type {?} */ h = (hi << count) | (lo >>> (32 - count));
	      var /** @type {?} */ l = (lo << count) | (hi >>> (32 - count));
	      return [h, l];
	  }
	  /**
	   * @param {?} str
	   * @param {?} endian
	   * @return {?}
	   */
	  function stringToWords32(str, endian) {
	      var /** @type {?} */ words32 = Array((str.length + 3) >>> 2);
	      for (var /** @type {?} */ i = 0; i < words32.length; i++) {
	          words32[i] = wordAt(str, i * 4, endian);
	      }
	      return words32;
	  }
	  /**
	   * @param {?} str
	   * @param {?} index
	   * @return {?}
	   */
	  function byteAt(str, index) {
	      return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;
	  }
	  /**
	   * @param {?} str
	   * @param {?} index
	   * @param {?} endian
	   * @return {?}
	   */
	  function wordAt(str, index, endian) {
	      var /** @type {?} */ word = 0;
	      if (endian === Endian.Big) {
	          for (var /** @type {?} */ i = 0; i < 4; i++) {
	              word += byteAt(str, index + i) << (24 - 8 * i);
	          }
	      }
	      else {
	          for (var /** @type {?} */ i = 0; i < 4; i++) {
	              word += byteAt(str, index + i) << 8 * i;
	          }
	      }
	      return word;
	  }
	  /**
	   * @param {?} words32
	   * @return {?}
	   */
	  function words32ToByteString(words32) {
	      return words32.reduce(function (str, word) { return str + word32ToByteString(word); }, '');
	  }
	  /**
	   * @param {?} word
	   * @return {?}
	   */
	  function word32ToByteString(word) {
	      var /** @type {?} */ str = '';
	      for (var /** @type {?} */ i = 0; i < 4; i++) {
	          str += String.fromCharCode((word >>> 8 * (3 - i)) & 0xff);
	      }
	      return str;
	  }
	  /**
	   * @param {?} str
	   * @return {?}
	   */
	  function byteStringToHexString(str) {
	      var /** @type {?} */ hex = '';
	      for (var /** @type {?} */ i = 0; i < str.length; i++) {
	          var /** @type {?} */ b = byteAt(str, i);
	          hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);
	      }
	      return hex.toLowerCase();
	  }
	  /**
	   * @param {?} str
	   * @return {?}
	   */
	  function byteStringToDecString(str) {
	      var /** @type {?} */ decimal = '';
	      var /** @type {?} */ toThePower = '1';
	      for (var /** @type {?} */ i = str.length - 1; i >= 0; i--) {
	          decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));
	          toThePower = numberTimesBigInt(256, toThePower);
	      }
	      return decimal.split('').reverse().join('');
	  }
	  /**
	   * @param {?} x
	   * @param {?} y
	   * @return {?}
	   */
	  function addBigInt(x, y) {
	      var /** @type {?} */ sum = '';
	      var /** @type {?} */ len = Math.max(x.length, y.length);
	      for (var /** @type {?} */ i = 0, /** @type {?} */ carry = 0; i < len || carry; i++) {
	          var /** @type {?} */ tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);
	          if (tmpSum >= 10) {
	              carry = 1;
	              sum += tmpSum - 10;
	          }
	          else {
	              carry = 0;
	              sum += tmpSum;
	          }
	      }
	      return sum;
	  }
	  /**
	   * @param {?} num
	   * @param {?} b
	   * @return {?}
	   */
	  function numberTimesBigInt(num, b) {
	      var /** @type {?} */ product = '';
	      var /** @type {?} */ bToThePower = b;
	      for (; num !== 0; num = num >>> 1) {
	          if (num & 1)
	              product = addBigInt(product, bToThePower);
	          bToThePower = addBigInt(bToThePower, bToThePower);
	      }
	      return product;
	  }
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$8 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var _Visitor$1 = (function () {
	      function _Visitor() {
	      }
	      /**
	       * @param {?} tag
	       * @return {?}
	       */
	      _Visitor.prototype.visitTag = function (tag) {
	          var _this = this;
	          var /** @type {?} */ strAttrs = this._serializeAttributes(tag.attrs);
	          if (tag.children.length == 0) {
	              return "<" + tag.name + strAttrs + "/>";
	          }
	          var /** @type {?} */ strChildren = tag.children.map(function (node) { return node.visit(_this); });
	          return "<" + tag.name + strAttrs + ">" + strChildren.join('') + "</" + tag.name + ">";
	      };
	      /**
	       * @param {?} text
	       * @return {?}
	       */
	      _Visitor.prototype.visitText = function (text) { return text.value; };
	      /**
	       * @param {?} decl
	       * @return {?}
	       */
	      _Visitor.prototype.visitDeclaration = function (decl) {
	          return "<?xml" + this._serializeAttributes(decl.attrs) + " ?>";
	      };
	      /**
	       * @param {?} attrs
	       * @return {?}
	       */
	      _Visitor.prototype._serializeAttributes = function (attrs) {
	          var /** @type {?} */ strAttrs = Object.keys(attrs).map(function (name) { return (name + "=\"" + attrs[name] + "\""); }).join(' ');
	          return strAttrs.length > 0 ? ' ' + strAttrs : '';
	      };
	      /**
	       * @param {?} doctype
	       * @return {?}
	       */
	      _Visitor.prototype.visitDoctype = function (doctype) {
	          return "<!DOCTYPE " + doctype.rootTag + " [\n" + doctype.dtd + "\n]>";
	      };
	      return _Visitor;
	  }());
	  var /** @type {?} */ _visitor = new _Visitor$1();
	  /**
	   * @param {?} nodes
	   * @return {?}
	   */
	  function serialize(nodes) {
	      return nodes.map(function (node) { return node.visit(_visitor); }).join('');
	  }
	  var Declaration = (function () {
	      /**
	       * @param {?} unescapedAttrs
	       */
	      function Declaration(unescapedAttrs) {
	          var _this = this;
	          this.attrs = {};
	          Object.keys(unescapedAttrs).forEach(function (k) {
	              _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
	          });
	      }
	      /**
	       * @param {?} visitor
	       * @return {?}
	       */
	      Declaration.prototype.visit = function (visitor) { return visitor.visitDeclaration(this); };
	      return Declaration;
	  }());
	  var Doctype = (function () {
	      /**
	       * @param {?} rootTag
	       * @param {?} dtd
	       */
	      function Doctype(rootTag, dtd) {
	          this.rootTag = rootTag;
	          this.dtd = dtd;
	      }
	      ;
	      /**
	       * @param {?} visitor
	       * @return {?}
	       */
	      Doctype.prototype.visit = function (visitor) { return visitor.visitDoctype(this); };
	      return Doctype;
	  }());
	  var Tag = (function () {
	      /**
	       * @param {?} name
	       * @param {?=} unescapedAttrs
	       * @param {?=} children
	       */
	      function Tag(name, unescapedAttrs, children) {
	          var _this = this;
	          if (unescapedAttrs === void 0) { unescapedAttrs = {}; }
	          if (children === void 0) { children = []; }
	          this.name = name;
	          this.children = children;
	          this.attrs = {};
	          Object.keys(unescapedAttrs).forEach(function (k) {
	              _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
	          });
	      }
	      /**
	       * @param {?} visitor
	       * @return {?}
	       */
	      Tag.prototype.visit = function (visitor) { return visitor.visitTag(this); };
	      return Tag;
	  }());
	  var Text$2 = (function () {
	      /**
	       * @param {?} unescapedValue
	       */
	      function Text(unescapedValue) {
	          this.value = _escapeXml(unescapedValue);
	      }
	      ;
	      /**
	       * @param {?} visitor
	       * @return {?}
	       */
	      Text.prototype.visit = function (visitor) { return visitor.visitText(this); };
	      return Text;
	  }());
	  var CR = (function (_super) {
	      __extends$8(CR, _super);
	      /**
	       * @param {?=} ws
	       */
	      function CR(ws) {
	          if (ws === void 0) { ws = 0; }
	          _super.call(this, "\n" + new Array(ws + 1).join(' '));
	      }
	      return CR;
	  }(Text$2));
	  var /** @type {?} */ _ESCAPED_CHARS = [
	      [/&/g, '&amp;'],
	      [/"/g, '&quot;'],
	      [/'/g, '&apos;'],
	      [/</g, '&lt;'],
	      [/>/g, '&gt;'],
	  ];
	  /**
	   * @param {?} text
	   * @return {?}
	   */
	  function _escapeXml(text) {
	      return _ESCAPED_CHARS.reduce(function (text, entry) { return text.replace(entry[0], entry[1]); }, text);
	  }
	
	  var /** @type {?} */ _VERSION = '1.2';
	  var /** @type {?} */ _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';
	  // TODO(vicb): make this a param (s/_/-/)
	  var /** @type {?} */ _SOURCE_LANG = 'en';
	  var /** @type {?} */ _PLACEHOLDER_TAG = 'x';
	  var /** @type {?} */ _SOURCE_TAG = 'source';
	  var /** @type {?} */ _TARGET_TAG = 'target';
	  var /** @type {?} */ _UNIT_TAG = 'trans-unit';
	  // http://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html
	  // http://docs.oasis-open.org/xliff/v1.2/xliff-profile-html/xliff-profile-html-1.2.html
	  var Xliff = (function () {
	      function Xliff() {
	      }
	      /**
	       * @param {?} messages
	       * @return {?}
	       */
	      Xliff.prototype.write = function (messages) {
	          var _this = this;
	          var /** @type {?} */ visitor = new _WriteVisitor();
	          var /** @type {?} */ visited = {};
	          var /** @type {?} */ transUnits = [];
	          messages.forEach(function (message) {
	              var /** @type {?} */ id = _this.digest(message);
	              // deduplicate messages
	              if (visited[id])
	                  return;
	              visited[id] = true;
	              var /** @type {?} */ transUnit = new Tag(_UNIT_TAG, { id: id, datatype: 'html' });
	              transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(8), new Tag(_TARGET_TAG));
	              if (message.description) {
	                  transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'description' }, [new Text$2(message.description)]));
	              }
	              if (message.meaning) {
	                  transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'meaning' }, [new Text$2(message.meaning)]));
	              }
	              transUnit.children.push(new CR(6));
	              transUnits.push(new CR(6), transUnit);
	          });
	          var /** @type {?} */ body = new Tag('body', {}, transUnits.concat([new CR(4)]));
	          var /** @type {?} */ file = new Tag('file', { 'source-language': _SOURCE_LANG, datatype: 'plaintext', original: 'ng2.template' }, [new CR(4), body, new CR(2)]);
	          var /** @type {?} */ xliff = new Tag('xliff', { version: _VERSION, xmlns: _XMLNS }, [new CR(2), file, new CR()]);
	          return serialize([
	              new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()
	          ]);
	      };
	      /**
	       * @param {?} content
	       * @param {?} url
	       * @return {?}
	       */
	      Xliff.prototype.load = function (content, url) {
	          // xliff to xml nodes
	          var /** @type {?} */ xliffParser = new XliffParser();
	          var _a = xliffParser.parse(content, url), mlNodesByMsgId = _a.mlNodesByMsgId, errors = _a.errors;
	          // xml nodes to i18n nodes
	          var /** @type {?} */ i18nNodesByMsgId = {};
	          var /** @type {?} */ converter = new XmlToI18n();
	          Object.keys(mlNodesByMsgId).forEach(function (msgId) {
	              var _a = converter.convert(mlNodesByMsgId[msgId]), i18nNodes = _a.i18nNodes, e = _a.errors;
	              errors.push.apply(errors, e);
	              i18nNodesByMsgId[msgId] = i18nNodes;
	          });
	          if (errors.length) {
	              throw new Error("xliff parse errors:\n" + errors.join('\n'));
	          }
	          return i18nNodesByMsgId;
	      };
	      /**
	       * @param {?} message
	       * @return {?}
	       */
	      Xliff.prototype.digest = function (message) { return digest(message); };
	      return Xliff;
	  }());
	  var _WriteVisitor = (function () {
	      function _WriteVisitor() {
	      }
	      /**
	       * @param {?} text
	       * @param {?=} context
	       * @return {?}
	       */
	      _WriteVisitor.prototype.visitText = function (text, context) { return [new Text$2(text.value)]; };
	      /**
	       * @param {?} container
	       * @param {?=} context
	       * @return {?}
	       */
	      _WriteVisitor.prototype.visitContainer = function (container, context) {
	          var _this = this;
	          var /** @type {?} */ nodes = [];
	          container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });
	          return nodes;
	      };
	      /**
	       * @param {?} icu
	       * @param {?=} context
	       * @return {?}
	       */
	      _WriteVisitor.prototype.visitIcu = function (icu, context) {
	          if (this._isInIcu) {
	              // nested ICU is not supported
	              throw new Error('xliff does not support nested ICU messages');
	          }
	          this._isInIcu = true;
	          // TODO(vicb): support ICU messages
	          // https://lists.oasis-open.org/archives/xliff/201201/msg00028.html
	          // http://docs.oasis-open.org/xliff/v1.2/xliff-profile-po/xliff-profile-po-1.2-cd02.html
	          var /** @type {?} */ nodes = [];
	          this._isInIcu = false;
	          return nodes;
	      };
	      /**
	       * @param {?} ph
	       * @param {?=} context
	       * @return {?}
	       */
	      _WriteVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	          var /** @type {?} */ ctype = getCtypeForTag(ph.tag);
	          var /** @type {?} */ startTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.startName, ctype: ctype });
	          if (ph.isVoid) {
	              // void tags have no children nor closing tags
	              return [startTagPh];
	          }
	          var /** @type {?} */ closeTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.closeName, ctype: ctype });
	          return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
	      };
	      /**
	       * @param {?} ph
	       * @param {?=} context
	       * @return {?}
	       */
	      _WriteVisitor.prototype.visitPlaceholder = function (ph, context) {
	          return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
	      };
	      /**
	       * @param {?} ph
	       * @param {?=} context
	       * @return {?}
	       */
	      _WriteVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	          return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
	      };
	      /**
	       * @param {?} nodes
	       * @return {?}
	       */
	      _WriteVisitor.prototype.serialize = function (nodes) {
	          var _this = this;
	          this._isInIcu = false;
	          return (_a = []).concat.apply(_a, nodes.map(function (node) { return node.visit(_this); }));
	          var _a;
	      };
	      return _WriteVisitor;
	  }());
	  // TODO(vicb): add error management (structure)
	  // Extract messages as xml nodes from the xliff file
	  var XliffParser = (function () {
	      function XliffParser() {
	      }
	      /**
	       * @param {?} xliff
	       * @param {?} url
	       * @return {?}
	       */
	      XliffParser.prototype.parse = function (xliff, url) {
	          this._unitMlNodes = [];
	          this._mlNodesByMsgId = {};
	          var /** @type {?} */ xml = new XmlParser().parse(xliff, url, false);
	          this._errors = xml.errors;
	          visitAll(this, xml.rootNodes, null);
	          return {
	              mlNodesByMsgId: this._mlNodesByMsgId,
	              errors: this._errors,
	          };
	      };
	      /**
	       * @param {?} element
	       * @param {?} context
	       * @return {?}
	       */
	      XliffParser.prototype.visitElement = function (element, context) {
	          switch (element.name) {
	              case _UNIT_TAG:
	                  this._unitMlNodes = null;
	                  var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                  if (!idAttr) {
	                      this._addError(element, "<" + _UNIT_TAG + "> misses the \"id\" attribute");
	                  }
	                  else {
	                      var /** @type {?} */ id = idAttr.value;
	                      if (this._mlNodesByMsgId.hasOwnProperty(id)) {
	                          this._addError(element, "Duplicated translations for msg " + id);
	                      }
	                      else {
	                          visitAll(this, element.children, null);
	                          if (this._unitMlNodes) {
	                              this._mlNodesByMsgId[id] = this._unitMlNodes;
	                          }
	                          else {
	                              this._addError(element, "Message " + id + " misses a translation");
	                          }
	                      }
	                  }
	                  break;
	              case _SOURCE_TAG:
	                  // ignore source message
	                  break;
	              case _TARGET_TAG:
	                  this._unitMlNodes = element.children;
	                  break;
	              default:
	                  // TODO(vicb): assert file structure, xliff version
	                  // For now only recurse on unhandled nodes
	                  visitAll(this, element.children, null);
	          }
	      };
	      /**
	       * @param {?} attribute
	       * @param {?} context
	       * @return {?}
	       */
	      XliffParser.prototype.visitAttribute = function (attribute, context) { };
	      /**
	       * @param {?} text
	       * @param {?} context
	       * @return {?}
	       */
	      XliffParser.prototype.visitText = function (text, context) { };
	      /**
	       * @param {?} comment
	       * @param {?} context
	       * @return {?}
	       */
	      XliffParser.prototype.visitComment = function (comment, context) { };
	      /**
	       * @param {?} expansion
	       * @param {?} context
	       * @return {?}
	       */
	      XliffParser.prototype.visitExpansion = function (expansion, context) { };
	      /**
	       * @param {?} expansionCase
	       * @param {?} context
	       * @return {?}
	       */
	      XliffParser.prototype.visitExpansionCase = function (expansionCase, context) { };
	      /**
	       * @param {?} node
	       * @param {?} message
	       * @return {?}
	       */
	      XliffParser.prototype._addError = function (node, message) {
	          this._errors.push(new I18nError(node.sourceSpan, message));
	      };
	      return XliffParser;
	  }());
	  // Convert ml nodes (xliff syntax) to i18n nodes
	  var XmlToI18n = (function () {
	      function XmlToI18n() {
	      }
	      /**
	       * @param {?} nodes
	       * @return {?}
	       */
	      XmlToI18n.prototype.convert = function (nodes) {
	          this._errors = [];
	          return {
	              i18nNodes: visitAll(this, nodes),
	              errors: this._errors,
	          };
	      };
	      /**
	       * @param {?} text
	       * @param {?} context
	       * @return {?}
	       */
	      XmlToI18n.prototype.visitText = function (text, context) { return new Text$1(text.value, text.sourceSpan); };
	      /**
	       * @param {?} el
	       * @param {?} context
	       * @return {?}
	       */
	      XmlToI18n.prototype.visitElement = function (el, context) {
	          if (el.name === _PLACEHOLDER_TAG) {
	              var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === 'id'; });
	              if (nameAttr) {
	                  return new Placeholder('', nameAttr.value, el.sourceSpan);
	              }
	              this._addError(el, "<" + _PLACEHOLDER_TAG + "> misses the \"id\" attribute");
	          }
	          else {
	              this._addError(el, "Unexpected tag");
	          }
	      };
	      /**
	       * @param {?} icu
	       * @param {?} context
	       * @return {?}
	       */
	      XmlToI18n.prototype.visitExpansion = function (icu, context) { };
	      /**
	       * @param {?} icuCase
	       * @param {?} context
	       * @return {?}
	       */
	      XmlToI18n.prototype.visitExpansionCase = function (icuCase, context) { };
	      /**
	       * @param {?} comment
	       * @param {?} context
	       * @return {?}
	       */
	      XmlToI18n.prototype.visitComment = function (comment, context) { };
	      /**
	       * @param {?} attribute
	       * @param {?} context
	       * @return {?}
	       */
	      XmlToI18n.prototype.visitAttribute = function (attribute, context) { };
	      /**
	       * @param {?} node
	       * @param {?} message
	       * @return {?}
	       */
	      XmlToI18n.prototype._addError = function (node, message) {
	          this._errors.push(new I18nError(node.sourceSpan, message));
	      };
	      return XmlToI18n;
	  }());
	  /**
	   * @param {?} tag
	   * @return {?}
	   */
	  function getCtypeForTag(tag) {
	      switch (tag.toLowerCase()) {
	          case 'br':
	              return 'lb';
	          case 'img':
	              return 'image';
	          default:
	              return "x-" + tag;
	      }
	  }
	
	  var /** @type {?} */ _MESSAGES_TAG = 'messagebundle';
	  var /** @type {?} */ _MESSAGE_TAG = 'msg';
	  var /** @type {?} */ _PLACEHOLDER_TAG$1 = 'ph';
	  var /** @type {?} */ _EXEMPLE_TAG = 'ex';
	  var /** @type {?} */ _DOCTYPE = "<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>";
	  var Xmb = (function () {
	      function Xmb() {
	      }
	      /**
	       * @param {?} messages
	       * @return {?}
	       */
	      Xmb.prototype.write = function (messages) {
	          var _this = this;
	          var /** @type {?} */ visitor = new _Visitor$2();
	          var /** @type {?} */ visited = {};
	          var /** @type {?} */ rootNode = new Tag(_MESSAGES_TAG);
	          messages.forEach(function (message) {
	              var /** @type {?} */ id = _this.digest(message);
	              // deduplicate messages
	              if (visited[id])
	                  return;
	              visited[id] = true;
	              var /** @type {?} */ attrs = { id: id };
	              if (message.description) {
	                  attrs['desc'] = message.description;
	              }
	              if (message.meaning) {
	                  attrs['meaning'] = message.meaning;
	              }
	              rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes)));
	          });
	          rootNode.children.push(new CR());
	          return serialize([
	              new Declaration({ version: '1.0', encoding: 'UTF-8' }),
	              new CR(),
	              new Doctype(_MESSAGES_TAG, _DOCTYPE),
	              new CR(),
	              rootNode,
	              new CR(),
	          ]);
	      };
	      /**
	       * @param {?} content
	       * @param {?} url
	       * @return {?}
	       */
	      Xmb.prototype.load = function (content, url) {
	          throw new Error('Unsupported');
	      };
	      /**
	       * @param {?} message
	       * @return {?}
	       */
	      Xmb.prototype.digest = function (message) { return digest$1(message); };
	      return Xmb;
	  }());
	  var _Visitor$2 = (function () {
	      function _Visitor() {
	      }
	      /**
	       * @param {?} text
	       * @param {?=} context
	       * @return {?}
	       */
	      _Visitor.prototype.visitText = function (text, context) { return [new Text$2(text.value)]; };
	      /**
	       * @param {?} container
	       * @param {?=} context
	       * @return {?}
	       */
	      _Visitor.prototype.visitContainer = function (container, context) {
	          var _this = this;
	          var /** @type {?} */ nodes = [];
	          container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });
	          return nodes;
	      };
	      /**
	       * @param {?} icu
	       * @param {?=} context
	       * @return {?}
	       */
	      _Visitor.prototype.visitIcu = function (icu, context) {
	          var _this = this;
	          var /** @type {?} */ nodes = [new Text$2("{" + icu.expressionPlaceholder + ", " + icu.type + ", ")];
	          Object.keys(icu.cases).forEach(function (c) {
	              nodes.push.apply(nodes, [new Text$2(c + " {")].concat(icu.cases[c].visit(_this), [new Text$2("} ")]));
	          });
	          nodes.push(new Text$2("}"));
	          return nodes;
	      };
	      /**
	       * @param {?} ph
	       * @param {?=} context
	       * @return {?}
	       */
	      _Visitor.prototype.visitTagPlaceholder = function (ph, context) {
	          var /** @type {?} */ startEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("<" + ph.tag + ">")]);
	          var /** @type {?} */ startTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.startName }, [startEx]);
	          if (ph.isVoid) {
	              // void tags have no children nor closing tags
	              return [startTagPh];
	          }
	          var /** @type {?} */ closeEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("</" + ph.tag + ">")]);
	          var /** @type {?} */ closeTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.closeName }, [closeEx]);
	          return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
	      };
	      /**
	       * @param {?} ph
	       * @param {?=} context
	       * @return {?}
	       */
	      _Visitor.prototype.visitPlaceholder = function (ph, context) {
	          return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })];
	      };
	      /**
	       * @param {?} ph
	       * @param {?=} context
	       * @return {?}
	       */
	      _Visitor.prototype.visitIcuPlaceholder = function (ph, context) {
	          return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })];
	      };
	      /**
	       * @param {?} nodes
	       * @return {?}
	       */
	      _Visitor.prototype.serialize = function (nodes) {
	          var _this = this;
	          return (_a = []).concat.apply(_a, nodes.map(function (node) { return node.visit(_this); }));
	          var _a;
	      };
	      return _Visitor;
	  }());
	  /**
	   * @param {?} message
	   * @return {?}
	   */
	  function digest$1(message) {
	      return decimalDigest(message);
	  }
	
	  var /** @type {?} */ _TRANSLATIONS_TAG = 'translationbundle';
	  var /** @type {?} */ _TRANSLATION_TAG = 'translation';
	  var /** @type {?} */ _PLACEHOLDER_TAG$2 = 'ph';
	  var Xtb = (function () {
	      function Xtb() {
	      }
	      /**
	       * @param {?} messages
	       * @return {?}
	       */
	      Xtb.prototype.write = function (messages) { throw new Error('Unsupported'); };
	      /**
	       * @param {?} content
	       * @param {?} url
	       * @return {?}
	       */
	      Xtb.prototype.load = function (content, url) {
	          // xtb to xml nodes
	          var /** @type {?} */ xtbParser = new XtbParser();
	          var _a = xtbParser.parse(content, url), mlNodesByMsgId = _a.mlNodesByMsgId, errors = _a.errors;
	          // xml nodes to i18n nodes
	          var /** @type {?} */ i18nNodesByMsgId = {};
	          var /** @type {?} */ converter = new XmlToI18n$1();
	          Object.keys(mlNodesByMsgId).forEach(function (msgId) {
	              var _a = converter.convert(mlNodesByMsgId[msgId]), i18nNodes = _a.i18nNodes, e = _a.errors;
	              errors.push.apply(errors, e);
	              i18nNodesByMsgId[msgId] = i18nNodes;
	          });
	          if (errors.length) {
	              throw new Error("xtb parse errors:\n" + errors.join('\n'));
	          }
	          return i18nNodesByMsgId;
	      };
	      /**
	       * @param {?} message
	       * @return {?}
	       */
	      Xtb.prototype.digest = function (message) { return digest$1(message); };
	      return Xtb;
	  }());
	  // Extract messages as xml nodes from the xtb file
	  var XtbParser = (function () {
	      function XtbParser() {
	      }
	      /**
	       * @param {?} xtb
	       * @param {?} url
	       * @return {?}
	       */
	      XtbParser.prototype.parse = function (xtb, url) {
	          this._bundleDepth = 0;
	          this._mlNodesByMsgId = {};
	          var /** @type {?} */ xml = new XmlParser().parse(xtb, url, true);
	          this._errors = xml.errors;
	          visitAll(this, xml.rootNodes);
	          return {
	              mlNodesByMsgId: this._mlNodesByMsgId,
	              errors: this._errors,
	          };
	      };
	      /**
	       * @param {?} element
	       * @param {?} context
	       * @return {?}
	       */
	      XtbParser.prototype.visitElement = function (element, context) {
	          switch (element.name) {
	              case _TRANSLATIONS_TAG:
	                  this._bundleDepth++;
	                  if (this._bundleDepth > 1) {
	                      this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested");
	                  }
	                  visitAll(this, element.children, null);
	                  this._bundleDepth--;
	                  break;
	              case _TRANSLATION_TAG:
	                  var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                  if (!idAttr) {
	                      this._addError(element, "<" + _TRANSLATION_TAG + "> misses the \"id\" attribute");
	                  }
	                  else {
	                      var /** @type {?} */ id = idAttr.value;
	                      if (this._mlNodesByMsgId.hasOwnProperty(id)) {
	                          this._addError(element, "Duplicated translations for msg " + id);
	                      }
	                      else {
	                          this._mlNodesByMsgId[id] = element.children;
	                      }
	                  }
	                  break;
	              default:
	                  this._addError(element, 'Unexpected tag');
	          }
	      };
	      /**
	       * @param {?} attribute
	       * @param {?} context
	       * @return {?}
	       */
	      XtbParser.prototype.visitAttribute = function (attribute, context) { };
	      /**
	       * @param {?} text
	       * @param {?} context
	       * @return {?}
	       */
	      XtbParser.prototype.visitText = function (text, context) { };
	      /**
	       * @param {?} comment
	       * @param {?} context
	       * @return {?}
	       */
	      XtbParser.prototype.visitComment = function (comment, context) { };
	      /**
	       * @param {?} expansion
	       * @param {?} context
	       * @return {?}
	       */
	      XtbParser.prototype.visitExpansion = function (expansion, context) { };
	      /**
	       * @param {?} expansionCase
	       * @param {?} context
	       * @return {?}
	       */
	      XtbParser.prototype.visitExpansionCase = function (expansionCase, context) { };
	      /**
	       * @param {?} node
	       * @param {?} message
	       * @return {?}
	       */
	      XtbParser.prototype._addError = function (node, message) {
	          this._errors.push(new I18nError(node.sourceSpan, message));
	      };
	      return XtbParser;
	  }());
	  // Convert ml nodes (xtb syntax) to i18n nodes
	  var XmlToI18n$1 = (function () {
	      function XmlToI18n() {
	      }
	      /**
	       * @param {?} nodes
	       * @return {?}
	       */
	      XmlToI18n.prototype.convert = function (nodes) {
	          this._errors = [];
	          return {
	              i18nNodes: visitAll(this, nodes),
	              errors: this._errors,
	          };
	      };
	      /**
	       * @param {?} text
	       * @param {?} context
	       * @return {?}
	       */
	      XmlToI18n.prototype.visitText = function (text, context) { return new Text$1(text.value, text.sourceSpan); };
	      /**
	       * @param {?} icu
	       * @param {?} context
	       * @return {?}
	       */
	      XmlToI18n.prototype.visitExpansion = function (icu, context) {
	          var /** @type {?} */ caseMap = {};
	          visitAll(this, icu.cases).forEach(function (c) {
	              caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
	          });
	          return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
	      };
	      /**
	       * @param {?} icuCase
	       * @param {?} context
	       * @return {?}
	       */
	      XmlToI18n.prototype.visitExpansionCase = function (icuCase, context) {
	          return {
	              value: icuCase.value,
	              nodes: visitAll(this, icuCase.expression),
	          };
	      };
	      /**
	       * @param {?} el
	       * @param {?} context
	       * @return {?}
	       */
	      XmlToI18n.prototype.visitElement = function (el, context) {
	          if (el.name === _PLACEHOLDER_TAG$2) {
	              var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === 'name'; });
	              if (nameAttr) {
	                  return new Placeholder('', nameAttr.value, el.sourceSpan);
	              }
	              this._addError(el, "<" + _PLACEHOLDER_TAG$2 + "> misses the \"name\" attribute");
	          }
	          else {
	              this._addError(el, "Unexpected tag");
	          }
	      };
	      /**
	       * @param {?} comment
	       * @param {?} context
	       * @return {?}
	       */
	      XmlToI18n.prototype.visitComment = function (comment, context) { };
	      /**
	       * @param {?} attribute
	       * @param {?} context
	       * @return {?}
	       */
	      XmlToI18n.prototype.visitAttribute = function (attribute, context) { };
	      /**
	       * @param {?} node
	       * @param {?} message
	       * @return {?}
	       */
	      XmlToI18n.prototype._addError = function (node, message) {
	          this._errors.push(new I18nError(node.sourceSpan, message));
	      };
	      return XmlToI18n;
	  }());
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$9 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var HtmlParser = (function (_super) {
	      __extends$9(HtmlParser, _super);
	      function HtmlParser() {
	          _super.call(this, getHtmlTagDefinition);
	      }
	      /**
	       * @param {?} source
	       * @param {?} url
	       * @param {?=} parseExpansionForms
	       * @param {?=} interpolationConfig
	       * @return {?}
	       */
	      HtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	          if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          return _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);
	      };
	      HtmlParser.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      HtmlParser.ctorParameters = function () { return []; };
	      return HtmlParser;
	  }(Parser$1));
	
	  /**
	   *  A container for translated messages
	   */
	  var TranslationBundle = (function () {
	      /**
	       * @param {?=} _i18nNodesByMsgId
	       * @param {?} digest
	       */
	      function TranslationBundle(_i18nNodesByMsgId, digest) {
	          if (_i18nNodesByMsgId === void 0) { _i18nNodesByMsgId = {}; }
	          this._i18nNodesByMsgId = _i18nNodesByMsgId;
	          this.digest = digest;
	          this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, digest);
	      }
	      /**
	       * @param {?} content
	       * @param {?} url
	       * @param {?} serializer
	       * @return {?}
	       */
	      TranslationBundle.load = function (content, url, serializer) {
	          var /** @type {?} */ i18nNodesByMsgId = serializer.load(content, url);
	          var /** @type {?} */ digestFn = function (m) { return serializer.digest(m); };
	          return new TranslationBundle(i18nNodesByMsgId, digestFn);
	      };
	      /**
	       * @param {?} srcMsg
	       * @return {?}
	       */
	      TranslationBundle.prototype.get = function (srcMsg) {
	          var /** @type {?} */ html = this._i18nToHtml.convert(srcMsg);
	          if (html.errors.length) {
	              throw new Error(html.errors.join('\n'));
	          }
	          return html.nodes;
	      };
	      /**
	       * @param {?} srcMsg
	       * @return {?}
	       */
	      TranslationBundle.prototype.has = function (srcMsg) { return this.digest(srcMsg) in this._i18nNodesByMsgId; };
	      return TranslationBundle;
	  }());
	  var I18nToHtmlVisitor = (function () {
	      /**
	       * @param {?=} _i18nNodesByMsgId
	       * @param {?} _digest
	       */
	      function I18nToHtmlVisitor(_i18nNodesByMsgId, _digest) {
	          if (_i18nNodesByMsgId === void 0) { _i18nNodesByMsgId = {}; }
	          this._i18nNodesByMsgId = _i18nNodesByMsgId;
	          this._digest = _digest;
	          this._srcMsgStack = [];
	          this._errors = [];
	      }
	      /**
	       * @param {?} srcMsg
	       * @return {?}
	       */
	      I18nToHtmlVisitor.prototype.convert = function (srcMsg) {
	          this._srcMsgStack.length = 0;
	          this._errors.length = 0;
	          // i18n to text
	          var /** @type {?} */ text = this._convertToText(srcMsg);
	          // text to html
	          var /** @type {?} */ url = srcMsg.nodes[0].sourceSpan.start.file.url;
	          var /** @type {?} */ html = new HtmlParser().parse(text, url, true);
	          return {
	              nodes: html.rootNodes,
	              errors: this._errors.concat(html.errors),
	          };
	      };
	      /**
	       * @param {?} text
	       * @param {?=} context
	       * @return {?}
	       */
	      I18nToHtmlVisitor.prototype.visitText = function (text, context) { return text.value; };
	      /**
	       * @param {?} container
	       * @param {?=} context
	       * @return {?}
	       */
	      I18nToHtmlVisitor.prototype.visitContainer = function (container, context) {
	          var _this = this;
	          return container.children.map(function (n) { return n.visit(_this); }).join('');
	      };
	      /**
	       * @param {?} icu
	       * @param {?=} context
	       * @return {?}
	       */
	      I18nToHtmlVisitor.prototype.visitIcu = function (icu, context) {
	          var _this = this;
	          var /** @type {?} */ cases = Object.keys(icu.cases).map(function (k) { return (k + " {" + icu.cases[k].visit(_this) + "}"); });
	          // TODO(vicb): Once all format switch to using expression placeholders
	          // we should throw when the placeholder is not in the source message
	          var /** @type {?} */ exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ?
	              this._srcMsg.placeholders[icu.expression] :
	              icu.expression;
	          return "{" + exp + ", " + icu.type + ", " + cases.join(' ') + "}";
	      };
	      /**
	       * @param {?} ph
	       * @param {?=} context
	       * @return {?}
	       */
	      I18nToHtmlVisitor.prototype.visitPlaceholder = function (ph, context) {
	          var /** @type {?} */ phName = ph.name;
	          if (this._srcMsg.placeholders.hasOwnProperty(phName)) {
	              return this._srcMsg.placeholders[phName];
	          }
	          if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {
	              return this._convertToText(this._srcMsg.placeholderToMessage[phName]);
	          }
	          this._addError(ph, "Unknown placeholder");
	          return '';
	      };
	      /**
	       * @param {?} ph
	       * @param {?=} context
	       * @return {?}
	       */
	      I18nToHtmlVisitor.prototype.visitTagPlaceholder = function (ph, context) { throw 'unreachable code'; };
	      /**
	       * @param {?} ph
	       * @param {?=} context
	       * @return {?}
	       */
	      I18nToHtmlVisitor.prototype.visitIcuPlaceholder = function (ph, context) { throw 'unreachable code'; };
	      /**
	       * @param {?} srcMsg
	       * @return {?}
	       */
	      I18nToHtmlVisitor.prototype._convertToText = function (srcMsg) {
	          var _this = this;
	          var /** @type {?} */ digest = this._digest(srcMsg);
	          if (this._i18nNodesByMsgId.hasOwnProperty(digest)) {
	              this._srcMsgStack.push(this._srcMsg);
	              this._srcMsg = srcMsg;
	              var /** @type {?} */ nodes = this._i18nNodesByMsgId[digest];
	              var /** @type {?} */ text = nodes.map(function (node) { return node.visit(_this); }).join('');
	              this._srcMsg = this._srcMsgStack.pop();
	              return text;
	          }
	          this._addError(srcMsg.nodes[0], "Missing translation for message " + digest);
	          return '';
	      };
	      /**
	       * @param {?} el
	       * @param {?} msg
	       * @return {?}
	       */
	      I18nToHtmlVisitor.prototype._addError = function (el, msg) {
	          this._errors.push(new I18nError(el.sourceSpan, msg));
	      };
	      return I18nToHtmlVisitor;
	  }());
	
	  var I18NHtmlParser = (function () {
	      /**
	       * @param {?} _htmlParser
	       * @param {?=} _translations
	       * @param {?=} _translationsFormat
	       */
	      function I18NHtmlParser(_htmlParser, _translations, _translationsFormat) {
	          this._htmlParser = _htmlParser;
	          this._translations = _translations;
	          this._translationsFormat = _translationsFormat;
	      }
	      /**
	       * @param {?} source
	       * @param {?} url
	       * @param {?=} parseExpansionForms
	       * @param {?=} interpolationConfig
	       * @return {?}
	       */
	      I18NHtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	          if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          var /** @type {?} */ parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);
	          if (!this._translations || this._translations === '') {
	              // Do not enable i18n when no translation bundle is provided
	              return parseResult;
	          }
	          // TODO(vicb): add support for implicit tags / attributes
	          if (parseResult.errors.length) {
	              return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);
	          }
	          var /** @type {?} */ serializer = this._createSerializer();
	          var /** @type {?} */ translationBundle = TranslationBundle.load(this._translations, url, serializer);
	          return mergeTranslations(parseResult.rootNodes, translationBundle, interpolationConfig, [], {});
	      };
	      /**
	       * @return {?}
	       */
	      I18NHtmlParser.prototype._createSerializer = function () {
	          var /** @type {?} */ format = (this._translationsFormat || 'xlf').toLowerCase();
	          switch (format) {
	              case 'xmb':
	                  return new Xmb();
	              case 'xtb':
	                  return new Xtb();
	              case 'xliff':
	              case 'xlf':
	              default:
	                  return new Xliff();
	          }
	      };
	      return I18NHtmlParser;
	  }());
	
	  var /** @type {?} */ APP_VIEW_MODULE_URL = assetUrl('core', 'linker/view');
	  var /** @type {?} */ VIEW_UTILS_MODULE_URL = assetUrl('core', 'linker/view_utils');
	  var /** @type {?} */ CD_MODULE_URL = assetUrl('core', 'change_detection/change_detection');
	  var /** @type {?} */ ANIMATION_STYLE_UTIL_ASSET_URL = assetUrl('core', 'animation/animation_style_util');
	  var Identifiers = (function () {
	      function Identifiers() {
	      }
	      Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {
	          name: 'ANALYZE_FOR_ENTRY_COMPONENTS',
	          moduleUrl: assetUrl('core', 'metadata/di'),
	          runtime: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS
	      };
	      Identifiers.ViewUtils = {
	          name: 'ViewUtils',
	          moduleUrl: assetUrl('core', 'linker/view_utils'),
	          runtime: view_utils.ViewUtils
	      };
	      Identifiers.AppView = { name: 'AppView', moduleUrl: APP_VIEW_MODULE_URL, runtime: AppView };
	      Identifiers.DebugAppView = {
	          name: 'DebugAppView',
	          moduleUrl: APP_VIEW_MODULE_URL,
	          runtime: DebugAppView
	      };
	      Identifiers.ViewContainer = {
	          name: 'ViewContainer',
	          moduleUrl: assetUrl('core', 'linker/view_container'),
	          runtime: ViewContainer
	      };
	      Identifiers.ElementRef = {
	          name: 'ElementRef',
	          moduleUrl: assetUrl('core', 'linker/element_ref'),
	          runtime: _angular_core.ElementRef
	      };
	      Identifiers.ViewContainerRef = {
	          name: 'ViewContainerRef',
	          moduleUrl: assetUrl('core', 'linker/view_container_ref'),
	          runtime: _angular_core.ViewContainerRef
	      };
	      Identifiers.ChangeDetectorRef = {
	          name: 'ChangeDetectorRef',
	          moduleUrl: assetUrl('core', 'change_detection/change_detector_ref'),
	          runtime: _angular_core.ChangeDetectorRef
	      };
	      Identifiers.RenderComponentType = {
	          name: 'RenderComponentType',
	          moduleUrl: assetUrl('core', 'render/api'),
	          runtime: _angular_core.RenderComponentType
	      };
	      Identifiers.QueryList = {
	          name: 'QueryList',
	          moduleUrl: assetUrl('core', 'linker/query_list'),
	          runtime: _angular_core.QueryList
	      };
	      Identifiers.TemplateRef = {
	          name: 'TemplateRef',
	          moduleUrl: assetUrl('core', 'linker/template_ref'),
	          runtime: _angular_core.TemplateRef
	      };
	      Identifiers.TemplateRef_ = {
	          name: 'TemplateRef_',
	          moduleUrl: assetUrl('core', 'linker/template_ref'),
	          runtime: TemplateRef_
	      };
	      Identifiers.CodegenComponentFactoryResolver = {
	          name: 'CodegenComponentFactoryResolver',
	          moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
	          runtime: CodegenComponentFactoryResolver
	      };
	      Identifiers.ComponentFactoryResolver = {
	          name: 'ComponentFactoryResolver',
	          moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
	          runtime: _angular_core.ComponentFactoryResolver
	      };
	      Identifiers.ComponentFactory = {
	          name: 'ComponentFactory',
	          runtime: _angular_core.ComponentFactory,
	          moduleUrl: assetUrl('core', 'linker/component_factory')
	      };
	      Identifiers.ComponentRef_ = {
	          name: 'ComponentRef_',
	          runtime: ComponentRef_,
	          moduleUrl: assetUrl('core', 'linker/component_factory')
	      };
	      Identifiers.ComponentRef = {
	          name: 'ComponentRef',
	          runtime: _angular_core.ComponentRef,
	          moduleUrl: assetUrl('core', 'linker/component_factory')
	      };
	      Identifiers.NgModuleFactory = {
	          name: 'NgModuleFactory',
	          runtime: _angular_core.NgModuleFactory,
	          moduleUrl: assetUrl('core', 'linker/ng_module_factory')
	      };
	      Identifiers.NgModuleInjector = {
	          name: 'NgModuleInjector',
	          runtime: NgModuleInjector,
	          moduleUrl: assetUrl('core', 'linker/ng_module_factory')
	      };
	      Identifiers.RegisterModuleFactoryFn = {
	          name: 'registerModuleFactory',
	          runtime: registerModuleFactory,
	          moduleUrl: assetUrl('core', 'linker/ng_module_factory_loader')
	      };
	      Identifiers.ValueUnwrapper = { name: 'ValueUnwrapper', moduleUrl: CD_MODULE_URL, runtime: ValueUnwrapper };
	      Identifiers.Injector = {
	          name: 'Injector',
	          moduleUrl: assetUrl('core', 'di/injector'),
	          runtime: _angular_core.Injector
	      };
	      Identifiers.ViewEncapsulation = {
	          name: 'ViewEncapsulation',
	          moduleUrl: assetUrl('core', 'metadata/view'),
	          runtime: _angular_core.ViewEncapsulation
	      };
	      Identifiers.ViewType = {
	          name: 'ViewType',
	          moduleUrl: assetUrl('core', 'linker/view_type'),
	          runtime: ViewType
	      };
	      Identifiers.ChangeDetectionStrategy = {
	          name: 'ChangeDetectionStrategy',
	          moduleUrl: CD_MODULE_URL,
	          runtime: _angular_core.ChangeDetectionStrategy
	      };
	      Identifiers.StaticNodeDebugInfo = {
	          name: 'StaticNodeDebugInfo',
	          moduleUrl: assetUrl('core', 'linker/debug_context'),
	          runtime: StaticNodeDebugInfo
	      };
	      Identifiers.DebugContext = {
	          name: 'DebugContext',
	          moduleUrl: assetUrl('core', 'linker/debug_context'),
	          runtime: DebugContext
	      };
	      Identifiers.Renderer = {
	          name: 'Renderer',
	          moduleUrl: assetUrl('core', 'render/api'),
	          runtime: _angular_core.Renderer
	      };
	      Identifiers.SimpleChange = { name: 'SimpleChange', moduleUrl: CD_MODULE_URL, runtime: _angular_core.SimpleChange };
	      Identifiers.UNINITIALIZED = { name: 'UNINITIALIZED', moduleUrl: CD_MODULE_URL, runtime: UNINITIALIZED };
	      Identifiers.ChangeDetectorStatus = {
	          name: 'ChangeDetectorStatus',
	          moduleUrl: CD_MODULE_URL,
	          runtime: ChangeDetectorStatus
	      };
	      Identifiers.checkBinding = {
	          name: 'checkBinding',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.checkBinding
	      };
	      Identifiers.devModeEqual = { name: 'devModeEqual', moduleUrl: CD_MODULE_URL, runtime: devModeEqual };
	      Identifiers.inlineInterpolate = {
	          name: 'inlineInterpolate',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.inlineInterpolate
	      };
	      Identifiers.interpolate = {
	          name: 'interpolate',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.interpolate
	      };
	      Identifiers.castByValue = {
	          name: 'castByValue',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.castByValue
	      };
	      Identifiers.EMPTY_ARRAY = {
	          name: 'EMPTY_ARRAY',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.EMPTY_ARRAY
	      };
	      Identifiers.EMPTY_MAP = {
	          name: 'EMPTY_MAP',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.EMPTY_MAP
	      };
	      Identifiers.createRenderElement = {
	          name: 'createRenderElement',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.createRenderElement
	      };
	      Identifiers.selectOrCreateRenderHostElement = {
	          name: 'selectOrCreateRenderHostElement',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.selectOrCreateRenderHostElement
	      };
	      Identifiers.pureProxies = [
	          null,
	          { name: 'pureProxy1', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy1 },
	          { name: 'pureProxy2', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy2 },
	          { name: 'pureProxy3', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy3 },
	          { name: 'pureProxy4', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy4 },
	          { name: 'pureProxy5', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy5 },
	          { name: 'pureProxy6', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy6 },
	          { name: 'pureProxy7', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy7 },
	          { name: 'pureProxy8', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy8 },
	          { name: 'pureProxy9', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy9 },
	          { name: 'pureProxy10', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy10 },
	      ];
	      Identifiers.SecurityContext = {
	          name: 'SecurityContext',
	          moduleUrl: assetUrl('core', 'security'),
	          runtime: _angular_core.SecurityContext,
	      };
	      Identifiers.AnimationKeyframe = {
	          name: 'AnimationKeyframe',
	          moduleUrl: assetUrl('core', 'animation/animation_keyframe'),
	          runtime: AnimationKeyframe
	      };
	      Identifiers.AnimationStyles = {
	          name: 'AnimationStyles',
	          moduleUrl: assetUrl('core', 'animation/animation_styles'),
	          runtime: AnimationStyles
	      };
	      Identifiers.NoOpAnimationPlayer = {
	          name: 'NoOpAnimationPlayer',
	          moduleUrl: assetUrl('core', 'animation/animation_player'),
	          runtime: NoOpAnimationPlayer
	      };
	      Identifiers.AnimationGroupPlayer = {
	          name: 'AnimationGroupPlayer',
	          moduleUrl: assetUrl('core', 'animation/animation_group_player'),
	          runtime: AnimationGroupPlayer
	      };
	      Identifiers.AnimationSequencePlayer = {
	          name: 'AnimationSequencePlayer',
	          moduleUrl: assetUrl('core', 'animation/animation_sequence_player'),
	          runtime: AnimationSequencePlayer
	      };
	      Identifiers.prepareFinalAnimationStyles = {
	          name: 'prepareFinalAnimationStyles',
	          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	          runtime: prepareFinalAnimationStyles
	      };
	      Identifiers.balanceAnimationKeyframes = {
	          name: 'balanceAnimationKeyframes',
	          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	          runtime: balanceAnimationKeyframes
	      };
	      Identifiers.clearStyles = {
	          name: 'clearStyles',
	          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	          runtime: clearStyles
	      };
	      Identifiers.renderStyles = {
	          name: 'renderStyles',
	          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	          runtime: renderStyles
	      };
	      Identifiers.collectAndResolveStyles = {
	          name: 'collectAndResolveStyles',
	          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	          runtime: collectAndResolveStyles
	      };
	      Identifiers.LOCALE_ID = {
	          name: 'LOCALE_ID',
	          moduleUrl: assetUrl('core', 'i18n/tokens'),
	          runtime: _angular_core.LOCALE_ID
	      };
	      Identifiers.TRANSLATIONS_FORMAT = {
	          name: 'TRANSLATIONS_FORMAT',
	          moduleUrl: assetUrl('core', 'i18n/tokens'),
	          runtime: _angular_core.TRANSLATIONS_FORMAT
	      };
	      Identifiers.setBindingDebugInfo = {
	          name: 'setBindingDebugInfo',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.setBindingDebugInfo
	      };
	      Identifiers.setBindingDebugInfoForChanges = {
	          name: 'setBindingDebugInfoForChanges',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.setBindingDebugInfoForChanges
	      };
	      Identifiers.AnimationTransition = {
	          name: 'AnimationTransition',
	          moduleUrl: assetUrl('core', 'animation/animation_transition'),
	          runtime: AnimationTransition
	      };
	      // This is just the interface!
	      Identifiers.InlineArray = { name: 'InlineArray', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: null };
	      Identifiers.inlineArrays = [
	          { name: 'InlineArray2', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray2 },
	          { name: 'InlineArray2', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray2 },
	          { name: 'InlineArray4', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray4 },
	          { name: 'InlineArray8', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray8 },
	          { name: 'InlineArray16', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray16 },
	      ];
	      Identifiers.EMPTY_INLINE_ARRAY = {
	          name: 'EMPTY_INLINE_ARRAY',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.EMPTY_INLINE_ARRAY
	      };
	      Identifiers.InlineArrayDynamic = {
	          name: 'InlineArrayDynamic',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.InlineArrayDynamic
	      };
	      Identifiers.subscribeToRenderElement = {
	          name: 'subscribeToRenderElement',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.subscribeToRenderElement
	      };
	      Identifiers.createRenderComponentType = {
	          name: 'createRenderComponentType',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.createRenderComponentType
	      };
	      Identifiers.noop = { name: 'noop', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.noop };
	      return Identifiers;
	  }());
	  /**
	   * @param {?} pkg
	   * @param {?=} path
	   * @param {?=} type
	   * @return {?}
	   */
	  function assetUrl(pkg, path, type) {
	      if (path === void 0) { path = null; }
	      if (type === void 0) { type = 'src'; }
	      if (path == null) {
	          return "@angular/" + pkg + "/index";
	      }
	      else {
	          return "@angular/" + pkg + "/" + type + "/" + path;
	      }
	  }
	  /**
	   * @param {?} identifier
	   * @return {?}
	   */
	  function resolveIdentifier(identifier) {
	      return reflector.resolveIdentifier(identifier.name, identifier.moduleUrl, identifier.runtime);
	  }
	  /**
	   * @param {?} identifier
	   * @return {?}
	   */
	  function createIdentifier(identifier) {
	      var /** @type {?} */ reference = reflector.resolveIdentifier(identifier.name, identifier.moduleUrl, identifier.runtime);
	      return { reference: reference };
	  }
	  /**
	   * @param {?} identifier
	   * @return {?}
	   */
	  function identifierToken(identifier) {
	      return { identifier: identifier };
	  }
	  /**
	   * @param {?} identifier
	   * @return {?}
	   */
	  function createIdentifierToken(identifier) {
	      return identifierToken(createIdentifier(identifier));
	  }
	  /**
	   * @param {?} enumType
	   * @param {?} name
	   * @return {?}
	   */
	  function createEnumIdentifier(enumType, name) {
	      var /** @type {?} */ resolvedEnum = reflector.resolveEnum(resolveIdentifier(enumType), name);
	      return { reference: resolvedEnum };
	  }
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$10 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  // http://cldr.unicode.org/index/cldr-spec/plural-rules
	  var /** @type {?} */ PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];
	  /**
	   *  Expands special forms into elements.
	    * *
	    * For example,
	    * *
	    * ```
	    * { messages.length, plural,
	    * =0 {zero}
	    * =1 {one}
	    * other {more than one}
	    * }
	    * ```
	    * *
	    * will be expanded into
	    * *
	    * ```
	    * <ng-container [ngPlural]="messages.length">
	    * <template ngPluralCase="=0">zero</ng-container>
	    * <template ngPluralCase="=1">one</ng-container>
	    * <template ngPluralCase="other">more than one</ng-container>
	    * </ng-container>
	    * ```
	   * @param {?} nodes
	   * @return {?}
	   */
	  function expandNodes(nodes) {
	      var /** @type {?} */ expander = new _Expander();
	      return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);
	  }
	  var ExpansionResult = (function () {
	      /**
	       * @param {?} nodes
	       * @param {?} expanded
	       * @param {?} errors
	       */
	      function ExpansionResult(nodes, expanded, errors) {
	          this.nodes = nodes;
	          this.expanded = expanded;
	          this.errors = errors;
	      }
	      return ExpansionResult;
	  }());
	  var ExpansionError = (function (_super) {
	      __extends$10(ExpansionError, _super);
	      /**
	       * @param {?} span
	       * @param {?} errorMsg
	       */
	      function ExpansionError(span, errorMsg) {
	          _super.call(this, span, errorMsg);
	      }
	      return ExpansionError;
	  }(ParseError));
	  /**
	   *  Expand expansion forms (plural, select) to directives
	    * *
	   */
	  var _Expander = (function () {
	      function _Expander() {
	          this.isExpanded = false;
	          this.errors = [];
	      }
	      /**
	       * @param {?} element
	       * @param {?} context
	       * @return {?}
	       */
	      _Expander.prototype.visitElement = function (element, context) {
	          return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
	      };
	      /**
	       * @param {?} attribute
	       * @param {?} context
	       * @return {?}
	       */
	      _Expander.prototype.visitAttribute = function (attribute, context) { return attribute; };
	      /**
	       * @param {?} text
	       * @param {?} context
	       * @return {?}
	       */
	      _Expander.prototype.visitText = function (text, context) { return text; };
	      /**
	       * @param {?} comment
	       * @param {?} context
	       * @return {?}
	       */
	      _Expander.prototype.visitComment = function (comment, context) { return comment; };
	      /**
	       * @param {?} icu
	       * @param {?} context
	       * @return {?}
	       */
	      _Expander.prototype.visitExpansion = function (icu, context) {
	          this.isExpanded = true;
	          return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) :
	              _expandDefaultForm(icu, this.errors);
	      };
	      /**
	       * @param {?} icuCase
	       * @param {?} context
	       * @return {?}
	       */
	      _Expander.prototype.visitExpansionCase = function (icuCase, context) {
	          throw new Error('Should not be reached');
	      };
	      return _Expander;
	  }());
	  /**
	   * @param {?} ast
	   * @param {?} errors
	   * @return {?}
	   */
	  function _expandPluralForm(ast, errors) {
	      var /** @type {?} */ children = ast.cases.map(function (c) {
	          if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
	              errors.push(new ExpansionError(c.valueSourceSpan, "Plural cases should be \"=<number>\" or one of " + PLURAL_CASES.join(", ")));
	          }
	          var /** @type {?} */ expansionResult = expandNodes(c.expression);
	          errors.push.apply(errors, expansionResult.errors);
	          return new Element("template", [new Attribute$1('ngPluralCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	      });
	      var /** @type {?} */ switchAttr = new Attribute$1('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);
	      return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
	  }
	  /**
	   * @param {?} ast
	   * @param {?} errors
	   * @return {?}
	   */
	  function _expandDefaultForm(ast, errors) {
	      var /** @type {?} */ children = ast.cases.map(function (c) {
	          var /** @type {?} */ expansionResult = expandNodes(c.expression);
	          errors.push.apply(errors, expansionResult.errors);
	          if (c.value === 'other') {
	              // other is the default case when no values match
	              return new Element("template", [new Attribute$1('ngSwitchDefault', '', c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	          }
	          return new Element("template", [new Attribute$1('ngSwitchCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	      });
	      var /** @type {?} */ switchAttr = new Attribute$1('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);
	      return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
	  }
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$11 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var ProviderError = (function (_super) {
	      __extends$11(ProviderError, _super);
	      /**
	       * @param {?} message
	       * @param {?} span
	       */
	      function ProviderError(message, span) {
	          _super.call(this, span, message);
	      }
	      return ProviderError;
	  }(ParseError));
	  var ProviderViewContext = (function () {
	      /**
	       * @param {?} component
	       * @param {?} sourceSpan
	       */
	      function ProviderViewContext(component, sourceSpan) {
	          var _this = this;
	          this.component = component;
	          this.sourceSpan = sourceSpan;
	          this.errors = [];
	          this.viewQueries = _getViewQueries(component);
	          this.viewProviders = new Map();
	          component.viewProviders.forEach(function (provider) {
	              if (isBlank(_this.viewProviders.get(tokenReference(provider.token)))) {
	                  _this.viewProviders.set(tokenReference(provider.token), true);
	              }
	          });
	      }
	      return ProviderViewContext;
	  }());
	  var ProviderElementContext = (function () {
	      /**
	       * @param {?} viewContext
	       * @param {?} _parent
	       * @param {?} _isViewRoot
	       * @param {?} _directiveAsts
	       * @param {?} attrs
	       * @param {?} refs
	       * @param {?} _sourceSpan
	       */
	      function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, _sourceSpan) {
	          var _this = this;
	          this.viewContext = viewContext;
	          this._parent = _parent;
	          this._isViewRoot = _isViewRoot;
	          this._directiveAsts = _directiveAsts;
	          this._sourceSpan = _sourceSpan;
	          this._transformedProviders = new Map();
	          this._seenProviders = new Map();
	          this._hasViewContainer = false;
	          this._attrs = {};
	          attrs.forEach(function (attrAst) { return _this._attrs[attrAst.name] = attrAst.value; });
	          var directivesMeta = _directiveAsts.map(function (directiveAst) { return directiveAst.directive; });
	          this._allProviders =
	              _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);
	          this._contentQueries = _getContentQueries(directivesMeta);
	          var queriedTokens = new Map();
	          Array.from(this._allProviders.values()).forEach(function (provider) {
	              _this._addQueryReadsTo(provider.token, queriedTokens);
	          });
	          refs.forEach(function (refAst) { _this._addQueryReadsTo({ value: refAst.name }, queriedTokens); });
	          if (isPresent(queriedTokens.get(resolveIdentifier(Identifiers.ViewContainerRef)))) {
	              this._hasViewContainer = true;
	          }
	          // create the providers that we know are eager first
	          Array.from(this._allProviders.values()).forEach(function (provider) {
	              var eager = provider.eager || isPresent(queriedTokens.get(tokenReference(provider.token)));
	              if (eager) {
	                  _this._getOrCreateLocalProvider(provider.providerType, provider.token, true);
	              }
	          });
	      }
	      /**
	       * @return {?}
	       */
	      ProviderElementContext.prototype.afterElement = function () {
	          var _this = this;
	          // collect lazy providers
	          Array.from(this._allProviders.values()).forEach(function (provider) {
	              _this._getOrCreateLocalProvider(provider.providerType, provider.token, false);
	          });
	      };
	      Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
	          /**
	           * @return {?}
	           */
	          get: function () {
	              return Array.from(this._transformedProviders.values());
	          },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
	          /**
	           * @return {?}
	           */
	          get: function () {
	              var /** @type {?} */ sortedProviderTypes = this.transformProviders.map(function (provider) { return provider.token.identifier; });
	              var /** @type {?} */ sortedDirectives = this._directiveAsts.slice();
	              sortedDirectives.sort(function (dir1, dir2) { return sortedProviderTypes.indexOf(dir1.directive.type) -
	                  sortedProviderTypes.indexOf(dir2.directive.type); });
	              return sortedDirectives;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", {
	          /**
	           * @return {?}
	           */
	          get: function () { return this._hasViewContainer; },
	          enumerable: true,
	          configurable: true
	      });
	      /**
	       * @param {?} token
	       * @param {?} queryReadTokens
	       * @return {?}
	       */
	      ProviderElementContext.prototype._addQueryReadsTo = function (token, queryReadTokens) {
	          this._getQueriesFor(token).forEach(function (query) {
	              var /** @type {?} */ queryReadToken = query.read || token;
	              if (isBlank(queryReadTokens.get(tokenReference(queryReadToken)))) {
	                  queryReadTokens.set(tokenReference(queryReadToken), true);
	              }
	          });
	      };
	      /**
	       * @param {?} token
	       * @return {?}
	       */
	      ProviderElementContext.prototype._getQueriesFor = function (token) {
	          var /** @type {?} */ result = [];
	          var /** @type {?} */ currentEl = this;
	          var /** @type {?} */ distance = 0;
	          var /** @type {?} */ queries;
	          while (currentEl !== null) {
	              queries = currentEl._contentQueries.get(tokenReference(token));
	              if (isPresent(queries)) {
	                  result.push.apply(result, queries.filter(function (query) { return query.descendants || distance <= 1; }));
	              }
	              if (currentEl._directiveAsts.length > 0) {
	                  distance++;
	              }
	              currentEl = currentEl._parent;
	          }
	          queries = this.viewContext.viewQueries.get(tokenReference(token));
	          if (isPresent(queries)) {
	              result.push.apply(result, queries);
	          }
	          return result;
	      };
	      /**
	       * @param {?} requestingProviderType
	       * @param {?} token
	       * @param {?} eager
	       * @return {?}
	       */
	      ProviderElementContext.prototype._getOrCreateLocalProvider = function (requestingProviderType, token, eager) {
	          var _this = this;
	          var /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));
	          if (!resolvedProvider || ((requestingProviderType === ProviderAstType.Directive ||
	              requestingProviderType === ProviderAstType.PublicService) &&
	              resolvedProvider.providerType === ProviderAstType.PrivateService) ||
	              ((requestingProviderType === ProviderAstType.PrivateService ||
	                  requestingProviderType === ProviderAstType.PublicService) &&
	                  resolvedProvider.providerType === ProviderAstType.Builtin)) {
	              return null;
	          }
	          var /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));
	          if (isPresent(transformedProviderAst)) {
	              return transformedProviderAst;
	          }
	          if (isPresent(this._seenProviders.get(tokenReference(token)))) {
	              this.viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), this._sourceSpan));
	              return null;
	          }
	          this._seenProviders.set(tokenReference(token), true);
	          var /** @type {?} */ transformedProviders = resolvedProvider.providers.map(function (provider) {
	              var /** @type {?} */ transformedUseValue = provider.useValue;
	              var /** @type {?} */ transformedUseExisting = provider.useExisting;
	              var /** @type {?} */ transformedDeps;
	              if (isPresent(provider.useExisting)) {
	                  var /** @type {?} */ existingDiDep = _this._getDependency(resolvedProvider.providerType, { token: provider.useExisting }, eager);
	                  if (isPresent(existingDiDep.token)) {
	                      transformedUseExisting = existingDiDep.token;
	                  }
	                  else {
	                      transformedUseExisting = null;
	                      transformedUseValue = existingDiDep.value;
	                  }
	              }
	              else if (isPresent(provider.useFactory)) {
	                  var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;
	                  transformedDeps =
	                      deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });
	              }
	              else if (isPresent(provider.useClass)) {
	                  var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;
	                  transformedDeps =
	                      deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });
	              }
	              return _transformProvider(provider, {
	                  useExisting: transformedUseExisting,
	                  useValue: transformedUseValue,
	                  deps: transformedDeps
	              });
	          });
	          transformedProviderAst =
	              _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
	          this._transformedProviders.set(tokenReference(token), transformedProviderAst);
	          return transformedProviderAst;
	      };
	      /**
	       * @param {?} requestingProviderType
	       * @param {?} dep
	       * @param {?=} eager
	       * @return {?}
	       */
	      ProviderElementContext.prototype._getLocalDependency = function (requestingProviderType, dep, eager) {
	          if (eager === void 0) { eager = null; }
	          if (dep.isAttribute) {
	              var /** @type {?} */ attrValue = this._attrs[dep.token.value];
	              return { isValue: true, value: attrValue == null ? null : attrValue };
	          }
	          if (isPresent(dep.token)) {
	              // access builtints
	              if ((requestingProviderType === ProviderAstType.Directive ||
	                  requestingProviderType === ProviderAstType.Component)) {
	                  if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Renderer) ||
	                      tokenReference(dep.token) === resolveIdentifier(Identifiers.ElementRef) ||
	                      tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef) ||
	                      tokenReference(dep.token) === resolveIdentifier(Identifiers.TemplateRef)) {
	                      return dep;
	                  }
	                  if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ViewContainerRef)) {
	                      this._hasViewContainer = true;
	                  }
	              }
	              // access the injector
	              if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector)) {
	                  return dep;
	              }
	              // access providers
	              if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {
	                  return dep;
	              }
	          }
	          return null;
	      };
	      /**
	       * @param {?} requestingProviderType
	       * @param {?} dep
	       * @param {?=} eager
	       * @return {?}
	       */
	      ProviderElementContext.prototype._getDependency = function (requestingProviderType, dep, eager) {
	          if (eager === void 0) { eager = null; }
	          var /** @type {?} */ currElement = this;
	          var /** @type {?} */ currEager = eager;
	          var /** @type {?} */ result = null;
	          if (!dep.isSkipSelf) {
	              result = this._getLocalDependency(requestingProviderType, dep, eager);
	          }
	          if (dep.isSelf) {
	              if (!result && dep.isOptional) {
	                  result = { isValue: true, value: null };
	              }
	          }
	          else {
	              // check parent elements
	              while (!result && isPresent(currElement._parent)) {
	                  var /** @type {?} */ prevElement = currElement;
	                  currElement = currElement._parent;
	                  if (prevElement._isViewRoot) {
	                      currEager = false;
	                  }
	                  result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);
	              }
	              // check @Host restriction
	              if (!result) {
	                  if (!dep.isHost || this.viewContext.component.isHost ||
	                      this.viewContext.component.type.reference === tokenReference(dep.token) ||
	                      isPresent(this.viewContext.viewProviders.get(tokenReference(dep.token)))) {
	                      result = dep;
	                  }
	                  else {
	                      result = dep.isOptional ? result = { isValue: true, value: null } : null;
	                  }
	              }
	          }
	          if (!result) {
	              this.viewContext.errors.push(new ProviderError("No provider for " + tokenName(dep.token), this._sourceSpan));
	          }
	          return result;
	      };
	      return ProviderElementContext;
	  }());
	  var NgModuleProviderAnalyzer = (function () {
	      /**
	       * @param {?} ngModule
	       * @param {?} extraProviders
	       * @param {?} sourceSpan
	       */
	      function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {
	          var _this = this;
	          this._transformedProviders = new Map();
	          this._seenProviders = new Map();
	          this._errors = [];
	          this._allProviders = new Map();
	          ngModule.transitiveModule.modules.forEach(function (ngModuleType) {
	              var ngModuleProvider = { token: { identifier: ngModuleType }, useClass: ngModuleType };
	              _resolveProviders([ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders);
	          });
	          _resolveProviders(ngModule.transitiveModule.providers.map(function (entry) { return entry.provider; }).concat(extraProviders), ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);
	      }
	      /**
	       * @return {?}
	       */
	      NgModuleProviderAnalyzer.prototype.parse = function () {
	          var _this = this;
	          Array.from(this._allProviders.values()).forEach(function (provider) {
	              _this._getOrCreateLocalProvider(provider.token, provider.eager);
	          });
	          if (this._errors.length > 0) {
	              var /** @type {?} */ errorString = this._errors.join('\n');
	              throw new Error("Provider parse errors:\n" + errorString);
	          }
	          return Array.from(this._transformedProviders.values());
	      };
	      /**
	       * @param {?} token
	       * @param {?} eager
	       * @return {?}
	       */
	      NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function (token, eager) {
	          var _this = this;
	          var /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));
	          if (!resolvedProvider) {
	              return null;
	          }
	          var /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));
	          if (isPresent(transformedProviderAst)) {
	              return transformedProviderAst;
	          }
	          if (isPresent(this._seenProviders.get(tokenReference(token)))) {
	              this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), resolvedProvider.sourceSpan));
	              return null;
	          }
	          this._seenProviders.set(tokenReference(token), true);
	          var /** @type {?} */ transformedProviders = resolvedProvider.providers.map(function (provider) {
	              var /** @type {?} */ transformedUseValue = provider.useValue;
	              var /** @type {?} */ transformedUseExisting = provider.useExisting;
	              var /** @type {?} */ transformedDeps;
	              if (isPresent(provider.useExisting)) {
	                  var /** @type {?} */ existingDiDep = _this._getDependency({ token: provider.useExisting }, eager, resolvedProvider.sourceSpan);
	                  if (isPresent(existingDiDep.token)) {
	                      transformedUseExisting = existingDiDep.token;
	                  }
	                  else {
	                      transformedUseExisting = null;
	                      transformedUseValue = existingDiDep.value;
	                  }
	              }
	              else if (isPresent(provider.useFactory)) {
	                  var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;
	                  transformedDeps =
	                      deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });
	              }
	              else if (isPresent(provider.useClass)) {
	                  var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;
	                  transformedDeps =
	                      deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });
	              }
	              return _transformProvider(provider, {
	                  useExisting: transformedUseExisting,
	                  useValue: transformedUseValue,
	                  deps: transformedDeps
	              });
	          });
	          transformedProviderAst =
	              _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
	          this._transformedProviders.set(tokenReference(token), transformedProviderAst);
	          return transformedProviderAst;
	      };
	      /**
	       * @param {?} dep
	       * @param {?=} eager
	       * @param {?} requestorSourceSpan
	       * @return {?}
	       */
	      NgModuleProviderAnalyzer.prototype._getDependency = function (dep, eager, requestorSourceSpan) {
	          if (eager === void 0) { eager = null; }
	          var /** @type {?} */ foundLocal = false;
	          if (!dep.isSkipSelf && isPresent(dep.token)) {
	              // access the injector
	              if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) ||
	                  tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver)) {
	                  foundLocal = true;
	              }
	              else if (isPresent(this._getOrCreateLocalProvider(dep.token, eager))) {
	                  foundLocal = true;
	              }
	          }
	          var /** @type {?} */ result = dep;
	          if (dep.isSelf && !foundLocal) {
	              if (dep.isOptional) {
	                  result = { isValue: true, value: null };
	              }
	              else {
	                  this._errors.push(new ProviderError("No provider for " + tokenName(dep.token), requestorSourceSpan));
	              }
	          }
	          return result;
	      };
	      return NgModuleProviderAnalyzer;
	  }());
	  /**
	   * @param {?} provider
	   * @param {?} __1
	   * @return {?}
	   */
	  function _transformProvider(provider, _a) {
	      var useExisting = _a.useExisting, useValue = _a.useValue, deps = _a.deps;
	      return {
	          token: provider.token,
	          useClass: provider.useClass,
	          useExisting: useExisting,
	          useFactory: provider.useFactory,
	          useValue: useValue,
	          deps: deps,
	          multi: provider.multi
	      };
	  }
	  /**
	   * @param {?} provider
	   * @param {?} __1
	   * @return {?}
	   */
	  function _transformProviderAst(provider, _a) {
	      var eager = _a.eager, providers = _a.providers;
	      return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);
	  }
	  /**
	   * @param {?} directives
	   * @param {?} sourceSpan
	   * @param {?} targetErrors
	   * @return {?}
	   */
	  function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
	      var /** @type {?} */ providersByToken = new Map();
	      directives.forEach(function (directive) {
	          var /** @type {?} */ dirProvider = { token: { identifier: directive.type }, useClass: directive.type };
	          _resolveProviders([dirProvider], directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);
	      });
	      // Note: directives need to be able to overwrite providers of a component!
	      var /** @type {?} */ directivesWithComponentFirst = directives.filter(function (dir) { return dir.isComponent; }).concat(directives.filter(function (dir) { return !dir.isComponent; }));
	      directivesWithComponentFirst.forEach(function (directive) {
	          _resolveProviders(directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);
	          _resolveProviders(directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);
	      });
	      return providersByToken;
	  }
	  /**
	   * @param {?} providers
	   * @param {?} providerType
	   * @param {?} eager
	   * @param {?} sourceSpan
	   * @param {?} targetErrors
	   * @param {?} targetProvidersByToken
	   * @return {?}
	   */
	  function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
	      providers.forEach(function (provider) {
	          var /** @type {?} */ resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));
	          if (isPresent(resolvedProvider) && !!resolvedProvider.multiProvider !== !!provider.multi) {
	              targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + tokenName(resolvedProvider.token), sourceSpan));
	          }
	          if (!resolvedProvider) {
	              var /** @type {?} */ lifecycleHooks = provider.token.identifier &&
	                  ((provider.token.identifier)).lifecycleHooks ?
	                  ((provider.token.identifier)).lifecycleHooks :
	                  [];
	              resolvedProvider = new ProviderAst(provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider], providerType, lifecycleHooks, sourceSpan);
	              targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);
	          }
	          else {
	              if (!provider.multi) {
	                  resolvedProvider.providers.length = 0;
	              }
	              resolvedProvider.providers.push(provider);
	          }
	      });
	  }
	  /**
	   * @param {?} component
	   * @return {?}
	   */
	  function _getViewQueries(component) {
	      var /** @type {?} */ viewQueries = new Map();
	      if (isPresent(component.viewQueries)) {
	          component.viewQueries.forEach(function (query) { return _addQueryToTokenMap(viewQueries, query); });
	      }
	      return viewQueries;
	  }
	  /**
	   * @param {?} directives
	   * @return {?}
	   */
	  function _getContentQueries(directives) {
	      var /** @type {?} */ contentQueries = new Map();
	      directives.forEach(function (directive) {
	          if (isPresent(directive.queries)) {
	              directive.queries.forEach(function (query) { return _addQueryToTokenMap(contentQueries, query); });
	          }
	      });
	      return contentQueries;
	  }
	  /**
	   * @param {?} map
	   * @param {?} query
	   * @return {?}
	   */
	  function _addQueryToTokenMap(map, query) {
	      query.selectors.forEach(function (token) {
	          var /** @type {?} */ entry = map.get(tokenReference(token));
	          if (!entry) {
	              entry = [];
	              map.set(tokenReference(token), entry);
	          }
	          entry.push(query);
	      });
	  }
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  /**
	   * @abstract
	   */
	  var ElementSchemaRegistry = (function () {
	      function ElementSchemaRegistry() {
	      }
	      /**
	       * @abstract
	       * @param {?} tagName
	       * @param {?} propName
	       * @param {?} schemaMetas
	       * @return {?}
	       */
	      ElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) { };
	      /**
	       * @abstract
	       * @param {?} tagName
	       * @param {?} schemaMetas
	       * @return {?}
	       */
	      ElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) { };
	      /**
	       * @abstract
	       * @param {?} elementName
	       * @param {?} propName
	       * @param {?} isAttribute
	       * @return {?}
	       */
	      ElementSchemaRegistry.prototype.securityContext = function (elementName, propName, isAttribute) { };
	      /**
	       * @abstract
	       * @return {?}
	       */
	      ElementSchemaRegistry.prototype.allKnownElementNames = function () { };
	      /**
	       * @abstract
	       * @param {?} propName
	       * @return {?}
	       */
	      ElementSchemaRegistry.prototype.getMappedPropName = function (propName) { };
	      /**
	       * @abstract
	       * @return {?}
	       */
	      ElementSchemaRegistry.prototype.getDefaultComponentElementName = function () { };
	      /**
	       * @abstract
	       * @param {?} name
	       * @return {?}
	       */
	      ElementSchemaRegistry.prototype.validateProperty = function (name) { };
	      /**
	       * @abstract
	       * @param {?} name
	       * @return {?}
	       */
	      ElementSchemaRegistry.prototype.validateAttribute = function (name) { };
	      /**
	       * @abstract
	       * @param {?} propName
	       * @return {?}
	       */
	      ElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) { };
	      /**
	       * @abstract
	       * @param {?} camelCaseProp
	       * @param {?} userProvidedProp
	       * @param {?} val
	       * @return {?}
	       */
	      ElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) { };
	      return ElementSchemaRegistry;
	  }());
	
	  var StyleWithImports = (function () {
	      /**
	       * @param {?} style
	       * @param {?} styleUrls
	       */
	      function StyleWithImports(style, styleUrls) {
	          this.style = style;
	          this.styleUrls = styleUrls;
	      }
	      return StyleWithImports;
	  }());
	  /**
	   * @param {?} url
	   * @return {?}
	   */
	  function isStyleUrlResolvable(url) {
	      if (isBlank(url) || url.length === 0 || url[0] == '/')
	          return false;
	      var /** @type {?} */ schemeMatch = url.match(_urlWithSchemaRe);
	      return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
	  }
	  /**
	   *  Rewrites stylesheets by resolving and removing the @import urls that
	    * are either relative or don't have a `package:` scheme
	   * @param {?} resolver
	   * @param {?} baseUrl
	   * @param {?} cssText
	   * @return {?}
	   */
	  function extractStyleUrls(resolver, baseUrl, cssText) {
	      var /** @type {?} */ foundUrls = [];
	      var /** @type {?} */ modifiedCssText = cssText.replace(_cssImportRe, function () {
	          var m = [];
	          for (var _i = 0; _i < arguments.length; _i++) {
	              m[_i - 0] = arguments[_i];
	          }
	          var /** @type {?} */ url = m[1] || m[2];
	          if (!isStyleUrlResolvable(url)) {
	              // Do not attempt to resolve non-package absolute URLs with URI scheme
	              return m[0];
	          }
	          foundUrls.push(resolver.resolve(baseUrl, url));
	          return '';
	      });
	      return new StyleWithImports(modifiedCssText, foundUrls);
	  }
	  var /** @type {?} */ _cssImportRe = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
	  var /** @type {?} */ _urlWithSchemaRe = /^([^:/?#]+):/;
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$12 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var /** @type {?} */ PROPERTY_PARTS_SEPARATOR = '.';
	  var /** @type {?} */ ATTRIBUTE_PREFIX = 'attr';
	  var /** @type {?} */ CLASS_PREFIX = 'class';
	  var /** @type {?} */ STYLE_PREFIX = 'style';
	  var /** @type {?} */ ANIMATE_PROP_PREFIX = 'animate-';
	  var BoundPropertyType = {};
	  BoundPropertyType.DEFAULT = 0;
	  BoundPropertyType.LITERAL_ATTR = 1;
	  BoundPropertyType.ANIMATION = 2;
	  BoundPropertyType[BoundPropertyType.DEFAULT] = "DEFAULT";
	  BoundPropertyType[BoundPropertyType.LITERAL_ATTR] = "LITERAL_ATTR";
	  BoundPropertyType[BoundPropertyType.ANIMATION] = "ANIMATION";
	  /**
	   *  Represents a parsed property.
	   */
	  var BoundProperty = (function () {
	      /**
	       * @param {?} name
	       * @param {?} expression
	       * @param {?} type
	       * @param {?} sourceSpan
	       */
	      function BoundProperty(name, expression, type, sourceSpan) {
	          this.name = name;
	          this.expression = expression;
	          this.type = type;
	          this.sourceSpan = sourceSpan;
	      }
	      Object.defineProperty(BoundProperty.prototype, "isLiteral", {
	          /**
	           * @return {?}
	           */
	          get: function () { return this.type === BoundPropertyType.LITERAL_ATTR; },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(BoundProperty.prototype, "isAnimation", {
	          /**
	           * @return {?}
	           */
	          get: function () { return this.type === BoundPropertyType.ANIMATION; },
	          enumerable: true,
	          configurable: true
	      });
	      return BoundProperty;
	  }());
	  /**
	   *  Parses bindings in templates and in the directive host area.
	   */
	  var BindingParser = (function () {
	      /**
	       * @param {?} _exprParser
	       * @param {?} _interpolationConfig
	       * @param {?} _schemaRegistry
	       * @param {?} pipes
	       * @param {?} _targetErrors
	       */
	      function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) {
	          var _this = this;
	          this._exprParser = _exprParser;
	          this._interpolationConfig = _interpolationConfig;
	          this._schemaRegistry = _schemaRegistry;
	          this._targetErrors = _targetErrors;
	          this.pipesByName = new Map();
	          pipes.forEach(function (pipe) { return _this.pipesByName.set(pipe.name, pipe); });
	      }
	      /**
	       * @param {?} dirMeta
	       * @param {?} sourceSpan
	       * @return {?}
	       */
	      BindingParser.prototype.createDirectiveHostPropertyAsts = function (dirMeta, sourceSpan) {
	          var _this = this;
	          if (dirMeta.hostProperties) {
	              var /** @type {?} */ boundProps_1 = [];
	              Object.keys(dirMeta.hostProperties).forEach(function (propName) {
	                  var /** @type {?} */ expression = dirMeta.hostProperties[propName];
	                  if (typeof expression === 'string') {
	                      _this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps_1);
	                  }
	                  else {
	                      _this._reportError("Value of the host property binding \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
	                  }
	              });
	              return boundProps_1.map(function (prop) { return _this.createElementPropertyAst(dirMeta.selector, prop); });
	          }
	      };
	      /**
	       * @param {?} dirMeta
	       * @param {?} sourceSpan
	       * @return {?}
	       */
	      BindingParser.prototype.createDirectiveHostEventAsts = function (dirMeta, sourceSpan) {
	          var _this = this;
	          if (dirMeta.hostListeners) {
	              var /** @type {?} */ targetEventAsts_1 = [];
	              Object.keys(dirMeta.hostListeners).forEach(function (propName) {
	                  var /** @type {?} */ expression = dirMeta.hostListeners[propName];
	                  if (typeof expression === 'string') {
	                      _this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts_1);
	                  }
	                  else {
	                      _this._reportError("Value of the host listener \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
	                  }
	              });
	              return targetEventAsts_1;
	          }
	      };
	      /**
	       * @param {?} value
	       * @param {?} sourceSpan
	       * @return {?}
	       */
	      BindingParser.prototype.parseInterpolation = function (value, sourceSpan) {
	          var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	          try {
	              var /** @type {?} */ ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);
	              if (ast)
	                  this._reportExpressionParserErrors(ast.errors, sourceSpan);
	              this._checkPipes(ast, sourceSpan);
	              return ast;
	          }
	          catch (e) {
	              this._reportError("" + e, sourceSpan);
	              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	          }
	      };
	      /**
	       * @param {?} name
	       * @param {?} prefixToken
	       * @param {?} value
	       * @param {?} sourceSpan
	       * @param {?} targetMatchableAttrs
	       * @param {?} targetProps
	       * @param {?} targetVars
	       * @return {?}
	       */
	      BindingParser.prototype.parseInlineTemplateBinding = function (name, prefixToken, value, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {
	          var /** @type {?} */ bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan);
	          for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
	              var /** @type {?} */ binding = bindings[i];
	              if (binding.keyIsVar) {
	                  targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));
	              }
	              else if (isPresent(binding.expression)) {
	                  this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);
	              }
	              else {
	                  targetMatchableAttrs.push([binding.key, '']);
	                  this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);
	              }
	          }
	      };
	      /**
	       * @param {?} prefixToken
	       * @param {?} value
	       * @param {?} sourceSpan
	       * @return {?}
	       */
	      BindingParser.prototype._parseTemplateBindings = function (prefixToken, value, sourceSpan) {
	          var _this = this;
	          var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	          try {
	              var /** @type {?} */ bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);
	              this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);
	              bindingsResult.templateBindings.forEach(function (binding) {
	                  if (isPresent(binding.expression)) {
	                      _this._checkPipes(binding.expression, sourceSpan);
	                  }
	              });
	              bindingsResult.warnings.forEach(function (warning) { _this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING); });
	              return bindingsResult.templateBindings;
	          }
	          catch (e) {
	              this._reportError("" + e, sourceSpan);
	              return [];
	          }
	      };
	      /**
	       * @param {?} name
	       * @param {?} value
	       * @param {?} sourceSpan
	       * @param {?} targetMatchableAttrs
	       * @param {?} targetProps
	       * @return {?}
	       */
	      BindingParser.prototype.parseLiteralAttr = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
	          if (_isAnimationLabel(name)) {
	              name = name.substring(1);
	              if (value) {
	                  this._reportError("Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid." +
	                      " Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.", sourceSpan, ParseErrorLevel.FATAL);
	              }
	              this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);
	          }
	          else {
	              targetProps.push(new BoundProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), BoundPropertyType.LITERAL_ATTR, sourceSpan));
	          }
	      };
	      /**
	       * @param {?} name
	       * @param {?} expression
	       * @param {?} isHost
	       * @param {?} sourceSpan
	       * @param {?} targetMatchableAttrs
	       * @param {?} targetProps
	       * @return {?}
	       */
	      BindingParser.prototype.parsePropertyBinding = function (name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {
	          var /** @type {?} */ isAnimationProp = false;
	          if (name.startsWith(ANIMATE_PROP_PREFIX)) {
	              isAnimationProp = true;
	              name = name.substring(ANIMATE_PROP_PREFIX.length);
	          }
	          else if (_isAnimationLabel(name)) {
	              isAnimationProp = true;
	              name = name.substring(1);
	          }
	          if (isAnimationProp) {
	              this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);
	          }
	          else {
	              this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
	          }
	      };
	      /**
	       * @param {?} name
	       * @param {?} value
	       * @param {?} sourceSpan
	       * @param {?} targetMatchableAttrs
	       * @param {?} targetProps
	       * @return {?}
	       */
	      BindingParser.prototype.parsePropertyInterpolation = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
	          var /** @type {?} */ expr = this.parseInterpolation(value, sourceSpan);
	          if (isPresent(expr)) {
	              this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
	              return true;
	          }
	          return false;
	      };
	      /**
	       * @param {?} name
	       * @param {?} ast
	       * @param {?} sourceSpan
	       * @param {?} targetMatchableAttrs
	       * @param {?} targetProps
	       * @return {?}
	       */
	      BindingParser.prototype._parsePropertyAst = function (name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
	          targetMatchableAttrs.push([name, ast.source]);
	          targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));
	      };
	      /**
	       * @param {?} name
	       * @param {?} expression
	       * @param {?} sourceSpan
	       * @param {?} targetMatchableAttrs
	       * @param {?} targetProps
	       * @return {?}
	       */
	      BindingParser.prototype._parseAnimation = function (name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
	          // This will occur when a @trigger is not paired with an expression.
	          // For animations it is valid to not have an expression since */void
	          // states will be applied by angular when the element is attached/detached
	          var /** @type {?} */ ast = this._parseBinding(expression || 'null', false, sourceSpan);
	          targetMatchableAttrs.push([name, ast.source]);
	          targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));
	      };
	      /**
	       * @param {?} value
	       * @param {?} isHostBinding
	       * @param {?} sourceSpan
	       * @return {?}
	       */
	      BindingParser.prototype._parseBinding = function (value, isHostBinding, sourceSpan) {
	          var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	          try {
	              var /** @type {?} */ ast = isHostBinding ?
	                  this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) :
	                  this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
	              if (ast)
	                  this._reportExpressionParserErrors(ast.errors, sourceSpan);
	              this._checkPipes(ast, sourceSpan);
	              return ast;
	          }
	          catch (e) {
	              this._reportError("" + e, sourceSpan);
	              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	          }
	      };
	      /**
	       * @param {?} elementSelector
	       * @param {?} boundProp
	       * @return {?}
	       */
	      BindingParser.prototype.createElementPropertyAst = function (elementSelector, boundProp) {
	          if (boundProp.isAnimation) {
	              return new BoundElementPropertyAst(boundProp.name, PropertyBindingType.Animation, _angular_core.SecurityContext.NONE, false, boundProp.expression, null, boundProp.sourceSpan);
	          }
	          var /** @type {?} */ unit = null;
	          var /** @type {?} */ bindingType;
	          var /** @type {?} */ boundPropertyName = null;
	          var /** @type {?} */ parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
	          var /** @type {?} */ securityContexts;
	          // Check check for special cases (prefix style, attr, class)
	          if (parts.length > 1) {
	              if (parts[0] == ATTRIBUTE_PREFIX) {
	                  boundPropertyName = parts[1];
	                  this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
	                  securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
	                  var /** @type {?} */ nsSeparatorIdx = boundPropertyName.indexOf(':');
	                  if (nsSeparatorIdx > -1) {
	                      var /** @type {?} */ ns = boundPropertyName.substring(0, nsSeparatorIdx);
	                      var /** @type {?} */ name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);
	                      boundPropertyName = mergeNsAndName(ns, name_1);
	                  }
	                  bindingType = PropertyBindingType.Attribute;
	              }
	              else if (parts[0] == CLASS_PREFIX) {
	                  boundPropertyName = parts[1];
	                  bindingType = PropertyBindingType.Class;
	                  securityContexts = [_angular_core.SecurityContext.NONE];
	              }
	              else if (parts[0] == STYLE_PREFIX) {
	                  unit = parts.length > 2 ? parts[2] : null;
	                  boundPropertyName = parts[1];
	                  bindingType = PropertyBindingType.Style;
	                  securityContexts = [_angular_core.SecurityContext.STYLE];
	              }
	          }
	          // If not a special case, use the full property name
	          if (boundPropertyName === null) {
	              boundPropertyName = this._schemaRegistry.getMappedPropName(boundProp.name);
	              securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, false);
	              bindingType = PropertyBindingType.Property;
	              this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);
	          }
	          return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContexts.length === 1 ? securityContexts[0] : null, securityContexts.length > 1, boundProp.expression, unit, boundProp.sourceSpan);
	      };
	      /**
	       * @param {?} name
	       * @param {?} expression
	       * @param {?} sourceSpan
	       * @param {?} targetMatchableAttrs
	       * @param {?} targetEvents
	       * @return {?}
	       */
	      BindingParser.prototype.parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	          if (_isAnimationLabel(name)) {
	              name = name.substr(1);
	              this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);
	          }
	          else {
	              this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);
	          }
	      };
	      /**
	       * @param {?} name
	       * @param {?} expression
	       * @param {?} sourceSpan
	       * @param {?} targetEvents
	       * @return {?}
	       */
	      BindingParser.prototype._parseAnimationEvent = function (name, expression, sourceSpan, targetEvents) {
	          var /** @type {?} */ matches = splitAtPeriod(name, [name, '']);
	          var /** @type {?} */ eventName = matches[0];
	          var /** @type {?} */ phase = matches[1].toLowerCase();
	          if (phase) {
	              switch (phase) {
	                  case 'start':
	                  case 'done':
	                      var /** @type {?} */ ast = this._parseAction(expression, sourceSpan);
	                      targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));
	                      break;
	                  default:
	                      this._reportError("The provided animation output phase value \"" + phase + "\" for \"@" + eventName + "\" is not supported (use start or done)", sourceSpan);
	                      break;
	              }
	          }
	          else {
	              this._reportError("The animation trigger output event (@" + eventName + ") is missing its phase value name (start or done are currently supported)", sourceSpan);
	          }
	      };
	      /**
	       * @param {?} name
	       * @param {?} expression
	       * @param {?} sourceSpan
	       * @param {?} targetMatchableAttrs
	       * @param {?} targetEvents
	       * @return {?}
	       */
	      BindingParser.prototype._parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	          // long format: 'target: eventName'
	          var _a = splitAtColon(name, [null, name]), target = _a[0], eventName = _a[1];
	          var /** @type {?} */ ast = this._parseAction(expression, sourceSpan);
	          targetMatchableAttrs.push([name, ast.source]);
	          targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));
	          // Don't detect directives for event names for now,
	          // so don't add the event name to the matchableAttrs
	      };
	      /**
	       * @param {?} value
	       * @param {?} sourceSpan
	       * @return {?}
	       */
	      BindingParser.prototype._parseAction = function (value, sourceSpan) {
	          var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	          try {
	              var /** @type {?} */ ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
	              if (ast) {
	                  this._reportExpressionParserErrors(ast.errors, sourceSpan);
	              }
	              if (!ast || ast.ast instanceof EmptyExpr) {
	                  this._reportError("Empty expressions are not allowed", sourceSpan);
	                  return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	              }
	              this._checkPipes(ast, sourceSpan);
	              return ast;
	          }
	          catch (e) {
	              this._reportError("" + e, sourceSpan);
	              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	          }
	      };
	      /**
	       * @param {?} message
	       * @param {?} sourceSpan
	       * @param {?=} level
	       * @return {?}
	       */
	      BindingParser.prototype._reportError = function (message, sourceSpan, level) {
	          if (level === void 0) { level = ParseErrorLevel.FATAL; }
	          this._targetErrors.push(new ParseError(sourceSpan, message, level));
	      };
	      /**
	       * @param {?} errors
	       * @param {?} sourceSpan
	       * @return {?}
	       */
	      BindingParser.prototype._reportExpressionParserErrors = function (errors, sourceSpan) {
	          for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
	              var error = errors_1[_i];
	              this._reportError(error.message, sourceSpan);
	          }
	      };
	      /**
	       * @param {?} ast
	       * @param {?} sourceSpan
	       * @return {?}
	       */
	      BindingParser.prototype._checkPipes = function (ast, sourceSpan) {
	          var _this = this;
	          if (isPresent(ast)) {
	              var /** @type {?} */ collector = new PipeCollector();
	              ast.visit(collector);
	              collector.pipes.forEach(function (ast, pipeName) {
	                  if (!_this.pipesByName.has(pipeName)) {
	                      _this._reportError("The pipe '" + pipeName + "' could not be found", new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));
	                  }
	              });
	          }
	      };
	      /**
	       * @param {?} propName the name of the property / attribute
	       * @param {?} sourceSpan
	       * @param {?} isAttr true when binding to an attribute
	       * @return {?}
	       */
	      BindingParser.prototype._validatePropertyOrAttributeName = function (propName, sourceSpan, isAttr) {
	          var /** @type {?} */ report = isAttr ? this._schemaRegistry.validateAttribute(propName) :
	              this._schemaRegistry.validateProperty(propName);
	          if (report.error) {
	              this._reportError(report.msg, sourceSpan, ParseErrorLevel.FATAL);
	          }
	      };
	      return BindingParser;
	  }());
	  var PipeCollector = (function (_super) {
	      __extends$12(PipeCollector, _super);
	      function PipeCollector() {
	          _super.apply(this, arguments);
	          this.pipes = new Map();
	      }
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      PipeCollector.prototype.visitPipe = function (ast, context) {
	          this.pipes.set(ast.name, ast);
	          ast.exp.visit(this);
	          this.visitAll(ast.args, context);
	          return null;
	      };
	      return PipeCollector;
	  }(RecursiveAstVisitor));
	  /**
	   * @param {?} name
	   * @return {?}
	   */
	  function _isAnimationLabel(name) {
	      return name[0] == '@';
	  }
	  /**
	   * @param {?} registry
	   * @param {?} selector
	   * @param {?} propName
	   * @param {?} isAttribute
	   * @return {?}
	   */
	  function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
	      var /** @type {?} */ ctxs = [];
	      CssSelector.parse(selector).forEach(function (selector) {
	          var /** @type {?} */ elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();
	          var /** @type {?} */ notElementNames = new Set(selector.notSelectors.filter(function (selector) { return selector.isElementSelector(); })
	              .map(function (selector) { return selector.element; }));
	          var /** @type {?} */ possibleElementNames = elementNames.filter(function (elementName) { return !notElementNames.has(elementName); });
	          ctxs.push.apply(ctxs, possibleElementNames.map(function (elementName) { return registry.securityContext(elementName, propName, isAttribute); }));
	      });
	      return ctxs.length === 0 ? [_angular_core.SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();
	  }
	
	  var /** @type {?} */ NG_CONTENT_SELECT_ATTR = 'select';
	  var /** @type {?} */ NG_CONTENT_ELEMENT = 'ng-content';
	  var /** @type {?} */ LINK_ELEMENT = 'link';
	  var /** @type {?} */ LINK_STYLE_REL_ATTR = 'rel';
	  var /** @type {?} */ LINK_STYLE_HREF_ATTR = 'href';
	  var /** @type {?} */ LINK_STYLE_REL_VALUE = 'stylesheet';
	  var /** @type {?} */ STYLE_ELEMENT = 'style';
	  var /** @type {?} */ SCRIPT_ELEMENT = 'script';
	  var /** @type {?} */ NG_NON_BINDABLE_ATTR = 'ngNonBindable';
	  var /** @type {?} */ NG_PROJECT_AS = 'ngProjectAs';
	  /**
	   * @param {?} ast
	   * @return {?}
	   */
	  function preparseElement(ast) {
	      var /** @type {?} */ selectAttr = null;
	      var /** @type {?} */ hrefAttr = null;
	      var /** @type {?} */ relAttr = null;
	      var /** @type {?} */ nonBindable = false;
	      var /** @type {?} */ projectAs = null;
	      ast.attrs.forEach(function (attr) {
	          var /** @type {?} */ lcAttrName = attr.name.toLowerCase();
	          if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
	              selectAttr = attr.value;
	          }
	          else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
	              hrefAttr = attr.value;
	          }
	          else if (lcAttrName == LINK_STYLE_REL_ATTR) {
	              relAttr = attr.value;
	          }
	          else if (attr.name == NG_NON_BINDABLE_ATTR) {
	              nonBindable = true;
	          }
	          else if (attr.name == NG_PROJECT_AS) {
	              if (attr.value.length > 0) {
	                  projectAs = attr.value;
	              }
	          }
	      });
	      selectAttr = normalizeNgContentSelect(selectAttr);
	      var /** @type {?} */ nodeName = ast.name.toLowerCase();
	      var /** @type {?} */ type = PreparsedElementType.OTHER;
	      if (splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
	          type = PreparsedElementType.NG_CONTENT;
	      }
	      else if (nodeName == STYLE_ELEMENT) {
	          type = PreparsedElementType.STYLE;
	      }
	      else if (nodeName == SCRIPT_ELEMENT) {
	          type = PreparsedElementType.SCRIPT;
	      }
	      else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
	          type = PreparsedElementType.STYLESHEET;
	      }
	      return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
	  }
	  var PreparsedElementType = {};
	  PreparsedElementType.NG_CONTENT = 0;
	  PreparsedElementType.STYLE = 1;
	  PreparsedElementType.STYLESHEET = 2;
	  PreparsedElementType.SCRIPT = 3;
	  PreparsedElementType.OTHER = 4;
	  PreparsedElementType[PreparsedElementType.NG_CONTENT] = "NG_CONTENT";
	  PreparsedElementType[PreparsedElementType.STYLE] = "STYLE";
	  PreparsedElementType[PreparsedElementType.STYLESHEET] = "STYLESHEET";
	  PreparsedElementType[PreparsedElementType.SCRIPT] = "SCRIPT";
	  PreparsedElementType[PreparsedElementType.OTHER] = "OTHER";
	  var PreparsedElement = (function () {
	      /**
	       * @param {?} type
	       * @param {?} selectAttr
	       * @param {?} hrefAttr
	       * @param {?} nonBindable
	       * @param {?} projectAs
	       */
	      function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
	          this.type = type;
	          this.selectAttr = selectAttr;
	          this.hrefAttr = hrefAttr;
	          this.nonBindable = nonBindable;
	          this.projectAs = projectAs;
	      }
	      return PreparsedElement;
	  }());
	  /**
	   * @param {?} selectAttr
	   * @return {?}
	   */
	  function normalizeNgContentSelect(selectAttr) {
	      if (selectAttr === null || selectAttr.length === 0) {
	          return '*';
	      }
	      return selectAttr;
	  }
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  // Group 1 = "bind-"
	  // Group 2 = "let-"
	  // Group 3 = "ref-/#"
	  // Group 4 = "on-"
	  // Group 5 = "bindon-"
	  // Group 6 = "@"
	  // Group 7 = the identifier after "bind-", "let-", "ref-/#", "on-", "bindon-" or "@"
	  // Group 8 = identifier inside [()]
	  // Group 9 = identifier inside []
	  // Group 10 = identifier inside ()
	  var /** @type {?} */ BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;
	  var /** @type {?} */ KW_BIND_IDX = 1;
	  var /** @type {?} */ KW_LET_IDX = 2;
	  var /** @type {?} */ KW_REF_IDX = 3;
	  var /** @type {?} */ KW_ON_IDX = 4;
	  var /** @type {?} */ KW_BINDON_IDX = 5;
	  var /** @type {?} */ KW_AT_IDX = 6;
	  var /** @type {?} */ IDENT_KW_IDX = 7;
	  var /** @type {?} */ IDENT_BANANA_BOX_IDX = 8;
	  var /** @type {?} */ IDENT_PROPERTY_IDX = 9;
	  var /** @type {?} */ IDENT_EVENT_IDX = 10;
	  var /** @type {?} */ TEMPLATE_ELEMENT = 'template';
	  var /** @type {?} */ TEMPLATE_ATTR = 'template';
	  var /** @type {?} */ TEMPLATE_ATTR_PREFIX = '*';
	  var /** @type {?} */ CLASS_ATTR = 'class';
	  var /** @type {?} */ TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];
	  /**
	   * Provides an array of {@link TemplateAstVisitor}s which will be used to transform
	   * parsed templates before compilation is invoked, allowing custom expression syntax
	   * and other advanced transformations.
	   *
	   * This is currently an internal-only feature and not meant for general use.
	   */
	  var /** @type {?} */ TEMPLATE_TRANSFORMS = new _angular_core.OpaqueToken('TemplateTransforms');
	  var TemplateParseError = (function (_super) {
	      __extends(TemplateParseError, _super);
	      /**
	       * @param {?} message
	       * @param {?} span
	       * @param {?} level
	       */
	      function TemplateParseError(message, span, level) {
	          _super.call(this, span, message, level);
	      }
	      return TemplateParseError;
	  }(ParseError));
	  var TemplateParseResult = (function () {
	      /**
	       * @param {?=} templateAst
	       * @param {?=} errors
	       */
	      function TemplateParseResult(templateAst, errors) {
	          this.templateAst = templateAst;
	          this.errors = errors;
	      }
	      return TemplateParseResult;
	  }());
	  var TemplateParser = (function () {
	      /**
	       * @param {?} _exprParser
	       * @param {?} _schemaRegistry
	       * @param {?} _htmlParser
	       * @param {?} _console
	       * @param {?} transforms
	       */
	      function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
	          this._exprParser = _exprParser;
	          this._schemaRegistry = _schemaRegistry;
	          this._htmlParser = _htmlParser;
	          this._console = _console;
	          this.transforms = transforms;
	      }
	      /**
	       * @param {?} component
	       * @param {?} template
	       * @param {?} directives
	       * @param {?} pipes
	       * @param {?} schemas
	       * @param {?} templateUrl
	       * @return {?}
	       */
	      TemplateParser.prototype.parse = function (component, template, directives, pipes, schemas, templateUrl) {
	          var /** @type {?} */ result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);
	          var /** @type {?} */ warnings = result.errors.filter(function (error) { return error.level === ParseErrorLevel.WARNING; });
	          var /** @type {?} */ errors = result.errors.filter(function (error) { return error.level === ParseErrorLevel.FATAL; });
	          if (warnings.length > 0) {
	              this._console.warn("Template parse warnings:\n" + warnings.join('\n'));
	          }
	          if (errors.length > 0) {
	              var /** @type {?} */ errorString = errors.join('\n');
	              throw new Error("Template parse errors:\n" + errorString);
	          }
	          return result.templateAst;
	      };
	      /**
	       * @param {?} component
	       * @param {?} template
	       * @param {?} directives
	       * @param {?} pipes
	       * @param {?} schemas
	       * @param {?} templateUrl
	       * @return {?}
	       */
	      TemplateParser.prototype.tryParse = function (component, template, directives, pipes, schemas, templateUrl) {
	          return this.tryParseHtml(this.expandHtml(this._htmlParser.parse(template, templateUrl, true, this.getInterpolationConfig(component))), component, template, directives, pipes, schemas, templateUrl);
	      };
	      /**
	       * @param {?} htmlAstWithErrors
	       * @param {?} component
	       * @param {?} template
	       * @param {?} directives
	       * @param {?} pipes
	       * @param {?} schemas
	       * @param {?} templateUrl
	       * @return {?}
	       */
	      TemplateParser.prototype.tryParseHtml = function (htmlAstWithErrors, component, template, directives, pipes, schemas, templateUrl) {
	          var /** @type {?} */ result;
	          var /** @type {?} */ errors = htmlAstWithErrors.errors;
	          if (htmlAstWithErrors.rootNodes.length > 0) {
	              var /** @type {?} */ uniqDirectives = removeSummaryDuplicates(directives);
	              var /** @type {?} */ uniqPipes = removeSummaryDuplicates(pipes);
	              var /** @type {?} */ providerViewContext = new ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan);
	              var /** @type {?} */ interpolationConfig = void 0;
	              if (component.template && component.template.interpolation) {
	                  interpolationConfig = {
	                      start: component.template.interpolation[0],
	                      end: component.template.interpolation[1]
	                  };
	              }
	              var /** @type {?} */ bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors);
	              var /** @type {?} */ parseVisitor = new TemplateParseVisitor(providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);
	              result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
	              errors.push.apply(errors, providerViewContext.errors);
	          }
	          else {
	              result = [];
	          }
	          this._assertNoReferenceDuplicationOnTemplate(result, errors);
	          if (errors.length > 0) {
	              return new TemplateParseResult(result, errors);
	          }
	          if (isPresent(this.transforms)) {
	              this.transforms.forEach(function (transform) { result = templateVisitAll(transform, result); });
	          }
	          return new TemplateParseResult(result, errors);
	      };
	      /**
	       * @param {?} htmlAstWithErrors
	       * @param {?=} forced
	       * @return {?}
	       */
	      TemplateParser.prototype.expandHtml = function (htmlAstWithErrors, forced) {
	          if (forced === void 0) { forced = false; }
	          var /** @type {?} */ errors = htmlAstWithErrors.errors;
	          if (errors.length == 0 || forced) {
	              // Transform ICU messages to angular directives
	              var /** @type {?} */ expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);
	              errors.push.apply(errors, expandedHtmlAst.errors);
	              htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
	          }
	          return htmlAstWithErrors;
	      };
	      /**
	       * @param {?} component
	       * @return {?}
	       */
	      TemplateParser.prototype.getInterpolationConfig = function (component) {
	          if (component.template) {
	              return InterpolationConfig.fromArray(component.template.interpolation);
	          }
	      };
	      /**
	       * @param {?} result
	       * @param {?} errors
	       * @return {?}
	       */
	      TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function (result, errors) {
	          var /** @type {?} */ existingReferences = [];
	          result.filter(function (element) { return !!((element)).references; })
	              .forEach(function (element) { return ((element)).references.forEach(function (reference) {
	              var /** @type {?} */ name = reference.name;
	              if (existingReferences.indexOf(name) < 0) {
	                  existingReferences.push(name);
	              }
	              else {
	                  var /** @type {?} */ error = new TemplateParseError("Reference \"#" + name + "\" is defined several times", reference.sourceSpan, ParseErrorLevel.FATAL);
	                  errors.push(error);
	              }
	          }); });
	      };
	      TemplateParser.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      TemplateParser.ctorParameters = function () { return [
	          { type: Parser, },
	          { type: ElementSchemaRegistry, },
	          { type: I18NHtmlParser, },
	          { type: Console, },
	          { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [TEMPLATE_TRANSFORMS,] },] },
	      ]; };
	      return TemplateParser;
	  }());
	  var TemplateParseVisitor = (function () {
	      /**
	       * @param {?} providerViewContext
	       * @param {?} directives
	       * @param {?} _bindingParser
	       * @param {?} _schemaRegistry
	       * @param {?} _schemas
	       * @param {?} _targetErrors
	       */
	      function TemplateParseVisitor(providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {
	          var _this = this;
	          this.providerViewContext = providerViewContext;
	          this._bindingParser = _bindingParser;
	          this._schemaRegistry = _schemaRegistry;
	          this._schemas = _schemas;
	          this._targetErrors = _targetErrors;
	          this.selectorMatcher = new SelectorMatcher();
	          this.directivesIndex = new Map();
	          this.ngContentCount = 0;
	          directives.forEach(function (directive, index) {
	              var selector = CssSelector.parse(directive.selector);
	              _this.selectorMatcher.addSelectables(selector, directive);
	              _this.directivesIndex.set(directive, index);
	          });
	      }
	      /**
	       * @param {?} expansion
	       * @param {?} context
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype.visitExpansion = function (expansion, context) { return null; };
	      /**
	       * @param {?} expansionCase
	       * @param {?} context
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return null; };
	      /**
	       * @param {?} text
	       * @param {?} parent
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype.visitText = function (text, parent) {
	          var /** @type {?} */ ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
	          var /** @type {?} */ expr = this._bindingParser.parseInterpolation(text.value, text.sourceSpan);
	          if (isPresent(expr)) {
	              return new BoundTextAst(expr, ngContentIndex, text.sourceSpan);
	          }
	          else {
	              return new TextAst(text.value, ngContentIndex, text.sourceSpan);
	          }
	      };
	      /**
	       * @param {?} attribute
	       * @param {?} context
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype.visitAttribute = function (attribute, context) {
	          return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
	      };
	      /**
	       * @param {?} comment
	       * @param {?} context
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype.visitComment = function (comment, context) { return null; };
	      /**
	       * @param {?} element
	       * @param {?} parent
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype.visitElement = function (element, parent) {
	          var _this = this;
	          var /** @type {?} */ nodeName = element.name;
	          var /** @type {?} */ preparsedElement = preparseElement(element);
	          if (preparsedElement.type === PreparsedElementType.SCRIPT ||
	              preparsedElement.type === PreparsedElementType.STYLE) {
	              // Skipping <script> for security reasons
	              // Skipping <style> as we already processed them
	              // in the StyleCompiler
	              return null;
	          }
	          if (preparsedElement.type === PreparsedElementType.STYLESHEET &&
	              isStyleUrlResolvable(preparsedElement.hrefAttr)) {
	              // Skipping stylesheets with either relative urls or package scheme as we already processed
	              // them in the StyleCompiler
	              return null;
	          }
	          var /** @type {?} */ matchableAttrs = [];
	          var /** @type {?} */ elementOrDirectiveProps = [];
	          var /** @type {?} */ elementOrDirectiveRefs = [];
	          var /** @type {?} */ elementVars = [];
	          var /** @type {?} */ events = [];
	          var /** @type {?} */ templateElementOrDirectiveProps = [];
	          var /** @type {?} */ templateMatchableAttrs = [];
	          var /** @type {?} */ templateElementVars = [];
	          var /** @type {?} */ hasInlineTemplates = false;
	          var /** @type {?} */ attrs = [];
	          var /** @type {?} */ lcElName = splitNsName(nodeName.toLowerCase())[1];
	          var /** @type {?} */ isTemplateElement = lcElName == TEMPLATE_ELEMENT;
	          element.attrs.forEach(function (attr) {
	              var /** @type {?} */ hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);
	              var /** @type {?} */ templateBindingsSource = undefined;
	              var /** @type {?} */ prefixToken = undefined;
	              if (_this._normalizeAttributeName(attr.name) == TEMPLATE_ATTR) {
	                  templateBindingsSource = attr.value;
	              }
	              else if (attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {
	                  templateBindingsSource = attr.value;
	                  prefixToken = attr.name.substring(TEMPLATE_ATTR_PREFIX.length); // remove the star
	              }
	              var /** @type {?} */ hasTemplateBinding = isPresent(templateBindingsSource);
	              if (hasTemplateBinding) {
	                  if (hasInlineTemplates) {
	                      _this._reportError("Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *", attr.sourceSpan);
	                  }
	                  hasInlineTemplates = true;
	                  _this._bindingParser.parseInlineTemplateBinding(attr.name, prefixToken, templateBindingsSource, attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
	              }
	              if (!hasBinding && !hasTemplateBinding) {
	                  // don't include the bindings as attributes as well in the AST
	                  attrs.push(_this.visitAttribute(attr, null));
	                  matchableAttrs.push([attr.name, attr.value]);
	              }
	          });
	          var /** @type {?} */ elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
	          var _a = this._parseDirectives(this.selectorMatcher, elementCssSelector), directiveMetas = _a.directives, matchElement = _a.matchElement;
	          var /** @type {?} */ references = [];
	          var /** @type {?} */ directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references);
	          var /** @type {?} */ elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directiveAsts);
	          var /** @type {?} */ isViewRoot = parent.isTemplateElement || hasInlineTemplates;
	          var /** @type {?} */ providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, element.sourceSpan);
	          var /** @type {?} */ children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
	          providerContext.afterElement();
	          // Override the actual selector when the `ngProjectAs` attribute is provided
	          var /** @type {?} */ projectionSelector = isPresent(preparsedElement.projectAs) ?
	              CssSelector.parse(preparsedElement.projectAs)[0] :
	              elementCssSelector;
	          var /** @type {?} */ ngContentIndex = parent.findNgContentIndex(projectionSelector);
	          var /** @type {?} */ parsedElement;
	          if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
	              if (element.children && !element.children.every(_isEmptyTextNode)) {
	                  this._reportError("<ng-content> element cannot have content.", element.sourceSpan);
	              }
	              parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
	          }
	          else if (isTemplateElement) {
	              this._assertAllEventsPublishedByDirectives(directiveAsts, events);
	              this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);
	              parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
	          }
	          else {
	              this._assertElementExists(matchElement, element);
	              this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
	              var /** @type {?} */ ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
	              parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan, element.endSourceSpan);
	              this._findComponentDirectives(directiveAsts)
	                  .forEach(function (componentDirectiveAst) { return _this._validateElementAnimationInputOutputs(componentDirectiveAst.hostProperties, componentDirectiveAst.hostEvents, componentDirectiveAst.directive.template); });
	              var /** @type {?} */ componentTemplate = providerContext.viewContext.component.template;
	              this._validateElementAnimationInputOutputs(elementProps, events, componentTemplate.toSummary());
	          }
	          if (hasInlineTemplates) {
	              var /** @type {?} */ templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
	              var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateCssSelector).directives;
	              var /** @type {?} */ templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, []);
	              var /** @type {?} */ templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectiveAsts);
	              this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
	              var /** @type {?} */ templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], element.sourceSpan);
	              templateProviderContext.afterElement();
	              parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, [parsedElement], ngContentIndex, element.sourceSpan);
	          }
	          return parsedElement;
	      };
	      /**
	       * @param {?} inputs
	       * @param {?} outputs
	       * @param {?} template
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype._validateElementAnimationInputOutputs = function (inputs, outputs, template) {
	          var _this = this;
	          var /** @type {?} */ triggerLookup = new Set();
	          template.animations.forEach(function (entry) { triggerLookup.add(entry); });
	          var /** @type {?} */ animationInputs = inputs.filter(function (input) { return input.isAnimation; });
	          animationInputs.forEach(function (input) {
	              var /** @type {?} */ name = input.name;
	              if (!triggerLookup.has(name)) {
	                  _this._reportError("Couldn't find an animation entry for \"" + name + "\"", input.sourceSpan);
	              }
	          });
	          outputs.forEach(function (output) {
	              if (output.isAnimation) {
	                  var /** @type {?} */ found = animationInputs.find(function (input) { return input.name == output.name; });
	                  if (!found) {
	                      _this._reportError("Unable to listen on (@" + output.name + "." + output.phase + ") because the animation trigger [@" + output.name + "] isn't being used on the same element", output.sourceSpan);
	                  }
	              }
	          });
	      };
	      /**
	       * @param {?} isTemplateElement
	       * @param {?} attr
	       * @param {?} targetMatchableAttrs
	       * @param {?} targetProps
	       * @param {?} targetEvents
	       * @param {?} targetRefs
	       * @param {?} targetVars
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype._parseAttr = function (isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {
	          var /** @type {?} */ name = this._normalizeAttributeName(attr.name);
	          var /** @type {?} */ value = attr.value;
	          var /** @type {?} */ srcSpan = attr.sourceSpan;
	          var /** @type {?} */ bindParts = name.match(BIND_NAME_REGEXP);
	          var /** @type {?} */ hasBinding = false;
	          if (bindParts !== null) {
	              hasBinding = true;
	              if (isPresent(bindParts[KW_BIND_IDX])) {
	                  this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	              }
	              else if (bindParts[KW_LET_IDX]) {
	                  if (isTemplateElement) {
	                      var /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];
	                      this._parseVariable(identifier, value, srcSpan, targetVars);
	                  }
	                  else {
	                      this._reportError("\"let-\" is only supported on template elements.", srcSpan);
	                  }
	              }
	              else if (bindParts[KW_REF_IDX]) {
	                  var /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];
	                  this._parseReference(identifier, value, srcSpan, targetRefs);
	              }
	              else if (bindParts[KW_ON_IDX]) {
	                  this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	              }
	              else if (bindParts[KW_BINDON_IDX]) {
	                  this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	                  this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	              }
	              else if (bindParts[KW_AT_IDX]) {
	                  this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
	              }
	              else if (bindParts[IDENT_BANANA_BOX_IDX]) {
	                  this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	                  this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	              }
	              else if (bindParts[IDENT_PROPERTY_IDX]) {
	                  this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	              }
	              else if (bindParts[IDENT_EVENT_IDX]) {
	                  this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	              }
	          }
	          else {
	              hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);
	          }
	          if (!hasBinding) {
	              this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
	          }
	          return hasBinding;
	      };
	      /**
	       * @param {?} attrName
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype._normalizeAttributeName = function (attrName) {
	          return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
	      };
	      /**
	       * @param {?} identifier
	       * @param {?} value
	       * @param {?} sourceSpan
	       * @param {?} targetVars
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype._parseVariable = function (identifier, value, sourceSpan, targetVars) {
	          if (identifier.indexOf('-') > -1) {
	              this._reportError("\"-\" is not allowed in variable names", sourceSpan);
	          }
	          targetVars.push(new VariableAst(identifier, value, sourceSpan));
	      };
	      /**
	       * @param {?} identifier
	       * @param {?} value
	       * @param {?} sourceSpan
	       * @param {?} targetRefs
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype._parseReference = function (identifier, value, sourceSpan, targetRefs) {
	          if (identifier.indexOf('-') > -1) {
	              this._reportError("\"-\" is not allowed in reference names", sourceSpan);
	          }
	          targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
	      };
	      /**
	       * @param {?} name
	       * @param {?} expression
	       * @param {?} sourceSpan
	       * @param {?} targetMatchableAttrs
	       * @param {?} targetEvents
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype._parseAssignmentEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	          this._bindingParser.parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
	      };
	      /**
	       * @param {?} selectorMatcher
	       * @param {?} elementCssSelector
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype._parseDirectives = function (selectorMatcher, elementCssSelector) {
	          var _this = this;
	          // Need to sort the directives so that we get consistent results throughout,
	          // as selectorMatcher uses Maps inside.
	          // Also deduplicate directives as they might match more than one time!
	          var /** @type {?} */ directives = new Array(this.directivesIndex.size);
	          // Whether any directive selector matches on the element name
	          var /** @type {?} */ matchElement = false;
	          selectorMatcher.match(elementCssSelector, function (selector, directive) {
	              directives[_this.directivesIndex.get(directive)] = directive;
	              matchElement = matchElement || selector.hasElementSelector();
	          });
	          return {
	              directives: directives.filter(function (dir) { return !!dir; }),
	              matchElement: matchElement,
	          };
	      };
	      /**
	       * @param {?} isTemplateElement
	       * @param {?} elementName
	       * @param {?} directives
	       * @param {?} props
	       * @param {?} elementOrDirectiveRefs
	       * @param {?} elementSourceSpan
	       * @param {?} targetReferences
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype._createDirectiveAsts = function (isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences) {
	          var _this = this;
	          var /** @type {?} */ matchedReferences = new Set();
	          var /** @type {?} */ component = null;
	          var /** @type {?} */ directiveAsts = directives.map(function (directive) {
	              var /** @type {?} */ sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, "Directive " + identifierName(directive.type));
	              if (directive.isComponent) {
	                  component = directive;
	              }
	              var /** @type {?} */ directiveProperties = [];
	              var /** @type {?} */ hostProperties = _this._bindingParser.createDirectiveHostPropertyAsts(directive, sourceSpan);
	              // Note: We need to check the host properties here as well,
	              // as we don't know the element name in the DirectiveWrapperCompiler yet.
	              _this._checkPropertiesInSchema(elementName, hostProperties);
	              var /** @type {?} */ hostEvents = _this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);
	              _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);
	              elementOrDirectiveRefs.forEach(function (elOrDirRef) {
	                  if ((elOrDirRef.value.length === 0 && directive.isComponent) ||
	                      (directive.exportAs == elOrDirRef.value)) {
	                      targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan));
	                      matchedReferences.add(elOrDirRef.name);
	                  }
	              });
	              return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, sourceSpan);
	          });
	          elementOrDirectiveRefs.forEach(function (elOrDirRef) {
	              if (elOrDirRef.value.length > 0) {
	                  if (!matchedReferences.has(elOrDirRef.name)) {
	                      _this._reportError("There is no directive with \"exportAs\" set to \"" + elOrDirRef.value + "\"", elOrDirRef.sourceSpan);
	                  }
	              }
	              else if (!component) {
	                  var /** @type {?} */ refToken = null;
	                  if (isTemplateElement) {
	                      refToken = createIdentifierToken(Identifiers.TemplateRef);
	                  }
	                  targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
	              }
	          }); // fix syntax highlighting issue: `
	          return directiveAsts;
	      };
	      /**
	       * @param {?} directiveProperties
	       * @param {?} boundProps
	       * @param {?} targetBoundDirectiveProps
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype._createDirectivePropertyAsts = function (directiveProperties, boundProps, targetBoundDirectiveProps) {
	          if (directiveProperties) {
	              var /** @type {?} */ boundPropsByName_1 = new Map();
	              boundProps.forEach(function (boundProp) {
	                  var /** @type {?} */ prevValue = boundPropsByName_1.get(boundProp.name);
	                  if (!prevValue || prevValue.isLiteral) {
	                      // give [a]="b" a higher precedence than a="b" on the same element
	                      boundPropsByName_1.set(boundProp.name, boundProp);
	                  }
	              });
	              Object.keys(directiveProperties).forEach(function (dirProp) {
	                  var /** @type {?} */ elProp = directiveProperties[dirProp];
	                  var /** @type {?} */ boundProp = boundPropsByName_1.get(elProp);
	                  // Bindings are optional, so this binding only needs to be set up if an expression is given.
	                  if (boundProp) {
	                      targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
	                  }
	              });
	          }
	      };
	      /**
	       * @param {?} elementName
	       * @param {?} props
	       * @param {?} directives
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype._createElementPropertyAsts = function (elementName, props, directives) {
	          var _this = this;
	          var /** @type {?} */ boundElementProps = [];
	          var /** @type {?} */ boundDirectivePropsIndex = new Map();
	          directives.forEach(function (directive) {
	              directive.inputs.forEach(function (prop) {
	                  boundDirectivePropsIndex.set(prop.templateName, prop);
	              });
	          });
	          props.forEach(function (prop) {
	              if (!prop.isLiteral && !boundDirectivePropsIndex.get(prop.name)) {
	                  boundElementProps.push(_this._bindingParser.createElementPropertyAst(elementName, prop));
	              }
	          });
	          this._checkPropertiesInSchema(elementName, boundElementProps);
	          return boundElementProps;
	      };
	      /**
	       * @param {?} directives
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype._findComponentDirectives = function (directives) {
	          return directives.filter(function (directive) { return directive.directive.isComponent; });
	      };
	      /**
	       * @param {?} directives
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype._findComponentDirectiveNames = function (directives) {
	          return this._findComponentDirectives(directives)
	              .map(function (directive) { return identifierName(directive.directive.type); });
	      };
	      /**
	       * @param {?} directives
	       * @param {?} sourceSpan
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype._assertOnlyOneComponent = function (directives, sourceSpan) {
	          var /** @type {?} */ componentTypeNames = this._findComponentDirectiveNames(directives);
	          if (componentTypeNames.length > 1) {
	              this._reportError("More than one component matched on this element.\n" +
	                  "Make sure that only one component's selector can match a given element.\n" +
	                  ("Conflicting components: " + componentTypeNames.join(',')), sourceSpan);
	          }
	      };
	      /**
	       *  Make sure that non-angular tags conform to the schemas.
	        * *
	        * Note: An element is considered an angular tag when at least one directive selector matches the
	        * tag name.
	        * *
	       * @param {?} matchElement Whether any directive has matched on the tag name
	       * @param {?} element the html element
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype._assertElementExists = function (matchElement, element) {
	          var /** @type {?} */ elName = element.name.replace(/^:xhtml:/, '');
	          if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {
	              var /** @type {?} */ errorMsg = ("'" + elName + "' is not a known element:\n") +
	                  ("1. If '" + elName + "' is an Angular component, then verify that it is part of this module.\n") +
	                  ("2. If '" + elName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message.");
	              this._reportError(errorMsg, element.sourceSpan);
	          }
	      };
	      /**
	       * @param {?} directives
	       * @param {?} elementProps
	       * @param {?} sourceSpan
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function (directives, elementProps, sourceSpan) {
	          var _this = this;
	          var /** @type {?} */ componentTypeNames = this._findComponentDirectiveNames(directives);
	          if (componentTypeNames.length > 0) {
	              this._reportError("Components on an embedded template: " + componentTypeNames.join(','), sourceSpan);
	          }
	          elementProps.forEach(function (prop) {
	              _this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".", sourceSpan);
	          });
	      };
	      /**
	       * @param {?} directives
	       * @param {?} events
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function (directives, events) {
	          var _this = this;
	          var /** @type {?} */ allDirectiveEvents = new Set();
	          directives.forEach(function (directive) {
	              Object.keys(directive.directive.outputs).forEach(function (k) {
	                  var /** @type {?} */ eventName = directive.directive.outputs[k];
	                  allDirectiveEvents.add(eventName);
	              });
	          });
	          events.forEach(function (event) {
	              if (isPresent(event.target) || !allDirectiveEvents.has(event.name)) {
	                  _this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".", event.sourceSpan);
	              }
	          });
	      };
	      /**
	       * @param {?} elementName
	       * @param {?} boundProps
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype._checkPropertiesInSchema = function (elementName, boundProps) {
	          var _this = this;
	          boundProps.forEach(function (boundProp) {
	              if (boundProp.type === PropertyBindingType.Property &&
	                  !_this._schemaRegistry.hasProperty(elementName, boundProp.name, _this._schemas)) {
	                  var /** @type {?} */ errorMsg = "Can't bind to '" + boundProp.name + "' since it isn't a known property of '" + elementName + "'.";
	                  if (elementName.indexOf('-') > -1) {
	                      errorMsg +=
	                          ("\n1. If '" + elementName + "' is an Angular component and it has '" + boundProp.name + "' input, then verify that it is part of this module.") +
	                              ("\n2. If '" + elementName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message.\n");
	                  }
	                  _this._reportError(errorMsg, boundProp.sourceSpan);
	              }
	          });
	      };
	      /**
	       * @param {?} message
	       * @param {?} sourceSpan
	       * @param {?=} level
	       * @return {?}
	       */
	      TemplateParseVisitor.prototype._reportError = function (message, sourceSpan, level) {
	          if (level === void 0) { level = ParseErrorLevel.FATAL; }
	          this._targetErrors.push(new ParseError(sourceSpan, message, level));
	      };
	      return TemplateParseVisitor;
	  }());
	  var NonBindableVisitor = (function () {
	      function NonBindableVisitor() {
	      }
	      /**
	       * @param {?} ast
	       * @param {?} parent
	       * @return {?}
	       */
	      NonBindableVisitor.prototype.visitElement = function (ast, parent) {
	          var /** @type {?} */ preparsedElement = preparseElement(ast);
	          if (preparsedElement.type === PreparsedElementType.SCRIPT ||
	              preparsedElement.type === PreparsedElementType.STYLE ||
	              preparsedElement.type === PreparsedElementType.STYLESHEET) {
	              // Skipping <script> for security reasons
	              // Skipping <style> and stylesheets as we already processed them
	              // in the StyleCompiler
	              return null;
	          }
	          var /** @type {?} */ attrNameAndValues = ast.attrs.map(function (attrAst) { return [attrAst.name, attrAst.value]; });
	          var /** @type {?} */ selector = createElementCssSelector(ast.name, attrNameAndValues);
	          var /** @type {?} */ ngContentIndex = parent.findNgContentIndex(selector);
	          var /** @type {?} */ children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
	          return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], false, children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);
	      };
	      /**
	       * @param {?} comment
	       * @param {?} context
	       * @return {?}
	       */
	      NonBindableVisitor.prototype.visitComment = function (comment, context) { return null; };
	      /**
	       * @param {?} attribute
	       * @param {?} context
	       * @return {?}
	       */
	      NonBindableVisitor.prototype.visitAttribute = function (attribute, context) {
	          return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
	      };
	      /**
	       * @param {?} text
	       * @param {?} parent
	       * @return {?}
	       */
	      NonBindableVisitor.prototype.visitText = function (text, parent) {
	          var /** @type {?} */ ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
	          return new TextAst(text.value, ngContentIndex, text.sourceSpan);
	      };
	      /**
	       * @param {?} expansion
	       * @param {?} context
	       * @return {?}
	       */
	      NonBindableVisitor.prototype.visitExpansion = function (expansion, context) { return expansion; };
	      /**
	       * @param {?} expansionCase
	       * @param {?} context
	       * @return {?}
	       */
	      NonBindableVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return expansionCase; };
	      return NonBindableVisitor;
	  }());
	  var ElementOrDirectiveRef = (function () {
	      /**
	       * @param {?} name
	       * @param {?} value
	       * @param {?} sourceSpan
	       */
	      function ElementOrDirectiveRef(name, value, sourceSpan) {
	          this.name = name;
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      return ElementOrDirectiveRef;
	  }());
	  /**
	   * @param {?} classAttrValue
	   * @return {?}
	   */
	  function splitClasses(classAttrValue) {
	      return classAttrValue.trim().split(/\s+/g);
	  }
	  var ElementContext = (function () {
	      /**
	       * @param {?} isTemplateElement
	       * @param {?} _ngContentIndexMatcher
	       * @param {?} _wildcardNgContentIndex
	       * @param {?} providerContext
	       */
	      function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
	          this.isTemplateElement = isTemplateElement;
	          this._ngContentIndexMatcher = _ngContentIndexMatcher;
	          this._wildcardNgContentIndex = _wildcardNgContentIndex;
	          this.providerContext = providerContext;
	      }
	      /**
	       * @param {?} isTemplateElement
	       * @param {?} directives
	       * @param {?} providerContext
	       * @return {?}
	       */
	      ElementContext.create = function (isTemplateElement, directives, providerContext) {
	          var /** @type {?} */ matcher = new SelectorMatcher();
	          var /** @type {?} */ wildcardNgContentIndex = null;
	          var /** @type {?} */ component = directives.find(function (directive) { return directive.directive.isComponent; });
	          if (component) {
	              var /** @type {?} */ ngContentSelectors = component.directive.template.ngContentSelectors;
	              for (var /** @type {?} */ i = 0; i < ngContentSelectors.length; i++) {
	                  var /** @type {?} */ selector = ngContentSelectors[i];
	                  if (selector === '*') {
	                      wildcardNgContentIndex = i;
	                  }
	                  else {
	                      matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
	                  }
	              }
	          }
	          return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
	      };
	      /**
	       * @param {?} selector
	       * @return {?}
	       */
	      ElementContext.prototype.findNgContentIndex = function (selector) {
	          var /** @type {?} */ ngContentIndices = [];
	          this._ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) { ngContentIndices.push(ngContentIndex); });
	          ngContentIndices.sort();
	          if (isPresent(this._wildcardNgContentIndex)) {
	              ngContentIndices.push(this._wildcardNgContentIndex);
	          }
	          return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
	      };
	      return ElementContext;
	  }());
	  /**
	   * @param {?} elementName
	   * @param {?} matchableAttrs
	   * @return {?}
	   */
	  function createElementCssSelector(elementName, matchableAttrs) {
	      var /** @type {?} */ cssSelector = new CssSelector();
	      var /** @type {?} */ elNameNoNs = splitNsName(elementName)[1];
	      cssSelector.setElement(elNameNoNs);
	      for (var /** @type {?} */ i = 0; i < matchableAttrs.length; i++) {
	          var /** @type {?} */ attrName = matchableAttrs[i][0];
	          var /** @type {?} */ attrNameNoNs = splitNsName(attrName)[1];
	          var /** @type {?} */ attrValue = matchableAttrs[i][1];
	          cssSelector.addAttribute(attrNameNoNs, attrValue);
	          if (attrName.toLowerCase() == CLASS_ATTR) {
	              var /** @type {?} */ classes = splitClasses(attrValue);
	              classes.forEach(function (className) { return cssSelector.addClassName(className); });
	          }
	      }
	      return cssSelector;
	  }
	  var /** @type {?} */ EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);
	  var /** @type {?} */ NON_BINDABLE_VISITOR = new NonBindableVisitor();
	  /**
	   * @param {?} node
	   * @return {?}
	   */
	  function _isEmptyTextNode(node) {
	      return node instanceof Text && node.value.trim().length == 0;
	  }
	  /**
	   * @param {?} items
	   * @return {?}
	   */
	  function removeSummaryDuplicates(items) {
	      var /** @type {?} */ map = new Map();
	      items.forEach(function (item) {
	          if (!map.get(item.type.reference)) {
	              map.set(item.type.reference, item);
	          }
	      });
	      return Array.from(map.values());
	  }
	
	  /**
	   * @return {?}
	   */
	  function unimplemented$1() {
	      throw new Error('unimplemented');
	  }
	  var CompilerConfig = (function () {
	      /**
	       * @param {?=} __0
	       */
	      function CompilerConfig(_a) {
	          var _b = _a === void 0 ? {} : _a, _c = _b.renderTypes, renderTypes = _c === void 0 ? new DefaultRenderTypes() : _c, _d = _b.defaultEncapsulation, defaultEncapsulation = _d === void 0 ? _angular_core.ViewEncapsulation.Emulated : _d, genDebugInfo = _b.genDebugInfo, logBindingUpdate = _b.logBindingUpdate, _e = _b.useJit, useJit = _e === void 0 ? true : _e;
	          this.renderTypes = renderTypes;
	          this.defaultEncapsulation = defaultEncapsulation;
	          this._genDebugInfo = genDebugInfo;
	          this._logBindingUpdate = logBindingUpdate;
	          this.useJit = useJit;
	      }
	      Object.defineProperty(CompilerConfig.prototype, "genDebugInfo", {
	          /**
	           * @return {?}
	           */
	          get: function () {
	              return this._genDebugInfo === void 0 ? _angular_core.isDevMode() : this._genDebugInfo;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(CompilerConfig.prototype, "logBindingUpdate", {
	          /**
	           * @return {?}
	           */
	          get: function () {
	              return this._logBindingUpdate === void 0 ? _angular_core.isDevMode() : this._logBindingUpdate;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      return CompilerConfig;
	  }());
	  /**
	   *  Types used for the renderer.
	    * Can be replaced to specialize the generated output to a specific renderer
	    * to help tree shaking.
	   * @abstract
	   */
	  var RenderTypes = (function () {
	      function RenderTypes() {
	      }
	      Object.defineProperty(RenderTypes.prototype, "renderer", {
	          /**
	           * @return {?}
	           */
	          get: function () { return unimplemented$1(); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(RenderTypes.prototype, "renderText", {
	          /**
	           * @return {?}
	           */
	          get: function () { return unimplemented$1(); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(RenderTypes.prototype, "renderElement", {
	          /**
	           * @return {?}
	           */
	          get: function () { return unimplemented$1(); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(RenderTypes.prototype, "renderComment", {
	          /**
	           * @return {?}
	           */
	          get: function () { return unimplemented$1(); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(RenderTypes.prototype, "renderNode", {
	          /**
	           * @return {?}
	           */
	          get: function () { return unimplemented$1(); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(RenderTypes.prototype, "renderEvent", {
	          /**
	           * @return {?}
	           */
	          get: function () { return unimplemented$1(); },
	          enumerable: true,
	          configurable: true
	      });
	      return RenderTypes;
	  }());
	  var DefaultRenderTypes = (function () {
	      function DefaultRenderTypes() {
	          this.renderText = null;
	          this.renderElement = null;
	          this.renderComment = null;
	          this.renderNode = null;
	          this.renderEvent = null;
	      }
	      Object.defineProperty(DefaultRenderTypes.prototype, "renderer", {
	          /**
	           * @return {?}
	           */
	          get: function () { return createIdentifier(Identifiers.Renderer); },
	          enumerable: true,
	          configurable: true
	      });
	      ;
	      return DefaultRenderTypes;
	  }());
	
	  var __extends$14 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  /**
	   * @license undefined
	    * Copyright Google Inc. All Rights Reserved.
	    * *
	    * Use of this source code is governed by an MIT-style license that can be
	    * found in the LICENSE file at https://angular.io/license
	   * @abstract
	   */
	  var AnimationAst = (function () {
	      function AnimationAst() {
	          this.startTime = 0;
	          this.playTime = 0;
	      }
	      /**
	       * @abstract
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      AnimationAst.prototype.visit = function (visitor, context) { };
	      return AnimationAst;
	  }());
	  /**
	   * @abstract
	   */
	  var AnimationStateAst = (function (_super) {
	      __extends$14(AnimationStateAst, _super);
	      function AnimationStateAst() {
	          _super.apply(this, arguments);
	      }
	      /**
	       * @abstract
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      AnimationStateAst.prototype.visit = function (visitor, context) { };
	      return AnimationStateAst;
	  }(AnimationAst));
	  var AnimationEntryAst = (function (_super) {
	      __extends$14(AnimationEntryAst, _super);
	      /**
	       * @param {?} name
	       * @param {?} stateDeclarations
	       * @param {?} stateTransitions
	       */
	      function AnimationEntryAst(name, stateDeclarations, stateTransitions) {
	          _super.call(this);
	          this.name = name;
	          this.stateDeclarations = stateDeclarations;
	          this.stateTransitions = stateTransitions;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      AnimationEntryAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationEntry(this, context);
	      };
	      return AnimationEntryAst;
	  }(AnimationAst));
	  var AnimationStateDeclarationAst = (function (_super) {
	      __extends$14(AnimationStateDeclarationAst, _super);
	      /**
	       * @param {?} stateName
	       * @param {?} styles
	       */
	      function AnimationStateDeclarationAst(stateName, styles) {
	          _super.call(this);
	          this.stateName = stateName;
	          this.styles = styles;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      AnimationStateDeclarationAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationStateDeclaration(this, context);
	      };
	      return AnimationStateDeclarationAst;
	  }(AnimationStateAst));
	  var AnimationStateTransitionExpression = (function () {
	      /**
	       * @param {?} fromState
	       * @param {?} toState
	       */
	      function AnimationStateTransitionExpression(fromState, toState) {
	          this.fromState = fromState;
	          this.toState = toState;
	      }
	      return AnimationStateTransitionExpression;
	  }());
	  var AnimationStateTransitionAst = (function (_super) {
	      __extends$14(AnimationStateTransitionAst, _super);
	      /**
	       * @param {?} stateChanges
	       * @param {?} animation
	       */
	      function AnimationStateTransitionAst(stateChanges, animation) {
	          _super.call(this);
	          this.stateChanges = stateChanges;
	          this.animation = animation;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      AnimationStateTransitionAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationStateTransition(this, context);
	      };
	      return AnimationStateTransitionAst;
	  }(AnimationStateAst));
	  var AnimationStepAst = (function (_super) {
	      __extends$14(AnimationStepAst, _super);
	      /**
	       * @param {?} startingStyles
	       * @param {?} keyframes
	       * @param {?} duration
	       * @param {?} delay
	       * @param {?} easing
	       */
	      function AnimationStepAst(startingStyles, keyframes, duration, delay, easing) {
	          _super.call(this);
	          this.startingStyles = startingStyles;
	          this.keyframes = keyframes;
	          this.duration = duration;
	          this.delay = delay;
	          this.easing = easing;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      AnimationStepAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationStep(this, context);
	      };
	      return AnimationStepAst;
	  }(AnimationAst));
	  var AnimationStylesAst = (function (_super) {
	      __extends$14(AnimationStylesAst, _super);
	      /**
	       * @param {?} styles
	       */
	      function AnimationStylesAst(styles) {
	          _super.call(this);
	          this.styles = styles;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      AnimationStylesAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationStyles(this, context);
	      };
	      return AnimationStylesAst;
	  }(AnimationAst));
	  var AnimationKeyframeAst = (function (_super) {
	      __extends$14(AnimationKeyframeAst, _super);
	      /**
	       * @param {?} offset
	       * @param {?} styles
	       */
	      function AnimationKeyframeAst(offset, styles) {
	          _super.call(this);
	          this.offset = offset;
	          this.styles = styles;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      AnimationKeyframeAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationKeyframe(this, context);
	      };
	      return AnimationKeyframeAst;
	  }(AnimationAst));
	  /**
	   * @abstract
	   */
	  var AnimationWithStepsAst = (function (_super) {
	      __extends$14(AnimationWithStepsAst, _super);
	      /**
	       * @param {?} steps
	       */
	      function AnimationWithStepsAst(steps) {
	          _super.call(this);
	          this.steps = steps;
	      }
	      return AnimationWithStepsAst;
	  }(AnimationAst));
	  var AnimationGroupAst = (function (_super) {
	      __extends$14(AnimationGroupAst, _super);
	      /**
	       * @param {?} steps
	       */
	      function AnimationGroupAst(steps) {
	          _super.call(this, steps);
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      AnimationGroupAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationGroup(this, context);
	      };
	      return AnimationGroupAst;
	  }(AnimationWithStepsAst));
	  var AnimationSequenceAst = (function (_super) {
	      __extends$14(AnimationSequenceAst, _super);
	      /**
	       * @param {?} steps
	       */
	      function AnimationSequenceAst(steps) {
	          _super.call(this, steps);
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      AnimationSequenceAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationSequence(this, context);
	      };
	      return AnimationSequenceAst;
	  }(AnimationWithStepsAst));
	
	  var StylesCollectionEntry = (function () {
	      /**
	       * @param {?} time
	       * @param {?} value
	       */
	      function StylesCollectionEntry(time, value) {
	          this.time = time;
	          this.value = value;
	      }
	      /**
	       * @param {?} time
	       * @param {?} value
	       * @return {?}
	       */
	      StylesCollectionEntry.prototype.matches = function (time, value) {
	          return time == this.time && value == this.value;
	      };
	      return StylesCollectionEntry;
	  }());
	  var StylesCollection = (function () {
	      function StylesCollection() {
	          this.styles = {};
	      }
	      /**
	       * @param {?} property
	       * @param {?} time
	       * @param {?} value
	       * @return {?}
	       */
	      StylesCollection.prototype.insertAtTime = function (property, time, value) {
	          var /** @type {?} */ tuple = new StylesCollectionEntry(time, value);
	          var /** @type {?} */ entries = this.styles[property];
	          if (!isPresent(entries)) {
	              entries = this.styles[property] = [];
	          }
	          // insert this at the right stop in the array
	          // this way we can keep it sorted
	          var /** @type {?} */ insertionIndex = 0;
	          for (var /** @type {?} */ i = entries.length - 1; i >= 0; i--) {
	              if (entries[i].time <= time) {
	                  insertionIndex = i + 1;
	                  break;
	              }
	          }
	          entries.splice(insertionIndex, 0, tuple);
	      };
	      /**
	       * @param {?} property
	       * @param {?} index
	       * @return {?}
	       */
	      StylesCollection.prototype.getByIndex = function (property, index) {
	          var /** @type {?} */ items = this.styles[property];
	          if (isPresent(items)) {
	              return index >= items.length ? null : items[index];
	          }
	          return null;
	      };
	      /**
	       * @param {?} property
	       * @param {?} time
	       * @return {?}
	       */
	      StylesCollection.prototype.indexOfAtOrBeforeTime = function (property, time) {
	          var /** @type {?} */ entries = this.styles[property];
	          if (isPresent(entries)) {
	              for (var /** @type {?} */ i = entries.length - 1; i >= 0; i--) {
	                  if (entries[i].time <= time)
	                      return i;
	              }
	          }
	          return null;
	      };
	      return StylesCollection;
	  }());
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$13 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var /** @type {?} */ _INITIAL_KEYFRAME = 0;
	  var /** @type {?} */ _TERMINAL_KEYFRAME = 1;
	  var /** @type {?} */ _ONE_SECOND = 1000;
	  var AnimationParseError = (function (_super) {
	      __extends$13(AnimationParseError, _super);
	      /**
	       * @param {?} message
	       */
	      function AnimationParseError(message) {
	          _super.call(this, null, message);
	      }
	      /**
	       * @return {?}
	       */
	      AnimationParseError.prototype.toString = function () { return "" + this.msg; };
	      return AnimationParseError;
	  }(ParseError));
	  var AnimationEntryParseResult = (function () {
	      /**
	       * @param {?} ast
	       * @param {?} errors
	       */
	      function AnimationEntryParseResult(ast, errors) {
	          this.ast = ast;
	          this.errors = errors;
	      }
	      return AnimationEntryParseResult;
	  }());
	  var AnimationParser = (function () {
	      /**
	       * @param {?} _schema
	       */
	      function AnimationParser(_schema) {
	          this._schema = _schema;
	      }
	      /**
	       * @param {?} component
	       * @return {?}
	       */
	      AnimationParser.prototype.parseComponent = function (component) {
	          var _this = this;
	          var /** @type {?} */ errors = [];
	          var /** @type {?} */ componentName = identifierName(component.type);
	          var /** @type {?} */ animationTriggerNames = new Set();
	          var /** @type {?} */ asts = component.template.animations.map(function (entry) {
	              var /** @type {?} */ result = _this.parseEntry(entry);
	              var /** @type {?} */ ast = result.ast;
	              var /** @type {?} */ triggerName = ast.name;
	              if (animationTriggerNames.has(triggerName)) {
	                  result.errors.push(new AnimationParseError("The animation trigger \"" + triggerName + "\" has already been registered for the " + componentName + " component"));
	              }
	              else {
	                  animationTriggerNames.add(triggerName);
	              }
	              if (result.errors.length > 0) {
	                  var /** @type {?} */ errorMessage_1 = "- Unable to parse the animation sequence for \"" + triggerName + "\" on the " + componentName + " component due to the following errors:";
	                  result.errors.forEach(function (error) { errorMessage_1 += '\n-- ' + error.msg; });
	                  errors.push(errorMessage_1);
	              }
	              return ast;
	          });
	          if (errors.length > 0) {
	              var /** @type {?} */ errorString = errors.join('\n');
	              throw new Error("Animation parse errors:\n" + errorString);
	          }
	          return asts;
	      };
	      /**
	       * @param {?} entry
	       * @return {?}
	       */
	      AnimationParser.prototype.parseEntry = function (entry) {
	          var _this = this;
	          var /** @type {?} */ errors = [];
	          var /** @type {?} */ stateStyles = {};
	          var /** @type {?} */ transitions = [];
	          var /** @type {?} */ stateDeclarationAsts = [];
	          entry.definitions.forEach(function (def) {
	              if (def instanceof CompileAnimationStateDeclarationMetadata) {
	                  _parseAnimationDeclarationStates(def, _this._schema, errors).forEach(function (ast) {
	                      stateDeclarationAsts.push(ast);
	                      stateStyles[ast.stateName] = ast.styles;
	                  });
	              }
	              else {
	                  transitions.push(/** @type {?} */ (def));
	              }
	          });
	          var /** @type {?} */ stateTransitionAsts = transitions.map(function (transDef) { return _parseAnimationStateTransition(transDef, stateStyles, _this._schema, errors); });
	          var /** @type {?} */ ast = new AnimationEntryAst(entry.name, stateDeclarationAsts, stateTransitionAsts);
	          return new AnimationEntryParseResult(ast, errors);
	      };
	      AnimationParser.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      AnimationParser.ctorParameters = function () { return [
	          { type: ElementSchemaRegistry, },
	      ]; };
	      return AnimationParser;
	  }());
	  /**
	   * @param {?} stateMetadata
	   * @param {?} schema
	   * @param {?} errors
	   * @return {?}
	   */
	  function _parseAnimationDeclarationStates(stateMetadata, schema, errors) {
	      var /** @type {?} */ normalizedStyles = _normalizeStyleMetadata(stateMetadata.styles, {}, schema, errors, false);
	      var /** @type {?} */ defStyles = new AnimationStylesAst(normalizedStyles);
	      var /** @type {?} */ states = stateMetadata.stateNameExpr.split(/\s*,\s*/);
	      return states.map(function (state) { return new AnimationStateDeclarationAst(state, defStyles); });
	  }
	  /**
	   * @param {?} transitionStateMetadata
	   * @param {?} stateStyles
	   * @param {?} schema
	   * @param {?} errors
	   * @return {?}
	   */
	  function _parseAnimationStateTransition(transitionStateMetadata, stateStyles, schema, errors) {
	      var /** @type {?} */ styles = new StylesCollection();
	      var /** @type {?} */ transitionExprs = [];
	      var /** @type {?} */ transitionStates = transitionStateMetadata.stateChangeExpr.split(/\s*,\s*/);
	      transitionStates.forEach(function (expr) { transitionExprs.push.apply(transitionExprs, _parseAnimationTransitionExpr(expr, errors)); });
	      var /** @type {?} */ entry = _normalizeAnimationEntry(transitionStateMetadata.steps);
	      var /** @type {?} */ animation = _normalizeStyleSteps(entry, stateStyles, schema, errors);
	      var /** @type {?} */ animationAst = _parseTransitionAnimation(animation, 0, styles, stateStyles, errors);
	      if (errors.length == 0) {
	          _fillAnimationAstStartingKeyframes(animationAst, styles, errors);
	      }
	      var /** @type {?} */ stepsAst = (animationAst instanceof AnimationWithStepsAst) ?
	          animationAst :
	          new AnimationSequenceAst([animationAst]);
	      return new AnimationStateTransitionAst(transitionExprs, stepsAst);
	  }
	  /**
	   * @param {?} alias
	   * @param {?} errors
	   * @return {?}
	   */
	  function _parseAnimationAlias(alias, errors) {
	      switch (alias) {
	          case ':enter':
	              return 'void => *';
	          case ':leave':
	              return '* => void';
	          default:
	              errors.push(new AnimationParseError("the transition alias value \"" + alias + "\" is not supported"));
	              return '* => *';
	      }
	  }
	  /**
	   * @param {?} eventStr
	   * @param {?} errors
	   * @return {?}
	   */
	  function _parseAnimationTransitionExpr(eventStr, errors) {
	      var /** @type {?} */ expressions = [];
	      if (eventStr[0] == ':') {
	          eventStr = _parseAnimationAlias(eventStr, errors);
	      }
	      var /** @type {?} */ match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
	      if (!isPresent(match) || match.length < 4) {
	          errors.push(new AnimationParseError("the provided " + eventStr + " is not of a supported format"));
	          return expressions;
	      }
	      var /** @type {?} */ fromState = match[1];
	      var /** @type {?} */ separator = match[2];
	      var /** @type {?} */ toState = match[3];
	      expressions.push(new AnimationStateTransitionExpression(fromState, toState));
	      var /** @type {?} */ isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
	      if (separator[0] == '<' && !isFullAnyStateExpr) {
	          expressions.push(new AnimationStateTransitionExpression(toState, fromState));
	      }
	      return expressions;
	  }
	  /**
	   * @param {?} entry
	   * @return {?}
	   */
	  function _normalizeAnimationEntry(entry) {
	      return Array.isArray(entry) ? new CompileAnimationSequenceMetadata(entry) : entry;
	  }
	  /**
	   * @param {?} entry
	   * @param {?} stateStyles
	   * @param {?} schema
	   * @param {?} errors
	   * @param {?} permitStateReferences
	   * @return {?}
	   */
	  function _normalizeStyleMetadata(entry, stateStyles, schema, errors, permitStateReferences) {
	      var /** @type {?} */ offset = entry.offset;
	      if (offset > 1 || offset < 0) {
	          errors.push(new AnimationParseError("Offset values for animations must be between 0 and 1"));
	      }
	      var /** @type {?} */ normalizedStyles = [];
	      entry.styles.forEach(function (styleEntry) {
	          if (typeof styleEntry === 'string') {
	              if (permitStateReferences) {
	                  normalizedStyles.push.apply(normalizedStyles, _resolveStylesFromState(/** @type {?} */ (styleEntry), stateStyles, errors));
	              }
	              else {
	                  errors.push(new AnimationParseError("State based animations cannot contain references to other states"));
	              }
	          }
	          else {
	              var /** @type {?} */ stylesObj_1 = (styleEntry);
	              var /** @type {?} */ normalizedStylesObj_1 = {};
	              Object.keys(stylesObj_1).forEach(function (propName) {
	                  var /** @type {?} */ normalizedProp = schema.normalizeAnimationStyleProperty(propName);
	                  var /** @type {?} */ normalizedOutput = schema.normalizeAnimationStyleValue(normalizedProp, propName, stylesObj_1[propName]);
	                  var /** @type {?} */ normalizationError = normalizedOutput['error'];
	                  if (normalizationError) {
	                      errors.push(new AnimationParseError(normalizationError));
	                  }
	                  normalizedStylesObj_1[normalizedProp] = normalizedOutput['value'];
	              });
	              normalizedStyles.push(normalizedStylesObj_1);
	          }
	      });
	      return normalizedStyles;
	  }
	  /**
	   * @param {?} entry
	   * @param {?} stateStyles
	   * @param {?} schema
	   * @param {?} errors
	   * @return {?}
	   */
	  function _normalizeStyleSteps(entry, stateStyles, schema, errors) {
	      var /** @type {?} */ steps = _normalizeStyleStepEntry(entry, stateStyles, schema, errors);
	      return (entry instanceof CompileAnimationGroupMetadata) ?
	          new CompileAnimationGroupMetadata(steps) :
	          new CompileAnimationSequenceMetadata(steps);
	  }
	  /**
	   * @param {?} stylesList
	   * @param {?} newItem
	   * @return {?}
	   */
	  function _mergeAnimationStyles(stylesList, newItem) {
	      if (typeof newItem === 'object' && newItem !== null && stylesList.length > 0) {
	          var /** @type {?} */ lastIndex = stylesList.length - 1;
	          var /** @type {?} */ lastItem = stylesList[lastIndex];
	          if (typeof lastItem === 'object' && lastItem !== null) {
	              stylesList[lastIndex] = StringMapWrapper.merge(/** @type {?} */ (lastItem), /** @type {?} */ (newItem));
	              return;
	          }
	      }
	      stylesList.push(newItem);
	  }
	  /**
	   * @param {?} entry
	   * @param {?} stateStyles
	   * @param {?} schema
	   * @param {?} errors
	   * @return {?}
	   */
	  function _normalizeStyleStepEntry(entry, stateStyles, schema, errors) {
	      var /** @type {?} */ steps;
	      if (entry instanceof CompileAnimationWithStepsMetadata) {
	          steps = entry.steps;
	      }
	      else {
	          return [entry];
	      }
	      var /** @type {?} */ newSteps = [];
	      var /** @type {?} */ combinedStyles;
	      steps.forEach(function (step) {
	          if (step instanceof CompileAnimationStyleMetadata) {
	              // this occurs when a style step is followed by a previous style step
	              // or when the first style step is run. We want to concatenate all subsequent
	              // style steps together into a single style step such that we have the correct
	              // starting keyframe data to pass into the animation player.
	              if (!isPresent(combinedStyles)) {
	                  combinedStyles = [];
	              }
	              _normalizeStyleMetadata(/** @type {?} */ (step), stateStyles, schema, errors, true)
	                  .forEach(function (entry) { _mergeAnimationStyles(combinedStyles, entry); });
	          }
	          else {
	              // it is important that we create a metadata entry of the combined styles
	              // before we go on an process the animate, sequence or group metadata steps.
	              // This will ensure that the AST will have the previous styles painted on
	              // screen before any further animations that use the styles take place.
	              if (isPresent(combinedStyles)) {
	                  newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
	                  combinedStyles = null;
	              }
	              if (step instanceof CompileAnimationAnimateMetadata) {
	                  // we do not recurse into CompileAnimationAnimateMetadata since
	                  // those style steps are not going to be squashed
	                  var /** @type {?} */ animateStyleValue = ((step)).styles;
	                  if (animateStyleValue instanceof CompileAnimationStyleMetadata) {
	                      animateStyleValue.styles =
	                          _normalizeStyleMetadata(animateStyleValue, stateStyles, schema, errors, true);
	                  }
	                  else if (animateStyleValue instanceof CompileAnimationKeyframesSequenceMetadata) {
	                      animateStyleValue.steps.forEach(function (step) {
	                          step.styles = _normalizeStyleMetadata(step, stateStyles, schema, errors, true);
	                      });
	                  }
	              }
	              else if (step instanceof CompileAnimationWithStepsMetadata) {
	                  var /** @type {?} */ innerSteps = _normalizeStyleStepEntry(step, stateStyles, schema, errors);
	                  step = step instanceof CompileAnimationGroupMetadata ?
	                      new CompileAnimationGroupMetadata(innerSteps) :
	                      new CompileAnimationSequenceMetadata(innerSteps);
	              }
	              newSteps.push(step);
	          }
	      });
	      // this happens when only styles were animated within the sequence
	      if (isPresent(combinedStyles)) {
	          newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
	      }
	      return newSteps;
	  }
	  /**
	   * @param {?} stateName
	   * @param {?} stateStyles
	   * @param {?} errors
	   * @return {?}
	   */
	  function _resolveStylesFromState(stateName, stateStyles, errors) {
	      var /** @type {?} */ styles = [];
	      if (stateName[0] != ':') {
	          errors.push(new AnimationParseError("Animation states via styles must be prefixed with a \":\""));
	      }
	      else {
	          var /** @type {?} */ normalizedStateName = stateName.substring(1);
	          var /** @type {?} */ value = stateStyles[normalizedStateName];
	          if (!isPresent(value)) {
	              errors.push(new AnimationParseError("Unable to apply styles due to missing a state: \"" + normalizedStateName + "\""));
	          }
	          else {
	              value.styles.forEach(function (stylesEntry) {
	                  if (typeof stylesEntry === 'object' && stylesEntry !== null) {
	                      styles.push(/** @type {?} */ (stylesEntry));
	                  }
	              });
	          }
	      }
	      return styles;
	  }
	  var _AnimationTimings = (function () {
	      /**
	       * @param {?} duration
	       * @param {?} delay
	       * @param {?} easing
	       */
	      function _AnimationTimings(duration, delay, easing) {
	          this.duration = duration;
	          this.delay = delay;
	          this.easing = easing;
	      }
	      return _AnimationTimings;
	  }());
	  /**
	   * @param {?} keyframeSequence
	   * @param {?} currentTime
	   * @param {?} collectedStyles
	   * @param {?} stateStyles
	   * @param {?} errors
	   * @return {?}
	   */
	  function _parseAnimationKeyframes(keyframeSequence, currentTime, collectedStyles, stateStyles, errors) {
	      var /** @type {?} */ totalEntries = keyframeSequence.steps.length;
	      var /** @type {?} */ totalOffsets = 0;
	      keyframeSequence.steps.forEach(function (step) { return totalOffsets += (isPresent(step.offset) ? 1 : 0); });
	      if (totalOffsets > 0 && totalOffsets < totalEntries) {
	          errors.push(new AnimationParseError("Not all style() entries contain an offset for the provided keyframe()"));
	          totalOffsets = totalEntries;
	      }
	      var /** @type {?} */ limit = totalEntries - 1;
	      var /** @type {?} */ margin = totalOffsets == 0 ? (1 / limit) : 0;
	      var /** @type {?} */ rawKeyframes = [];
	      var /** @type {?} */ index = 0;
	      var /** @type {?} */ doSortKeyframes = false;
	      var /** @type {?} */ lastOffset = 0;
	      keyframeSequence.steps.forEach(function (styleMetadata) {
	          var /** @type {?} */ offset = styleMetadata.offset;
	          var /** @type {?} */ keyframeStyles = {};
	          styleMetadata.styles.forEach(function (entry) {
	              Object.keys(entry).forEach(function (prop) {
	                  if (prop != 'offset') {
	                      keyframeStyles[prop] = ((entry))[prop];
	                  }
	              });
	          });
	          if (isPresent(offset)) {
	              doSortKeyframes = doSortKeyframes || (offset < lastOffset);
	          }
	          else {
	              offset = index == limit ? _TERMINAL_KEYFRAME : (margin * index);
	          }
	          rawKeyframes.push([offset, keyframeStyles]);
	          lastOffset = offset;
	          index++;
	      });
	      if (doSortKeyframes) {
	          rawKeyframes.sort(function (a, b) { return a[0] <= b[0] ? -1 : 1; });
	      }
	      var /** @type {?} */ firstKeyframe = rawKeyframes[0];
	      if (firstKeyframe[0] != _INITIAL_KEYFRAME) {
	          rawKeyframes.splice(0, 0, firstKeyframe = [_INITIAL_KEYFRAME, {}]);
	      }
	      var /** @type {?} */ firstKeyframeStyles = firstKeyframe[1];
	      limit = rawKeyframes.length - 1;
	      var /** @type {?} */ lastKeyframe = rawKeyframes[limit];
	      if (lastKeyframe[0] != _TERMINAL_KEYFRAME) {
	          rawKeyframes.push(lastKeyframe = [_TERMINAL_KEYFRAME, {}]);
	          limit++;
	      }
	      var /** @type {?} */ lastKeyframeStyles = lastKeyframe[1];
	      for (var /** @type {?} */ i = 1; i <= limit; i++) {
	          var /** @type {?} */ entry = rawKeyframes[i];
	          var /** @type {?} */ styles = entry[1];
	          Object.keys(styles).forEach(function (prop) {
	              if (!isPresent(firstKeyframeStyles[prop])) {
	                  firstKeyframeStyles[prop] = FILL_STYLE_FLAG;
	              }
	          });
	      }
	      var _loop_1 = function(i) {
	          var /** @type {?} */ entry = rawKeyframes[i];
	          var /** @type {?} */ styles = entry[1];
	          Object.keys(styles).forEach(function (prop) {
	              if (!isPresent(lastKeyframeStyles[prop])) {
	                  lastKeyframeStyles[prop] = styles[prop];
	              }
	          });
	      };
	      for (var /** @type {?} */ i = limit - 1; i >= 0; i--) {
	          _loop_1(i);
	      }
	      return rawKeyframes.map(function (entry) { return new AnimationKeyframeAst(entry[0], new AnimationStylesAst([entry[1]])); });
	  }
	  /**
	   * @param {?} entry
	   * @param {?} currentTime
	   * @param {?} collectedStyles
	   * @param {?} stateStyles
	   * @param {?} errors
	   * @return {?}
	   */
	  function _parseTransitionAnimation(entry, currentTime, collectedStyles, stateStyles, errors) {
	      var /** @type {?} */ ast;
	      var /** @type {?} */ playTime = 0;
	      var /** @type {?} */ startingTime = currentTime;
	      if (entry instanceof CompileAnimationWithStepsMetadata) {
	          var /** @type {?} */ maxDuration_1 = 0;
	          var /** @type {?} */ steps_1 = [];
	          var /** @type {?} */ isGroup_1 = entry instanceof CompileAnimationGroupMetadata;
	          var /** @type {?} */ previousStyles_1;
	          entry.steps.forEach(function (entry) {
	              // these will get picked up by the next step...
	              var /** @type {?} */ time = isGroup_1 ? startingTime : currentTime;
	              if (entry instanceof CompileAnimationStyleMetadata) {
	                  entry.styles.forEach(function (stylesEntry) {
	                      // by this point we know that we only have stringmap values
	                      var /** @type {?} */ map = (stylesEntry);
	                      Object.keys(map).forEach(function (prop) { collectedStyles.insertAtTime(prop, time, map[prop]); });
	                  });
	                  previousStyles_1 = entry.styles;
	                  return;
	              }
	              var /** @type {?} */ innerAst = _parseTransitionAnimation(entry, time, collectedStyles, stateStyles, errors);
	              if (isPresent(previousStyles_1)) {
	                  if (entry instanceof CompileAnimationWithStepsMetadata) {
	                      var /** @type {?} */ startingStyles = new AnimationStylesAst(previousStyles_1);
	                      steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
	                  }
	                  else {
	                      var /** @type {?} */ innerStep = (innerAst);
	                      (_a = innerStep.startingStyles.styles).push.apply(_a, previousStyles_1);
	                  }
	                  previousStyles_1 = null;
	              }
	              var /** @type {?} */ astDuration = innerAst.playTime;
	              currentTime += astDuration;
	              playTime += astDuration;
	              maxDuration_1 = Math.max(astDuration, maxDuration_1);
	              steps_1.push(innerAst);
	              var _a;
	          });
	          if (isPresent(previousStyles_1)) {
	              var /** @type {?} */ startingStyles = new AnimationStylesAst(previousStyles_1);
	              steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
	          }
	          if (isGroup_1) {
	              ast = new AnimationGroupAst(steps_1);
	              playTime = maxDuration_1;
	              currentTime = startingTime + playTime;
	          }
	          else {
	              ast = new AnimationSequenceAst(steps_1);
	          }
	      }
	      else if (entry instanceof CompileAnimationAnimateMetadata) {
	          var /** @type {?} */ timings = _parseTimeExpression(entry.timings, errors);
	          var /** @type {?} */ styles = entry.styles;
	          var /** @type {?} */ keyframes = void 0;
	          if (styles instanceof CompileAnimationKeyframesSequenceMetadata) {
	              keyframes =
	                  _parseAnimationKeyframes(styles, currentTime, collectedStyles, stateStyles, errors);
	          }
	          else {
	              var /** @type {?} */ styleData = (styles);
	              var /** @type {?} */ offset = _TERMINAL_KEYFRAME;
	              var /** @type {?} */ styleAst = new AnimationStylesAst(/** @type {?} */ (styleData.styles));
	              var /** @type {?} */ keyframe = new AnimationKeyframeAst(offset, styleAst);
	              keyframes = [keyframe];
	          }
	          ast = new AnimationStepAst(new AnimationStylesAst([]), keyframes, timings.duration, timings.delay, timings.easing);
	          playTime = timings.duration + timings.delay;
	          currentTime += playTime;
	          keyframes.forEach(function (keyframe /** TODO #9100 */) { return keyframe.styles.styles.forEach(function (entry /** TODO #9100 */) { return Object.keys(entry).forEach(function (prop) { collectedStyles.insertAtTime(prop, currentTime, entry[prop]); }); }); });
	      }
	      else {
	          // if the code reaches this stage then an error
	          // has already been populated within the _normalizeStyleSteps()
	          // operation...
	          ast = new AnimationStepAst(null, [], 0, 0, '');
	      }
	      ast.playTime = playTime;
	      ast.startTime = startingTime;
	      return ast;
	  }
	  /**
	   * @param {?} ast
	   * @param {?} collectedStyles
	   * @param {?} errors
	   * @return {?}
	   */
	  function _fillAnimationAstStartingKeyframes(ast, collectedStyles, errors) {
	      // steps that only contain style will not be filled
	      if ((ast instanceof AnimationStepAst) && ast.keyframes.length > 0) {
	          var /** @type {?} */ keyframes = ast.keyframes;
	          if (keyframes.length == 1) {
	              var /** @type {?} */ endKeyframe = keyframes[0];
	              var /** @type {?} */ startKeyframe = _createStartKeyframeFromEndKeyframe(endKeyframe, ast.startTime, ast.playTime, collectedStyles, errors);
	              ast.keyframes = [startKeyframe, endKeyframe];
	          }
	      }
	      else if (ast instanceof AnimationWithStepsAst) {
	          ast.steps.forEach(function (entry) { return _fillAnimationAstStartingKeyframes(entry, collectedStyles, errors); });
	      }
	  }
	  /**
	   * @param {?} exp
	   * @param {?} errors
	   * @return {?}
	   */
	  function _parseTimeExpression(exp, errors) {
	      var /** @type {?} */ regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?/i;
	      var /** @type {?} */ duration;
	      var /** @type {?} */ delay = 0;
	      var /** @type {?} */ easing = null;
	      if (typeof exp === 'string') {
	          var /** @type {?} */ matches = exp.match(regex);
	          if (matches === null) {
	              errors.push(new AnimationParseError("The provided timing value \"" + exp + "\" is invalid."));
	              return new _AnimationTimings(0, 0, null);
	          }
	          var /** @type {?} */ durationMatch = parseFloat(matches[1]);
	          var /** @type {?} */ durationUnit = matches[2];
	          if (durationUnit == 's') {
	              durationMatch *= _ONE_SECOND;
	          }
	          duration = Math.floor(durationMatch);
	          var /** @type {?} */ delayMatch = matches[3];
	          var /** @type {?} */ delayUnit = matches[4];
	          if (isPresent(delayMatch)) {
	              var /** @type {?} */ delayVal = parseFloat(delayMatch);
	              if (isPresent(delayUnit) && delayUnit == 's') {
	                  delayVal *= _ONE_SECOND;
	              }
	              delay = Math.floor(delayVal);
	          }
	          var /** @type {?} */ easingVal = matches[5];
	          if (!isBlank(easingVal)) {
	              easing = easingVal;
	          }
	      }
	      else {
	          duration = (exp);
	      }
	      return new _AnimationTimings(duration, delay, easing);
	  }
	  /**
	   * @param {?} endKeyframe
	   * @param {?} startTime
	   * @param {?} duration
	   * @param {?} collectedStyles
	   * @param {?} errors
	   * @return {?}
	   */
	  function _createStartKeyframeFromEndKeyframe(endKeyframe, startTime, duration, collectedStyles, errors) {
	      var /** @type {?} */ values = {};
	      var /** @type {?} */ endTime = startTime + duration;
	      endKeyframe.styles.styles.forEach(function (styleData) {
	          Object.keys(styleData).forEach(function (prop) {
	              var /** @type {?} */ val = styleData[prop];
	              if (prop == 'offset')
	                  return;
	              var /** @type {?} */ resultIndex = collectedStyles.indexOfAtOrBeforeTime(prop, startTime);
	              var /** @type {?} */ resultEntry /** TODO #9100 */, /** @type {?} */ nextEntry /** TODO #9100 */, /** @type {?} */ value;
	              if (isPresent(resultIndex)) {
	                  resultEntry = collectedStyles.getByIndex(prop, resultIndex);
	                  value = resultEntry.value;
	                  nextEntry = collectedStyles.getByIndex(prop, resultIndex + 1);
	              }
	              else {
	                  // this is a flag that the runtime code uses to pass
	                  // in a value either from the state declaration styles
	                  // or using the AUTO_STYLE value (e.g. getComputedStyle)
	                  value = FILL_STYLE_FLAG;
	              }
	              if (isPresent(nextEntry) && !nextEntry.matches(endTime, val)) {
	                  errors.push(new AnimationParseError("The animated CSS property \"" + prop + "\" unexpectedly changes between steps \"" + resultEntry.time + "ms\" and \"" + endTime + "ms\" at \"" + nextEntry.time + "ms\""));
	              }
	              values[prop] = value;
	          });
	      });
	      return new AnimationKeyframeAst(_INITIAL_KEYFRAME, new AnimationStylesAst([values]));
	  }
	
	  /**
	   *  An interface for retrieving documents by URL that the compiler uses
	    * to load templates.
	   */
	  var ResourceLoader = (function () {
	      function ResourceLoader() {
	      }
	      /**
	       * @param {?} url
	       * @return {?}
	       */
	      ResourceLoader.prototype.get = function (url) { return null; };
	      return ResourceLoader;
	  }());
	
	  /**
	   *  Create a {@link UrlResolver} with no package prefix.
	   * @return {?}
	   */
	  function createUrlResolverWithoutPackagePrefix() {
	      return new UrlResolver();
	  }
	  /**
	   * @return {?}
	   */
	  function createOfflineCompileUrlResolver() {
	      return new UrlResolver('.');
	  }
	  /**
	   * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.
	   */
	  var /** @type {?} */ DEFAULT_PACKAGE_URL_PROVIDER = {
	      provide: _angular_core.PACKAGE_ROOT_URL,
	      useValue: '/'
	  };
	  /**
	   *  Used by the {@link Compiler} when resolving HTML and CSS template URLs.
	    * *
	    * This class can be overridden by the application developer to create custom behavior.
	    * *
	    * See {@link Compiler}
	    * *
	    * ## Example
	    * *
	    * {@example compiler/ts/url_resolver/url_resolver.ts region='url_resolver'}
	    * *
	    * ensure that the entire template comes from a trusted source.
	    * Attacker-controlled data introduced by a template could expose your
	    * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
	   */
	  var UrlResolver = (function () {
	      /**
	       * @param {?=} _packagePrefix
	       */
	      function UrlResolver(_packagePrefix) {
	          if (_packagePrefix === void 0) { _packagePrefix = null; }
	          this._packagePrefix = _packagePrefix;
	      }
	      /**
	       *  Resolves the `url` given the `baseUrl`:
	        * - when the `url` is null, the `baseUrl` is returned,
	        * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
	        * `baseUrl` and `url`,
	        * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is
	        * returned as is (ignoring the `baseUrl`)
	       * @param {?} baseUrl
	       * @param {?} url
	       * @return {?}
	       */
	      UrlResolver.prototype.resolve = function (baseUrl, url) {
	          var /** @type {?} */ resolvedUrl = url;
	          if (isPresent(baseUrl) && baseUrl.length > 0) {
	              resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
	          }
	          var /** @type {?} */ resolvedParts = _split(resolvedUrl);
	          var /** @type {?} */ prefix = this._packagePrefix;
	          if (isPresent(prefix) && isPresent(resolvedParts) &&
	              resolvedParts[_ComponentIndex.Scheme] == 'package') {
	              var /** @type {?} */ path = resolvedParts[_ComponentIndex.Path];
	              prefix = prefix.replace(/\/+$/, '');
	              path = path.replace(/^\/+/, '');
	              return prefix + "/" + path;
	          }
	          return resolvedUrl;
	      };
	      UrlResolver.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      UrlResolver.ctorParameters = function () { return [
	          { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.PACKAGE_ROOT_URL,] },] },
	      ]; };
	      return UrlResolver;
	  }());
	  /**
	   *  Extract the scheme of a URL.
	   * @param {?} url
	   * @return {?}
	   */
	  function getUrlScheme(url) {
	      var /** @type {?} */ match = _split(url);
	      return (match && match[_ComponentIndex.Scheme]) || '';
	  }
	  /**
	   *  Builds a URI string from already-encoded parts.
	    * *
	    * No encoding is performed.  Any component may be omitted as either null or
	    * undefined.
	    * *
	   * @param {?=} opt_scheme The scheme such as 'http'.
	   * @param {?=} opt_userInfo The user name before the '@'.
	   * @param {?=} opt_domain The domain such as 'www.google.com', already
	    * URI-encoded.
	   * @param {?=} opt_port The port number.
	   * @param {?=} opt_path The path, already URI-encoded.  If it is not
	    * empty, it must begin with a slash.
	   * @param {?=} opt_queryData The URI-encoded query data.
	   * @param {?=} opt_fragment The URI-encoded fragment identifier.
	   * @return {?} The fully combined URI.
	   */
	  function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
	      var /** @type {?} */ out = [];
	      if (isPresent(opt_scheme)) {
	          out.push(opt_scheme + ':');
	      }
	      if (isPresent(opt_domain)) {
	          out.push('//');
	          if (isPresent(opt_userInfo)) {
	              out.push(opt_userInfo + '@');
	          }
	          out.push(opt_domain);
	          if (isPresent(opt_port)) {
	              out.push(':' + opt_port);
	          }
	      }
	      if (isPresent(opt_path)) {
	          out.push(opt_path);
	      }
	      if (isPresent(opt_queryData)) {
	          out.push('?' + opt_queryData);
	      }
	      if (isPresent(opt_fragment)) {
	          out.push('#' + opt_fragment);
	      }
	      return out.join('');
	  }
	  /**
	   * A regular expression for breaking a URI into its component parts.
	   *
	   * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says
	   * As the "first-match-wins" algorithm is identical to the "greedy"
	   * disambiguation method used by POSIX regular expressions, it is natural and
	   * commonplace to use a regular expression for parsing the potential five
	   * components of a URI reference.
	   *
	   * The following line is the regular expression for breaking-down a
	   * well-formed URI reference into its components.
	   *
	   * <pre>
	   * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
	   *  12            3  4          5       6  7        8 9
	   * </pre>
	   *
	   * The numbers in the second line above are only to assist readability; they
	   * indicate the reference points for each subexpression (i.e., each paired
	   * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
	   * For example, matching the above expression to
	   * <pre>
	   *     http://www.ics.uci.edu/pub/ietf/uri/#Related
	   * </pre>
	   * results in the following subexpression matches:
	   * <pre>
	   *    $1 = http:
	   *    $2 = http
	   *    $3 = //www.ics.uci.edu
	   *    $4 = www.ics.uci.edu
	   *    $5 = /pub/ietf/uri/
	   *    $6 = <undefined>
	   *    $7 = <undefined>
	   *    $8 = #Related
	   *    $9 = Related
	   * </pre>
	   * where <undefined> indicates that the component is not present, as is the
	   * case for the query component in the above example. Therefore, we can
	   * determine the value of the five components as
	   * <pre>
	   *    scheme    = $2
	   *    authority = $4
	   *    path      = $5
	   *    query     = $7
	   *    fragment  = $9
	   * </pre>
	   *
	   * The regular expression has been modified slightly to expose the
	   * userInfo, domain, and port separately from the authority.
	   * The modified version yields
	   * <pre>
	   *    $1 = http              scheme
	   *    $2 = <undefined>       userInfo -\
	   *    $3 = www.ics.uci.edu   domain     | authority
	   *    $4 = <undefined>       port     -/
	   *    $5 = /pub/ietf/uri/    path
	   *    $6 = <undefined>       query without ?
	   *    $7 = Related           fragment without #
	   * </pre>
	   * @type {!RegExp}
	   * @internal
	   */
	  var /** @type {?} */ _splitRe = new RegExp('^' +
	      '(?:' +
	      '([^:/?#.]+)' +
	      // used by other URL parts such as :,
	      // ?, /, #, and .
	      ':)?' +
	      '(?://' +
	      '(?:([^/?#]*)@)?' +
	      '([\\w\\d\\-\\u0100-\\uffff.%]*)' +
	      // digits, dashes, dots, percent
	      // escapes, and unicode characters.
	      '(?::([0-9]+))?' +
	      ')?' +
	      '([^?#]+)?' +
	      '(?:\\?([^#]*))?' +
	      '(?:#(.*))?' +
	      '$');
	  var _ComponentIndex = {};
	  _ComponentIndex.Scheme = 1;
	  _ComponentIndex.UserInfo = 2;
	  _ComponentIndex.Domain = 3;
	  _ComponentIndex.Port = 4;
	  _ComponentIndex.Path = 5;
	  _ComponentIndex.QueryData = 6;
	  _ComponentIndex.Fragment = 7;
	  _ComponentIndex[_ComponentIndex.Scheme] = "Scheme";
	  _ComponentIndex[_ComponentIndex.UserInfo] = "UserInfo";
	  _ComponentIndex[_ComponentIndex.Domain] = "Domain";
	  _ComponentIndex[_ComponentIndex.Port] = "Port";
	  _ComponentIndex[_ComponentIndex.Path] = "Path";
	  _ComponentIndex[_ComponentIndex.QueryData] = "QueryData";
	  _ComponentIndex[_ComponentIndex.Fragment] = "Fragment";
	  /**
	   *  Splits a URI into its component parts.
	    * *
	    * Each component can be accessed via the component indices; for example:
	    * <pre>
	    * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
	    * </pre>
	    * *
	   * @param {?} uri The URI string to examine.
	   * @return {?} Each component still URI-encoded.
	    * Each component that is present will contain the encoded value, whereas
	    * components that are not present will be undefined or empty, depending
	    * on the browser's regular expression implementation.  Never null, since
	    * arbitrary strings may still look like path names.
	   */
	  function _split(uri) {
	      return uri.match(_splitRe);
	  }
	  /**
	   *  Removes dot segments in given path component, as described in
	    * RFC 3986, section 5.2.4.
	    * *
	   * @param {?} path A non-empty path component.
	   * @return {?} Path component with removed dot segments.
	   */
	  function _removeDotSegments(path) {
	      if (path == '/')
	          return '/';
	      var /** @type {?} */ leadingSlash = path[0] == '/' ? '/' : '';
	      var /** @type {?} */ trailingSlash = path[path.length - 1] === '/' ? '/' : '';
	      var /** @type {?} */ segments = path.split('/');
	      var /** @type {?} */ out = [];
	      var /** @type {?} */ up = 0;
	      for (var /** @type {?} */ pos = 0; pos < segments.length; pos++) {
	          var /** @type {?} */ segment = segments[pos];
	          switch (segment) {
	              case '':
	              case '.':
	                  break;
	              case '..':
	                  if (out.length > 0) {
	                      out.pop();
	                  }
	                  else {
	                      up++;
	                  }
	                  break;
	              default:
	                  out.push(segment);
	          }
	      }
	      if (leadingSlash == '') {
	          while (up-- > 0) {
	              out.unshift('..');
	          }
	          if (out.length === 0)
	              out.push('.');
	      }
	      return leadingSlash + out.join('/') + trailingSlash;
	  }
	  /**
	   *  Takes an array of the parts from split and canonicalizes the path part
	    * and then joins all the parts.
	   * @param {?} parts
	   * @return {?}
	   */
	  function _joinAndCanonicalizePath(parts) {
	      var /** @type {?} */ path = parts[_ComponentIndex.Path];
	      path = isBlank(path) ? '' : _removeDotSegments(path);
	      parts[_ComponentIndex.Path] = path;
	      return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
	  }
	  /**
	   *  Resolves a URL.
	   * @param {?} base The URL acting as the base URL.
	   * @param {?} url
	   * @return {?}
	   */
	  function _resolveUrl(base, url) {
	      var /** @type {?} */ parts = _split(encodeURI(url));
	      var /** @type {?} */ baseParts = _split(base);
	      if (isPresent(parts[_ComponentIndex.Scheme])) {
	          return _joinAndCanonicalizePath(parts);
	      }
	      else {
	          parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
	      }
	      for (var /** @type {?} */ i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
	          if (isBlank(parts[i])) {
	              parts[i] = baseParts[i];
	          }
	      }
	      if (parts[_ComponentIndex.Path][0] == '/') {
	          return _joinAndCanonicalizePath(parts);
	      }
	      var /** @type {?} */ path = baseParts[_ComponentIndex.Path];
	      if (isBlank(path))
	          path = '/';
	      var /** @type {?} */ index = path.lastIndexOf('/');
	      path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
	      parts[_ComponentIndex.Path] = path;
	      return _joinAndCanonicalizePath(parts);
	  }
	
	  var DirectiveNormalizer = (function () {
	      /**
	       * @param {?} _resourceLoader
	       * @param {?} _urlResolver
	       * @param {?} _htmlParser
	       * @param {?} _config
	       */
	      function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {
	          this._resourceLoader = _resourceLoader;
	          this._urlResolver = _urlResolver;
	          this._htmlParser = _htmlParser;
	          this._config = _config;
	          this._resourceLoaderCache = new Map();
	      }
	      /**
	       * @return {?}
	       */
	      DirectiveNormalizer.prototype.clearCache = function () { this._resourceLoaderCache.clear(); };
	      /**
	       * @param {?} normalizedDirective
	       * @return {?}
	       */
	      DirectiveNormalizer.prototype.clearCacheFor = function (normalizedDirective) {
	          var _this = this;
	          if (!normalizedDirective.isComponent) {
	              return;
	          }
	          this._resourceLoaderCache.delete(normalizedDirective.template.templateUrl);
	          normalizedDirective.template.externalStylesheets.forEach(function (stylesheet) { _this._resourceLoaderCache.delete(stylesheet.moduleUrl); });
	      };
	      /**
	       * @param {?} url
	       * @return {?}
	       */
	      DirectiveNormalizer.prototype._fetch = function (url) {
	          var /** @type {?} */ result = this._resourceLoaderCache.get(url);
	          if (!result) {
	              result = this._resourceLoader.get(url);
	              this._resourceLoaderCache.set(url, result);
	          }
	          return result;
	      };
	      /**
	       * @param {?} prenormData
	       * @return {?}
	       */
	      DirectiveNormalizer.prototype.normalizeTemplate = function (prenormData) {
	          var _this = this;
	          var /** @type {?} */ normalizedTemplateSync = null;
	          var /** @type {?} */ normalizedTemplateAsync;
	          if (isPresent(prenormData.template)) {
	              normalizedTemplateSync = this.normalizeTemplateSync(prenormData);
	              normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);
	          }
	          else if (prenormData.templateUrl) {
	              normalizedTemplateAsync = this.normalizeTemplateAsync(prenormData);
	          }
	          else {
	              throw new Error("No template specified for component " + stringify(prenormData.componentType));
	          }
	          if (normalizedTemplateSync && normalizedTemplateSync.styleUrls.length === 0) {
	              // sync case
	              return new SyncAsyncResult(normalizedTemplateSync);
	          }
	          else {
	              // async case
	              return new SyncAsyncResult(null, normalizedTemplateAsync.then(function (normalizedTemplate) { return _this.normalizeExternalStylesheets(normalizedTemplate); }));
	          }
	      };
	      /**
	       * @param {?} prenomData
	       * @return {?}
	       */
	      DirectiveNormalizer.prototype.normalizeTemplateSync = function (prenomData) {
	          return this.normalizeLoadedTemplate(prenomData, prenomData.template, prenomData.moduleUrl);
	      };
	      /**
	       * @param {?} prenomData
	       * @return {?}
	       */
	      DirectiveNormalizer.prototype.normalizeTemplateAsync = function (prenomData) {
	          var _this = this;
	          var /** @type {?} */ templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);
	          return this._fetch(templateUrl)
	              .then(function (value) { return _this.normalizeLoadedTemplate(prenomData, value, templateUrl); });
	      };
	      /**
	       * @param {?} prenomData
	       * @param {?} template
	       * @param {?} templateAbsUrl
	       * @return {?}
	       */
	      DirectiveNormalizer.prototype.normalizeLoadedTemplate = function (prenomData, template, templateAbsUrl) {
	          var /** @type {?} */ interpolationConfig = InterpolationConfig.fromArray(prenomData.interpolation);
	          var /** @type {?} */ rootNodesAndErrors = this._htmlParser.parse(template, stringify(prenomData.componentType), false, interpolationConfig);
	          if (rootNodesAndErrors.errors.length > 0) {
	              var /** @type {?} */ errorString = rootNodesAndErrors.errors.join('\n');
	              throw new Error("Template parse errors:\n" + errorString);
	          }
	          var /** @type {?} */ templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
	              styles: prenomData.styles,
	              styleUrls: prenomData.styleUrls,
	              moduleUrl: prenomData.moduleUrl
	          }));
	          var /** @type {?} */ visitor = new TemplatePreparseVisitor();
	          visitAll(visitor, rootNodesAndErrors.rootNodes);
	          var /** @type {?} */ templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl }));
	          var /** @type {?} */ encapsulation = prenomData.encapsulation;
	          if (isBlank(encapsulation)) {
	              encapsulation = this._config.defaultEncapsulation;
	          }
	          var /** @type {?} */ styles = templateMetadataStyles.styles.concat(templateStyles.styles);
	          var /** @type {?} */ styleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);
	          if (encapsulation === _angular_core.ViewEncapsulation.Emulated && styles.length === 0 &&
	              styleUrls.length === 0) {
	              encapsulation = _angular_core.ViewEncapsulation.None;
	          }
	          return new CompileTemplateMetadata({
	              encapsulation: encapsulation,
	              template: template,
	              templateUrl: templateAbsUrl, styles: styles, styleUrls: styleUrls,
	              ngContentSelectors: visitor.ngContentSelectors,
	              animations: prenomData.animations,
	              interpolation: prenomData.interpolation,
	          });
	      };
	      /**
	       * @param {?} templateMeta
	       * @return {?}
	       */
	      DirectiveNormalizer.prototype.normalizeExternalStylesheets = function (templateMeta) {
	          return this._loadMissingExternalStylesheets(templateMeta.styleUrls)
	              .then(function (externalStylesheets) { return new CompileTemplateMetadata({
	              encapsulation: templateMeta.encapsulation,
	              template: templateMeta.template,
	              templateUrl: templateMeta.templateUrl,
	              styles: templateMeta.styles,
	              styleUrls: templateMeta.styleUrls,
	              externalStylesheets: externalStylesheets,
	              ngContentSelectors: templateMeta.ngContentSelectors,
	              animations: templateMeta.animations,
	              interpolation: templateMeta.interpolation
	          }); });
	      };
	      /**
	       * @param {?} styleUrls
	       * @param {?=} loadedStylesheets
	       * @return {?}
	       */
	      DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function (styleUrls, loadedStylesheets) {
	          var _this = this;
	          if (loadedStylesheets === void 0) { loadedStylesheets = new Map(); }
	          return Promise
	              .all(styleUrls.filter(function (styleUrl) { return !loadedStylesheets.has(styleUrl); })
	              .map(function (styleUrl) { return _this._fetch(styleUrl).then(function (loadedStyle) {
	              var /** @type {?} */ stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl }));
	              loadedStylesheets.set(styleUrl, stylesheet);
	              return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
	          }); }))
	              .then(function (_) { return Array.from(loadedStylesheets.values()); });
	      };
	      /**
	       * @param {?} stylesheet
	       * @return {?}
	       */
	      DirectiveNormalizer.prototype.normalizeStylesheet = function (stylesheet) {
	          var _this = this;
	          var /** @type {?} */ allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable)
	              .map(function (url) { return _this._urlResolver.resolve(stylesheet.moduleUrl, url); });
	          var /** @type {?} */ allStyles = stylesheet.styles.map(function (style) {
	              var /** @type {?} */ styleWithImports = extractStyleUrls(_this._urlResolver, stylesheet.moduleUrl, style);
	              allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls);
	              return styleWithImports.style;
	          });
	          return new CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: stylesheet.moduleUrl });
	      };
	      DirectiveNormalizer.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      DirectiveNormalizer.ctorParameters = function () { return [
	          { type: ResourceLoader, },
	          { type: UrlResolver, },
	          { type: HtmlParser, },
	          { type: CompilerConfig, },
	      ]; };
	      return DirectiveNormalizer;
	  }());
	  var TemplatePreparseVisitor = (function () {
	      function TemplatePreparseVisitor() {
	          this.ngContentSelectors = [];
	          this.styles = [];
	          this.styleUrls = [];
	          this.ngNonBindableStackCount = 0;
	      }
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {
	          var /** @type {?} */ preparsedElement = preparseElement(ast);
	          switch (preparsedElement.type) {
	              case PreparsedElementType.NG_CONTENT:
	                  if (this.ngNonBindableStackCount === 0) {
	                      this.ngContentSelectors.push(preparsedElement.selectAttr);
	                  }
	                  break;
	              case PreparsedElementType.STYLE:
	                  var /** @type {?} */ textContent_1 = '';
	                  ast.children.forEach(function (child) {
	                      if (child instanceof Text) {
	                          textContent_1 += child.value;
	                      }
	                  });
	                  this.styles.push(textContent_1);
	                  break;
	              case PreparsedElementType.STYLESHEET:
	                  this.styleUrls.push(preparsedElement.hrefAttr);
	                  break;
	              default:
	                  break;
	          }
	          if (preparsedElement.nonBindable) {
	              this.ngNonBindableStackCount++;
	          }
	          visitAll(this, ast.children);
	          if (preparsedElement.nonBindable) {
	              this.ngNonBindableStackCount--;
	          }
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      TemplatePreparseVisitor.prototype.visitComment = function (ast, context) { return null; };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      TemplatePreparseVisitor.prototype.visitAttribute = function (ast, context) { return null; };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      TemplatePreparseVisitor.prototype.visitText = function (ast, context) { return null; };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      TemplatePreparseVisitor.prototype.visitExpansion = function (ast, context) { return null; };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      TemplatePreparseVisitor.prototype.visitExpansionCase = function (ast, context) { return null; };
	      return TemplatePreparseVisitor;
	  }());
	
	  /*
	   * Resolve a `Type` for {@link Directive}.
	   *
	   * This interface can be overridden by the application developer to create custom behavior.
	   *
	   * See {@link Compiler}
	   */
	  var DirectiveResolver = (function () {
	      /**
	       * @param {?=} _reflector
	       */
	      function DirectiveResolver(_reflector) {
	          if (_reflector === void 0) { _reflector = reflector; }
	          this._reflector = _reflector;
	      }
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      DirectiveResolver.prototype.isDirective = function (type) {
	          var /** @type {?} */ typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	          return typeMetadata && typeMetadata.some(isDirectiveMetadata);
	      };
	      /**
	       *  Return {@link Directive} for a given `Type`.
	       * @param {?} type
	       * @param {?=} throwIfNotFound
	       * @return {?}
	       */
	      DirectiveResolver.prototype.resolve = function (type, throwIfNotFound) {
	          if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	          var /** @type {?} */ typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	          if (typeMetadata) {
	              var /** @type {?} */ metadata = ListWrapper.findLast(typeMetadata, isDirectiveMetadata);
	              if (metadata) {
	                  var /** @type {?} */ propertyMetadata = this._reflector.propMetadata(type);
	                  return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
	              }
	          }
	          if (throwIfNotFound) {
	              throw new Error("No Directive annotation found on " + stringify(type));
	          }
	          return null;
	      };
	      /**
	       * @param {?} dm
	       * @param {?} propertyMetadata
	       * @param {?} directiveType
	       * @return {?}
	       */
	      DirectiveResolver.prototype._mergeWithPropertyMetadata = function (dm, propertyMetadata, directiveType) {
	          var /** @type {?} */ inputs = [];
	          var /** @type {?} */ outputs = [];
	          var /** @type {?} */ host = {};
	          var /** @type {?} */ queries = {};
	          Object.keys(propertyMetadata).forEach(function (propName) {
	              var /** @type {?} */ input = ListWrapper.findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Input; });
	              if (input) {
	                  if (input.bindingPropertyName) {
	                      inputs.push(propName + ": " + input.bindingPropertyName);
	                  }
	                  else {
	                      inputs.push(propName);
	                  }
	              }
	              var /** @type {?} */ output = ListWrapper.findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Output; });
	              if (output) {
	                  if (output.bindingPropertyName) {
	                      outputs.push(propName + ": " + output.bindingPropertyName);
	                  }
	                  else {
	                      outputs.push(propName);
	                  }
	              }
	              var /** @type {?} */ hostBindings = propertyMetadata[propName].filter(function (a) { return a && a instanceof _angular_core.HostBinding; });
	              hostBindings.forEach(function (hostBinding) {
	                  if (hostBinding.hostPropertyName) {
	                      var /** @type {?} */ startWith = hostBinding.hostPropertyName[0];
	                      if (startWith === '(') {
	                          throw new Error("@HostBinding can not bind to events. Use @HostListener instead.");
	                      }
	                      else if (startWith === '[') {
	                          throw new Error("@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.");
	                      }
	                      host[("[" + hostBinding.hostPropertyName + "]")] = propName;
	                  }
	                  else {
	                      host[("[" + propName + "]")] = propName;
	                  }
	              });
	              var /** @type {?} */ hostListeners = propertyMetadata[propName].filter(function (a) { return a && a instanceof _angular_core.HostListener; });
	              hostListeners.forEach(function (hostListener) {
	                  var /** @type {?} */ args = hostListener.args || [];
	                  host[("(" + hostListener.eventName + ")")] = propName + "(" + args.join(',') + ")";
	              });
	              var /** @type {?} */ query = ListWrapper.findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Query; });
	              if (query) {
	                  queries[propName] = query;
	              }
	          });
	          return this._merge(dm, inputs, outputs, host, queries, directiveType);
	      };
	      /**
	       * @param {?} def
	       * @return {?}
	       */
	      DirectiveResolver.prototype._extractPublicName = function (def) { return splitAtColon(def, [null, def])[1].trim(); };
	      /**
	       * @param {?} bindings
	       * @return {?}
	       */
	      DirectiveResolver.prototype._dedupeBindings = function (bindings) {
	          var /** @type {?} */ names = new Set();
	          var /** @type {?} */ reversedResult = [];
	          // go last to first to allow later entries to overwrite previous entries
	          for (var /** @type {?} */ i = bindings.length - 1; i >= 0; i--) {
	              var /** @type {?} */ binding = bindings[i];
	              var /** @type {?} */ name_1 = this._extractPublicName(binding);
	              if (!names.has(name_1)) {
	                  names.add(name_1);
	                  reversedResult.push(binding);
	              }
	          }
	          return reversedResult.reverse();
	      };
	      /**
	       * @param {?} directive
	       * @param {?} inputs
	       * @param {?} outputs
	       * @param {?} host
	       * @param {?} queries
	       * @param {?} directiveType
	       * @return {?}
	       */
	      DirectiveResolver.prototype._merge = function (directive, inputs, outputs, host, queries, directiveType) {
	          var /** @type {?} */ mergedInputs = this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);
	          var /** @type {?} */ mergedOutputs = this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);
	          var /** @type {?} */ mergedHost = directive.host ? StringMapWrapper.merge(directive.host, host) : host;
	          var /** @type {?} */ mergedQueries = directive.queries ? StringMapWrapper.merge(directive.queries, queries) : queries;
	          if (directive instanceof _angular_core.Component) {
	              return new _angular_core.Component({
	                  selector: directive.selector,
	                  inputs: mergedInputs,
	                  outputs: mergedOutputs,
	                  host: mergedHost,
	                  exportAs: directive.exportAs,
	                  moduleId: directive.moduleId,
	                  queries: mergedQueries,
	                  changeDetection: directive.changeDetection,
	                  providers: directive.providers,
	                  viewProviders: directive.viewProviders,
	                  entryComponents: directive.entryComponents,
	                  template: directive.template,
	                  templateUrl: directive.templateUrl,
	                  styles: directive.styles,
	                  styleUrls: directive.styleUrls,
	                  encapsulation: directive.encapsulation,
	                  animations: directive.animations,
	                  interpolation: directive.interpolation
	              });
	          }
	          else {
	              return new _angular_core.Directive({
	                  selector: directive.selector,
	                  inputs: mergedInputs,
	                  outputs: mergedOutputs,
	                  host: mergedHost,
	                  exportAs: directive.exportAs,
	                  queries: mergedQueries,
	                  providers: directive.providers
	              });
	          }
	      };
	      DirectiveResolver.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      DirectiveResolver.ctorParameters = function () { return [
	          { type: ReflectorReader, },
	      ]; };
	      return DirectiveResolver;
	  }());
	  /**
	   * @param {?} type
	   * @return {?}
	   */
	  function isDirectiveMetadata(type) {
	      return type instanceof _angular_core.Directive;
	  }
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$15 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var TypeModifier = {};
	  TypeModifier.Const = 0;
	  TypeModifier[TypeModifier.Const] = "Const";
	  /**
	   * @abstract
	   */
	  var Type$1 = (function () {
	      /**
	       * @param {?=} modifiers
	       */
	      function Type(modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          this.modifiers = modifiers;
	          if (!modifiers) {
	              this.modifiers = [];
	          }
	      }
	      /**
	       * @abstract
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      Type.prototype.visitType = function (visitor, context) { };
	      /**
	       * @param {?} modifier
	       * @return {?}
	       */
	      Type.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	      return Type;
	  }());
	  var BuiltinTypeName = {};
	  BuiltinTypeName.Dynamic = 0;
	  BuiltinTypeName.Bool = 1;
	  BuiltinTypeName.String = 2;
	  BuiltinTypeName.Int = 3;
	  BuiltinTypeName.Number = 4;
	  BuiltinTypeName.Function = 5;
	  BuiltinTypeName.Null = 6;
	  BuiltinTypeName[BuiltinTypeName.Dynamic] = "Dynamic";
	  BuiltinTypeName[BuiltinTypeName.Bool] = "Bool";
	  BuiltinTypeName[BuiltinTypeName.String] = "String";
	  BuiltinTypeName[BuiltinTypeName.Int] = "Int";
	  BuiltinTypeName[BuiltinTypeName.Number] = "Number";
	  BuiltinTypeName[BuiltinTypeName.Function] = "Function";
	  BuiltinTypeName[BuiltinTypeName.Null] = "Null";
	  var BuiltinType = (function (_super) {
	      __extends$15(BuiltinType, _super);
	      /**
	       * @param {?} name
	       * @param {?=} modifiers
	       */
	      function BuiltinType(name, modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.name = name;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      BuiltinType.prototype.visitType = function (visitor, context) {
	          return visitor.visitBuiltintType(this, context);
	      };
	      return BuiltinType;
	  }(Type$1));
	  var ExpressionType = (function (_super) {
	      __extends$15(ExpressionType, _super);
	      /**
	       * @param {?} value
	       * @param {?=} typeParams
	       * @param {?=} modifiers
	       */
	      function ExpressionType(value, typeParams, modifiers) {
	          if (typeParams === void 0) { typeParams = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.value = value;
	          this.typeParams = typeParams;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionType.prototype.visitType = function (visitor, context) {
	          return visitor.visitExpressionType(this, context);
	      };
	      return ExpressionType;
	  }(Type$1));
	  var ArrayType = (function (_super) {
	      __extends$15(ArrayType, _super);
	      /**
	       * @param {?} of
	       * @param {?=} modifiers
	       */
	      function ArrayType(of, modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.of = of;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      ArrayType.prototype.visitType = function (visitor, context) {
	          return visitor.visitArrayType(this, context);
	      };
	      return ArrayType;
	  }(Type$1));
	  var MapType = (function (_super) {
	      __extends$15(MapType, _super);
	      /**
	       * @param {?} valueType
	       * @param {?=} modifiers
	       */
	      function MapType(valueType, modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.valueType = valueType;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      MapType.prototype.visitType = function (visitor, context) { return visitor.visitMapType(this, context); };
	      return MapType;
	  }(Type$1));
	  var /** @type {?} */ DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
	  var /** @type {?} */ BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
	  var /** @type {?} */ INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
	  var /** @type {?} */ NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
	  var /** @type {?} */ STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
	  var /** @type {?} */ FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
	  var /** @type {?} */ NULL_TYPE = new BuiltinType(BuiltinTypeName.Null);
	  var BinaryOperator = {};
	  BinaryOperator.Equals = 0;
	  BinaryOperator.NotEquals = 1;
	  BinaryOperator.Identical = 2;
	  BinaryOperator.NotIdentical = 3;
	  BinaryOperator.Minus = 4;
	  BinaryOperator.Plus = 5;
	  BinaryOperator.Divide = 6;
	  BinaryOperator.Multiply = 7;
	  BinaryOperator.Modulo = 8;
	  BinaryOperator.And = 9;
	  BinaryOperator.Or = 10;
	  BinaryOperator.Lower = 11;
	  BinaryOperator.LowerEquals = 12;
	  BinaryOperator.Bigger = 13;
	  BinaryOperator.BiggerEquals = 14;
	  BinaryOperator[BinaryOperator.Equals] = "Equals";
	  BinaryOperator[BinaryOperator.NotEquals] = "NotEquals";
	  BinaryOperator[BinaryOperator.Identical] = "Identical";
	  BinaryOperator[BinaryOperator.NotIdentical] = "NotIdentical";
	  BinaryOperator[BinaryOperator.Minus] = "Minus";
	  BinaryOperator[BinaryOperator.Plus] = "Plus";
	  BinaryOperator[BinaryOperator.Divide] = "Divide";
	  BinaryOperator[BinaryOperator.Multiply] = "Multiply";
	  BinaryOperator[BinaryOperator.Modulo] = "Modulo";
	  BinaryOperator[BinaryOperator.And] = "And";
	  BinaryOperator[BinaryOperator.Or] = "Or";
	  BinaryOperator[BinaryOperator.Lower] = "Lower";
	  BinaryOperator[BinaryOperator.LowerEquals] = "LowerEquals";
	  BinaryOperator[BinaryOperator.Bigger] = "Bigger";
	  BinaryOperator[BinaryOperator.BiggerEquals] = "BiggerEquals";
	  /**
	   * @abstract
	   */
	  var Expression = (function () {
	      /**
	       * @param {?} type
	       */
	      function Expression(type) {
	          this.type = type;
	      }
	      /**
	       * @abstract
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      Expression.prototype.visitExpression = function (visitor, context) { };
	      /**
	       * @param {?} name
	       * @return {?}
	       */
	      Expression.prototype.prop = function (name) { return new ReadPropExpr(this, name); };
	      /**
	       * @param {?} index
	       * @param {?=} type
	       * @return {?}
	       */
	      Expression.prototype.key = function (index, type) {
	          if (type === void 0) { type = null; }
	          return new ReadKeyExpr(this, index, type);
	      };
	      /**
	       * @param {?} name
	       * @param {?} params
	       * @return {?}
	       */
	      Expression.prototype.callMethod = function (name, params) {
	          return new InvokeMethodExpr(this, name, params);
	      };
	      /**
	       * @param {?} params
	       * @return {?}
	       */
	      Expression.prototype.callFn = function (params) { return new InvokeFunctionExpr(this, params); };
	      /**
	       * @param {?} params
	       * @param {?=} type
	       * @return {?}
	       */
	      Expression.prototype.instantiate = function (params, type) {
	          if (type === void 0) { type = null; }
	          return new InstantiateExpr(this, params, type);
	      };
	      /**
	       * @param {?} trueCase
	       * @param {?=} falseCase
	       * @return {?}
	       */
	      Expression.prototype.conditional = function (trueCase, falseCase) {
	          if (falseCase === void 0) { falseCase = null; }
	          return new ConditionalExpr(this, trueCase, falseCase);
	      };
	      /**
	       * @param {?} rhs
	       * @return {?}
	       */
	      Expression.prototype.equals = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);
	      };
	      /**
	       * @param {?} rhs
	       * @return {?}
	       */
	      Expression.prototype.notEquals = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);
	      };
	      /**
	       * @param {?} rhs
	       * @return {?}
	       */
	      Expression.prototype.identical = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);
	      };
	      /**
	       * @param {?} rhs
	       * @return {?}
	       */
	      Expression.prototype.notIdentical = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);
	      };
	      /**
	       * @param {?} rhs
	       * @return {?}
	       */
	      Expression.prototype.minus = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);
	      };
	      /**
	       * @param {?} rhs
	       * @return {?}
	       */
	      Expression.prototype.plus = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);
	      };
	      /**
	       * @param {?} rhs
	       * @return {?}
	       */
	      Expression.prototype.divide = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);
	      };
	      /**
	       * @param {?} rhs
	       * @return {?}
	       */
	      Expression.prototype.multiply = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);
	      };
	      /**
	       * @param {?} rhs
	       * @return {?}
	       */
	      Expression.prototype.modulo = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);
	      };
	      /**
	       * @param {?} rhs
	       * @return {?}
	       */
	      Expression.prototype.and = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);
	      };
	      /**
	       * @param {?} rhs
	       * @return {?}
	       */
	      Expression.prototype.or = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);
	      };
	      /**
	       * @param {?} rhs
	       * @return {?}
	       */
	      Expression.prototype.lower = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);
	      };
	      /**
	       * @param {?} rhs
	       * @return {?}
	       */
	      Expression.prototype.lowerEquals = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);
	      };
	      /**
	       * @param {?} rhs
	       * @return {?}
	       */
	      Expression.prototype.bigger = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);
	      };
	      /**
	       * @param {?} rhs
	       * @return {?}
	       */
	      Expression.prototype.biggerEquals = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);
	      };
	      /**
	       * @return {?}
	       */
	      Expression.prototype.isBlank = function () {
	          // Note: We use equals by purpose here to compare to null and undefined in JS.
	          // We use the typed null to allow strictNullChecks to narrow types.
	          return this.equals(TYPED_NULL_EXPR);
	      };
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      Expression.prototype.cast = function (type) { return new CastExpr(this, type); };
	      /**
	       * @return {?}
	       */
	      Expression.prototype.toStmt = function () { return new ExpressionStatement(this); };
	      return Expression;
	  }());
	  var BuiltinVar = {};
	  BuiltinVar.This = 0;
	  BuiltinVar.Super = 1;
	  BuiltinVar.CatchError = 2;
	  BuiltinVar.CatchStack = 3;
	  BuiltinVar[BuiltinVar.This] = "This";
	  BuiltinVar[BuiltinVar.Super] = "Super";
	  BuiltinVar[BuiltinVar.CatchError] = "CatchError";
	  BuiltinVar[BuiltinVar.CatchStack] = "CatchStack";
	  var ReadVarExpr = (function (_super) {
	      __extends$15(ReadVarExpr, _super);
	      /**
	       * @param {?} name
	       * @param {?=} type
	       */
	      function ReadVarExpr(name, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          if (typeof name === 'string') {
	              this.name = name;
	              this.builtin = null;
	          }
	          else {
	              this.name = null;
	              this.builtin = name;
	          }
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      ReadVarExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitReadVarExpr(this, context);
	      };
	      /**
	       * @param {?} value
	       * @return {?}
	       */
	      ReadVarExpr.prototype.set = function (value) { return new WriteVarExpr(this.name, value); };
	      return ReadVarExpr;
	  }(Expression));
	  var WriteVarExpr = (function (_super) {
	      __extends$15(WriteVarExpr, _super);
	      /**
	       * @param {?} name
	       * @param {?} value
	       * @param {?=} type
	       */
	      function WriteVarExpr(name, value, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type || value.type);
	          this.name = name;
	          this.value = value;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      WriteVarExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitWriteVarExpr(this, context);
	      };
	      /**
	       * @param {?=} type
	       * @param {?=} modifiers
	       * @return {?}
	       */
	      WriteVarExpr.prototype.toDeclStmt = function (type, modifiers) {
	          if (type === void 0) { type = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          return new DeclareVarStmt(this.name, this.value, type, modifiers);
	      };
	      return WriteVarExpr;
	  }(Expression));
	  var WriteKeyExpr = (function (_super) {
	      __extends$15(WriteKeyExpr, _super);
	      /**
	       * @param {?} receiver
	       * @param {?} index
	       * @param {?} value
	       * @param {?=} type
	       */
	      function WriteKeyExpr(receiver, index, value, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type || value.type);
	          this.receiver = receiver;
	          this.index = index;
	          this.value = value;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      WriteKeyExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitWriteKeyExpr(this, context);
	      };
	      return WriteKeyExpr;
	  }(Expression));
	  var WritePropExpr = (function (_super) {
	      __extends$15(WritePropExpr, _super);
	      /**
	       * @param {?} receiver
	       * @param {?} name
	       * @param {?} value
	       * @param {?=} type
	       */
	      function WritePropExpr(receiver, name, value, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type || value.type);
	          this.receiver = receiver;
	          this.name = name;
	          this.value = value;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      WritePropExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitWritePropExpr(this, context);
	      };
	      return WritePropExpr;
	  }(Expression));
	  var BuiltinMethod = {};
	  BuiltinMethod.ConcatArray = 0;
	  BuiltinMethod.SubscribeObservable = 1;
	  BuiltinMethod.Bind = 2;
	  BuiltinMethod[BuiltinMethod.ConcatArray] = "ConcatArray";
	  BuiltinMethod[BuiltinMethod.SubscribeObservable] = "SubscribeObservable";
	  BuiltinMethod[BuiltinMethod.Bind] = "Bind";
	  var InvokeMethodExpr = (function (_super) {
	      __extends$15(InvokeMethodExpr, _super);
	      /**
	       * @param {?} receiver
	       * @param {?} method
	       * @param {?} args
	       * @param {?=} type
	       */
	      function InvokeMethodExpr(receiver, method, args, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.receiver = receiver;
	          this.args = args;
	          if (typeof method === 'string') {
	              this.name = method;
	              this.builtin = null;
	          }
	          else {
	              this.name = null;
	              this.builtin = method;
	          }
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      InvokeMethodExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitInvokeMethodExpr(this, context);
	      };
	      return InvokeMethodExpr;
	  }(Expression));
	  var InvokeFunctionExpr = (function (_super) {
	      __extends$15(InvokeFunctionExpr, _super);
	      /**
	       * @param {?} fn
	       * @param {?} args
	       * @param {?=} type
	       */
	      function InvokeFunctionExpr(fn, args, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.fn = fn;
	          this.args = args;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      InvokeFunctionExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitInvokeFunctionExpr(this, context);
	      };
	      return InvokeFunctionExpr;
	  }(Expression));
	  var InstantiateExpr = (function (_super) {
	      __extends$15(InstantiateExpr, _super);
	      /**
	       * @param {?} classExpr
	       * @param {?} args
	       * @param {?=} type
	       */
	      function InstantiateExpr(classExpr, args, type) {
	          _super.call(this, type);
	          this.classExpr = classExpr;
	          this.args = args;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      InstantiateExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitInstantiateExpr(this, context);
	      };
	      return InstantiateExpr;
	  }(Expression));
	  var LiteralExpr = (function (_super) {
	      __extends$15(LiteralExpr, _super);
	      /**
	       * @param {?} value
	       * @param {?=} type
	       */
	      function LiteralExpr(value, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.value = value;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      LiteralExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitLiteralExpr(this, context);
	      };
	      return LiteralExpr;
	  }(Expression));
	  var ExternalExpr = (function (_super) {
	      __extends$15(ExternalExpr, _super);
	      /**
	       * @param {?} value
	       * @param {?=} type
	       * @param {?=} typeParams
	       */
	      function ExternalExpr(value, type, typeParams) {
	          if (type === void 0) { type = null; }
	          if (typeParams === void 0) { typeParams = null; }
	          _super.call(this, type);
	          this.value = value;
	          this.typeParams = typeParams;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      ExternalExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitExternalExpr(this, context);
	      };
	      return ExternalExpr;
	  }(Expression));
	  var ConditionalExpr = (function (_super) {
	      __extends$15(ConditionalExpr, _super);
	      /**
	       * @param {?} condition
	       * @param {?} trueCase
	       * @param {?=} falseCase
	       * @param {?=} type
	       */
	      function ConditionalExpr(condition, trueCase, falseCase, type) {
	          if (falseCase === void 0) { falseCase = null; }
	          if (type === void 0) { type = null; }
	          _super.call(this, type || trueCase.type);
	          this.condition = condition;
	          this.falseCase = falseCase;
	          this.trueCase = trueCase;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      ConditionalExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitConditionalExpr(this, context);
	      };
	      return ConditionalExpr;
	  }(Expression));
	  var NotExpr = (function (_super) {
	      __extends$15(NotExpr, _super);
	      /**
	       * @param {?} condition
	       */
	      function NotExpr(condition) {
	          _super.call(this, BOOL_TYPE);
	          this.condition = condition;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      NotExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitNotExpr(this, context);
	      };
	      return NotExpr;
	  }(Expression));
	  var CastExpr = (function (_super) {
	      __extends$15(CastExpr, _super);
	      /**
	       * @param {?} value
	       * @param {?} type
	       */
	      function CastExpr(value, type) {
	          _super.call(this, type);
	          this.value = value;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      CastExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitCastExpr(this, context);
	      };
	      return CastExpr;
	  }(Expression));
	  var FnParam = (function () {
	      /**
	       * @param {?} name
	       * @param {?=} type
	       */
	      function FnParam(name, type) {
	          if (type === void 0) { type = null; }
	          this.name = name;
	          this.type = type;
	      }
	      return FnParam;
	  }());
	  var FunctionExpr = (function (_super) {
	      __extends$15(FunctionExpr, _super);
	      /**
	       * @param {?} params
	       * @param {?} statements
	       * @param {?=} type
	       */
	      function FunctionExpr(params, statements, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.params = params;
	          this.statements = statements;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      FunctionExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitFunctionExpr(this, context);
	      };
	      /**
	       * @param {?} name
	       * @param {?=} modifiers
	       * @return {?}
	       */
	      FunctionExpr.prototype.toDeclStmt = function (name, modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);
	      };
	      return FunctionExpr;
	  }(Expression));
	  var BinaryOperatorExpr = (function (_super) {
	      __extends$15(BinaryOperatorExpr, _super);
	      /**
	       * @param {?} operator
	       * @param {?} lhs
	       * @param {?} rhs
	       * @param {?=} type
	       */
	      function BinaryOperatorExpr(operator, lhs, rhs, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type || lhs.type);
	          this.operator = operator;
	          this.rhs = rhs;
	          this.lhs = lhs;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      BinaryOperatorExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitBinaryOperatorExpr(this, context);
	      };
	      return BinaryOperatorExpr;
	  }(Expression));
	  var ReadPropExpr = (function (_super) {
	      __extends$15(ReadPropExpr, _super);
	      /**
	       * @param {?} receiver
	       * @param {?} name
	       * @param {?=} type
	       */
	      function ReadPropExpr(receiver, name, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.receiver = receiver;
	          this.name = name;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      ReadPropExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitReadPropExpr(this, context);
	      };
	      /**
	       * @param {?} value
	       * @return {?}
	       */
	      ReadPropExpr.prototype.set = function (value) {
	          return new WritePropExpr(this.receiver, this.name, value);
	      };
	      return ReadPropExpr;
	  }(Expression));
	  var ReadKeyExpr = (function (_super) {
	      __extends$15(ReadKeyExpr, _super);
	      /**
	       * @param {?} receiver
	       * @param {?} index
	       * @param {?=} type
	       */
	      function ReadKeyExpr(receiver, index, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.receiver = receiver;
	          this.index = index;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      ReadKeyExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitReadKeyExpr(this, context);
	      };
	      /**
	       * @param {?} value
	       * @return {?}
	       */
	      ReadKeyExpr.prototype.set = function (value) {
	          return new WriteKeyExpr(this.receiver, this.index, value);
	      };
	      return ReadKeyExpr;
	  }(Expression));
	  var LiteralArrayExpr = (function (_super) {
	      __extends$15(LiteralArrayExpr, _super);
	      /**
	       * @param {?} entries
	       * @param {?=} type
	       */
	      function LiteralArrayExpr(entries, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.entries = entries;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      LiteralArrayExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitLiteralArrayExpr(this, context);
	      };
	      return LiteralArrayExpr;
	  }(Expression));
	  var LiteralMapEntry = (function () {
	      /**
	       * @param {?} key
	       * @param {?} value
	       * @param {?=} quoted
	       */
	      function LiteralMapEntry(key, value, quoted) {
	          if (quoted === void 0) { quoted = false; }
	          this.key = key;
	          this.value = value;
	          this.quoted = quoted;
	      }
	      return LiteralMapEntry;
	  }());
	  var LiteralMapExpr = (function (_super) {
	      __extends$15(LiteralMapExpr, _super);
	      /**
	       * @param {?} entries
	       * @param {?=} type
	       */
	      function LiteralMapExpr(entries, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.entries = entries;
	          this.valueType = null;
	          if (isPresent(type)) {
	              this.valueType = type.valueType;
	          }
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      LiteralMapExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitLiteralMapExpr(this, context);
	      };
	      return LiteralMapExpr;
	  }(Expression));
	  var /** @type {?} */ THIS_EXPR = new ReadVarExpr(BuiltinVar.This);
	  var /** @type {?} */ SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);
	  var /** @type {?} */ CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);
	  var /** @type {?} */ CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);
	  var /** @type {?} */ NULL_EXPR = new LiteralExpr(null, null);
	  var /** @type {?} */ TYPED_NULL_EXPR = new LiteralExpr(null, NULL_TYPE);
	  var StmtModifier = {};
	  StmtModifier.Final = 0;
	  StmtModifier.Private = 1;
	  StmtModifier[StmtModifier.Final] = "Final";
	  StmtModifier[StmtModifier.Private] = "Private";
	  /**
	   * @abstract
	   */
	  var Statement = (function () {
	      /**
	       * @param {?=} modifiers
	       */
	      function Statement(modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          this.modifiers = modifiers;
	          if (!modifiers) {
	              this.modifiers = [];
	          }
	      }
	      /**
	       * @abstract
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      Statement.prototype.visitStatement = function (visitor, context) { };
	      /**
	       * @param {?} modifier
	       * @return {?}
	       */
	      Statement.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	      return Statement;
	  }());
	  var DeclareVarStmt = (function (_super) {
	      __extends$15(DeclareVarStmt, _super);
	      /**
	       * @param {?} name
	       * @param {?} value
	       * @param {?=} type
	       * @param {?=} modifiers
	       */
	      function DeclareVarStmt(name, value, type, modifiers) {
	          if (type === void 0) { type = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.name = name;
	          this.value = value;
	          this.type = type || value.type;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      DeclareVarStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitDeclareVarStmt(this, context);
	      };
	      return DeclareVarStmt;
	  }(Statement));
	  var DeclareFunctionStmt = (function (_super) {
	      __extends$15(DeclareFunctionStmt, _super);
	      /**
	       * @param {?} name
	       * @param {?} params
	       * @param {?} statements
	       * @param {?=} type
	       * @param {?=} modifiers
	       */
	      function DeclareFunctionStmt(name, params, statements, type, modifiers) {
	          if (type === void 0) { type = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.name = name;
	          this.params = params;
	          this.statements = statements;
	          this.type = type;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      DeclareFunctionStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitDeclareFunctionStmt(this, context);
	      };
	      return DeclareFunctionStmt;
	  }(Statement));
	  var ExpressionStatement = (function (_super) {
	      __extends$15(ExpressionStatement, _super);
	      /**
	       * @param {?} expr
	       */
	      function ExpressionStatement(expr) {
	          _super.call(this);
	          this.expr = expr;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionStatement.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitExpressionStmt(this, context);
	      };
	      return ExpressionStatement;
	  }(Statement));
	  var ReturnStatement = (function (_super) {
	      __extends$15(ReturnStatement, _super);
	      /**
	       * @param {?} value
	       */
	      function ReturnStatement(value) {
	          _super.call(this);
	          this.value = value;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      ReturnStatement.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitReturnStmt(this, context);
	      };
	      return ReturnStatement;
	  }(Statement));
	  var AbstractClassPart = (function () {
	      /**
	       * @param {?=} type
	       * @param {?} modifiers
	       */
	      function AbstractClassPart(type, modifiers) {
	          if (type === void 0) { type = null; }
	          this.type = type;
	          this.modifiers = modifiers;
	          if (!modifiers) {
	              this.modifiers = [];
	          }
	      }
	      /**
	       * @param {?} modifier
	       * @return {?}
	       */
	      AbstractClassPart.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	      return AbstractClassPart;
	  }());
	  var ClassField = (function (_super) {
	      __extends$15(ClassField, _super);
	      /**
	       * @param {?} name
	       * @param {?=} type
	       * @param {?=} modifiers
	       */
	      function ClassField(name, type, modifiers) {
	          if (type === void 0) { type = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, type, modifiers);
	          this.name = name;
	      }
	      return ClassField;
	  }(AbstractClassPart));
	  var ClassMethod = (function (_super) {
	      __extends$15(ClassMethod, _super);
	      /**
	       * @param {?} name
	       * @param {?} params
	       * @param {?} body
	       * @param {?=} type
	       * @param {?=} modifiers
	       */
	      function ClassMethod(name, params, body, type, modifiers) {
	          if (type === void 0) { type = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, type, modifiers);
	          this.name = name;
	          this.params = params;
	          this.body = body;
	      }
	      return ClassMethod;
	  }(AbstractClassPart));
	  var ClassGetter = (function (_super) {
	      __extends$15(ClassGetter, _super);
	      /**
	       * @param {?} name
	       * @param {?} body
	       * @param {?=} type
	       * @param {?=} modifiers
	       */
	      function ClassGetter(name, body, type, modifiers) {
	          if (type === void 0) { type = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, type, modifiers);
	          this.name = name;
	          this.body = body;
	      }
	      return ClassGetter;
	  }(AbstractClassPart));
	  var ClassStmt = (function (_super) {
	      __extends$15(ClassStmt, _super);
	      /**
	       * @param {?} name
	       * @param {?} parent
	       * @param {?} fields
	       * @param {?} getters
	       * @param {?} constructorMethod
	       * @param {?} methods
	       * @param {?=} modifiers
	       */
	      function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.name = name;
	          this.parent = parent;
	          this.fields = fields;
	          this.getters = getters;
	          this.constructorMethod = constructorMethod;
	          this.methods = methods;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      ClassStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitDeclareClassStmt(this, context);
	      };
	      return ClassStmt;
	  }(Statement));
	  var IfStmt = (function (_super) {
	      __extends$15(IfStmt, _super);
	      /**
	       * @param {?} condition
	       * @param {?} trueCase
	       * @param {?=} falseCase
	       */
	      function IfStmt(condition, trueCase, falseCase) {
	          if (falseCase === void 0) { falseCase = []; }
	          _super.call(this);
	          this.condition = condition;
	          this.trueCase = trueCase;
	          this.falseCase = falseCase;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      IfStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitIfStmt(this, context);
	      };
	      return IfStmt;
	  }(Statement));
	  var CommentStmt = (function (_super) {
	      __extends$15(CommentStmt, _super);
	      /**
	       * @param {?} comment
	       */
	      function CommentStmt(comment) {
	          _super.call(this);
	          this.comment = comment;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      CommentStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitCommentStmt(this, context);
	      };
	      return CommentStmt;
	  }(Statement));
	  var TryCatchStmt = (function (_super) {
	      __extends$15(TryCatchStmt, _super);
	      /**
	       * @param {?} bodyStmts
	       * @param {?} catchStmts
	       */
	      function TryCatchStmt(bodyStmts, catchStmts) {
	          _super.call(this);
	          this.bodyStmts = bodyStmts;
	          this.catchStmts = catchStmts;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      TryCatchStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitTryCatchStmt(this, context);
	      };
	      return TryCatchStmt;
	  }(Statement));
	  var ThrowStmt = (function (_super) {
	      __extends$15(ThrowStmt, _super);
	      /**
	       * @param {?} error
	       */
	      function ThrowStmt(error) {
	          _super.call(this);
	          this.error = error;
	      }
	      /**
	       * @param {?} visitor
	       * @param {?} context
	       * @return {?}
	       */
	      ThrowStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitThrowStmt(this, context);
	      };
	      return ThrowStmt;
	  }(Statement));
	  var ExpressionTransformer = (function () {
	      function ExpressionTransformer() {
	      }
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitReadVarExpr = function (ast, context) { return ast; };
	      /**
	       * @param {?} expr
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitWriteVarExpr = function (expr, context) {
	          return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));
	      };
	      /**
	       * @param {?} expr
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitWriteKeyExpr = function (expr, context) {
	          return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context));
	      };
	      /**
	       * @param {?} expr
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitWritePropExpr = function (expr, context) {
	          return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context));
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitInvokeMethodExpr = function (ast, context) {
	          var /** @type {?} */ method = ast.builtin || ast.name;
	          return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitInvokeFunctionExpr = function (ast, context) {
	          return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitInstantiateExpr = function (ast, context) {
	          return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitLiteralExpr = function (ast, context) { return ast; };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitExternalExpr = function (ast, context) { return ast; };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitConditionalExpr = function (ast, context) {
	          return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context));
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitNotExpr = function (ast, context) {
	          return new NotExpr(ast.condition.visitExpression(this, context));
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitCastExpr = function (ast, context) {
	          return new CastExpr(ast.value.visitExpression(this, context), context);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitFunctionExpr = function (ast, context) {
	          // Don't descend into nested functions
	          return ast;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitBinaryOperatorExpr = function (ast, context) {
	          return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitReadPropExpr = function (ast, context) {
	          return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitReadKeyExpr = function (ast, context) {
	          return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitLiteralArrayExpr = function (ast, context) {
	          return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitLiteralMapExpr = function (ast, context) {
	          var _this = this;
	          var /** @type {?} */ entries = ast.entries.map(function (entry) { return new LiteralMapEntry(entry.key, entry.value.visitExpression(_this, context), entry.quoted); });
	          return new LiteralMapExpr(entries);
	      };
	      /**
	       * @param {?} exprs
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitAllExpressions = function (exprs, context) {
	          var _this = this;
	          return exprs.map(function (expr) { return expr.visitExpression(_this, context); });
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitDeclareVarStmt = function (stmt, context) {
	          return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers);
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	          // Don't descend into nested functions
	          return stmt;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitExpressionStmt = function (stmt, context) {
	          return new ExpressionStatement(stmt.expr.visitExpression(this, context));
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitReturnStmt = function (stmt, context) {
	          return new ReturnStatement(stmt.value.visitExpression(this, context));
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitDeclareClassStmt = function (stmt, context) {
	          // Don't descend into nested functions
	          return stmt;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitIfStmt = function (stmt, context) {
	          return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context));
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitTryCatchStmt = function (stmt, context) {
	          return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context));
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitThrowStmt = function (stmt, context) {
	          return new ThrowStmt(stmt.error.visitExpression(this, context));
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitCommentStmt = function (stmt, context) { return stmt; };
	      /**
	       * @param {?} stmts
	       * @param {?} context
	       * @return {?}
	       */
	      ExpressionTransformer.prototype.visitAllStatements = function (stmts, context) {
	          var _this = this;
	          return stmts.map(function (stmt) { return stmt.visitStatement(_this, context); });
	      };
	      return ExpressionTransformer;
	  }());
	  var RecursiveExpressionVisitor = (function () {
	      function RecursiveExpressionVisitor() {
	      }
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitReadVarExpr = function (ast, context) { return ast; };
	      /**
	       * @param {?} expr
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitWriteVarExpr = function (expr, context) {
	          expr.value.visitExpression(this, context);
	          return expr;
	      };
	      /**
	       * @param {?} expr
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitWriteKeyExpr = function (expr, context) {
	          expr.receiver.visitExpression(this, context);
	          expr.index.visitExpression(this, context);
	          expr.value.visitExpression(this, context);
	          return expr;
	      };
	      /**
	       * @param {?} expr
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitWritePropExpr = function (expr, context) {
	          expr.receiver.visitExpression(this, context);
	          expr.value.visitExpression(this, context);
	          return expr;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitInvokeMethodExpr = function (ast, context) {
	          ast.receiver.visitExpression(this, context);
	          this.visitAllExpressions(ast.args, context);
	          return ast;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitInvokeFunctionExpr = function (ast, context) {
	          ast.fn.visitExpression(this, context);
	          this.visitAllExpressions(ast.args, context);
	          return ast;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitInstantiateExpr = function (ast, context) {
	          ast.classExpr.visitExpression(this, context);
	          this.visitAllExpressions(ast.args, context);
	          return ast;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitLiteralExpr = function (ast, context) { return ast; };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitExternalExpr = function (ast, context) { return ast; };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitConditionalExpr = function (ast, context) {
	          ast.condition.visitExpression(this, context);
	          ast.trueCase.visitExpression(this, context);
	          ast.falseCase.visitExpression(this, context);
	          return ast;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitNotExpr = function (ast, context) {
	          ast.condition.visitExpression(this, context);
	          return ast;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitCastExpr = function (ast, context) {
	          ast.value.visitExpression(this, context);
	          return ast;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitFunctionExpr = function (ast, context) { return ast; };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitBinaryOperatorExpr = function (ast, context) {
	          ast.lhs.visitExpression(this, context);
	          ast.rhs.visitExpression(this, context);
	          return ast;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitReadPropExpr = function (ast, context) {
	          ast.receiver.visitExpression(this, context);
	          return ast;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitReadKeyExpr = function (ast, context) {
	          ast.receiver.visitExpression(this, context);
	          ast.index.visitExpression(this, context);
	          return ast;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitLiteralArrayExpr = function (ast, context) {
	          this.visitAllExpressions(ast.entries, context);
	          return ast;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitLiteralMapExpr = function (ast, context) {
	          var _this = this;
	          ast.entries.forEach(function (entry) { return entry.value.visitExpression(_this, context); });
	          return ast;
	      };
	      /**
	       * @param {?} exprs
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitAllExpressions = function (exprs, context) {
	          var _this = this;
	          exprs.forEach(function (expr) { return expr.visitExpression(_this, context); });
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitDeclareVarStmt = function (stmt, context) {
	          stmt.value.visitExpression(this, context);
	          return stmt;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	          // Don't descend into nested functions
	          return stmt;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitExpressionStmt = function (stmt, context) {
	          stmt.expr.visitExpression(this, context);
	          return stmt;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitReturnStmt = function (stmt, context) {
	          stmt.value.visitExpression(this, context);
	          return stmt;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitDeclareClassStmt = function (stmt, context) {
	          // Don't descend into nested functions
	          return stmt;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitIfStmt = function (stmt, context) {
	          stmt.condition.visitExpression(this, context);
	          this.visitAllStatements(stmt.trueCase, context);
	          this.visitAllStatements(stmt.falseCase, context);
	          return stmt;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitTryCatchStmt = function (stmt, context) {
	          this.visitAllStatements(stmt.bodyStmts, context);
	          this.visitAllStatements(stmt.catchStmts, context);
	          return stmt;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitThrowStmt = function (stmt, context) {
	          stmt.error.visitExpression(this, context);
	          return stmt;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitCommentStmt = function (stmt, context) { return stmt; };
	      /**
	       * @param {?} stmts
	       * @param {?} context
	       * @return {?}
	       */
	      RecursiveExpressionVisitor.prototype.visitAllStatements = function (stmts, context) {
	          var _this = this;
	          stmts.forEach(function (stmt) { return stmt.visitStatement(_this, context); });
	      };
	      return RecursiveExpressionVisitor;
	  }());
	  /**
	   * @param {?} varName
	   * @param {?} newValue
	   * @param {?} expression
	   * @return {?}
	   */
	  function replaceVarInExpression(varName, newValue, expression) {
	      var /** @type {?} */ transformer = new _ReplaceVariableTransformer(varName, newValue);
	      return expression.visitExpression(transformer, null);
	  }
	  var _ReplaceVariableTransformer = (function (_super) {
	      __extends$15(_ReplaceVariableTransformer, _super);
	      /**
	       * @param {?} _varName
	       * @param {?} _newValue
	       */
	      function _ReplaceVariableTransformer(_varName, _newValue) {
	          _super.call(this);
	          this._varName = _varName;
	          this._newValue = _newValue;
	      }
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      _ReplaceVariableTransformer.prototype.visitReadVarExpr = function (ast, context) {
	          return ast.name == this._varName ? this._newValue : ast;
	      };
	      return _ReplaceVariableTransformer;
	  }(ExpressionTransformer));
	  /**
	   * @param {?} stmts
	   * @return {?}
	   */
	  function findReadVarNames(stmts) {
	      var /** @type {?} */ finder = new _VariableFinder();
	      finder.visitAllStatements(stmts, null);
	      return finder.varNames;
	  }
	  var _VariableFinder = (function (_super) {
	      __extends$15(_VariableFinder, _super);
	      function _VariableFinder() {
	          _super.apply(this, arguments);
	          this.varNames = new Set();
	      }
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      _VariableFinder.prototype.visitReadVarExpr = function (ast, context) {
	          this.varNames.add(ast.name);
	          return null;
	      };
	      return _VariableFinder;
	  }(RecursiveExpressionVisitor));
	  /**
	   * @param {?} name
	   * @param {?=} type
	   * @return {?}
	   */
	  function variable(name, type) {
	      if (type === void 0) { type = null; }
	      return new ReadVarExpr(name, type);
	  }
	  /**
	   * @param {?} id
	   * @param {?=} typeParams
	   * @return {?}
	   */
	  function importExpr(id, typeParams) {
	      if (typeParams === void 0) { typeParams = null; }
	      return new ExternalExpr(id, null, typeParams);
	  }
	  /**
	   * @param {?} id
	   * @param {?=} typeParams
	   * @param {?=} typeModifiers
	   * @return {?}
	   */
	  function importType(id, typeParams, typeModifiers) {
	      if (typeParams === void 0) { typeParams = null; }
	      if (typeModifiers === void 0) { typeModifiers = null; }
	      return isPresent(id) ? expressionType(importExpr(id), typeParams, typeModifiers) : null;
	  }
	  /**
	   * @param {?} expr
	   * @param {?=} typeParams
	   * @param {?=} typeModifiers
	   * @return {?}
	   */
	  function expressionType(expr, typeParams, typeModifiers) {
	      if (typeParams === void 0) { typeParams = null; }
	      if (typeModifiers === void 0) { typeModifiers = null; }
	      return isPresent(expr) ? new ExpressionType(expr, typeParams, typeModifiers) : null;
	  }
	  /**
	   * @param {?} values
	   * @param {?=} type
	   * @return {?}
	   */
	  function literalArr(values, type) {
	      if (type === void 0) { type = null; }
	      return new LiteralArrayExpr(values, type);
	  }
	  /**
	   * @param {?} values
	   * @param {?=} type
	   * @return {?}
	   */
	  function literalMap(values, type) {
	      if (type === void 0) { type = null; }
	      return new LiteralMapExpr(values.map(function (entry) { return new LiteralMapEntry(entry[0], entry[1]); }), type);
	  }
	  /**
	   * @param {?} expr
	   * @return {?}
	   */
	  function not(expr) {
	      return new NotExpr(expr);
	  }
	  /**
	   * @param {?} params
	   * @param {?} body
	   * @param {?=} type
	   * @return {?}
	   */
	  function fn(params, body, type) {
	      if (type === void 0) { type = null; }
	      return new FunctionExpr(params, body, type);
	  }
	  /**
	   * @param {?} value
	   * @param {?=} type
	   * @return {?}
	   */
	  function literal(value, type) {
	      if (type === void 0) { type = null; }
	      return new LiteralExpr(value, type);
	  }
	
	  var CheckBindingField = (function () {
	      /**
	       * @param {?} expression
	       * @param {?} bindingId
	       */
	      function CheckBindingField(expression, bindingId) {
	          this.expression = expression;
	          this.bindingId = bindingId;
	      }
	      return CheckBindingField;
	  }());
	  /**
	   * @param {?} builder
	   * @return {?}
	   */
	  function createCheckBindingField(builder) {
	      var /** @type {?} */ bindingId = "" + builder.fields.length;
	      var /** @type {?} */ fieldExpr = createBindFieldExpr(bindingId);
	      // private is fine here as no child view will reference the cached value...
	      builder.fields.push(new ClassField(fieldExpr.name, null, [StmtModifier.Private]));
	      builder.ctorStmts.push(THIS_EXPR.prop(fieldExpr.name)
	          .set(importExpr(createIdentifier(Identifiers.UNINITIALIZED)))
	          .toStmt());
	      return new CheckBindingField(fieldExpr, bindingId);
	  }
	  /**
	   * @param {?} evalResult
	   * @param {?} fieldExpr
	   * @param {?} throwOnChangeVar
	   * @param {?} actions
	   * @return {?}
	   */
	  function createCheckBindingStmt(evalResult, fieldExpr, throwOnChangeVar, actions) {
	      var /** @type {?} */ condition = importExpr(createIdentifier(Identifiers.checkBinding)).callFn([
	          throwOnChangeVar, fieldExpr, evalResult.currValExpr
	      ]);
	      if (evalResult.forceUpdate) {
	          condition = evalResult.forceUpdate.or(condition);
	      }
	      return evalResult.stmts.concat([
	          new IfStmt(condition, actions.concat([(THIS_EXPR.prop(fieldExpr.name).set(evalResult.currValExpr).toStmt())
	          ]))
	      ]);
	  }
	  /**
	   * @param {?} bindingId
	   * @return {?}
	   */
	  function createBindFieldExpr(bindingId) {
	      return THIS_EXPR.prop("_expr_" + bindingId);
	  }
	
	  /**
	   * @param {?} token
	   * @return {?}
	   */
	  function createDiTokenExpression(token) {
	      if (isPresent(token.value)) {
	          return literal(token.value);
	      }
	      else {
	          return importExpr(token.identifier);
	      }
	  }
	  /**
	   * @param {?} values
	   * @return {?}
	   */
	  function createInlineArray(values) {
	      if (values.length === 0) {
	          return importExpr(createIdentifier(Identifiers.EMPTY_INLINE_ARRAY));
	      }
	      var /** @type {?} */ log2 = Math.log(values.length) / Math.log(2);
	      var /** @type {?} */ index = Math.ceil(log2);
	      var /** @type {?} */ identifierSpec = index < Identifiers.inlineArrays.length ? Identifiers.inlineArrays[index] :
	          Identifiers.InlineArrayDynamic;
	      var /** @type {?} */ identifier = createIdentifier(identifierSpec);
	      return importExpr(identifier).instantiate([(literal(values.length))
	      ].concat(values));
	  }
	  /**
	   * @param {?} fn
	   * @param {?} argCount
	   * @param {?} pureProxyProp
	   * @param {?} builder
	   * @return {?}
	   */
	  function createPureProxy(fn, argCount, pureProxyProp, builder) {
	      builder.fields.push(new ClassField(pureProxyProp.name, null));
	      var /** @type {?} */ pureProxyId = argCount < Identifiers.pureProxies.length ? Identifiers.pureProxies[argCount] : null;
	      if (!pureProxyId) {
	          throw new Error("Unsupported number of argument for pure functions: " + argCount);
	      }
	      builder.ctorStmts.push(THIS_EXPR.prop(pureProxyProp.name)
	          .set(importExpr(createIdentifier(pureProxyId)).callFn([fn]))
	          .toStmt());
	  }
	  /**
	   * @param {?} enumType
	   * @param {?} enumValue
	   * @return {?}
	   */
	  function createEnumExpression(enumType, enumValue) {
	      var /** @type {?} */ enumName = Object.keys(enumType.runtime).find(function (propName) { return enumType.runtime[propName] === enumValue; });
	      if (!enumName) {
	          throw new Error("Unknown enum value " + enumValue + " in " + enumType.name);
	      }
	      return importExpr(createEnumIdentifier(enumType, enumName));
	  }
	
	  var /** @type {?} */ VAL_UNWRAPPER_VAR = variable("valUnwrapper");
	  var EventHandlerVars = (function () {
	      function EventHandlerVars() {
	      }
	      EventHandlerVars.event = variable('$event');
	      return EventHandlerVars;
	  }());
	  var ConvertPropertyBindingResult = (function () {
	      /**
	       * @param {?} stmts
	       * @param {?} currValExpr
	       * @param {?} forceUpdate
	       */
	      function ConvertPropertyBindingResult(stmts, currValExpr, forceUpdate) {
	          this.stmts = stmts;
	          this.currValExpr = currValExpr;
	          this.forceUpdate = forceUpdate;
	      }
	      return ConvertPropertyBindingResult;
	  }());
	  /**
	   *  Converts the given expression AST into an executable output AST, assuming the expression is
	    * used in a property binding.
	   * @param {?} builder
	   * @param {?} nameResolver
	   * @param {?} implicitReceiver
	   * @param {?} expression
	   * @param {?} bindingId
	   * @return {?}
	   */
	  function convertPropertyBinding(builder, nameResolver, implicitReceiver, expression, bindingId) {
	      var /** @type {?} */ currValExpr = createCurrValueExpr(bindingId);
	      var /** @type {?} */ stmts = [];
	      if (!nameResolver) {
	          nameResolver = new DefaultNameResolver();
	      }
	      var /** @type {?} */ visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, VAL_UNWRAPPER_VAR, bindingId, false);
	      var /** @type {?} */ outputExpr = expression.visit(visitor, _Mode.Expression);
	      if (!outputExpr) {
	          // e.g. an empty expression was given
	          return null;
	      }
	      if (visitor.temporaryCount) {
	          for (var /** @type {?} */ i = 0; i < visitor.temporaryCount; i++) {
	              stmts.push(temporaryDeclaration(bindingId, i));
	          }
	      }
	      if (visitor.needsValueUnwrapper) {
	          var /** @type {?} */ initValueUnwrapperStmt = VAL_UNWRAPPER_VAR.callMethod('reset', []).toStmt();
	          stmts.push(initValueUnwrapperStmt);
	      }
	      stmts.push(currValExpr.set(outputExpr).toDeclStmt(null, [StmtModifier.Final]));
	      if (visitor.needsValueUnwrapper) {
	          return new ConvertPropertyBindingResult(stmts, currValExpr, VAL_UNWRAPPER_VAR.prop('hasWrappedValue'));
	      }
	      else {
	          return new ConvertPropertyBindingResult(stmts, currValExpr, null);
	      }
	  }
	  var ConvertActionBindingResult = (function () {
	      /**
	       * @param {?} stmts
	       * @param {?} preventDefault
	       */
	      function ConvertActionBindingResult(stmts, preventDefault) {
	          this.stmts = stmts;
	          this.preventDefault = preventDefault;
	      }
	      return ConvertActionBindingResult;
	  }());
	  /**
	   *  Converts the given expression AST into an executable output AST, assuming the expression is
	    * used in an action binding (e.g. an event handler).
	   * @param {?} builder
	   * @param {?} nameResolver
	   * @param {?} implicitReceiver
	   * @param {?} action
	   * @param {?} bindingId
	   * @return {?}
	   */
	  function convertActionBinding(builder, nameResolver, implicitReceiver, action, bindingId) {
	      if (!nameResolver) {
	          nameResolver = new DefaultNameResolver();
	      }
	      var /** @type {?} */ visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, null, bindingId, true);
	      var /** @type {?} */ actionStmts = [];
	      flattenStatements(action.visit(visitor, _Mode.Statement), actionStmts);
	      prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);
	      var /** @type {?} */ lastIndex = actionStmts.length - 1;
	      var /** @type {?} */ preventDefaultVar = null;
	      if (lastIndex >= 0) {
	          var /** @type {?} */ lastStatement = actionStmts[lastIndex];
	          var /** @type {?} */ returnExpr = convertStmtIntoExpression(lastStatement);
	          if (returnExpr) {
	              // Note: We need to cast the result of the method call to dynamic,
	              // as it might be a void method!
	              preventDefaultVar = createPreventDefaultVar(bindingId);
	              actionStmts[lastIndex] =
	                  preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false)))
	                      .toDeclStmt(null, [StmtModifier.Final]);
	          }
	      }
	      return new ConvertActionBindingResult(actionStmts, preventDefaultVar);
	  }
	  /**
	   *  Creates variables that are shared by multiple calls to `convertActionBinding` /
	    * `convertPropertyBinding`
	   * @param {?} stmts
	   * @return {?}
	   */
	  function createSharedBindingVariablesIfNeeded(stmts) {
	      var /** @type {?} */ unwrapperStmts = [];
	      var /** @type {?} */ readVars = findReadVarNames(stmts);
	      if (readVars.has(VAL_UNWRAPPER_VAR.name)) {
	          unwrapperStmts.push(VAL_UNWRAPPER_VAR
	              .set(importExpr(createIdentifier(Identifiers.ValueUnwrapper)).instantiate([]))
	              .toDeclStmt(null, [StmtModifier.Final]));
	      }
	      return unwrapperStmts;
	  }
	  /**
	   * @param {?} bindingId
	   * @param {?} temporaryNumber
	   * @return {?}
	   */
	  function temporaryName(bindingId, temporaryNumber) {
	      return "tmp_" + bindingId + "_" + temporaryNumber;
	  }
	  /**
	   * @param {?} bindingId
	   * @param {?} temporaryNumber
	   * @return {?}
	   */
	  function temporaryDeclaration(bindingId, temporaryNumber) {
	      return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR);
	  }
	  /**
	   * @param {?} temporaryCount
	   * @param {?} bindingId
	   * @param {?} statements
	   * @return {?}
	   */
	  function prependTemporaryDecls(temporaryCount, bindingId, statements) {
	      for (var /** @type {?} */ i = temporaryCount - 1; i >= 0; i--) {
	          statements.unshift(temporaryDeclaration(bindingId, i));
	      }
	  }
	  var _Mode = {};
	  _Mode.Statement = 0;
	  _Mode.Expression = 1;
	  _Mode[_Mode.Statement] = "Statement";
	  _Mode[_Mode.Expression] = "Expression";
	  /**
	   * @param {?} mode
	   * @param {?} ast
	   * @return {?}
	   */
	  function ensureStatementMode(mode, ast) {
	      if (mode !== _Mode.Statement) {
	          throw new Error("Expected a statement, but saw " + ast);
	      }
	  }
	  /**
	   * @param {?} mode
	   * @param {?} ast
	   * @return {?}
	   */
	  function ensureExpressionMode(mode, ast) {
	      if (mode !== _Mode.Expression) {
	          throw new Error("Expected an expression, but saw " + ast);
	      }
	  }
	  /**
	   * @param {?} mode
	   * @param {?} expr
	   * @return {?}
	   */
	  function convertToStatementIfNeeded(mode, expr) {
	      if (mode === _Mode.Statement) {
	          return expr.toStmt();
	      }
	      else {
	          return expr;
	      }
	  }
	  var _AstToIrVisitor = (function () {
	      /**
	       * @param {?} _builder
	       * @param {?} _nameResolver
	       * @param {?} _implicitReceiver
	       * @param {?} _valueUnwrapper
	       * @param {?} bindingId
	       * @param {?} isAction
	       */
	      function _AstToIrVisitor(_builder, _nameResolver, _implicitReceiver, _valueUnwrapper, bindingId, isAction) {
	          this._builder = _builder;
	          this._nameResolver = _nameResolver;
	          this._implicitReceiver = _implicitReceiver;
	          this._valueUnwrapper = _valueUnwrapper;
	          this.bindingId = bindingId;
	          this.isAction = isAction;
	          this._nodeMap = new Map();
	          this._resultMap = new Map();
	          this._currentTemporary = 0;
	          this.needsValueUnwrapper = false;
	          this.temporaryCount = 0;
	      }
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitBinary = function (ast, mode) {
	          var /** @type {?} */ op;
	          switch (ast.operation) {
	              case '+':
	                  op = BinaryOperator.Plus;
	                  break;
	              case '-':
	                  op = BinaryOperator.Minus;
	                  break;
	              case '*':
	                  op = BinaryOperator.Multiply;
	                  break;
	              case '/':
	                  op = BinaryOperator.Divide;
	                  break;
	              case '%':
	                  op = BinaryOperator.Modulo;
	                  break;
	              case '&&':
	                  op = BinaryOperator.And;
	                  break;
	              case '||':
	                  op = BinaryOperator.Or;
	                  break;
	              case '==':
	                  op = BinaryOperator.Equals;
	                  break;
	              case '!=':
	                  op = BinaryOperator.NotEquals;
	                  break;
	              case '===':
	                  op = BinaryOperator.Identical;
	                  break;
	              case '!==':
	                  op = BinaryOperator.NotIdentical;
	                  break;
	              case '<':
	                  op = BinaryOperator.Lower;
	                  break;
	              case '>':
	                  op = BinaryOperator.Bigger;
	                  break;
	              case '<=':
	                  op = BinaryOperator.LowerEquals;
	                  break;
	              case '>=':
	                  op = BinaryOperator.BiggerEquals;
	                  break;
	              default:
	                  throw new Error("Unsupported operation " + ast.operation);
	          }
	          return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));
	      };
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitChain = function (ast, mode) {
	          ensureStatementMode(mode, ast);
	          return this.visitAll(ast.expressions, mode);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitConditional = function (ast, mode) {
	          var /** @type {?} */ value = this.visit(ast.condition, _Mode.Expression);
	          return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));
	      };
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitPipe = function (ast, mode) {
	          var /** @type {?} */ input = this.visit(ast.exp, _Mode.Expression);
	          var /** @type {?} */ args = this.visitAll(ast.args, _Mode.Expression);
	          var /** @type {?} */ value = this._nameResolver.callPipe(ast.name, input, args);
	          if (!value) {
	              throw new Error("Illegal state: Pipe " + ast.name + " is not allowed here!");
	          }
	          this.needsValueUnwrapper = true;
	          return convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod('unwrap', [value]));
	      };
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitFunctionCall = function (ast, mode) {
	          return convertToStatementIfNeeded(mode, this.visit(ast.target, _Mode.Expression).callFn(this.visitAll(ast.args, _Mode.Expression)));
	      };
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitImplicitReceiver = function (ast, mode) {
	          ensureExpressionMode(mode, ast);
	          return this._implicitReceiver;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitInterpolation = function (ast, mode) {
	          ensureExpressionMode(mode, ast);
	          var /** @type {?} */ args = [literal(ast.expressions.length)];
	          for (var /** @type {?} */ i = 0; i < ast.strings.length - 1; i++) {
	              args.push(literal(ast.strings[i]));
	              args.push(this.visit(ast.expressions[i], _Mode.Expression));
	          }
	          args.push(literal(ast.strings[ast.strings.length - 1]));
	          return ast.expressions.length <= 9 ?
	              importExpr(createIdentifier(Identifiers.inlineInterpolate)).callFn(args) :
	              importExpr(createIdentifier(Identifiers.interpolate)).callFn([
	                  args[0], literalArr(args.slice(1))
	              ]);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitKeyedRead = function (ast, mode) {
	          var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);
	          if (leftMostSafe) {
	              return this.convertSafeAccess(ast, leftMostSafe, mode);
	          }
	          else {
	              return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));
	          }
	      };
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitKeyedWrite = function (ast, mode) {
	          var /** @type {?} */ obj = this.visit(ast.obj, _Mode.Expression);
	          var /** @type {?} */ key = this.visit(ast.key, _Mode.Expression);
	          var /** @type {?} */ value = this.visit(ast.value, _Mode.Expression);
	          return convertToStatementIfNeeded(mode, obj.key(key).set(value));
	      };
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitLiteralArray = function (ast, mode) {
	          var /** @type {?} */ parts = this.visitAll(ast.expressions, mode);
	          var /** @type {?} */ literalArr$$ = this.isAction ? literalArr(parts) : createCachedLiteralArray(this._builder, parts);
	          return convertToStatementIfNeeded(mode, literalArr$$);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitLiteralMap = function (ast, mode) {
	          var /** @type {?} */ parts = [];
	          for (var /** @type {?} */ i = 0; i < ast.keys.length; i++) {
	              parts.push([ast.keys[i], this.visit(ast.values[i], _Mode.Expression)]);
	          }
	          var /** @type {?} */ literalMap$$ = this.isAction ? literalMap(parts) : createCachedLiteralMap(this._builder, parts);
	          return convertToStatementIfNeeded(mode, literalMap$$);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitLiteralPrimitive = function (ast, mode) {
	          return convertToStatementIfNeeded(mode, literal(ast.value));
	      };
	      /**
	       * @param {?} name
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype._getLocal = function (name) {
	          if (this.isAction && name == EventHandlerVars.event.name) {
	              return EventHandlerVars.event;
	          }
	          return this._nameResolver.getLocal(name);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitMethodCall = function (ast, mode) {
	          var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);
	          if (leftMostSafe) {
	              return this.convertSafeAccess(ast, leftMostSafe, mode);
	          }
	          else {
	              var /** @type {?} */ args = this.visitAll(ast.args, _Mode.Expression);
	              var /** @type {?} */ result = null;
	              var /** @type {?} */ receiver = this.visit(ast.receiver, _Mode.Expression);
	              if (receiver === this._implicitReceiver) {
	                  var /** @type {?} */ varExpr = this._getLocal(ast.name);
	                  if (isPresent(varExpr)) {
	                      result = varExpr.callFn(args);
	                  }
	              }
	              if (isBlank(result)) {
	                  result = receiver.callMethod(ast.name, args);
	              }
	              return convertToStatementIfNeeded(mode, result);
	          }
	      };
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitPrefixNot = function (ast, mode) {
	          return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression)));
	      };
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitPropertyRead = function (ast, mode) {
	          var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);
	          if (leftMostSafe) {
	              return this.convertSafeAccess(ast, leftMostSafe, mode);
	          }
	          else {
	              var /** @type {?} */ result = null;
	              var /** @type {?} */ receiver = this.visit(ast.receiver, _Mode.Expression);
	              if (receiver === this._implicitReceiver) {
	                  result = this._getLocal(ast.name);
	              }
	              if (isBlank(result)) {
	                  result = receiver.prop(ast.name);
	              }
	              return convertToStatementIfNeeded(mode, result);
	          }
	      };
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitPropertyWrite = function (ast, mode) {
	          var /** @type {?} */ receiver = this.visit(ast.receiver, _Mode.Expression);
	          if (receiver === this._implicitReceiver) {
	              var /** @type {?} */ varExpr = this._getLocal(ast.name);
	              if (isPresent(varExpr)) {
	                  throw new Error('Cannot assign to a reference or variable!');
	              }
	          }
	          return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));
	      };
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitSafePropertyRead = function (ast, mode) {
	          return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitSafeMethodCall = function (ast, mode) {
	          return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
	      };
	      /**
	       * @param {?} asts
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitAll = function (asts, mode) {
	          var _this = this;
	          return asts.map(function (ast) { return _this.visit(ast, mode); });
	      };
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visitQuote = function (ast, mode) {
	          throw new Error('Quotes are not supported for evaluation!');
	      };
	      /**
	       * @param {?} ast
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.visit = function (ast, mode) {
	          var /** @type {?} */ result = this._resultMap.get(ast);
	          if (result)
	              return result;
	          return (this._nodeMap.get(ast) || ast).visit(this, mode);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} leftMostSafe
	       * @param {?} mode
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.convertSafeAccess = function (ast, leftMostSafe, mode) {
	          // If the expression contains a safe access node on the left it needs to be converted to
	          // an expression that guards the access to the member by checking the receiver for blank. As
	          // execution proceeds from left to right, the left most part of the expression must be guarded
	          // first but, because member access is left associative, the right side of the expression is at
	          // the top of the AST. The desired result requires lifting a copy of the the left part of the
	          // expression up to test it for blank before generating the unguarded version.
	          // Consider, for example the following expression: a?.b.c?.d.e
	          // This results in the ast:
	          //         .
	          //        / \
	          //       ?.   e
	          //      /  \
	          //     .    d
	          //    / \
	          //   ?.  c
	          //  /  \
	          // a    b
	          // The following tree should be generated:
	          //
	          //        /---- ? ----\
	          //       /      |      \
	          //     a   /--- ? ---\  null
	          //        /     |     \
	          //       .      .     null
	          //      / \    / \
	          //     .  c   .   e
	          //    / \    / \
	          //   a   b  ,   d
	          //         / \
	          //        .   c
	          //       / \
	          //      a   b
	          //
	          // Notice that the first guard condition is the left hand of the left most safe access node
	          // which comes in as leftMostSafe to this routine.
	          var /** @type {?} */ guardedExpression = this.visit(leftMostSafe.receiver, _Mode.Expression);
	          var /** @type {?} */ temporary;
	          if (this.needsTemporary(leftMostSafe.receiver)) {
	              // If the expression has method calls or pipes then we need to save the result into a
	              // temporary variable to avoid calling stateful or impure code more than once.
	              temporary = this.allocateTemporary();
	              // Preserve the result in the temporary variable
	              guardedExpression = temporary.set(guardedExpression);
	              // Ensure all further references to the guarded expression refer to the temporary instead.
	              this._resultMap.set(leftMostSafe.receiver, temporary);
	          }
	          var /** @type {?} */ condition = guardedExpression.isBlank();
	          // Convert the ast to an unguarded access to the receiver's member. The map will substitute
	          // leftMostNode with its unguarded version in the call to `this.visit()`.
	          if (leftMostSafe instanceof SafeMethodCall) {
	              this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));
	          }
	          else {
	              this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));
	          }
	          // Recursively convert the node now without the guarded member access.
	          var /** @type {?} */ access = this.visit(ast, _Mode.Expression);
	          // Remove the mapping. This is not strictly required as the converter only traverses each node
	          // once but is safer if the conversion is changed to traverse the nodes more than once.
	          this._nodeMap.delete(leftMostSafe);
	          // If we allcoated a temporary, release it.
	          if (temporary) {
	              this.releaseTemporary(temporary);
	          }
	          // Produce the conditional
	          return convertToStatementIfNeeded(mode, condition.conditional(literal(null), access));
	      };
	      /**
	       * @param {?} ast
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.leftMostSafeNode = function (ast) {
	          var _this = this;
	          var /** @type {?} */ visit = function (visitor, ast) {
	              return (_this._nodeMap.get(ast) || ast).visit(visitor);
	          };
	          return ast.visit({
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitBinary: function (ast) { return null; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitChain: function (ast) { return null; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitConditional: function (ast) { return null; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitFunctionCall: function (ast) { return null; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitImplicitReceiver: function (ast) { return null; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitInterpolation: function (ast) { return null; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitKeyedRead: function (ast) { return visit(this, ast.obj); },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitKeyedWrite: function (ast) { return null; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitLiteralArray: function (ast) { return null; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitLiteralMap: function (ast) { return null; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitLiteralPrimitive: function (ast) { return null; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitMethodCall: function (ast) { return visit(this, ast.receiver); },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitPipe: function (ast) { return null; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitPrefixNot: function (ast) { return null; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitPropertyRead: function (ast) { return visit(this, ast.receiver); },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitPropertyWrite: function (ast) { return null; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitQuote: function (ast) { return null; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitSafeMethodCall: function (ast) { return visit(this, ast.receiver) || ast; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitSafePropertyRead: function (ast) {
	                  return visit(this, ast.receiver) || ast;
	              }
	          });
	      };
	      /**
	       * @param {?} ast
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.needsTemporary = function (ast) {
	          var _this = this;
	          var /** @type {?} */ visit = function (visitor, ast) {
	              return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);
	          };
	          var /** @type {?} */ visitSome = function (visitor, ast) {
	              return ast.some(function (ast) { return visit(visitor, ast); });
	          };
	          return ast.visit({
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitBinary: function (ast) { return visit(this, ast.left) || visit(this, ast.right); },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitChain: function (ast) { return false; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitConditional: function (ast) {
	                  return visit(this, ast.condition) || visit(this, ast.trueExp) ||
	                      visit(this, ast.falseExp);
	              },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitFunctionCall: function (ast) { return true; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitImplicitReceiver: function (ast) { return false; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitInterpolation: function (ast) { return visitSome(this, ast.expressions); },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitKeyedRead: function (ast) { return false; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitKeyedWrite: function (ast) { return false; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitLiteralArray: function (ast) { return true; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitLiteralMap: function (ast) { return true; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitLiteralPrimitive: function (ast) { return false; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitMethodCall: function (ast) { return true; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitPipe: function (ast) { return true; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitPrefixNot: function (ast) { return visit(this, ast.expression); },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitPropertyRead: function (ast) { return false; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitPropertyWrite: function (ast) { return false; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitQuote: function (ast) { return false; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitSafeMethodCall: function (ast) { return true; },
	              /**
	               * @param {?} ast
	               * @return {?}
	               */
	              visitSafePropertyRead: function (ast) { return false; }
	          });
	      };
	      /**
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.allocateTemporary = function () {
	          var /** @type {?} */ tempNumber = this._currentTemporary++;
	          this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
	          return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));
	      };
	      /**
	       * @param {?} temporary
	       * @return {?}
	       */
	      _AstToIrVisitor.prototype.releaseTemporary = function (temporary) {
	          this._currentTemporary--;
	          if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {
	              throw new Error("Temporary " + temporary.name + " released out of order");
	          }
	      };
	      return _AstToIrVisitor;
	  }());
	  /**
	   * @param {?} arg
	   * @param {?} output
	   * @return {?}
	   */
	  function flattenStatements(arg, output) {
	      if (Array.isArray(arg)) {
	          ((arg)).forEach(function (entry) { return flattenStatements(entry, output); });
	      }
	      else {
	          output.push(arg);
	      }
	  }
	  /**
	   * @param {?} builder
	   * @param {?} values
	   * @return {?}
	   */
	  function createCachedLiteralArray(builder, values) {
	      if (values.length === 0) {
	          return importExpr(createIdentifier(Identifiers.EMPTY_ARRAY));
	      }
	      var /** @type {?} */ proxyExpr = THIS_EXPR.prop("_arr_" + builder.fields.length);
	      var /** @type {?} */ proxyParams = [];
	      var /** @type {?} */ proxyReturnEntries = [];
	      for (var /** @type {?} */ i = 0; i < values.length; i++) {
	          var /** @type {?} */ paramName = "p" + i;
	          proxyParams.push(new FnParam(paramName));
	          proxyReturnEntries.push(variable(paramName));
	      }
	      createPureProxy(fn(proxyParams, [new ReturnStatement(literalArr(proxyReturnEntries))], new ArrayType(DYNAMIC_TYPE)), values.length, proxyExpr, builder);
	      return proxyExpr.callFn(values);
	  }
	  /**
	   * @param {?} builder
	   * @param {?} entries
	   * @return {?}
	   */
	  function createCachedLiteralMap(builder, entries) {
	      if (entries.length === 0) {
	          return importExpr(createIdentifier(Identifiers.EMPTY_MAP));
	      }
	      var /** @type {?} */ proxyExpr = THIS_EXPR.prop("_map_" + builder.fields.length);
	      var /** @type {?} */ proxyParams = [];
	      var /** @type {?} */ proxyReturnEntries = [];
	      var /** @type {?} */ values = [];
	      for (var /** @type {?} */ i = 0; i < entries.length; i++) {
	          var /** @type {?} */ paramName = "p" + i;
	          proxyParams.push(new FnParam(paramName));
	          proxyReturnEntries.push([entries[i][0], variable(paramName)]);
	          values.push(/** @type {?} */ (entries[i][1]));
	      }
	      createPureProxy(fn(proxyParams, [new ReturnStatement(literalMap(proxyReturnEntries))], new MapType(DYNAMIC_TYPE)), entries.length, proxyExpr, builder);
	      return proxyExpr.callFn(values);
	  }
	  var DefaultNameResolver = (function () {
	      function DefaultNameResolver() {
	      }
	      /**
	       * @param {?} name
	       * @param {?} input
	       * @param {?} args
	       * @return {?}
	       */
	      DefaultNameResolver.prototype.callPipe = function (name, input, args) { return null; };
	      /**
	       * @param {?} name
	       * @return {?}
	       */
	      DefaultNameResolver.prototype.getLocal = function (name) { return null; };
	      return DefaultNameResolver;
	  }());
	  /**
	   * @param {?} bindingId
	   * @return {?}
	   */
	  function createCurrValueExpr(bindingId) {
	      return variable("currVal_" + bindingId); // fix syntax highlighting: `
	  }
	  /**
	   * @param {?} bindingId
	   * @return {?}
	   */
	  function createPreventDefaultVar(bindingId) {
	      return variable("pd_" + bindingId);
	  }
	  /**
	   * @param {?} stmt
	   * @return {?}
	   */
	  function convertStmtIntoExpression(stmt) {
	      if (stmt instanceof ExpressionStatement) {
	          return stmt.expr;
	      }
	      else if (stmt instanceof ReturnStatement) {
	          return stmt.value;
	      }
	      return null;
	  }
	
	  /**
	   * @param {?} view
	   * @param {?} boundProp
	   * @param {?} renderElement
	   * @param {?} renderValue
	   * @param {?} logBindingUpdate
	   * @param {?=} securityContextExpression
	   * @return {?}
	   */
	  function writeToRenderer(view, boundProp, renderElement, renderValue, logBindingUpdate, securityContextExpression) {
	      var /** @type {?} */ updateStmts = [];
	      var /** @type {?} */ renderer = view.prop('renderer');
	      renderValue = sanitizedValue(view, boundProp, renderValue, securityContextExpression);
	      switch (boundProp.type) {
	          case PropertyBindingType.Property:
	              if (logBindingUpdate) {
	                  updateStmts.push(importExpr(createIdentifier(Identifiers.setBindingDebugInfo))
	                      .callFn([renderer, renderElement, literal(boundProp.name), renderValue])
	                      .toStmt());
	              }
	              updateStmts.push(renderer
	                  .callMethod('setElementProperty', [renderElement, literal(boundProp.name), renderValue])
	                  .toStmt());
	              break;
	          case PropertyBindingType.Attribute:
	              renderValue =
	                  renderValue.isBlank().conditional(NULL_EXPR, renderValue.callMethod('toString', []));
	              updateStmts.push(renderer
	                  .callMethod('setElementAttribute', [renderElement, literal(boundProp.name), renderValue])
	                  .toStmt());
	              break;
	          case PropertyBindingType.Class:
	              updateStmts.push(renderer
	                  .callMethod('setElementClass', [renderElement, literal(boundProp.name), renderValue])
	                  .toStmt());
	              break;
	          case PropertyBindingType.Style:
	              var /** @type {?} */ strValue = renderValue.callMethod('toString', []);
	              if (isPresent(boundProp.unit)) {
	                  strValue = strValue.plus(literal(boundProp.unit));
	              }
	              renderValue = renderValue.isBlank().conditional(NULL_EXPR, strValue);
	              updateStmts.push(renderer
	                  .callMethod('setElementStyle', [renderElement, literal(boundProp.name), renderValue])
	                  .toStmt());
	              break;
	          case PropertyBindingType.Animation:
	              throw new Error('Illegal state: Should not come here!');
	      }
	      return updateStmts;
	  }
	  /**
	   * @param {?} view
	   * @param {?} boundProp
	   * @param {?} renderValue
	   * @param {?=} securityContextExpression
	   * @return {?}
	   */
	  function sanitizedValue(view, boundProp, renderValue, securityContextExpression) {
	      if (boundProp.securityContext === _angular_core.SecurityContext.NONE) {
	          return renderValue; // No sanitization needed.
	      }
	      if (!boundProp.needsRuntimeSecurityContext) {
	          securityContextExpression =
	              createEnumExpression(Identifiers.SecurityContext, boundProp.securityContext);
	      }
	      if (!securityContextExpression) {
	          throw new Error("internal error, no SecurityContext given " + boundProp.name);
	      }
	      var /** @type {?} */ ctx = view.prop('viewUtils').prop('sanitizer');
	      var /** @type {?} */ args = [securityContextExpression, renderValue];
	      return ctx.callMethod('sanitize', args);
	  }
	  /**
	   * @param {?} view
	   * @param {?} componentView
	   * @param {?} boundProp
	   * @param {?} boundOutputs
	   * @param {?} eventListener
	   * @param {?} renderElement
	   * @param {?} renderValue
	   * @param {?} lastRenderValue
	   * @return {?}
	   */
	  function triggerAnimation(view, componentView, boundProp, boundOutputs, eventListener, renderElement, renderValue, lastRenderValue) {
	      var /** @type {?} */ detachStmts = [];
	      var /** @type {?} */ updateStmts = [];
	      var /** @type {?} */ animationName = boundProp.name;
	      var /** @type {?} */ animationFnExpr = componentView.prop('componentType').prop('animations').key(literal(animationName));
	      // it's important to normalize the void value as `void` explicitly
	      // so that the styles data can be obtained from the stringmap
	      var /** @type {?} */ emptyStateValue = literal(EMPTY_STATE);
	      var /** @type {?} */ unitializedValue = importExpr(createIdentifier(Identifiers.UNINITIALIZED));
	      var /** @type {?} */ animationTransitionVar = variable('animationTransition_' + animationName);
	      updateStmts.push(animationTransitionVar
	          .set(animationFnExpr.callFn([
	          view, renderElement,
	          lastRenderValue.equals(unitializedValue).conditional(emptyStateValue, lastRenderValue),
	          renderValue.equals(unitializedValue).conditional(emptyStateValue, renderValue)
	      ]))
	          .toDeclStmt());
	      detachStmts.push(animationTransitionVar
	          .set(animationFnExpr.callFn([view, renderElement, lastRenderValue, emptyStateValue]))
	          .toDeclStmt());
	      var /** @type {?} */ registerStmts = [];
	      var /** @type {?} */ animationStartMethodExists = boundOutputs.find(function (event) { return event.isAnimation && event.name == animationName && event.phase == 'start'; });
	      if (animationStartMethodExists) {
	          registerStmts.push(animationTransitionVar
	              .callMethod('onStart', [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, 'start'))])])
	              .toStmt());
	      }
	      var /** @type {?} */ animationDoneMethodExists = boundOutputs.find(function (event) { return event.isAnimation && event.name == animationName && event.phase == 'done'; });
	      if (animationDoneMethodExists) {
	          registerStmts.push(animationTransitionVar
	              .callMethod('onDone', [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, 'done'))])])
	              .toStmt());
	      }
	      updateStmts.push.apply(updateStmts, registerStmts);
	      detachStmts.push.apply(detachStmts, registerStmts);
	      return { updateStmts: updateStmts, detachStmts: detachStmts };
	  }
	
	  /**
	   *  Create a new class stmts based on the given data.
	   * @param {?} config
	   * @return {?}
	   */
	  function createClassStmt(config) {
	      var /** @type {?} */ parentArgs = config.parentArgs || [];
	      var /** @type {?} */ superCtorStmts = config.parent ? [SUPER_EXPR.callFn(parentArgs).toStmt()] : [];
	      var /** @type {?} */ builder = concatClassBuilderParts(Array.isArray(config.builders) ? config.builders : [config.builders]);
	      var /** @type {?} */ ctor = new ClassMethod(null, config.ctorParams || [], superCtorStmts.concat(builder.ctorStmts));
	      return new ClassStmt(config.name, config.parent, builder.fields, builder.getters, ctor, builder.methods, config.modifiers || []);
	  }
	  /**
	   * @param {?} builders
	   * @return {?}
	   */
	  function concatClassBuilderParts(builders) {
	      return {
	          fields: (_a = []).concat.apply(_a, builders.map(function (builder) { return builder.fields || []; })),
	          methods: (_b = []).concat.apply(_b, builders.map(function (builder) { return builder.methods || []; })),
	          getters: (_c = []).concat.apply(_c, builders.map(function (builder) { return builder.getters || []; })),
	          ctorStmts: (_d = []).concat.apply(_d, builders.map(function (builder) { return builder.ctorStmts || []; })),
	      };
	      var _a, _b, _c, _d;
	  }
	
	  var DirectiveWrapperCompileResult = (function () {
	      /**
	       * @param {?} statements
	       * @param {?} dirWrapperClassVar
	       */
	      function DirectiveWrapperCompileResult(statements, dirWrapperClassVar) {
	          this.statements = statements;
	          this.dirWrapperClassVar = dirWrapperClassVar;
	      }
	      return DirectiveWrapperCompileResult;
	  }());
	  var /** @type {?} */ CONTEXT_FIELD_NAME = 'context';
	  var /** @type {?} */ CHANGES_FIELD_NAME = '_changes';
	  var /** @type {?} */ CHANGED_FIELD_NAME = '_changed';
	  var /** @type {?} */ EVENT_HANDLER_FIELD_NAME = '_eventHandler';
	  var /** @type {?} */ CURR_VALUE_VAR = variable('currValue');
	  var /** @type {?} */ THROW_ON_CHANGE_VAR = variable('throwOnChange');
	  var /** @type {?} */ FORCE_UPDATE_VAR = variable('forceUpdate');
	  var /** @type {?} */ VIEW_VAR = variable('view');
	  var /** @type {?} */ COMPONENT_VIEW_VAR = variable('componentView');
	  var /** @type {?} */ RENDER_EL_VAR = variable('el');
	  var /** @type {?} */ EVENT_NAME_VAR = variable('eventName');
	  var /** @type {?} */ RESET_CHANGES_STMT = THIS_EXPR.prop(CHANGES_FIELD_NAME).set(literalMap([])).toStmt();
	  /**
	   *  We generate directive wrappers to prevent code bloat when a directive is used.
	    * A directive wrapper encapsulates
	    * the dirty checking for `@Input`, the handling of `@HostListener` / `@HostBinding`
	    * and calling the lifecyclehooks `ngOnInit`, `ngOnChanges`, `ngDoCheck`.
	    * *
	    * So far, only `@Input` and the lifecycle hooks have been implemented.
	   */
	  var DirectiveWrapperCompiler = (function () {
	      /**
	       * @param {?} compilerConfig
	       * @param {?} _exprParser
	       * @param {?} _schemaRegistry
	       * @param {?} _console
	       */
	      function DirectiveWrapperCompiler(compilerConfig, _exprParser, _schemaRegistry, _console) {
	          this.compilerConfig = compilerConfig;
	          this._exprParser = _exprParser;
	          this._schemaRegistry = _schemaRegistry;
	          this._console = _console;
	      }
	      /**
	       * @param {?} id
	       * @return {?}
	       */
	      DirectiveWrapperCompiler.dirWrapperClassName = function (id) {
	          return "Wrapper_" + identifierName(id);
	      };
	      /**
	       * @param {?} dirMeta
	       * @return {?}
	       */
	      DirectiveWrapperCompiler.prototype.compile = function (dirMeta) {
	          var /** @type {?} */ hostParseResult = parseHostBindings(dirMeta, this._exprParser, this._schemaRegistry);
	          reportParseErrors(hostParseResult.errors, this._console);
	          var /** @type {?} */ builder = new DirectiveWrapperBuilder(this.compilerConfig, dirMeta);
	          Object.keys(dirMeta.inputs).forEach(function (inputFieldName) {
	              addCheckInputMethod(inputFieldName, builder);
	          });
	          addNgDoCheckMethod(builder);
	          addCheckHostMethod(hostParseResult.hostProps, hostParseResult.hostListeners, builder);
	          addHandleEventMethod(hostParseResult.hostListeners, builder);
	          addSubscribeMethod(dirMeta, builder);
	          var /** @type {?} */ classStmt = builder.build();
	          return new DirectiveWrapperCompileResult([classStmt], classStmt.name);
	      };
	      DirectiveWrapperCompiler.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      DirectiveWrapperCompiler.ctorParameters = function () { return [
	          { type: CompilerConfig, },
	          { type: Parser, },
	          { type: ElementSchemaRegistry, },
	          { type: Console, },
	      ]; };
	      return DirectiveWrapperCompiler;
	  }());
	  var DirectiveWrapperBuilder = (function () {
	      /**
	       * @param {?} compilerConfig
	       * @param {?} dirMeta
	       */
	      function DirectiveWrapperBuilder(compilerConfig, dirMeta) {
	          this.compilerConfig = compilerConfig;
	          this.dirMeta = dirMeta;
	          this.fields = [];
	          this.getters = [];
	          this.methods = [];
	          this.ctorStmts = [];
	          this.detachStmts = [];
	          this.destroyStmts = [];
	          var dirLifecycleHooks = dirMeta.type.lifecycleHooks;
	          this.genChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1 ||
	              this.compilerConfig.logBindingUpdate;
	          this.ngOnChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1;
	          this.ngOnInit = dirLifecycleHooks.indexOf(LifecycleHooks.OnInit) !== -1;
	          this.ngDoCheck = dirLifecycleHooks.indexOf(LifecycleHooks.DoCheck) !== -1;
	          this.ngOnDestroy = dirLifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1;
	          if (this.ngOnDestroy) {
	              this.destroyStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnDestroy', []).toStmt());
	          }
	      }
	      /**
	       * @return {?}
	       */
	      DirectiveWrapperBuilder.prototype.build = function () {
	          var /** @type {?} */ dirDepParamNames = [];
	          for (var /** @type {?} */ i = 0; i < this.dirMeta.type.diDeps.length; i++) {
	              dirDepParamNames.push("p" + i);
	          }
	          var /** @type {?} */ methods = [
	              new ClassMethod('ngOnDetach', [
	                  new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	                  new FnParam(COMPONENT_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	                  new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE),
	              ], this.detachStmts),
	              new ClassMethod('ngOnDestroy', [], this.destroyStmts),
	          ];
	          var /** @type {?} */ fields = [
	              new ClassField(EVENT_HANDLER_FIELD_NAME, FUNCTION_TYPE, [StmtModifier.Private]),
	              new ClassField(CONTEXT_FIELD_NAME, importType(this.dirMeta.type)),
	              new ClassField(CHANGED_FIELD_NAME, BOOL_TYPE, [StmtModifier.Private]),
	          ];
	          var /** @type {?} */ ctorStmts = [THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt()];
	          if (this.genChanges) {
	              fields.push(new ClassField(CHANGES_FIELD_NAME, new MapType(DYNAMIC_TYPE), [StmtModifier.Private]));
	              ctorStmts.push(RESET_CHANGES_STMT);
	          }
	          ctorStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME)
	              .set(importExpr(this.dirMeta.type)
	              .instantiate(dirDepParamNames.map(function (paramName) { return variable(paramName); })))
	              .toStmt());
	          return createClassStmt({
	              name: DirectiveWrapperCompiler.dirWrapperClassName(this.dirMeta.type),
	              ctorParams: dirDepParamNames.map(function (paramName) { return new FnParam(paramName, DYNAMIC_TYPE); }),
	              builders: [{ fields: fields, ctorStmts: ctorStmts, methods: methods }, this]
	          });
	      };
	      return DirectiveWrapperBuilder;
	  }());
	  /**
	   * @param {?} builder
	   * @return {?}
	   */
	  function addNgDoCheckMethod(builder) {
	      var /** @type {?} */ changedVar = variable('changed');
	      var /** @type {?} */ stmts = [
	          changedVar.set(THIS_EXPR.prop(CHANGED_FIELD_NAME)).toDeclStmt(),
	          THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt(),
	      ];
	      var /** @type {?} */ lifecycleStmts = [];
	      if (builder.genChanges) {
	          var /** @type {?} */ onChangesStmts = [];
	          if (builder.ngOnChanges) {
	              onChangesStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME)
	                  .callMethod('ngOnChanges', [THIS_EXPR.prop(CHANGES_FIELD_NAME)])
	                  .toStmt());
	          }
	          if (builder.compilerConfig.logBindingUpdate) {
	              onChangesStmts.push(importExpr(createIdentifier(Identifiers.setBindingDebugInfoForChanges))
	                  .callFn([VIEW_VAR.prop('renderer'), RENDER_EL_VAR, THIS_EXPR.prop(CHANGES_FIELD_NAME)])
	                  .toStmt());
	          }
	          onChangesStmts.push(RESET_CHANGES_STMT);
	          lifecycleStmts.push(new IfStmt(changedVar, onChangesStmts));
	      }
	      if (builder.ngOnInit) {
	          lifecycleStmts.push(new IfStmt(VIEW_VAR.prop('numberOfChecks').identical(new LiteralExpr(0)), [THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnInit', []).toStmt()]));
	      }
	      if (builder.ngDoCheck) {
	          lifecycleStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngDoCheck', []).toStmt());
	      }
	      if (lifecycleStmts.length > 0) {
	          stmts.push(new IfStmt(not(THROW_ON_CHANGE_VAR), lifecycleStmts));
	      }
	      stmts.push(new ReturnStatement(changedVar));
	      builder.methods.push(new ClassMethod('ngDoCheck', [
	          new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	          new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE),
	          new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE),
	      ], stmts, BOOL_TYPE));
	  }
	  /**
	   * @param {?} input
	   * @param {?} builder
	   * @return {?}
	   */
	  function addCheckInputMethod(input, builder) {
	      var /** @type {?} */ field = createCheckBindingField(builder);
	      var /** @type {?} */ onChangeStatements = [
	          THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(true)).toStmt(),
	          THIS_EXPR.prop(CONTEXT_FIELD_NAME).prop(input).set(CURR_VALUE_VAR).toStmt(),
	      ];
	      if (builder.genChanges) {
	          onChangeStatements.push(THIS_EXPR.prop(CHANGES_FIELD_NAME)
	              .key(literal(input))
	              .set(importExpr(createIdentifier(Identifiers.SimpleChange))
	              .instantiate([field.expression, CURR_VALUE_VAR]))
	              .toStmt());
	      }
	      var /** @type {?} */ methodBody = createCheckBindingStmt({ currValExpr: CURR_VALUE_VAR, forceUpdate: FORCE_UPDATE_VAR, stmts: [] }, field.expression, THROW_ON_CHANGE_VAR, onChangeStatements);
	      builder.methods.push(new ClassMethod("check_" + input, [
	          new FnParam(CURR_VALUE_VAR.name, DYNAMIC_TYPE),
	          new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE),
	          new FnParam(FORCE_UPDATE_VAR.name, BOOL_TYPE),
	      ], methodBody));
	  }
	  /**
	   * @param {?} hostProps
	   * @param {?} hostEvents
	   * @param {?} builder
	   * @return {?}
	   */
	  function addCheckHostMethod(hostProps, hostEvents, builder) {
	      var /** @type {?} */ stmts = [];
	      var /** @type {?} */ methodParams = [
	          new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	          new FnParam(COMPONENT_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	          new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE),
	          new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE),
	      ];
	      hostProps.forEach(function (hostProp, hostPropIdx) {
	          var /** @type {?} */ field = createCheckBindingField(builder);
	          var /** @type {?} */ evalResult = convertPropertyBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostProp.value, field.bindingId);
	          if (!evalResult) {
	              return;
	          }
	          var /** @type {?} */ securityContextExpr;
	          if (hostProp.needsRuntimeSecurityContext) {
	              securityContextExpr = variable("secCtx_" + methodParams.length);
	              methodParams.push(new FnParam(securityContextExpr.name, importType(createIdentifier(Identifiers.SecurityContext))));
	          }
	          var /** @type {?} */ checkBindingStmts;
	          if (hostProp.isAnimation) {
	              var _a = triggerAnimation(VIEW_VAR, COMPONENT_VIEW_VAR, hostProp, hostEvents, THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME)
	                  .or(importExpr(createIdentifier(Identifiers.noop))), RENDER_EL_VAR, evalResult.currValExpr, field.expression), updateStmts = _a.updateStmts, detachStmts = _a.detachStmts;
	              checkBindingStmts = updateStmts;
	              (_b = builder.detachStmts).push.apply(_b, detachStmts);
	          }
	          else {
	              checkBindingStmts = writeToRenderer(VIEW_VAR, hostProp, RENDER_EL_VAR, evalResult.currValExpr, builder.compilerConfig.logBindingUpdate, securityContextExpr);
	          }
	          stmts.push.apply(stmts, createCheckBindingStmt(evalResult, field.expression, THROW_ON_CHANGE_VAR, checkBindingStmts));
	          var _b;
	      });
	      builder.methods.push(new ClassMethod('checkHost', methodParams, stmts));
	  }
	  /**
	   * @param {?} hostListeners
	   * @param {?} builder
	   * @return {?}
	   */
	  function addHandleEventMethod(hostListeners, builder) {
	      var /** @type {?} */ resultVar = variable("result");
	      var /** @type {?} */ actionStmts = [resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE)];
	      hostListeners.forEach(function (hostListener, eventIdx) {
	          var /** @type {?} */ evalResult = convertActionBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostListener.handler, "sub_" + eventIdx);
	          var /** @type {?} */ trueStmts = evalResult.stmts;
	          if (evalResult.preventDefault) {
	              trueStmts.push(resultVar.set(evalResult.preventDefault.and(resultVar)).toStmt());
	          }
	          // TODO(tbosch): convert this into a `switch` once our OutputAst supports it.
	          actionStmts.push(new IfStmt(EVENT_NAME_VAR.equals(literal(hostListener.fullName)), trueStmts));
	      });
	      actionStmts.push(new ReturnStatement(resultVar));
	      builder.methods.push(new ClassMethod('handleEvent', [
	          new FnParam(EVENT_NAME_VAR.name, STRING_TYPE),
	          new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)
	      ], actionStmts, BOOL_TYPE));
	  }
	  /**
	   * @param {?} dirMeta
	   * @param {?} builder
	   * @return {?}
	   */
	  function addSubscribeMethod(dirMeta, builder) {
	      var /** @type {?} */ methodParams = [
	          new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	          new FnParam(EVENT_HANDLER_FIELD_NAME, DYNAMIC_TYPE)
	      ];
	      var /** @type {?} */ stmts = [
	          THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME).set(variable(EVENT_HANDLER_FIELD_NAME)).toStmt()
	      ];
	      Object.keys(dirMeta.outputs).forEach(function (emitterPropName, emitterIdx) {
	          var /** @type {?} */ eventName = dirMeta.outputs[emitterPropName];
	          var /** @type {?} */ paramName = "emit" + emitterIdx;
	          methodParams.push(new FnParam(paramName, BOOL_TYPE));
	          var /** @type {?} */ subscriptionFieldName = "subscription" + emitterIdx;
	          builder.fields.push(new ClassField(subscriptionFieldName, DYNAMIC_TYPE));
	          stmts.push(new IfStmt(variable(paramName), [
	              THIS_EXPR.prop(subscriptionFieldName)
	                  .set(THIS_EXPR.prop(CONTEXT_FIELD_NAME)
	                  .prop(emitterPropName)
	                  .callMethod(BuiltinMethod.SubscribeObservable, [variable(EVENT_HANDLER_FIELD_NAME)
	                      .callMethod(BuiltinMethod.Bind, [VIEW_VAR, literal(eventName)])]))
	                  .toStmt()
	          ]));
	          builder.destroyStmts.push(THIS_EXPR.prop(subscriptionFieldName)
	              .and(THIS_EXPR.prop(subscriptionFieldName).callMethod('unsubscribe', []))
	              .toStmt());
	      });
	      builder.methods.push(new ClassMethod('subscribe', methodParams, stmts));
	  }
	  var ParseResult = (function () {
	      /**
	       * @param {?} hostProps
	       * @param {?} hostListeners
	       * @param {?} errors
	       */
	      function ParseResult(hostProps, hostListeners, errors) {
	          this.hostProps = hostProps;
	          this.hostListeners = hostListeners;
	          this.errors = errors;
	      }
	      return ParseResult;
	  }());
	  /**
	   * @param {?} dirMeta
	   * @param {?} exprParser
	   * @param {?} schemaRegistry
	   * @return {?}
	   */
	  function parseHostBindings(dirMeta, exprParser, schemaRegistry) {
	      var /** @type {?} */ errors = [];
	      var /** @type {?} */ parser = new BindingParser(exprParser, DEFAULT_INTERPOLATION_CONFIG, schemaRegistry, [], errors);
	      var /** @type {?} */ moduleUrl = identifierModuleUrl(dirMeta.type);
	      var /** @type {?} */ sourceFileName = moduleUrl ?
	          "in Directive " + identifierName(dirMeta.type) + " in " + moduleUrl :
	          "in Directive " + identifierName(dirMeta.type);
	      var /** @type {?} */ sourceFile = new ParseSourceFile('', sourceFileName);
	      var /** @type {?} */ sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
	      var /** @type {?} */ parsedHostProps = parser.createDirectiveHostPropertyAsts(dirMeta.toSummary(), sourceSpan);
	      var /** @type {?} */ parsedHostListeners = parser.createDirectiveHostEventAsts(dirMeta.toSummary(), sourceSpan);
	      return new ParseResult(parsedHostProps, parsedHostListeners, errors);
	  }
	  /**
	   * @param {?} parseErrors
	   * @param {?} console
	   * @return {?}
	   */
	  function reportParseErrors(parseErrors, console) {
	      var /** @type {?} */ warnings = parseErrors.filter(function (error) { return error.level === ParseErrorLevel.WARNING; });
	      var /** @type {?} */ errors = parseErrors.filter(function (error) { return error.level === ParseErrorLevel.FATAL; });
	      if (warnings.length > 0) {
	          this._console.warn("Directive parse warnings:\n" + warnings.join('\n'));
	      }
	      if (errors.length > 0) {
	          throw new Error("Directive parse errors:\n" + errors.join('\n'));
	      }
	  }
	  var DirectiveWrapperExpressions = (function () {
	      function DirectiveWrapperExpressions() {
	      }
	      /**
	       * @param {?} dir
	       * @param {?} depsExpr
	       * @return {?}
	       */
	      DirectiveWrapperExpressions.create = function (dir, depsExpr) {
	          return importExpr(dir).instantiate(depsExpr, importType(dir));
	      };
	      /**
	       * @param {?} dirWrapper
	       * @return {?}
	       */
	      DirectiveWrapperExpressions.context = function (dirWrapper) {
	          return dirWrapper.prop(CONTEXT_FIELD_NAME);
	      };
	      /**
	       * @param {?} dirWrapper
	       * @param {?} view
	       * @param {?} renderElement
	       * @param {?} throwOnChange
	       * @return {?}
	       */
	      DirectiveWrapperExpressions.ngDoCheck = function (dirWrapper, view, renderElement, throwOnChange) {
	          return dirWrapper.callMethod('ngDoCheck', [view, renderElement, throwOnChange]);
	      };
	      /**
	       * @param {?} hostProps
	       * @param {?} dirWrapper
	       * @param {?} view
	       * @param {?} componentView
	       * @param {?} renderElement
	       * @param {?} throwOnChange
	       * @param {?} runtimeSecurityContexts
	       * @return {?}
	       */
	      DirectiveWrapperExpressions.checkHost = function (hostProps, dirWrapper, view, componentView, renderElement, throwOnChange, runtimeSecurityContexts) {
	          if (hostProps.length) {
	              return [dirWrapper
	                      .callMethod('checkHost', [view, componentView, renderElement, throwOnChange].concat(runtimeSecurityContexts))
	                      .toStmt()];
	          }
	          else {
	              return [];
	          }
	      };
	      /**
	       * @param {?} hostProps
	       * @param {?} dirWrapper
	       * @param {?} view
	       * @param {?} componentView
	       * @param {?} renderEl
	       * @return {?}
	       */
	      DirectiveWrapperExpressions.ngOnDetach = function (hostProps, dirWrapper, view, componentView, renderEl) {
	          if (hostProps.some(function (prop) { return prop.isAnimation; })) {
	              return [dirWrapper
	                      .callMethod('ngOnDetach', [
	                      view,
	                      componentView,
	                      renderEl,
	                  ])
	                      .toStmt()];
	          }
	          else {
	              return [];
	          }
	      };
	      /**
	       * @param {?} dir
	       * @param {?} dirWrapper
	       * @return {?}
	       */
	      DirectiveWrapperExpressions.ngOnDestroy = function (dir, dirWrapper) {
	          if (dir.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1 ||
	              Object.keys(dir.outputs).length > 0) {
	              return [dirWrapper.callMethod('ngOnDestroy', []).toStmt()];
	          }
	          else {
	              return [];
	          }
	      };
	      /**
	       * @param {?} dirMeta
	       * @param {?} hostProps
	       * @param {?} usedEvents
	       * @param {?} dirWrapper
	       * @param {?} view
	       * @param {?} eventListener
	       * @return {?}
	       */
	      DirectiveWrapperExpressions.subscribe = function (dirMeta, hostProps, usedEvents, dirWrapper, view, eventListener) {
	          var /** @type {?} */ needsSubscribe = false;
	          var /** @type {?} */ eventFlags = [];
	          Object.keys(dirMeta.outputs).forEach(function (propName) {
	              var /** @type {?} */ eventName = dirMeta.outputs[propName];
	              var /** @type {?} */ eventUsed = usedEvents.indexOf(eventName) > -1;
	              needsSubscribe = needsSubscribe || eventUsed;
	              eventFlags.push(literal(eventUsed));
	          });
	          hostProps.forEach(function (hostProp) {
	              if (hostProp.isAnimation && usedEvents.length > 0) {
	                  needsSubscribe = true;
	              }
	          });
	          if (needsSubscribe) {
	              return [
	                  dirWrapper.callMethod('subscribe', [view, eventListener].concat(eventFlags)).toStmt()
	              ];
	          }
	          else {
	              return [];
	          }
	      };
	      /**
	       * @param {?} hostEvents
	       * @param {?} dirWrapper
	       * @param {?} eventName
	       * @param {?} event
	       * @return {?}
	       */
	      DirectiveWrapperExpressions.handleEvent = function (hostEvents, dirWrapper, eventName, event) {
	          return dirWrapper.callMethod('handleEvent', [eventName, event]);
	      };
	      return DirectiveWrapperExpressions;
	  }());
	
	  /**
	   * @param {?} hook
	   * @param {?} token
	   * @return {?}
	   */
	  function hasLifecycleHook(hook, token) {
	      return reflector.hasLifecycleHook(token, getHookName(hook));
	  }
	  /**
	   * @param {?} hook
	   * @return {?}
	   */
	  function getHookName(hook) {
	      switch (hook) {
	          case LifecycleHooks.OnInit:
	              return 'ngOnInit';
	          case LifecycleHooks.OnDestroy:
	              return 'ngOnDestroy';
	          case LifecycleHooks.DoCheck:
	              return 'ngDoCheck';
	          case LifecycleHooks.OnChanges:
	              return 'ngOnChanges';
	          case LifecycleHooks.AfterContentInit:
	              return 'ngAfterContentInit';
	          case LifecycleHooks.AfterContentChecked:
	              return 'ngAfterContentChecked';
	          case LifecycleHooks.AfterViewInit:
	              return 'ngAfterViewInit';
	          case LifecycleHooks.AfterViewChecked:
	              return 'ngAfterViewChecked';
	      }
	  }
	
	  /**
	   * @param {?} obj
	   * @return {?}
	   */
	  function _isNgModuleMetadata(obj) {
	      return obj instanceof _angular_core.NgModule;
	  }
	  /**
	   *  Resolves types to {@link NgModule}.
	   */
	  var NgModuleResolver = (function () {
	      /**
	       * @param {?=} _reflector
	       */
	      function NgModuleResolver(_reflector) {
	          if (_reflector === void 0) { _reflector = reflector; }
	          this._reflector = _reflector;
	      }
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      NgModuleResolver.prototype.isNgModule = function (type) { return this._reflector.annotations(type).some(_isNgModuleMetadata); };
	      /**
	       * @param {?} type
	       * @param {?=} throwIfNotFound
	       * @return {?}
	       */
	      NgModuleResolver.prototype.resolve = function (type, throwIfNotFound) {
	          if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	          var /** @type {?} */ ngModuleMeta = ListWrapper.findLast(this._reflector.annotations(type), _isNgModuleMetadata);
	          if (isPresent(ngModuleMeta)) {
	              return ngModuleMeta;
	          }
	          else {
	              if (throwIfNotFound) {
	                  throw new Error("No NgModule metadata found for '" + stringify(type) + "'.");
	              }
	              return null;
	          }
	      };
	      NgModuleResolver.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      NgModuleResolver.ctorParameters = function () { return [
	          { type: ReflectorReader, },
	      ]; };
	      return NgModuleResolver;
	  }());
	
	  /**
	   * @param {?} type
	   * @return {?}
	   */
	  function _isPipeMetadata(type) {
	      return type instanceof _angular_core.Pipe;
	  }
	  /**
	   *  Resolve a `Type` for {@link Pipe}.
	    * *
	    * This interface can be overridden by the application developer to create custom behavior.
	    * *
	    * See {@link Compiler}
	   */
	  var PipeResolver = (function () {
	      /**
	       * @param {?=} _reflector
	       */
	      function PipeResolver(_reflector) {
	          if (_reflector === void 0) { _reflector = reflector; }
	          this._reflector = _reflector;
	      }
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      PipeResolver.prototype.isPipe = function (type) {
	          var /** @type {?} */ typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	          return typeMetadata && typeMetadata.some(_isPipeMetadata);
	      };
	      /**
	       *  Return {@link Pipe} for a given `Type`.
	       * @param {?} type
	       * @param {?=} throwIfNotFound
	       * @return {?}
	       */
	      PipeResolver.prototype.resolve = function (type, throwIfNotFound) {
	          if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	          var /** @type {?} */ metas = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	          if (isPresent(metas)) {
	              var /** @type {?} */ annotation = ListWrapper.findLast(metas, _isPipeMetadata);
	              if (isPresent(annotation)) {
	                  return annotation;
	              }
	          }
	          if (throwIfNotFound) {
	              throw new Error("No Pipe decorator found on " + stringify(type));
	          }
	          return null;
	      };
	      PipeResolver.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      PipeResolver.ctorParameters = function () { return [
	          { type: ReflectorReader, },
	      ]; };
	      return PipeResolver;
	  }());
	
	  var SummaryResolver = (function () {
	      function SummaryResolver() {
	      }
	      /**
	       * @param {?} reference
	       * @return {?}
	       */
	      SummaryResolver.prototype.resolveSummary = function (reference) { return null; };
	      SummaryResolver.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      SummaryResolver.ctorParameters = function () { return []; };
	      return SummaryResolver;
	  }());
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$16 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var /** @type {?} */ ERROR_COLLECTOR_TOKEN = new _angular_core.OpaqueToken('ErrorCollector');
	  // Design notes:
	  // - don't lazily create metadata:
	  //   For some metadata, we need to do async work sometimes,
	  //   so the user has to kick off this loading.
	  //   But we want to report errors even when the async work is
	  //   not required to check that the user would have been able
	  //   to wait correctly.
	  var CompileMetadataResolver = (function () {
	      /**
	       * @param {?} _ngModuleResolver
	       * @param {?} _directiveResolver
	       * @param {?} _pipeResolver
	       * @param {?} _summaryResolver
	       * @param {?} _schemaRegistry
	       * @param {?} _directiveNormalizer
	       * @param {?=} _reflector
	       * @param {?=} _errorCollector
	       */
	      function CompileMetadataResolver(_ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _reflector, _errorCollector) {
	          if (_reflector === void 0) { _reflector = reflector; }
	          this._ngModuleResolver = _ngModuleResolver;
	          this._directiveResolver = _directiveResolver;
	          this._pipeResolver = _pipeResolver;
	          this._summaryResolver = _summaryResolver;
	          this._schemaRegistry = _schemaRegistry;
	          this._directiveNormalizer = _directiveNormalizer;
	          this._reflector = _reflector;
	          this._errorCollector = _errorCollector;
	          this._directiveCache = new Map();
	          this._summaryCache = new Map();
	          this._pipeCache = new Map();
	          this._ngModuleCache = new Map();
	          this._ngModuleOfTypes = new Map();
	      }
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype.clearCacheFor = function (type) {
	          var /** @type {?} */ dirMeta = this._directiveCache.get(type);
	          this._directiveCache.delete(type);
	          this._summaryCache.delete(type);
	          this._pipeCache.delete(type);
	          this._ngModuleOfTypes.delete(type);
	          // Clear all of the NgModule as they contain transitive information!
	          this._ngModuleCache.clear();
	          if (dirMeta) {
	              this._directiveNormalizer.clearCacheFor(dirMeta);
	          }
	      };
	      /**
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype.clearCache = function () {
	          this._directiveCache.clear();
	          this._summaryCache.clear();
	          this._pipeCache.clear();
	          this._ngModuleCache.clear();
	          this._ngModuleOfTypes.clear();
	          this._directiveNormalizer.clearCache();
	      };
	      /**
	       * @param {?} entry
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype.getAnimationEntryMetadata = function (entry) {
	          var _this = this;
	          var /** @type {?} */ defs = entry.definitions.map(function (def) { return _this._getAnimationStateMetadata(def); });
	          return new CompileAnimationEntryMetadata(entry.name, defs);
	      };
	      /**
	       * @param {?} value
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._getAnimationStateMetadata = function (value) {
	          if (value instanceof _angular_core.AnimationStateDeclarationMetadata) {
	              var /** @type {?} */ styles = this._getAnimationStyleMetadata(value.styles);
	              return new CompileAnimationStateDeclarationMetadata(value.stateNameExpr, styles);
	          }
	          if (value instanceof _angular_core.AnimationStateTransitionMetadata) {
	              return new CompileAnimationStateTransitionMetadata(value.stateChangeExpr, this._getAnimationMetadata(value.steps));
	          }
	          return null;
	      };
	      /**
	       * @param {?} value
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._getAnimationStyleMetadata = function (value) {
	          return new CompileAnimationStyleMetadata(value.offset, value.styles);
	      };
	      /**
	       * @param {?} value
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._getAnimationMetadata = function (value) {
	          var _this = this;
	          if (value instanceof _angular_core.AnimationStyleMetadata) {
	              return this._getAnimationStyleMetadata(value);
	          }
	          if (value instanceof _angular_core.AnimationKeyframesSequenceMetadata) {
	              return new CompileAnimationKeyframesSequenceMetadata(value.steps.map(function (entry) { return _this._getAnimationStyleMetadata(entry); }));
	          }
	          if (value instanceof _angular_core.AnimationAnimateMetadata) {
	              var /** @type {?} */ animateData = (this
	                  ._getAnimationMetadata(value.styles));
	              return new CompileAnimationAnimateMetadata(value.timings, animateData);
	          }
	          if (value instanceof _angular_core.AnimationWithStepsMetadata) {
	              var /** @type {?} */ steps = value.steps.map(function (step) { return _this._getAnimationMetadata(step); });
	              if (value instanceof _angular_core.AnimationGroupMetadata) {
	                  return new CompileAnimationGroupMetadata(steps);
	              }
	              return new CompileAnimationSequenceMetadata(steps);
	          }
	          return null;
	      };
	      /**
	       * @param {?} type
	       * @param {?} kind
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._loadSummary = function (type, kind) {
	          var /** @type {?} */ summary = this._summaryCache.get(type);
	          if (!summary) {
	              summary = this._summaryResolver.resolveSummary(type);
	              this._summaryCache.set(type, summary);
	          }
	          return summary && summary.summaryKind === kind ? summary : null;
	      };
	      /**
	       * @param {?} directiveType
	       * @param {?} isSync
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._loadDirectiveMetadata = function (directiveType, isSync) {
	          var _this = this;
	          if (this._directiveCache.has(directiveType)) {
	              return;
	          }
	          directiveType = _angular_core.resolveForwardRef(directiveType);
	          var _a = this.getNonNormalizedDirectiveMetadata(directiveType), annotation = _a.annotation, metadata = _a.metadata;
	          var /** @type {?} */ createDirectiveMetadata = function (templateMetadata) {
	              var /** @type {?} */ normalizedDirMeta = new CompileDirectiveMetadata({
	                  type: metadata.type,
	                  isComponent: metadata.isComponent,
	                  selector: metadata.selector,
	                  exportAs: metadata.exportAs,
	                  changeDetection: metadata.changeDetection,
	                  inputs: metadata.inputs,
	                  outputs: metadata.outputs,
	                  hostListeners: metadata.hostListeners,
	                  hostProperties: metadata.hostProperties,
	                  hostAttributes: metadata.hostAttributes,
	                  providers: metadata.providers,
	                  viewProviders: metadata.viewProviders,
	                  queries: metadata.queries,
	                  viewQueries: metadata.viewQueries,
	                  entryComponents: metadata.entryComponents,
	                  template: templateMetadata
	              });
	              _this._directiveCache.set(directiveType, normalizedDirMeta);
	              _this._summaryCache.set(directiveType, normalizedDirMeta.toSummary());
	              return normalizedDirMeta;
	          };
	          if (metadata.isComponent) {
	              var /** @type {?} */ templateMeta = this._directiveNormalizer.normalizeTemplate({
	                  componentType: directiveType,
	                  moduleUrl: componentModuleUrl(this._reflector, directiveType, annotation),
	                  encapsulation: metadata.template.encapsulation,
	                  template: metadata.template.template,
	                  templateUrl: metadata.template.templateUrl,
	                  styles: metadata.template.styles,
	                  styleUrls: metadata.template.styleUrls,
	                  animations: metadata.template.animations,
	                  interpolation: metadata.template.interpolation
	              });
	              if (templateMeta.syncResult) {
	                  createDirectiveMetadata(templateMeta.syncResult);
	                  return null;
	              }
	              else {
	                  if (isSync) {
	                      this._reportError(new ComponentStillLoadingError(directiveType), directiveType);
	                      return null;
	                  }
	                  return templateMeta.asyncResult.then(createDirectiveMetadata);
	              }
	          }
	          else {
	              // directive
	              createDirectiveMetadata(null);
	              return null;
	          }
	      };
	      /**
	       * @param {?} directiveType
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype.getNonNormalizedDirectiveMetadata = function (directiveType) {
	          var _this = this;
	          directiveType = _angular_core.resolveForwardRef(directiveType);
	          var /** @type {?} */ dirMeta = this._directiveResolver.resolve(directiveType);
	          if (!dirMeta) {
	              return null;
	          }
	          var /** @type {?} */ nonNormalizedTemplateMetadata;
	          if (dirMeta instanceof _angular_core.Component) {
	              // component
	              assertArrayOfStrings('styles', dirMeta.styles);
	              assertArrayOfStrings('styleUrls', dirMeta.styleUrls);
	              assertInterpolationSymbols('interpolation', dirMeta.interpolation);
	              var /** @type {?} */ animations = dirMeta.animations ?
	                  dirMeta.animations.map(function (e) { return _this.getAnimationEntryMetadata(e); }) :
	                  null;
	              nonNormalizedTemplateMetadata = new CompileTemplateMetadata({
	                  encapsulation: dirMeta.encapsulation,
	                  template: dirMeta.template,
	                  templateUrl: dirMeta.templateUrl,
	                  styles: dirMeta.styles,
	                  styleUrls: dirMeta.styleUrls,
	                  animations: animations,
	                  interpolation: dirMeta.interpolation
	              });
	          }
	          var /** @type {?} */ changeDetectionStrategy = null;
	          var /** @type {?} */ viewProviders = [];
	          var /** @type {?} */ entryComponentMetadata = [];
	          var /** @type {?} */ selector = dirMeta.selector;
	          if (dirMeta instanceof _angular_core.Component) {
	              // Component
	              changeDetectionStrategy = dirMeta.changeDetection;
	              if (dirMeta.viewProviders) {
	                  viewProviders = this._getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, "viewProviders for \"" + stringify(directiveType) + "\"", [], directiveType);
	              }
	              if (dirMeta.entryComponents) {
	                  entryComponentMetadata = flattenAndDedupeArray(dirMeta.entryComponents)
	                      .map(function (type) { return _this._getIdentifierMetadata(type); })
	                      .concat(entryComponentMetadata);
	              }
	              if (!selector) {
	                  selector = this._schemaRegistry.getDefaultComponentElementName();
	              }
	          }
	          else {
	              // Directive
	              if (!selector) {
	                  this._reportError(new Error("Directive " + stringify(directiveType) + " has no selector, please add it!"), directiveType);
	                  selector = 'error';
	              }
	          }
	          var /** @type {?} */ providers = [];
	          if (isPresent(dirMeta.providers)) {
	              providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, "providers for \"" + stringify(directiveType) + "\"", [], directiveType);
	          }
	          var /** @type {?} */ queries = [];
	          var /** @type {?} */ viewQueries = [];
	          if (isPresent(dirMeta.queries)) {
	              queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);
	              viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);
	          }
	          var /** @type {?} */ metadata = CompileDirectiveMetadata.create({
	              selector: selector,
	              exportAs: dirMeta.exportAs,
	              isComponent: !!nonNormalizedTemplateMetadata,
	              type: this._getTypeMetadata(directiveType),
	              template: nonNormalizedTemplateMetadata,
	              changeDetection: changeDetectionStrategy,
	              inputs: dirMeta.inputs,
	              outputs: dirMeta.outputs,
	              host: dirMeta.host,
	              providers: providers,
	              viewProviders: viewProviders,
	              queries: queries,
	              viewQueries: viewQueries,
	              entryComponents: entryComponentMetadata
	          });
	          return { metadata: metadata, annotation: dirMeta };
	      };
	      /**
	       *  Gets the metadata for the given directive.
	        * This assumes `loadNgModuleMetadata` has been called first.
	       * @param {?} directiveType
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype.getDirectiveMetadata = function (directiveType) {
	          var /** @type {?} */ dirMeta = this._directiveCache.get(directiveType);
	          if (!dirMeta) {
	              this._reportError(new Error("Illegal state: getDirectiveMetadata can only be called after loadNgModuleMetadata for a module that declares it. Directive " + stringify(directiveType) + "."), directiveType);
	          }
	          return dirMeta;
	      };
	      /**
	       * @param {?} dirType
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype.getDirectiveSummary = function (dirType) {
	          var /** @type {?} */ dirSummary = (this._loadSummary(dirType, CompileSummaryKind.Directive));
	          if (!dirSummary) {
	              this._reportError(new Error("Illegal state: Could not load the summary for directive " + stringify(dirType) + "."), dirType);
	          }
	          return dirSummary;
	      };
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype.isDirective = function (type) { return this._directiveResolver.isDirective(type); };
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype.isPipe = function (type) { return this._pipeResolver.isPipe(type); };
	      /**
	       * @param {?} moduleType
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype.getNgModuleSummary = function (moduleType) {
	          var /** @type {?} */ moduleSummary = (this._loadSummary(moduleType, CompileSummaryKind.NgModule));
	          if (!moduleSummary) {
	              var /** @type {?} */ moduleMeta = this.getNgModuleMetadata(moduleType, false);
	              moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;
	              if (moduleSummary) {
	                  this._summaryCache.set(moduleType, moduleSummary);
	              }
	          }
	          return moduleSummary;
	      };
	      /**
	       *  Loads the declared directives and pipes of an NgModule.
	       * @param {?} moduleType
	       * @param {?} isSync
	       * @param {?=} throwIfNotFound
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype.loadNgModuleDirectiveAndPipeMetadata = function (moduleType, isSync, throwIfNotFound) {
	          var _this = this;
	          if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	          var /** @type {?} */ ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);
	          var /** @type {?} */ loading = [];
	          if (ngModule) {
	              ngModule.declaredDirectives.forEach(function (id) {
	                  var /** @type {?} */ promise = _this._loadDirectiveMetadata(id.reference, isSync);
	                  if (promise) {
	                      loading.push(promise);
	                  }
	              });
	              ngModule.declaredPipes.forEach(function (id) { return _this._loadPipeMetadata(id.reference); });
	          }
	          return Promise.all(loading);
	      };
	      /**
	       * @param {?} moduleType
	       * @param {?=} throwIfNotFound
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype.getNgModuleMetadata = function (moduleType, throwIfNotFound) {
	          var _this = this;
	          if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	          moduleType = _angular_core.resolveForwardRef(moduleType);
	          var /** @type {?} */ compileMeta = this._ngModuleCache.get(moduleType);
	          if (compileMeta) {
	              return compileMeta;
	          }
	          var /** @type {?} */ meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);
	          if (!meta) {
	              return null;
	          }
	          var /** @type {?} */ declaredDirectives = [];
	          var /** @type {?} */ exportedNonModuleIdentifiers = [];
	          var /** @type {?} */ declaredPipes = [];
	          var /** @type {?} */ importedModules = [];
	          var /** @type {?} */ exportedModules = [];
	          var /** @type {?} */ providers = [];
	          var /** @type {?} */ entryComponents = [];
	          var /** @type {?} */ bootstrapComponents = [];
	          var /** @type {?} */ schemas = [];
	          if (meta.imports) {
	              flattenAndDedupeArray(meta.imports).forEach(function (importedType) {
	                  var /** @type {?} */ importedModuleType;
	                  if (isValidType(importedType)) {
	                      importedModuleType = importedType;
	                  }
	                  else if (importedType && importedType.ngModule) {
	                      var /** @type {?} */ moduleWithProviders = importedType;
	                      importedModuleType = moduleWithProviders.ngModule;
	                      if (moduleWithProviders.providers) {
	                          providers.push.apply(providers, _this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, "provider for the NgModule '" + stringify(importedModuleType) + "'", [], importedType));
	                      }
	                  }
	                  if (importedModuleType) {
	                      var /** @type {?} */ importedModuleSummary = _this.getNgModuleSummary(importedModuleType);
	                      if (!importedModuleSummary) {
	                          _this._reportError(new Error("Unexpected " + _this._getTypeDescriptor(importedType) + " '" + stringify(importedType) + "' imported by the module '" + stringify(moduleType) + "'"), moduleType);
	                          return;
	                      }
	                      importedModules.push(importedModuleSummary);
	                  }
	                  else {
	                      _this._reportError(new Error("Unexpected value '" + stringify(importedType) + "' imported by the module '" + stringify(moduleType) + "'"), moduleType);
	                      return;
	                  }
	              });
	          }
	          if (meta.exports) {
	              flattenAndDedupeArray(meta.exports).forEach(function (exportedType) {
	                  if (!isValidType(exportedType)) {
	                      _this._reportError(new Error("Unexpected value '" + stringify(exportedType) + "' exported by the module '" + stringify(moduleType) + "'"), moduleType);
	                      return;
	                  }
	                  var /** @type {?} */ exportedModuleSummary = _this.getNgModuleSummary(exportedType);
	                  if (exportedModuleSummary) {
	                      exportedModules.push(exportedModuleSummary);
	                  }
	                  else {
	                      exportedNonModuleIdentifiers.push(_this._getIdentifierMetadata(exportedType));
	                  }
	              });
	          }
	          // Note: This will be modified later, so we rely on
	          // getting a new instance every time!
	          var /** @type {?} */ transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);
	          if (meta.declarations) {
	              flattenAndDedupeArray(meta.declarations).forEach(function (declaredType) {
	                  if (!isValidType(declaredType)) {
	                      _this._reportError(new Error("Unexpected value '" + stringify(declaredType) + "' declared by the module '" + stringify(moduleType) + "'"), moduleType);
	                      return;
	                  }
	                  var /** @type {?} */ declaredIdentifier = _this._getIdentifierMetadata(declaredType);
	                  if (_this._directiveResolver.isDirective(declaredType)) {
	                      transitiveModule.addDirective(declaredIdentifier);
	                      declaredDirectives.push(declaredIdentifier);
	                      _this._addTypeToModule(declaredType, moduleType);
	                  }
	                  else if (_this._pipeResolver.isPipe(declaredType)) {
	                      transitiveModule.addPipe(declaredIdentifier);
	                      transitiveModule.pipes.push(declaredIdentifier);
	                      declaredPipes.push(declaredIdentifier);
	                      _this._addTypeToModule(declaredType, moduleType);
	                  }
	                  else {
	                      _this._reportError(new Error("Unexpected " + _this._getTypeDescriptor(declaredType) + " '" + stringify(declaredType) + "' declared by the module '" + stringify(moduleType) + "'"), moduleType);
	                      return;
	                  }
	              });
	          }
	          var /** @type {?} */ exportedDirectives = [];
	          var /** @type {?} */ exportedPipes = [];
	          exportedNonModuleIdentifiers.forEach(function (exportedId) {
	              if (transitiveModule.directivesSet.has(exportedId.reference)) {
	                  exportedDirectives.push(exportedId);
	                  transitiveModule.addExportedDirective(exportedId);
	              }
	              else if (transitiveModule.pipesSet.has(exportedId.reference)) {
	                  exportedPipes.push(exportedId);
	                  transitiveModule.addExportedPipe(exportedId);
	              }
	              else {
	                  _this._reportError(new Error("Can't export " + _this._getTypeDescriptor(exportedId.reference) + " " + stringify(exportedId.reference) + " from " + stringify(moduleType) + " as it was neither declared nor imported!"), moduleType);
	              }
	          });
	          // The providers of the module have to go last
	          // so that they overwrite any other provider we already added.
	          if (meta.providers) {
	              providers.push.apply(providers, this._getProvidersMetadata(meta.providers, entryComponents, "provider for the NgModule '" + stringify(moduleType) + "'", [], moduleType));
	          }
	          if (meta.entryComponents) {
	              entryComponents.push.apply(entryComponents, flattenAndDedupeArray(meta.entryComponents).map(function (type) { return _this._getTypeMetadata(type); }));
	          }
	          if (meta.bootstrap) {
	              flattenAndDedupeArray(meta.bootstrap).forEach(function (type) {
	                  if (!isValidType(type)) {
	                      _this._reportError(new Error("Unexpected value '" + stringify(type) + "' used in the bootstrap property of module '" + stringify(moduleType) + "'"), moduleType);
	                      return;
	                  }
	                  bootstrapComponents.push(_this._getTypeMetadata(type));
	              });
	          }
	          entryComponents.push.apply(entryComponents, bootstrapComponents);
	          if (meta.schemas) {
	              schemas.push.apply(schemas, flattenAndDedupeArray(meta.schemas));
	          }
	          compileMeta = new CompileNgModuleMetadata({
	              type: this._getTypeMetadata(moduleType),
	              providers: providers,
	              entryComponents: entryComponents,
	              bootstrapComponents: bootstrapComponents,
	              schemas: schemas,
	              declaredDirectives: declaredDirectives,
	              exportedDirectives: exportedDirectives,
	              declaredPipes: declaredPipes,
	              exportedPipes: exportedPipes,
	              importedModules: importedModules,
	              exportedModules: exportedModules,
	              transitiveModule: transitiveModule,
	              id: meta.id,
	          });
	          entryComponents.forEach(function (id) { return transitiveModule.addEntryComponent(id); });
	          providers.forEach(function (provider) { return transitiveModule.addProvider(provider, compileMeta.type); });
	          transitiveModule.addModule(compileMeta.type);
	          this._ngModuleCache.set(moduleType, compileMeta);
	          return compileMeta;
	      };
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._getTypeDescriptor = function (type) {
	          if (this._directiveResolver.isDirective(type)) {
	              return 'directive';
	          }
	          if (this._pipeResolver.isPipe(type)) {
	              return 'pipe';
	          }
	          if (this._ngModuleResolver.isNgModule(type)) {
	              return 'module';
	          }
	          if (((type)).provide) {
	              return 'provider';
	          }
	          return 'value';
	      };
	      /**
	       * @param {?} type
	       * @param {?} moduleType
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._addTypeToModule = function (type, moduleType) {
	          var /** @type {?} */ oldModule = this._ngModuleOfTypes.get(type);
	          if (oldModule && oldModule !== moduleType) {
	              this._reportError(new Error(("Type " + stringify(type) + " is part of the declarations of 2 modules: " + stringify(oldModule) + " and " + stringify(moduleType) + "! ") +
	                  ("Please consider moving " + stringify(type) + " to a higher module that imports " + stringify(oldModule) + " and " + stringify(moduleType) + ". ") +
	                  ("You can also create a new NgModule that exports and includes " + stringify(type) + " then import that NgModule in " + stringify(oldModule) + " and " + stringify(moduleType) + ".")), moduleType);
	          }
	          this._ngModuleOfTypes.set(type, moduleType);
	      };
	      /**
	       * @param {?} importedModules
	       * @param {?} exportedModules
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function (importedModules, exportedModules) {
	          // collect `providers` / `entryComponents` from all imported and all exported modules
	          var /** @type {?} */ result = new TransitiveCompileNgModuleMetadata();
	          var /** @type {?} */ modulesByToken = new Map();
	          importedModules.concat(exportedModules).forEach(function (modSummary) {
	              modSummary.modules.forEach(function (mod) { return result.addModule(mod); });
	              modSummary.entryComponents.forEach(function (comp) { return result.addEntryComponent(comp); });
	              var /** @type {?} */ addedTokens = new Set();
	              modSummary.providers.forEach(function (entry) {
	                  var /** @type {?} */ tokenRef = tokenReference(entry.provider.token);
	                  var /** @type {?} */ prevModules = modulesByToken.get(tokenRef);
	                  if (!prevModules) {
	                      prevModules = new Set();
	                      modulesByToken.set(tokenRef, prevModules);
	                  }
	                  var /** @type {?} */ moduleRef = entry.module.reference;
	                  // Note: the providers of one module may still contain multiple providers
	                  // per token (e.g. for multi providers), and we need to preserve these.
	                  if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {
	                      prevModules.add(moduleRef);
	                      addedTokens.add(tokenRef);
	                      result.addProvider(entry.provider, entry.module);
	                  }
	              });
	          });
	          exportedModules.forEach(function (modSummary) {
	              modSummary.exportedDirectives.forEach(function (id) { return result.addExportedDirective(id); });
	              modSummary.exportedPipes.forEach(function (id) { return result.addExportedPipe(id); });
	          });
	          importedModules.forEach(function (modSummary) {
	              modSummary.exportedDirectives.forEach(function (id) { return result.addDirective(id); });
	              modSummary.exportedPipes.forEach(function (id) { return result.addPipe(id); });
	          });
	          return result;
	      };
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._getIdentifierMetadata = function (type) {
	          type = _angular_core.resolveForwardRef(type);
	          return { reference: type };
	      };
	      /**
	       * @param {?} type
	       * @param {?=} dependencies
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._getTypeMetadata = function (type, dependencies) {
	          if (dependencies === void 0) { dependencies = null; }
	          var /** @type {?} */ identifier = this._getIdentifierMetadata(type);
	          return {
	              reference: identifier.reference,
	              diDeps: this._getDependenciesMetadata(identifier.reference, dependencies),
	              lifecycleHooks: LIFECYCLE_HOOKS_VALUES.filter(function (hook) { return hasLifecycleHook(hook, identifier.reference); }),
	          };
	      };
	      /**
	       * @param {?} factory
	       * @param {?=} dependencies
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._getFactoryMetadata = function (factory, dependencies) {
	          if (dependencies === void 0) { dependencies = null; }
	          factory = _angular_core.resolveForwardRef(factory);
	          return { reference: factory, diDeps: this._getDependenciesMetadata(factory, dependencies) };
	      };
	      /**
	       *  Gets the metadata for the given pipe.
	        * This assumes `loadNgModuleMetadata` has been called first.
	       * @param {?} pipeType
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype.getPipeMetadata = function (pipeType) {
	          var /** @type {?} */ pipeMeta = this._pipeCache.get(pipeType);
	          if (!pipeMeta) {
	              this._reportError(new Error("Illegal state: getPipeMetadata can only be called after loadNgModuleMetadata for a module that declares it. Pipe " + stringify(pipeType) + "."), pipeType);
	          }
	          return pipeMeta;
	      };
	      /**
	       * @param {?} pipeType
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype.getPipeSummary = function (pipeType) {
	          var /** @type {?} */ pipeSummary = (this._loadSummary(pipeType, CompileSummaryKind.Pipe));
	          if (!pipeSummary) {
	              this._reportError(new Error("Illegal state: Could not load the summary for pipe " + stringify(pipeType) + "."), pipeType);
	          }
	          return pipeSummary;
	      };
	      /**
	       * @param {?} pipeType
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype.getOrLoadPipeMetadata = function (pipeType) {
	          var /** @type {?} */ pipeMeta = this._pipeCache.get(pipeType);
	          if (!pipeMeta) {
	              pipeMeta = this._loadPipeMetadata(pipeType);
	          }
	          return pipeMeta;
	      };
	      /**
	       * @param {?} pipeType
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._loadPipeMetadata = function (pipeType) {
	          pipeType = _angular_core.resolveForwardRef(pipeType);
	          var /** @type {?} */ pipeAnnotation = this._pipeResolver.resolve(pipeType);
	          var /** @type {?} */ pipeMeta = new CompilePipeMetadata({
	              type: this._getTypeMetadata(pipeType),
	              name: pipeAnnotation.name,
	              pure: pipeAnnotation.pure
	          });
	          this._pipeCache.set(pipeType, pipeMeta);
	          this._summaryCache.set(pipeType, pipeMeta.toSummary());
	          return pipeMeta;
	      };
	      /**
	       * @param {?} typeOrFunc
	       * @param {?} dependencies
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._getDependenciesMetadata = function (typeOrFunc, dependencies) {
	          var _this = this;
	          var /** @type {?} */ hasUnknownDeps = false;
	          var /** @type {?} */ params = dependencies || this._reflector.parameters(typeOrFunc) || [];
	          var /** @type {?} */ dependenciesMetadata = params.map(function (param) {
	              var /** @type {?} */ isAttribute = false;
	              var /** @type {?} */ isHost = false;
	              var /** @type {?} */ isSelf = false;
	              var /** @type {?} */ isSkipSelf = false;
	              var /** @type {?} */ isOptional = false;
	              var /** @type {?} */ token = null;
	              if (Array.isArray(param)) {
	                  param.forEach(function (paramEntry) {
	                      if (paramEntry instanceof _angular_core.Host) {
	                          isHost = true;
	                      }
	                      else if (paramEntry instanceof _angular_core.Self) {
	                          isSelf = true;
	                      }
	                      else if (paramEntry instanceof _angular_core.SkipSelf) {
	                          isSkipSelf = true;
	                      }
	                      else if (paramEntry instanceof _angular_core.Optional) {
	                          isOptional = true;
	                      }
	                      else if (paramEntry instanceof _angular_core.Attribute) {
	                          isAttribute = true;
	                          token = paramEntry.attributeName;
	                      }
	                      else if (paramEntry instanceof _angular_core.Inject) {
	                          token = paramEntry.token;
	                      }
	                      else if (isValidType(paramEntry) && isBlank(token)) {
	                          token = paramEntry;
	                      }
	                  });
	              }
	              else {
	                  token = param;
	              }
	              if (isBlank(token)) {
	                  hasUnknownDeps = true;
	                  return null;
	              }
	              return {
	                  isAttribute: isAttribute,
	                  isHost: isHost,
	                  isSelf: isSelf,
	                  isSkipSelf: isSkipSelf,
	                  isOptional: isOptional,
	                  token: _this._getTokenMetadata(token)
	              };
	          });
	          if (hasUnknownDeps) {
	              var /** @type {?} */ depsTokens = dependenciesMetadata.map(function (dep) { return dep ? stringify(dep.token) : '?'; }).join(', ');
	              this._reportError(new Error("Can't resolve all parameters for " + stringify(typeOrFunc) + ": (" + depsTokens + ")."), typeOrFunc);
	          }
	          return dependenciesMetadata;
	      };
	      /**
	       * @param {?} token
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._getTokenMetadata = function (token) {
	          token = _angular_core.resolveForwardRef(token);
	          var /** @type {?} */ compileToken;
	          if (typeof token === 'string') {
	              compileToken = { value: token };
	          }
	          else {
	              compileToken = { identifier: { reference: token } };
	          }
	          return compileToken;
	      };
	      /**
	       * @param {?} providers
	       * @param {?} targetEntryComponents
	       * @param {?=} debugInfo
	       * @param {?=} compileProviders
	       * @param {?=} type
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._getProvidersMetadata = function (providers, targetEntryComponents, debugInfo, compileProviders, type) {
	          var _this = this;
	          if (compileProviders === void 0) { compileProviders = []; }
	          providers.forEach(function (provider, providerIdx) {
	              if (Array.isArray(provider)) {
	                  _this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);
	              }
	              else {
	                  provider = _angular_core.resolveForwardRef(provider);
	                  var /** @type {?} */ providerMeta = void 0;
	                  if (provider && typeof provider == 'object' && provider.hasOwnProperty('provide')) {
	                      providerMeta = new ProviderMeta(provider.provide, provider);
	                  }
	                  else if (isValidType(provider)) {
	                      providerMeta = new ProviderMeta(provider, { useClass: provider });
	                  }
	                  else {
	                      var /** @type {?} */ providersInfo = ((providers.reduce(function (soFar, seenProvider, seenProviderIdx) {
	                          if (seenProviderIdx < providerIdx) {
	                              soFar.push("" + stringify(seenProvider));
	                          }
	                          else if (seenProviderIdx == providerIdx) {
	                              soFar.push("?" + stringify(seenProvider) + "?");
	                          }
	                          else if (seenProviderIdx == providerIdx + 1) {
	                              soFar.push('...');
	                          }
	                          return soFar;
	                      }, [])))
	                          .join(', ');
	                      _this._reportError(new Error("Invalid " + (debugInfo ? debugInfo : 'provider') + " - only instances of Provider and Type are allowed, got: [" + providersInfo + "]"), type);
	                  }
	                  if (providerMeta.token === resolveIdentifier(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {
	                      targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(providerMeta, type));
	                  }
	                  else {
	                      compileProviders.push(_this.getProviderMetadata(providerMeta));
	                  }
	              }
	          });
	          return compileProviders;
	      };
	      /**
	       * @param {?} provider
	       * @param {?=} type
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function (provider, type) {
	          var _this = this;
	          var /** @type {?} */ components = [];
	          var /** @type {?} */ collectedIdentifiers = [];
	          if (provider.useFactory || provider.useExisting || provider.useClass) {
	              this._reportError(new Error("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!"), type);
	              return [];
	          }
	          if (!provider.multi) {
	              this._reportError(new Error("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!"), type);
	              return [];
	          }
	          extractIdentifiers(provider.useValue, collectedIdentifiers);
	          collectedIdentifiers.forEach(function (identifier) {
	              if (_this._directiveResolver.isDirective(identifier.reference)) {
	                  components.push(identifier);
	              }
	          });
	          return components;
	      };
	      /**
	       * @param {?} provider
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype.getProviderMetadata = function (provider) {
	          var /** @type {?} */ compileDeps;
	          var /** @type {?} */ compileTypeMetadata = null;
	          var /** @type {?} */ compileFactoryMetadata = null;
	          var /** @type {?} */ token = this._getTokenMetadata(provider.token);
	          if (provider.useClass) {
	              compileTypeMetadata = this._getTypeMetadata(provider.useClass, provider.dependencies);
	              compileDeps = compileTypeMetadata.diDeps;
	              if (provider.token === provider.useClass) {
	                  // use the compileTypeMetadata as it contains information about lifecycleHooks...
	                  token = { identifier: compileTypeMetadata };
	              }
	          }
	          else if (provider.useFactory) {
	              compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);
	              compileDeps = compileFactoryMetadata.diDeps;
	          }
	          return {
	              token: token,
	              useClass: compileTypeMetadata,
	              useValue: provider.useValue,
	              useFactory: compileFactoryMetadata,
	              useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : null,
	              deps: compileDeps,
	              multi: provider.multi
	          };
	      };
	      /**
	       * @param {?} queries
	       * @param {?} isViewQuery
	       * @param {?} directiveType
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._getQueriesMetadata = function (queries, isViewQuery, directiveType) {
	          var _this = this;
	          var /** @type {?} */ res = [];
	          Object.keys(queries).forEach(function (propertyName) {
	              var /** @type {?} */ query = queries[propertyName];
	              if (query.isViewQuery === isViewQuery) {
	                  res.push(_this._getQueryMetadata(query, propertyName, directiveType));
	              }
	          });
	          return res;
	      };
	      /**
	       * @param {?} selector
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._queryVarBindings = function (selector) { return selector.split(/\s*,\s*/); };
	      /**
	       * @param {?} q
	       * @param {?} propertyName
	       * @param {?} typeOrFunc
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._getQueryMetadata = function (q, propertyName, typeOrFunc) {
	          var _this = this;
	          var /** @type {?} */ selectors;
	          if (typeof q.selector === 'string') {
	              selectors =
	                  this._queryVarBindings(q.selector).map(function (varName) { return _this._getTokenMetadata(varName); });
	          }
	          else {
	              if (!q.selector) {
	                  this._reportError(new Error("Can't construct a query for the property \"" + propertyName + "\" of \"" + stringify(typeOrFunc) + "\" since the query selector wasn't defined."), typeOrFunc);
	              }
	              selectors = [this._getTokenMetadata(q.selector)];
	          }
	          return {
	              selectors: selectors,
	              first: q.first,
	              descendants: q.descendants, propertyName: propertyName,
	              read: q.read ? this._getTokenMetadata(q.read) : null
	          };
	      };
	      /**
	       * @param {?} error
	       * @param {?=} type
	       * @param {?=} otherType
	       * @return {?}
	       */
	      CompileMetadataResolver.prototype._reportError = function (error, type, otherType) {
	          if (this._errorCollector) {
	              this._errorCollector(error, type);
	              if (otherType) {
	                  this._errorCollector(error, otherType);
	              }
	          }
	          else {
	              throw error;
	          }
	      };
	      CompileMetadataResolver.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      CompileMetadataResolver.ctorParameters = function () { return [
	          { type: NgModuleResolver, },
	          { type: DirectiveResolver, },
	          { type: PipeResolver, },
	          { type: SummaryResolver, },
	          { type: ElementSchemaRegistry, },
	          { type: DirectiveNormalizer, },
	          { type: ReflectorReader, },
	          { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [ERROR_COLLECTOR_TOKEN,] },] },
	      ]; };
	      return CompileMetadataResolver;
	  }());
	  /**
	   * @param {?} tree
	   * @param {?=} out
	   * @return {?}
	   */
	  function flattenArray(tree, out) {
	      if (out === void 0) { out = []; }
	      if (tree) {
	          for (var /** @type {?} */ i = 0; i < tree.length; i++) {
	              var /** @type {?} */ item = _angular_core.resolveForwardRef(tree[i]);
	              if (Array.isArray(item)) {
	                  flattenArray(item, out);
	              }
	              else {
	                  out.push(item);
	              }
	          }
	      }
	      return out;
	  }
	  /**
	   * @param {?} array
	   * @return {?}
	   */
	  function dedupeArray(array) {
	      if (array) {
	          return Array.from(new Set(array));
	      }
	      return [];
	  }
	  /**
	   * @param {?} tree
	   * @return {?}
	   */
	  function flattenAndDedupeArray(tree) {
	      return dedupeArray(flattenArray(tree));
	  }
	  /**
	   * @param {?} value
	   * @return {?}
	   */
	  function isValidType(value) {
	      return (value instanceof StaticSymbol) || (value instanceof _angular_core.Type);
	  }
	  /**
	   * @param {?} reflector
	   * @param {?} type
	   * @param {?} cmpMetadata
	   * @return {?}
	   */
	  function componentModuleUrl(reflector, type, cmpMetadata) {
	      if (type instanceof StaticSymbol) {
	          return type.filePath;
	      }
	      var /** @type {?} */ moduleId = cmpMetadata.moduleId;
	      if (typeof moduleId === 'string') {
	          var /** @type {?} */ scheme = getUrlScheme(moduleId);
	          return scheme ? moduleId : "package:" + moduleId + MODULE_SUFFIX;
	      }
	      else if (moduleId !== null && moduleId !== void 0) {
	          throw new Error(("moduleId should be a string in \"" + stringify(type) + "\". See https://goo.gl/wIDDiL for more information.\n") +
	              "If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.");
	      }
	      return reflector.importUri(type);
	  }
	  /**
	   * @param {?} value
	   * @param {?} targetIdentifiers
	   * @return {?}
	   */
	  function extractIdentifiers(value, targetIdentifiers) {
	      visitValue(value, new _CompileValueConverter(), targetIdentifiers);
	  }
	  var _CompileValueConverter = (function (_super) {
	      __extends$16(_CompileValueConverter, _super);
	      function _CompileValueConverter() {
	          _super.apply(this, arguments);
	      }
	      /**
	       * @param {?} value
	       * @param {?} targetIdentifiers
	       * @return {?}
	       */
	      _CompileValueConverter.prototype.visitOther = function (value, targetIdentifiers) {
	          targetIdentifiers.push({ reference: value });
	      };
	      return _CompileValueConverter;
	  }(ValueTransformer));
	
	  var /** @type {?} */ QUOTED_KEYS = '$quoted$';
	  /**
	   * @param {?} value
	   * @param {?=} type
	   * @return {?}
	   */
	  function convertValueToOutputAst(value, type) {
	      if (type === void 0) { type = null; }
	      return visitValue(value, new _ValueOutputAstTransformer(), type);
	  }
	  var _ValueOutputAstTransformer = (function () {
	      function _ValueOutputAstTransformer() {
	      }
	      /**
	       * @param {?} arr
	       * @param {?} type
	       * @return {?}
	       */
	      _ValueOutputAstTransformer.prototype.visitArray = function (arr, type) {
	          var _this = this;
	          return literalArr(arr.map(function (value) { return visitValue(value, _this, null); }), type);
	      };
	      /**
	       * @param {?} map
	       * @param {?} type
	       * @return {?}
	       */
	      _ValueOutputAstTransformer.prototype.visitStringMap = function (map, type) {
	          var _this = this;
	          var /** @type {?} */ entries = [];
	          var /** @type {?} */ quotedSet = new Set(map && map[QUOTED_KEYS]);
	          Object.keys(map).forEach(function (key) {
	              entries.push(new LiteralMapEntry(key, visitValue(map[key], _this, null), quotedSet.has(key)));
	          });
	          return new LiteralMapExpr(entries, type);
	      };
	      /**
	       * @param {?} value
	       * @param {?} type
	       * @return {?}
	       */
	      _ValueOutputAstTransformer.prototype.visitPrimitive = function (value, type) { return literal(value, type); };
	      /**
	       * @param {?} value
	       * @param {?} type
	       * @return {?}
	       */
	      _ValueOutputAstTransformer.prototype.visitOther = function (value, type) {
	          if (value instanceof Expression) {
	              return value;
	          }
	          else {
	              return importExpr({ reference: value });
	          }
	      };
	      return _ValueOutputAstTransformer;
	  }());
	
	  var ComponentFactoryDependency = (function () {
	      /**
	       * @param {?} comp
	       * @param {?} placeholder
	       */
	      function ComponentFactoryDependency(comp, placeholder) {
	          this.comp = comp;
	          this.placeholder = placeholder;
	      }
	      return ComponentFactoryDependency;
	  }());
	  var NgModuleCompileResult = (function () {
	      /**
	       * @param {?} statements
	       * @param {?} ngModuleFactoryVar
	       * @param {?} dependencies
	       */
	      function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {
	          this.statements = statements;
	          this.ngModuleFactoryVar = ngModuleFactoryVar;
	          this.dependencies = dependencies;
	      }
	      return NgModuleCompileResult;
	  }());
	  var NgModuleCompiler = (function () {
	      function NgModuleCompiler() {
	      }
	      /**
	       * @param {?} ngModuleMeta
	       * @param {?} extraProviders
	       * @return {?}
	       */
	      NgModuleCompiler.prototype.compile = function (ngModuleMeta, extraProviders) {
	          var /** @type {?} */ moduleUrl = identifierModuleUrl(ngModuleMeta.type);
	          var /** @type {?} */ sourceFileName = isPresent(moduleUrl) ?
	              "in NgModule " + identifierName(ngModuleMeta.type) + " in " + moduleUrl :
	              "in NgModule " + identifierName(ngModuleMeta.type);
	          var /** @type {?} */ sourceFile = new ParseSourceFile('', sourceFileName);
	          var /** @type {?} */ sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
	          var /** @type {?} */ deps = [];
	          var /** @type {?} */ bootstrapComponentFactories = [];
	          var /** @type {?} */ entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function (entryComponent) {
	              var /** @type {?} */ id = { reference: null };
	              if (ngModuleMeta.bootstrapComponents.some(function (id) { return id.reference === entryComponent.reference; })) {
	                  bootstrapComponentFactories.push(id);
	              }
	              deps.push(new ComponentFactoryDependency(entryComponent, id));
	              return id;
	          });
	          var /** @type {?} */ builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan);
	          var /** @type {?} */ providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);
	          providerParser.parse().forEach(function (provider) { return builder.addProvider(provider); });
	          var /** @type {?} */ injectorClass = builder.build();
	          var /** @type {?} */ ngModuleFactoryVar = identifierName(ngModuleMeta.type) + "NgFactory";
	          var /** @type {?} */ ngModuleFactoryStmt = variable(ngModuleFactoryVar)
	              .set(importExpr(createIdentifier(Identifiers.NgModuleFactory))
	              .instantiate([variable(injectorClass.name), importExpr(ngModuleMeta.type)], importType(createIdentifier(Identifiers.NgModuleFactory), [importType(ngModuleMeta.type)], [TypeModifier.Const])))
	              .toDeclStmt(null, [StmtModifier.Final]);
	          var /** @type {?} */ stmts = [injectorClass, ngModuleFactoryStmt];
	          if (ngModuleMeta.id) {
	              var /** @type {?} */ registerFactoryStmt = importExpr(createIdentifier(Identifiers.RegisterModuleFactoryFn))
	                  .callFn([literal(ngModuleMeta.id), variable(ngModuleFactoryVar)])
	                  .toStmt();
	              stmts.push(registerFactoryStmt);
	          }
	          return new NgModuleCompileResult(stmts, ngModuleFactoryVar, deps);
	      };
	      NgModuleCompiler.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      NgModuleCompiler.ctorParameters = function () { return []; };
	      return NgModuleCompiler;
	  }());
	  var _InjectorBuilder = (function () {
	      /**
	       * @param {?} _ngModuleMeta
	       * @param {?} _entryComponentFactories
	       * @param {?} _bootstrapComponentFactories
	       * @param {?} _sourceSpan
	       */
	      function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {
	          this._ngModuleMeta = _ngModuleMeta;
	          this._entryComponentFactories = _entryComponentFactories;
	          this._bootstrapComponentFactories = _bootstrapComponentFactories;
	          this._sourceSpan = _sourceSpan;
	          this.fields = [];
	          this.getters = [];
	          this.methods = [];
	          this.ctorStmts = [];
	          this._tokens = [];
	          this._instances = new Map();
	          this._createStmts = [];
	          this._destroyStmts = [];
	      }
	      /**
	       * @param {?} resolvedProvider
	       * @return {?}
	       */
	      _InjectorBuilder.prototype.addProvider = function (resolvedProvider) {
	          var _this = this;
	          var /** @type {?} */ providerValueExpressions = resolvedProvider.providers.map(function (provider) { return _this._getProviderValue(provider); });
	          var /** @type {?} */ propName = "_" + tokenName(resolvedProvider.token) + "_" + this._instances.size;
	          var /** @type {?} */ instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);
	          if (resolvedProvider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
	              this._destroyStmts.push(instance.callMethod('ngOnDestroy', []).toStmt());
	          }
	          this._tokens.push(resolvedProvider.token);
	          this._instances.set(tokenReference(resolvedProvider.token), instance);
	      };
	      /**
	       * @return {?}
	       */
	      _InjectorBuilder.prototype.build = function () {
	          var _this = this;
	          var /** @type {?} */ getMethodStmts = this._tokens.map(function (token) {
	              var /** @type {?} */ providerExpr = _this._instances.get(tokenReference(token));
	              return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(token)), [new ReturnStatement(providerExpr)]);
	          });
	          var /** @type {?} */ methods = [
	              new ClassMethod('createInternal', [], this._createStmts.concat(new ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))), importType(this._ngModuleMeta.type)),
	              new ClassMethod('getInternal', [
	                  new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE),
	                  new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE)
	              ], getMethodStmts.concat([new ReturnStatement(InjectMethodVars.notFoundResult)]), DYNAMIC_TYPE),
	              new ClassMethod('destroyInternal', [], this._destroyStmts),
	          ];
	          var /** @type {?} */ parentArgs = [
	              variable(InjectorProps.parent.name),
	              literalArr(this._entryComponentFactories.map(function (componentFactory) { return importExpr(componentFactory); })),
	              literalArr(this._bootstrapComponentFactories.map(function (componentFactory) { return importExpr(componentFactory); }))
	          ];
	          var /** @type {?} */ injClassName = identifierName(this._ngModuleMeta.type) + "Injector";
	          return createClassStmt({
	              name: injClassName,
	              ctorParams: [new FnParam(InjectorProps.parent.name, importType(createIdentifier(Identifiers.Injector)))],
	              parent: importExpr(createIdentifier(Identifiers.NgModuleInjector), [importType(this._ngModuleMeta.type)]),
	              parentArgs: parentArgs,
	              builders: [{ methods: methods }, this]
	          });
	      };
	      /**
	       * @param {?} provider
	       * @return {?}
	       */
	      _InjectorBuilder.prototype._getProviderValue = function (provider) {
	          var _this = this;
	          var /** @type {?} */ result;
	          if (isPresent(provider.useExisting)) {
	              result = this._getDependency({ token: provider.useExisting });
	          }
	          else if (isPresent(provider.useFactory)) {
	              var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;
	              var /** @type {?} */ depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });
	              result = importExpr(provider.useFactory).callFn(depsExpr);
	          }
	          else if (isPresent(provider.useClass)) {
	              var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;
	              var /** @type {?} */ depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });
	              result =
	                  importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
	          }
	          else {
	              result = convertValueToOutputAst(provider.useValue);
	          }
	          return result;
	      };
	      /**
	       * @param {?} propName
	       * @param {?} provider
	       * @param {?} providerValueExpressions
	       * @param {?} isMulti
	       * @param {?} isEager
	       * @return {?}
	       */
	      _InjectorBuilder.prototype._createProviderProperty = function (propName, provider, providerValueExpressions, isMulti, isEager) {
	          var /** @type {?} */ resolvedProviderValueExpr;
	          var /** @type {?} */ type;
	          if (isMulti) {
	              resolvedProviderValueExpr = literalArr(providerValueExpressions);
	              type = new ArrayType(DYNAMIC_TYPE);
	          }
	          else {
	              resolvedProviderValueExpr = providerValueExpressions[0];
	              type = providerValueExpressions[0].type;
	          }
	          if (!type) {
	              type = DYNAMIC_TYPE;
	          }
	          if (isEager) {
	              this.fields.push(new ClassField(propName, type));
	              this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
	          }
	          else {
	              var /** @type {?} */ internalField = "_" + propName;
	              this.fields.push(new ClassField(internalField, type));
	              // Note: Equals is important for JS so that it also checks the undefined case!
	              var /** @type {?} */ getterStmts = [
	                  new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]),
	                  new ReturnStatement(THIS_EXPR.prop(internalField))
	              ];
	              this.getters.push(new ClassGetter(propName, getterStmts, type));
	          }
	          return THIS_EXPR.prop(propName);
	      };
	      /**
	       * @param {?} dep
	       * @return {?}
	       */
	      _InjectorBuilder.prototype._getDependency = function (dep) {
	          var /** @type {?} */ result = null;
	          if (dep.isValue) {
	              result = literal(dep.value);
	          }
	          if (!dep.isSkipSelf) {
	              if (dep.token &&
	                  (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) ||
	                      tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver))) {
	                  result = THIS_EXPR;
	              }
	              if (!result) {
	                  result = this._instances.get(tokenReference(dep.token));
	              }
	          }
	          if (!result) {
	              var /** @type {?} */ args = [createDiTokenExpression(dep.token)];
	              if (dep.isOptional) {
	                  args.push(NULL_EXPR);
	              }
	              result = InjectorProps.parent.callMethod('get', args);
	          }
	          return result;
	      };
	      return _InjectorBuilder;
	  }());
	  var InjectorProps = (function () {
	      function InjectorProps() {
	      }
	      InjectorProps.parent = THIS_EXPR.prop('parent');
	      return InjectorProps;
	  }());
	  var InjectMethodVars = (function () {
	      function InjectMethodVars() {
	      }
	      InjectMethodVars.token = variable('token');
	      InjectMethodVars.notFoundResult = variable('notFoundResult');
	      return InjectMethodVars;
	  }());
	
	  var /** @type {?} */ _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
	  var /** @type {?} */ _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
	  var /** @type {?} */ CATCH_ERROR_VAR$1 = variable('error');
	  var /** @type {?} */ CATCH_STACK_VAR$1 = variable('stack');
	  var _EmittedLine = (function () {
	      /**
	       * @param {?} indent
	       */
	      function _EmittedLine(indent) {
	          this.indent = indent;
	          this.parts = [];
	      }
	      return _EmittedLine;
	  }());
	  var EmitterVisitorContext = (function () {
	      /**
	       * @param {?} _exportedVars
	       * @param {?} _indent
	       */
	      function EmitterVisitorContext(_exportedVars, _indent) {
	          this._exportedVars = _exportedVars;
	          this._indent = _indent;
	          this._classes = [];
	          this._lines = [new _EmittedLine(_indent)];
	      }
	      /**
	       * @param {?} exportedVars
	       * @return {?}
	       */
	      EmitterVisitorContext.createRoot = function (exportedVars) {
	          return new EmitterVisitorContext(exportedVars, 0);
	      };
	      Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
	          /**
	           * @return {?}
	           */
	          get: function () { return this._lines[this._lines.length - 1]; },
	          enumerable: true,
	          configurable: true
	      });
	      /**
	       * @param {?} varName
	       * @return {?}
	       */
	      EmitterVisitorContext.prototype.isExportedVar = function (varName) { return this._exportedVars.indexOf(varName) !== -1; };
	      /**
	       * @param {?=} lastPart
	       * @return {?}
	       */
	      EmitterVisitorContext.prototype.println = function (lastPart) {
	          if (lastPart === void 0) { lastPart = ''; }
	          this.print(lastPart, true);
	      };
	      /**
	       * @return {?}
	       */
	      EmitterVisitorContext.prototype.lineIsEmpty = function () { return this._currentLine.parts.length === 0; };
	      /**
	       * @param {?} part
	       * @param {?=} newLine
	       * @return {?}
	       */
	      EmitterVisitorContext.prototype.print = function (part, newLine) {
	          if (newLine === void 0) { newLine = false; }
	          if (part.length > 0) {
	              this._currentLine.parts.push(part);
	          }
	          if (newLine) {
	              this._lines.push(new _EmittedLine(this._indent));
	          }
	      };
	      /**
	       * @return {?}
	       */
	      EmitterVisitorContext.prototype.removeEmptyLastLine = function () {
	          if (this.lineIsEmpty()) {
	              this._lines.pop();
	          }
	      };
	      /**
	       * @return {?}
	       */
	      EmitterVisitorContext.prototype.incIndent = function () {
	          this._indent++;
	          this._currentLine.indent = this._indent;
	      };
	      /**
	       * @return {?}
	       */
	      EmitterVisitorContext.prototype.decIndent = function () {
	          this._indent--;
	          this._currentLine.indent = this._indent;
	      };
	      /**
	       * @param {?} clazz
	       * @return {?}
	       */
	      EmitterVisitorContext.prototype.pushClass = function (clazz) { this._classes.push(clazz); };
	      /**
	       * @return {?}
	       */
	      EmitterVisitorContext.prototype.popClass = function () { return this._classes.pop(); };
	      Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
	          /**
	           * @return {?}
	           */
	          get: function () {
	              return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      /**
	       * @return {?}
	       */
	      EmitterVisitorContext.prototype.toSource = function () {
	          var /** @type {?} */ lines = this._lines;
	          if (lines[lines.length - 1].parts.length === 0) {
	              lines = lines.slice(0, lines.length - 1);
	          }
	          return lines
	              .map(function (line) {
	              if (line.parts.length > 0) {
	                  return _createIndent(line.indent) + line.parts.join('');
	              }
	              else {
	                  return '';
	              }
	          })
	              .join('\n');
	      };
	      return EmitterVisitorContext;
	  }());
	  /**
	   * @abstract
	   */
	  var AbstractEmitterVisitor = (function () {
	      /**
	       * @param {?} _escapeDollarInStrings
	       */
	      function AbstractEmitterVisitor(_escapeDollarInStrings) {
	          this._escapeDollarInStrings = _escapeDollarInStrings;
	      }
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitExpressionStmt = function (stmt, ctx) {
	          stmt.expr.visitExpression(this, ctx);
	          ctx.println(';');
	          return null;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitReturnStmt = function (stmt, ctx) {
	          ctx.print("return ");
	          stmt.value.visitExpression(this, ctx);
	          ctx.println(';');
	          return null;
	      };
	      /**
	       * @abstract
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitCastExpr = function (ast, context) { };
	      /**
	       * @abstract
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) { };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitIfStmt = function (stmt, ctx) {
	          ctx.print("if (");
	          stmt.condition.visitExpression(this, ctx);
	          ctx.print(") {");
	          var /** @type {?} */ hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;
	          if (stmt.trueCase.length <= 1 && !hasElseCase) {
	              ctx.print(" ");
	              this.visitAllStatements(stmt.trueCase, ctx);
	              ctx.removeEmptyLastLine();
	              ctx.print(" ");
	          }
	          else {
	              ctx.println();
	              ctx.incIndent();
	              this.visitAllStatements(stmt.trueCase, ctx);
	              ctx.decIndent();
	              if (hasElseCase) {
	                  ctx.println("} else {");
	                  ctx.incIndent();
	                  this.visitAllStatements(stmt.falseCase, ctx);
	                  ctx.decIndent();
	              }
	          }
	          ctx.println("}");
	          return null;
	      };
	      /**
	       * @abstract
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) { };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitThrowStmt = function (stmt, ctx) {
	          ctx.print("throw ");
	          stmt.error.visitExpression(this, ctx);
	          ctx.println(";");
	          return null;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitCommentStmt = function (stmt, ctx) {
	          var /** @type {?} */ lines = stmt.comment.split('\n');
	          lines.forEach(function (line) { ctx.println("// " + line); });
	          return null;
	      };
	      /**
	       * @abstract
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) { };
	      /**
	       * @param {?} expr
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitWriteVarExpr = function (expr, ctx) {
	          var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();
	          if (!lineWasEmpty) {
	              ctx.print('(');
	          }
	          ctx.print(expr.name + " = ");
	          expr.value.visitExpression(this, ctx);
	          if (!lineWasEmpty) {
	              ctx.print(')');
	          }
	          return null;
	      };
	      /**
	       * @param {?} expr
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function (expr, ctx) {
	          var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();
	          if (!lineWasEmpty) {
	              ctx.print('(');
	          }
	          expr.receiver.visitExpression(this, ctx);
	          ctx.print("[");
	          expr.index.visitExpression(this, ctx);
	          ctx.print("] = ");
	          expr.value.visitExpression(this, ctx);
	          if (!lineWasEmpty) {
	              ctx.print(')');
	          }
	          return null;
	      };
	      /**
	       * @param {?} expr
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitWritePropExpr = function (expr, ctx) {
	          var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();
	          if (!lineWasEmpty) {
	              ctx.print('(');
	          }
	          expr.receiver.visitExpression(this, ctx);
	          ctx.print("." + expr.name + " = ");
	          expr.value.visitExpression(this, ctx);
	          if (!lineWasEmpty) {
	              ctx.print(')');
	          }
	          return null;
	      };
	      /**
	       * @param {?} expr
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function (expr, ctx) {
	          expr.receiver.visitExpression(this, ctx);
	          var /** @type {?} */ name = expr.name;
	          if (isPresent(expr.builtin)) {
	              name = this.getBuiltinMethodName(expr.builtin);
	              if (isBlank(name)) {
	                  // some builtins just mean to skip the call.
	                  return null;
	              }
	          }
	          ctx.print("." + name + "(");
	          this.visitAllExpressions(expr.args, ctx, ",");
	          ctx.print(")");
	          return null;
	      };
	      /**
	       * @abstract
	       * @param {?} method
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.getBuiltinMethodName = function (method) { };
	      /**
	       * @param {?} expr
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
	          expr.fn.visitExpression(this, ctx);
	          ctx.print("(");
	          this.visitAllExpressions(expr.args, ctx, ',');
	          ctx.print(")");
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
	          var /** @type {?} */ varName = ast.name;
	          if (isPresent(ast.builtin)) {
	              switch (ast.builtin) {
	                  case BuiltinVar.Super:
	                      varName = 'super';
	                      break;
	                  case BuiltinVar.This:
	                      varName = 'this';
	                      break;
	                  case BuiltinVar.CatchError:
	                      varName = CATCH_ERROR_VAR$1.name;
	                      break;
	                  case BuiltinVar.CatchStack:
	                      varName = CATCH_STACK_VAR$1.name;
	                      break;
	                  default:
	                      throw new Error("Unknown builtin variable " + ast.builtin);
	              }
	          }
	          ctx.print(varName);
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {
	          ctx.print("new ");
	          ast.classExpr.visitExpression(this, ctx);
	          ctx.print("(");
	          this.visitAllExpressions(ast.args, ctx, ',');
	          ctx.print(")");
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
	          var /** @type {?} */ value = ast.value;
	          if (typeof value === 'string') {
	              ctx.print(escapeIdentifier(value, this._escapeDollarInStrings));
	          }
	          else {
	              ctx.print("" + value);
	          }
	          return null;
	      };
	      /**
	       * @abstract
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) { };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitConditionalExpr = function (ast, ctx) {
	          ctx.print("(");
	          ast.condition.visitExpression(this, ctx);
	          ctx.print('? ');
	          ast.trueCase.visitExpression(this, ctx);
	          ctx.print(': ');
	          ast.falseCase.visitExpression(this, ctx);
	          ctx.print(")");
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitNotExpr = function (ast, ctx) {
	          ctx.print('!');
	          ast.condition.visitExpression(this, ctx);
	          return null;
	      };
	      /**
	       * @abstract
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) { };
	      /**
	       * @abstract
	       * @param {?} stmt
	       * @param {?} context
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) { };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
	          var /** @type {?} */ opStr;
	          switch (ast.operator) {
	              case BinaryOperator.Equals:
	                  opStr = '==';
	                  break;
	              case BinaryOperator.Identical:
	                  opStr = '===';
	                  break;
	              case BinaryOperator.NotEquals:
	                  opStr = '!=';
	                  break;
	              case BinaryOperator.NotIdentical:
	                  opStr = '!==';
	                  break;
	              case BinaryOperator.And:
	                  opStr = '&&';
	                  break;
	              case BinaryOperator.Or:
	                  opStr = '||';
	                  break;
	              case BinaryOperator.Plus:
	                  opStr = '+';
	                  break;
	              case BinaryOperator.Minus:
	                  opStr = '-';
	                  break;
	              case BinaryOperator.Divide:
	                  opStr = '/';
	                  break;
	              case BinaryOperator.Multiply:
	                  opStr = '*';
	                  break;
	              case BinaryOperator.Modulo:
	                  opStr = '%';
	                  break;
	              case BinaryOperator.Lower:
	                  opStr = '<';
	                  break;
	              case BinaryOperator.LowerEquals:
	                  opStr = '<=';
	                  break;
	              case BinaryOperator.Bigger:
	                  opStr = '>';
	                  break;
	              case BinaryOperator.BiggerEquals:
	                  opStr = '>=';
	                  break;
	              default:
	                  throw new Error("Unknown operator " + ast.operator);
	          }
	          ctx.print("(");
	          ast.lhs.visitExpression(this, ctx);
	          ctx.print(" " + opStr + " ");
	          ast.rhs.visitExpression(this, ctx);
	          ctx.print(")");
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitReadPropExpr = function (ast, ctx) {
	          ast.receiver.visitExpression(this, ctx);
	          ctx.print(".");
	          ctx.print(ast.name);
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitReadKeyExpr = function (ast, ctx) {
	          ast.receiver.visitExpression(this, ctx);
	          ctx.print("[");
	          ast.index.visitExpression(this, ctx);
	          ctx.print("]");
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	          var /** @type {?} */ useNewLine = ast.entries.length > 1;
	          ctx.print("[", useNewLine);
	          ctx.incIndent();
	          this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);
	          ctx.decIndent();
	          ctx.print("]", useNewLine);
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function (ast, ctx) {
	          var _this = this;
	          var /** @type {?} */ useNewLine = ast.entries.length > 1;
	          ctx.print("{", useNewLine);
	          ctx.incIndent();
	          this.visitAllObjects(function (entry) {
	              ctx.print(escapeIdentifier(entry.key, _this._escapeDollarInStrings, entry.quoted) + ": ");
	              entry.value.visitExpression(_this, ctx);
	          }, ast.entries, ctx, ',', useNewLine);
	          ctx.decIndent();
	          ctx.print("}", useNewLine);
	          return null;
	      };
	      /**
	       * @param {?} expressions
	       * @param {?} ctx
	       * @param {?} separator
	       * @param {?=} newLine
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitAllExpressions = function (expressions, ctx, separator, newLine) {
	          var _this = this;
	          if (newLine === void 0) { newLine = false; }
	          this.visitAllObjects(function (expr) { return expr.visitExpression(_this, ctx); }, expressions, ctx, separator, newLine);
	      };
	      /**
	       * @param {?} handler
	       * @param {?} expressions
	       * @param {?} ctx
	       * @param {?} separator
	       * @param {?=} newLine
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitAllObjects = function (handler, expressions, ctx, separator, newLine) {
	          if (newLine === void 0) { newLine = false; }
	          for (var /** @type {?} */ i = 0; i < expressions.length; i++) {
	              if (i > 0) {
	                  ctx.print(separator, newLine);
	              }
	              handler(expressions[i]);
	          }
	          if (newLine) {
	              ctx.println();
	          }
	      };
	      /**
	       * @param {?} statements
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractEmitterVisitor.prototype.visitAllStatements = function (statements, ctx) {
	          var _this = this;
	          statements.forEach(function (stmt) { return stmt.visitStatement(_this, ctx); });
	      };
	      return AbstractEmitterVisitor;
	  }());
	  /**
	   * @param {?} input
	   * @param {?} escapeDollar
	   * @param {?=} alwaysQuote
	   * @return {?}
	   */
	  function escapeIdentifier(input, escapeDollar, alwaysQuote) {
	      if (alwaysQuote === void 0) { alwaysQuote = true; }
	      if (isBlank(input)) {
	          return null;
	      }
	      var /** @type {?} */ body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function () {
	          var match = [];
	          for (var _i = 0; _i < arguments.length; _i++) {
	              match[_i - 0] = arguments[_i];
	          }
	          if (match[0] == '$') {
	              return escapeDollar ? '\\$' : '$';
	          }
	          else if (match[0] == '\n') {
	              return '\\n';
	          }
	          else if (match[0] == '\r') {
	              return '\\r';
	          }
	          else {
	              return "\\" + match[0];
	          }
	      });
	      var /** @type {?} */ requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
	      return requiresQuotes ? "'" + body + "'" : body;
	  }
	  /**
	   * @param {?} count
	   * @return {?}
	   */
	  function _createIndent(count) {
	      var /** @type {?} */ res = '';
	      for (var /** @type {?} */ i = 0; i < count; i++) {
	          res += '  ';
	      }
	      return res;
	  }
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$17 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var /** @type {?} */ _debugModuleUrl = '/debug/lib';
	  /**
	   * @param {?} ast
	   * @return {?}
	   */
	  function debugOutputAstAsTypeScript(ast) {
	      var /** @type {?} */ converter = new _TsEmitterVisitor(_debugModuleUrl);
	      var /** @type {?} */ ctx = EmitterVisitorContext.createRoot([]);
	      var /** @type {?} */ asts = Array.isArray(ast) ? ast : [ast];
	      asts.forEach(function (ast) {
	          if (ast instanceof Statement) {
	              ast.visitStatement(converter, ctx);
	          }
	          else if (ast instanceof Expression) {
	              ast.visitExpression(converter, ctx);
	          }
	          else if (ast instanceof Type$1) {
	              ast.visitType(converter, ctx);
	          }
	          else {
	              throw new Error("Don't know how to print debug info for " + ast);
	          }
	      });
	      return ctx.toSource();
	  }
	  var TypeScriptEmitter = (function () {
	      /**
	       * @param {?} _importGenerator
	       */
	      function TypeScriptEmitter(_importGenerator) {
	          this._importGenerator = _importGenerator;
	      }
	      /**
	       * @param {?} moduleUrl
	       * @param {?} stmts
	       * @param {?} exportedVars
	       * @return {?}
	       */
	      TypeScriptEmitter.prototype.emitStatements = function (moduleUrl, stmts, exportedVars) {
	          var _this = this;
	          var /** @type {?} */ converter = new _TsEmitterVisitor(moduleUrl);
	          var /** @type {?} */ ctx = EmitterVisitorContext.createRoot(exportedVars);
	          converter.visitAllStatements(stmts, ctx);
	          var /** @type {?} */ srcParts = [];
	          converter.importsWithPrefixes.forEach(function (prefix, importedModuleUrl) {
	              // Note: can't write the real word for import as it screws up system.js auto detection...
	              srcParts.push("imp" +
	                  ("ort * as " + prefix + " from '" + _this._importGenerator.fileNameToModuleName(importedModuleUrl, moduleUrl) + "';"));
	          });
	          srcParts.push(ctx.toSource());
	          return srcParts.join('\n');
	      };
	      return TypeScriptEmitter;
	  }());
	  var _TsEmitterVisitor = (function (_super) {
	      __extends$17(_TsEmitterVisitor, _super);
	      /**
	       * @param {?} _moduleUrl
	       */
	      function _TsEmitterVisitor(_moduleUrl) {
	          _super.call(this, false);
	          this._moduleUrl = _moduleUrl;
	          this.importsWithPrefixes = new Map();
	      }
	      /**
	       * @param {?} t
	       * @param {?} ctx
	       * @param {?=} defaultType
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype.visitType = function (t, ctx, defaultType) {
	          if (defaultType === void 0) { defaultType = 'any'; }
	          if (isPresent(t)) {
	              t.visitType(this, ctx);
	          }
	          else {
	              ctx.print(defaultType);
	          }
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
	          var /** @type {?} */ value = ast.value;
	          if (isBlank(value) && ast.type != NULL_TYPE) {
	              ctx.print("(" + value + " as any)");
	              return null;
	          }
	          return _super.prototype.visitLiteralExpr.call(this, ast, ctx);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	          if (ast.entries.length === 0) {
	              ctx.print('(');
	          }
	          var /** @type {?} */ result = _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);
	          if (ast.entries.length === 0) {
	              ctx.print(' as any[])');
	          }
	          return result;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
	          this._visitIdentifier(ast.value, ast.typeParams, ctx);
	          return null;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	          if (ctx.isExportedVar(stmt.name)) {
	              ctx.print("export ");
	          }
	          if (stmt.hasModifier(StmtModifier.Final)) {
	              ctx.print("const");
	          }
	          else {
	              ctx.print("var");
	          }
	          ctx.print(" " + stmt.name + ":");
	          this.visitType(stmt.type, ctx);
	          ctx.print(" = ");
	          stmt.value.visitExpression(this, ctx);
	          ctx.println(";");
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
	          ctx.print("(<");
	          ast.type.visitType(this, ctx);
	          ctx.print(">");
	          ast.value.visitExpression(this, ctx);
	          ctx.print(")");
	          return null;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	          var _this = this;
	          ctx.pushClass(stmt);
	          if (ctx.isExportedVar(stmt.name)) {
	              ctx.print("export ");
	          }
	          ctx.print("class " + stmt.name);
	          if (isPresent(stmt.parent)) {
	              ctx.print(" extends ");
	              stmt.parent.visitExpression(this, ctx);
	          }
	          ctx.println(" {");
	          ctx.incIndent();
	          stmt.fields.forEach(function (field) { return _this._visitClassField(field, ctx); });
	          if (isPresent(stmt.constructorMethod)) {
	              this._visitClassConstructor(stmt, ctx);
	          }
	          stmt.getters.forEach(function (getter) { return _this._visitClassGetter(getter, ctx); });
	          stmt.methods.forEach(function (method) { return _this._visitClassMethod(method, ctx); });
	          ctx.decIndent();
	          ctx.println("}");
	          ctx.popClass();
	          return null;
	      };
	      /**
	       * @param {?} field
	       * @param {?} ctx
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype._visitClassField = function (field, ctx) {
	          if (field.hasModifier(StmtModifier.Private)) {
	              // comment out as a workaround for #10967
	              ctx.print("/*private*/ ");
	          }
	          ctx.print(field.name);
	          ctx.print(':');
	          this.visitType(field.type, ctx);
	          ctx.println(";");
	      };
	      /**
	       * @param {?} getter
	       * @param {?} ctx
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype._visitClassGetter = function (getter, ctx) {
	          if (getter.hasModifier(StmtModifier.Private)) {
	              ctx.print("private ");
	          }
	          ctx.print("get " + getter.name + "()");
	          ctx.print(':');
	          this.visitType(getter.type, ctx);
	          ctx.println(" {");
	          ctx.incIndent();
	          this.visitAllStatements(getter.body, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
	          ctx.print("constructor(");
	          this._visitParams(stmt.constructorMethod.params, ctx);
	          ctx.println(") {");
	          ctx.incIndent();
	          this.visitAllStatements(stmt.constructorMethod.body, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	      };
	      /**
	       * @param {?} method
	       * @param {?} ctx
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype._visitClassMethod = function (method, ctx) {
	          if (method.hasModifier(StmtModifier.Private)) {
	              ctx.print("private ");
	          }
	          ctx.print(method.name + "(");
	          this._visitParams(method.params, ctx);
	          ctx.print("):");
	          this.visitType(method.type, ctx, 'void');
	          ctx.println(" {");
	          ctx.incIndent();
	          this.visitAllStatements(method.body, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
	          ctx.print("(");
	          this._visitParams(ast.params, ctx);
	          ctx.print("):");
	          this.visitType(ast.type, ctx, 'void');
	          ctx.println(" => {");
	          ctx.incIndent();
	          this.visitAllStatements(ast.statements, ctx);
	          ctx.decIndent();
	          ctx.print("}");
	          return null;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	          if (ctx.isExportedVar(stmt.name)) {
	              ctx.print("export ");
	          }
	          ctx.print("function " + stmt.name + "(");
	          this._visitParams(stmt.params, ctx);
	          ctx.print("):");
	          this.visitType(stmt.type, ctx, 'void');
	          ctx.println(" {");
	          ctx.incIndent();
	          this.visitAllStatements(stmt.statements, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	          return null;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
	          ctx.println("try {");
	          ctx.incIndent();
	          this.visitAllStatements(stmt.bodyStmts, ctx);
	          ctx.decIndent();
	          ctx.println("} catch (" + CATCH_ERROR_VAR$1.name + ") {");
	          ctx.incIndent();
	          var /** @type {?} */ catchStmts = [(CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [
	                  StmtModifier.Final
	              ]))].concat(stmt.catchStmts);
	          this.visitAllStatements(catchStmts, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	          return null;
	      };
	      /**
	       * @param {?} type
	       * @param {?} ctx
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype.visitBuiltintType = function (type, ctx) {
	          var /** @type {?} */ typeStr;
	          switch (type.name) {
	              case BuiltinTypeName.Bool:
	                  typeStr = 'boolean';
	                  break;
	              case BuiltinTypeName.Dynamic:
	                  typeStr = 'any';
	                  break;
	              case BuiltinTypeName.Function:
	                  typeStr = 'Function';
	                  break;
	              case BuiltinTypeName.Number:
	                  typeStr = 'number';
	                  break;
	              case BuiltinTypeName.Int:
	                  typeStr = 'number';
	                  break;
	              case BuiltinTypeName.String:
	                  typeStr = 'string';
	                  break;
	              default:
	                  throw new Error("Unsupported builtin type " + type.name);
	          }
	          ctx.print(typeStr);
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype.visitExpressionType = function (ast, ctx) {
	          var _this = this;
	          ast.value.visitExpression(this, ctx);
	          if (isPresent(ast.typeParams) && ast.typeParams.length > 0) {
	              ctx.print("<");
	              this.visitAllObjects(function (type) { return type.visitType(_this, ctx); }, ast.typeParams, ctx, ',');
	              ctx.print(">");
	          }
	          return null;
	      };
	      /**
	       * @param {?} type
	       * @param {?} ctx
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype.visitArrayType = function (type, ctx) {
	          this.visitType(type.of, ctx);
	          ctx.print("[]");
	          return null;
	      };
	      /**
	       * @param {?} type
	       * @param {?} ctx
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype.visitMapType = function (type, ctx) {
	          ctx.print("{[key: string]:");
	          this.visitType(type.valueType, ctx);
	          ctx.print("}");
	          return null;
	      };
	      /**
	       * @param {?} method
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
	          var /** @type {?} */ name;
	          switch (method) {
	              case BuiltinMethod.ConcatArray:
	                  name = 'concat';
	                  break;
	              case BuiltinMethod.SubscribeObservable:
	                  name = 'subscribe';
	                  break;
	              case BuiltinMethod.Bind:
	                  name = 'bind';
	                  break;
	              default:
	                  throw new Error("Unknown builtin method: " + method);
	          }
	          return name;
	      };
	      /**
	       * @param {?} params
	       * @param {?} ctx
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype._visitParams = function (params, ctx) {
	          var _this = this;
	          this.visitAllObjects(function (param) {
	              ctx.print(param.name);
	              ctx.print(':');
	              _this.visitType(param.type, ctx);
	          }, params, ctx, ',');
	      };
	      /**
	       * @param {?} value
	       * @param {?} typeParams
	       * @param {?} ctx
	       * @return {?}
	       */
	      _TsEmitterVisitor.prototype._visitIdentifier = function (value, typeParams, ctx) {
	          var _this = this;
	          var /** @type {?} */ name = identifierName(value);
	          var /** @type {?} */ moduleUrl = identifierModuleUrl(value);
	          if (isBlank(name)) {
	              throw new Error("Internal error: unknown identifier " + value);
	          }
	          if (isPresent(moduleUrl) && moduleUrl != this._moduleUrl) {
	              var /** @type {?} */ prefix = this.importsWithPrefixes.get(moduleUrl);
	              if (isBlank(prefix)) {
	                  prefix = "import" + this.importsWithPrefixes.size;
	                  this.importsWithPrefixes.set(moduleUrl, prefix);
	              }
	              ctx.print(prefix + ".");
	          }
	          if (value.reference && value.reference.members) {
	              ctx.print(value.reference.name);
	              ctx.print('.');
	              ctx.print(value.reference.members.join('.'));
	          }
	          else {
	              ctx.print(name);
	          }
	          if (isPresent(typeParams) && typeParams.length > 0) {
	              ctx.print("<");
	              this.visitAllObjects(function (type) { return type.visitType(_this, ctx); }, typeParams, ctx, ',');
	              ctx.print(">");
	          }
	      };
	      return _TsEmitterVisitor;
	  }(AbstractEmitterVisitor));
	
	  // =================================================================================================
	  // =================================================================================================
	  // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
	  // =================================================================================================
	  // =================================================================================================
	  //
	  //        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!
	  //                               Reach out to mprobst for details.
	  //
	  // =================================================================================================
	  /** Map from tagName|propertyName SecurityContext. Properties applying to all tags use '*'. */
	  var /** @type {?} */ SECURITY_SCHEMA = {};
	  /**
	   * @param {?} ctx
	   * @param {?} specs
	   * @return {?}
	   */
	  function registerContext(ctx, specs) {
	      for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {
	          var spec = specs_1[_i];
	          SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
	      }
	  }
	  // Case is insignificant below, all element and attribute names are lower-cased for lookup.
	  registerContext(_angular_core.SecurityContext.HTML, [
	      'iframe|srcdoc',
	      '*|innerHTML',
	      '*|outerHTML',
	  ]);
	  registerContext(_angular_core.SecurityContext.STYLE, ['*|style']);
	  // NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.
	  registerContext(_angular_core.SecurityContext.URL, [
	      '*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href',
	      'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action',
	      'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite',
	      'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src',
	  ]);
	  registerContext(_angular_core.SecurityContext.RESOURCE_URL, [
	      'applet|code',
	      'applet|codebase',
	      'base|href',
	      'embed|src',
	      'frame|src',
	      'head|profile',
	      'html|manifest',
	      'iframe|src',
	      'link|href',
	      'media|src',
	      'object|codebase',
	      'object|data',
	      'script|src',
	  ]);
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$18 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var /** @type {?} */ BOOLEAN = 'boolean';
	  var /** @type {?} */ NUMBER = 'number';
	  var /** @type {?} */ STRING = 'string';
	  var /** @type {?} */ OBJECT = 'object';
	  /**
	   * This array represents the DOM schema. It encodes inheritance, properties, and events.
	   *
	   * ## Overview
	   *
	   * Each line represents one kind of element. The `element_inheritance` and properties are joined
	   * using `element_inheritance|properties` syntax.
	   *
	   * ## Element Inheritance
	   *
	   * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.
	   * Here the individual elements are separated by `,` (commas). Every element in the list
	   * has identical properties.
	   *
	   * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is
	   * specified then `""` (blank) element is assumed.
	   *
	   * NOTE: The blank element inherits from root `[Element]` element, the super element of all
	   * elements.
	   *
	   * NOTE an element prefix such as `:svg:` has no special meaning to the schema.
	   *
	   * ## Properties
	   *
	   * Each element has a set of properties separated by `,` (commas). Each property can be prefixed
	   * by a special character designating its type:
	   *
	   * - (no prefix): property is a string.
	   * - `*`: property represents an event.
	   * - `!`: property is a boolean.
	   * - `#`: property is a number.
	   * - `%`: property is an object.
	   *
	   * ## Query
	   *
	   * The class creates an internal squas representation which allows to easily answer the query of
	   * if a given property exist on a given element.
	   *
	   * NOTE: We don't yet support querying for types or events.
	   * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,
	   *       see dom_element_schema_registry_spec.ts
	   */
	  // =================================================================================================
	  // =================================================================================================
	  // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
	  // =================================================================================================
	  // =================================================================================================
	  //
	  //                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!
	  //
	  // Newly added properties must be security reviewed and assigned an appropriate SecurityContext in
	  // dom_security_schema.ts. Reach out to mprobst & rjamet for details.
	  //
	  // =================================================================================================
	  var /** @type {?} */ SCHEMA = [
	      '[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop',
	      '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',
	      'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',
	      'media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume',
	      ':svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',
	      ':svg:graphics^:svg:|',
	      ':svg:animation^:svg:|*begin,*end,*repeat',
	      ':svg:geometry^:svg:|',
	      ':svg:componentTransferFunction^:svg:|',
	      ':svg:gradient^:svg:|',
	      ':svg:textContent^:svg:graphics|',
	      ':svg:textPositioning^:svg:textContent|',
	      'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',
	      'area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username',
	      'audio^media|',
	      'br^[HTMLElement]|clear',
	      'base^[HTMLElement]|href,target',
	      'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',
	      'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',
	      'canvas^[HTMLElement]|#height,#width',
	      'content^[HTMLElement]|select',
	      'dl^[HTMLElement]|!compact',
	      'datalist^[HTMLElement]|',
	      'details^[HTMLElement]|!open',
	      'dialog^[HTMLElement]|!open,returnValue',
	      'dir^[HTMLElement]|!compact',
	      'div^[HTMLElement]|align',
	      'embed^[HTMLElement]|align,height,name,src,type,width',
	      'fieldset^[HTMLElement]|!disabled,name',
	      'font^[HTMLElement]|color,face,size',
	      'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',
	      'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',
	      'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',
	      'hr^[HTMLElement]|align,color,!noShade,size,width',
	      'head^[HTMLElement]|',
	      'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',
	      'html^[HTMLElement]|version',
	      'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',
	      'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',
	      'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',
	      'keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name',
	      'li^[HTMLElement]|type,#value',
	      'label^[HTMLElement]|htmlFor',
	      'legend^[HTMLElement]|align',
	      'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type',
	      'map^[HTMLElement]|name',
	      'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',
	      'menu^[HTMLElement]|!compact',
	      'meta^[HTMLElement]|content,httpEquiv,name,scheme',
	      'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',
	      'ins,del^[HTMLElement]|cite,dateTime',
	      'ol^[HTMLElement]|!compact,!reversed,#start,type',
	      'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',
	      'optgroup^[HTMLElement]|!disabled,label',
	      'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',
	      'output^[HTMLElement]|defaultValue,%htmlFor,name,value',
	      'p^[HTMLElement]|align',
	      'param^[HTMLElement]|name,type,value,valueType',
	      'picture^[HTMLElement]|',
	      'pre^[HTMLElement]|#width',
	      'progress^[HTMLElement]|#max,#value',
	      'q,blockquote,cite^[HTMLElement]|',
	      'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',
	      'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',
	      'shadow^[HTMLElement]|',
	      'source^[HTMLElement]|media,sizes,src,srcset,type',
	      'span^[HTMLElement]|',
	      'style^[HTMLElement]|!disabled,media,type',
	      'caption^[HTMLElement]|align',
	      'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',
	      'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',
	      'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',
	      'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',
	      'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',
	      'template^[HTMLElement]|',
	      'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',
	      'title^[HTMLElement]|text',
	      'track^[HTMLElement]|!default,kind,label,src,srclang',
	      'ul^[HTMLElement]|!compact,type',
	      'unknown^[HTMLElement]|',
	      'video^media|#height,poster,#width',
	      ':svg:a^:svg:graphics|',
	      ':svg:animate^:svg:animation|',
	      ':svg:animateMotion^:svg:animation|',
	      ':svg:animateTransform^:svg:animation|',
	      ':svg:circle^:svg:geometry|',
	      ':svg:clipPath^:svg:graphics|',
	      ':svg:cursor^:svg:|',
	      ':svg:defs^:svg:graphics|',
	      ':svg:desc^:svg:|',
	      ':svg:discard^:svg:|',
	      ':svg:ellipse^:svg:geometry|',
	      ':svg:feBlend^:svg:|',
	      ':svg:feColorMatrix^:svg:|',
	      ':svg:feComponentTransfer^:svg:|',
	      ':svg:feComposite^:svg:|',
	      ':svg:feConvolveMatrix^:svg:|',
	      ':svg:feDiffuseLighting^:svg:|',
	      ':svg:feDisplacementMap^:svg:|',
	      ':svg:feDistantLight^:svg:|',
	      ':svg:feDropShadow^:svg:|',
	      ':svg:feFlood^:svg:|',
	      ':svg:feFuncA^:svg:componentTransferFunction|',
	      ':svg:feFuncB^:svg:componentTransferFunction|',
	      ':svg:feFuncG^:svg:componentTransferFunction|',
	      ':svg:feFuncR^:svg:componentTransferFunction|',
	      ':svg:feGaussianBlur^:svg:|',
	      ':svg:feImage^:svg:|',
	      ':svg:feMerge^:svg:|',
	      ':svg:feMergeNode^:svg:|',
	      ':svg:feMorphology^:svg:|',
	      ':svg:feOffset^:svg:|',
	      ':svg:fePointLight^:svg:|',
	      ':svg:feSpecularLighting^:svg:|',
	      ':svg:feSpotLight^:svg:|',
	      ':svg:feTile^:svg:|',
	      ':svg:feTurbulence^:svg:|',
	      ':svg:filter^:svg:|',
	      ':svg:foreignObject^:svg:graphics|',
	      ':svg:g^:svg:graphics|',
	      ':svg:image^:svg:graphics|',
	      ':svg:line^:svg:geometry|',
	      ':svg:linearGradient^:svg:gradient|',
	      ':svg:mpath^:svg:|',
	      ':svg:marker^:svg:|',
	      ':svg:mask^:svg:|',
	      ':svg:metadata^:svg:|',
	      ':svg:path^:svg:geometry|',
	      ':svg:pattern^:svg:|',
	      ':svg:polygon^:svg:geometry|',
	      ':svg:polyline^:svg:geometry|',
	      ':svg:radialGradient^:svg:gradient|',
	      ':svg:rect^:svg:geometry|',
	      ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',
	      ':svg:script^:svg:|type',
	      ':svg:set^:svg:animation|',
	      ':svg:stop^:svg:|',
	      ':svg:style^:svg:|!disabled,media,title,type',
	      ':svg:switch^:svg:graphics|',
	      ':svg:symbol^:svg:|',
	      ':svg:tspan^:svg:textPositioning|',
	      ':svg:text^:svg:textPositioning|',
	      ':svg:textPath^:svg:textContent|',
	      ':svg:title^:svg:|',
	      ':svg:use^:svg:graphics|',
	      ':svg:view^:svg:|#zoomAndPan',
	      'data^[HTMLElement]|value',
	      'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',
	      'summary^[HTMLElement]|',
	      'time^[HTMLElement]|dateTime',
	  ];
	  var /** @type {?} */ _ATTR_TO_PROP = {
	      'class': 'className',
	      'for': 'htmlFor',
	      'formaction': 'formAction',
	      'innerHtml': 'innerHTML',
	      'readonly': 'readOnly',
	      'tabindex': 'tabIndex',
	  };
	  var DomElementSchemaRegistry = (function (_super) {
	      __extends$18(DomElementSchemaRegistry, _super);
	      function DomElementSchemaRegistry() {
	          var _this = this;
	          _super.call(this);
	          this._schema = {};
	          SCHEMA.forEach(function (encodedType) {
	              var type = {};
	              var _a = encodedType.split('|'), strType = _a[0], strProperties = _a[1];
	              var properties = strProperties.split(',');
	              var _b = strType.split('^'), typeNames = _b[0], superName = _b[1];
	              typeNames.split(',').forEach(function (tag) { return _this._schema[tag.toLowerCase()] = type; });
	              var superType = superName && _this._schema[superName.toLowerCase()];
	              if (superType) {
	                  Object.keys(superType).forEach(function (prop) { type[prop] = superType[prop]; });
	              }
	              properties.forEach(function (property) {
	                  if (property.length > 0) {
	                      switch (property[0]) {
	                          case '*':
	                              // We don't yet support events.
	                              // If ever allowing to bind to events, GO THROUGH A SECURITY REVIEW, allowing events
	                              // will
	                              // almost certainly introduce bad XSS vulnerabilities.
	                              // type[property.substring(1)] = EVENT;
	                              break;
	                          case '!':
	                              type[property.substring(1)] = BOOLEAN;
	                              break;
	                          case '#':
	                              type[property.substring(1)] = NUMBER;
	                              break;
	                          case '%':
	                              type[property.substring(1)] = OBJECT;
	                              break;
	                          default:
	                              type[property] = STRING;
	                      }
	                  }
	              });
	          });
	      }
	      /**
	       * @param {?} tagName
	       * @param {?} propName
	       * @param {?} schemaMetas
	       * @return {?}
	       */
	      DomElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) {
	          if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name; })) {
	              return true;
	          }
	          if (tagName.indexOf('-') > -1) {
	              if (tagName === 'ng-container' || tagName === 'ng-content') {
	                  return false;
	              }
	              if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name; })) {
	                  // Can't tell now as we don't know which properties a custom element will get
	                  // once it is instantiated
	                  return true;
	              }
	          }
	          var /** @type {?} */ elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];
	          return !!elementProperties[propName];
	      };
	      /**
	       * @param {?} tagName
	       * @param {?} schemaMetas
	       * @return {?}
	       */
	      DomElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) {
	          if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name; })) {
	              return true;
	          }
	          if (tagName.indexOf('-') > -1) {
	              if (tagName === 'ng-container' || tagName === 'ng-content') {
	                  return true;
	              }
	              if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name; })) {
	                  // Allow any custom elements
	                  return true;
	              }
	          }
	          return !!this._schema[tagName.toLowerCase()];
	      };
	      /**
	       *  securityContext returns the security context for the given property on the given DOM tag.
	        * *
	        * Tag and property name are statically known and cannot change at runtime, i.e. it is not
	        * possible to bind a value into a changing attribute or tag name.
	        * *
	        * The filtering is white list based. All attributes in the schema above are assumed to have the
	        * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known
	        * attack vectors are assigned their appropriate context.
	       * @param {?} tagName
	       * @param {?} propName
	       * @param {?} isAttribute
	       * @return {?}
	       */
	      DomElementSchemaRegistry.prototype.securityContext = function (tagName, propName, isAttribute) {
	          if (isAttribute) {
	              // NB: For security purposes, use the mapped property name, not the attribute name.
	              propName = this.getMappedPropName(propName);
	          }
	          // Make sure comparisons are case insensitive, so that case differences between attribute and
	          // property names do not have a security impact.
	          tagName = tagName.toLowerCase();
	          propName = propName.toLowerCase();
	          var /** @type {?} */ ctx = SECURITY_SCHEMA[tagName + '|' + propName];
	          if (ctx) {
	              return ctx;
	          }
	          ctx = SECURITY_SCHEMA['*|' + propName];
	          return ctx ? ctx : _angular_core.SecurityContext.NONE;
	      };
	      /**
	       * @param {?} propName
	       * @return {?}
	       */
	      DomElementSchemaRegistry.prototype.getMappedPropName = function (propName) { return _ATTR_TO_PROP[propName] || propName; };
	      /**
	       * @return {?}
	       */
	      DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function () { return 'ng-component'; };
	      /**
	       * @param {?} name
	       * @return {?}
	       */
	      DomElementSchemaRegistry.prototype.validateProperty = function (name) {
	          if (name.toLowerCase().startsWith('on')) {
	              var /** @type {?} */ msg = ("Binding to event property '" + name + "' is disallowed for security reasons, ") +
	                  ("please use (" + name.slice(2) + ")=...") +
	                  ("\nIf '" + name + "' is a directive input, make sure the directive is imported by the") +
	                  " current module.";
	              return { error: true, msg: msg };
	          }
	          else {
	              return { error: false };
	          }
	      };
	      /**
	       * @param {?} name
	       * @return {?}
	       */
	      DomElementSchemaRegistry.prototype.validateAttribute = function (name) {
	          if (name.toLowerCase().startsWith('on')) {
	              var /** @type {?} */ msg = ("Binding to event attribute '" + name + "' is disallowed for security reasons, ") +
	                  ("please use (" + name.slice(2) + ")=...");
	              return { error: true, msg: msg };
	          }
	          else {
	              return { error: false };
	          }
	      };
	      /**
	       * @return {?}
	       */
	      DomElementSchemaRegistry.prototype.allKnownElementNames = function () { return Object.keys(this._schema); };
	      /**
	       * @param {?} propName
	       * @return {?}
	       */
	      DomElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) {
	          return dashCaseToCamelCase(propName);
	      };
	      /**
	       * @param {?} camelCaseProp
	       * @param {?} userProvidedProp
	       * @param {?} val
	       * @return {?}
	       */
	      DomElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) {
	          var /** @type {?} */ unit = '';
	          var /** @type {?} */ strVal = val.toString().trim();
	          var /** @type {?} */ errorMsg = null;
	          if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {
	              if (typeof val === 'number') {
	                  unit = 'px';
	              }
	              else {
	                  var /** @type {?} */ valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);
	                  if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
	                      errorMsg = "Please provide a CSS unit value for " + userProvidedProp + ":" + val;
	                  }
	              }
	          }
	          return { error: errorMsg, value: strVal + unit };
	      };
	      DomElementSchemaRegistry.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      DomElementSchemaRegistry.ctorParameters = function () { return []; };
	      return DomElementSchemaRegistry;
	  }(ElementSchemaRegistry));
	  /**
	   * @param {?} prop
	   * @return {?}
	   */
	  function _isPixelDimensionStyle(prop) {
	      switch (prop) {
	          case 'width':
	          case 'height':
	          case 'minWidth':
	          case 'minHeight':
	          case 'maxWidth':
	          case 'maxHeight':
	          case 'left':
	          case 'top':
	          case 'bottom':
	          case 'right':
	          case 'fontSize':
	          case 'outlineWidth':
	          case 'outlineOffset':
	          case 'paddingTop':
	          case 'paddingLeft':
	          case 'paddingBottom':
	          case 'paddingRight':
	          case 'marginTop':
	          case 'marginLeft':
	          case 'marginBottom':
	          case 'marginRight':
	          case 'borderRadius':
	          case 'borderWidth':
	          case 'borderTopWidth':
	          case 'borderLeftWidth':
	          case 'borderRightWidth':
	          case 'borderBottomWidth':
	          case 'textIndent':
	              return true;
	          default:
	              return false;
	      }
	  }
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  /**
	   * This file is a port of shadowCSS from webcomponents.js to TypeScript.
	   *
	   * Please make sure to keep to edits in sync with the source file.
	   *
	   * Source:
	   * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js
	   *
	   * The original file level comment is reproduced below
	   */
	  /*
	    This is a limited shim for ShadowDOM css styling.
	    https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles
	
	    The intention here is to support only the styling features which can be
	    relatively simply implemented. The goal is to allow users to avoid the
	    most obvious pitfalls and do so without compromising performance significantly.
	    For ShadowDOM styling that's not covered here, a set of best practices
	    can be provided that should allow users to accomplish more complex styling.
	
	    The following is a list of specific ShadowDOM styling features and a brief
	    discussion of the approach used to shim.
	
	    Shimmed features:
	
	    * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host
	    element using the :host rule. To shim this feature, the :host styles are
	    reformatted and prefixed with a given scope name and promoted to a
	    document level stylesheet.
	    For example, given a scope name of .foo, a rule like this:
	
	      :host {
	          background: red;
	        }
	      }
	
	    becomes:
	
	      .foo {
	        background: red;
	      }
	
	    * encapsulation: Styles defined within ShadowDOM, apply only to
	    dom inside the ShadowDOM. Polymer uses one of two techniques to implement
	    this feature.
	
	    By default, rules are prefixed with the host element tag name
	    as a descendant selector. This ensures styling does not leak out of the 'top'
	    of the element's ShadowDOM. For example,
	
	    div {
	        font-weight: bold;
	      }
	
	    becomes:
	
	    x-foo div {
	        font-weight: bold;
	      }
	
	    becomes:
	
	
	    Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then
	    selectors are scoped by adding an attribute selector suffix to each
	    simple selector that contains the host element tag name. Each element
	    in the element's ShadowDOM template is also given the scope attribute.
	    Thus, these rules match only elements that have the scope attribute.
	    For example, given a scope name of x-foo, a rule like this:
	
	      div {
	        font-weight: bold;
	      }
	
	    becomes:
	
	      div[x-foo] {
	        font-weight: bold;
	      }
	
	    Note that elements that are dynamically added to a scope must have the scope
	    selector added to them manually.
	
	    * upper/lower bound encapsulation: Styles which are defined outside a
	    shadowRoot should not cross the ShadowDOM boundary and should not apply
	    inside a shadowRoot.
	
	    This styling behavior is not emulated. Some possible ways to do this that
	    were rejected due to complexity and/or performance concerns include: (1) reset
	    every possible property for every possible selector for a given scope name;
	    (2) re-implement css in javascript.
	
	    As an alternative, users should make sure to use selectors
	    specific to the scope in which they are working.
	
	    * ::distributed: This behavior is not emulated. It's often not necessary
	    to style the contents of a specific insertion point and instead, descendants
	    of the host element can be styled selectively. Users can also create an
	    extra node around an insertion point and style that node's contents
	    via descendent selectors. For example, with a shadowRoot like this:
	
	      <style>
	        ::content(div) {
	          background: red;
	        }
	      </style>
	      <content></content>
	
	    could become:
	
	      <style>
	        / *@polyfill .content-container div * /
	        ::content(div) {
	          background: red;
	        }
	      </style>
	      <div class="content-container">
	        <content></content>
	      </div>
	
	    Note the use of @polyfill in the comment above a ShadowDOM specific style
	    declaration. This is a directive to the styling shim to use the selector
	    in comments in lieu of the next selector when running under polyfill.
	  */
	  var ShadowCss = (function () {
	      function ShadowCss() {
	          this.strictStyling = true;
	      }
	      /**
	       * @param {?} cssText
	       * @param {?} selector
	       * @param {?=} hostSelector
	       * @return {?}
	       */
	      ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
	          if (hostSelector === void 0) { hostSelector = ''; }
	          var /** @type {?} */ sourceMappingUrl = extractSourceMappingUrl(cssText);
	          cssText = stripComments(cssText);
	          cssText = this._insertDirectives(cssText);
	          return this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;
	      };
	      /**
	       * @param {?} cssText
	       * @return {?}
	       */
	      ShadowCss.prototype._insertDirectives = function (cssText) {
	          cssText = this._insertPolyfillDirectivesInCssText(cssText);
	          return this._insertPolyfillRulesInCssText(cssText);
	      };
	      /**
	       * @param {?} cssText
	       * @return {?}
	       */
	      ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
	          // Difference with webcomponents.js: does not handle comments
	          return cssText.replace(_cssContentNextSelectorRe, function () {
	              var m = [];
	              for (var _i = 0; _i < arguments.length; _i++) {
	                  m[_i - 0] = arguments[_i];
	              }
	              return m[2] + '{';
	          });
	      };
	      /**
	       * @param {?} cssText
	       * @return {?}
	       */
	      ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
	          // Difference with webcomponents.js: does not handle comments
	          return cssText.replace(_cssContentRuleRe, function () {
	              var m = [];
	              for (var _i = 0; _i < arguments.length; _i++) {
	                  m[_i - 0] = arguments[_i];
	              }
	              var /** @type {?} */ rule = m[0].replace(m[1], '').replace(m[2], '');
	              return m[4] + rule;
	          });
	      };
	      /**
	       * @param {?} cssText
	       * @param {?} scopeSelector
	       * @param {?} hostSelector
	       * @return {?}
	       */
	      ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
	          var /** @type {?} */ unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
	          // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively
	          cssText = this._insertPolyfillHostInCssText(cssText);
	          cssText = this._convertColonHost(cssText);
	          cssText = this._convertColonHostContext(cssText);
	          cssText = this._convertShadowDOMSelectors(cssText);
	          if (scopeSelector) {
	              cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
	          }
	          cssText = cssText + '\n' + unscopedRules;
	          return cssText.trim();
	      };
	      /**
	       * @param {?} cssText
	       * @return {?}
	       */
	      ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
	          // Difference with webcomponents.js: does not handle comments
	          var /** @type {?} */ r = '';
	          var /** @type {?} */ m;
	          _cssContentUnscopedRuleRe.lastIndex = 0;
	          while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
	              var /** @type {?} */ rule = m[0].replace(m[2], '').replace(m[1], m[4]);
	              r += rule + '\n\n';
	          }
	          return r;
	      };
	      /**
	       * @param {?} cssText
	       * @return {?}
	       */
	      ShadowCss.prototype._convertColonHost = function (cssText) {
	          return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
	      };
	      /**
	       * @param {?} cssText
	       * @return {?}
	       */
	      ShadowCss.prototype._convertColonHostContext = function (cssText) {
	          return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
	      };
	      /**
	       * @param {?} cssText
	       * @param {?} regExp
	       * @param {?} partReplacer
	       * @return {?}
	       */
	      ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {
	          // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule
	          return cssText.replace(regExp, function () {
	              var m = [];
	              for (var _i = 0; _i < arguments.length; _i++) {
	                  m[_i - 0] = arguments[_i];
	              }
	              if (m[2]) {
	                  var /** @type {?} */ parts = m[2].split(',');
	                  var /** @type {?} */ r = [];
	                  for (var /** @type {?} */ i = 0; i < parts.length; i++) {
	                      var /** @type {?} */ p = parts[i].trim();
	                      if (!p)
	                          break;
	                      r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
	                  }
	                  return r.join(',');
	              }
	              else {
	                  return _polyfillHostNoCombinator + m[3];
	              }
	          });
	      };
	      /**
	       * @param {?} host
	       * @param {?} part
	       * @param {?} suffix
	       * @return {?}
	       */
	      ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {
	          if (part.indexOf(_polyfillHost) > -1) {
	              return this._colonHostPartReplacer(host, part, suffix);
	          }
	          else {
	              return host + part + suffix + ', ' + part + ' ' + host + suffix;
	          }
	      };
	      /**
	       * @param {?} host
	       * @param {?} part
	       * @param {?} suffix
	       * @return {?}
	       */
	      ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {
	          return host + part.replace(_polyfillHost, '') + suffix;
	      };
	      /**
	       * @param {?} cssText
	       * @return {?}
	       */
	      ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
	          return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);
	      };
	      /**
	       * @param {?} cssText
	       * @param {?} scopeSelector
	       * @param {?} hostSelector
	       * @return {?}
	       */
	      ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) {
	          var _this = this;
	          return processRules(cssText, function (rule) {
	              var /** @type {?} */ selector = rule.selector;
	              var /** @type {?} */ content = rule.content;
	              if (rule.selector[0] != '@') {
	                  selector =
	                      _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
	              }
	              else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||
	                  rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {
	                  content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
	              }
	              return new CssRule(selector, content);
	          });
	      };
	      /**
	       * @param {?} selector
	       * @param {?} scopeSelector
	       * @param {?} hostSelector
	       * @param {?} strict
	       * @return {?}
	       */
	      ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {
	          var _this = this;
	          return selector.split(',')
	              .map(function (part) { return part.trim().split(_shadowDeepSelectors); })
	              .map(function (deepParts) {
	              var shallowPart = deepParts[0], otherParts = deepParts.slice(1);
	              var /** @type {?} */ applyScope = function (shallowPart) {
	                  if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {
	                      return strict ?
	                          _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) :
	                          _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
	                  }
	                  else {
	                      return shallowPart;
	                  }
	              };
	              return [applyScope(shallowPart)].concat(otherParts).join(' ');
	          })
	              .join(', ');
	      };
	      /**
	       * @param {?} selector
	       * @param {?} scopeSelector
	       * @return {?}
	       */
	      ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
	          var /** @type {?} */ re = this._makeScopeMatcher(scopeSelector);
	          return !re.test(selector);
	      };
	      /**
	       * @param {?} scopeSelector
	       * @return {?}
	       */
	      ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
	          var /** @type {?} */ lre = /\[/g;
	          var /** @type {?} */ rre = /\]/g;
	          scopeSelector = scopeSelector.replace(lre, '\\[').replace(rre, '\\]');
	          return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
	      };
	      /**
	       * @param {?} selector
	       * @param {?} scopeSelector
	       * @param {?} hostSelector
	       * @return {?}
	       */
	      ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
	          // Difference from webcomponents.js: scopeSelector could not be an array
	          return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
	      };
	      /**
	       * @param {?} selector
	       * @param {?} scopeSelector
	       * @param {?} hostSelector
	       * @return {?}
	       */
	      ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
	          // In Android browser, the lastIndex is not reset when the regex is used in String.replace()
	          _polyfillHostRe.lastIndex = 0;
	          if (_polyfillHostRe.test(selector)) {
	              var /** @type {?} */ replaceBy_1 = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
	              return selector
	                  .replace(_polyfillHostNoCombinatorRe, function (hnc, selector) {
	                  return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {
	                      return before + replaceBy_1 + colon + after;
	                  });
	              })
	                  .replace(_polyfillHostRe, replaceBy_1 + ' ');
	          }
	          return scopeSelector + ' ' + selector;
	      };
	      /**
	       * @param {?} selector
	       * @param {?} scopeSelector
	       * @param {?} hostSelector
	       * @return {?}
	       */
	      ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {
	          var _this = this;
	          var /** @type {?} */ isRe = /\[is=([^\]]*)\]/g;
	          scopeSelector = scopeSelector.replace(isRe, function (_) {
	              var parts = [];
	              for (var _i = 1; _i < arguments.length; _i++) {
	                  parts[_i - 1] = arguments[_i];
	              }
	              return parts[0];
	          });
	          var /** @type {?} */ attrName = '[' + scopeSelector + ']';
	          var /** @type {?} */ _scopeSelectorPart = function (p) {
	              var /** @type {?} */ scopedP = p.trim();
	              if (!scopedP) {
	                  return '';
	              }
	              if (p.indexOf(_polyfillHostNoCombinator) > -1) {
	                  scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
	              }
	              else {
	                  // remove :host since it should be unnecessary
	                  var /** @type {?} */ t = p.replace(_polyfillHostRe, '');
	                  if (t.length > 0) {
	                      var /** @type {?} */ matches = t.match(/([^:]*)(:*)(.*)/);
	                      if (matches) {
	                          scopedP = matches[1] + attrName + matches[2] + matches[3];
	                      }
	                  }
	              }
	              return scopedP;
	          };
	          var /** @type {?} */ safeContent = new SafeSelector(selector);
	          selector = safeContent.content();
	          var /** @type {?} */ scopedSelector = '';
	          var /** @type {?} */ startIndex = 0;
	          var /** @type {?} */ res;
	          var /** @type {?} */ sep = /( |>|\+|~(?!=))\s*/g;
	          var /** @type {?} */ scopeAfter = selector.indexOf(_polyfillHostNoCombinator);
	          while ((res = sep.exec(selector)) !== null) {
	              var /** @type {?} */ separator = res[1];
	              var /** @type {?} */ part = selector.slice(startIndex, res.index).trim();
	              // if a selector appears before :host-context it should not be shimmed as it
	              // matches on ancestor elements and not on elements in the host's shadow
	              var /** @type {?} */ scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part;
	              scopedSelector += scopedPart + " " + separator + " ";
	              startIndex = sep.lastIndex;
	          }
	          scopedSelector += _scopeSelectorPart(selector.substring(startIndex));
	          // replace the placeholders with their original values
	          return safeContent.restore(scopedSelector);
	      };
	      /**
	       * @param {?} selector
	       * @return {?}
	       */
	      ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
	          return selector.replace(_colonHostContextRe, _polyfillHostContext)
	              .replace(_colonHostRe, _polyfillHost);
	      };
	      return ShadowCss;
	  }());
	  var SafeSelector = (function () {
	      /**
	       * @param {?} selector
	       */
	      function SafeSelector(selector) {
	          var _this = this;
	          this.placeholders = [];
	          this.index = 0;
	          // Replaces attribute selectors with placeholders.
	          // The WS in [attr="va lue"] would otherwise be interpreted as a selector separator.
	          selector = selector.replace(/(\[[^\]]*\])/g, function (_, keep) {
	              var replaceBy = "__ph-" + _this.index + "__";
	              _this.placeholders.push(keep);
	              _this.index++;
	              return replaceBy;
	          });
	          // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.
	          // WS and "+" would otherwise be interpreted as selector separators.
	          this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, function (_, pseudo, exp) {
	              var replaceBy = "__ph-" + _this.index + "__";
	              _this.placeholders.push(exp);
	              _this.index++;
	              return pseudo + replaceBy;
	          });
	      }
	      ;
	      /**
	       * @param {?} content
	       * @return {?}
	       */
	      SafeSelector.prototype.restore = function (content) {
	          var _this = this;
	          return content.replace(/__ph-(\d+)__/g, function (ph, index) { return _this.placeholders[+index]; });
	      };
	      /**
	       * @return {?}
	       */
	      SafeSelector.prototype.content = function () { return this._content; };
	      return SafeSelector;
	  }());
	  var /** @type {?} */ _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
	  var /** @type {?} */ _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
	  var /** @type {?} */ _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
	  var /** @type {?} */ _polyfillHost = '-shadowcsshost';
	  // note: :host-context pre-processed to -shadowcsshostcontext.
	  var /** @type {?} */ _polyfillHostContext = '-shadowcsscontext';
	  var /** @type {?} */ _parenSuffix = ')(?:\\((' +
	      '(?:\\([^)(]*\\)|[^)(]*)+?' +
	      ')\\))?([^,{]*)';
	  var /** @type {?} */ _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');
	  var /** @type {?} */ _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');
	  var /** @type {?} */ _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
	  var /** @type {?} */ _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
	  var /** @type {?} */ _shadowDOMSelectorsRe = [
	      /::shadow/g,
	      /::content/g,
	      // Deprecated selectors
	      /\/shadow-deep\//g,
	      /\/shadow\//g,
	  ];
	  var /** @type {?} */ _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
	  var /** @type {?} */ _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
	  var /** @type {?} */ _polyfillHostRe = /-shadowcsshost/gim;
	  var /** @type {?} */ _colonHostRe = /:host/gim;
	  var /** @type {?} */ _colonHostContextRe = /:host-context/gim;
	  var /** @type {?} */ _commentRe = /\/\*\s*[\s\S]*?\*\//g;
	  /**
	   * @param {?} input
	   * @return {?}
	   */
	  function stripComments(input) {
	      return input.replace(_commentRe, '');
	  }
	  // all comments except inline source mapping
	  var /** @type {?} */ _sourceMappingUrlRe = /\/\*\s*#\s*sourceMappingURL=[\s\S]+?\*\//;
	  /**
	   * @param {?} input
	   * @return {?}
	   */
	  function extractSourceMappingUrl(input) {
	      var /** @type {?} */ matcher = input.match(_sourceMappingUrlRe);
	      return matcher ? matcher[0] : '';
	  }
	  var /** @type {?} */ _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
	  var /** @type {?} */ _curlyRe = /([{}])/g;
	  var /** @type {?} */ OPEN_CURLY = '{';
	  var /** @type {?} */ CLOSE_CURLY = '}';
	  var /** @type {?} */ BLOCK_PLACEHOLDER = '%BLOCK%';
	  var CssRule = (function () {
	      /**
	       * @param {?} selector
	       * @param {?} content
	       */
	      function CssRule(selector, content) {
	          this.selector = selector;
	          this.content = content;
	      }
	      return CssRule;
	  }());
	  /**
	   * @param {?} input
	   * @param {?} ruleCallback
	   * @return {?}
	   */
	  function processRules(input, ruleCallback) {
	      var /** @type {?} */ inputWithEscapedBlocks = escapeBlocks(input);
	      var /** @type {?} */ nextBlockIndex = 0;
	      return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {
	          var m = [];
	          for (var _i = 0; _i < arguments.length; _i++) {
	              m[_i - 0] = arguments[_i];
	          }
	          var /** @type {?} */ selector = m[2];
	          var /** @type {?} */ content = '';
	          var /** @type {?} */ suffix = m[4];
	          var /** @type {?} */ contentPrefix = '';
	          if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {
	              content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
	              suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
	              contentPrefix = '{';
	          }
	          var /** @type {?} */ rule = ruleCallback(new CssRule(selector, content));
	          return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
	      });
	  }
	  var StringWithEscapedBlocks = (function () {
	      /**
	       * @param {?} escapedString
	       * @param {?} blocks
	       */
	      function StringWithEscapedBlocks(escapedString, blocks) {
	          this.escapedString = escapedString;
	          this.blocks = blocks;
	      }
	      return StringWithEscapedBlocks;
	  }());
	  /**
	   * @param {?} input
	   * @return {?}
	   */
	  function escapeBlocks(input) {
	      var /** @type {?} */ inputParts = input.split(_curlyRe);
	      var /** @type {?} */ resultParts = [];
	      var /** @type {?} */ escapedBlocks = [];
	      var /** @type {?} */ bracketCount = 0;
	      var /** @type {?} */ currentBlockParts = [];
	      for (var /** @type {?} */ partIndex = 0; partIndex < inputParts.length; partIndex++) {
	          var /** @type {?} */ part = inputParts[partIndex];
	          if (part == CLOSE_CURLY) {
	              bracketCount--;
	          }
	          if (bracketCount > 0) {
	              currentBlockParts.push(part);
	          }
	          else {
	              if (currentBlockParts.length > 0) {
	                  escapedBlocks.push(currentBlockParts.join(''));
	                  resultParts.push(BLOCK_PLACEHOLDER);
	                  currentBlockParts = [];
	              }
	              resultParts.push(part);
	          }
	          if (part == OPEN_CURLY) {
	              bracketCount++;
	          }
	      }
	      if (currentBlockParts.length > 0) {
	          escapedBlocks.push(currentBlockParts.join(''));
	          resultParts.push(BLOCK_PLACEHOLDER);
	      }
	      return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
	  }
	
	  var /** @type {?} */ COMPONENT_VARIABLE = '%COMP%';
	  var /** @type {?} */ HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
	  var /** @type {?} */ CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
	  var StylesCompileDependency = (function () {
	      /**
	       * @param {?} name
	       * @param {?} moduleUrl
	       * @param {?} isShimmed
	       * @param {?} valuePlaceholder
	       */
	      function StylesCompileDependency(name, moduleUrl, isShimmed, valuePlaceholder) {
	          this.name = name;
	          this.moduleUrl = moduleUrl;
	          this.isShimmed = isShimmed;
	          this.valuePlaceholder = valuePlaceholder;
	      }
	      return StylesCompileDependency;
	  }());
	  var StylesCompileResult = (function () {
	      /**
	       * @param {?} componentStylesheet
	       * @param {?} externalStylesheets
	       */
	      function StylesCompileResult(componentStylesheet, externalStylesheets) {
	          this.componentStylesheet = componentStylesheet;
	          this.externalStylesheets = externalStylesheets;
	      }
	      return StylesCompileResult;
	  }());
	  var CompiledStylesheet = (function () {
	      /**
	       * @param {?} statements
	       * @param {?} stylesVar
	       * @param {?} dependencies
	       * @param {?} isShimmed
	       * @param {?} meta
	       */
	      function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {
	          this.statements = statements;
	          this.stylesVar = stylesVar;
	          this.dependencies = dependencies;
	          this.isShimmed = isShimmed;
	          this.meta = meta;
	      }
	      return CompiledStylesheet;
	  }());
	  var StyleCompiler = (function () {
	      /**
	       * @param {?} _urlResolver
	       */
	      function StyleCompiler(_urlResolver) {
	          this._urlResolver = _urlResolver;
	          this._shadowCss = new ShadowCss();
	      }
	      /**
	       * @param {?} comp
	       * @return {?}
	       */
	      StyleCompiler.prototype.compileComponent = function (comp) {
	          var _this = this;
	          var /** @type {?} */ externalStylesheets = [];
	          var /** @type {?} */ componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({
	              styles: comp.template.styles,
	              styleUrls: comp.template.styleUrls,
	              moduleUrl: identifierModuleUrl(comp.type)
	          }), true);
	          comp.template.externalStylesheets.forEach(function (stylesheetMeta) {
	              var /** @type {?} */ compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, false);
	              externalStylesheets.push(compiledStylesheet);
	          });
	          return new StylesCompileResult(componentStylesheet, externalStylesheets);
	      };
	      /**
	       * @param {?} comp
	       * @param {?} stylesheet
	       * @param {?} isComponentStylesheet
	       * @return {?}
	       */
	      StyleCompiler.prototype._compileStyles = function (comp, stylesheet, isComponentStylesheet) {
	          var _this = this;
	          var /** @type {?} */ shim = comp.template.encapsulation === _angular_core.ViewEncapsulation.Emulated;
	          var /** @type {?} */ styleExpressions = stylesheet.styles.map(function (plainStyle) { return literal(_this._shimIfNeeded(plainStyle, shim)); });
	          var /** @type {?} */ dependencies = [];
	          for (var /** @type {?} */ i = 0; i < stylesheet.styleUrls.length; i++) {
	              var /** @type {?} */ identifier = { reference: null };
	              dependencies.push(new StylesCompileDependency(getStylesVarName(null), stylesheet.styleUrls[i], shim, identifier));
	              styleExpressions.push(new ExternalExpr(identifier));
	          }
	          // styles variable contains plain strings and arrays of other styles arrays (recursive),
	          // so we set its type to dynamic.
	          var /** @type {?} */ stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);
	          var /** @type {?} */ stmt = variable(stylesVar)
	              .set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])))
	              .toDeclStmt(null, [StmtModifier.Final]);
	          return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);
	      };
	      /**
	       * @param {?} style
	       * @param {?} shim
	       * @return {?}
	       */
	      StyleCompiler.prototype._shimIfNeeded = function (style, shim) {
	          return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
	      };
	      StyleCompiler.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      StyleCompiler.ctorParameters = function () { return [
	          { type: UrlResolver, },
	      ]; };
	      return StyleCompiler;
	  }());
	  /**
	   * @param {?} component
	   * @return {?}
	   */
	  function getStylesVarName(component) {
	      var /** @type {?} */ result = "styles";
	      if (component) {
	          result += "_" + identifierName(component.type);
	      }
	      return result;
	  }
	
	  var _DebugState = (function () {
	      /**
	       * @param {?} nodeIndex
	       * @param {?} sourceAst
	       */
	      function _DebugState(nodeIndex, sourceAst) {
	          this.nodeIndex = nodeIndex;
	          this.sourceAst = sourceAst;
	      }
	      return _DebugState;
	  }());
	  var /** @type {?} */ NULL_DEBUG_STATE = new _DebugState(null, null);
	  var CompileMethod = (function () {
	      /**
	       * @param {?} _view
	       */
	      function CompileMethod(_view) {
	          this._view = _view;
	          this._newState = NULL_DEBUG_STATE;
	          this._currState = NULL_DEBUG_STATE;
	          this._bodyStatements = [];
	          this._debugEnabled = this._view.genConfig.genDebugInfo;
	      }
	      /**
	       * @return {?}
	       */
	      CompileMethod.prototype._updateDebugContextIfNeeded = function () {
	          if (this._newState.nodeIndex !== this._currState.nodeIndex ||
	              this._newState.sourceAst !== this._currState.sourceAst) {
	              var /** @type {?} */ expr = this._updateDebugContext(this._newState);
	              if (isPresent(expr)) {
	                  this._bodyStatements.push(expr.toStmt());
	              }
	          }
	      };
	      /**
	       * @param {?} newState
	       * @return {?}
	       */
	      CompileMethod.prototype._updateDebugContext = function (newState) {
	          this._currState = this._newState = newState;
	          if (this._debugEnabled) {
	              var /** @type {?} */ sourceLocation = isPresent(newState.sourceAst) ? newState.sourceAst.sourceSpan.start : null;
	              return THIS_EXPR.callMethod('debug', [
	                  literal(newState.nodeIndex),
	                  isPresent(sourceLocation) ? literal(sourceLocation.line) : NULL_EXPR,
	                  isPresent(sourceLocation) ? literal(sourceLocation.col) : NULL_EXPR
	              ]);
	          }
	          else {
	              return null;
	          }
	      };
	      /**
	       * @param {?} nodeIndex
	       * @param {?} templateAst
	       * @return {?}
	       */
	      CompileMethod.prototype.resetDebugInfoExpr = function (nodeIndex, templateAst) {
	          var /** @type {?} */ res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));
	          return res || NULL_EXPR;
	      };
	      /**
	       * @param {?} nodeIndex
	       * @param {?} templateAst
	       * @return {?}
	       */
	      CompileMethod.prototype.resetDebugInfo = function (nodeIndex, templateAst) {
	          this._newState = new _DebugState(nodeIndex, templateAst);
	      };
	      /**
	       * @param {...?} stmts
	       * @return {?}
	       */
	      CompileMethod.prototype.push = function () {
	          var stmts = [];
	          for (var _i = 0; _i < arguments.length; _i++) {
	              stmts[_i - 0] = arguments[_i];
	          }
	          this.addStmts(stmts);
	      };
	      /**
	       * @param {?} stmt
	       * @return {?}
	       */
	      CompileMethod.prototype.addStmt = function (stmt) {
	          this._updateDebugContextIfNeeded();
	          this._bodyStatements.push(stmt);
	      };
	      /**
	       * @param {?} stmts
	       * @return {?}
	       */
	      CompileMethod.prototype.addStmts = function (stmts) {
	          this._updateDebugContextIfNeeded();
	          (_a = this._bodyStatements).push.apply(_a, stmts);
	          var _a;
	      };
	      /**
	       * @return {?}
	       */
	      CompileMethod.prototype.finish = function () { return this._bodyStatements; };
	      /**
	       * @return {?}
	       */
	      CompileMethod.prototype.isEmpty = function () { return this._bodyStatements.length === 0; };
	      return CompileMethod;
	  }());
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$20 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  /**
	   * @param {?} property
	   * @param {?} callingView
	   * @param {?} definedView
	   * @return {?}
	   */
	  function getPropertyInView(property, callingView, definedView) {
	      if (callingView === definedView) {
	          return property;
	      }
	      else {
	          var /** @type {?} */ viewProp = THIS_EXPR;
	          var /** @type {?} */ currView = callingView;
	          while (currView !== definedView && isPresent(currView.declarationElement.view)) {
	              currView = currView.declarationElement.view;
	              viewProp = viewProp.prop('parentView');
	          }
	          if (currView !== definedView) {
	              throw new Error("Internal error: Could not calculate a property in a parent view: " + property);
	          }
	          return property.visitExpression(new _ReplaceViewTransformer(viewProp, definedView), null);
	      }
	  }
	  var _ReplaceViewTransformer = (function (_super) {
	      __extends$20(_ReplaceViewTransformer, _super);
	      /**
	       * @param {?} _viewExpr
	       * @param {?} _view
	       */
	      function _ReplaceViewTransformer(_viewExpr, _view) {
	          _super.call(this);
	          this._viewExpr = _viewExpr;
	          this._view = _view;
	      }
	      /**
	       * @param {?} expr
	       * @return {?}
	       */
	      _ReplaceViewTransformer.prototype._isThis = function (expr) {
	          return expr instanceof ReadVarExpr && expr.builtin === BuiltinVar.This;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      _ReplaceViewTransformer.prototype.visitReadVarExpr = function (ast, context) {
	          return this._isThis(ast) ? this._viewExpr : ast;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      _ReplaceViewTransformer.prototype.visitReadPropExpr = function (ast, context) {
	          if (this._isThis(ast.receiver)) {
	              // Note: Don't cast for members of the AppView base class...
	              if (this._view.fields.some(function (field) { return field.name == ast.name; }) ||
	                  this._view.getters.some(function (field) { return field.name == ast.name; })) {
	                  return this._viewExpr.cast(this._view.classType).prop(ast.name);
	              }
	          }
	          return _super.prototype.visitReadPropExpr.call(this, ast, context);
	      };
	      return _ReplaceViewTransformer;
	  }(ExpressionTransformer));
	  /**
	   * @param {?} view
	   * @param {?} token
	   * @param {?} optional
	   * @return {?}
	   */
	  function injectFromViewParentInjector(view, token, optional) {
	      var /** @type {?} */ viewExpr;
	      if (view.viewType === ViewType.HOST) {
	          viewExpr = THIS_EXPR;
	      }
	      else {
	          viewExpr = THIS_EXPR.prop('parentView');
	      }
	      var /** @type {?} */ args = [createDiTokenExpression(token), THIS_EXPR.prop('parentIndex')];
	      if (optional) {
	          args.push(NULL_EXPR);
	      }
	      return viewExpr.callMethod('injectorGet', args);
	  }
	  /**
	   * @param {?} component
	   * @param {?} embeddedTemplateIndex
	   * @return {?}
	   */
	  function getViewClassName(component, embeddedTemplateIndex) {
	      return "View_" + identifierName(component.type) + embeddedTemplateIndex;
	  }
	  /**
	   * @param {?} elementIndex
	   * @return {?}
	   */
	  function getHandleEventMethodName(elementIndex) {
	      return "handleEvent_" + elementIndex;
	  }
	
	  var ViewQueryValues = (function () {
	      /**
	       * @param {?} view
	       * @param {?} values
	       */
	      function ViewQueryValues(view, values) {
	          this.view = view;
	          this.values = values;
	      }
	      return ViewQueryValues;
	  }());
	  var CompileQuery = (function () {
	      /**
	       * @param {?} meta
	       * @param {?} queryList
	       * @param {?} ownerDirectiveExpression
	       * @param {?} view
	       */
	      function CompileQuery(meta, queryList, ownerDirectiveExpression, view) {
	          this.meta = meta;
	          this.queryList = queryList;
	          this.ownerDirectiveExpression = ownerDirectiveExpression;
	          this.view = view;
	          this._values = new ViewQueryValues(view, []);
	      }
	      /**
	       * @param {?} value
	       * @param {?} view
	       * @return {?}
	       */
	      CompileQuery.prototype.addValue = function (value, view) {
	          var /** @type {?} */ currentView = view;
	          var /** @type {?} */ elPath = [];
	          while (isPresent(currentView) && currentView !== this.view) {
	              var /** @type {?} */ parentEl = currentView.declarationElement;
	              elPath.unshift(parentEl);
	              currentView = parentEl.view;
	          }
	          var /** @type {?} */ queryListForDirtyExpr = getPropertyInView(this.queryList, view, this.view);
	          var /** @type {?} */ viewValues = this._values;
	          elPath.forEach(function (el) {
	              var /** @type {?} */ last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null;
	              if (last instanceof ViewQueryValues && last.view === el.embeddedView) {
	                  viewValues = last;
	              }
	              else {
	                  var /** @type {?} */ newViewValues = new ViewQueryValues(el.embeddedView, []);
	                  viewValues.values.push(newViewValues);
	                  viewValues = newViewValues;
	              }
	          });
	          viewValues.values.push(value);
	          if (elPath.length > 0) {
	              view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod('setDirty', []).toStmt());
	          }
	      };
	      /**
	       * @return {?}
	       */
	      CompileQuery.prototype._isStatic = function () {
	          return !this._values.values.some(function (value) { return value instanceof ViewQueryValues; });
	      };
	      /**
	       * @param {?} targetStaticMethod
	       * @param {?} targetDynamicMethod
	       * @return {?}
	       */
	      CompileQuery.prototype.afterChildren = function (targetStaticMethod, targetDynamicMethod) {
	          var /** @type {?} */ values = createQueryValues(this._values);
	          var /** @type {?} */ updateStmts = [this.queryList.callMethod('reset', [literalArr(values)]).toStmt()];
	          if (isPresent(this.ownerDirectiveExpression)) {
	              var /** @type {?} */ valueExpr = this.meta.first ? this.queryList.prop('first') : this.queryList;
	              updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());
	          }
	          if (!this.meta.first) {
	              updateStmts.push(this.queryList.callMethod('notifyOnChanges', []).toStmt());
	          }
	          if (this.meta.first && this._isStatic()) {
	              // for queries that don't change and the user asked for a single element,
	              // set it immediately. That is e.g. needed for querying for ViewContainerRefs, ...
	              // we don't do this for QueryLists for now as this would break the timing when
	              // we call QueryList listeners...
	              targetStaticMethod.addStmts(updateStmts);
	          }
	          else {
	              targetDynamicMethod.addStmt(new IfStmt(this.queryList.prop('dirty'), updateStmts));
	          }
	      };
	      return CompileQuery;
	  }());
	  /**
	   * @param {?} viewValues
	   * @return {?}
	   */
	  function createQueryValues(viewValues) {
	      return ListWrapper.flatten(viewValues.values.map(function (entry) {
	          if (entry instanceof ViewQueryValues) {
	              return mapNestedViews(entry.view.declarationElement.viewContainer, entry.view, createQueryValues(entry));
	          }
	          else {
	              return (entry);
	          }
	      }));
	  }
	  /**
	   * @param {?} viewContainer
	   * @param {?} view
	   * @param {?} expressions
	   * @return {?}
	   */
	  function mapNestedViews(viewContainer, view, expressions) {
	      var /** @type {?} */ adjustedExpressions = expressions.map(function (expr) { return replaceVarInExpression(THIS_EXPR.name, variable('nestedView'), expr); });
	      return viewContainer.callMethod('mapNestedViews', [
	          variable(view.className),
	          fn([new FnParam('nestedView', view.classType)], [new ReturnStatement(literalArr(adjustedExpressions))], DYNAMIC_TYPE)
	      ]);
	  }
	  /**
	   * @param {?} query
	   * @param {?} directiveInstance
	   * @param {?} propertyName
	   * @param {?} compileView
	   * @return {?}
	   */
	  function createQueryList(query, directiveInstance, propertyName, compileView) {
	      compileView.fields.push(new ClassField(propertyName, importType(createIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE])));
	      var /** @type {?} */ expr = THIS_EXPR.prop(propertyName);
	      compileView.createMethod.addStmt(THIS_EXPR.prop(propertyName)
	          .set(importExpr(createIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE]).instantiate([]))
	          .toStmt());
	      return expr;
	  }
	  /**
	   * @param {?} map
	   * @param {?} query
	   * @return {?}
	   */
	  function addQueryToTokenMap(map, query) {
	      query.meta.selectors.forEach(function (selector) {
	          var /** @type {?} */ entry = map.get(tokenReference(selector));
	          if (!entry) {
	              entry = [];
	              map.set(tokenReference(selector), entry);
	          }
	          entry.push(query);
	      });
	  }
	
	  var ViewTypeEnum = (function () {
	      function ViewTypeEnum() {
	      }
	      /**
	       * @param {?} value
	       * @return {?}
	       */
	      ViewTypeEnum.fromValue = function (value) {
	          return createEnumExpression(Identifiers.ViewType, value);
	      };
	      return ViewTypeEnum;
	  }());
	  var ViewEncapsulationEnum = (function () {
	      function ViewEncapsulationEnum() {
	      }
	      /**
	       * @param {?} value
	       * @return {?}
	       */
	      ViewEncapsulationEnum.fromValue = function (value) {
	          return createEnumExpression(Identifiers.ViewEncapsulation, value);
	      };
	      return ViewEncapsulationEnum;
	  }());
	  var ChangeDetectorStatusEnum = (function () {
	      function ChangeDetectorStatusEnum() {
	      }
	      /**
	       * @param {?} value
	       * @return {?}
	       */
	      ChangeDetectorStatusEnum.fromValue = function (value) {
	          return createEnumExpression(Identifiers.ChangeDetectorStatus, value);
	      };
	      return ChangeDetectorStatusEnum;
	  }());
	  var ViewConstructorVars = (function () {
	      function ViewConstructorVars() {
	      }
	      ViewConstructorVars.viewUtils = variable('viewUtils');
	      ViewConstructorVars.parentView = variable('parentView');
	      ViewConstructorVars.parentIndex = variable('parentIndex');
	      ViewConstructorVars.parentElement = variable('parentElement');
	      return ViewConstructorVars;
	  }());
	  var ViewProperties = (function () {
	      function ViewProperties() {
	      }
	      ViewProperties.renderer = THIS_EXPR.prop('renderer');
	      ViewProperties.viewUtils = THIS_EXPR.prop('viewUtils');
	      return ViewProperties;
	  }());
	  var InjectMethodVars$1 = (function () {
	      function InjectMethodVars() {
	      }
	      InjectMethodVars.token = variable('token');
	      InjectMethodVars.requestNodeIndex = variable('requestNodeIndex');
	      InjectMethodVars.notFoundResult = variable('notFoundResult');
	      return InjectMethodVars;
	  }());
	  var DetectChangesVars = (function () {
	      function DetectChangesVars() {
	      }
	      DetectChangesVars.throwOnChange = variable("throwOnChange");
	      DetectChangesVars.changes = variable("changes");
	      DetectChangesVars.changed = variable("changed");
	      return DetectChangesVars;
	  }());
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var ViewClassDependency = (function () {
	      /**
	       * @param {?} comp
	       * @param {?} name
	       * @param {?} placeholder
	       */
	      function ViewClassDependency(comp, name, placeholder) {
	          this.comp = comp;
	          this.name = name;
	          this.placeholder = placeholder;
	      }
	      return ViewClassDependency;
	  }());
	  var ComponentFactoryDependency$1 = (function () {
	      /**
	       * @param {?} comp
	       * @param {?} placeholder
	       */
	      function ComponentFactoryDependency(comp, placeholder) {
	          this.comp = comp;
	          this.placeholder = placeholder;
	      }
	      return ComponentFactoryDependency;
	  }());
	  var DirectiveWrapperDependency = (function () {
	      /**
	       * @param {?} dir
	       * @param {?} name
	       * @param {?} placeholder
	       */
	      function DirectiveWrapperDependency(dir, name, placeholder) {
	          this.dir = dir;
	          this.name = name;
	          this.placeholder = placeholder;
	      }
	      return DirectiveWrapperDependency;
	  }());
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$19 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var CompileNode = (function () {
	      /**
	       * @param {?} parent
	       * @param {?} view
	       * @param {?} nodeIndex
	       * @param {?} renderNode
	       * @param {?} sourceAst
	       */
	      function CompileNode(parent, view, nodeIndex, renderNode, sourceAst) {
	          this.parent = parent;
	          this.view = view;
	          this.nodeIndex = nodeIndex;
	          this.renderNode = renderNode;
	          this.sourceAst = sourceAst;
	      }
	      /**
	       * @return {?}
	       */
	      CompileNode.prototype.isNull = function () { return !this.renderNode; };
	      /**
	       * @return {?}
	       */
	      CompileNode.prototype.isRootElement = function () { return this.view != this.parent.view; };
	      return CompileNode;
	  }());
	  var CompileElement = (function (_super) {
	      __extends$19(CompileElement, _super);
	      /**
	       * @param {?} parent
	       * @param {?} view
	       * @param {?} nodeIndex
	       * @param {?} renderNode
	       * @param {?} sourceAst
	       * @param {?} component
	       * @param {?} _directives
	       * @param {?} _resolvedProvidersArray
	       * @param {?} hasViewContainer
	       * @param {?} hasEmbeddedView
	       * @param {?} references
	       */
	      function CompileElement(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references) {
	          var _this = this;
	          _super.call(this, parent, view, nodeIndex, renderNode, sourceAst);
	          this.component = component;
	          this._directives = _directives;
	          this._resolvedProvidersArray = _resolvedProvidersArray;
	          this.hasViewContainer = hasViewContainer;
	          this.hasEmbeddedView = hasEmbeddedView;
	          this.compViewExpr = null;
	          this.instances = new Map();
	          this.directiveWrapperInstance = new Map();
	          this._queryCount = 0;
	          this._queries = new Map();
	          this.contentNodesByNgContentIndex = null;
	          this.referenceTokens = {};
	          references.forEach(function (ref) { return _this.referenceTokens[ref.name] = ref.value; });
	          this.elementRef =
	              importExpr(createIdentifier(Identifiers.ElementRef)).instantiate([this.renderNode]);
	          this.instances.set(resolveIdentifier(Identifiers.ElementRef), this.elementRef);
	          this.instances.set(resolveIdentifier(Identifiers.Injector), THIS_EXPR.callMethod('injector', [literal(this.nodeIndex)]));
	          this.instances.set(resolveIdentifier(Identifiers.Renderer), THIS_EXPR.prop('renderer'));
	          if (this.hasViewContainer || this.hasEmbeddedView) {
	              this._createViewContainer();
	          }
	          if (this.component) {
	              this._createComponentFactoryResolver();
	          }
	      }
	      /**
	       * @return {?}
	       */
	      CompileElement.createNull = function () {
	          return new CompileElement(null, null, null, null, null, null, [], [], false, false, []);
	      };
	      /**
	       * @return {?}
	       */
	      CompileElement.prototype._createViewContainer = function () {
	          var /** @type {?} */ fieldName = "_vc_" + this.nodeIndex;
	          var /** @type {?} */ parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;
	          // private is fine here as no child view will reference a ViewContainer
	          this.view.fields.push(new ClassField(fieldName, importType(createIdentifier(Identifiers.ViewContainer)), [StmtModifier.Private]));
	          var /** @type {?} */ statement = THIS_EXPR.prop(fieldName)
	              .set(importExpr(createIdentifier(Identifiers.ViewContainer)).instantiate([
	              literal(this.nodeIndex), literal(parentNodeIndex), THIS_EXPR, this.renderNode
	          ]))
	              .toStmt();
	          this.view.createMethod.addStmt(statement);
	          this.viewContainer = THIS_EXPR.prop(fieldName);
	          this.instances.set(resolveIdentifier(Identifiers.ViewContainer), this.viewContainer);
	          this.view.viewContainers.push(this.viewContainer);
	      };
	      /**
	       * @return {?}
	       */
	      CompileElement.prototype._createComponentFactoryResolver = function () {
	          var _this = this;
	          var /** @type {?} */ entryComponents = this.component.entryComponents.map(function (entryComponent) {
	              var /** @type {?} */ id = { reference: null };
	              _this.view.targetDependencies.push(new ComponentFactoryDependency$1(entryComponent, id));
	              return id;
	          });
	          if (!entryComponents || entryComponents.length === 0) {
	              return;
	          }
	          var /** @type {?} */ createComponentFactoryResolverExpr = importExpr(createIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([
	              literalArr(entryComponents.map(function (entryComponent) { return importExpr(entryComponent); })),
	              injectFromViewParentInjector(this.view, createIdentifierToken(Identifiers.ComponentFactoryResolver), false)
	          ]);
	          var /** @type {?} */ provider = {
	              token: createIdentifierToken(Identifiers.ComponentFactoryResolver),
	              useValue: createComponentFactoryResolverExpr
	          };
	          // Add ComponentFactoryResolver as first provider as it does not have deps on other providers
	          // ProviderAstType.PrivateService as only the component and its view can see it,
	          // but nobody else
	          this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], ProviderAstType.PrivateService, [], this.sourceAst.sourceSpan));
	      };
	      /**
	       * @param {?} compViewExpr
	       * @return {?}
	       */
	      CompileElement.prototype.setComponentView = function (compViewExpr) {
	          this.compViewExpr = compViewExpr;
	          this.contentNodesByNgContentIndex =
	              new Array(this.component.template.ngContentSelectors.length);
	          for (var /** @type {?} */ i = 0; i < this.contentNodesByNgContentIndex.length; i++) {
	              this.contentNodesByNgContentIndex[i] = [];
	          }
	      };
	      /**
	       * @param {?} embeddedView
	       * @return {?}
	       */
	      CompileElement.prototype.setEmbeddedView = function (embeddedView) {
	          this.embeddedView = embeddedView;
	          if (isPresent(embeddedView)) {
	              var /** @type {?} */ createTemplateRefExpr = importExpr(createIdentifier(Identifiers.TemplateRef_)).instantiate([
	                  THIS_EXPR, literal(this.nodeIndex), this.renderNode
	              ]);
	              var /** @type {?} */ provider = {
	                  token: createIdentifierToken(Identifiers.TemplateRef),
	                  useValue: createTemplateRefExpr
	              };
	              // Add TemplateRef as first provider as it does not have deps on other providers
	              this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], ProviderAstType.Builtin, [], this.sourceAst.sourceSpan));
	          }
	      };
	      /**
	       * @return {?}
	       */
	      CompileElement.prototype.beforeChildren = function () {
	          var _this = this;
	          if (this.hasViewContainer) {
	              this.instances.set(resolveIdentifier(Identifiers.ViewContainerRef), this.viewContainer.prop('vcRef'));
	          }
	          this._resolvedProviders = new Map();
	          this._resolvedProvidersArray.forEach(function (provider) { return _this._resolvedProviders.set(tokenReference(provider.token), provider); });
	          // create all the provider instances, some in the view constructor,
	          // some as getters. We rely on the fact that they are already sorted topologically.
	          Array.from(this._resolvedProviders.values()).forEach(function (resolvedProvider) {
	              var /** @type {?} */ isDirectiveWrapper = resolvedProvider.providerType === ProviderAstType.Component ||
	                  resolvedProvider.providerType === ProviderAstType.Directive;
	              var /** @type {?} */ providerValueExpressions = resolvedProvider.providers.map(function (provider) {
	                  if (provider.useExisting) {
	                      return _this._getDependency(resolvedProvider.providerType, { token: provider.useExisting });
	                  }
	                  else if (provider.useFactory) {
	                      var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;
	                      var /** @type {?} */ depsExpr = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep); });
	                      return importExpr(provider.useFactory).callFn(depsExpr);
	                  }
	                  else if (provider.useClass) {
	                      var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;
	                      var /** @type {?} */ depsExpr = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep); });
	                      if (isDirectiveWrapper) {
	                          var /** @type {?} */ directiveWrapperIdentifier = { reference: null };
	                          _this.view.targetDependencies.push(new DirectiveWrapperDependency(provider.useClass, DirectiveWrapperCompiler.dirWrapperClassName(provider.useClass), directiveWrapperIdentifier));
	                          return DirectiveWrapperExpressions.create(directiveWrapperIdentifier, depsExpr);
	                      }
	                      else {
	                          return importExpr(provider.useClass)
	                              .instantiate(depsExpr, importType(provider.useClass));
	                      }
	                  }
	                  else {
	                      return convertValueToOutputAst(provider.useValue);
	                  }
	              });
	              var /** @type {?} */ propName = "_" + tokenName(resolvedProvider.token) + "_" + _this.nodeIndex + "_" + _this.instances.size;
	              var /** @type {?} */ instance = createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, _this);
	              if (isDirectiveWrapper) {
	                  _this.directiveWrapperInstance.set(tokenReference(resolvedProvider.token), instance);
	                  _this.instances.set(tokenReference(resolvedProvider.token), DirectiveWrapperExpressions.context(instance));
	              }
	              else {
	                  _this.instances.set(tokenReference(resolvedProvider.token), instance);
	              }
	          });
	          var _loop_1 = function(i) {
	              var /** @type {?} */ directive = this_1._directives[i];
	              var /** @type {?} */ directiveInstance = this_1.instances.get(tokenReference(identifierToken(directive.type)));
	              directive.queries.forEach(function (queryMeta) { _this._addQuery(queryMeta, directiveInstance); });
	          };
	          var this_1 = this;
	          for (var /** @type {?} */ i = 0; i < this._directives.length; i++) {
	              _loop_1(i);
	          }
	          var /** @type {?} */ queriesWithReads = [];
	          Array.from(this._resolvedProviders.values()).forEach(function (resolvedProvider) {
	              var /** @type {?} */ queriesForProvider = _this._getQueriesFor(resolvedProvider.token);
	              queriesWithReads.push.apply(queriesWithReads, queriesForProvider.map(function (query) { return new _QueryWithRead(query, resolvedProvider.token); }));
	          });
	          Object.keys(this.referenceTokens).forEach(function (varName) {
	              var /** @type {?} */ token = _this.referenceTokens[varName];
	              var /** @type {?} */ varValue;
	              if (token) {
	                  varValue = _this.instances.get(tokenReference(token));
	              }
	              else {
	                  varValue = _this.renderNode;
	              }
	              _this.view.locals.set(varName, varValue);
	              var /** @type {?} */ varToken = { value: varName };
	              queriesWithReads.push.apply(queriesWithReads, _this._getQueriesFor(varToken).map(function (query) { return new _QueryWithRead(query, varToken); }));
	          });
	          queriesWithReads.forEach(function (queryWithRead) {
	              var /** @type {?} */ value;
	              if (isPresent(queryWithRead.read.identifier)) {
	                  // query for an identifier
	                  value = _this.instances.get(tokenReference(queryWithRead.read));
	              }
	              else {
	                  // query for a reference
	                  var /** @type {?} */ token = _this.referenceTokens[queryWithRead.read.value];
	                  if (isPresent(token)) {
	                      value = _this.instances.get(tokenReference(token));
	                  }
	                  else {
	                      value = _this.elementRef;
	                  }
	              }
	              if (isPresent(value)) {
	                  queryWithRead.query.addValue(value, _this.view);
	              }
	          });
	      };
	      /**
	       * @param {?} childNodeCount
	       * @return {?}
	       */
	      CompileElement.prototype.afterChildren = function (childNodeCount) {
	          var _this = this;
	          Array.from(this._resolvedProviders.values()).forEach(function (resolvedProvider) {
	              // Note: afterChildren is called after recursing into children.
	              // This is good so that an injector match in an element that is closer to a requesting element
	              // matches first.
	              var /** @type {?} */ providerExpr = _this.instances.get(tokenReference(resolvedProvider.token));
	              // Note: view providers are only visible on the injector of that element.
	              // This is not fully correct as the rules during codegen don't allow a directive
	              // to get hold of a view provdier on the same element. We still do this semantic
	              // as it simplifies our model to having only one runtime injector per element.
	              var /** @type {?} */ providerChildNodeCount = resolvedProvider.providerType === ProviderAstType.PrivateService ? 0 : childNodeCount;
	              _this.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));
	          });
	          Array.from(this._queries.values())
	              .forEach(function (queries) { return queries.forEach(function (q) {
	              return q.afterChildren(_this.view.createMethod, _this.view.updateContentQueriesMethod);
	          }); });
	      };
	      /**
	       * @param {?} ngContentIndex
	       * @param {?} nodeExpr
	       * @return {?}
	       */
	      CompileElement.prototype.addContentNode = function (ngContentIndex, nodeExpr) {
	          this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
	      };
	      /**
	       * @return {?}
	       */
	      CompileElement.prototype.getComponent = function () {
	          return isPresent(this.component) ?
	              this.instances.get(tokenReference(identifierToken(this.component.type))) :
	              null;
	      };
	      /**
	       * @return {?}
	       */
	      CompileElement.prototype.getProviderTokens = function () {
	          return Array.from(this._resolvedProviders.values())
	              .map(function (resolvedProvider) { return createDiTokenExpression(resolvedProvider.token); });
	      };
	      /**
	       * @param {?} token
	       * @return {?}
	       */
	      CompileElement.prototype._getQueriesFor = function (token) {
	          var /** @type {?} */ result = [];
	          var /** @type {?} */ currentEl = this;
	          var /** @type {?} */ distance = 0;
	          var /** @type {?} */ queries;
	          while (!currentEl.isNull()) {
	              queries = currentEl._queries.get(tokenReference(token));
	              if (isPresent(queries)) {
	                  result.push.apply(result, queries.filter(function (query) { return query.meta.descendants || distance <= 1; }));
	              }
	              if (currentEl._directives.length > 0) {
	                  distance++;
	              }
	              currentEl = currentEl.parent;
	          }
	          queries = this.view.componentView.viewQueries.get(tokenReference(token));
	          if (isPresent(queries)) {
	              result.push.apply(result, queries);
	          }
	          return result;
	      };
	      /**
	       * @param {?} queryMeta
	       * @param {?} directiveInstance
	       * @return {?}
	       */
	      CompileElement.prototype._addQuery = function (queryMeta, directiveInstance) {
	          var /** @type {?} */ propName = "_query_" + tokenName(queryMeta.selectors[0]) + "_" + this.nodeIndex + "_" + this._queryCount++;
	          var /** @type {?} */ queryList = createQueryList(queryMeta, directiveInstance, propName, this.view);
	          var /** @type {?} */ query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);
	          addQueryToTokenMap(this._queries, query);
	          return query;
	      };
	      /**
	       * @param {?} requestingProviderType
	       * @param {?} dep
	       * @return {?}
	       */
	      CompileElement.prototype._getLocalDependency = function (requestingProviderType, dep) {
	          var /** @type {?} */ result = null;
	          if (isPresent(dep.token)) {
	              // access builtins with special visibility
	              if (!result) {
	                  if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef)) {
	                      if (requestingProviderType === ProviderAstType.Component) {
	                          return this.compViewExpr.prop('ref');
	                      }
	                      else {
	                          return getPropertyInView(THIS_EXPR.prop('ref'), this.view, this.view.componentView);
	                      }
	                  }
	              }
	              // access regular providers on the element
	              if (!result) {
	                  var /** @type {?} */ resolvedProvider = this._resolvedProviders.get(tokenReference(dep.token));
	                  // don't allow directives / public services to access private services.
	                  // only components and private services can access private services.
	                  if (resolvedProvider && (requestingProviderType === ProviderAstType.Directive ||
	                      requestingProviderType === ProviderAstType.PublicService) &&
	                      resolvedProvider.providerType === ProviderAstType.PrivateService) {
	                      return null;
	                  }
	                  result = this.instances.get(tokenReference(dep.token));
	              }
	          }
	          return result;
	      };
	      /**
	       * @param {?} requestingProviderType
	       * @param {?} dep
	       * @return {?}
	       */
	      CompileElement.prototype._getDependency = function (requestingProviderType, dep) {
	          var /** @type {?} */ currElement = this;
	          var /** @type {?} */ result = null;
	          if (dep.isValue) {
	              result = literal(dep.value);
	          }
	          if (!result && !dep.isSkipSelf) {
	              result = this._getLocalDependency(requestingProviderType, dep);
	          }
	          // check parent elements
	          while (!result && !currElement.parent.isNull()) {
	              currElement = currElement.parent;
	              result = currElement._getLocalDependency(ProviderAstType.PublicService, { token: dep.token });
	          }
	          if (!result) {
	              result = injectFromViewParentInjector(this.view, dep.token, dep.isOptional);
	          }
	          if (!result) {
	              result = NULL_EXPR;
	          }
	          return getPropertyInView(result, this.view, currElement.view);
	      };
	      return CompileElement;
	  }(CompileNode));
	  /**
	   * @param {?} nodeIndex
	   * @param {?} childNodeCount
	   * @param {?} provider
	   * @param {?} providerExpr
	   * @return {?}
	   */
	  function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) {
	      var /** @type {?} */ indexCondition;
	      if (childNodeCount > 0) {
	          indexCondition = literal(nodeIndex)
	              .lowerEquals(InjectMethodVars$1.requestNodeIndex)
	              .and(InjectMethodVars$1.requestNodeIndex.lowerEquals(literal(nodeIndex + childNodeCount)));
	      }
	      else {
	          indexCondition = literal(nodeIndex).identical(InjectMethodVars$1.requestNodeIndex);
	      }
	      return new IfStmt(InjectMethodVars$1.token.identical(createDiTokenExpression(provider.token)).and(indexCondition), [new ReturnStatement(providerExpr)]);
	  }
	  /**
	   * @param {?} propName
	   * @param {?} provider
	   * @param {?} providerValueExpressions
	   * @param {?} isMulti
	   * @param {?} isEager
	   * @param {?} compileElement
	   * @return {?}
	   */
	  function createProviderProperty(propName, provider, providerValueExpressions, isMulti, isEager, compileElement) {
	      var /** @type {?} */ view = compileElement.view;
	      var /** @type {?} */ resolvedProviderValueExpr;
	      var /** @type {?} */ type;
	      if (isMulti) {
	          resolvedProviderValueExpr = literalArr(providerValueExpressions);
	          type = new ArrayType(DYNAMIC_TYPE);
	      }
	      else {
	          resolvedProviderValueExpr = providerValueExpressions[0];
	          type = providerValueExpressions[0].type;
	      }
	      if (!type) {
	          type = DYNAMIC_TYPE;
	      }
	      if (isEager) {
	          view.fields.push(new ClassField(propName, type));
	          view.createMethod.addStmt(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
	      }
	      else {
	          var /** @type {?} */ internalField = "_" + propName;
	          view.fields.push(new ClassField(internalField, type));
	          var /** @type {?} */ getter = new CompileMethod(view);
	          getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	          // Note: Equals is important for JS so that it also checks the undefined case!
	          getter.addStmt(new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));
	          getter.addStmt(new ReturnStatement(THIS_EXPR.prop(internalField)));
	          view.getters.push(new ClassGetter(propName, getter.finish(), type));
	      }
	      return THIS_EXPR.prop(propName);
	  }
	  var _QueryWithRead = (function () {
	      /**
	       * @param {?} query
	       * @param {?} match
	       */
	      function _QueryWithRead(query, match) {
	          this.query = query;
	          this.read = query.meta.read || match;
	      }
	      return _QueryWithRead;
	  }());
	
	  var CompilePipe = (function () {
	      /**
	       * @param {?} view
	       * @param {?} meta
	       */
	      function CompilePipe(view, meta) {
	          var _this = this;
	          this.view = view;
	          this.meta = meta;
	          this._purePipeProxyCount = 0;
	          this.instance = THIS_EXPR.prop("_pipe_" + meta.name + "_" + view.pipeCount++);
	          var deps = this.meta.type.diDeps.map(function (diDep) {
	              if (tokenReference(diDep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef)) {
	                  return getPropertyInView(THIS_EXPR.prop('ref'), _this.view, _this.view.componentView);
	              }
	              return injectFromViewParentInjector(view, diDep.token, false);
	          });
	          this.view.fields.push(new ClassField(this.instance.name, importType(this.meta.type)));
	          this.view.createMethod.resetDebugInfo(null, null);
	          this.view.createMethod.addStmt(THIS_EXPR.prop(this.instance.name)
	              .set(importExpr(this.meta.type).instantiate(deps))
	              .toStmt());
	      }
	      /**
	       * @param {?} view
	       * @param {?} name
	       * @param {?} args
	       * @return {?}
	       */
	      CompilePipe.call = function (view, name, args) {
	          var /** @type {?} */ compView = view.componentView;
	          var /** @type {?} */ meta = _findPipeMeta(compView, name);
	          var /** @type {?} */ pipe;
	          if (meta.pure) {
	              // pure pipes live on the component view
	              pipe = compView.purePipes.get(name);
	              if (!pipe) {
	                  pipe = new CompilePipe(compView, meta);
	                  compView.purePipes.set(name, pipe);
	                  compView.pipes.push(pipe);
	              }
	          }
	          else {
	              // Non pure pipes live on the view that called it
	              pipe = new CompilePipe(view, meta);
	              view.pipes.push(pipe);
	          }
	          return pipe._call(view, args);
	      };
	      Object.defineProperty(CompilePipe.prototype, "pure", {
	          /**
	           * @return {?}
	           */
	          get: function () { return this.meta.pure; },
	          enumerable: true,
	          configurable: true
	      });
	      /**
	       * @param {?} callingView
	       * @param {?} args
	       * @return {?}
	       */
	      CompilePipe.prototype._call = function (callingView, args) {
	          if (this.meta.pure) {
	              // PurePipeProxies live on the view that called them.
	              var /** @type {?} */ purePipeProxyInstance = THIS_EXPR.prop(this.instance.name + "_" + this._purePipeProxyCount++);
	              var /** @type {?} */ pipeInstanceSeenFromPureProxy = getPropertyInView(this.instance, callingView, this.view);
	              createPureProxy(pipeInstanceSeenFromPureProxy.prop('transform')
	                  .callMethod(BuiltinMethod.Bind, [pipeInstanceSeenFromPureProxy]), args.length, purePipeProxyInstance, { fields: callingView.fields, ctorStmts: callingView.createMethod });
	              return importExpr(createIdentifier(Identifiers.castByValue))
	                  .callFn([purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop('transform')])
	                  .callFn(args);
	          }
	          else {
	              return getPropertyInView(this.instance, callingView, this.view).callMethod('transform', args);
	          }
	      };
	      return CompilePipe;
	  }());
	  /**
	   * @param {?} view
	   * @param {?} name
	   * @return {?}
	   */
	  function _findPipeMeta(view, name) {
	      var /** @type {?} */ pipeMeta = null;
	      for (var /** @type {?} */ i = view.pipeMetas.length - 1; i >= 0; i--) {
	          var /** @type {?} */ localPipeMeta = view.pipeMetas[i];
	          if (localPipeMeta.name == name) {
	              pipeMeta = localPipeMeta;
	              break;
	          }
	      }
	      if (!pipeMeta) {
	          throw new Error("Illegal state: Could not find pipe " + name + " although the parser should have detected this error!");
	      }
	      return pipeMeta;
	  }
	
	  var CompileViewRootNodeType = {};
	  CompileViewRootNodeType.Node = 0;
	  CompileViewRootNodeType.ViewContainer = 1;
	  CompileViewRootNodeType.NgContent = 2;
	  CompileViewRootNodeType[CompileViewRootNodeType.Node] = "Node";
	  CompileViewRootNodeType[CompileViewRootNodeType.ViewContainer] = "ViewContainer";
	  CompileViewRootNodeType[CompileViewRootNodeType.NgContent] = "NgContent";
	  var CompileViewRootNode = (function () {
	      /**
	       * @param {?} type
	       * @param {?} expr
	       * @param {?=} ngContentIndex
	       */
	      function CompileViewRootNode(type, expr, ngContentIndex) {
	          this.type = type;
	          this.expr = expr;
	          this.ngContentIndex = ngContentIndex;
	      }
	      return CompileViewRootNode;
	  }());
	  var CompileView = (function () {
	      /**
	       * @param {?} component
	       * @param {?} genConfig
	       * @param {?} pipeMetas
	       * @param {?} styles
	       * @param {?} animations
	       * @param {?} viewIndex
	       * @param {?} declarationElement
	       * @param {?} templateVariableBindings
	       * @param {?} targetDependencies
	       */
	      function CompileView(component, genConfig, pipeMetas, styles, animations, viewIndex, declarationElement, templateVariableBindings, targetDependencies) {
	          var _this = this;
	          this.component = component;
	          this.genConfig = genConfig;
	          this.pipeMetas = pipeMetas;
	          this.styles = styles;
	          this.animations = animations;
	          this.viewIndex = viewIndex;
	          this.declarationElement = declarationElement;
	          this.templateVariableBindings = templateVariableBindings;
	          this.targetDependencies = targetDependencies;
	          this.viewChildren = [];
	          this.nodes = [];
	          this.rootNodes = [];
	          this.lastRenderNode = NULL_EXPR;
	          this.viewContainers = [];
	          this.methods = [];
	          this.ctorStmts = [];
	          this.fields = [];
	          this.getters = [];
	          this.disposables = [];
	          this.purePipes = new Map();
	          this.pipes = [];
	          this.locals = new Map();
	          this.literalArrayCount = 0;
	          this.literalMapCount = 0;
	          this.pipeCount = 0;
	          this.createMethod = new CompileMethod(this);
	          this.animationBindingsMethod = new CompileMethod(this);
	          this.injectorGetMethod = new CompileMethod(this);
	          this.updateContentQueriesMethod = new CompileMethod(this);
	          this.dirtyParentQueriesMethod = new CompileMethod(this);
	          this.updateViewQueriesMethod = new CompileMethod(this);
	          this.detectChangesInInputsMethod = new CompileMethod(this);
	          this.detectChangesRenderPropertiesMethod = new CompileMethod(this);
	          this.afterContentLifecycleCallbacksMethod = new CompileMethod(this);
	          this.afterViewLifecycleCallbacksMethod = new CompileMethod(this);
	          this.destroyMethod = new CompileMethod(this);
	          this.detachMethod = new CompileMethod(this);
	          this.viewType = getViewType(component, viewIndex);
	          this.className = getViewClassName(component, viewIndex);
	          this.classType = expressionType(variable(this.className));
	          this.classExpr = variable(this.className);
	          if (this.viewType === ViewType.COMPONENT || this.viewType === ViewType.HOST) {
	              this.componentView = this;
	          }
	          else {
	              this.componentView = this.declarationElement.view.componentView;
	          }
	          this.componentContext =
	              getPropertyInView(THIS_EXPR.prop('context'), this, this.componentView);
	          var viewQueries = new Map();
	          if (this.viewType === ViewType.COMPONENT) {
	              var directiveInstance_1 = THIS_EXPR.prop('context');
	              this.component.viewQueries.forEach(function (queryMeta, queryIndex) {
	                  var propName = "_viewQuery_" + tokenName(queryMeta.selectors[0]) + "_" + queryIndex;
	                  var queryList = createQueryList(queryMeta, directiveInstance_1, propName, _this);
	                  var query = new CompileQuery(queryMeta, queryList, directiveInstance_1, _this);
	                  addQueryToTokenMap(viewQueries, query);
	              });
	          }
	          this.viewQueries = viewQueries;
	          templateVariableBindings.forEach(function (entry) { _this.locals.set(entry[1], THIS_EXPR.prop('context').prop(entry[0])); });
	          if (!this.declarationElement.isNull()) {
	              this.declarationElement.setEmbeddedView(this);
	          }
	      }
	      /**
	       * @param {?} name
	       * @param {?} input
	       * @param {?} args
	       * @return {?}
	       */
	      CompileView.prototype.callPipe = function (name, input, args) {
	          return CompilePipe.call(this, name, [input].concat(args));
	      };
	      /**
	       * @param {?} name
	       * @return {?}
	       */
	      CompileView.prototype.getLocal = function (name) {
	          if (name == EventHandlerVars.event.name) {
	              return EventHandlerVars.event;
	          }
	          var /** @type {?} */ currView = this;
	          var /** @type {?} */ result = currView.locals.get(name);
	          while (!result && isPresent(currView.declarationElement.view)) {
	              currView = currView.declarationElement.view;
	              result = currView.locals.get(name);
	          }
	          if (isPresent(result)) {
	              return getPropertyInView(result, this, currView);
	          }
	          else {
	              return null;
	          }
	      };
	      /**
	       * @return {?}
	       */
	      CompileView.prototype.afterNodes = function () {
	          var _this = this;
	          Array.from(this.viewQueries.values())
	              .forEach(function (queries) { return queries.forEach(function (q) { return q.afterChildren(_this.createMethod, _this.updateViewQueriesMethod); }); });
	      };
	      return CompileView;
	  }());
	  /**
	   * @param {?} component
	   * @param {?} embeddedTemplateIndex
	   * @return {?}
	   */
	  function getViewType(component, embeddedTemplateIndex) {
	      if (embeddedTemplateIndex > 0) {
	          return ViewType.EMBEDDED;
	      }
	      if (component.isHost) {
	          return ViewType.HOST;
	      }
	      return ViewType.COMPONENT;
	  }
	
	  /**
	   * @param {?} boundEvents
	   * @param {?} directives
	   * @param {?} compileElement
	   * @param {?} bindToRenderer
	   * @return {?}
	   */
	  function bindOutputs(boundEvents, directives, compileElement, bindToRenderer) {
	      var /** @type {?} */ usedEvents = collectEvents(boundEvents, directives);
	      if (!usedEvents.size) {
	          return false;
	      }
	      if (bindToRenderer) {
	          subscribeToRenderEvents(usedEvents, compileElement);
	      }
	      subscribeToDirectiveEvents(usedEvents, directives, compileElement);
	      generateHandleEventMethod(boundEvents, directives, compileElement);
	      return true;
	  }
	  /**
	   * @param {?} boundEvents
	   * @param {?} directives
	   * @return {?}
	   */
	  function collectEvents(boundEvents, directives) {
	      var /** @type {?} */ usedEvents = new Map();
	      boundEvents.forEach(function (event) { usedEvents.set(event.fullName, event); });
	      directives.forEach(function (dirAst) {
	          dirAst.hostEvents.forEach(function (event) { usedEvents.set(event.fullName, event); });
	      });
	      return usedEvents;
	  }
	  /**
	   * @param {?} usedEvents
	   * @param {?} compileElement
	   * @return {?}
	   */
	  function subscribeToRenderEvents(usedEvents, compileElement) {
	      var /** @type {?} */ eventAndTargetExprs = [];
	      usedEvents.forEach(function (event) {
	          if (!event.phase) {
	              eventAndTargetExprs.push(literal(event.name), literal(event.target));
	          }
	      });
	      if (eventAndTargetExprs.length) {
	          var /** @type {?} */ disposableVar = variable("disposable_" + compileElement.view.disposables.length);
	          compileElement.view.disposables.push(disposableVar);
	          compileElement.view.createMethod.addStmt(disposableVar
	              .set(importExpr(createIdentifier(Identifiers.subscribeToRenderElement)).callFn([
	              THIS_EXPR, compileElement.renderNode, createInlineArray(eventAndTargetExprs),
	              handleEventExpr(compileElement)
	          ]))
	              .toDeclStmt(FUNCTION_TYPE, [StmtModifier.Private]));
	      }
	  }
	  /**
	   * @param {?} usedEvents
	   * @param {?} directives
	   * @param {?} compileElement
	   * @return {?}
	   */
	  function subscribeToDirectiveEvents(usedEvents, directives, compileElement) {
	      var /** @type {?} */ usedEventNames = Array.from(usedEvents.keys());
	      directives.forEach(function (dirAst) {
	          var /** @type {?} */ dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);
	          compileElement.view.createMethod.addStmts(DirectiveWrapperExpressions.subscribe(dirAst.directive, dirAst.hostProperties, usedEventNames, dirWrapper, THIS_EXPR, handleEventExpr(compileElement)));
	      });
	  }
	  /**
	   * @param {?} boundEvents
	   * @param {?} directives
	   * @param {?} compileElement
	   * @return {?}
	   */
	  function generateHandleEventMethod(boundEvents, directives, compileElement) {
	      var /** @type {?} */ hasComponentHostListener = directives.some(function (dirAst) { return dirAst.hostEvents.some(function (event) { return dirAst.directive.isComponent; }); });
	      var /** @type {?} */ markPathToRootStart = hasComponentHostListener ? compileElement.compViewExpr : THIS_EXPR;
	      var /** @type {?} */ handleEventStmts = new CompileMethod(compileElement.view);
	      handleEventStmts.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	      handleEventStmts.push(markPathToRootStart.callMethod('markPathToRootAsCheckOnce', []).toStmt());
	      var /** @type {?} */ eventNameVar = variable('eventName');
	      var /** @type {?} */ resultVar = variable('result');
	      handleEventStmts.push(resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE));
	      directives.forEach(function (dirAst, dirIdx) {
	          var /** @type {?} */ dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);
	          if (dirAst.hostEvents.length > 0) {
	              handleEventStmts.push(resultVar
	                  .set(DirectiveWrapperExpressions
	                  .handleEvent(dirAst.hostEvents, dirWrapper, eventNameVar, EventHandlerVars.event)
	                  .and(resultVar))
	                  .toStmt());
	          }
	      });
	      boundEvents.forEach(function (renderEvent, renderEventIdx) {
	          var /** @type {?} */ evalResult = convertActionBinding(compileElement.view, compileElement.view, compileElement.view.componentContext, renderEvent.handler, "sub_" + renderEventIdx);
	          var /** @type {?} */ trueStmts = evalResult.stmts;
	          if (evalResult.preventDefault) {
	              trueStmts.push(resultVar.set(evalResult.preventDefault.and(resultVar)).toStmt());
	          }
	          // TODO(tbosch): convert this into a `switch` once our OutputAst supports it.
	          handleEventStmts.push(new IfStmt(eventNameVar.equals(literal(renderEvent.fullName)), trueStmts));
	      });
	      handleEventStmts.push(new ReturnStatement(resultVar));
	      compileElement.view.methods.push(new ClassMethod(getHandleEventMethodName(compileElement.nodeIndex), [
	          new FnParam(eventNameVar.name, STRING_TYPE),
	          new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)
	      ], handleEventStmts.finish(), BOOL_TYPE));
	  }
	  /**
	   * @param {?} compileElement
	   * @return {?}
	   */
	  function handleEventExpr(compileElement) {
	      var /** @type {?} */ handleEventMethodName = getHandleEventMethodName(compileElement.nodeIndex);
	      return THIS_EXPR.callMethod('eventHandler', [THIS_EXPR.prop(handleEventMethodName)]);
	  }
	
	  var /** @type {?} */ STATE_IS_NEVER_CHECKED = THIS_EXPR.prop('numberOfChecks').identical(new LiteralExpr(0));
	  var /** @type {?} */ NOT_THROW_ON_CHANGES = not(DetectChangesVars.throwOnChange);
	  /**
	   * @param {?} directiveMeta
	   * @param {?} directiveInstance
	   * @param {?} compileElement
	   * @return {?}
	   */
	  function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
	      var /** @type {?} */ view = compileElement.view;
	      var /** @type {?} */ lifecycleHooks = directiveMeta.type.lifecycleHooks;
	      var /** @type {?} */ afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod;
	      afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	      if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentInit) !== -1) {
	          afterContentLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterContentInit', []).toStmt()]));
	      }
	      if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentChecked) !== -1) {
	          afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterContentChecked', []).toStmt());
	      }
	  }
	  /**
	   * @param {?} directiveMeta
	   * @param {?} directiveInstance
	   * @param {?} compileElement
	   * @return {?}
	   */
	  function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
	      var /** @type {?} */ view = compileElement.view;
	      var /** @type {?} */ lifecycleHooks = directiveMeta.type.lifecycleHooks;
	      var /** @type {?} */ afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod;
	      afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	      if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewInit) !== -1) {
	          afterViewLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterViewInit', []).toStmt()]));
	      }
	      if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewChecked) !== -1) {
	          afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterViewChecked', []).toStmt());
	      }
	  }
	  /**
	   * @param {?} dir
	   * @param {?} directiveWrapperIntance
	   * @param {?} compileElement
	   * @return {?}
	   */
	  function bindDirectiveWrapperLifecycleCallbacks(dir, directiveWrapperIntance, compileElement) {
	      compileElement.view.destroyMethod.addStmts(DirectiveWrapperExpressions.ngOnDestroy(dir.directive, directiveWrapperIntance));
	      compileElement.view.detachMethod.addStmts(DirectiveWrapperExpressions.ngOnDetach(dir.hostProperties, directiveWrapperIntance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode));
	  }
	  /**
	   * @param {?} provider
	   * @param {?} providerInstance
	   * @param {?} compileElement
	   * @return {?}
	   */
	  function bindInjectableDestroyLifecycleCallbacks(provider, providerInstance, compileElement) {
	      var /** @type {?} */ onDestroyMethod = compileElement.view.destroyMethod;
	      onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	      if (provider.providerType !== ProviderAstType.Directive &&
	          provider.providerType !== ProviderAstType.Component &&
	          provider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
	          onDestroyMethod.addStmt(providerInstance.callMethod('ngOnDestroy', []).toStmt());
	      }
	  }
	  /**
	   * @param {?} pipeMeta
	   * @param {?} pipeInstance
	   * @param {?} view
	   * @return {?}
	   */
	  function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) {
	      var /** @type {?} */ onDestroyMethod = view.destroyMethod;
	      if (pipeMeta.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
	          onDestroyMethod.addStmt(pipeInstance.callMethod('ngOnDestroy', []).toStmt());
	      }
	  }
	
	  /**
	   * @param {?} boundText
	   * @param {?} compileNode
	   * @param {?} view
	   * @return {?}
	   */
	  function bindRenderText(boundText, compileNode, view) {
	      var /** @type {?} */ valueField = createCheckBindingField(view);
	      var /** @type {?} */ evalResult = convertPropertyBinding(view, view, view.componentContext, boundText.value, valueField.bindingId);
	      if (!evalResult) {
	          return null;
	      }
	      view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText);
	      view.detectChangesRenderPropertiesMethod.addStmts(createCheckBindingStmt(evalResult, valueField.expression, DetectChangesVars.throwOnChange, [THIS_EXPR.prop('renderer')
	              .callMethod('setText', [compileNode.renderNode, evalResult.currValExpr])
	              .toStmt()]));
	  }
	  /**
	   * @param {?} boundProps
	   * @param {?} boundOutputs
	   * @param {?} hasEvents
	   * @param {?} compileElement
	   * @return {?}
	   */
	  function bindRenderInputs(boundProps, boundOutputs, hasEvents, compileElement) {
	      var /** @type {?} */ view = compileElement.view;
	      var /** @type {?} */ renderNode = compileElement.renderNode;
	      boundProps.forEach(function (boundProp) {
	          var /** @type {?} */ bindingField = createCheckBindingField(view);
	          view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);
	          var /** @type {?} */ evalResult = convertPropertyBinding(view, view, compileElement.view.componentContext, boundProp.value, bindingField.bindingId);
	          if (!evalResult) {
	              return;
	          }
	          var /** @type {?} */ checkBindingStmts = [];
	          var /** @type {?} */ compileMethod = view.detectChangesRenderPropertiesMethod;
	          switch (boundProp.type) {
	              case PropertyBindingType.Property:
	              case PropertyBindingType.Attribute:
	              case PropertyBindingType.Class:
	              case PropertyBindingType.Style:
	                  checkBindingStmts.push.apply(checkBindingStmts, writeToRenderer(THIS_EXPR, boundProp, renderNode, evalResult.currValExpr, view.genConfig.logBindingUpdate));
	                  break;
	              case PropertyBindingType.Animation:
	                  compileMethod = view.animationBindingsMethod;
	                  var _a = triggerAnimation(THIS_EXPR, THIS_EXPR, boundProp, boundOutputs, (hasEvents ? THIS_EXPR.prop(getHandleEventMethodName(compileElement.nodeIndex)) :
	                      importExpr(createIdentifier(Identifiers.noop)))
	                      .callMethod(BuiltinMethod.Bind, [THIS_EXPR]), compileElement.renderNode, evalResult.currValExpr, bindingField.expression), updateStmts = _a.updateStmts, detachStmts = _a.detachStmts;
	                  checkBindingStmts.push.apply(checkBindingStmts, updateStmts);
	                  view.detachMethod.addStmts(detachStmts);
	                  break;
	          }
	          compileMethod.addStmts(createCheckBindingStmt(evalResult, bindingField.expression, DetectChangesVars.throwOnChange, checkBindingStmts));
	      });
	  }
	  /**
	   * @param {?} directiveAst
	   * @param {?} directiveWrapperInstance
	   * @param {?} compileElement
	   * @param {?} elementName
	   * @param {?} schemaRegistry
	   * @return {?}
	   */
	  function bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, elementName, schemaRegistry) {
	      // We need to provide the SecurityContext for properties that could need sanitization.
	      var /** @type {?} */ runtimeSecurityCtxExprs = directiveAst.hostProperties.filter(function (boundProp) { return boundProp.needsRuntimeSecurityContext; })
	          .map(function (boundProp) {
	          var /** @type {?} */ ctx;
	          switch (boundProp.type) {
	              case PropertyBindingType.Property:
	                  ctx = schemaRegistry.securityContext(elementName, boundProp.name, false);
	                  break;
	              case PropertyBindingType.Attribute:
	                  ctx = schemaRegistry.securityContext(elementName, boundProp.name, true);
	                  break;
	              default:
	                  throw new Error("Illegal state: Only property / attribute bindings can have an unknown security context! Binding " + boundProp.name);
	          }
	          return createEnumExpression(Identifiers.SecurityContext, ctx);
	      });
	      compileElement.view.detectChangesRenderPropertiesMethod.addStmts(DirectiveWrapperExpressions.checkHost(directiveAst.hostProperties, directiveWrapperInstance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange, runtimeSecurityCtxExprs));
	  }
	  /**
	   * @param {?} directiveAst
	   * @param {?} directiveWrapperInstance
	   * @param {?} dirIndex
	   * @param {?} compileElement
	   * @return {?}
	   */
	  function bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement) {
	      var /** @type {?} */ view = compileElement.view;
	      var /** @type {?} */ detectChangesInInputsMethod = view.detectChangesInInputsMethod;
	      detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	      directiveAst.inputs.forEach(function (input, inputIdx) {
	          // Note: We can't use `fields.length` here, as we are not adding a field!
	          var /** @type {?} */ bindingId = compileElement.nodeIndex + "_" + dirIndex + "_" + inputIdx;
	          detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);
	          var /** @type {?} */ evalResult = convertPropertyBinding(view, view, view.componentContext, input.value, bindingId);
	          if (!evalResult) {
	              return;
	          }
	          detectChangesInInputsMethod.addStmts(evalResult.stmts);
	          detectChangesInInputsMethod.addStmt(directiveWrapperInstance
	              .callMethod("check_" + input.directiveName, [
	              evalResult.currValExpr, DetectChangesVars.throwOnChange,
	              evalResult.forceUpdate || literal(false)
	          ])
	              .toStmt());
	      });
	      var /** @type {?} */ isOnPushComp = directiveAst.directive.isComponent &&
	          !isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);
	      var /** @type {?} */ directiveDetectChangesExpr = DirectiveWrapperExpressions.ngDoCheck(directiveWrapperInstance, THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange);
	      var /** @type {?} */ directiveDetectChangesStmt = isOnPushComp ?
	          new IfStmt(directiveDetectChangesExpr, [compileElement.compViewExpr.callMethod('markAsCheckOnce', []).toStmt()]) :
	          directiveDetectChangesExpr.toStmt();
	      detectChangesInInputsMethod.addStmt(directiveDetectChangesStmt);
	  }
	
	  /**
	   * @param {?} view
	   * @param {?} parsedTemplate
	   * @param {?} schemaRegistry
	   * @return {?}
	   */
	  function bindView(view, parsedTemplate, schemaRegistry) {
	      var /** @type {?} */ visitor = new ViewBinderVisitor(view, schemaRegistry);
	      templateVisitAll(visitor, parsedTemplate);
	      view.pipes.forEach(function (pipe) { bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view); });
	  }
	  var ViewBinderVisitor = (function () {
	      /**
	       * @param {?} view
	       * @param {?} _schemaRegistry
	       */
	      function ViewBinderVisitor(view, _schemaRegistry) {
	          this.view = view;
	          this._schemaRegistry = _schemaRegistry;
	          this._nodeIndex = 0;
	      }
	      /**
	       * @param {?} ast
	       * @param {?} parent
	       * @return {?}
	       */
	      ViewBinderVisitor.prototype.visitBoundText = function (ast, parent) {
	          var /** @type {?} */ node = this.view.nodes[this._nodeIndex++];
	          bindRenderText(ast, node, this.view);
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} parent
	       * @return {?}
	       */
	      ViewBinderVisitor.prototype.visitText = function (ast, parent) {
	          this._nodeIndex++;
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} parent
	       * @return {?}
	       */
	      ViewBinderVisitor.prototype.visitNgContent = function (ast, parent) { return null; };
	      /**
	       * @param {?} ast
	       * @param {?} parent
	       * @return {?}
	       */
	      ViewBinderVisitor.prototype.visitElement = function (ast, parent) {
	          var _this = this;
	          var /** @type {?} */ compileElement = (this.view.nodes[this._nodeIndex++]);
	          var /** @type {?} */ hasEvents = bindOutputs(ast.outputs, ast.directives, compileElement, true);
	          bindRenderInputs(ast.inputs, ast.outputs, hasEvents, compileElement);
	          ast.directives.forEach(function (directiveAst, dirIndex) {
	              var /** @type {?} */ directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
	              bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
	              bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, ast.name, _this._schemaRegistry);
	          });
	          templateVisitAll(this, ast.children, compileElement);
	          // afterContent and afterView lifecycles need to be called bottom up
	          // so that children are notified before parents
	          ast.directives.forEach(function (directiveAst) {
	              var /** @type {?} */ directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
	              var /** @type {?} */ directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
	              bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	              bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	              bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);
	          });
	          ast.providers.forEach(function (providerAst) {
	              var /** @type {?} */ providerInstance = compileElement.instances.get(tokenReference(providerAst.token));
	              bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
	          });
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} parent
	       * @return {?}
	       */
	      ViewBinderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {
	          var /** @type {?} */ compileElement = (this.view.nodes[this._nodeIndex++]);
	          bindOutputs(ast.outputs, ast.directives, compileElement, false);
	          ast.directives.forEach(function (directiveAst, dirIndex) {
	              var /** @type {?} */ directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
	              var /** @type {?} */ directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
	              bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
	              bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	              bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	              bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);
	          });
	          ast.providers.forEach(function (providerAst) {
	              var /** @type {?} */ providerInstance = compileElement.instances.get(tokenReference(providerAst.token));
	              bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
	          });
	          bindView(compileElement.embeddedView, ast.children, this._schemaRegistry);
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      ViewBinderVisitor.prototype.visitAttr = function (ast, ctx) { return null; };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      ViewBinderVisitor.prototype.visitDirective = function (ast, ctx) { return null; };
	      /**
	       * @param {?} ast
	       * @param {?} eventTargetAndNames
	       * @return {?}
	       */
	      ViewBinderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      ViewBinderVisitor.prototype.visitReference = function (ast, ctx) { return null; };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      ViewBinderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      ViewBinderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      ViewBinderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };
	      return ViewBinderVisitor;
	  }());
	
	  var /** @type {?} */ IMPLICIT_TEMPLATE_VAR = '\$implicit';
	  var /** @type {?} */ CLASS_ATTR$1 = 'class';
	  var /** @type {?} */ STYLE_ATTR = 'style';
	  var /** @type {?} */ NG_CONTAINER_TAG = 'ng-container';
	  var /** @type {?} */ parentRenderNodeVar = variable('parentRenderNode');
	  var /** @type {?} */ rootSelectorVar = variable('rootSelector');
	  /**
	   * @param {?} view
	   * @param {?} template
	   * @param {?} targetDependencies
	   * @return {?}
	   */
	  function buildView(view, template, targetDependencies) {
	      var /** @type {?} */ builderVisitor = new ViewBuilderVisitor(view, targetDependencies);
	      var /** @type {?} */ parentEl = view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent;
	      templateVisitAll(builderVisitor, template, parentEl);
	      if (view.viewType === ViewType.EMBEDDED || view.viewType === ViewType.HOST) {
	          view.lastRenderNode = builderVisitor.getOrCreateLastRenderNode();
	      }
	      return builderVisitor.nestedViewCount;
	  }
	  /**
	   * @param {?} view
	   * @param {?} targetStatements
	   * @return {?}
	   */
	  function finishView(view, targetStatements) {
	      view.afterNodes();
	      createViewTopLevelStmts(view, targetStatements);
	      view.nodes.forEach(function (node) {
	          if (node instanceof CompileElement && node.hasEmbeddedView) {
	              finishView(node.embeddedView, targetStatements);
	          }
	      });
	  }
	  var ViewBuilderVisitor = (function () {
	      /**
	       * @param {?} view
	       * @param {?} targetDependencies
	       */
	      function ViewBuilderVisitor(view, targetDependencies) {
	          this.view = view;
	          this.targetDependencies = targetDependencies;
	          this.nestedViewCount = 0;
	      }
	      /**
	       * @param {?} parent
	       * @return {?}
	       */
	      ViewBuilderVisitor.prototype._isRootNode = function (parent) { return parent.view !== this.view; };
	      /**
	       * @param {?} node
	       * @return {?}
	       */
	      ViewBuilderVisitor.prototype._addRootNodeAndProject = function (node) {
	          var /** @type {?} */ projectedNode = _getOuterContainerOrSelf(node);
	          var /** @type {?} */ parent = projectedNode.parent;
	          var /** @type {?} */ ngContentIndex = ((projectedNode.sourceAst)).ngContentIndex;
	          var /** @type {?} */ viewContainer = (node instanceof CompileElement && node.hasViewContainer) ? node.viewContainer : null;
	          if (this._isRootNode(parent)) {
	              if (this.view.viewType !== ViewType.COMPONENT) {
	                  this.view.rootNodes.push(new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));
	              }
	          }
	          else if (isPresent(parent.component) && isPresent(ngContentIndex)) {
	              parent.addContentNode(ngContentIndex, new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));
	          }
	      };
	      /**
	       * @param {?} parent
	       * @return {?}
	       */
	      ViewBuilderVisitor.prototype._getParentRenderNode = function (parent) {
	          parent = _getOuterContainerParentOrSelf(parent);
	          if (this._isRootNode(parent)) {
	              if (this.view.viewType === ViewType.COMPONENT) {
	                  return parentRenderNodeVar;
	              }
	              else {
	                  // root node of an embedded/host view
	                  return NULL_EXPR;
	              }
	          }
	          else {
	              return isPresent(parent.component) &&
	                  parent.component.template.encapsulation !== _angular_core.ViewEncapsulation.Native ?
	                  NULL_EXPR :
	                  parent.renderNode;
	          }
	      };
	      /**
	       * @return {?}
	       */
	      ViewBuilderVisitor.prototype.getOrCreateLastRenderNode = function () {
	          var /** @type {?} */ view = this.view;
	          if (view.rootNodes.length === 0 ||
	              view.rootNodes[view.rootNodes.length - 1].type !== CompileViewRootNodeType.Node) {
	              var /** @type {?} */ fieldName = "_el_" + view.nodes.length;
	              view.fields.push(new ClassField(fieldName, importType(view.genConfig.renderTypes.renderElement)));
	              view.createMethod.addStmt(THIS_EXPR.prop(fieldName)
	                  .set(ViewProperties.renderer.callMethod('createTemplateAnchor', [NULL_EXPR, NULL_EXPR]))
	                  .toStmt());
	              view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.Node, THIS_EXPR.prop(fieldName)));
	          }
	          return view.rootNodes[view.rootNodes.length - 1].expr;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} parent
	       * @return {?}
	       */
	      ViewBuilderVisitor.prototype.visitBoundText = function (ast, parent) {
	          return this._visitText(ast, '', parent);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} parent
	       * @return {?}
	       */
	      ViewBuilderVisitor.prototype.visitText = function (ast, parent) {
	          return this._visitText(ast, ast.value, parent);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} value
	       * @param {?} parent
	       * @return {?}
	       */
	      ViewBuilderVisitor.prototype._visitText = function (ast, value, parent) {
	          var /** @type {?} */ fieldName = "_text_" + this.view.nodes.length;
	          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderText)));
	          var /** @type {?} */ renderNode = THIS_EXPR.prop(fieldName);
	          var /** @type {?} */ compileNode = new CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast);
	          var /** @type {?} */ createRenderNode = THIS_EXPR.prop(fieldName)
	              .set(ViewProperties.renderer.callMethod('createText', [
	              this._getParentRenderNode(parent), literal(value),
	              this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast)
	          ]))
	              .toStmt();
	          this.view.nodes.push(compileNode);
	          this.view.createMethod.addStmt(createRenderNode);
	          this._addRootNodeAndProject(compileNode);
	          return renderNode;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} parent
	       * @return {?}
	       */
	      ViewBuilderVisitor.prototype.visitNgContent = function (ast, parent) {
	          // the projected nodes originate from a different view, so we don't
	          // have debug information for them...
	          this.view.createMethod.resetDebugInfo(null, ast);
	          var /** @type {?} */ parentRenderNode = this._getParentRenderNode(parent);
	          if (parentRenderNode !== NULL_EXPR) {
	              this.view.createMethod.addStmt(THIS_EXPR.callMethod('projectNodes', [parentRenderNode, literal(ast.index)])
	                  .toStmt());
	          }
	          else if (this._isRootNode(parent)) {
	              if (this.view.viewType !== ViewType.COMPONENT) {
	                  // store root nodes only for embedded/host views
	                  this.view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));
	              }
	          }
	          else {
	              if (isPresent(parent.component) && isPresent(ast.ngContentIndex)) {
	                  parent.addContentNode(ast.ngContentIndex, new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));
	              }
	          }
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} parent
	       * @return {?}
	       */
	      ViewBuilderVisitor.prototype.visitElement = function (ast, parent) {
	          var /** @type {?} */ nodeIndex = this.view.nodes.length;
	          var /** @type {?} */ createRenderNodeExpr;
	          var /** @type {?} */ debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast);
	          var /** @type {?} */ directives = ast.directives.map(function (directiveAst) { return directiveAst.directive; });
	          var /** @type {?} */ component = directives.find(function (directive) { return directive.isComponent; });
	          if (ast.name === NG_CONTAINER_TAG) {
	              createRenderNodeExpr = ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), debugContextExpr]);
	          }
	          else {
	              var /** @type {?} */ htmlAttrs = _readHtmlAttrs(ast.attrs);
	              var /** @type {?} */ attrNameAndValues = createInlineArray(_mergeHtmlAndDirectiveAttrs(htmlAttrs, directives).map(function (v) { return literal(v); }));
	              if (nodeIndex === 0 && this.view.viewType === ViewType.HOST) {
	                  createRenderNodeExpr =
	                      importExpr(createIdentifier(Identifiers.selectOrCreateRenderHostElement)).callFn([
	                          ViewProperties.renderer, literal(ast.name), attrNameAndValues, rootSelectorVar,
	                          debugContextExpr
	                      ]);
	              }
	              else {
	                  createRenderNodeExpr =
	                      importExpr(createIdentifier(Identifiers.createRenderElement)).callFn([
	                          ViewProperties.renderer, this._getParentRenderNode(parent), literal(ast.name),
	                          attrNameAndValues, debugContextExpr
	                      ]);
	              }
	          }
	          var /** @type {?} */ fieldName = "_el_" + nodeIndex;
	          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderElement)));
	          this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());
	          var /** @type {?} */ renderNode = THIS_EXPR.prop(fieldName);
	          var /** @type {?} */ compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, false, ast.references);
	          this.view.nodes.push(compileElement);
	          var /** @type {?} */ compViewExpr = null;
	          if (isPresent(component)) {
	              var /** @type {?} */ nestedComponentIdentifier = { reference: null };
	              this.targetDependencies.push(new ViewClassDependency(component.type, getViewClassName(component, 0), nestedComponentIdentifier));
	              compViewExpr = THIS_EXPR.prop("compView_" + nodeIndex); // fix highlighting: `
	              this.view.fields.push(new ClassField(compViewExpr.name, importType(createIdentifier(Identifiers.AppView), [importType(component.type)])));
	              this.view.viewChildren.push(compViewExpr);
	              compileElement.setComponentView(compViewExpr);
	              this.view.createMethod.addStmt(compViewExpr
	                  .set(importExpr(nestedComponentIdentifier).instantiate([
	                  ViewProperties.viewUtils, THIS_EXPR, literal(nodeIndex), renderNode
	              ]))
	                  .toStmt());
	          }
	          compileElement.beforeChildren();
	          this._addRootNodeAndProject(compileElement);
	          templateVisitAll(this, ast.children, compileElement);
	          compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1);
	          if (isPresent(compViewExpr)) {
	              this.view.createMethod.addStmt(compViewExpr.callMethod('create', [compileElement.getComponent()]).toStmt());
	          }
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} parent
	       * @return {?}
	       */
	      ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {
	          var /** @type {?} */ nodeIndex = this.view.nodes.length;
	          var /** @type {?} */ fieldName = "_anchor_" + nodeIndex;
	          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderComment)));
	          this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName)
	              .set(ViewProperties.renderer.callMethod('createTemplateAnchor', [
	              this._getParentRenderNode(parent),
	              this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast)
	          ]))
	              .toStmt());
	          var /** @type {?} */ renderNode = THIS_EXPR.prop(fieldName);
	          var /** @type {?} */ templateVariableBindings = ast.variables.map(function (varAst) { return [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name]; });
	          var /** @type {?} */ directives = ast.directives.map(function (directiveAst) { return directiveAst.directive; });
	          var /** @type {?} */ compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, true, ast.references);
	          this.view.nodes.push(compileElement);
	          this.nestedViewCount++;
	          var /** @type {?} */ embeddedView = new CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, NULL_EXPR, this.view.animations, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings, this.targetDependencies);
	          this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies);
	          compileElement.beforeChildren();
	          this._addRootNodeAndProject(compileElement);
	          compileElement.afterChildren(0);
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      ViewBuilderVisitor.prototype.visitAttr = function (ast, ctx) { return null; };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      ViewBuilderVisitor.prototype.visitDirective = function (ast, ctx) { return null; };
	      /**
	       * @param {?} ast
	       * @param {?} eventTargetAndNames
	       * @return {?}
	       */
	      ViewBuilderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      ViewBuilderVisitor.prototype.visitReference = function (ast, ctx) { return null; };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      ViewBuilderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      ViewBuilderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      ViewBuilderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };
	      return ViewBuilderVisitor;
	  }());
	  /**
	   *  Walks up the nodes while the direct parent is a container.
	    * *
	    * Returns the outer container or the node itself when it is not a direct child of a container.
	    * *
	   * @param {?} node
	   * @return {?}
	   */
	  function _getOuterContainerOrSelf(node) {
	      var /** @type {?} */ view = node.view;
	      while (_isNgContainer(node.parent, view)) {
	          node = node.parent;
	      }
	      return node;
	  }
	  /**
	   *  Walks up the nodes while they are container and returns the first parent which is not.
	    * *
	    * Returns the parent of the outer container or the node itself when it is not a container.
	    * *
	   * @param {?} el
	   * @return {?}
	   */
	  function _getOuterContainerParentOrSelf(el) {
	      var /** @type {?} */ view = el.view;
	      while (_isNgContainer(el, view)) {
	          el = el.parent;
	      }
	      return el;
	  }
	  /**
	   * @param {?} node
	   * @param {?} view
	   * @return {?}
	   */
	  function _isNgContainer(node, view) {
	      return !node.isNull() && ((node.sourceAst)).name === NG_CONTAINER_TAG &&
	          node.view === view;
	  }
	  /**
	   * @param {?} declaredHtmlAttrs
	   * @param {?} directives
	   * @return {?}
	   */
	  function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) {
	      var /** @type {?} */ mapResult = {};
	      Object.keys(declaredHtmlAttrs).forEach(function (key) { mapResult[key] = declaredHtmlAttrs[key]; });
	      directives.forEach(function (directiveMeta) {
	          Object.keys(directiveMeta.hostAttributes).forEach(function (name) {
	              var /** @type {?} */ value = directiveMeta.hostAttributes[name];
	              var /** @type {?} */ prevValue = mapResult[name];
	              mapResult[name] = isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
	          });
	      });
	      var /** @type {?} */ arrResult = [];
	      // Note: We need to sort to get a defined output order
	      // for tests and for caching generated artifacts...
	      Object.keys(mapResult).sort().forEach(function (attrName) { arrResult.push(attrName, mapResult[attrName]); });
	      return arrResult;
	  }
	  /**
	   * @param {?} attrs
	   * @return {?}
	   */
	  function _readHtmlAttrs(attrs) {
	      var /** @type {?} */ htmlAttrs = {};
	      attrs.forEach(function (ast) { htmlAttrs[ast.name] = ast.value; });
	      return htmlAttrs;
	  }
	  /**
	   * @param {?} attrName
	   * @param {?} attrValue1
	   * @param {?} attrValue2
	   * @return {?}
	   */
	  function mergeAttributeValue(attrName, attrValue1, attrValue2) {
	      if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {
	          return attrValue1 + " " + attrValue2;
	      }
	      else {
	          return attrValue2;
	      }
	  }
	  /**
	   * @param {?} view
	   * @param {?} targetStatements
	   * @return {?}
	   */
	  function createViewTopLevelStmts(view, targetStatements) {
	      var /** @type {?} */ nodeDebugInfosVar = NULL_EXPR;
	      if (view.genConfig.genDebugInfo) {
	          nodeDebugInfosVar = variable("nodeDebugInfos_" + identifierName(view.component.type) + view.viewIndex); // fix
	          // highlighting:
	          // `
	          targetStatements.push(((nodeDebugInfosVar))
	              .set(literalArr(view.nodes.map(createStaticNodeDebugInfo), new ArrayType(importType(createIdentifier(Identifiers.StaticNodeDebugInfo)), [TypeModifier.Const])))
	              .toDeclStmt(null, [StmtModifier.Final]));
	      }
	      var /** @type {?} */ renderCompTypeVar = variable("renderType_" + identifierName(view.component.type)); // fix highlighting: `
	      if (view.viewIndex === 0) {
	          var /** @type {?} */ templateUrlInfo = void 0;
	          if (view.component.template.templateUrl == identifierModuleUrl(view.component.type)) {
	              templateUrlInfo =
	                  identifierModuleUrl(view.component.type) + " class " + identifierName(view.component.type) + " - inline template";
	          }
	          else {
	              templateUrlInfo = view.component.template.templateUrl;
	          }
	          targetStatements.push(renderCompTypeVar
	              .set(importExpr(createIdentifier(Identifiers.createRenderComponentType)).callFn([
	              view.genConfig.genDebugInfo ? literal(templateUrlInfo) : literal(''),
	              literal(view.component.template.ngContentSelectors.length),
	              ViewEncapsulationEnum.fromValue(view.component.template.encapsulation),
	              view.styles,
	              literalMap(view.animations.map(function (entry) { return [entry.name, entry.fnExp]; })),
	          ]))
	              .toDeclStmt(importType(createIdentifier(Identifiers.RenderComponentType))));
	      }
	      var /** @type {?} */ viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar);
	      targetStatements.push(viewClass);
	  }
	  /**
	   * @param {?} node
	   * @return {?}
	   */
	  function createStaticNodeDebugInfo(node) {
	      var /** @type {?} */ compileElement = node instanceof CompileElement ? node : null;
	      var /** @type {?} */ providerTokens = [];
	      var /** @type {?} */ componentToken = NULL_EXPR;
	      var /** @type {?} */ varTokenEntries = [];
	      if (isPresent(compileElement)) {
	          providerTokens = compileElement.getProviderTokens();
	          if (isPresent(compileElement.component)) {
	              componentToken = createDiTokenExpression(identifierToken(compileElement.component.type));
	          }
	          Object.keys(compileElement.referenceTokens).forEach(function (varName) {
	              var /** @type {?} */ token = compileElement.referenceTokens[varName];
	              varTokenEntries.push([varName, isPresent(token) ? createDiTokenExpression(token) : NULL_EXPR]);
	          });
	      }
	      return importExpr(createIdentifier(Identifiers.StaticNodeDebugInfo))
	          .instantiate([
	          literalArr(providerTokens, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])),
	          componentToken,
	          literalMap(varTokenEntries, new MapType(DYNAMIC_TYPE, [TypeModifier.Const]))
	      ], importType(createIdentifier(Identifiers.StaticNodeDebugInfo), null, [TypeModifier.Const]));
	  }
	  /**
	   * @param {?} view
	   * @param {?} renderCompTypeVar
	   * @param {?} nodeDebugInfosVar
	   * @return {?}
	   */
	  function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) {
	      var /** @type {?} */ viewConstructorArgs = [
	          new FnParam(ViewConstructorVars.viewUtils.name, importType(createIdentifier(Identifiers.ViewUtils))),
	          new FnParam(ViewConstructorVars.parentView.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	          new FnParam(ViewConstructorVars.parentIndex.name, NUMBER_TYPE),
	          new FnParam(ViewConstructorVars.parentElement.name, DYNAMIC_TYPE)
	      ];
	      var /** @type {?} */ superConstructorArgs = [
	          variable(view.className), renderCompTypeVar, ViewTypeEnum.fromValue(view.viewType),
	          ViewConstructorVars.viewUtils, ViewConstructorVars.parentView, ViewConstructorVars.parentIndex,
	          ViewConstructorVars.parentElement,
	          ChangeDetectorStatusEnum.fromValue(getChangeDetectionMode(view))
	      ];
	      if (view.genConfig.genDebugInfo) {
	          superConstructorArgs.push(nodeDebugInfosVar);
	      }
	      if (view.viewType === ViewType.EMBEDDED) {
	          viewConstructorArgs.push(new FnParam('declaredViewContainer', importType(createIdentifier(Identifiers.ViewContainer))));
	          superConstructorArgs.push(variable('declaredViewContainer'));
	      }
	      var /** @type {?} */ viewMethods = [
	          new ClassMethod('createInternal', [new FnParam(rootSelectorVar.name, STRING_TYPE)], generateCreateMethod(view), importType(createIdentifier(Identifiers.ComponentRef), [DYNAMIC_TYPE])),
	          new ClassMethod('injectorGetInternal', [
	              new FnParam(InjectMethodVars$1.token.name, DYNAMIC_TYPE),
	              // Note: Can't use o.INT_TYPE here as the method in AppView uses number
	              new FnParam(InjectMethodVars$1.requestNodeIndex.name, NUMBER_TYPE),
	              new FnParam(InjectMethodVars$1.notFoundResult.name, DYNAMIC_TYPE)
	          ], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), InjectMethodVars$1.notFoundResult), DYNAMIC_TYPE),
	          new ClassMethod('detectChangesInternal', [new FnParam(DetectChangesVars.throwOnChange.name, BOOL_TYPE)], generateDetectChangesMethod(view)),
	          new ClassMethod('dirtyParentQueriesInternal', [], view.dirtyParentQueriesMethod.finish()),
	          new ClassMethod('destroyInternal', [], generateDestroyMethod(view)),
	          new ClassMethod('detachInternal', [], view.detachMethod.finish()),
	          generateVisitRootNodesMethod(view), generateVisitProjectableNodesMethod(view),
	          generateCreateEmbeddedViewsMethod(view)
	      ].filter(function (method) { return method.body.length > 0; });
	      var /** @type {?} */ superClass = view.genConfig.genDebugInfo ? Identifiers.DebugAppView : Identifiers.AppView;
	      var /** @type {?} */ viewClass = createClassStmt({
	          name: view.className,
	          parent: importExpr(createIdentifier(superClass), [getContextType(view)]),
	          parentArgs: superConstructorArgs,
	          ctorParams: viewConstructorArgs,
	          builders: [{ methods: viewMethods }, view]
	      });
	      return viewClass;
	  }
	  /**
	   * @param {?} view
	   * @return {?}
	   */
	  function generateDestroyMethod(view) {
	      var /** @type {?} */ stmts = [];
	      view.viewContainers.forEach(function (viewContainer) {
	          stmts.push(viewContainer.callMethod('destroyNestedViews', []).toStmt());
	      });
	      view.viewChildren.forEach(function (viewChild) { stmts.push(viewChild.callMethod('destroy', []).toStmt()); });
	      stmts.push.apply(stmts, view.destroyMethod.finish());
	      return stmts;
	  }
	  /**
	   * @param {?} view
	   * @return {?}
	   */
	  function generateCreateMethod(view) {
	      var /** @type {?} */ parentRenderNodeExpr = NULL_EXPR;
	      var /** @type {?} */ parentRenderNodeStmts = [];
	      if (view.viewType === ViewType.COMPONENT) {
	          parentRenderNodeExpr =
	              ViewProperties.renderer.callMethod('createViewRoot', [THIS_EXPR.prop('parentElement')]);
	          parentRenderNodeStmts =
	              [parentRenderNodeVar.set(parentRenderNodeExpr)
	                      .toDeclStmt(importType(view.genConfig.renderTypes.renderNode), [StmtModifier.Final])];
	      }
	      var /** @type {?} */ resultExpr;
	      if (view.viewType === ViewType.HOST) {
	          var /** @type {?} */ hostEl = (view.nodes[0]);
	          resultExpr =
	              importExpr(createIdentifier(Identifiers.ComponentRef_), [DYNAMIC_TYPE]).instantiate([
	                  literal(hostEl.nodeIndex), THIS_EXPR, hostEl.renderNode, hostEl.getComponent()
	              ]);
	      }
	      else {
	          resultExpr = NULL_EXPR;
	      }
	      var /** @type {?} */ allNodesExpr = ViewProperties.renderer.cast(DYNAMIC_TYPE)
	          .prop('directRenderer')
	          .conditional(NULL_EXPR, literalArr(view.nodes.map(function (node) { return node.renderNode; })));
	      return parentRenderNodeStmts.concat(view.createMethod.finish(), [
	          THIS_EXPR
	              .callMethod('init', [
	              view.lastRenderNode,
	              allNodesExpr,
	              view.disposables.length ? literalArr(view.disposables) : NULL_EXPR,
	          ])
	              .toStmt(),
	          new ReturnStatement(resultExpr)
	      ]);
	  }
	  /**
	   * @param {?} view
	   * @return {?}
	   */
	  function generateDetectChangesMethod(view) {
	      var /** @type {?} */ stmts = [];
	      if (view.animationBindingsMethod.isEmpty() && view.detectChangesInInputsMethod.isEmpty() &&
	          view.updateContentQueriesMethod.isEmpty() &&
	          view.afterContentLifecycleCallbacksMethod.isEmpty() &&
	          view.detectChangesRenderPropertiesMethod.isEmpty() &&
	          view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty() &&
	          view.viewContainers.length === 0 && view.viewChildren.length === 0) {
	          return stmts;
	      }
	      stmts.push.apply(stmts, view.animationBindingsMethod.finish());
	      stmts.push.apply(stmts, view.detectChangesInInputsMethod.finish());
	      view.viewContainers.forEach(function (viewContainer) {
	          stmts.push(viewContainer.callMethod('detectChangesInNestedViews', [DetectChangesVars.throwOnChange])
	              .toStmt());
	      });
	      var /** @type {?} */ afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());
	      if (afterContentStmts.length > 0) {
	          stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterContentStmts));
	      }
	      stmts.push.apply(stmts, view.detectChangesRenderPropertiesMethod.finish());
	      view.viewChildren.forEach(function (viewChild) {
	          stmts.push(viewChild.callMethod('internalDetectChanges', [DetectChangesVars.throwOnChange]).toStmt());
	      });
	      var /** @type {?} */ afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());
	      if (afterViewStmts.length > 0) {
	          stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterViewStmts));
	      }
	      var /** @type {?} */ varStmts = [];
	      var /** @type {?} */ readVars = findReadVarNames(stmts);
	      if (readVars.has(DetectChangesVars.changed.name)) {
	          varStmts.push(DetectChangesVars.changed.set(literal(true)).toDeclStmt(BOOL_TYPE));
	      }
	      if (readVars.has(DetectChangesVars.changes.name)) {
	          varStmts.push(DetectChangesVars.changes.set(NULL_EXPR)
	              .toDeclStmt(new MapType(importType(createIdentifier(Identifiers.SimpleChange)))));
	      }
	      varStmts.push.apply(varStmts, createSharedBindingVariablesIfNeeded(stmts));
	      return varStmts.concat(stmts);
	  }
	  /**
	   * @param {?} statements
	   * @param {?} value
	   * @return {?}
	   */
	  function addReturnValuefNotEmpty(statements, value) {
	      if (statements.length > 0) {
	          return statements.concat([new ReturnStatement(value)]);
	      }
	      else {
	          return statements;
	      }
	  }
	  /**
	   * @param {?} view
	   * @return {?}
	   */
	  function getContextType(view) {
	      if (view.viewType === ViewType.COMPONENT) {
	          return importType(view.component.type);
	      }
	      return DYNAMIC_TYPE;
	  }
	  /**
	   * @param {?} view
	   * @return {?}
	   */
	  function getChangeDetectionMode(view) {
	      var /** @type {?} */ mode;
	      if (view.viewType === ViewType.COMPONENT) {
	          mode = isDefaultChangeDetectionStrategy(view.component.changeDetection) ?
	              ChangeDetectorStatus.CheckAlways :
	              ChangeDetectorStatus.CheckOnce;
	      }
	      else {
	          mode = ChangeDetectorStatus.CheckAlways;
	      }
	      return mode;
	  }
	  /**
	   * @param {?} view
	   * @return {?}
	   */
	  function generateVisitRootNodesMethod(view) {
	      var /** @type {?} */ cbVar = variable('cb');
	      var /** @type {?} */ ctxVar = variable('ctx');
	      var /** @type {?} */ stmts = generateVisitNodesStmts(view.rootNodes, cbVar, ctxVar);
	      return new ClassMethod('visitRootNodesInternal', [new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)], stmts);
	  }
	  /**
	   * @param {?} view
	   * @return {?}
	   */
	  function generateVisitProjectableNodesMethod(view) {
	      var /** @type {?} */ nodeIndexVar = variable('nodeIndex');
	      var /** @type {?} */ ngContentIndexVar = variable('ngContentIndex');
	      var /** @type {?} */ cbVar = variable('cb');
	      var /** @type {?} */ ctxVar = variable('ctx');
	      var /** @type {?} */ stmts = [];
	      view.nodes.forEach(function (node) {
	          if (node instanceof CompileElement && node.component) {
	              node.contentNodesByNgContentIndex.forEach(function (projectedNodes, ngContentIndex) {
	                  stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex))
	                      .and(ngContentIndexVar.equals(literal(ngContentIndex))), generateVisitNodesStmts(projectedNodes, cbVar, ctxVar)));
	              });
	          }
	      });
	      return new ClassMethod('visitProjectableNodesInternal', [
	          new FnParam(nodeIndexVar.name, NUMBER_TYPE),
	          new FnParam(ngContentIndexVar.name, NUMBER_TYPE),
	          new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)
	      ], stmts);
	  }
	  /**
	   * @param {?} nodes
	   * @param {?} cb
	   * @param {?} ctx
	   * @return {?}
	   */
	  function generateVisitNodesStmts(nodes, cb, ctx) {
	      var /** @type {?} */ stmts = [];
	      nodes.forEach(function (node) {
	          switch (node.type) {
	              case CompileViewRootNodeType.Node:
	                  stmts.push(cb.callFn([node.expr, ctx]).toStmt());
	                  break;
	              case CompileViewRootNodeType.ViewContainer:
	                  stmts.push(cb.callFn([node.expr.prop('nativeElement'), ctx]).toStmt());
	                  stmts.push(node.expr.callMethod('visitNestedViewRootNodes', [cb, ctx]).toStmt());
	                  break;
	              case CompileViewRootNodeType.NgContent:
	                  stmts.push(THIS_EXPR.callMethod('visitProjectedNodes', [literal(node.ngContentIndex), cb, ctx])
	                      .toStmt());
	                  break;
	          }
	      });
	      return stmts;
	  }
	  /**
	   * @param {?} view
	   * @return {?}
	   */
	  function generateCreateEmbeddedViewsMethod(view) {
	      var /** @type {?} */ nodeIndexVar = variable('nodeIndex');
	      var /** @type {?} */ stmts = [];
	      view.nodes.forEach(function (node) {
	          if (node instanceof CompileElement) {
	              if (node.embeddedView) {
	                  var /** @type {?} */ parentNodeIndex = node.isRootElement() ? null : node.parent.nodeIndex;
	                  stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex)), [new ReturnStatement(node.embeddedView.classExpr.instantiate([
	                          ViewProperties.viewUtils, THIS_EXPR, literal(node.nodeIndex), node.renderNode,
	                          node.viewContainer
	                      ]))]));
	              }
	          }
	      });
	      if (stmts.length > 0) {
	          stmts.push(new ReturnStatement(NULL_EXPR));
	      }
	      return new ClassMethod('createEmbeddedViewInternal', [new FnParam(nodeIndexVar.name, NUMBER_TYPE)], stmts, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE]));
	  }
	
	  var ViewCompileResult = (function () {
	      /**
	       * @param {?} statements
	       * @param {?} viewClassVar
	       * @param {?} dependencies
	       */
	      function ViewCompileResult(statements, viewClassVar, dependencies) {
	          this.statements = statements;
	          this.viewClassVar = viewClassVar;
	          this.dependencies = dependencies;
	      }
	      return ViewCompileResult;
	  }());
	  var ViewCompiler = (function () {
	      /**
	       * @param {?} _genConfig
	       * @param {?} _schemaRegistry
	       */
	      function ViewCompiler(_genConfig, _schemaRegistry) {
	          this._genConfig = _genConfig;
	          this._schemaRegistry = _schemaRegistry;
	      }
	      /**
	       * @param {?} component
	       * @param {?} template
	       * @param {?} styles
	       * @param {?} pipes
	       * @param {?} compiledAnimations
	       * @return {?}
	       */
	      ViewCompiler.prototype.compileComponent = function (component, template, styles, pipes, compiledAnimations) {
	          var /** @type {?} */ dependencies = [];
	          var /** @type {?} */ view = new CompileView(component, this._genConfig, pipes, styles, compiledAnimations, 0, CompileElement.createNull(), [], dependencies);
	          var /** @type {?} */ statements = [];
	          buildView(view, template, dependencies);
	          // Need to separate binding from creation to be able to refer to
	          // variables that have been declared after usage.
	          bindView(view, template, this._schemaRegistry);
	          finishView(view, statements);
	          return new ViewCompileResult(statements, view.classExpr.name, dependencies);
	      };
	      ViewCompiler.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      ViewCompiler.ctorParameters = function () { return [
	          { type: CompilerConfig, },
	          { type: ElementSchemaRegistry, },
	      ]; };
	      return ViewCompiler;
	  }());
	
	  var AnimationEntryCompileResult = (function () {
	      /**
	       * @param {?} name
	       * @param {?} statements
	       * @param {?} fnExp
	       */
	      function AnimationEntryCompileResult(name, statements, fnExp) {
	          this.name = name;
	          this.statements = statements;
	          this.fnExp = fnExp;
	      }
	      return AnimationEntryCompileResult;
	  }());
	  var AnimationCompiler = (function () {
	      function AnimationCompiler() {
	      }
	      /**
	       * @param {?} factoryNamePrefix
	       * @param {?} parsedAnimations
	       * @return {?}
	       */
	      AnimationCompiler.prototype.compile = function (factoryNamePrefix, parsedAnimations) {
	          return parsedAnimations.map(function (entry) {
	              var /** @type {?} */ factoryName = factoryNamePrefix + "_" + entry.name;
	              var /** @type {?} */ visitor = new _AnimationBuilder(entry.name, factoryName);
	              return visitor.build(entry);
	          });
	      };
	      return AnimationCompiler;
	  }());
	  var /** @type {?} */ _ANIMATION_FACTORY_ELEMENT_VAR = variable('element');
	  var /** @type {?} */ _ANIMATION_DEFAULT_STATE_VAR = variable('defaultStateStyles');
	  var /** @type {?} */ _ANIMATION_FACTORY_VIEW_VAR = variable('view');
	  var /** @type {?} */ _ANIMATION_FACTORY_VIEW_CONTEXT = _ANIMATION_FACTORY_VIEW_VAR.prop('animationContext');
	  var /** @type {?} */ _ANIMATION_FACTORY_RENDERER_VAR = _ANIMATION_FACTORY_VIEW_VAR.prop('renderer');
	  var /** @type {?} */ _ANIMATION_CURRENT_STATE_VAR = variable('currentState');
	  var /** @type {?} */ _ANIMATION_NEXT_STATE_VAR = variable('nextState');
	  var /** @type {?} */ _ANIMATION_PLAYER_VAR = variable('player');
	  var /** @type {?} */ _ANIMATION_TIME_VAR = variable('totalTime');
	  var /** @type {?} */ _ANIMATION_START_STATE_STYLES_VAR = variable('startStateStyles');
	  var /** @type {?} */ _ANIMATION_END_STATE_STYLES_VAR = variable('endStateStyles');
	  var /** @type {?} */ _ANIMATION_COLLECTED_STYLES = variable('collectedStyles');
	  var /** @type {?} */ _PREVIOUS_ANIMATION_PLAYERS = variable('previousPlayers');
	  var /** @type {?} */ _EMPTY_MAP = literalMap([]);
	  var /** @type {?} */ _EMPTY_ARRAY = literalArr([]);
	  var _AnimationBuilder = (function () {
	      /**
	       * @param {?} animationName
	       * @param {?} factoryName
	       */
	      function _AnimationBuilder(animationName, factoryName) {
	          this.animationName = animationName;
	          this._fnVarName = factoryName + '_factory';
	          this._statesMapVarName = factoryName + '_states';
	          this._statesMapVar = variable(this._statesMapVarName);
	      }
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      _AnimationBuilder.prototype.visitAnimationStyles = function (ast, context) {
	          var /** @type {?} */ stylesArr = [];
	          if (context.isExpectingFirstStyleStep) {
	              stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR);
	              context.isExpectingFirstStyleStep = false;
	          }
	          ast.styles.forEach(function (entry) {
	              var /** @type {?} */ entries = Object.keys(entry).map(function (key) { return [key, literal(entry[key])]; });
	              stylesArr.push(literalMap(entries));
	          });
	          return importExpr(createIdentifier(Identifiers.AnimationStyles)).instantiate([
	              importExpr(createIdentifier(Identifiers.collectAndResolveStyles)).callFn([
	                  _ANIMATION_COLLECTED_STYLES, literalArr(stylesArr)
	              ])
	          ]);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      _AnimationBuilder.prototype.visitAnimationKeyframe = function (ast, context) {
	          return importExpr(createIdentifier(Identifiers.AnimationKeyframe)).instantiate([
	              literal(ast.offset), ast.styles.visit(this, context)
	          ]);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      _AnimationBuilder.prototype.visitAnimationStep = function (ast, context) {
	          var _this = this;
	          if (context.endStateAnimateStep === ast) {
	              return this._visitEndStateAnimation(ast, context);
	          }
	          var /** @type {?} */ startingStylesExpr = ast.startingStyles.visit(this, context);
	          var /** @type {?} */ keyframeExpressions = ast.keyframes.map(function (keyframeEntry) { return keyframeEntry.visit(_this, context); });
	          return this._callAnimateMethod(ast, startingStylesExpr, literalArr(keyframeExpressions), context);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      _AnimationBuilder.prototype._visitEndStateAnimation = function (ast, context) {
	          var _this = this;
	          var /** @type {?} */ startingStylesExpr = ast.startingStyles.visit(this, context);
	          var /** @type {?} */ keyframeExpressions = ast.keyframes.map(function (keyframe) { return keyframe.visit(_this, context); });
	          var /** @type {?} */ keyframesExpr = importExpr(createIdentifier(Identifiers.balanceAnimationKeyframes)).callFn([
	              _ANIMATION_COLLECTED_STYLES, _ANIMATION_END_STATE_STYLES_VAR,
	              literalArr(keyframeExpressions)
	          ]);
	          return this._callAnimateMethod(ast, startingStylesExpr, keyframesExpr, context);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} startingStylesExpr
	       * @param {?} keyframesExpr
	       * @param {?} context
	       * @return {?}
	       */
	      _AnimationBuilder.prototype._callAnimateMethod = function (ast, startingStylesExpr, keyframesExpr, context) {
	          var /** @type {?} */ previousStylesValue = _EMPTY_ARRAY;
	          if (context.isExpectingFirstAnimateStep) {
	              previousStylesValue = _PREVIOUS_ANIMATION_PLAYERS;
	              context.isExpectingFirstAnimateStep = false;
	          }
	          context.totalTransitionTime += ast.duration + ast.delay;
	          return _ANIMATION_FACTORY_RENDERER_VAR.callMethod('animate', [
	              _ANIMATION_FACTORY_ELEMENT_VAR, startingStylesExpr, keyframesExpr, literal(ast.duration),
	              literal(ast.delay), literal(ast.easing), previousStylesValue
	          ]);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      _AnimationBuilder.prototype.visitAnimationSequence = function (ast, context) {
	          var _this = this;
	          var /** @type {?} */ playerExprs = ast.steps.map(function (step) { return step.visit(_this, context); });
	          return importExpr(createIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([
	              literalArr(playerExprs)
	          ]);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      _AnimationBuilder.prototype.visitAnimationGroup = function (ast, context) {
	          var _this = this;
	          var /** @type {?} */ playerExprs = ast.steps.map(function (step) { return step.visit(_this, context); });
	          return importExpr(createIdentifier(Identifiers.AnimationGroupPlayer)).instantiate([
	              literalArr(playerExprs)
	          ]);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      _AnimationBuilder.prototype.visitAnimationStateDeclaration = function (ast, context) {
	          var /** @type {?} */ flatStyles = {};
	          _getStylesArray(ast).forEach(function (entry) { Object.keys(entry).forEach(function (key) { flatStyles[key] = entry[key]; }); });
	          context.stateMap.registerState(ast.stateName, flatStyles);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      _AnimationBuilder.prototype.visitAnimationStateTransition = function (ast, context) {
	          var /** @type {?} */ steps = ast.animation.steps;
	          var /** @type {?} */ lastStep = steps[steps.length - 1];
	          if (_isEndStateAnimateStep(lastStep)) {
	              context.endStateAnimateStep = (lastStep);
	          }
	          context.totalTransitionTime = 0;
	          context.isExpectingFirstStyleStep = true;
	          context.isExpectingFirstAnimateStep = true;
	          var /** @type {?} */ stateChangePreconditions = [];
	          ast.stateChanges.forEach(function (stateChange) {
	              stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR, stateChange.fromState)
	                  .and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR, stateChange.toState)));
	              if (stateChange.fromState != ANY_STATE) {
	                  context.stateMap.registerState(stateChange.fromState);
	              }
	              if (stateChange.toState != ANY_STATE) {
	                  context.stateMap.registerState(stateChange.toState);
	              }
	          });
	          var /** @type {?} */ animationPlayerExpr = ast.animation.visit(this, context);
	          var /** @type {?} */ reducedStateChangesPrecondition = stateChangePreconditions.reduce(function (a, b) { return a.or(b); });
	          var /** @type {?} */ precondition = _ANIMATION_PLAYER_VAR.equals(NULL_EXPR).and(reducedStateChangesPrecondition);
	          var /** @type {?} */ animationStmt = _ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt();
	          var /** @type {?} */ totalTimeStmt = _ANIMATION_TIME_VAR.set(literal(context.totalTransitionTime)).toStmt();
	          return new IfStmt(precondition, [animationStmt, totalTimeStmt]);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} context
	       * @return {?}
	       */
	      _AnimationBuilder.prototype.visitAnimationEntry = function (ast, context) {
	          var _this = this;
	          // visit each of the declarations first to build the context state map
	          ast.stateDeclarations.forEach(function (def) { return def.visit(_this, context); });
	          // this should always be defined even if the user overrides it
	          context.stateMap.registerState(DEFAULT_STATE, {});
	          var /** @type {?} */ statements = [];
	          statements.push(_PREVIOUS_ANIMATION_PLAYERS
	              .set(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod('getAnimationPlayers', [
	              _ANIMATION_FACTORY_ELEMENT_VAR,
	              _ANIMATION_NEXT_STATE_VAR.equals(literal(EMPTY_STATE))
	                  .conditional(NULL_EXPR, literal(this.animationName))
	          ]))
	              .toDeclStmt());
	          statements.push(_ANIMATION_COLLECTED_STYLES.set(_EMPTY_MAP).toDeclStmt());
	          statements.push(_ANIMATION_PLAYER_VAR.set(NULL_EXPR).toDeclStmt());
	          statements.push(_ANIMATION_TIME_VAR.set(literal(0)).toDeclStmt());
	          statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(literal(DEFAULT_STATE)))
	              .toDeclStmt());
	          statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR))
	              .toDeclStmt());
	          statements.push(new IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
	          statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR))
	              .toDeclStmt());
	          statements.push(new IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
	          var /** @type {?} */ RENDER_STYLES_FN = importExpr(createIdentifier(Identifiers.renderStyles));
	          ast.stateTransitions.forEach(function (transAst) { return statements.push(transAst.visit(_this, context)); });
	          // this check ensures that the animation factory always returns a player
	          // so that the onDone callback can be used for tracking
	          statements.push(new IfStmt(_ANIMATION_PLAYER_VAR.equals(NULL_EXPR), [_ANIMATION_PLAYER_VAR
	                  .set(importExpr(createIdentifier(Identifiers.NoOpAnimationPlayer)).instantiate([]))
	                  .toStmt()]));
	          // once complete we want to apply the styles on the element
	          // since the destination state's values should persist once
	          // the animation sequence has completed.
	          statements.push(_ANIMATION_PLAYER_VAR
	              .callMethod('onDone', [fn([], [
	                  _ANIMATION_PLAYER_VAR.callMethod('destroy', []).toStmt(),
	                  RENDER_STYLES_FN
	                      .callFn([
	                      _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR,
	                      importExpr(createIdentifier(Identifiers.prepareFinalAnimationStyles))
	                          .callFn([
	                          _ANIMATION_START_STATE_STYLES_VAR,
	                          _ANIMATION_END_STATE_STYLES_VAR
	                      ])
	                  ])
	                      .toStmt()
	              ])])
	              .toStmt());
	          statements.push(importExpr(createIdentifier(Identifiers.AnimationSequencePlayer))
	              .instantiate([_PREVIOUS_ANIMATION_PLAYERS])
	              .callMethod('destroy', [])
	              .toStmt());
	          // before we start any animation we want to clear out the starting
	          // styles from the element's style property (since they were placed
	          // there at the end of the last animation
	          statements.push(RENDER_STYLES_FN
	              .callFn([
	              _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR,
	              importExpr(createIdentifier(Identifiers.clearStyles))
	                  .callFn([_ANIMATION_START_STATE_STYLES_VAR])
	          ])
	              .toStmt());
	          statements.push(_ANIMATION_FACTORY_VIEW_CONTEXT
	              .callMethod('queueAnimation', [
	              _ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName),
	              _ANIMATION_PLAYER_VAR
	          ])
	              .toStmt());
	          statements.push(new ReturnStatement(importExpr(createIdentifier(Identifiers.AnimationTransition)).instantiate([
	              _ANIMATION_PLAYER_VAR, _ANIMATION_CURRENT_STATE_VAR, _ANIMATION_NEXT_STATE_VAR,
	              _ANIMATION_TIME_VAR
	          ])));
	          return fn([
	              new FnParam(_ANIMATION_FACTORY_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	              new FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name, DYNAMIC_TYPE),
	              new FnParam(_ANIMATION_CURRENT_STATE_VAR.name, DYNAMIC_TYPE),
	              new FnParam(_ANIMATION_NEXT_STATE_VAR.name, DYNAMIC_TYPE)
	          ], statements, importType(createIdentifier(Identifiers.AnimationTransition)));
	      };
	      /**
	       * @param {?} ast
	       * @return {?}
	       */
	      _AnimationBuilder.prototype.build = function (ast) {
	          var /** @type {?} */ context = new _AnimationBuilderContext();
	          var /** @type {?} */ fnStatement = ast.visit(this, context).toDeclStmt(this._fnVarName);
	          var /** @type {?} */ fnVariable = variable(this._fnVarName);
	          var /** @type {?} */ lookupMap = [];
	          Object.keys(context.stateMap.states).forEach(function (stateName) {
	              var /** @type {?} */ value = context.stateMap.states[stateName];
	              var /** @type {?} */ variableValue = _EMPTY_MAP;
	              if (isPresent(value)) {
	                  var /** @type {?} */ styleMap_1 = [];
	                  Object.keys(value).forEach(function (key) { styleMap_1.push([key, literal(value[key])]); });
	                  variableValue = literalMap(styleMap_1);
	              }
	              lookupMap.push([stateName, variableValue]);
	          });
	          var /** @type {?} */ compiledStatesMapStmt = this._statesMapVar.set(literalMap(lookupMap)).toDeclStmt();
	          var /** @type {?} */ statements = [compiledStatesMapStmt, fnStatement];
	          return new AnimationEntryCompileResult(this.animationName, statements, fnVariable);
	      };
	      return _AnimationBuilder;
	  }());
	  var _AnimationBuilderContext = (function () {
	      function _AnimationBuilderContext() {
	          this.stateMap = new _AnimationBuilderStateMap();
	          this.endStateAnimateStep = null;
	          this.isExpectingFirstStyleStep = false;
	          this.isExpectingFirstAnimateStep = false;
	          this.totalTransitionTime = 0;
	      }
	      return _AnimationBuilderContext;
	  }());
	  var _AnimationBuilderStateMap = (function () {
	      function _AnimationBuilderStateMap() {
	          this._states = {};
	      }
	      Object.defineProperty(_AnimationBuilderStateMap.prototype, "states", {
	          /**
	           * @return {?}
	           */
	          get: function () { return this._states; },
	          enumerable: true,
	          configurable: true
	      });
	      /**
	       * @param {?} name
	       * @param {?=} value
	       * @return {?}
	       */
	      _AnimationBuilderStateMap.prototype.registerState = function (name, value) {
	          if (value === void 0) { value = null; }
	          var /** @type {?} */ existingEntry = this._states[name];
	          if (!existingEntry) {
	              this._states[name] = value;
	          }
	      };
	      return _AnimationBuilderStateMap;
	  }());
	  /**
	   * @param {?} value
	   * @param {?} animationState
	   * @return {?}
	   */
	  function _compareToAnimationStateExpr(value, animationState) {
	      var /** @type {?} */ emptyStateLiteral = literal(EMPTY_STATE);
	      switch (animationState) {
	          case EMPTY_STATE:
	              return value.equals(emptyStateLiteral);
	          case ANY_STATE:
	              return literal(true);
	          default:
	              return value.equals(literal(animationState));
	      }
	  }
	  /**
	   * @param {?} step
	   * @return {?}
	   */
	  function _isEndStateAnimateStep(step) {
	      // the final animation step is characterized by having only TWO
	      // keyframe values and it must have zero styles for both keyframes
	      if (step instanceof AnimationStepAst && step.duration > 0 && step.keyframes.length == 2) {
	          var /** @type {?} */ styles1 = _getStylesArray(step.keyframes[0])[0];
	          var /** @type {?} */ styles2 = _getStylesArray(step.keyframes[1])[0];
	          return Object.keys(styles1).length === 0 && Object.keys(styles2).length === 0;
	      }
	      return false;
	  }
	  /**
	   * @param {?} obj
	   * @return {?}
	   */
	  function _getStylesArray(obj) {
	      return obj.styles.styles;
	  }
	
	  /**
	   * @license undefined
	    * Copyright Google Inc. All Rights Reserved.
	    * *
	    * Use of this source code is governed by an MIT-style license that can be
	    * found in the LICENSE file at https://angular.io/license
	   */
	  var GeneratedFile = (function () {
	      /**
	       * @param {?} srcFileUrl
	       * @param {?} genFileUrl
	       * @param {?} source
	       */
	      function GeneratedFile(srcFileUrl, genFileUrl, source) {
	          this.srcFileUrl = srcFileUrl;
	          this.genFileUrl = genFileUrl;
	          this.source = source;
	      }
	      return GeneratedFile;
	  }());
	
	  /**
	   * @license undefined
	    * Copyright Google Inc. All Rights Reserved.
	    * *
	    * Use of this source code is governed by an MIT-style license that can be
	    * found in the LICENSE file at https://angular.io/license
	   * @param {?} fileName
	   * @param {?=} options
	   * @return {?}
	   */
	  function filterFileByPatterns(fileName, options) {
	      if (options === void 0) { options = {}; }
	      var /** @type {?} */ match = true;
	      if (options.includeFilePattern) {
	          match = match && !!options.includeFilePattern.exec(fileName);
	      }
	      if (options.excludeFilePattern) {
	          match = match && !options.excludeFilePattern.exec(fileName);
	      }
	      return match;
	  }
	
	  var AotCompiler = (function () {
	      /**
	       * @param {?} _metadataResolver
	       * @param {?} _templateParser
	       * @param {?} _styleCompiler
	       * @param {?} _viewCompiler
	       * @param {?} _dirWrapperCompiler
	       * @param {?} _ngModuleCompiler
	       * @param {?} _outputEmitter
	       * @param {?} _summaryResolver
	       * @param {?} _localeId
	       * @param {?} _translationFormat
	       * @param {?} _animationParser
	       * @param {?} _staticReflector
	       * @param {?} _options
	       */
	      function AotCompiler(_metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _dirWrapperCompiler, _ngModuleCompiler, _outputEmitter, _summaryResolver, _localeId, _translationFormat, _animationParser, _staticReflector, _options) {
	          this._metadataResolver = _metadataResolver;
	          this._templateParser = _templateParser;
	          this._styleCompiler = _styleCompiler;
	          this._viewCompiler = _viewCompiler;
	          this._dirWrapperCompiler = _dirWrapperCompiler;
	          this._ngModuleCompiler = _ngModuleCompiler;
	          this._outputEmitter = _outputEmitter;
	          this._summaryResolver = _summaryResolver;
	          this._localeId = _localeId;
	          this._translationFormat = _translationFormat;
	          this._animationParser = _animationParser;
	          this._staticReflector = _staticReflector;
	          this._options = _options;
	          this._animationCompiler = new AnimationCompiler();
	      }
	      /**
	       * @return {?}
	       */
	      AotCompiler.prototype.clearCache = function () { this._metadataResolver.clearCache(); };
	      /**
	       * @param {?} rootFiles
	       * @return {?}
	       */
	      AotCompiler.prototype.compileAll = function (rootFiles) {
	          var _this = this;
	          var /** @type {?} */ programSymbols = extractProgramSymbols(this._staticReflector, rootFiles, this._options);
	          var _a = analyzeAndValidateNgModules(programSymbols, this._options, this._metadataResolver), ngModuleByPipeOrDirective = _a.ngModuleByPipeOrDirective, files = _a.files, ngModules = _a.ngModules;
	          return Promise
	              .all(ngModules.map(function (ngModule) { return _this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false); }))
	              .then(function () {
	              var /** @type {?} */ sourceModules = files.map(function (file) { return _this._compileSrcFile(file.srcUrl, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules); });
	              return ListWrapper.flatten(sourceModules);
	          });
	      };
	      /**
	       * @param {?} srcFileUrl
	       * @param {?} ngModuleByPipeOrDirective
	       * @param {?} directives
	       * @param {?} pipes
	       * @param {?} ngModules
	       * @return {?}
	       */
	      AotCompiler.prototype._compileSrcFile = function (srcFileUrl, ngModuleByPipeOrDirective, directives, pipes, ngModules) {
	          var _this = this;
	          var /** @type {?} */ fileSuffix = _splitTypescriptSuffix(srcFileUrl)[1];
	          var /** @type {?} */ statements = [];
	          var /** @type {?} */ exportedVars = [];
	          var /** @type {?} */ generatedFiles = [];
	          // write summary files
	          var /** @type {?} */ summaries = ngModules.map(function (ref) { return _this._metadataResolver.getNgModuleSummary(ref); }).concat(directives.map(function (ref) { return _this._metadataResolver.getDirectiveSummary(ref); }), pipes.map(function (ref) { return _this._metadataResolver.getPipeSummary(ref); }));
	          generatedFiles.push(this._summaryResolver.serializeSummaries(srcFileUrl, summaries));
	          // compile all ng modules
	          exportedVars.push.apply(exportedVars, ngModules.map(function (ngModuleType) { return _this._compileModule(ngModuleType, statements); }));
	          // compile directive wrappers
	          exportedVars.push.apply(exportedVars, directives.map(function (directiveType) { return _this._compileDirectiveWrapper(directiveType, statements); }));
	          // compile components
	          directives.forEach(function (dirType) {
	              var /** @type {?} */ compMeta = _this._metadataResolver.getDirectiveMetadata(/** @type {?} */ (dirType));
	              if (!compMeta.isComponent) {
	                  return Promise.resolve(null);
	              }
	              var /** @type {?} */ ngModule = ngModuleByPipeOrDirective.get(dirType);
	              if (!ngModule) {
	                  throw new Error("Internal Error: cannot determine the module for component " + identifierName(compMeta.type) + "!");
	              }
	              _assertComponent(compMeta);
	              // compile styles
	              var /** @type {?} */ stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);
	              stylesCompileResults.externalStylesheets.forEach(function (compiledStyleSheet) {
	                  generatedFiles.push(_this._codgenStyles(srcFileUrl, compiledStyleSheet, fileSuffix));
	              });
	              // compile components
	              exportedVars.push(_this._compileComponentFactory(compMeta, ngModule, fileSuffix, statements), _this._compileComponent(compMeta, ngModule, ngModule.transitiveModule.directives, stylesCompileResults.componentStylesheet, fileSuffix, statements));
	          });
	          if (statements.length > 0) {
	              var /** @type {?} */ srcModule = this._codegenSourceModule(srcFileUrl, _ngfactoryModuleUrl(srcFileUrl), statements, exportedVars);
	              generatedFiles.unshift(srcModule);
	          }
	          return generatedFiles;
	      };
	      /**
	       * @param {?} ngModuleType
	       * @param {?} targetStatements
	       * @return {?}
	       */
	      AotCompiler.prototype._compileModule = function (ngModuleType, targetStatements) {
	          var _this = this;
	          var /** @type {?} */ ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType);
	          var /** @type {?} */ providers = [];
	          if (this._localeId) {
	              providers.push({
	                  token: createIdentifierToken(Identifiers.LOCALE_ID),
	                  useValue: this._localeId,
	              });
	          }
	          if (this._translationFormat) {
	              providers.push({
	                  token: createIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),
	                  useValue: this._translationFormat
	              });
	          }
	          var /** @type {?} */ appCompileResult = this._ngModuleCompiler.compile(ngModule, providers);
	          appCompileResult.dependencies.forEach(function (dep) {
	              dep.placeholder.reference = _this._staticReflector.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(dep.comp)), _componentFactoryName(dep.comp));
	          });
	          targetStatements.push.apply(targetStatements, appCompileResult.statements);
	          return appCompileResult.ngModuleFactoryVar;
	      };
	      /**
	       * @param {?} directiveType
	       * @param {?} targetStatements
	       * @return {?}
	       */
	      AotCompiler.prototype._compileDirectiveWrapper = function (directiveType, targetStatements) {
	          var /** @type {?} */ dirMeta = this._metadataResolver.getDirectiveMetadata(directiveType);
	          var /** @type {?} */ dirCompileResult = this._dirWrapperCompiler.compile(dirMeta);
	          targetStatements.push.apply(targetStatements, dirCompileResult.statements);
	          return dirCompileResult.dirWrapperClassVar;
	      };
	      /**
	       * @param {?} compMeta
	       * @param {?} ngModule
	       * @param {?} fileSuffix
	       * @param {?} targetStatements
	       * @return {?}
	       */
	      AotCompiler.prototype._compileComponentFactory = function (compMeta, ngModule, fileSuffix, targetStatements) {
	          var /** @type {?} */ hostMeta = createHostComponentMeta(this._staticReflector.getStaticSymbol(identifierModuleUrl(compMeta.type), identifierName(compMeta.type) + "_Host"), compMeta);
	          var /** @type {?} */ hostViewFactoryVar = this._compileComponent(hostMeta, ngModule, [compMeta.type], null, fileSuffix, targetStatements);
	          var /** @type {?} */ compFactoryVar = _componentFactoryName(compMeta.type);
	          targetStatements.push(variable(compFactoryVar)
	              .set(importExpr(createIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)])
	              .instantiate([
	              literal(compMeta.selector),
	              variable(hostViewFactoryVar),
	              importExpr(compMeta.type),
	          ], importType(createIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)], [TypeModifier.Const])))
	              .toDeclStmt(null, [StmtModifier.Final]));
	          return compFactoryVar;
	      };
	      /**
	       * @param {?} compMeta
	       * @param {?} ngModule
	       * @param {?} directiveIdentifiers
	       * @param {?} componentStyles
	       * @param {?} fileSuffix
	       * @param {?} targetStatements
	       * @return {?}
	       */
	      AotCompiler.prototype._compileComponent = function (compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix, targetStatements) {
	          var _this = this;
	          var /** @type {?} */ parsedAnimations = this._animationParser.parseComponent(compMeta);
	          var /** @type {?} */ directives = directiveIdentifiers.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });
	          var /** @type {?} */ pipes = ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });
	          var /** @type {?} */ parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, ngModule.schemas, identifierName(compMeta.type));
	          var /** @type {?} */ stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);
	          var /** @type {?} */ compiledAnimations = this._animationCompiler.compile(identifierName(compMeta.type), parsedAnimations);
	          var /** @type {?} */ viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, pipes, compiledAnimations);
	          if (componentStyles) {
	              targetStatements.push.apply(targetStatements, _resolveStyleStatements(this._staticReflector, componentStyles, fileSuffix));
	          }
	          compiledAnimations.forEach(function (entry) { return targetStatements.push.apply(targetStatements, entry.statements); });
	          targetStatements.push.apply(targetStatements, _resolveViewStatements(this._staticReflector, viewResult));
	          return viewResult.viewClassVar;
	      };
	      /**
	       * @param {?} fileUrl
	       * @param {?} stylesCompileResult
	       * @param {?} fileSuffix
	       * @return {?}
	       */
	      AotCompiler.prototype._codgenStyles = function (fileUrl, stylesCompileResult, fileSuffix) {
	          _resolveStyleStatements(this._staticReflector, stylesCompileResult, fileSuffix);
	          return this._codegenSourceModule(fileUrl, _stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);
	      };
	      /**
	       * @param {?} srcFileUrl
	       * @param {?} genFileUrl
	       * @param {?} statements
	       * @param {?} exportedVars
	       * @return {?}
	       */
	      AotCompiler.prototype._codegenSourceModule = function (srcFileUrl, genFileUrl, statements, exportedVars) {
	          return new GeneratedFile(srcFileUrl, genFileUrl, this._outputEmitter.emitStatements(genFileUrl, statements, exportedVars));
	      };
	      return AotCompiler;
	  }());
	  /**
	   * @param {?} reflector
	   * @param {?} compileResult
	   * @return {?}
	   */
	  function _resolveViewStatements(reflector, compileResult) {
	      compileResult.dependencies.forEach(function (dep) {
	          if (dep instanceof ViewClassDependency) {
	              var /** @type {?} */ vfd = (dep);
	              vfd.placeholder.reference =
	                  reflector.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(vfd.comp)), dep.name);
	          }
	          else if (dep instanceof ComponentFactoryDependency$1) {
	              var /** @type {?} */ cfd = (dep);
	              cfd.placeholder.reference = reflector.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(cfd.comp)), _componentFactoryName(cfd.comp));
	          }
	          else if (dep instanceof DirectiveWrapperDependency) {
	              var /** @type {?} */ dwd = (dep);
	              dwd.placeholder.reference =
	                  reflector.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(dwd.dir)), dwd.name);
	          }
	      });
	      return compileResult.statements;
	  }
	  /**
	   * @param {?} reflector
	   * @param {?} compileResult
	   * @param {?} fileSuffix
	   * @return {?}
	   */
	  function _resolveStyleStatements(reflector, compileResult, fileSuffix) {
	      compileResult.dependencies.forEach(function (dep) {
	          dep.valuePlaceholder.reference = reflector.getStaticSymbol(_stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix), dep.name);
	      });
	      return compileResult.statements;
	  }
	  /**
	   * @param {?} dirUrl
	   * @return {?}
	   */
	  function _ngfactoryModuleUrl(dirUrl) {
	      var /** @type {?} */ urlWithSuffix = _splitTypescriptSuffix(dirUrl);
	      return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
	  }
	  /**
	   * @param {?} comp
	   * @return {?}
	   */
	  function _componentFactoryName(comp) {
	      return identifierName(comp) + "NgFactory";
	  }
	  /**
	   * @param {?} stylesheetUrl
	   * @param {?} shim
	   * @param {?} suffix
	   * @return {?}
	   */
	  function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
	      return "" + stylesheetUrl + (shim ? '.shim' : '') + ".ngstyle" + suffix;
	  }
	  /**
	   * @param {?} meta
	   * @return {?}
	   */
	  function _assertComponent(meta) {
	      if (!meta.isComponent) {
	          throw new Error("Could not compile '" + identifierName(meta.type) + "' because it is not a component.");
	      }
	  }
	  /**
	   * @param {?} path
	   * @return {?}
	   */
	  function _splitTypescriptSuffix(path) {
	      if (path.endsWith('.d.ts')) {
	          return [path.slice(0, -5), '.ts'];
	      }
	      var /** @type {?} */ lastDot = path.lastIndexOf('.');
	      if (lastDot !== -1) {
	          return [path.substring(0, lastDot), path.substring(lastDot)];
	      }
	      return [path, ''];
	  }
	  /**
	   * @param {?} programStaticSymbols
	   * @param {?} options
	   * @param {?} metadataResolver
	   * @return {?}
	   */
	  function analyzeNgModules(programStaticSymbols, options, metadataResolver) {
	      var _a = _createNgModules(programStaticSymbols, options, metadataResolver), ngModules = _a.ngModules, symbolsMissingModule = _a.symbolsMissingModule;
	      return _analyzeNgModules(ngModules, symbolsMissingModule);
	  }
	  /**
	   * @param {?} programStaticSymbols
	   * @param {?} options
	   * @param {?} metadataResolver
	   * @return {?}
	   */
	  function analyzeAndValidateNgModules(programStaticSymbols, options, metadataResolver) {
	      var /** @type {?} */ result = analyzeNgModules(programStaticSymbols, options, metadataResolver);
	      if (result.symbolsMissingModule && result.symbolsMissingModule.length) {
	          var /** @type {?} */ messages = result.symbolsMissingModule.map(function (s) { return ("Cannot determine the module for class " + s.name + " in " + s.filePath + "!"); });
	          throw new Error(messages.join('\n'));
	      }
	      return result;
	  }
	  /**
	   * @param {?} ngModuleMetas
	   * @param {?} symbolsMissingModule
	   * @return {?}
	   */
	  function _analyzeNgModules(ngModuleMetas, symbolsMissingModule) {
	      var /** @type {?} */ moduleMetasByRef = new Map();
	      ngModuleMetas.forEach(function (ngModule) { return moduleMetasByRef.set(ngModule.type.reference, ngModule); });
	      var /** @type {?} */ ngModuleByPipeOrDirective = new Map();
	      var /** @type {?} */ ngModulesByFile = new Map();
	      var /** @type {?} */ ngDirectivesByFile = new Map();
	      var /** @type {?} */ ngPipesByFile = new Map();
	      var /** @type {?} */ filePaths = new Set();
	      // Looping over all modules to construct:
	      // - a map from file to modules `ngModulesByFile`,
	      // - a map from file to directives `ngDirectivesByFile`,
	      // - a map from file to pipes `ngPipesByFile`,
	      // - a map from directive/pipe to module `ngModuleByPipeOrDirective`.
	      ngModuleMetas.forEach(function (ngModuleMeta) {
	          var /** @type {?} */ srcFileUrl = ngModuleMeta.type.reference.filePath;
	          filePaths.add(srcFileUrl);
	          ngModulesByFile.set(srcFileUrl, (ngModulesByFile.get(srcFileUrl) || []).concat(ngModuleMeta.type.reference));
	          ngModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
	              var /** @type {?} */ fileUrl = dirIdentifier.reference.filePath;
	              filePaths.add(fileUrl);
	              ngDirectivesByFile.set(fileUrl, (ngDirectivesByFile.get(fileUrl) || []).concat(dirIdentifier.reference));
	              ngModuleByPipeOrDirective.set(dirIdentifier.reference, ngModuleMeta);
	          });
	          ngModuleMeta.declaredPipes.forEach(function (pipeIdentifier) {
	              var /** @type {?} */ fileUrl = pipeIdentifier.reference.filePath;
	              filePaths.add(fileUrl);
	              ngPipesByFile.set(fileUrl, (ngPipesByFile.get(fileUrl) || []).concat(pipeIdentifier.reference));
	              ngModuleByPipeOrDirective.set(pipeIdentifier.reference, ngModuleMeta);
	          });
	      });
	      var /** @type {?} */ files = [];
	      filePaths.forEach(function (srcUrl) {
	          var /** @type {?} */ directives = ngDirectivesByFile.get(srcUrl) || [];
	          var /** @type {?} */ pipes = ngPipesByFile.get(srcUrl) || [];
	          var /** @type {?} */ ngModules = ngModulesByFile.get(srcUrl) || [];
	          files.push({ srcUrl: srcUrl, directives: directives, pipes: pipes, ngModules: ngModules });
	      });
	      return {
	          // map directive/pipe to module
	          ngModuleByPipeOrDirective: ngModuleByPipeOrDirective,
	          // list modules and directives for every source file
	          files: files,
	          ngModules: ngModuleMetas, symbolsMissingModule: symbolsMissingModule
	      };
	  }
	  /**
	   * @param {?} staticReflector
	   * @param {?} files
	   * @param {?=} options
	   * @return {?}
	   */
	  function extractProgramSymbols(staticReflector, files, options) {
	      if (options === void 0) { options = {}; }
	      var /** @type {?} */ staticSymbols = [];
	      files.filter(function (fileName) { return filterFileByPatterns(fileName, options); }).forEach(function (sourceFile) {
	          var /** @type {?} */ moduleMetadata = staticReflector.getModuleMetadata(sourceFile);
	          if (!moduleMetadata) {
	              console.error("WARNING: no metadata found for " + sourceFile);
	              return;
	          }
	          var /** @type {?} */ metadata = moduleMetadata['metadata'];
	          if (!metadata) {
	              return;
	          }
	          for (var _i = 0, _a = Object.keys(metadata); _i < _a.length; _i++) {
	              var symbol = _a[_i];
	              if (metadata[symbol] && metadata[symbol].__symbolic == 'error') {
	                  // Ignore symbols that are only included to record error information.
	                  continue;
	              }
	              staticSymbols.push(staticReflector.getStaticSymbol(sourceFile, symbol));
	          }
	      });
	      return staticSymbols;
	  }
	  /**
	   * @param {?} programStaticSymbols
	   * @param {?} options
	   * @param {?} metadataResolver
	   * @return {?}
	   */
	  function _createNgModules(programStaticSymbols, options, metadataResolver) {
	      var /** @type {?} */ ngModules = new Map();
	      var /** @type {?} */ programPipesAndDirectives = [];
	      var /** @type {?} */ ngModulePipesAndDirective = new Set();
	      var /** @type {?} */ addNgModule = function (staticSymbol) {
	          if (ngModules.has(staticSymbol) || !filterFileByPatterns(staticSymbol.filePath, options)) {
	              return false;
	          }
	          var /** @type {?} */ ngModule = metadataResolver.getNgModuleMetadata(staticSymbol, false);
	          if (ngModule) {
	              ngModules.set(ngModule.type.reference, ngModule);
	              ngModule.declaredDirectives.forEach(function (dir) { return ngModulePipesAndDirective.add(dir.reference); });
	              ngModule.declaredPipes.forEach(function (pipe) { return ngModulePipesAndDirective.add(pipe.reference); });
	              // For every input module add the list of transitively included modules
	              ngModule.transitiveModule.modules.forEach(function (modMeta) { return addNgModule(modMeta.reference); });
	          }
	          return !!ngModule;
	      };
	      programStaticSymbols.forEach(function (staticSymbol) {
	          if (!addNgModule(staticSymbol) &&
	              (metadataResolver.isDirective(staticSymbol) || metadataResolver.isPipe(staticSymbol))) {
	              programPipesAndDirectives.push(staticSymbol);
	          }
	      });
	      // Throw an error if any of the program pipe or directives is not declared by a module
	      var /** @type {?} */ symbolsMissingModule = programPipesAndDirectives.filter(function (s) { return !ngModulePipesAndDirective.has(s); });
	      return { ngModules: Array.from(ngModules.values()), symbolsMissingModule: symbolsMissingModule };
	  }
	
	  var StaticAndDynamicReflectionCapabilities = (function () {
	      /**
	       * @param {?} staticDelegate
	       */
	      function StaticAndDynamicReflectionCapabilities(staticDelegate) {
	          this.staticDelegate = staticDelegate;
	          this.dynamicDelegate = new ReflectionCapabilities();
	      }
	      /**
	       * @param {?} staticDelegate
	       * @return {?}
	       */
	      StaticAndDynamicReflectionCapabilities.install = function (staticDelegate) {
	          reflector.updateCapabilities(new StaticAndDynamicReflectionCapabilities(staticDelegate));
	      };
	      /**
	       * @return {?}
	       */
	      StaticAndDynamicReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      StaticAndDynamicReflectionCapabilities.prototype.factory = function (type) { return this.dynamicDelegate.factory(type); };
	      /**
	       * @param {?} type
	       * @param {?} lcProperty
	       * @return {?}
	       */
	      StaticAndDynamicReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
	          return isStaticType(type) ? this.staticDelegate.hasLifecycleHook(type, lcProperty) :
	              this.dynamicDelegate.hasLifecycleHook(type, lcProperty);
	      };
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      StaticAndDynamicReflectionCapabilities.prototype.parameters = function (type) {
	          return isStaticType(type) ? this.staticDelegate.parameters(type) :
	              this.dynamicDelegate.parameters(type);
	      };
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      StaticAndDynamicReflectionCapabilities.prototype.annotations = function (type) {
	          return isStaticType(type) ? this.staticDelegate.annotations(type) :
	              this.dynamicDelegate.annotations(type);
	      };
	      /**
	       * @param {?} typeOrFunc
	       * @return {?}
	       */
	      StaticAndDynamicReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
	          return isStaticType(typeOrFunc) ? this.staticDelegate.propMetadata(typeOrFunc) :
	              this.dynamicDelegate.propMetadata(typeOrFunc);
	      };
	      /**
	       * @param {?} name
	       * @return {?}
	       */
	      StaticAndDynamicReflectionCapabilities.prototype.getter = function (name) { return this.dynamicDelegate.getter(name); };
	      /**
	       * @param {?} name
	       * @return {?}
	       */
	      StaticAndDynamicReflectionCapabilities.prototype.setter = function (name) { return this.dynamicDelegate.setter(name); };
	      /**
	       * @param {?} name
	       * @return {?}
	       */
	      StaticAndDynamicReflectionCapabilities.prototype.method = function (name) { return this.dynamicDelegate.method(name); };
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      StaticAndDynamicReflectionCapabilities.prototype.importUri = function (type) { return this.staticDelegate.importUri(type); };
	      /**
	       * @param {?} name
	       * @param {?} moduleUrl
	       * @param {?} runtime
	       * @return {?}
	       */
	      StaticAndDynamicReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, runtime) {
	          return this.staticDelegate.resolveIdentifier(name, moduleUrl, runtime);
	      };
	      /**
	       * @param {?} enumIdentifier
	       * @param {?} name
	       * @return {?}
	       */
	      StaticAndDynamicReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) {
	          if (isStaticType(enumIdentifier)) {
	              return this.staticDelegate.resolveEnum(enumIdentifier, name);
	          }
	          else {
	              return null;
	          }
	      };
	      return StaticAndDynamicReflectionCapabilities;
	  }());
	  /**
	   * @param {?} type
	   * @return {?}
	   */
	  function isStaticType(type) {
	      return typeof type === 'object' && type.name && type.filePath;
	  }
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$21 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var /** @type {?} */ SUPPORTED_SCHEMA_VERSION = 3;
	  var /** @type {?} */ ANGULAR_IMPORT_LOCATIONS = {
	      coreDecorators: '@angular/core/src/metadata',
	      diDecorators: '@angular/core/src/di/metadata',
	      diMetadata: '@angular/core/src/di/metadata',
	      diOpaqueToken: '@angular/core/src/di/opaque_token',
	      animationMetadata: '@angular/core/src/animation/metadata',
	      provider: '@angular/core/src/di/provider'
	  };
	  var /** @type {?} */ HIDDEN_KEY = /^\$.*\$$/;
	  /**
	   *  A cache of static symbol used by the StaticReflector to return the same symbol for the
	    * same symbol values.
	   */
	  var StaticSymbolCache = (function () {
	      function StaticSymbolCache() {
	          this.cache = new Map();
	      }
	      /**
	       * @param {?} declarationFile
	       * @param {?} name
	       * @param {?=} members
	       * @return {?}
	       */
	      StaticSymbolCache.prototype.get = function (declarationFile, name, members) {
	          var /** @type {?} */ memberSuffix = members ? "." + members.join('.') : '';
	          var /** @type {?} */ key = "\"" + declarationFile + "\"." + name + memberSuffix;
	          var /** @type {?} */ result = this.cache.get(key);
	          if (!result) {
	              result = new StaticSymbol(declarationFile, name, members);
	              this.cache.set(key, result);
	          }
	          return result;
	      };
	      return StaticSymbolCache;
	  }());
	  /**
	   *  A static reflector implements enough of the Reflector API that is necessary to compile
	    * templates statically.
	   */
	  var StaticReflector = (function () {
	      /**
	       * @param {?} host
	       * @param {?=} staticSymbolCache
	       * @param {?=} knownMetadataClasses
	       * @param {?=} knownMetadataFunctions
	       * @param {?=} errorRecorder
	       */
	      function StaticReflector(host, staticSymbolCache, knownMetadataClasses, knownMetadataFunctions, errorRecorder) {
	          var _this = this;
	          if (staticSymbolCache === void 0) { staticSymbolCache = new StaticSymbolCache(); }
	          if (knownMetadataClasses === void 0) { knownMetadataClasses = []; }
	          if (knownMetadataFunctions === void 0) { knownMetadataFunctions = []; }
	          this.host = host;
	          this.staticSymbolCache = staticSymbolCache;
	          this.errorRecorder = errorRecorder;
	          this.declarationCache = new Map();
	          this.annotationCache = new Map();
	          this.propertyCache = new Map();
	          this.parameterCache = new Map();
	          this.methodCache = new Map();
	          this.metadataCache = new Map();
	          this.conversionMap = new Map();
	          this.initializeConversionMap();
	          knownMetadataClasses.forEach(function (kc) { return _this._registerDecoratorOrConstructor(_this.getStaticSymbol(kc.filePath, kc.name), kc.ctor); });
	          knownMetadataFunctions.forEach(function (kf) { return _this._registerFunction(_this.getStaticSymbol(kf.filePath, kf.name), kf.fn); });
	      }
	      /**
	       * @param {?} typeOrFunc
	       * @return {?}
	       */
	      StaticReflector.prototype.importUri = function (typeOrFunc) {
	          var /** @type {?} */ staticSymbol = this.findDeclaration(typeOrFunc.filePath, typeOrFunc.name, '');
	          return staticSymbol ? staticSymbol.filePath : null;
	      };
	      /**
	       * @param {?} name
	       * @param {?} moduleUrl
	       * @param {?} runtime
	       * @return {?}
	       */
	      StaticReflector.prototype.resolveIdentifier = function (name, moduleUrl, runtime) {
	          return this.findDeclaration(moduleUrl, name, '');
	      };
	      /**
	       * @param {?} enumIdentifier
	       * @param {?} name
	       * @return {?}
	       */
	      StaticReflector.prototype.resolveEnum = function (enumIdentifier, name) {
	          var /** @type {?} */ staticSymbol = enumIdentifier;
	          return this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name, [name]);
	      };
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      StaticReflector.prototype.annotations = function (type) {
	          var /** @type {?} */ annotations = this.annotationCache.get(type);
	          if (!annotations) {
	              annotations = [];
	              var /** @type {?} */ classMetadata = this.getTypeMetadata(type);
	              if (classMetadata['extends']) {
	                  var /** @type {?} */ parentAnnotations = this.annotations(this.simplify(type, classMetadata['extends']));
	                  annotations.push.apply(annotations, parentAnnotations);
	              }
	              if (classMetadata['decorators']) {
	                  var /** @type {?} */ ownAnnotations = this.simplify(type, classMetadata['decorators']);
	                  annotations.push.apply(annotations, ownAnnotations);
	              }
	              this.annotationCache.set(type, annotations.filter(function (ann) { return !!ann; }));
	          }
	          return annotations;
	      };
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      StaticReflector.prototype.propMetadata = function (type) {
	          var _this = this;
	          var /** @type {?} */ propMetadata = this.propertyCache.get(type);
	          if (!propMetadata) {
	              var /** @type {?} */ classMetadata = this.getTypeMetadata(type) || {};
	              propMetadata = {};
	              if (classMetadata['extends']) {
	                  var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(this.simplify(type, classMetadata['extends']));
	                  Object.keys(parentPropMetadata_1).forEach(function (parentProp) {
	                      propMetadata[parentProp] = parentPropMetadata_1[parentProp];
	                  });
	              }
	              var /** @type {?} */ members_1 = classMetadata['members'] || {};
	              Object.keys(members_1).forEach(function (propName) {
	                  var /** @type {?} */ propData = members_1[propName];
	                  var /** @type {?} */ prop = ((propData))
	                      .find(function (a) { return a['__symbolic'] == 'property' || a['__symbolic'] == 'method'; });
	                  var /** @type {?} */ decorators = [];
	                  if (propMetadata[propName]) {
	                      decorators.push.apply(decorators, propMetadata[propName]);
	                  }
	                  propMetadata[propName] = decorators;
	                  if (prop && prop['decorators']) {
	                      decorators.push.apply(decorators, _this.simplify(type, prop['decorators']));
	                  }
	              });
	              this.propertyCache.set(type, propMetadata);
	          }
	          return propMetadata;
	      };
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      StaticReflector.prototype.parameters = function (type) {
	          if (!(type instanceof StaticSymbol)) {
	              this.reportError(new Error("parameters received " + JSON.stringify(type) + " which is not a StaticSymbol"), type);
	              return [];
	          }
	          try {
	              var /** @type {?} */ parameters_1 = this.parameterCache.get(type);
	              if (!parameters_1) {
	                  var /** @type {?} */ classMetadata = this.getTypeMetadata(type);
	                  var /** @type {?} */ members = classMetadata ? classMetadata['members'] : null;
	                  var /** @type {?} */ ctorData = members ? members['__ctor__'] : null;
	                  if (ctorData) {
	                      var /** @type {?} */ ctor = ((ctorData)).find(function (a) { return a['__symbolic'] == 'constructor'; });
	                      var /** @type {?} */ parameterTypes = (this.simplify(type, ctor['parameters'] || []));
	                      var /** @type {?} */ parameterDecorators_1 = (this.simplify(type, ctor['parameterDecorators'] || []));
	                      parameters_1 = [];
	                      parameterTypes.forEach(function (paramType, index) {
	                          var /** @type {?} */ nestedResult = [];
	                          if (paramType) {
	                              nestedResult.push(paramType);
	                          }
	                          var /** @type {?} */ decorators = parameterDecorators_1 ? parameterDecorators_1[index] : null;
	                          if (decorators) {
	                              nestedResult.push.apply(nestedResult, decorators);
	                          }
	                          parameters_1.push(nestedResult);
	                      });
	                  }
	                  else if (classMetadata['extends']) {
	                      parameters_1 = this.parameters(this.simplify(type, classMetadata['extends']));
	                  }
	                  if (!parameters_1) {
	                      parameters_1 = [];
	                  }
	                  this.parameterCache.set(type, parameters_1);
	              }
	              return parameters_1;
	          }
	          catch (e) {
	              console.error("Failed on type " + JSON.stringify(type) + " with error " + e);
	              throw e;
	          }
	      };
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      StaticReflector.prototype._methodNames = function (type) {
	          var /** @type {?} */ methodNames = this.methodCache.get(type);
	          if (!methodNames) {
	              var /** @type {?} */ classMetadata = this.getTypeMetadata(type) || {};
	              methodNames = {};
	              if (classMetadata['extends']) {
	                  var /** @type {?} */ parentMethodNames_1 = this._methodNames(this.simplify(type, classMetadata['extends']));
	                  Object.keys(parentMethodNames_1).forEach(function (parentProp) {
	                      methodNames[parentProp] = parentMethodNames_1[parentProp];
	                  });
	              }
	              var /** @type {?} */ members_2 = classMetadata['members'] || {};
	              Object.keys(members_2).forEach(function (propName) {
	                  var /** @type {?} */ propData = members_2[propName];
	                  var /** @type {?} */ isMethod = ((propData)).some(function (a) { return a['__symbolic'] == 'method'; });
	                  methodNames[propName] = methodNames[propName] || isMethod;
	              });
	              this.methodCache.set(type, methodNames);
	          }
	          return methodNames;
	      };
	      /**
	       * @param {?} type
	       * @param {?} lcProperty
	       * @return {?}
	       */
	      StaticReflector.prototype.hasLifecycleHook = function (type, lcProperty) {
	          if (!(type instanceof StaticSymbol)) {
	              this.reportError(new Error("hasLifecycleHook received " + JSON.stringify(type) + " which is not a StaticSymbol"), type);
	          }
	          try {
	              return !!this._methodNames(type)[lcProperty];
	          }
	          catch (e) {
	              console.error("Failed on type " + JSON.stringify(type) + " with error " + e);
	              throw e;
	          }
	      };
	      /**
	       * @param {?} type
	       * @param {?} ctor
	       * @return {?}
	       */
	      StaticReflector.prototype._registerDecoratorOrConstructor = function (type, ctor) {
	          this.conversionMap.set(type, function (context, args) { return new (ctor.bind.apply(ctor, [void 0].concat(args)))(); });
	      };
	      /**
	       * @param {?} type
	       * @param {?} fn
	       * @return {?}
	       */
	      StaticReflector.prototype._registerFunction = function (type, fn) {
	          this.conversionMap.set(type, function (context, args) { return fn.apply(undefined, args); });
	      };
	      /**
	       * @return {?}
	       */
	      StaticReflector.prototype.initializeConversionMap = function () {
	          var coreDecorators = ANGULAR_IMPORT_LOCATIONS.coreDecorators, diDecorators = ANGULAR_IMPORT_LOCATIONS.diDecorators, diMetadata = ANGULAR_IMPORT_LOCATIONS.diMetadata, diOpaqueToken = ANGULAR_IMPORT_LOCATIONS.diOpaqueToken, animationMetadata = ANGULAR_IMPORT_LOCATIONS.animationMetadata, provider = ANGULAR_IMPORT_LOCATIONS.provider;
	          this.opaqueToken = this.findDeclaration(diOpaqueToken, 'OpaqueToken');
	          this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Host'), _angular_core.Host);
	          this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Injectable'), _angular_core.Injectable);
	          this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Self'), _angular_core.Self);
	          this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'SkipSelf'), _angular_core.SkipSelf);
	          this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Inject'), _angular_core.Inject);
	          this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Optional'), _angular_core.Optional);
	          this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Attribute'), _angular_core.Attribute);
	          this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'ContentChild'), _angular_core.ContentChild);
	          this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'ContentChildren'), _angular_core.ContentChildren);
	          this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'ViewChild'), _angular_core.ViewChild);
	          this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'ViewChildren'), _angular_core.ViewChildren);
	          this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Input'), _angular_core.Input);
	          this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Output'), _angular_core.Output);
	          this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Pipe'), _angular_core.Pipe);
	          this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'HostBinding'), _angular_core.HostBinding);
	          this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'HostListener'), _angular_core.HostListener);
	          this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Directive'), _angular_core.Directive);
	          this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Component'), _angular_core.Component);
	          this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'NgModule'), _angular_core.NgModule);
	          // Note: Some metadata classes can be used directly with Provider.deps.
	          this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, 'Host'), _angular_core.Host);
	          this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, 'Self'), _angular_core.Self);
	          this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, 'SkipSelf'), _angular_core.SkipSelf);
	          this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, 'Optional'), _angular_core.Optional);
	          this._registerFunction(this.findDeclaration(animationMetadata, 'trigger'), _angular_core.trigger);
	          this._registerFunction(this.findDeclaration(animationMetadata, 'state'), _angular_core.state);
	          this._registerFunction(this.findDeclaration(animationMetadata, 'transition'), _angular_core.transition);
	          this._registerFunction(this.findDeclaration(animationMetadata, 'style'), _angular_core.style);
	          this._registerFunction(this.findDeclaration(animationMetadata, 'animate'), _angular_core.animate);
	          this._registerFunction(this.findDeclaration(animationMetadata, 'keyframes'), _angular_core.keyframes);
	          this._registerFunction(this.findDeclaration(animationMetadata, 'sequence'), _angular_core.sequence);
	          this._registerFunction(this.findDeclaration(animationMetadata, 'group'), _angular_core.group);
	      };
	      /**
	       *  getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.
	        * All types passed to the StaticResolver should be pseudo-types returned by this method.
	        * *
	       * @param {?} declarationFile the absolute path of the file where the symbol is declared
	       * @param {?} name the name of the type.
	       * @param {?=} members
	       * @return {?}
	       */
	      StaticReflector.prototype.getStaticSymbol = function (declarationFile, name, members) {
	          return this.staticSymbolCache.get(declarationFile, name, members);
	      };
	      /**
	       * @param {?} error
	       * @param {?} context
	       * @param {?=} path
	       * @return {?}
	       */
	      StaticReflector.prototype.reportError = function (error, context, path) {
	          if (this.errorRecorder) {
	              this.errorRecorder(error, (context && context.filePath) || path);
	          }
	          else {
	              throw error;
	          }
	      };
	      /**
	       * @param {?} filePath
	       * @param {?} symbolName
	       * @return {?}
	       */
	      StaticReflector.prototype.resolveExportedSymbol = function (filePath, symbolName) {
	          var _this = this;
	          var /** @type {?} */ resolveModule = function (moduleName) {
	              var /** @type {?} */ resolvedModulePath = _this.host.moduleNameToFileName(moduleName, filePath);
	              if (!resolvedModulePath) {
	                  _this.reportError(new Error("Could not resolve module '" + moduleName + "' relative to file " + filePath), null, filePath);
	              }
	              return resolvedModulePath;
	          };
	          var /** @type {?} */ cacheKey = filePath + "|" + symbolName;
	          var /** @type {?} */ staticSymbol = this.declarationCache.get(cacheKey);
	          if (staticSymbol) {
	              return staticSymbol;
	          }
	          var /** @type {?} */ metadata = this.getModuleMetadata(filePath);
	          if (metadata) {
	              // If we have metadata for the symbol, this is the original exporting location.
	              if (metadata['metadata'][symbolName]) {
	                  staticSymbol = this.getStaticSymbol(filePath, symbolName);
	              }
	              // If no, try to find the symbol in one of the re-export location
	              if (!staticSymbol && metadata['exports']) {
	                  // Try and find the symbol in the list of explicitly re-exported symbols.
	                  for (var _i = 0, _a = metadata['exports']; _i < _a.length; _i++) {
	                      var moduleExport = _a[_i];
	                      if (moduleExport.export) {
	                          var /** @type {?} */ exportSymbol = moduleExport.export.find(function (symbol) {
	                              if (typeof symbol === 'string') {
	                                  return symbol == symbolName;
	                              }
	                              else {
	                                  return symbol.as == symbolName;
	                              }
	                          });
	                          if (exportSymbol) {
	                              var /** @type {?} */ symName = symbolName;
	                              if (typeof exportSymbol !== 'string') {
	                                  symName = exportSymbol.name;
	                              }
	                              var /** @type {?} */ resolvedModule = resolveModule(moduleExport.from);
	                              if (resolvedModule) {
	                                  staticSymbol =
	                                      this.resolveExportedSymbol(resolveModule(moduleExport.from), symName);
	                                  break;
	                              }
	                          }
	                      }
	                  }
	                  if (!staticSymbol) {
	                      // Try to find the symbol via export * directives.
	                      for (var _b = 0, _c = metadata['exports']; _b < _c.length; _b++) {
	                          var moduleExport = _c[_b];
	                          if (!moduleExport.export) {
	                              var /** @type {?} */ resolvedModule = resolveModule(moduleExport.from);
	                              if (resolvedModule) {
	                                  var /** @type {?} */ candidateSymbol = this.resolveExportedSymbol(resolvedModule, symbolName);
	                                  if (candidateSymbol) {
	                                      staticSymbol = candidateSymbol;
	                                      break;
	                                  }
	                              }
	                          }
	                      }
	                  }
	              }
	          }
	          this.declarationCache.set(cacheKey, staticSymbol);
	          return staticSymbol;
	      };
	      /**
	       * @param {?} module
	       * @param {?} symbolName
	       * @param {?=} containingFile
	       * @return {?}
	       */
	      StaticReflector.prototype.findDeclaration = function (module, symbolName, containingFile) {
	          try {
	              var /** @type {?} */ filePath = this.host.moduleNameToFileName(module, containingFile);
	              var /** @type {?} */ symbol = void 0;
	              if (!filePath) {
	                  // If the file cannot be found the module is probably referencing a declared module
	                  // for which there is no disambiguating file and we also don't need to track
	                  // re-exports. Just use the module name.
	                  symbol = this.getStaticSymbol(module, symbolName);
	              }
	              else {
	                  symbol = this.resolveExportedSymbol(filePath, symbolName) ||
	                      this.getStaticSymbol(filePath, symbolName);
	              }
	              return symbol;
	          }
	          catch (e) {
	              console.error("can't resolve module " + module + " from " + containingFile);
	              throw e;
	          }
	      };
	      /**
	       * @param {?} context
	       * @param {?} value
	       * @return {?}
	       */
	      StaticReflector.prototype.simplify = function (context, value) {
	          var _this = this;
	          var /** @type {?} */ self = this;
	          var /** @type {?} */ scope = BindingScope.empty;
	          var /** @type {?} */ calling = new Map();
	          /**
	           * @param {?} context
	           * @param {?} value
	           * @param {?} depth
	           * @return {?}
	           */
	          function simplifyInContext(context, value, depth) {
	              /**
	               * @param {?} context
	               * @param {?} expression
	               * @return {?}
	               */
	              function resolveReference(context, expression) {
	                  var /** @type {?} */ staticSymbol;
	                  if (expression['module']) {
	                      staticSymbol =
	                          self.findDeclaration(expression['module'], expression['name'], context.filePath);
	                  }
	                  else {
	                      staticSymbol = self.getStaticSymbol(context.filePath, expression['name']);
	                  }
	                  return staticSymbol;
	              }
	              /**
	               * @param {?} staticSymbol
	               * @return {?}
	               */
	              function resolveReferenceValue(staticSymbol) {
	                  var /** @type {?} */ moduleMetadata = self.getModuleMetadata(staticSymbol.filePath);
	                  var /** @type {?} */ declarationValue = moduleMetadata ? moduleMetadata['metadata'][staticSymbol.name] : null;
	                  return declarationValue;
	              }
	              /**
	               * @param {?} context
	               * @param {?} value
	               * @return {?}
	               */
	              function isOpaqueToken(context, value) {
	                  if (value && value.__symbolic === 'new' && value.expression) {
	                      var /** @type {?} */ target = value.expression;
	                      if (target.__symbolic == 'reference') {
	                          return sameSymbol(resolveReference(context, target), self.opaqueToken);
	                      }
	                  }
	                  return false;
	              }
	              /**
	               * @param {?} expression
	               * @return {?}
	               */
	              function simplifyCall(expression) {
	                  var /** @type {?} */ callContext = undefined;
	                  if (expression['__symbolic'] == 'call') {
	                      var /** @type {?} */ target = expression['expression'];
	                      var /** @type {?} */ functionSymbol = void 0;
	                      var /** @type {?} */ targetFunction = void 0;
	                      if (target) {
	                          switch (target.__symbolic) {
	                              case 'reference':
	                                  // Find the function to call.
	                                  callContext = { name: target.name };
	                                  functionSymbol = resolveReference(context, target);
	                                  targetFunction = resolveReferenceValue(functionSymbol);
	                                  break;
	                              case 'select':
	                                  // Find the static method to call
	                                  if (target.expression.__symbolic == 'reference') {
	                                      functionSymbol = resolveReference(context, target.expression);
	                                      var /** @type {?} */ classData = resolveReferenceValue(functionSymbol);
	                                      if (classData && classData.statics) {
	                                          targetFunction = classData.statics[target.member];
	                                      }
	                                  }
	                                  break;
	                          }
	                      }
	                      if (targetFunction && targetFunction['__symbolic'] == 'function') {
	                          if (calling.get(functionSymbol)) {
	                              throw new Error('Recursion not supported');
	                          }
	                          calling.set(functionSymbol, true);
	                          try {
	                              var /** @type {?} */ value_1 = targetFunction['value'];
	                              if (value_1 && (depth != 0 || value_1.__symbolic != 'error')) {
	                                  // Determine the arguments
	                                  var /** @type {?} */ args = (expression['arguments'] || []).map(function (arg) { return simplify(arg); });
	                                  var /** @type {?} */ parameters = targetFunction['parameters'];
	                                  var /** @type {?} */ defaults = targetFunction.defaults;
	                                  if (defaults && defaults.length > args.length) {
	                                      args.push.apply(args, defaults.slice(args.length).map(function (value) { return simplify(value); }));
	                                  }
	                                  var /** @type {?} */ functionScope = BindingScope.build();
	                                  for (var /** @type {?} */ i = 0; i < parameters.length; i++) {
	                                      functionScope.define(parameters[i], args[i]);
	                                  }
	                                  var /** @type {?} */ oldScope = scope;
	                                  var /** @type {?} */ result_1;
	                                  try {
	                                      scope = functionScope.done();
	                                      result_1 = simplifyInContext(functionSymbol, value_1, depth + 1);
	                                  }
	                                  finally {
	                                      scope = oldScope;
	                                  }
	                                  return result_1;
	                              }
	                          }
	                          finally {
	                              calling.delete(functionSymbol);
	                          }
	                      }
	                  }
	                  if (depth === 0) {
	                      // If depth is 0 we are evaluating the top level expression that is describing element
	                      // decorator. In this case, it is a decorator we don't understand, such as a custom
	                      // non-angular decorator, and we should just ignore it.
	                      return { __symbolic: 'ignore' };
	                  }
	                  return simplify({ __symbolic: 'error', message: 'Function call not supported', context: callContext });
	              }
	              /**
	               * @param {?} expression
	               * @return {?}
	               */
	              function simplify(expression) {
	                  if (isPrimitive$1(expression)) {
	                      return expression;
	                  }
	                  if (expression instanceof Array) {
	                      var /** @type {?} */ result_2 = [];
	                      for (var _i = 0, _a = ((expression)); _i < _a.length; _i++) {
	                          var item = _a[_i];
	                          // Check for a spread expression
	                          if (item && item.__symbolic === 'spread') {
	                              var /** @type {?} */ spreadArray = simplify(item.expression);
	                              if (Array.isArray(spreadArray)) {
	                                  for (var _b = 0, spreadArray_1 = spreadArray; _b < spreadArray_1.length; _b++) {
	                                      var spreadItem = spreadArray_1[_b];
	                                      result_2.push(spreadItem);
	                                  }
	                                  continue;
	                              }
	                          }
	                          var /** @type {?} */ value_2 = simplify(item);
	                          if (shouldIgnore(value_2)) {
	                              continue;
	                          }
	                          result_2.push(value_2);
	                      }
	                      return result_2;
	                  }
	                  if (expression instanceof StaticSymbol) {
	                      return expression;
	                  }
	                  if (expression) {
	                      if (expression['__symbolic']) {
	                          var /** @type {?} */ staticSymbol = void 0;
	                          switch (expression['__symbolic']) {
	                              case 'binop':
	                                  var /** @type {?} */ left = simplify(expression['left']);
	                                  if (shouldIgnore(left))
	                                      return left;
	                                  var /** @type {?} */ right = simplify(expression['right']);
	                                  if (shouldIgnore(right))
	                                      return right;
	                                  switch (expression['operator']) {
	                                      case '&&':
	                                          return left && right;
	                                      case '||':
	                                          return left || right;
	                                      case '|':
	                                          return left | right;
	                                      case '^':
	                                          return left ^ right;
	                                      case '&':
	                                          return left & right;
	                                      case '==':
	                                          return left == right;
	                                      case '!=':
	                                          return left != right;
	                                      case '===':
	                                          return left === right;
	                                      case '!==':
	                                          return left !== right;
	                                      case '<':
	                                          return left < right;
	                                      case '>':
	                                          return left > right;
	                                      case '<=':
	                                          return left <= right;
	                                      case '>=':
	                                          return left >= right;
	                                      case '<<':
	                                          return left << right;
	                                      case '>>':
	                                          return left >> right;
	                                      case '+':
	                                          return left + right;
	                                      case '-':
	                                          return left - right;
	                                      case '*':
	                                          return left * right;
	                                      case '/':
	                                          return left / right;
	                                      case '%':
	                                          return left % right;
	                                  }
	                                  return null;
	                              case 'if':
	                                  var /** @type {?} */ condition = simplify(expression['condition']);
	                                  return condition ? simplify(expression['thenExpression']) :
	                                      simplify(expression['elseExpression']);
	                              case 'pre':
	                                  var /** @type {?} */ operand = simplify(expression['operand']);
	                                  if (shouldIgnore(operand))
	                                      return operand;
	                                  switch (expression['operator']) {
	                                      case '+':
	                                          return operand;
	                                      case '-':
	                                          return -operand;
	                                      case '!':
	                                          return !operand;
	                                      case '~':
	                                          return ~operand;
	                                  }
	                                  return null;
	                              case 'index':
	                                  var /** @type {?} */ indexTarget = simplify(expression['expression']);
	                                  var /** @type {?} */ index = simplify(expression['index']);
	                                  if (indexTarget && isPrimitive$1(index))
	                                      return indexTarget[index];
	                                  return null;
	                              case 'select':
	                                  var /** @type {?} */ selectContext = context;
	                                  var /** @type {?} */ selectTarget = simplify(expression['expression']);
	                                  if (selectTarget instanceof StaticSymbol) {
	                                      // Access to a static instance variable
	                                      var /** @type {?} */ member_1 = expression['member'];
	                                      var /** @type {?} */ members = selectTarget.members ?
	                                          ((selectTarget.members)).concat(member_1) :
	                                          [member_1];
	                                      var /** @type {?} */ declarationValue_1 = resolveReferenceValue(selectTarget);
	                                      selectContext =
	                                          self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);
	                                      if (declarationValue_1 && declarationValue_1.statics) {
	                                          selectTarget = declarationValue_1.statics;
	                                      }
	                                      else {
	                                          return selectContext;
	                                      }
	                                  }
	                                  var /** @type {?} */ member = simplifyInContext(selectContext, expression['member'], depth + 1);
	                                  if (selectTarget && isPrimitive$1(member))
	                                      return simplifyInContext(selectContext, selectTarget[member], depth + 1);
	                                  return null;
	                              case 'reference':
	                                  if (!expression['name']) {
	                                      return context;
	                                  }
	                                  if (!expression.module) {
	                                      var /** @type {?} */ name_1 = expression['name'];
	                                      var /** @type {?} */ localValue = scope.resolve(name_1);
	                                      if (localValue != BindingScope.missing) {
	                                          return localValue;
	                                      }
	                                  }
	                                  staticSymbol = resolveReference(context, expression);
	                                  var /** @type {?} */ result_3 = staticSymbol;
	                                  var /** @type {?} */ declarationValue = resolveReferenceValue(result_3);
	                                  if (declarationValue) {
	                                      if (isOpaqueToken(staticSymbol, declarationValue)) {
	                                          // If the referenced symbol is initalized by a new OpaqueToken we can keep the
	                                          // reference to the symbol.
	                                          return staticSymbol;
	                                      }
	                                      result_3 = simplifyInContext(staticSymbol, declarationValue, depth + 1);
	                                  }
	                                  return result_3;
	                              case 'class':
	                                  return context;
	                              case 'function':
	                                  return context;
	                              case 'new':
	                              case 'call':
	                                  // Determine if the function is a built-in conversion
	                                  var /** @type {?} */ target = expression['expression'];
	                                  if (target['module']) {
	                                      staticSymbol =
	                                          self.findDeclaration(target['module'], target['name'], context.filePath);
	                                  }
	                                  else {
	                                      staticSymbol = self.getStaticSymbol(context.filePath, target['name']);
	                                  }
	                                  var /** @type {?} */ converter = self.conversionMap.get(staticSymbol);
	                                  if (converter) {
	                                      var /** @type {?} */ args = expression['arguments'];
	                                      if (!args) {
	                                          args = [];
	                                      }
	                                      return converter(context, args.map(function (arg) { return simplifyInContext(context, arg, depth + 1); }));
	                                  }
	                                  // Determine if the function is one we can simplify.
	                                  return simplifyCall(expression);
	                              case 'error':
	                                  var /** @type {?} */ message = produceErrorMessage(expression);
	                                  if (expression['line']) {
	                                      message =
	                                          message + " (position " + (expression['line'] + 1) + ":" + (expression['character'] + 1) + " in the original .ts file)";
	                                      throw positionalError(message, context.filePath, expression['line'], expression['character']);
	                                  }
	                                  throw new Error(message);
	                          }
	                          return null;
	                      }
	                      return mapStringMap(expression, function (value, name) { return simplify(value); });
	                  }
	                  return null;
	              }
	              try {
	                  return simplify(value);
	              }
	              catch (e) {
	                  var /** @type {?} */ message = e.message + ", resolving symbol " + context.name + " in " + context.filePath;
	                  if (e.fileName) {
	                      throw positionalError(message, e.fileName, e.line, e.column);
	                  }
	                  throw new Error(message);
	              }
	          }
	          var /** @type {?} */ recordedSimplifyInContext = function (context, value, depth) {
	              try {
	                  return simplifyInContext(context, value, depth);
	              }
	              catch (e) {
	                  _this.reportError(e, context);
	              }
	          };
	          var /** @type {?} */ result = this.errorRecorder ? recordedSimplifyInContext(context, value, 0) :
	              simplifyInContext(context, value, 0);
	          if (shouldIgnore(result)) {
	              return undefined;
	          }
	          return result;
	      };
	      /**
	       * @param {?} module an absolute path to a module file.
	       * @return {?}
	       */
	      StaticReflector.prototype.getModuleMetadata = function (module) {
	          var /** @type {?} */ moduleMetadata = this.metadataCache.get(module);
	          if (!moduleMetadata) {
	              var /** @type {?} */ moduleMetadatas = this.host.getMetadataFor(module);
	              if (moduleMetadatas) {
	                  var /** @type {?} */ maxVersion_1 = -1;
	                  moduleMetadatas.forEach(function (md) {
	                      if (md['version'] > maxVersion_1) {
	                          maxVersion_1 = md['version'];
	                          moduleMetadata = md;
	                      }
	                  });
	              }
	              if (!moduleMetadata) {
	                  moduleMetadata =
	                      { __symbolic: 'module', version: SUPPORTED_SCHEMA_VERSION, module: module, metadata: {} };
	              }
	              if (moduleMetadata['version'] != SUPPORTED_SCHEMA_VERSION) {
	                  var /** @type {?} */ errorMessage = moduleMetadata['version'] == 2 ?
	                      "Unsupported metadata version " + moduleMetadata['version'] + " for module " + module + ". This module should be compiled with a newer version of ngc" :
	                      "Metadata version mismatch for module " + module + ", found version " + moduleMetadata['version'] + ", expected " + SUPPORTED_SCHEMA_VERSION;
	                  this.reportError(new Error(errorMessage), null);
	              }
	              this.metadataCache.set(module, moduleMetadata);
	          }
	          return moduleMetadata;
	      };
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      StaticReflector.prototype.getTypeMetadata = function (type) {
	          var /** @type {?} */ moduleMetadata = this.getModuleMetadata(type.filePath);
	          return moduleMetadata['metadata'][type.name] || { __symbolic: 'class' };
	      };
	      return StaticReflector;
	  }());
	  /**
	   * @param {?} error
	   * @return {?}
	   */
	  function expandedMessage(error) {
	      switch (error.message) {
	          case 'Reference to non-exported class':
	              if (error.context && error.context.className) {
	                  return "Reference to a non-exported class " + error.context.className + ". Consider exporting the class";
	              }
	              break;
	          case 'Variable not initialized':
	              return 'Only initialized variables and constants can be referenced because the value of this variable is needed by the template compiler';
	          case 'Destructuring not supported':
	              return 'Referencing an exported destructured variable or constant is not supported by the template compiler. Consider simplifying this to avoid destructuring';
	          case 'Could not resolve type':
	              if (error.context && error.context.typeName) {
	                  return "Could not resolve type " + error.context.typeName;
	              }
	              break;
	          case 'Function call not supported':
	              var /** @type {?} */ prefix = error.context && error.context.name ? "Calling function '" + error.context.name + "', f" : 'F';
	              return prefix +
	                  'unction calls are not supported. Consider replacing the function or lambda with a reference to an exported function';
	          case 'Reference to a local symbol':
	              if (error.context && error.context.name) {
	                  return "Reference to a local (non-exported) symbol '" + error.context.name + "'. Consider exporting the symbol";
	              }
	              break;
	      }
	      return error.message;
	  }
	  /**
	   * @param {?} error
	   * @return {?}
	   */
	  function produceErrorMessage(error) {
	      return "Error encountered resolving symbol values statically. " + expandedMessage(error);
	  }
	  /**
	   * @param {?} input
	   * @param {?} transform
	   * @return {?}
	   */
	  function mapStringMap(input, transform) {
	      if (!input)
	          return {};
	      var /** @type {?} */ result = {};
	      Object.keys(input).forEach(function (key) {
	          var /** @type {?} */ value = transform(input[key], key);
	          if (!shouldIgnore(value)) {
	              if (HIDDEN_KEY.test(key)) {
	                  Object.defineProperty(result, key, { enumerable: false, configurable: true, value: value });
	              }
	              else {
	                  result[key] = value;
	              }
	          }
	      });
	      return result;
	  }
	  /**
	   * @param {?} o
	   * @return {?}
	   */
	  function isPrimitive$1(o) {
	      return o === null || (typeof o !== 'function' && typeof o !== 'object');
	  }
	  /**
	   * @abstract
	   */
	  var BindingScope = (function () {
	      function BindingScope() {
	      }
	      /**
	       * @abstract
	       * @param {?} name
	       * @return {?}
	       */
	      BindingScope.prototype.resolve = function (name) { };
	      /**
	       * @return {?}
	       */
	      BindingScope.build = function () {
	          var /** @type {?} */ current = new Map();
	          return {
	              define: function (name, value) {
	                  current.set(name, value);
	                  return this;
	              },
	              done: function () {
	                  return current.size > 0 ? new PopulatedScope(current) : BindingScope.empty;
	              }
	          };
	      };
	      BindingScope.missing = {};
	      BindingScope.empty = { resolve: function (name) { return BindingScope.missing; } };
	      return BindingScope;
	  }());
	  var PopulatedScope = (function (_super) {
	      __extends$21(PopulatedScope, _super);
	      /**
	       * @param {?} bindings
	       */
	      function PopulatedScope(bindings) {
	          _super.call(this);
	          this.bindings = bindings;
	      }
	      /**
	       * @param {?} name
	       * @return {?}
	       */
	      PopulatedScope.prototype.resolve = function (name) {
	          return this.bindings.has(name) ? this.bindings.get(name) : BindingScope.missing;
	      };
	      return PopulatedScope;
	  }(BindingScope));
	  /**
	   * @param {?} a
	   * @param {?} b
	   * @return {?}
	   */
	  function sameSymbol(a, b) {
	      return a === b || (a.name == b.name && a.filePath == b.filePath);
	  }
	  /**
	   * @param {?} value
	   * @return {?}
	   */
	  function shouldIgnore(value) {
	      return value && value.__symbolic == 'ignore';
	  }
	  /**
	   * @param {?} message
	   * @param {?} fileName
	   * @param {?} line
	   * @param {?} column
	   * @return {?}
	   */
	  function positionalError(message, fileName, line, column) {
	      var /** @type {?} */ result = new Error(message);
	      ((result)).fileName = fileName;
	      ((result)).line = line;
	      ((result)).column = column;
	      return result;
	  }
	
	  var /** @type {?} */ STRIP_SRC_FILE_SUFFIXES = /(\.ts|\.d\.ts|\.js|\.jsx|\.tsx)$/;
	  var AotSummaryResolver = (function () {
	      /**
	       * @param {?} host
	       * @param {?} staticReflector
	       * @param {?} options
	       */
	      function AotSummaryResolver(host, staticReflector, options) {
	          this.host = host;
	          this.staticReflector = staticReflector;
	          this.options = options;
	          this.summaryCache = {};
	      }
	      /**
	       * @param {?} srcFileUrl
	       * @param {?} summaries
	       * @return {?}
	       */
	      AotSummaryResolver.prototype.serializeSummaries = function (srcFileUrl, summaries) {
	          var _this = this;
	          var /** @type {?} */ jsonReplacer = function (key, value) {
	              if (value instanceof StaticSymbol) {
	                  // We convert the source filenames into output filenames,
	                  // as the generated summary file will be used when the current
	                  // compilation unit is used as a library
	                  return {
	                      '__symbolic__': 'symbol',
	                      'name': value.name,
	                      'path': _this.host.getOutputFileName(value.filePath),
	                      'members': value.members
	                  };
	              }
	              return value;
	          };
	          var /** @type {?} */ allSummaries = summaries.slice();
	          summaries.forEach(function (summary) {
	              if (summary.summaryKind === CompileSummaryKind.NgModule) {
	                  var /** @type {?} */ moduleMeta = (summary);
	                  moduleMeta.exportedDirectives.concat(moduleMeta.exportedPipes).forEach(function (id) {
	                      if (!filterFileByPatterns(id.reference.filePath, _this.options)) {
	                          allSummaries.push(_this.resolveSummary(id.reference));
	                      }
	                  });
	              }
	          });
	          return new GeneratedFile(srcFileUrl, summaryFileName(srcFileUrl), JSON.stringify(allSummaries, jsonReplacer));
	      };
	      /**
	       * @param {?} symbol
	       * @return {?}
	       */
	      AotSummaryResolver.prototype._cacheKey = function (symbol) { return symbol.filePath + "|" + symbol.name; };
	      /**
	       * @param {?} staticSymbol
	       * @return {?}
	       */
	      AotSummaryResolver.prototype.resolveSummary = function (staticSymbol) {
	          var _this = this;
	          var /** @type {?} */ filePath = staticSymbol.filePath;
	          var /** @type {?} */ name = staticSymbol.name;
	          var /** @type {?} */ cacheKey = this._cacheKey(staticSymbol);
	          if (!filterFileByPatterns(filePath, this.options)) {
	              var /** @type {?} */ summary = this.summaryCache[cacheKey];
	              var /** @type {?} */ summaryFilePath = summaryFileName(filePath);
	              if (!summary) {
	                  try {
	                      var /** @type {?} */ jsonReviver = function (key, value) {
	                          if (value && value['__symbolic__'] === 'symbol') {
	                              // Note: We can't use staticReflector.findDeclaration here:
	                              // Summary files can contain symbols of transitive compilation units
	                              // (via the providers), and findDeclaration needs .metadata.json / .d.ts files,
	                              // but we don't want to depend on these for transitive dependencies.
	                              return _this.staticReflector.getStaticSymbol(value['path'], value['name'], value['members']);
	                          }
	                          else {
	                              return value;
	                          }
	                      };
	                      var /** @type {?} */ readSummaries = JSON.parse(this.host.loadSummary(summaryFilePath), jsonReviver);
	                      readSummaries.forEach(function (summary) {
	                          var /** @type {?} */ filePath = summary.type.reference.filePath;
	                          _this.summaryCache[_this._cacheKey(summary.type.reference)] = summary;
	                      });
	                      summary = this.summaryCache[cacheKey];
	                  }
	                  catch (e) {
	                      console.error("Error loading summary file " + summaryFilePath);
	                      throw e;
	                  }
	              }
	              if (!summary) {
	                  throw new Error("Could not find the symbol " + name + " in the summary file " + summaryFilePath + "!");
	              }
	              return summary;
	          }
	          else {
	              return null;
	          }
	      };
	      return AotSummaryResolver;
	  }());
	  /**
	   * @param {?} fileName
	   * @return {?}
	   */
	  function summaryFileName(fileName) {
	      var /** @type {?} */ fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');
	      return fileNameWithoutSuffix + ".ngsummary.json";
	  }
	
	  /**
	   *  Creates a new AotCompiler based on options and a host.
	   * @param {?} compilerHost
	   * @param {?} options
	   * @return {?}
	   */
	  function createAotCompiler(compilerHost, options) {
	      var /** @type {?} */ translations = options.translations || '';
	      var /** @type {?} */ urlResolver = createOfflineCompileUrlResolver();
	      var /** @type {?} */ staticReflector = new StaticReflector(compilerHost);
	      StaticAndDynamicReflectionCapabilities.install(staticReflector);
	      var /** @type {?} */ htmlParser = new I18NHtmlParser(new HtmlParser(), translations, options.i18nFormat);
	      var /** @type {?} */ config = new CompilerConfig({
	          genDebugInfo: options.debug === true,
	          defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated,
	          logBindingUpdate: false,
	          useJit: false
	      });
	      var /** @type {?} */ normalizer = new DirectiveNormalizer({ get: function (url) { return compilerHost.loadResource(url); } }, urlResolver, htmlParser, config);
	      var /** @type {?} */ expressionParser = new Parser(new Lexer());
	      var /** @type {?} */ elementSchemaRegistry = new DomElementSchemaRegistry();
	      var /** @type {?} */ console = new Console();
	      var /** @type {?} */ tmplParser = new TemplateParser(expressionParser, elementSchemaRegistry, htmlParser, console, []);
	      var /** @type {?} */ summaryResolver = new AotSummaryResolver(compilerHost, staticReflector, options);
	      var /** @type {?} */ resolver = new CompileMetadataResolver(new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, staticReflector);
	      // TODO(vicb): do not pass options.i18nFormat here
	      var /** @type {?} */ compiler = new AotCompiler(resolver, tmplParser, new StyleCompiler(urlResolver), new ViewCompiler(config, elementSchemaRegistry), new DirectiveWrapperCompiler(config, expressionParser, elementSchemaRegistry, console), new NgModuleCompiler(), new TypeScriptEmitter(compilerHost), summaryResolver, options.locale, options.i18nFormat, new AnimationParser(elementSchemaRegistry), staticReflector, options);
	      return { compiler: compiler, reflector: staticReflector };
	  }
	
	  /**
	   * @param {?} statements
	   * @param {?} resultVar
	   * @return {?}
	   */
	  function interpretStatements(statements, resultVar) {
	      var /** @type {?} */ stmtsWithReturn = statements.concat([new ReturnStatement(variable(resultVar))]);
	      var /** @type {?} */ ctx = new _ExecutionContext(null, null, null, new Map());
	      var /** @type {?} */ visitor = new StatementInterpreter();
	      var /** @type {?} */ result = visitor.visitAllStatements(stmtsWithReturn, ctx);
	      return isPresent(result) ? result.value : null;
	  }
	  /**
	   * @param {?} varNames
	   * @param {?} varValues
	   * @param {?} statements
	   * @param {?} ctx
	   * @param {?} visitor
	   * @return {?}
	   */
	  function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
	      var /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();
	      for (var /** @type {?} */ i = 0; i < varNames.length; i++) {
	          childCtx.vars.set(varNames[i], varValues[i]);
	      }
	      var /** @type {?} */ result = visitor.visitAllStatements(statements, childCtx);
	      return isPresent(result) ? result.value : null;
	  }
	  var _ExecutionContext = (function () {
	      /**
	       * @param {?} parent
	       * @param {?} instance
	       * @param {?} className
	       * @param {?} vars
	       */
	      function _ExecutionContext(parent, instance, className, vars) {
	          this.parent = parent;
	          this.instance = instance;
	          this.className = className;
	          this.vars = vars;
	      }
	      /**
	       * @return {?}
	       */
	      _ExecutionContext.prototype.createChildWihtLocalVars = function () {
	          return new _ExecutionContext(this, this.instance, this.className, new Map());
	      };
	      return _ExecutionContext;
	  }());
	  var ReturnValue = (function () {
	      /**
	       * @param {?} value
	       */
	      function ReturnValue(value) {
	          this.value = value;
	      }
	      return ReturnValue;
	  }());
	  /**
	   * @param {?} _classStmt
	   * @param {?} _ctx
	   * @param {?} _visitor
	   * @return {?}
	   */
	  function createDynamicClass(_classStmt, _ctx, _visitor) {
	      var /** @type {?} */ propertyDescriptors = {};
	      _classStmt.getters.forEach(function (getter) {
	          // Note: use `function` instead of arrow function to capture `this`
	          propertyDescriptors[getter.name] = {
	              configurable: false,
	              get: function () {
	                  var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	                  return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
	              }
	          };
	      });
	      _classStmt.methods.forEach(function (method) {
	          var /** @type {?} */ paramNames = method.params.map(function (param) { return param.name; });
	          // Note: use `function` instead of arrow function to capture `this`
	          propertyDescriptors[method.name] = {
	              writable: false,
	              configurable: false,
	              value: function () {
	                  var args = [];
	                  for (var _i = 0; _i < arguments.length; _i++) {
	                      args[_i - 0] = arguments[_i];
	                  }
	                  var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	                  return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
	              }
	          };
	      });
	      var /** @type {?} */ ctorParamNames = _classStmt.constructorMethod.params.map(function (param) { return param.name; });
	      // Note: use `function` instead of arrow function to capture `this`
	      var /** @type {?} */ ctor = function () {
	          var _this = this;
	          var args = [];
	          for (var _i = 0; _i < arguments.length; _i++) {
	              args[_i - 0] = arguments[_i];
	          }
	          var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	          _classStmt.fields.forEach(function (field) { _this[field.name] = undefined; });
	          _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
	      };
	      var /** @type {?} */ superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;
	      ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);
	      return ctor;
	  }
	  var StatementInterpreter = (function () {
	      function StatementInterpreter() {
	      }
	      /**
	       * @param {?} ast
	       * @return {?}
	       */
	      StatementInterpreter.prototype.debugAst = function (ast) { return debugOutputAstAsTypeScript(ast); };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	          ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));
	          return null;
	      };
	      /**
	       * @param {?} expr
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitWriteVarExpr = function (expr, ctx) {
	          var /** @type {?} */ value = expr.value.visitExpression(this, ctx);
	          var /** @type {?} */ currCtx = ctx;
	          while (currCtx != null) {
	              if (currCtx.vars.has(expr.name)) {
	                  currCtx.vars.set(expr.name, value);
	                  return value;
	              }
	              currCtx = currCtx.parent;
	          }
	          throw new Error("Not declared variable " + expr.name);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitReadVarExpr = function (ast, ctx) {
	          var /** @type {?} */ varName = ast.name;
	          if (isPresent(ast.builtin)) {
	              switch (ast.builtin) {
	                  case BuiltinVar.Super:
	                      return ctx.instance.__proto__;
	                  case BuiltinVar.This:
	                      return ctx.instance;
	                  case BuiltinVar.CatchError:
	                      varName = CATCH_ERROR_VAR$2;
	                      break;
	                  case BuiltinVar.CatchStack:
	                      varName = CATCH_STACK_VAR$2;
	                      break;
	                  default:
	                      throw new Error("Unknown builtin variable " + ast.builtin);
	              }
	          }
	          var /** @type {?} */ currCtx = ctx;
	          while (currCtx != null) {
	              if (currCtx.vars.has(varName)) {
	                  return currCtx.vars.get(varName);
	              }
	              currCtx = currCtx.parent;
	          }
	          throw new Error("Not declared variable " + varName);
	      };
	      /**
	       * @param {?} expr
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitWriteKeyExpr = function (expr, ctx) {
	          var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);
	          var /** @type {?} */ index = expr.index.visitExpression(this, ctx);
	          var /** @type {?} */ value = expr.value.visitExpression(this, ctx);
	          receiver[index] = value;
	          return value;
	      };
	      /**
	       * @param {?} expr
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitWritePropExpr = function (expr, ctx) {
	          var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);
	          var /** @type {?} */ value = expr.value.visitExpression(this, ctx);
	          receiver[expr.name] = value;
	          return value;
	      };
	      /**
	       * @param {?} expr
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitInvokeMethodExpr = function (expr, ctx) {
	          var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);
	          var /** @type {?} */ args = this.visitAllExpressions(expr.args, ctx);
	          var /** @type {?} */ result;
	          if (isPresent(expr.builtin)) {
	              switch (expr.builtin) {
	                  case BuiltinMethod.ConcatArray:
	                      result = receiver.concat.apply(receiver, args);
	                      break;
	                  case BuiltinMethod.SubscribeObservable:
	                      result = receiver.subscribe({ next: args[0] });
	                      break;
	                  case BuiltinMethod.Bind:
	                      result = receiver.bind.apply(receiver, args);
	                      break;
	                  default:
	                      throw new Error("Unknown builtin method " + expr.builtin);
	              }
	          }
	          else {
	              result = receiver[expr.name].apply(receiver, args);
	          }
	          return result;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitInvokeFunctionExpr = function (stmt, ctx) {
	          var /** @type {?} */ args = this.visitAllExpressions(stmt.args, ctx);
	          var /** @type {?} */ fnExpr = stmt.fn;
	          if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
	              ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);
	              return null;
	          }
	          else {
	              var /** @type {?} */ fn = stmt.fn.visitExpression(this, ctx);
	              return fn.apply(null, args);
	          }
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitReturnStmt = function (stmt, ctx) {
	          return new ReturnValue(stmt.value.visitExpression(this, ctx));
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	          var /** @type {?} */ clazz = createDynamicClass(stmt, ctx, this);
	          ctx.vars.set(stmt.name, clazz);
	          return null;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitExpressionStmt = function (stmt, ctx) {
	          return stmt.expr.visitExpression(this, ctx);
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitIfStmt = function (stmt, ctx) {
	          var /** @type {?} */ condition = stmt.condition.visitExpression(this, ctx);
	          if (condition) {
	              return this.visitAllStatements(stmt.trueCase, ctx);
	          }
	          else if (isPresent(stmt.falseCase)) {
	              return this.visitAllStatements(stmt.falseCase, ctx);
	          }
	          return null;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitTryCatchStmt = function (stmt, ctx) {
	          try {
	              return this.visitAllStatements(stmt.bodyStmts, ctx);
	          }
	          catch (e) {
	              var /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();
	              childCtx.vars.set(CATCH_ERROR_VAR$2, e);
	              childCtx.vars.set(CATCH_STACK_VAR$2, e.stack);
	              return this.visitAllStatements(stmt.catchStmts, childCtx);
	          }
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitThrowStmt = function (stmt, ctx) {
	          throw stmt.error.visitExpression(this, ctx);
	      };
	      /**
	       * @param {?} stmt
	       * @param {?=} context
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitCommentStmt = function (stmt, context) { return null; };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitInstantiateExpr = function (ast, ctx) {
	          var /** @type {?} */ args = this.visitAllExpressions(ast.args, ctx);
	          var /** @type {?} */ clazz = ast.classExpr.visitExpression(this, ctx);
	          return new (clazz.bind.apply(clazz, [void 0].concat(args)))();
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitLiteralExpr = function (ast, ctx) { return ast.value; };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitExternalExpr = function (ast, ctx) {
	          return ast.value.reference;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitConditionalExpr = function (ast, ctx) {
	          if (ast.condition.visitExpression(this, ctx)) {
	              return ast.trueCase.visitExpression(this, ctx);
	          }
	          else if (isPresent(ast.falseCase)) {
	              return ast.falseCase.visitExpression(this, ctx);
	          }
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitNotExpr = function (ast, ctx) {
	          return !ast.condition.visitExpression(this, ctx);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitCastExpr = function (ast, ctx) {
	          return ast.value.visitExpression(this, ctx);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitFunctionExpr = function (ast, ctx) {
	          var /** @type {?} */ paramNames = ast.params.map(function (param) { return param.name; });
	          return _declareFn(paramNames, ast.statements, ctx, this);
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	          var /** @type {?} */ paramNames = stmt.params.map(function (param) { return param.name; });
	          ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
	          var _this = this;
	          var /** @type {?} */ lhs = function () { return ast.lhs.visitExpression(_this, ctx); };
	          var /** @type {?} */ rhs = function () { return ast.rhs.visitExpression(_this, ctx); };
	          switch (ast.operator) {
	              case BinaryOperator.Equals:
	                  return lhs() == rhs();
	              case BinaryOperator.Identical:
	                  return lhs() === rhs();
	              case BinaryOperator.NotEquals:
	                  return lhs() != rhs();
	              case BinaryOperator.NotIdentical:
	                  return lhs() !== rhs();
	              case BinaryOperator.And:
	                  return lhs() && rhs();
	              case BinaryOperator.Or:
	                  return lhs() || rhs();
	              case BinaryOperator.Plus:
	                  return lhs() + rhs();
	              case BinaryOperator.Minus:
	                  return lhs() - rhs();
	              case BinaryOperator.Divide:
	                  return lhs() / rhs();
	              case BinaryOperator.Multiply:
	                  return lhs() * rhs();
	              case BinaryOperator.Modulo:
	                  return lhs() % rhs();
	              case BinaryOperator.Lower:
	                  return lhs() < rhs();
	              case BinaryOperator.LowerEquals:
	                  return lhs() <= rhs();
	              case BinaryOperator.Bigger:
	                  return lhs() > rhs();
	              case BinaryOperator.BiggerEquals:
	                  return lhs() >= rhs();
	              default:
	                  throw new Error("Unknown operator " + ast.operator);
	          }
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitReadPropExpr = function (ast, ctx) {
	          var /** @type {?} */ result;
	          var /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);
	          result = receiver[ast.name];
	          return result;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitReadKeyExpr = function (ast, ctx) {
	          var /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);
	          var /** @type {?} */ prop = ast.index.visitExpression(this, ctx);
	          return receiver[prop];
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	          return this.visitAllExpressions(ast.entries, ctx);
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitLiteralMapExpr = function (ast, ctx) {
	          var _this = this;
	          var /** @type {?} */ result = {};
	          ast.entries.forEach(function (entry) { return ((result))[entry.key] = entry.value.visitExpression(_this, ctx); });
	          return result;
	      };
	      /**
	       * @param {?} expressions
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitAllExpressions = function (expressions, ctx) {
	          var _this = this;
	          return expressions.map(function (expr) { return expr.visitExpression(_this, ctx); });
	      };
	      /**
	       * @param {?} statements
	       * @param {?} ctx
	       * @return {?}
	       */
	      StatementInterpreter.prototype.visitAllStatements = function (statements, ctx) {
	          for (var /** @type {?} */ i = 0; i < statements.length; i++) {
	              var /** @type {?} */ stmt = statements[i];
	              var /** @type {?} */ val = stmt.visitStatement(this, ctx);
	              if (val instanceof ReturnValue) {
	                  return val;
	              }
	          }
	          return null;
	      };
	      return StatementInterpreter;
	  }());
	  /**
	   * @param {?} varNames
	   * @param {?} statements
	   * @param {?} ctx
	   * @param {?} visitor
	   * @return {?}
	   */
	  function _declareFn(varNames, statements, ctx, visitor) {
	      return function () {
	          var args = [];
	          for (var _i = 0; _i < arguments.length; _i++) {
	              args[_i - 0] = arguments[_i];
	          }
	          return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
	      };
	  }
	  var /** @type {?} */ CATCH_ERROR_VAR$2 = 'error';
	  var /** @type {?} */ CATCH_STACK_VAR$2 = 'stack';
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$23 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  /**
	   * @abstract
	   */
	  var AbstractJsEmitterVisitor = (function (_super) {
	      __extends$23(AbstractJsEmitterVisitor, _super);
	      function AbstractJsEmitterVisitor() {
	          _super.call(this, false);
	      }
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	          var _this = this;
	          ctx.pushClass(stmt);
	          this._visitClassConstructor(stmt, ctx);
	          if (isPresent(stmt.parent)) {
	              ctx.print(stmt.name + ".prototype = Object.create(");
	              stmt.parent.visitExpression(this, ctx);
	              ctx.println(".prototype);");
	          }
	          stmt.getters.forEach(function (getter) { return _this._visitClassGetter(stmt, getter, ctx); });
	          stmt.methods.forEach(function (method) { return _this._visitClassMethod(stmt, method, ctx); });
	          ctx.popClass();
	          return null;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractJsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
	          ctx.print("function " + stmt.name + "(");
	          if (isPresent(stmt.constructorMethod)) {
	              this._visitParams(stmt.constructorMethod.params, ctx);
	          }
	          ctx.println(") {");
	          ctx.incIndent();
	          if (isPresent(stmt.constructorMethod)) {
	              if (stmt.constructorMethod.body.length > 0) {
	                  ctx.println("var self = this;");
	                  this.visitAllStatements(stmt.constructorMethod.body, ctx);
	              }
	          }
	          ctx.decIndent();
	          ctx.println("}");
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} getter
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractJsEmitterVisitor.prototype._visitClassGetter = function (stmt, getter, ctx) {
	          ctx.println("Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {");
	          ctx.incIndent();
	          if (getter.body.length > 0) {
	              ctx.println("var self = this;");
	              this.visitAllStatements(getter.body, ctx);
	          }
	          ctx.decIndent();
	          ctx.println("}});");
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} method
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractJsEmitterVisitor.prototype._visitClassMethod = function (stmt, method, ctx) {
	          ctx.print(stmt.name + ".prototype." + method.name + " = function(");
	          this._visitParams(method.params, ctx);
	          ctx.println(") {");
	          ctx.incIndent();
	          if (method.body.length > 0) {
	              ctx.println("var self = this;");
	              this.visitAllStatements(method.body, ctx);
	          }
	          ctx.decIndent();
	          ctx.println("};");
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
	          if (ast.builtin === BuiltinVar.This) {
	              ctx.print('self');
	          }
	          else if (ast.builtin === BuiltinVar.Super) {
	              throw new Error("'super' needs to be handled at a parent ast node, not at the variable level!");
	          }
	          else {
	              _super.prototype.visitReadVarExpr.call(this, ast, ctx);
	          }
	          return null;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	          ctx.print("var " + stmt.name + " = ");
	          stmt.value.visitExpression(this, ctx);
	          ctx.println(";");
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractJsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
	          ast.value.visitExpression(this, ctx);
	          return null;
	      };
	      /**
	       * @param {?} expr
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
	          var /** @type {?} */ fnExpr = expr.fn;
	          if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
	              ctx.currentClass.parent.visitExpression(this, ctx);
	              ctx.print(".call(this");
	              if (expr.args.length > 0) {
	                  ctx.print(", ");
	                  this.visitAllExpressions(expr.args, ctx, ',');
	              }
	              ctx.print(")");
	          }
	          else {
	              _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);
	          }
	          return null;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
	          ctx.print("function(");
	          this._visitParams(ast.params, ctx);
	          ctx.println(") {");
	          ctx.incIndent();
	          this.visitAllStatements(ast.statements, ctx);
	          ctx.decIndent();
	          ctx.print("}");
	          return null;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	          ctx.print("function " + stmt.name + "(");
	          this._visitParams(stmt.params, ctx);
	          ctx.println(") {");
	          ctx.incIndent();
	          this.visitAllStatements(stmt.statements, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	          return null;
	      };
	      /**
	       * @param {?} stmt
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
	          ctx.println("try {");
	          ctx.incIndent();
	          this.visitAllStatements(stmt.bodyStmts, ctx);
	          ctx.decIndent();
	          ctx.println("} catch (" + CATCH_ERROR_VAR$1.name + ") {");
	          ctx.incIndent();
	          var /** @type {?} */ catchStmts = [(CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [
	                  StmtModifier.Final
	              ]))].concat(stmt.catchStmts);
	          this.visitAllStatements(catchStmts, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	          return null;
	      };
	      /**
	       * @param {?} params
	       * @param {?} ctx
	       * @return {?}
	       */
	      AbstractJsEmitterVisitor.prototype._visitParams = function (params, ctx) {
	          this.visitAllObjects(function (param) { return ctx.print(param.name); }, params, ctx, ',');
	      };
	      /**
	       * @param {?} method
	       * @return {?}
	       */
	      AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
	          var /** @type {?} */ name;
	          switch (method) {
	              case BuiltinMethod.ConcatArray:
	                  name = 'concat';
	                  break;
	              case BuiltinMethod.SubscribeObservable:
	                  name = 'subscribe';
	                  break;
	              case BuiltinMethod.Bind:
	                  name = 'bind';
	                  break;
	              default:
	                  throw new Error("Unknown builtin method: " + method);
	          }
	          return name;
	      };
	      return AbstractJsEmitterVisitor;
	  }(AbstractEmitterVisitor));
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$22 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  /**
	   * @param {?} sourceUrl
	   * @param {?} expr
	   * @param {?} declarations
	   * @param {?} vars
	   * @return {?}
	   */
	  function evalExpression(sourceUrl, expr, declarations, vars) {
	      var /** @type {?} */ fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
	      var /** @type {?} */ fnArgNames = [];
	      var /** @type {?} */ fnArgValues = [];
	      for (var argName in vars) {
	          fnArgNames.push(argName);
	          fnArgValues.push(vars[argName]);
	      }
	      return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
	  }
	  /**
	   * @param {?} sourceUrl
	   * @param {?} statements
	   * @param {?} resultVar
	   * @return {?}
	   */
	  function jitStatements(sourceUrl, statements, resultVar) {
	      var /** @type {?} */ converter = new JitEmitterVisitor();
	      var /** @type {?} */ ctx = EmitterVisitorContext.createRoot([resultVar]);
	      converter.visitAllStatements(statements, ctx);
	      return evalExpression(sourceUrl, resultVar, ctx.toSource(), converter.getArgs());
	  }
	  var JitEmitterVisitor = (function (_super) {
	      __extends$22(JitEmitterVisitor, _super);
	      function JitEmitterVisitor() {
	          _super.apply(this, arguments);
	          this._evalArgNames = [];
	          this._evalArgValues = [];
	      }
	      /**
	       * @return {?}
	       */
	      JitEmitterVisitor.prototype.getArgs = function () {
	          var /** @type {?} */ result = {};
	          for (var /** @type {?} */ i = 0; i < this._evalArgNames.length; i++) {
	              result[this._evalArgNames[i]] = this._evalArgValues[i];
	          }
	          return result;
	      };
	      /**
	       * @param {?} ast
	       * @param {?} ctx
	       * @return {?}
	       */
	      JitEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
	          var /** @type {?} */ value = ast.value.reference;
	          var /** @type {?} */ id = this._evalArgValues.indexOf(value);
	          if (id === -1) {
	              id = this._evalArgValues.length;
	              this._evalArgValues.push(value);
	              var /** @type {?} */ name_1 = identifierName(ast.value) || 'val';
	              this._evalArgNames.push("jit_" + name_1 + id);
	          }
	          ctx.print(this._evalArgNames[id]);
	          return null;
	      };
	      return JitEmitterVisitor;
	  }(AbstractJsEmitterVisitor));
	
	  /**
	   *  An internal module of the Angular compiler that begins with component types,
	    * extracts templates, and eventually produces a compiled version of the component
	    * ready for linking into an application.
	    * *
	    * from a trusted source. Attacker-controlled data introduced by a template could expose your
	    * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).
	   */
	  var JitCompiler = (function () {
	      /**
	       * @param {?} _injector
	       * @param {?} _metadataResolver
	       * @param {?} _templateParser
	       * @param {?} _styleCompiler
	       * @param {?} _viewCompiler
	       * @param {?} _ngModuleCompiler
	       * @param {?} _directiveWrapperCompiler
	       * @param {?} _compilerConfig
	       * @param {?} _animationParser
	       */
	      function JitCompiler(_injector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _directiveWrapperCompiler, _compilerConfig, _animationParser) {
	          this._injector = _injector;
	          this._metadataResolver = _metadataResolver;
	          this._templateParser = _templateParser;
	          this._styleCompiler = _styleCompiler;
	          this._viewCompiler = _viewCompiler;
	          this._ngModuleCompiler = _ngModuleCompiler;
	          this._directiveWrapperCompiler = _directiveWrapperCompiler;
	          this._compilerConfig = _compilerConfig;
	          this._animationParser = _animationParser;
	          this._compiledTemplateCache = new Map();
	          this._compiledHostTemplateCache = new Map();
	          this._compiledDirectiveWrapperCache = new Map();
	          this._compiledNgModuleCache = new Map();
	          this._animationCompiler = new AnimationCompiler();
	      }
	      Object.defineProperty(JitCompiler.prototype, "injector", {
	          /**
	           * @return {?}
	           */
	          get: function () { return this._injector; },
	          enumerable: true,
	          configurable: true
	      });
	      /**
	       * @param {?} moduleType
	       * @return {?}
	       */
	      JitCompiler.prototype.compileModuleSync = function (moduleType) {
	          return this._compileModuleAndComponents(moduleType, true).syncResult;
	      };
	      /**
	       * @param {?} moduleType
	       * @return {?}
	       */
	      JitCompiler.prototype.compileModuleAsync = function (moduleType) {
	          return this._compileModuleAndComponents(moduleType, false).asyncResult;
	      };
	      /**
	       * @param {?} moduleType
	       * @return {?}
	       */
	      JitCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	          return this._compileModuleAndAllComponents(moduleType, true).syncResult;
	      };
	      /**
	       * @param {?} moduleType
	       * @return {?}
	       */
	      JitCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	          return this._compileModuleAndAllComponents(moduleType, false).asyncResult;
	      };
	      /**
	       * @param {?} component
	       * @return {?}
	       */
	      JitCompiler.prototype.getNgContentSelectors = function (component) {
	          var /** @type {?} */ template = this._compiledTemplateCache.get(component);
	          if (!template) {
	              throw new Error("The component " + stringify(component) + " is not yet compiled!");
	          }
	          return template.compMeta.template.ngContentSelectors;
	      };
	      /**
	       * @param {?} moduleType
	       * @param {?} isSync
	       * @return {?}
	       */
	      JitCompiler.prototype._compileModuleAndComponents = function (moduleType, isSync) {
	          var _this = this;
	          var /** @type {?} */ loadingPromise = this._loadModules(moduleType, isSync);
	          var /** @type {?} */ createResult = function () {
	              _this._compileComponents(moduleType, null);
	              return _this._compileModule(moduleType);
	          };
	          if (isSync) {
	              return new SyncAsyncResult(createResult());
	          }
	          else {
	              return new SyncAsyncResult(null, loadingPromise.then(createResult));
	          }
	      };
	      /**
	       * @param {?} moduleType
	       * @param {?} isSync
	       * @return {?}
	       */
	      JitCompiler.prototype._compileModuleAndAllComponents = function (moduleType, isSync) {
	          var _this = this;
	          var /** @type {?} */ loadingPromise = this._loadModules(moduleType, isSync);
	          var /** @type {?} */ createResult = function () {
	              var /** @type {?} */ componentFactories = [];
	              _this._compileComponents(moduleType, componentFactories);
	              return new _angular_core.ModuleWithComponentFactories(_this._compileModule(moduleType), componentFactories);
	          };
	          if (isSync) {
	              return new SyncAsyncResult(createResult());
	          }
	          else {
	              return new SyncAsyncResult(null, loadingPromise.then(createResult));
	          }
	      };
	      /**
	       * @param {?} mainModule
	       * @param {?} isSync
	       * @return {?}
	       */
	      JitCompiler.prototype._loadModules = function (mainModule, isSync) {
	          var _this = this;
	          var /** @type {?} */ loadingPromises = [];
	          var /** @type {?} */ ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
	          // Note: the loadingPromise for a module only includes the loading of the exported directives
	          // of imported modules.
	          // However, for runtime compilation, we want to transitively compile all modules,
	          // so we also need to call loadNgModuleMetadata for all nested modules.
	          ngModule.transitiveModule.modules.forEach(function (localModuleMeta) {
	              loadingPromises.push(_this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(localModuleMeta.reference, isSync));
	          });
	          return Promise.all(loadingPromises);
	      };
	      /**
	       * @param {?} moduleType
	       * @return {?}
	       */
	      JitCompiler.prototype._compileModule = function (moduleType) {
	          var _this = this;
	          var /** @type {?} */ ngModuleFactory = this._compiledNgModuleCache.get(moduleType);
	          if (!ngModuleFactory) {
	              var /** @type {?} */ moduleMeta_1 = this._metadataResolver.getNgModuleMetadata(moduleType);
	              // Always provide a bound Compiler
	              var /** @type {?} */ extraProviders = [this._metadataResolver.getProviderMetadata(new ProviderMeta(_angular_core.Compiler, { useFactory: function () { return new ModuleBoundCompiler(_this, moduleMeta_1.type.reference); } }))];
	              var /** @type {?} */ compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders);
	              compileResult.dependencies.forEach(function (dep) {
	                  dep.placeholder.reference =
	                      _this._assertComponentKnown(dep.comp.reference, true).proxyComponentFactory;
	              });
	              if (!this._compilerConfig.useJit) {
	                  ngModuleFactory =
	                      interpretStatements(compileResult.statements, compileResult.ngModuleFactoryVar);
	              }
	              else {
	                  ngModuleFactory = jitStatements("/" + identifierName(moduleMeta_1.type) + "/module.ngfactory.js", compileResult.statements, compileResult.ngModuleFactoryVar);
	              }
	              this._compiledNgModuleCache.set(moduleMeta_1.type.reference, ngModuleFactory);
	          }
	          return ngModuleFactory;
	      };
	      /**
	       * @param {?} mainModule
	       * @param {?} allComponentFactories
	       * @return {?}
	       */
	      JitCompiler.prototype._compileComponents = function (mainModule, allComponentFactories) {
	          var _this = this;
	          var /** @type {?} */ ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
	          var /** @type {?} */ moduleByDirective = new Map();
	          var /** @type {?} */ templates = new Set();
	          ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {
	              var /** @type {?} */ localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);
	              localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
	                  moduleByDirective.set(dirIdentifier.reference, localModuleMeta);
	                  var /** @type {?} */ dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
	                  _this._compileDirectiveWrapper(dirMeta, localModuleMeta);
	                  if (dirMeta.isComponent) {
	                      templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));
	                      if (allComponentFactories) {
	                          var /** @type {?} */ template = _this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);
	                          templates.add(template);
	                          allComponentFactories.push(template.proxyComponentFactory);
	                      }
	                  }
	              });
	          });
	          ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {
	              var /** @type {?} */ localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);
	              localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
	                  var /** @type {?} */ dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
	                  if (dirMeta.isComponent) {
	                      dirMeta.entryComponents.forEach(function (entryComponentType) {
	                          var /** @type {?} */ moduleMeta = moduleByDirective.get(entryComponentType.reference);
	                          templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta));
	                      });
	                  }
	              });
	              localModuleMeta.entryComponents.forEach(function (entryComponentType) {
	                  var /** @type {?} */ moduleMeta = moduleByDirective.get(entryComponentType.reference);
	                  templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta));
	              });
	          });
	          templates.forEach(function (template) { return _this._compileTemplate(template); });
	      };
	      /**
	       * @param {?} type
	       * @return {?}
	       */
	      JitCompiler.prototype.clearCacheFor = function (type) {
	          this._compiledNgModuleCache.delete(type);
	          this._metadataResolver.clearCacheFor(type);
	          this._compiledHostTemplateCache.delete(type);
	          var /** @type {?} */ compiledTemplate = this._compiledTemplateCache.get(type);
	          if (compiledTemplate) {
	              this._compiledTemplateCache.delete(type);
	          }
	      };
	      /**
	       * @return {?}
	       */
	      JitCompiler.prototype.clearCache = function () {
	          this._metadataResolver.clearCache();
	          this._compiledTemplateCache.clear();
	          this._compiledHostTemplateCache.clear();
	          this._compiledNgModuleCache.clear();
	      };
	      /**
	       * @param {?} compType
	       * @param {?} ngModule
	       * @return {?}
	       */
	      JitCompiler.prototype._createCompiledHostTemplate = function (compType, ngModule) {
	          if (!ngModule) {
	              throw new Error("Component " + stringify(compType) + " is not part of any NgModule or the module has not been imported into your module.");
	          }
	          var /** @type {?} */ compiledTemplate = this._compiledHostTemplateCache.get(compType);
	          if (!compiledTemplate) {
	              var /** @type {?} */ compMeta = this._metadataResolver.getDirectiveMetadata(compType);
	              assertComponent(compMeta);
	              var /** @type {?} */ HostClass = function HostClass() { };
	              ((HostClass)).overriddenName = identifierName(compMeta.type) + "_Host";
	              var /** @type {?} */ hostMeta = createHostComponentMeta(HostClass, compMeta);
	              compiledTemplate = new CompiledTemplate(true, compMeta.selector, compMeta.type, hostMeta, ngModule, [compMeta.type]);
	              this._compiledHostTemplateCache.set(compType, compiledTemplate);
	          }
	          return compiledTemplate;
	      };
	      /**
	       * @param {?} compMeta
	       * @param {?} ngModule
	       * @return {?}
	       */
	      JitCompiler.prototype._createCompiledTemplate = function (compMeta, ngModule) {
	          var /** @type {?} */ compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);
	          if (!compiledTemplate) {
	              assertComponent(compMeta);
	              compiledTemplate = new CompiledTemplate(false, compMeta.selector, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);
	              this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);
	          }
	          return compiledTemplate;
	      };
	      /**
	       * @param {?} compType
	       * @param {?} isHost
	       * @return {?}
	       */
	      JitCompiler.prototype._assertComponentKnown = function (compType, isHost) {
	          var /** @type {?} */ compiledTemplate = isHost ? this._compiledHostTemplateCache.get(compType) :
	              this._compiledTemplateCache.get(compType);
	          if (!compiledTemplate) {
	              throw new Error("Illegal state: Compiled view for component " + stringify(compType) + " (host: " + isHost + ") does not exist!");
	          }
	          return compiledTemplate;
	      };
	      /**
	       * @param {?} dirType
	       * @return {?}
	       */
	      JitCompiler.prototype._assertDirectiveWrapper = function (dirType) {
	          var /** @type {?} */ dirWrapper = this._compiledDirectiveWrapperCache.get(dirType);
	          if (!dirWrapper) {
	              throw new Error("Illegal state: Directive wrapper for " + stringify(dirType) + " has not been compiled!");
	          }
	          return dirWrapper;
	      };
	      /**
	       * @param {?} dirMeta
	       * @param {?} moduleMeta
	       * @return {?}
	       */
	      JitCompiler.prototype._compileDirectiveWrapper = function (dirMeta, moduleMeta) {
	          var /** @type {?} */ compileResult = this._directiveWrapperCompiler.compile(dirMeta);
	          var /** @type {?} */ statements = compileResult.statements;
	          var /** @type {?} */ directiveWrapperClass;
	          if (!this._compilerConfig.useJit) {
	              directiveWrapperClass = interpretStatements(statements, compileResult.dirWrapperClassVar);
	          }
	          else {
	              directiveWrapperClass = jitStatements("/" + identifierName(moduleMeta.type) + "/" + identifierName(dirMeta.type) + "/wrapper.ngfactory.js", statements, compileResult.dirWrapperClassVar);
	          }
	          this._compiledDirectiveWrapperCache.set(dirMeta.type.reference, directiveWrapperClass);
	      };
	      /**
	       * @param {?} template
	       * @return {?}
	       */
	      JitCompiler.prototype._compileTemplate = function (template) {
	          var _this = this;
	          if (template.isCompiled) {
	              return;
	          }
	          var /** @type {?} */ compMeta = template.compMeta;
	          var /** @type {?} */ externalStylesheetsByModuleUrl = new Map();
	          var /** @type {?} */ stylesCompileResult = this._styleCompiler.compileComponent(compMeta);
	          stylesCompileResult.externalStylesheets.forEach(function (r) { externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r); });
	          this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);
	          var /** @type {?} */ parsedAnimations = this._animationParser.parseComponent(compMeta);
	          var /** @type {?} */ directives = template.directives.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });
	          var /** @type {?} */ pipes = template.ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });
	          var /** @type {?} */ parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, template.ngModule.schemas, identifierName(compMeta.type));
	          var /** @type {?} */ compiledAnimations = this._animationCompiler.compile(identifierName(compMeta.type), parsedAnimations);
	          var /** @type {?} */ compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), pipes, compiledAnimations);
	          compileResult.dependencies.forEach(function (dep) {
	              var /** @type {?} */ depTemplate;
	              if (dep instanceof ViewClassDependency) {
	                  var /** @type {?} */ vfd = (dep);
	                  depTemplate = _this._assertComponentKnown(vfd.comp.reference, false);
	                  vfd.placeholder.reference = depTemplate.proxyViewClass;
	              }
	              else if (dep instanceof ComponentFactoryDependency$1) {
	                  var /** @type {?} */ cfd = (dep);
	                  depTemplate = _this._assertComponentKnown(cfd.comp.reference, true);
	                  cfd.placeholder.reference = depTemplate.proxyComponentFactory;
	              }
	              else if (dep instanceof DirectiveWrapperDependency) {
	                  var /** @type {?} */ dwd = (dep);
	                  dwd.placeholder.reference = _this._assertDirectiveWrapper(dwd.dir.reference);
	              }
	          });
	          var /** @type {?} */ statements = (_a = stylesCompileResult.componentStylesheet.statements).concat.apply(_a, compiledAnimations.map(function (ca) { return ca.statements; }))
	              .concat(compileResult.statements);
	          var /** @type {?} */ viewClass;
	          if (!this._compilerConfig.useJit) {
	              viewClass = interpretStatements(statements, compileResult.viewClassVar);
	          }
	          else {
	              viewClass = jitStatements("/" + identifierName(template.ngModule.type) + "/" + identifierName(template.compType) + "/" + (template.isHost ? 'host' : 'component') + ".ngfactory.js", statements, compileResult.viewClassVar);
	          }
	          template.compiled(viewClass);
	          var _a;
	      };
	      /**
	       * @param {?} result
	       * @param {?} externalStylesheetsByModuleUrl
	       * @return {?}
	       */
	      JitCompiler.prototype._resolveStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
	          var _this = this;
	          result.dependencies.forEach(function (dep, i) {
	              var /** @type {?} */ nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);
	              var /** @type {?} */ nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
	              dep.valuePlaceholder.reference = nestedStylesArr;
	          });
	      };
	      /**
	       * @param {?} result
	       * @param {?} externalStylesheetsByModuleUrl
	       * @return {?}
	       */
	      JitCompiler.prototype._resolveAndEvalStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
	          this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);
	          if (!this._compilerConfig.useJit) {
	              return interpretStatements(result.statements, result.stylesVar);
	          }
	          else {
	              return jitStatements("/" + result.meta.moduleUrl + ".ngstyle.js", result.statements, result.stylesVar);
	          }
	      };
	      JitCompiler.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      JitCompiler.ctorParameters = function () { return [
	          { type: _angular_core.Injector, },
	          { type: CompileMetadataResolver, },
	          { type: TemplateParser, },
	          { type: StyleCompiler, },
	          { type: ViewCompiler, },
	          { type: NgModuleCompiler, },
	          { type: DirectiveWrapperCompiler, },
	          { type: CompilerConfig, },
	          { type: AnimationParser, },
	      ]; };
	      return JitCompiler;
	  }());
	  var CompiledTemplate = (function () {
	      /**
	       * @param {?} isHost
	       * @param {?} selector
	       * @param {?} compType
	       * @param {?} compMeta
	       * @param {?} ngModule
	       * @param {?} directives
	       */
	      function CompiledTemplate(isHost, selector, compType, compMeta, ngModule, directives) {
	          this.isHost = isHost;
	          this.compType = compType;
	          this.compMeta = compMeta;
	          this.ngModule = ngModule;
	          this.directives = directives;
	          this._viewClass = null;
	          this.isCompiled = false;
	          var self = this;
	          this.proxyViewClass = function () {
	              if (!self._viewClass) {
	                  throw new Error("Illegal state: CompiledTemplate for " + stringify(self.compType) + " is not compiled yet!");
	              }
	              return self._viewClass.apply(this, arguments);
	          };
	          this.proxyComponentFactory = isHost ?
	              new _angular_core.ComponentFactory(selector, this.proxyViewClass, compType.reference) :
	              null;
	      }
	      /**
	       * @param {?} viewClass
	       * @return {?}
	       */
	      CompiledTemplate.prototype.compiled = function (viewClass) {
	          this._viewClass = viewClass;
	          this.proxyViewClass.prototype = viewClass.prototype;
	          this.isCompiled = true;
	      };
	      return CompiledTemplate;
	  }());
	  /**
	   * @param {?} meta
	   * @return {?}
	   */
	  function assertComponent(meta) {
	      if (!meta.isComponent) {
	          throw new Error("Could not compile '" + identifierName(meta.type) + "' because it is not a component.");
	      }
	  }
	  /**
	   *  Implements `Compiler` by delegating to the JitCompiler using a known module.
	   */
	  var ModuleBoundCompiler = (function () {
	      /**
	       * @param {?} _delegate
	       * @param {?} _ngModule
	       */
	      function ModuleBoundCompiler(_delegate, _ngModule) {
	          this._delegate = _delegate;
	          this._ngModule = _ngModule;
	      }
	      Object.defineProperty(ModuleBoundCompiler.prototype, "_injector", {
	          /**
	           * @return {?}
	           */
	          get: function () { return this._delegate.injector; },
	          enumerable: true,
	          configurable: true
	      });
	      /**
	       * @param {?} moduleType
	       * @return {?}
	       */
	      ModuleBoundCompiler.prototype.compileModuleSync = function (moduleType) {
	          return this._delegate.compileModuleSync(moduleType);
	      };
	      /**
	       * @param {?} moduleType
	       * @return {?}
	       */
	      ModuleBoundCompiler.prototype.compileModuleAsync = function (moduleType) {
	          return this._delegate.compileModuleAsync(moduleType);
	      };
	      /**
	       * @param {?} moduleType
	       * @return {?}
	       */
	      ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	          return this._delegate.compileModuleAndAllComponentsSync(moduleType);
	      };
	      /**
	       * @param {?} moduleType
	       * @return {?}
	       */
	      ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	          return this._delegate.compileModuleAndAllComponentsAsync(moduleType);
	      };
	      /**
	       * @param {?} component
	       * @return {?}
	       */
	      ModuleBoundCompiler.prototype.getNgContentSelectors = function (component) {
	          return this._delegate.getNgContentSelectors(component);
	      };
	      /**
	       *  Clears all caches
	       * @return {?}
	       */
	      ModuleBoundCompiler.prototype.clearCache = function () { this._delegate.clearCache(); };
	      /**
	       *  Clears the cache for the given component/ngModule.
	       * @param {?} type
	       * @return {?}
	       */
	      ModuleBoundCompiler.prototype.clearCacheFor = function (type) { this._delegate.clearCacheFor(type); };
	      return ModuleBoundCompiler;
	  }());
	
	  /**
	   *  A container for message extracted from the templates.
	   */
	  var MessageBundle = (function () {
	      /**
	       * @param {?} _htmlParser
	       * @param {?} _implicitTags
	       * @param {?} _implicitAttrs
	       */
	      function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs) {
	          this._htmlParser = _htmlParser;
	          this._implicitTags = _implicitTags;
	          this._implicitAttrs = _implicitAttrs;
	          this._messages = [];
	      }
	      /**
	       * @param {?} html
	       * @param {?} url
	       * @param {?} interpolationConfig
	       * @return {?}
	       */
	      MessageBundle.prototype.updateFromTemplate = function (html, url, interpolationConfig) {
	          var /** @type {?} */ htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);
	          if (htmlParserResult.errors.length) {
	              return htmlParserResult.errors;
	          }
	          var /** @type {?} */ i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);
	          if (i18nParserResult.errors.length) {
	              return i18nParserResult.errors;
	          }
	          (_a = this._messages).push.apply(_a, i18nParserResult.messages);
	          var _a;
	      };
	      /**
	       * @return {?}
	       */
	      MessageBundle.prototype.getMessages = function () { return this._messages; };
	      /**
	       * @param {?} serializer
	       * @return {?}
	       */
	      MessageBundle.prototype.write = function (serializer) { return serializer.write(this._messages); };
	      return MessageBundle;
	  }());
	
	  var Extractor = (function () {
	      /**
	       * @param {?} options
	       * @param {?} host
	       * @param {?} staticReflector
	       * @param {?} messageBundle
	       * @param {?} metadataResolver
	       */
	      function Extractor(options, host, staticReflector, messageBundle, metadataResolver) {
	          this.options = options;
	          this.host = host;
	          this.staticReflector = staticReflector;
	          this.messageBundle = messageBundle;
	          this.metadataResolver = metadataResolver;
	      }
	      /**
	       * @param {?} rootFiles
	       * @return {?}
	       */
	      Extractor.prototype.extract = function (rootFiles) {
	          var _this = this;
	          var /** @type {?} */ programSymbols = extractProgramSymbols(this.staticReflector, rootFiles, this.options);
	          var _a = analyzeAndValidateNgModules(programSymbols, this.options, this.metadataResolver), ngModuleByPipeOrDirective = _a.ngModuleByPipeOrDirective, files = _a.files, ngModules = _a.ngModules;
	          return Promise
	              .all(ngModules.map(function (ngModule) { return _this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false); }))
	              .then(function () {
	              var /** @type {?} */ errors = [];
	              files.forEach(function (file) {
	                  var /** @type {?} */ compMetas = [];
	                  file.directives.forEach(function (directiveType) {
	                      var /** @type {?} */ dirMeta = _this.metadataResolver.getDirectiveMetadata(directiveType);
	                      if (dirMeta && dirMeta.isComponent) {
	                          compMetas.push(dirMeta);
	                      }
	                  });
	                  compMetas.forEach(function (compMeta) {
	                      var /** @type {?} */ html = compMeta.template.template;
	                      var /** @type {?} */ interpolationConfig = InterpolationConfig.fromArray(compMeta.template.interpolation);
	                      errors.push.apply(errors, _this.messageBundle.updateFromTemplate(html, file.srcUrl, interpolationConfig));
	                  });
	              });
	              if (errors.length) {
	                  throw new Error(errors.map(function (e) { return e.toString(); }).join('\n'));
	              }
	              return _this.messageBundle;
	          });
	      };
	      /**
	       * @param {?} host
	       * @param {?} options
	       * @return {?}
	       */
	      Extractor.create = function (host, options) {
	          var /** @type {?} */ htmlParser = new I18NHtmlParser(new HtmlParser());
	          var /** @type {?} */ urlResolver = createOfflineCompileUrlResolver();
	          var /** @type {?} */ staticReflector = new StaticReflector(host);
	          StaticAndDynamicReflectionCapabilities.install(staticReflector);
	          var /** @type {?} */ config = new CompilerConfig({
	              genDebugInfo: false,
	              defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated,
	              logBindingUpdate: false,
	              useJit: false
	          });
	          var /** @type {?} */ normalizer = new DirectiveNormalizer({ get: function (url) { return host.loadResource(url); } }, urlResolver, htmlParser, config);
	          var /** @type {?} */ elementSchemaRegistry = new DomElementSchemaRegistry();
	          var /** @type {?} */ resolver = new CompileMetadataResolver(new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), new AotSummaryResolver(host, staticReflector, options), elementSchemaRegistry, normalizer, staticReflector);
	          // TODO(vicb): implicit tags & attributes
	          var /** @type {?} */ messageBundle = new MessageBundle(htmlParser, [], {});
	          var /** @type {?} */ extractor = new Extractor(options, host, staticReflector, messageBundle, resolver);
	          return { extractor: extractor, staticReflector: staticReflector };
	      };
	      return Extractor;
	  }());
	
	  var /** @type {?} */ _NO_RESOURCE_LOADER = {
	      /**
	       * @param {?} url
	       * @return {?}
	       */
	      get: function (url) {
	          throw new Error("No ResourceLoader implementation has been provided. Can't read the url \"" + url + "\"");
	      }
	  };
	  /**
	   * A set of providers that provide `JitCompiler` and its dependencies to use for
	   * template compilation.
	   */
	  var /** @type {?} */ COMPILER_PROVIDERS = [
	      { provide: Reflector, useValue: reflector },
	      { provide: ReflectorReader, useExisting: Reflector },
	      { provide: ResourceLoader, useValue: _NO_RESOURCE_LOADER },
	      SummaryResolver,
	      Console,
	      Lexer,
	      Parser,
	      HtmlParser,
	      {
	          provide: I18NHtmlParser,
	          useFactory: function (parser, translations, format) {
	              return new I18NHtmlParser(parser, translations, format);
	          },
	          deps: [
	              HtmlParser,
	              [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS)],
	              [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS_FORMAT)],
	          ]
	      },
	      TemplateParser,
	      DirectiveNormalizer,
	      CompileMetadataResolver,
	      DEFAULT_PACKAGE_URL_PROVIDER,
	      StyleCompiler,
	      ViewCompiler,
	      NgModuleCompiler,
	      DirectiveWrapperCompiler,
	      { provide: CompilerConfig, useValue: new CompilerConfig() },
	      JitCompiler,
	      { provide: _angular_core.Compiler, useExisting: JitCompiler },
	      DomElementSchemaRegistry,
	      { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry },
	      UrlResolver,
	      DirectiveResolver,
	      PipeResolver,
	      NgModuleResolver,
	      AnimationParser
	  ];
	  var JitCompilerFactory = (function () {
	      /**
	       * @param {?} defaultOptions
	       */
	      function JitCompilerFactory(defaultOptions) {
	          this._defaultOptions = [{
	                  useDebug: _angular_core.isDevMode(),
	                  useJit: true,
	                  defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated
	              }].concat(defaultOptions);
	      }
	      /**
	       * @param {?=} options
	       * @return {?}
	       */
	      JitCompilerFactory.prototype.createCompiler = function (options) {
	          if (options === void 0) { options = []; }
	          var /** @type {?} */ mergedOptions = _mergeOptions(this._defaultOptions.concat(options));
	          var /** @type {?} */ injector = _angular_core.ReflectiveInjector.resolveAndCreate([
	              COMPILER_PROVIDERS, {
	                  provide: CompilerConfig,
	                  useFactory: function () {
	                      return new CompilerConfig({
	                          // let explicit values from the compiler options overwrite options
	                          // from the app providers. E.g. important for the testing platform.
	                          genDebugInfo: mergedOptions.useDebug,
	                          // let explicit values from the compiler options overwrite options
	                          // from the app providers
	                          useJit: mergedOptions.useJit,
	                          // let explicit values from the compiler options overwrite options
	                          // from the app providers
	                          defaultEncapsulation: mergedOptions.defaultEncapsulation,
	                          logBindingUpdate: mergedOptions.useDebug
	                      });
	                  },
	                  deps: []
	              },
	              mergedOptions.providers
	          ]);
	          return injector.get(_angular_core.Compiler);
	      };
	      JitCompilerFactory.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      JitCompilerFactory.ctorParameters = function () { return [
	          { type: Array, decorators: [{ type: _angular_core.Inject, args: [_angular_core.COMPILER_OPTIONS,] },] },
	      ]; };
	      return JitCompilerFactory;
	  }());
	  /**
	   * @return {?}
	   */
	  function _initReflector() {
	      reflector.reflectionCapabilities = new ReflectionCapabilities();
	  }
	  /**
	   * A platform that included corePlatform and the compiler.
	   *
	   * @experimental
	   */
	  var /** @type {?} */ platformCoreDynamic = _angular_core.createPlatformFactory(_angular_core.platformCore, 'coreDynamic', [
	      { provide: _angular_core.COMPILER_OPTIONS, useValue: {}, multi: true },
	      { provide: _angular_core.CompilerFactory, useClass: JitCompilerFactory },
	      { provide: _angular_core.PLATFORM_INITIALIZER, useValue: _initReflector, multi: true },
	  ]);
	  /**
	   * @param {?} optionsArr
	   * @return {?}
	   */
	  function _mergeOptions(optionsArr) {
	      return {
	          useDebug: _lastDefined(optionsArr.map(function (options) { return options.useDebug; })),
	          useJit: _lastDefined(optionsArr.map(function (options) { return options.useJit; })),
	          defaultEncapsulation: _lastDefined(optionsArr.map(function (options) { return options.defaultEncapsulation; })),
	          providers: _mergeArrays(optionsArr.map(function (options) { return options.providers; }))
	      };
	  }
	  /**
	   * @param {?} args
	   * @return {?}
	   */
	  function _lastDefined(args) {
	      for (var /** @type {?} */ i = args.length - 1; i >= 0; i--) {
	          if (args[i] !== undefined) {
	              return args[i];
	          }
	      }
	      return undefined;
	  }
	  /**
	   * @param {?} parts
	   * @return {?}
	   */
	  function _mergeArrays(parts) {
	      var /** @type {?} */ result = [];
	      parts.forEach(function (part) { return part && result.push.apply(result, part); });
	      return result;
	  }
	
	  /**
	   *  Interface that defines how import statements should be generated.
	   * @abstract
	   */
	  var ImportResolver = (function () {
	      function ImportResolver() {
	      }
	      /**
	       *  Converts a file path to a module name that can be used as an `import.
	        * I.e. `path/to/importedFile.ts` should be imported by `path/to/containingFile.ts`.
	       * @abstract
	       * @param {?} importedFilePath
	       * @param {?} containingFilePath
	       * @return {?}
	       */
	      ImportResolver.prototype.fileNameToModuleName = function (importedFilePath, containingFilePath) { };
	      return ImportResolver;
	  }());
	
	  exports.VERSION = VERSION;
	  exports.TextAst = TextAst;
	  exports.BoundTextAst = BoundTextAst;
	  exports.AttrAst = AttrAst;
	  exports.BoundElementPropertyAst = BoundElementPropertyAst;
	  exports.BoundEventAst = BoundEventAst;
	  exports.ReferenceAst = ReferenceAst;
	  exports.VariableAst = VariableAst;
	  exports.ElementAst = ElementAst;
	  exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
	  exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
	  exports.DirectiveAst = DirectiveAst;
	  exports.ProviderAst = ProviderAst;
	  exports.ProviderAstType = ProviderAstType;
	  exports.NgContentAst = NgContentAst;
	  exports.PropertyBindingType = PropertyBindingType;
	  exports.templateVisitAll = templateVisitAll;
	  exports.TEMPLATE_TRANSFORMS = TEMPLATE_TRANSFORMS;
	  exports.CompilerConfig = CompilerConfig;
	  exports.RenderTypes = RenderTypes;
	  exports.CompileAnimationEntryMetadata = CompileAnimationEntryMetadata;
	  exports.CompileAnimationStateMetadata = CompileAnimationStateMetadata;
	  exports.CompileAnimationStateDeclarationMetadata = CompileAnimationStateDeclarationMetadata;
	  exports.CompileAnimationStateTransitionMetadata = CompileAnimationStateTransitionMetadata;
	  exports.CompileAnimationMetadata = CompileAnimationMetadata;
	  exports.CompileAnimationKeyframesSequenceMetadata = CompileAnimationKeyframesSequenceMetadata;
	  exports.CompileAnimationStyleMetadata = CompileAnimationStyleMetadata;
	  exports.CompileAnimationAnimateMetadata = CompileAnimationAnimateMetadata;
	  exports.CompileAnimationWithStepsMetadata = CompileAnimationWithStepsMetadata;
	  exports.CompileAnimationSequenceMetadata = CompileAnimationSequenceMetadata;
	  exports.CompileAnimationGroupMetadata = CompileAnimationGroupMetadata;
	  exports.identifierName = identifierName;
	  exports.identifierModuleUrl = identifierModuleUrl;
	  exports.CompileSummaryKind = CompileSummaryKind;
	  exports.tokenName = tokenName;
	  exports.tokenReference = tokenReference;
	  exports.CompileStylesheetMetadata = CompileStylesheetMetadata;
	  exports.CompileTemplateMetadata = CompileTemplateMetadata;
	  exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
	  exports.createHostComponentMeta = createHostComponentMeta;
	  exports.CompilePipeMetadata = CompilePipeMetadata;
	  exports.CompileNgModuleMetadata = CompileNgModuleMetadata;
	  exports.TransitiveCompileNgModuleMetadata = TransitiveCompileNgModuleMetadata;
	  exports.ProviderMeta = ProviderMeta;
	  exports.createAotCompiler = createAotCompiler;
	  exports.AotCompiler = AotCompiler;
	  exports.analyzeNgModules = analyzeNgModules;
	  exports.analyzeAndValidateNgModules = analyzeAndValidateNgModules;
	  exports.extractProgramSymbols = extractProgramSymbols;
	  exports.StaticSymbolCache = StaticSymbolCache;
	  exports.StaticReflector = StaticReflector;
	  exports.StaticAndDynamicReflectionCapabilities = StaticAndDynamicReflectionCapabilities;
	  exports.StaticSymbol = StaticSymbol;
	  exports.AotSummaryResolver = AotSummaryResolver;
	  exports.JitCompiler = JitCompiler;
	  exports.COMPILER_PROVIDERS = COMPILER_PROVIDERS;
	  exports.JitCompilerFactory = JitCompilerFactory;
	  exports.platformCoreDynamic = platformCoreDynamic;
	  exports.createUrlResolverWithoutPackagePrefix = createUrlResolverWithoutPackagePrefix;
	  exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver;
	  exports.DEFAULT_PACKAGE_URL_PROVIDER = DEFAULT_PACKAGE_URL_PROVIDER;
	  exports.UrlResolver = UrlResolver;
	  exports.getUrlScheme = getUrlScheme;
	  exports.ResourceLoader = ResourceLoader;
	  exports.DirectiveResolver = DirectiveResolver;
	  exports.PipeResolver = PipeResolver;
	  exports.NgModuleResolver = NgModuleResolver;
	  exports.DEFAULT_INTERPOLATION_CONFIG = DEFAULT_INTERPOLATION_CONFIG;
	  exports.InterpolationConfig = InterpolationConfig;
	  exports.ElementSchemaRegistry = ElementSchemaRegistry;
	  exports.Extractor = Extractor;
	  exports.I18NHtmlParser = I18NHtmlParser;
	  exports.MessageBundle = MessageBundle;
	  exports.Xliff = Xliff;
	  exports.Xmb = Xmb;
	  exports.Xtb = Xtb;
	  exports.DirectiveNormalizer = DirectiveNormalizer;
	  exports.TokenType = TokenType;
	  exports.Lexer = Lexer;
	  exports.Token = Token;
	  exports.EOF = EOF;
	  exports.isIdentifier = isIdentifier;
	  exports.isQuote = isQuote;
	  exports.SplitInterpolation = SplitInterpolation;
	  exports.TemplateBindingParseResult = TemplateBindingParseResult;
	  exports.Parser = Parser;
	  exports._ParseAST = _ParseAST;
	  exports.ERROR_COLLECTOR_TOKEN = ERROR_COLLECTOR_TOKEN;
	  exports.CompileMetadataResolver = CompileMetadataResolver;
	  exports.componentModuleUrl = componentModuleUrl;
	  exports.ParseTreeResult = ParseTreeResult;
	  exports.TreeError = TreeError;
	  exports.HtmlParser = HtmlParser;
	  exports.NgModuleCompiler = NgModuleCompiler;
	  exports.DirectiveWrapperCompiler = DirectiveWrapperCompiler;
	  exports.ImportResolver = ImportResolver;
	  exports.debugOutputAstAsTypeScript = debugOutputAstAsTypeScript;
	  exports.TypeScriptEmitter = TypeScriptEmitter;
	  exports.ParseLocation = ParseLocation;
	  exports.ParseSourceFile = ParseSourceFile;
	  exports.ParseSourceSpan = ParseSourceSpan;
	  exports.ParseErrorLevel = ParseErrorLevel;
	  exports.ParseError = ParseError;
	  exports.DomElementSchemaRegistry = DomElementSchemaRegistry;
	  exports.CssSelector = CssSelector;
	  exports.SelectorMatcher = SelectorMatcher;
	  exports.SelectorListContext = SelectorListContext;
	  exports.SelectorContext = SelectorContext;
	  exports.StylesCompileDependency = StylesCompileDependency;
	  exports.StylesCompileResult = StylesCompileResult;
	  exports.CompiledStylesheet = CompiledStylesheet;
	  exports.StyleCompiler = StyleCompiler;
	  exports.TemplateParseError = TemplateParseError;
	  exports.TemplateParseResult = TemplateParseResult;
	  exports.TemplateParser = TemplateParser;
	  exports.splitClasses = splitClasses;
	  exports.createElementCssSelector = createElementCssSelector;
	  exports.removeSummaryDuplicates = removeSummaryDuplicates;
	  exports.ViewCompiler = ViewCompiler;
	  exports.AnimationParser = AnimationParser;
	
	}));

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v2.3.1
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(269), __webpack_require__(270)) :
	    typeof define === 'function' && define.amd ? define(['exports', 'rxjs/Subject', 'rxjs/Observable'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}),global.Rx,global.Rx));
	}(this, function (exports,rxjs_Subject,rxjs_Observable) { 'use strict';
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var /** @type {?} */ globalScope;
	    if (typeof window === 'undefined') {
	        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	            globalScope = (self);
	        }
	        else {
	            globalScope = (global);
	        }
	    }
	    else {
	        globalScope = (window);
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function scheduleMicroTask(fn) {
	        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
	    }
	    // Need to declare a new variable for global here since TypeScript
	    // exports the original value of the symbol.
	    var /** @type {?} */ global$1 = globalScope;
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    function getTypeNameForDebugging(type) {
	        return type['name'] || typeof type;
	    }
	    // TODO: remove calls to assert in production environment
	    // Note: Can't just export this and import in in other files
	    // as `assert` is a reserved keyword in Dart
	    global$1.assert = function assert(condition) {
	        // TODO: to be fixed properly via #2830, noop for now
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPresent(obj) {
	        return obj != null;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isBlank(obj) {
	        return obj == null;
	    }
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    function stringify(token) {
	        if (typeof token === 'string') {
	            return token;
	        }
	        if (token == null) {
	            return '' + token;
	        }
	        if (token.overriddenName) {
	            return "" + token.overriddenName;
	        }
	        if (token.name) {
	            return "" + token.name;
	        }
	        var /** @type {?} */ res = token.toString();
	        var /** @type {?} */ newLineIndex = res.indexOf('\n');
	        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	    }
	    /**
	     * @param {?} a
	     * @param {?} b
	     * @return {?}
	     */
	    function looseIdentical(a, b) {
	        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
	    }
	    /**
	     * @param {?} o
	     * @return {?}
	     */
	    function isJsObject(o) {
	        return o !== null && (typeof o === 'function' || typeof o === 'object');
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function print(obj) {
	        // tslint:disable-next-line:no-console
	        console.log(obj);
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function warn(obj) {
	        console.warn(obj);
	    }
	    var /** @type {?} */ _symbolIterator = null;
	    /**
	     * @return {?}
	     */
	    function getSymbolIterator() {
	        if (!_symbolIterator) {
	            if (((globalScope)).Symbol && Symbol.iterator) {
	                _symbolIterator = Symbol.iterator;
	            }
	            else {
	                // es6-shim specific logic
	                var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);
	                for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
	                    var /** @type {?} */ key = keys[i];
	                    if (key !== 'entries' && key !== 'size' &&
	                        ((Map)).prototype[key] === Map.prototype['entries']) {
	                        _symbolIterator = key;
	                    }
	                }
	            }
	        }
	        return _symbolIterator;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPrimitive(obj) {
	        return !isJsObject(obj);
	    }
	
	    var /** @type {?} */ _nextClassId = 0;
	    var /** @type {?} */ Reflect = global$1.Reflect;
	    /**
	     * @param {?} annotation
	     * @return {?}
	     */
	    function extractAnnotation(annotation) {
	        if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {
	            // it is a decorator, extract annotation
	            annotation = annotation.annotation;
	        }
	        return annotation;
	    }
	    /**
	     * @param {?} fnOrArray
	     * @param {?} key
	     * @return {?}
	     */
	    function applyParams(fnOrArray, key) {
	        if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||
	            fnOrArray === Number || fnOrArray === Array) {
	            throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
	        }
	        if (typeof fnOrArray === 'function') {
	            return fnOrArray;
	        }
	        if (Array.isArray(fnOrArray)) {
	            var /** @type {?} */ annotations = fnOrArray;
	            var /** @type {?} */ annoLength = annotations.length - 1;
	            var /** @type {?} */ fn = fnOrArray[annoLength];
	            if (typeof fn !== 'function') {
	                throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
	            }
	            if (annoLength != fn.length) {
	                throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
	            }
	            var /** @type {?} */ paramsAnnotations = [];
	            for (var /** @type {?} */ i = 0, /** @type {?} */ ii = annotations.length - 1; i < ii; i++) {
	                var /** @type {?} */ paramAnnotations = [];
	                paramsAnnotations.push(paramAnnotations);
	                var /** @type {?} */ annotation = annotations[i];
	                if (Array.isArray(annotation)) {
	                    for (var /** @type {?} */ j = 0; j < annotation.length; j++) {
	                        paramAnnotations.push(extractAnnotation(annotation[j]));
	                    }
	                }
	                else if (typeof annotation === 'function') {
	                    paramAnnotations.push(extractAnnotation(annotation));
	                }
	                else {
	                    paramAnnotations.push(annotation);
	                }
	            }
	            Reflect.defineMetadata('parameters', paramsAnnotations, fn);
	            return fn;
	        }
	        throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
	    }
	    /**
	     *  Provides a way for expressing ES6 classes with parameter annotations in ES5.
	      * *
	      * ## Basic Example
	      * *
	      * ```
	      * var Greeter = ng.Class({
	      * constructor: function(name) {
	      * this.name = name;
	      * },
	      * *
	      * greet: function() {
	      * alert('Hello ' + this.name + '!');
	      * }
	      * });
	      * ```
	      * *
	      * is equivalent to ES6:
	      * *
	      * ```
	      * class Greeter {
	      * constructor(name) {
	      * this.name = name;
	      * }
	      * *
	      * greet() {
	      * alert('Hello ' + this.name + '!');
	      * }
	      * }
	      * ```
	      * *
	      * or equivalent to ES5:
	      * *
	      * ```
	      * var Greeter = function (name) {
	      * this.name = name;
	      * }
	      * *
	      * Greeter.prototype.greet = function () {
	      * alert('Hello ' + this.name + '!');
	      * }
	      * ```
	      * *
	      * ### Example with parameter annotations
	      * *
	      * ```
	      * var MyService = ng.Class({
	      * constructor: [String, [new Optional(), Service], function(name, myService) {
	      * ...
	      * }]
	      * });
	      * ```
	      * *
	      * is equivalent to ES6:
	      * *
	      * ```
	      * class MyService {
	      * constructor(name: string, @Optional() myService: Service) {
	      * ...
	      * }
	      * }
	      * ```
	      * *
	      * ### Example with inheritance
	      * *
	      * ```
	      * var Shape = ng.Class({
	      * constructor: (color) {
	      * this.color = color;
	      * }
	      * });
	      * *
	      * var Square = ng.Class({
	      * extends: Shape,
	      * constructor: function(color, size) {
	      * Shape.call(this, color);
	      * this.size = size;
	      * }
	      * });
	      * ```
	     * @param {?} clsDef
	     * @return {?}
	     */
	    function Class(clsDef) {
	        var /** @type {?} */ constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
	        var /** @type {?} */ proto = constructor.prototype;
	        if (clsDef.hasOwnProperty('extends')) {
	            if (typeof clsDef.extends === 'function') {
	                ((constructor)).prototype = proto =
	                    Object.create(((clsDef.extends)).prototype);
	            }
	            else {
	                throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
	            }
	        }
	        for (var key in clsDef) {
	            if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {
	                proto[key] = applyParams(clsDef[key], key);
	            }
	        }
	        if (this && this.annotations instanceof Array) {
	            Reflect.defineMetadata('annotations', this.annotations, constructor);
	        }
	        var /** @type {?} */ constructorName = constructor['name'];
	        if (!constructorName || constructorName === 'constructor') {
	            ((constructor))['overriddenName'] = "class" + _nextClassId++;
	        }
	        return (constructor);
	    }
	    /**
	     * @param {?} name
	     * @param {?} props
	     * @param {?=} parentClass
	     * @param {?=} chainFn
	     * @return {?}
	     */
	    function makeDecorator(name, props, parentClass, chainFn) {
	        if (chainFn === void 0) { chainFn = null; }
	        var /** @type {?} */ metaCtor = makeMetadataCtor([props]);
	        /**
	         * @param {?} objOrType
	         * @return {?}
	         */
	        function DecoratorFactory(objOrType) {
	            if (!(Reflect && Reflect.getOwnMetadata)) {
	                throw 'reflect-metadata shim is required when using class decorators';
	            }
	            if (this instanceof DecoratorFactory) {
	                metaCtor.call(this, objOrType);
	                return this;
	            }
	            var /** @type {?} */ annotationInstance = new ((DecoratorFactory))(objOrType);
	            var /** @type {?} */ chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];
	            chainAnnotation.push(annotationInstance);
	            var /** @type {?} */ TypeDecorator = (function TypeDecorator(cls) {
	                var /** @type {?} */ annotations = Reflect.getOwnMetadata('annotations', cls) || [];
	                annotations.push(annotationInstance);
	                Reflect.defineMetadata('annotations', annotations, cls);
	                return cls;
	            });
	            TypeDecorator.annotations = chainAnnotation;
	            TypeDecorator.Class = Class;
	            if (chainFn)
	                chainFn(TypeDecorator);
	            return TypeDecorator;
	        }
	        if (parentClass) {
	            DecoratorFactory.prototype = Object.create(parentClass.prototype);
	        }
	        DecoratorFactory.prototype.toString = function () { return ("@" + name); };
	        ((DecoratorFactory)).annotationCls = DecoratorFactory;
	        return DecoratorFactory;
	    }
	    /**
	     * @param {?} props
	     * @return {?}
	     */
	    function makeMetadataCtor(props) {
	        return function ctor() {
	            var _this = this;
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            props.forEach(function (prop, i) {
	                var /** @type {?} */ argVal = args[i];
	                if (Array.isArray(prop)) {
	                    // plain parameter
	                    _this[prop[0]] = argVal === undefined ? prop[1] : argVal;
	                }
	                else {
	                    for (var propName in prop) {
	                        _this[propName] =
	                            argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];
	                    }
	                }
	            });
	        };
	    }
	    /**
	     * @param {?} name
	     * @param {?} props
	     * @param {?=} parentClass
	     * @return {?}
	     */
	    function makeParamDecorator(name, props, parentClass) {
	        var /** @type {?} */ metaCtor = makeMetadataCtor(props);
	        /**
	         * @param {...?} args
	         * @return {?}
	         */
	        function ParamDecoratorFactory() {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            if (this instanceof ParamDecoratorFactory) {
	                metaCtor.apply(this, args);
	                return this;
	            }
	            var /** @type {?} */ annotationInstance = new ((_a = ((ParamDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();
	            ((ParamDecorator)).annotation = annotationInstance;
	            return ParamDecorator;
	            /**
	             * @param {?} cls
	             * @param {?} unusedKey
	             * @param {?} index
	             * @return {?}
	             */
	            function ParamDecorator(cls, unusedKey, index) {
	                var /** @type {?} */ parameters = Reflect.getOwnMetadata('parameters', cls) || [];
	                // there might be gaps if some in between parameters do not have annotations.
	                // we pad with nulls.
	                while (parameters.length <= index) {
	                    parameters.push(null);
	                }
	                parameters[index] = parameters[index] || [];
	                parameters[index].push(annotationInstance);
	                Reflect.defineMetadata('parameters', parameters, cls);
	                return cls;
	            }
	            var _a;
	        }
	        if (parentClass) {
	            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
	        }
	        ParamDecoratorFactory.prototype.toString = function () { return ("@" + name); };
	        ((ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;
	        return ParamDecoratorFactory;
	    }
	    /**
	     * @param {?} name
	     * @param {?} props
	     * @param {?=} parentClass
	     * @return {?}
	     */
	    function makePropDecorator(name, props, parentClass) {
	        var /** @type {?} */ metaCtor = makeMetadataCtor(props);
	        /**
	         * @param {...?} args
	         * @return {?}
	         */
	        function PropDecoratorFactory() {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            if (this instanceof PropDecoratorFactory) {
	                metaCtor.apply(this, args);
	                return this;
	            }
	            var /** @type {?} */ decoratorInstance = new ((_a = ((PropDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();
	            return function PropDecorator(target, name) {
	                var /** @type {?} */ meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};
	                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
	                meta[name].unshift(decoratorInstance);
	                Reflect.defineMetadata('propMetadata', meta, target.constructor);
	            };
	            var _a;
	        }
	        if (parentClass) {
	            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
	        }
	        PropDecoratorFactory.prototype.toString = function () { return ("@" + name); };
	        ((PropDecoratorFactory)).annotationCls = PropDecoratorFactory;
	        return PropDecoratorFactory;
	    }
	
	    /**
	     * Inject decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Inject = makeParamDecorator('Inject', [['token', undefined]]);
	    /**
	     * Optional decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Optional = makeParamDecorator('Optional', []);
	    /**
	     * Injectable decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Injectable = (makeDecorator('Injectable', []));
	    /**
	     * Self decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Self = makeParamDecorator('Self', []);
	    /**
	     * SkipSelf decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ SkipSelf = makeParamDecorator('SkipSelf', []);
	    /**
	     * Host decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Host = makeParamDecorator('Host', []);
	
	    /**
	     * Creates a token that can be used in a DI Provider.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))
	     *
	     * ```typescript
	     * var t = new OpaqueToken("value");
	     *
	     * var injector = Injector.resolveAndCreate([
	     *   {provide: t, useValue: "bindingValue"}
	     * ]);
	     *
	     * expect(injector.get(t)).toEqual("bindingValue");
	     * ```
	     *
	     * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions
	     * caused by multiple providers using the same string as two different tokens.
	     *
	     * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better
	     * error messages.
	     * @stable
	     */
	    // so that metadata is gathered for this class
	    var OpaqueToken = (function () {
	        /**
	         * @param {?} _desc
	         */
	        function OpaqueToken(_desc) {
	            this._desc = _desc;
	        }
	        /**
	         * @return {?}
	         */
	        OpaqueToken.prototype.toString = function () { return "Token " + this._desc; };
	        OpaqueToken.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        OpaqueToken.ctorParameters = function () { return [
	            null,
	        ]; };
	        return OpaqueToken;
	    }());
	
	    /**
	     * This token can be used to create a virtual provider that will populate the
	     * `entryComponents` fields of components and ng modules based on its `useValue`.
	     * All components that are referenced in the `useValue` value (either directly
	     * or in a nested array or map) will be added to the `entryComponents` property.
	     *
	     * ### Example
	     * The following example shows how the router can populate the `entryComponents`
	     * field of an NgModule based on the router configuration which refers
	     * to components.
	     *
	     * ```typescript
	     * // helper function inside the router
	     * function provideRoutes(routes) {
	     *   return [
	     *     {provide: ROUTES, useValue: routes},
	     *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
	     *   ];
	     * }
	     *
	     * // user code
	     * let routes = [
	     *   {path: '/root', component: RootComp},
	     *   {path: '/teams', component: TeamsComp}
	     * ];
	     *
	     * @NgModule({
	     *   providers: [provideRoutes(routes)]
	     * })
	     * class ModuleWithRoutes {}
	     * ```
	     *
	     * @experimental
	     */
	    var /** @type {?} */ ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken('AnalyzeForEntryComponents');
	    /**
	     * Attribute decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);
	    /**
	     *  Base class for query metadata.
	      * *
	      * See {@link ContentChildren}, {@link ContentChild}, {@link ViewChildren}, {@link ViewChild} for
	      * more information.
	      * *
	     * @abstract
	     */
	    var Query = (function () {
	        function Query() {
	        }
	        return Query;
	    }());
	    /**
	     * ContentChildren decorator and metadata.
	     *
	     *  @stable
	     *  @Annotation
	     */
	    var /** @type {?} */ ContentChildren = (makePropDecorator('ContentChildren', [
	        ['selector', undefined], {
	            first: false,
	            isViewQuery: false,
	            descendants: false,
	            read: undefined,
	        }
	    ], Query));
	    /**
	     * @whatItDoes Configures a content query.
	     *
	     * @howToUse
	     *
	     * {@example core/di/ts/contentChild/content_child_howto.ts region='HowTo'}
	     *
	     * @description
	     *
	     * You can use ContentChild to get the first element or the directive matching the selector from the
	     * content DOM. If the content DOM changes, and a new child matches the selector,
	     * the property will be updated.
	     *
	     * Content queries are set before the `ngAfterContentInit` callback is called.
	     *
	     * **Metadata Properties**:
	     *
	     * * **selector** - the directive type or the name used for querying.
	     * * **read** - read a different token from the queried element.
	     *
	     * Let's look at an example:
	     *
	     * {@example core/di/ts/contentChild/content_child_example.ts region='Component'}
	     *
	     * **npm package**: `@angular/core`
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ ContentChild = makePropDecorator('ContentChild', [
	        ['selector', undefined], {
	            first: true,
	            isViewQuery: false,
	            descendants: true,
	            read: undefined,
	        }
	    ], Query);
	    /**
	     * @whatItDoes Configures a view query.
	     *
	     * @howToUse
	     *
	     * {@example core/di/ts/viewChildren/view_children_howto.ts region='HowTo'}
	     *
	     * @description
	     *
	     * You can use ViewChildren to get the {@link QueryList} of elements or directives from the
	     * view DOM. Any time a child element is added, removed, or moved, the query list will be updated,
	     * and the changes observable of the query list will emit a new value.
	     *
	     * View queries are set before the `ngAfterViewInit` callback is called.
	     *
	     * **Metadata Properties**:
	     *
	     * * **selector** - the directive type or the name used for querying.
	     * * **read** - read a different token from the queried elements.
	     *
	     * Let's look at an example:
	     *
	     * {@example core/di/ts/viewChildren/view_children_example.ts region='Component'}
	     *
	     * **npm package**: `@angular/core`
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ ViewChildren = makePropDecorator('ViewChildren', [
	        ['selector', undefined], {
	            first: false,
	            isViewQuery: true,
	            descendants: true,
	            read: undefined,
	        }
	    ], Query);
	    /**
	     * ViewChild decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ ViewChild = makePropDecorator('ViewChild', [
	        ['selector', undefined], {
	            first: true,
	            isViewQuery: true,
	            descendants: true,
	            read: undefined,
	        }
	    ], Query);
	
	    var ChangeDetectionStrategy = {};
	    ChangeDetectionStrategy.OnPush = 0;
	    ChangeDetectionStrategy.Default = 1;
	    ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = "OnPush";
	    ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = "Default";
	    var ChangeDetectorStatus = {};
	    ChangeDetectorStatus.CheckOnce = 0;
	    ChangeDetectorStatus.Checked = 1;
	    ChangeDetectorStatus.CheckAlways = 2;
	    ChangeDetectorStatus.Detached = 3;
	    ChangeDetectorStatus.Errored = 4;
	    ChangeDetectorStatus.Destroyed = 5;
	    ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = "CheckOnce";
	    ChangeDetectorStatus[ChangeDetectorStatus.Checked] = "Checked";
	    ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = "CheckAlways";
	    ChangeDetectorStatus[ChangeDetectorStatus.Detached] = "Detached";
	    ChangeDetectorStatus[ChangeDetectorStatus.Errored] = "Errored";
	    ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = "Destroyed";
	    /**
	     * @param {?} changeDetectionStrategy
	     * @return {?}
	     */
	    function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
	        return isBlank(changeDetectionStrategy) ||
	            changeDetectionStrategy === ChangeDetectionStrategy.Default;
	    }
	
	    /**
	     * Directive decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Directive = (makeDecorator('Directive', {
	        selector: undefined,
	        inputs: undefined,
	        outputs: undefined,
	        host: undefined,
	        providers: undefined,
	        exportAs: undefined,
	        queries: undefined
	    }));
	    /**
	     * Component decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Component = (makeDecorator('Component', {
	        selector: undefined,
	        inputs: undefined,
	        outputs: undefined,
	        host: undefined,
	        exportAs: undefined,
	        moduleId: undefined,
	        providers: undefined,
	        viewProviders: undefined,
	        changeDetection: ChangeDetectionStrategy.Default,
	        queries: undefined,
	        templateUrl: undefined,
	        template: undefined,
	        styleUrls: undefined,
	        styles: undefined,
	        animations: undefined,
	        encapsulation: undefined,
	        interpolation: undefined,
	        entryComponents: undefined
	    }, Directive));
	    /**
	     * Pipe decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Pipe = (makeDecorator('Pipe', {
	        name: undefined,
	        pure: true,
	    }));
	    /**
	     * Input decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);
	    /**
	     * Output decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);
	    /**
	     * HostBinding decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);
	    /**
	     * HostListener decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var LifecycleHooks = {};
	    LifecycleHooks.OnInit = 0;
	    LifecycleHooks.OnDestroy = 1;
	    LifecycleHooks.DoCheck = 2;
	    LifecycleHooks.OnChanges = 3;
	    LifecycleHooks.AfterContentInit = 4;
	    LifecycleHooks.AfterContentChecked = 5;
	    LifecycleHooks.AfterViewInit = 6;
	    LifecycleHooks.AfterViewChecked = 7;
	    LifecycleHooks[LifecycleHooks.OnInit] = "OnInit";
	    LifecycleHooks[LifecycleHooks.OnDestroy] = "OnDestroy";
	    LifecycleHooks[LifecycleHooks.DoCheck] = "DoCheck";
	    LifecycleHooks[LifecycleHooks.OnChanges] = "OnChanges";
	    LifecycleHooks[LifecycleHooks.AfterContentInit] = "AfterContentInit";
	    LifecycleHooks[LifecycleHooks.AfterContentChecked] = "AfterContentChecked";
	    LifecycleHooks[LifecycleHooks.AfterViewInit] = "AfterViewInit";
	    LifecycleHooks[LifecycleHooks.AfterViewChecked] = "AfterViewChecked";
	    var /** @type {?} */ LIFECYCLE_HOOKS_VALUES = [
	        LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,
	        LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,
	        LifecycleHooks.AfterViewChecked
	    ];
	    /**
	     *  {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnChanges'}
	      * *
	      * `ngOnChanges` is called right after the data-bound properties have been checked and before view
	      * and content children are checked if at least one of them has changed.
	      * The `changes` parameter contains the changed properties.
	      * *
	      * See {@linkDocs guide/lifecycle-hooks#onchanges "Lifecycle Hooks Guide"}.
	      * *
	     * @abstract
	     */
	    var OnChanges = (function () {
	        function OnChanges() {
	        }
	        /**
	         * @abstract
	         * @param {?} changes
	         * @return {?}
	         */
	        OnChanges.prototype.ngOnChanges = function (changes) { };
	        return OnChanges;
	    }());
	    /**
	     *  initialized.
	      * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnInit'}
	      * *
	      * `ngOnInit` is called right after the directive's data-bound properties have been checked for the
	      * first time, and before any of its children have been checked. It is invoked only once when the
	      * directive is instantiated.
	      * *
	      * See {@linkDocs guide/lifecycle-hooks "Lifecycle Hooks Guide"}.
	      * *
	     * @abstract
	     */
	    var OnInit = (function () {
	        function OnInit() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        OnInit.prototype.ngOnInit = function () { };
	        return OnInit;
	    }());
	    /**
	     *  {@example core/ts/metadata/lifecycle_hooks_spec.ts region='DoCheck'}
	      * *
	      * `ngDoCheck` gets called to check the changes in the directives in addition to the default
	      * algorithm. The default change detection algorithm looks for differences by comparing
	      * bound-property values by reference across change detection runs.
	      * *
	      * Note that a directive typically should not use both `DoCheck` and {@link OnChanges} to respond to
	      * changes on the same input, as `ngOnChanges` will continue to be called when the default change
	      * detector detects changes.
	      * *
	      * See {@link KeyValueDiffers} and {@link IterableDiffers} for implementing custom dirty checking
	      * for collections.
	      * *
	      * See {@linkDocs guide/lifecycle-hooks#docheck "Lifecycle Hooks Guide"}.
	      * *
	     * @abstract
	     */
	    var DoCheck = (function () {
	        function DoCheck() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DoCheck.prototype.ngDoCheck = function () { };
	        return DoCheck;
	    }());
	    /**
	     *  {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnDestroy'}
	      * *
	      * `ngOnDestroy` callback is typically used for any custom cleanup that needs to occur when the
	      * instance is destroyed.
	      * *
	      * See {@linkDocs guide/lifecycle-hooks "Lifecycle Hooks Guide"}.
	      * *
	     * @abstract
	     */
	    var OnDestroy = (function () {
	        function OnDestroy() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        OnDestroy.prototype.ngOnDestroy = function () { };
	        return OnDestroy;
	    }());
	    /**
	     *  *
	      * initialized.
	      * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentInit'}
	      * *
	      * See {@linkDocs guide/lifecycle-hooks#aftercontent "Lifecycle Hooks Guide"}.
	      * *
	     * @abstract
	     */
	    var AfterContentInit = (function () {
	        function AfterContentInit() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AfterContentInit.prototype.ngAfterContentInit = function () { };
	        return AfterContentInit;
	    }());
	    /**
	     *  {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentChecked'}
	      * *
	      * See {@linkDocs guide/lifecycle-hooks#aftercontent "Lifecycle Hooks Guide"}.
	      * *
	     * @abstract
	     */
	    var AfterContentChecked = (function () {
	        function AfterContentChecked() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AfterContentChecked.prototype.ngAfterContentChecked = function () { };
	        return AfterContentChecked;
	    }());
	    /**
	     *  initialized.
	      * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewInit'}
	      * *
	      * See {@linkDocs guide/lifecycle-hooks#afterview "Lifecycle Hooks Guide"}.
	      * *
	     * @abstract
	     */
	    var AfterViewInit = (function () {
	        function AfterViewInit() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AfterViewInit.prototype.ngAfterViewInit = function () { };
	        return AfterViewInit;
	    }());
	    /**
	     *  {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewChecked'}
	      * *
	      * See {@linkDocs guide/lifecycle-hooks#afterview "Lifecycle Hooks Guide"}.
	      * *
	     * @abstract
	     */
	    var AfterViewChecked = (function () {
	        function AfterViewChecked() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AfterViewChecked.prototype.ngAfterViewChecked = function () { };
	        return AfterViewChecked;
	    }());
	
	    /**
	     * Defines a schema that will allow:
	     * - any non-Angular elements with a `-` in their name,
	     * - any properties on elements with a `-` in their name which is the common rule for custom
	     * elements.
	     *
	     * @stable
	     */
	    var /** @type {?} */ CUSTOM_ELEMENTS_SCHEMA = {
	        name: 'custom-elements'
	    };
	    /**
	     * Defines a schema that will allow any property on any element.
	     *
	     * @experimental
	     */
	    var /** @type {?} */ NO_ERRORS_SCHEMA = {
	        name: 'no-errors-schema'
	    };
	    /**
	     * NgModule decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ NgModule = (makeDecorator('NgModule', {
	        providers: undefined,
	        declarations: undefined,
	        imports: undefined,
	        exports: undefined,
	        entryComponents: undefined,
	        bootstrap: undefined,
	        schemas: undefined,
	        id: undefined,
	    }));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var ViewEncapsulation = {};
	    ViewEncapsulation.Emulated = 0;
	    ViewEncapsulation.Native = 1;
	    ViewEncapsulation.None = 2;
	    ViewEncapsulation[ViewEncapsulation.Emulated] = "Emulated";
	    ViewEncapsulation[ViewEncapsulation.Native] = "Native";
	    ViewEncapsulation[ViewEncapsulation.None] = "None";
	    /**
	     *  Metadata properties available for configuring Views.
	      * *
	      * For details on the `@Component` annotation, see {@link Component}.
	      * *
	      * ### Example
	      * *
	      * ```
	      * selector: 'greet',
	      * template: 'Hello {{name}}!',
	      * })
	      * class Greet {
	      * name: string;
	      * *
	      * constructor() {
	      * this.name = 'World';
	      * }
	      * }
	      * ```
	      * *
	     * @deprecated Use Component instead.
	      * *
	      * {@link Component}
	     */
	    var ViewMetadata = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function ViewMetadata(_a) {
	            var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, interpolation = _b.interpolation;
	            this.templateUrl = templateUrl;
	            this.template = template;
	            this.styleUrls = styleUrls;
	            this.styles = styles;
	            this.encapsulation = encapsulation;
	            this.animations = animations;
	            this.interpolation = interpolation;
	        }
	        return ViewMetadata;
	    }());
	
	    /**
	     *  *
	     */
	    var Version = (function () {
	        /**
	         * @param {?} full
	         */
	        function Version(full) {
	            this.full = full;
	        }
	        Object.defineProperty(Version.prototype, "major", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.full.split('.')[0]; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(Version.prototype, "minor", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.full.split('.')[1]; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(Version.prototype, "patch", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.full.split('.').slice(2).join('.'); },
	            enumerable: true,
	            configurable: true
	        });
	        return Version;
	    }());
	    /**
	     * @stable
	     */
	    var /** @type {?} */ VERSION = new Version('2.3.1');
	
	    /**
	     *  Allows to refer to references which are not yet defined.
	      * *
	      * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
	      * DI is declared,
	      * but not yet defined. It is also used when the `token` which we use when creating a query is not
	      * yet defined.
	      * *
	      * ### Example
	      * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
	     * @param {?} forwardRefFn
	     * @return {?}
	     */
	    function forwardRef(forwardRefFn) {
	        ((forwardRefFn)).__forward_ref__ = forwardRef;
	        ((forwardRefFn)).toString = function () { return stringify(this()); };
	        return (((forwardRefFn)));
	    }
	    /**
	     *  Lazily retrieves the reference value from a forwardRef.
	      * *
	      * Acts as the identity function when given a non-forward-ref value.
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
	      * *
	      * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
	      * *
	      * See: {@link forwardRef}
	     * @param {?} type
	     * @return {?}
	     */
	    function resolveForwardRef(type) {
	        if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&
	            type.__forward_ref__ === forwardRef) {
	            return ((type))();
	        }
	        else {
	            return type;
	        }
	    }
	
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @license undefined
	      * Copyright Google Inc. All Rights Reserved.
	      * *
	      * Use of this source code is governed by an MIT-style license that can be
	      * found in the LICENSE file at https://angular.io/license
	     * @return {?}
	     */
	    function unimplemented() {
	        throw new Error('unimplemented');
	    }
	    /**
	     * @stable
	     */
	    var BaseError = (function (_super) {
	        __extends(BaseError, _super);
	        /**
	         * @param {?} message
	         */
	        function BaseError(message) {
	            _super.call(this, message);
	            // Errors don't use current this, instead they create a new instance.
	            // We have to do forward all of our api to the nativeInstance.
	            // TODO(bradfordcsmith): Remove this hack when
	            //     google/closure-compiler/issues/2102 is fixed.
	            var nativeError = new Error(message);
	            this._nativeError = nativeError;
	        }
	        Object.defineProperty(BaseError.prototype, "message", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._nativeError.message; },
	            /**
	             * @param {?} message
	             * @return {?}
	             */
	            set: function (message) { this._nativeError.message = message; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "name", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._nativeError.name; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "stack", {
	            /**
	             * @return {?}
	             */
	            get: function () { return ((this._nativeError)).stack; },
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) { ((this._nativeError)).stack = value; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        BaseError.prototype.toString = function () { return this._nativeError.toString(); };
	        return BaseError;
	    }(Error));
	    /**
	     * @stable
	     */
	    var WrappedError = (function (_super) {
	        __extends(WrappedError, _super);
	        /**
	         * @param {?} message
	         * @param {?} error
	         */
	        function WrappedError(message, error) {
	            _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
	            this.originalError = error;
	        }
	        Object.defineProperty(WrappedError.prototype, "stack", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return (((this.originalError instanceof Error ? this.originalError : this._nativeError)))
	                    .stack;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return WrappedError;
	    }(BaseError));
	
	    var /** @type {?} */ _THROW_IF_NOT_FOUND = new Object();
	    var /** @type {?} */ THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
	    var _NullInjector = (function () {
	        function _NullInjector() {
	        }
	        /**
	         * @param {?} token
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        _NullInjector.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }
	            if (notFoundValue === _THROW_IF_NOT_FOUND) {
	                throw new Error("No provider for " + stringify(token) + "!");
	            }
	            return notFoundValue;
	        };
	        return _NullInjector;
	    }());
	    /**
	     *  ```
	      * const injector: Injector = ...;
	      * injector.get(...);
	      * ```
	      * *
	      * For more details, see the {@linkDocs guide/dependency-injection "Dependency Injection Guide"}.
	      * *
	      * ### Example
	      * *
	      * {@example core/di/ts/injector_spec.ts region='Injector'}
	      * *
	      * `Injector` returns itself when given `Injector` as a token:
	      * {@example core/di/ts/injector_spec.ts region='injectInjector'}
	      * *
	     * @abstract
	     */
	    var Injector = (function () {
	        function Injector() {
	        }
	        /**
	         *  Retrieves an instance from the injector based on the provided token.
	          * If not found:
	          * - Throws {@link NoProviderError} if no `notFoundValue` that is not equal to
	          * Injector.THROW_IF_NOT_FOUND is given
	          * - Returns the `notFoundValue` otherwise
	         * @param {?} token
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        Injector.prototype.get = function (token, notFoundValue) { return unimplemented(); };
	        Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
	        Injector.NULL = new _NullInjector();
	        return Injector;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @param {?} keys
	     * @return {?}
	     */
	    function findFirstClosedCycle(keys) {
	        var /** @type {?} */ res = [];
	        for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
	            if (res.indexOf(keys[i]) > -1) {
	                res.push(keys[i]);
	                return res;
	            }
	            res.push(keys[i]);
	        }
	        return res;
	    }
	    /**
	     * @param {?} keys
	     * @return {?}
	     */
	    function constructResolvingPath(keys) {
	        if (keys.length > 1) {
	            var /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());
	            var /** @type {?} */ tokenStrs = reversed.map(function (k) { return stringify(k.token); });
	            return ' (' + tokenStrs.join(' -> ') + ')';
	        }
	        return '';
	    }
	    /**
	     *  Base class for all errors arising from misconfigured providers.
	     */
	    var AbstractProviderError = (function (_super) {
	        __extends$1(AbstractProviderError, _super);
	        /**
	         * @param {?} injector
	         * @param {?} key
	         * @param {?} constructResolvingMessage
	         */
	        function AbstractProviderError(injector, key, constructResolvingMessage) {
	            _super.call(this, 'DI Error');
	            this.keys = [key];
	            this.injectors = [injector];
	            this.constructResolvingMessage = constructResolvingMessage;
	            this.message = this.constructResolvingMessage(this.keys);
	        }
	        /**
	         * @param {?} injector
	         * @param {?} key
	         * @return {?}
	         */
	        AbstractProviderError.prototype.addKey = function (injector, key) {
	            this.injectors.push(injector);
	            this.keys.push(key);
	            this.message = this.constructResolvingMessage(this.keys);
	        };
	        return AbstractProviderError;
	    }(BaseError));
	    /**
	     *  Thrown when trying to retrieve a dependency by key from {@link Injector}, but the
	      * {@link Injector} does not have a {@link Provider} for the given key.
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
	      * *
	      * ```typescript
	      * class A {
	      * constructor(b:B) {}
	      * }
	      * *
	      * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	      * ```
	     */
	    var NoProviderError = (function (_super) {
	        __extends$1(NoProviderError, _super);
	        /**
	         * @param {?} injector
	         * @param {?} key
	         */
	        function NoProviderError(injector, key) {
	            _super.call(this, injector, key, function (keys) {
	                var first = stringify(keys[0].token);
	                return "No provider for " + first + "!" + constructResolvingPath(keys);
	            });
	        }
	        return NoProviderError;
	    }(AbstractProviderError));
	    /**
	     *  Thrown when dependencies form a cycle.
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
	      * *
	      * ```typescript
	      * var injector = Injector.resolveAndCreate([
	      * {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
	      * {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
	      * ]);
	      * *
	      * expect(() => injector.get("one")).toThrowError();
	      * ```
	      * *
	      * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
	     */
	    var CyclicDependencyError = (function (_super) {
	        __extends$1(CyclicDependencyError, _super);
	        /**
	         * @param {?} injector
	         * @param {?} key
	         */
	        function CyclicDependencyError(injector, key) {
	            _super.call(this, injector, key, function (keys) {
	                return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
	            });
	        }
	        return CyclicDependencyError;
	    }(AbstractProviderError));
	    /**
	     *  Thrown when a constructing type returns with an Error.
	      * *
	      * The `InstantiationError` class contains the original error plus the dependency graph which caused
	      * this object to be instantiated.
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
	      * *
	      * ```typescript
	      * class A {
	      * constructor() {
	      * throw new Error('message');
	      * }
	      * }
	      * *
	      * var injector = Injector.resolveAndCreate([A]);
	      * try {
	      * injector.get(A);
	      * } catch (e) {
	      * expect(e instanceof InstantiationError).toBe(true);
	      * expect(e.originalException.message).toEqual("message");
	      * expect(e.originalStack).toBeDefined();
	      * }
	      * ```
	     */
	    var InstantiationError = (function (_super) {
	        __extends$1(InstantiationError, _super);
	        /**
	         * @param {?} injector
	         * @param {?} originalException
	         * @param {?} originalStack
	         * @param {?} key
	         */
	        function InstantiationError(injector, originalException, originalStack, key) {
	            _super.call(this, 'DI Error', originalException);
	            this.keys = [key];
	            this.injectors = [injector];
	        }
	        /**
	         * @param {?} injector
	         * @param {?} key
	         * @return {?}
	         */
	        InstantiationError.prototype.addKey = function (injector, key) {
	            this.injectors.push(injector);
	            this.keys.push(key);
	        };
	        Object.defineProperty(InstantiationError.prototype, "message", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ first = stringify(this.keys[0].token);
	                return this.originalError.message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(InstantiationError.prototype, "causeKey", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.keys[0]; },
	            enumerable: true,
	            configurable: true
	        });
	        return InstantiationError;
	    }(WrappedError));
	    /**
	     *  Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}
	      * creation.
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
	      * *
	      * ```typescript
	      * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
	      * ```
	     */
	    var InvalidProviderError = (function (_super) {
	        __extends$1(InvalidProviderError, _super);
	        /**
	         * @param {?} provider
	         */
	        function InvalidProviderError(provider) {
	            _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
	        }
	        return InvalidProviderError;
	    }(BaseError));
	    /**
	     *  Thrown when the class has no annotation information.
	      * *
	      * Lack of annotation information prevents the {@link Injector} from determining which dependencies
	      * need to be injected into the constructor.
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
	      * *
	      * ```typescript
	      * class A {
	      * constructor(b) {}
	      * }
	      * *
	      * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	      * ```
	      * *
	      * This error is also thrown when the class not marked with {@link Injectable} has parameter types.
	      * *
	      * ```typescript
	      * class B {}
	      * *
	      * class A {
	      * constructor(b:B) {} // no information about the parameter types of A is available at runtime.
	      * }
	      * *
	      * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
	      * ```
	     */
	    var NoAnnotationError = (function (_super) {
	        __extends$1(NoAnnotationError, _super);
	        /**
	         * @param {?} typeOrFunc
	         * @param {?} params
	         */
	        function NoAnnotationError(typeOrFunc, params) {
	            _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
	        }
	        /**
	         * @param {?} typeOrFunc
	         * @param {?} params
	         * @return {?}
	         */
	        NoAnnotationError._genMessage = function (typeOrFunc, params) {
	            var /** @type {?} */ signature = [];
	            for (var /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {
	                var /** @type {?} */ parameter = params[i];
	                if (!parameter || parameter.length == 0) {
	                    signature.push('?');
	                }
	                else {
	                    signature.push(parameter.map(stringify).join(' '));
	                }
	            }
	            return 'Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' +
	                signature.join(', ') + '). ' +
	                'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' +
	                stringify(typeOrFunc) + '\' is decorated with Injectable.';
	        };
	        return NoAnnotationError;
	    }(BaseError));
	    /**
	     *  Thrown when getting an object by index.
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
	      * *
	      * ```typescript
	      * class A {}
	      * *
	      * var injector = Injector.resolveAndCreate([A]);
	      * *
	      * expect(() => injector.getAt(100)).toThrowError();
	      * ```
	     */
	    var OutOfBoundsError = (function (_super) {
	        __extends$1(OutOfBoundsError, _super);
	        /**
	         * @param {?} index
	         */
	        function OutOfBoundsError(index) {
	            _super.call(this, "Index " + index + " is out-of-bounds.");
	        }
	        return OutOfBoundsError;
	    }(BaseError));
	    /**
	     *  Thrown when a multi provider and a regular provider are bound to the same token.
	      * *
	      * ### Example
	      * *
	      * ```typescript
	      * expect(() => Injector.resolveAndCreate([
	      * { provide: "Strings", useValue: "string1", multi: true},
	      * { provide: "Strings", useValue: "string2", multi: false}
	      * ])).toThrowError();
	      * ```
	     */
	    var MixingMultiProvidersWithRegularProvidersError = (function (_super) {
	        __extends$1(MixingMultiProvidersWithRegularProvidersError, _super);
	        /**
	         * @param {?} provider1
	         * @param {?} provider2
	         */
	        function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
	            _super.call(this, 'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' +
	                provider2.toString());
	        }
	        return MixingMultiProvidersWithRegularProvidersError;
	    }(BaseError));
	
	    /**
	     *  A unique object used for retrieving items from the {@link ReflectiveInjector}.
	      * *
	      * Keys have:
	      * - a system-wide unique `id`.
	      * - a `token`.
	      * *
	      * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows
	      * the
	      * injector to store created objects in a more efficient way.
	      * *
	      * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when
	      * resolving
	      * providers.
	     */
	    var ReflectiveKey = (function () {
	        /**
	         *  Private
	         * @param {?} token
	         * @param {?} id
	         */
	        function ReflectiveKey(token, id) {
	            this.token = token;
	            this.id = id;
	            if (!token) {
	                throw new Error('Token must be defined!');
	            }
	        }
	        Object.defineProperty(ReflectiveKey.prototype, "displayName", {
	            /**
	             *  Returns a stringified token.
	             * @return {?}
	             */
	            get: function () { return stringify(this.token); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         *  Retrieves a `Key` for a token.
	         * @param {?} token
	         * @return {?}
	         */
	        ReflectiveKey.get = function (token) {
	            return _globalKeyRegistry.get(resolveForwardRef(token));
	        };
	        Object.defineProperty(ReflectiveKey, "numberOfKeys", {
	            /**
	             * @return {?} the number of keys registered in the system.
	             */
	            get: function () { return _globalKeyRegistry.numberOfKeys; },
	            enumerable: true,
	            configurable: true
	        });
	        return ReflectiveKey;
	    }());
	    /**
	     * @internal
	     */
	    var KeyRegistry = (function () {
	        function KeyRegistry() {
	            this._allKeys = new Map();
	        }
	        /**
	         * @param {?} token
	         * @return {?}
	         */
	        KeyRegistry.prototype.get = function (token) {
	            if (token instanceof ReflectiveKey)
	                return token;
	            if (this._allKeys.has(token)) {
	                return this._allKeys.get(token);
	            }
	            var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
	            this._allKeys.set(token, newKey);
	            return newKey;
	        };
	        Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._allKeys.size; },
	            enumerable: true,
	            configurable: true
	        });
	        return KeyRegistry;
	    }());
	    var /** @type {?} */ _globalKeyRegistry = new KeyRegistry();
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * @whatItDoes Represents a type that a Component or other object is instances of.
	     *
	     * @description
	     *
	     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
	     * the `MyCustomComponent` constructor function.
	     *
	     * @stable
	     */
	    var /** @type {?} */ Type = Function;
	
	    /**
	     * Attention: This regex has to hold even if the code is minified!
	     */
	    var /** @type {?} */ DELEGATE_CTOR = /^function\s+\S+\(\)\s*{\s*("use strict";)?\s*(return\s+)?\S+\.apply\(this,\s*arguments\)/;
	    var ReflectionCapabilities = (function () {
	        /**
	         * @param {?=} reflect
	         */
	        function ReflectionCapabilities(reflect) {
	            this._reflect = reflect || global$1.Reflect;
	        }
	        /**
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
	        /**
	         * @param {?} t
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.factory = function (t) { return function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            return new (t.bind.apply(t, [void 0].concat(args)))();
	        }; };
	        /**
	         * @param {?} paramTypes
	         * @param {?} paramAnnotations
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {
	            var /** @type {?} */ result;
	            if (typeof paramTypes === 'undefined') {
	                result = new Array(paramAnnotations.length);
	            }
	            else {
	                result = new Array(paramTypes.length);
	            }
	            for (var /** @type {?} */ i = 0; i < result.length; i++) {
	                // TS outputs Object for parameters without types, while Traceur omits
	                // the annotations. For now we preserve the Traceur behavior to aid
	                // migration, but this can be revisited.
	                if (typeof paramTypes === 'undefined') {
	                    result[i] = [];
	                }
	                else if (paramTypes[i] != Object) {
	                    result[i] = [paramTypes[i]];
	                }
	                else {
	                    result[i] = [];
	                }
	                if (paramAnnotations && isPresent(paramAnnotations[i])) {
	                    result[i] = result[i].concat(paramAnnotations[i]);
	                }
	            }
	            return result;
	        };
	        /**
	         * @param {?} type
	         * @param {?} parentCtor
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {
	            // If we have no decorators, we only have function.length as metadata.
	            // In that case, to detect whether a child class declared an own constructor or not,
	            // we need to look inside of that constructor to check whether it is
	            // just calling the parent.
	            // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
	            // that sets 'design:paramtypes' to []
	            // if a class inherits from another class but has no ctor declared itself.
	            if (DELEGATE_CTOR.exec(type.toString())) {
	                return null;
	            }
	            // Prefer the direct API.
	            if (((type)).parameters && ((type)).parameters !== parentCtor.parameters) {
	                return ((type)).parameters;
	            }
	            // API of tsickle for lowering decorators to properties on the class.
	            var /** @type {?} */ tsickleCtorParams = ((type)).ctorParameters;
	            if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
	                // Newer tsickle uses a function closure
	                // Retain the non-function case for compatibility with older tsickle
	                var /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
	                var /** @type {?} */ paramTypes = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });
	                var /** @type {?} */ paramAnnotations = ctorParameters.map(function (ctorParam) {
	                    return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
	                });
	                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
	            }
	            // API for metadata created by invoking the decorators.
	            if (isPresent(this._reflect) && isPresent(this._reflect.getOwnMetadata)) {
	                var /** @type {?} */ paramAnnotations = this._reflect.getOwnMetadata('parameters', type);
	                var /** @type {?} */ paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);
	                if (paramTypes || paramAnnotations) {
	                    return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
	                }
	            }
	            // If a class has no decorators, at least create metadata
	            // based on function.length.
	            // Note: We know that this is a real constructor as we checked
	            // the content of the constructor above.
	            return new Array(((type.length))).fill(undefined);
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.parameters = function (type) {
	            // Note: only report metadata if we have at least one class decorator
	            // to stay in sync with the static reflector.
	            var /** @type {?} */ parentCtor = Object.getPrototypeOf(type.prototype).constructor;
	            var /** @type {?} */ parameters = this._ownParameters(type, parentCtor);
	            if (!parameters && parentCtor !== Object) {
	                parameters = this.parameters(parentCtor);
	            }
	            return parameters || [];
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @param {?} parentCtor
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {
	            // Prefer the direct API.
	            if (((typeOrFunc)).annotations && ((typeOrFunc)).annotations !== parentCtor.annotations) {
	                var /** @type {?} */ annotations = ((typeOrFunc)).annotations;
	                if (typeof annotations === 'function' && annotations.annotations) {
	                    annotations = annotations.annotations;
	                }
	                return annotations;
	            }
	            // API of tsickle for lowering decorators to properties on the class.
	            if (((typeOrFunc)).decorators && ((typeOrFunc)).decorators !== parentCtor.decorators) {
	                return convertTsickleDecoratorIntoMetadata(((typeOrFunc)).decorators);
	            }
	            // API for metadata created by invoking the decorators.
	            if (this._reflect && this._reflect.getOwnMetadata) {
	                return this._reflect.getOwnMetadata('annotations', typeOrFunc);
	            }
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
	            var /** @type {?} */ parentCtor = Object.getPrototypeOf(typeOrFunc.prototype).constructor;
	            var /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
	            var /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
	            return parentAnnotations.concat(ownAnnotations);
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @param {?} parentCtor
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {
	            // Prefer the direct API.
	            if (((typeOrFunc)).propMetadata &&
	                ((typeOrFunc)).propMetadata !== parentCtor.propMetadata) {
	                var /** @type {?} */ propMetadata = ((typeOrFunc)).propMetadata;
	                if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
	                    propMetadata = propMetadata.propMetadata;
	                }
	                return propMetadata;
	            }
	            // API of tsickle for lowering decorators to properties on the class.
	            if (((typeOrFunc)).propDecorators &&
	                ((typeOrFunc)).propDecorators !== parentCtor.propDecorators) {
	                var /** @type {?} */ propDecorators_1 = ((typeOrFunc)).propDecorators;
	                var /** @type {?} */ propMetadata_1 = ({});
	                Object.keys(propDecorators_1).forEach(function (prop) {
	                    propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
	                });
	                return propMetadata_1;
	            }
	            // API for metadata created by invoking the decorators.
	            if (this._reflect && this._reflect.getOwnMetadata) {
	                return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);
	            }
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
	            var /** @type {?} */ parentCtor = Object.getPrototypeOf(typeOrFunc.prototype).constructor;
	            var /** @type {?} */ propMetadata = {};
	            if (parentCtor !== Object) {
	                var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentCtor);
	                Object.keys(parentPropMetadata_1).forEach(function (propName) {
	                    propMetadata[propName] = parentPropMetadata_1[propName];
	                });
	            }
	            var /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
	            if (ownPropMetadata) {
	                Object.keys(ownPropMetadata).forEach(function (propName) {
	                    var /** @type {?} */ decorators = [];
	                    if (propMetadata.hasOwnProperty(propName)) {
	                        decorators.push.apply(decorators, propMetadata[propName]);
	                    }
	                    decorators.push.apply(decorators, ownPropMetadata[propName]);
	                    propMetadata[propName] = decorators;
	                });
	            }
	            return propMetadata;
	        };
	        /**
	         * @param {?} type
	         * @param {?} lcProperty
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
	            return type instanceof Type && lcProperty in type.prototype;
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.getter = function (name) { return ((new Function('o', 'return o.' + name + ';'))); };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.setter = function (name) {
	            return ((new Function('o', 'v', 'return o.' + name + ' = v;')));
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.method = function (name) {
	            var /** @type {?} */ functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
	            return ((new Function('o', 'args', functionBody)));
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.importUri = function (type) {
	            // StaticSymbol
	            if (typeof type === 'object' && type['filePath']) {
	                return type['filePath'];
	            }
	            // Runtime type
	            return "./" + stringify(type);
	        };
	        /**
	         * @param {?} name
	         * @param {?} moduleUrl
	         * @param {?} runtime
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { return runtime; };
	        /**
	         * @param {?} enumIdentifier
	         * @param {?} name
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };
	        return ReflectionCapabilities;
	    }());
	    /**
	     * @param {?} decoratorInvocations
	     * @return {?}
	     */
	    function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
	        if (!decoratorInvocations) {
	            return [];
	        }
	        return decoratorInvocations.map(function (decoratorInvocation) {
	            var /** @type {?} */ decoratorType = decoratorInvocation.type;
	            var /** @type {?} */ annotationCls = decoratorType.annotationCls;
	            var /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
	            return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();
	        });
	    }
	
	    /**
	     *  Provides read-only access to reflection data about symbols. Used internally by Angular
	      * to power dependency injection and compilation.
	     * @abstract
	     */
	    var ReflectorReader = (function () {
	        function ReflectorReader() {
	        }
	        /**
	         * @abstract
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        ReflectorReader.prototype.parameters = function (typeOrFunc) { };
	        /**
	         * @abstract
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        ReflectorReader.prototype.annotations = function (typeOrFunc) { };
	        /**
	         * @abstract
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        ReflectorReader.prototype.propMetadata = function (typeOrFunc) { };
	        /**
	         * @abstract
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        ReflectorReader.prototype.importUri = function (typeOrFunc) { };
	        /**
	         * @abstract
	         * @param {?} name
	         * @param {?} moduleUrl
	         * @param {?} runtime
	         * @return {?}
	         */
	        ReflectorReader.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { };
	        /**
	         * @abstract
	         * @param {?} identifier
	         * @param {?} name
	         * @return {?}
	         */
	        ReflectorReader.prototype.resolveEnum = function (identifier, name) { };
	        return ReflectorReader;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     *  Provides access to reflection data about symbols. Used internally by Angular
	      * to power dependency injection and compilation.
	     */
	    var Reflector = (function (_super) {
	        __extends$2(Reflector, _super);
	        /**
	         * @param {?} reflectionCapabilities
	         */
	        function Reflector(reflectionCapabilities) {
	            _super.call(this);
	            this.reflectionCapabilities = reflectionCapabilities;
	        }
	        /**
	         * @param {?} caps
	         * @return {?}
	         */
	        Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };
	        /**
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        Reflector.prototype.parameters = function (typeOrFunc) {
	            return this.reflectionCapabilities.parameters(typeOrFunc);
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        Reflector.prototype.annotations = function (typeOrFunc) {
	            return this.reflectionCapabilities.annotations(typeOrFunc);
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        Reflector.prototype.propMetadata = function (typeOrFunc) {
	            return this.reflectionCapabilities.propMetadata(typeOrFunc);
	        };
	        /**
	         * @param {?} type
	         * @param {?} lcProperty
	         * @return {?}
	         */
	        Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {
	            return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };
	        /**
	         * @param {?} name
	         * @param {?} moduleUrl
	         * @param {?} runtime
	         * @return {?}
	         */
	        Reflector.prototype.resolveIdentifier = function (name, moduleUrl, runtime) {
	            return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, runtime);
	        };
	        /**
	         * @param {?} identifier
	         * @param {?} name
	         * @return {?}
	         */
	        Reflector.prototype.resolveEnum = function (identifier, name) {
	            return this.reflectionCapabilities.resolveEnum(identifier, name);
	        };
	        return Reflector;
	    }(ReflectorReader));
	
	    /**
	     * The {@link Reflector} used internally in Angular to access metadata
	     * about symbols.
	     */
	    var /** @type {?} */ reflector = new Reflector(new ReflectionCapabilities());
	
	    /**
	     *  `Dependency` is used by the framework to extend DI.
	      * This is internal to Angular and should not be used directly.
	     */
	    var ReflectiveDependency = (function () {
	        /**
	         * @param {?} key
	         * @param {?} optional
	         * @param {?} lowerBoundVisibility
	         * @param {?} upperBoundVisibility
	         * @param {?} properties
	         */
	        function ReflectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
	            this.key = key;
	            this.optional = optional;
	            this.lowerBoundVisibility = lowerBoundVisibility;
	            this.upperBoundVisibility = upperBoundVisibility;
	            this.properties = properties;
	        }
	        /**
	         * @param {?} key
	         * @return {?}
	         */
	        ReflectiveDependency.fromKey = function (key) {
	            return new ReflectiveDependency(key, false, null, null, []);
	        };
	        return ReflectiveDependency;
	    }());
	    var /** @type {?} */ _EMPTY_LIST = [];
	    var ResolvedReflectiveProvider_ = (function () {
	        /**
	         * @param {?} key
	         * @param {?} resolvedFactories
	         * @param {?} multiProvider
	         */
	        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
	            this.key = key;
	            this.resolvedFactories = resolvedFactories;
	            this.multiProvider = multiProvider;
	        }
	        Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.resolvedFactories[0]; },
	            enumerable: true,
	            configurable: true
	        });
	        return ResolvedReflectiveProvider_;
	    }());
	    /**
	     *  An internal resolved representation of a factory function created by resolving {@link
	      * Provider}.
	     */
	    var ResolvedReflectiveFactory = (function () {
	        /**
	         * @param {?} factory
	         * @param {?} dependencies
	         */
	        function ResolvedReflectiveFactory(factory, dependencies) {
	            this.factory = factory;
	            this.dependencies = dependencies;
	        }
	        return ResolvedReflectiveFactory;
	    }());
	    /**
	     *  Resolve a single provider.
	     * @param {?} provider
	     * @return {?}
	     */
	    function resolveReflectiveFactory(provider) {
	        var /** @type {?} */ factoryFn;
	        var /** @type {?} */ resolvedDeps;
	        if (provider.useClass) {
	            var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);
	            factoryFn = reflector.factory(useClass);
	            resolvedDeps = _dependenciesFor(useClass);
	        }
	        else if (provider.useExisting) {
	            factoryFn = function (aliasInstance) { return aliasInstance; };
	            resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
	        }
	        else if (provider.useFactory) {
	            factoryFn = provider.useFactory;
	            resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
	        }
	        else {
	            factoryFn = function () { return provider.useValue; };
	            resolvedDeps = _EMPTY_LIST;
	        }
	        return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
	    }
	    /**
	     *  Converts the {@link Provider} into {@link ResolvedProvider}.
	      * *
	      * {@link Injector} internally only uses {@link ResolvedProvider}, {@link Provider} contains
	      * convenience provider syntax.
	     * @param {?} provider
	     * @return {?}
	     */
	    function resolveReflectiveProvider(provider) {
	        return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);
	    }
	    /**
	     *  Resolve a list of Providers.
	     * @param {?} providers
	     * @return {?}
	     */
	    function resolveReflectiveProviders(providers) {
	        var /** @type {?} */ normalized = _normalizeProviders(providers, []);
	        var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);
	        var /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
	        return Array.from(resolvedProviderMap.values());
	    }
	    /**
	     *  Merges a list of ResolvedProviders into a list where
	      * each key is contained exactly once and multi providers
	      * have been merged.
	     * @param {?} providers
	     * @param {?} normalizedProvidersMap
	     * @return {?}
	     */
	    function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
	        for (var /** @type {?} */ i = 0; i < providers.length; i++) {
	            var /** @type {?} */ provider = providers[i];
	            var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);
	            if (existing) {
	                if (provider.multiProvider !== existing.multiProvider) {
	                    throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);
	                }
	                if (provider.multiProvider) {
	                    for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {
	                        existing.resolvedFactories.push(provider.resolvedFactories[j]);
	                    }
	                }
	                else {
	                    normalizedProvidersMap.set(provider.key.id, provider);
	                }
	            }
	            else {
	                var /** @type {?} */ resolvedProvider = void 0;
	                if (provider.multiProvider) {
	                    resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
	                }
	                else {
	                    resolvedProvider = provider;
	                }
	                normalizedProvidersMap.set(provider.key.id, resolvedProvider);
	            }
	        }
	        return normalizedProvidersMap;
	    }
	    /**
	     * @param {?} providers
	     * @param {?} res
	     * @return {?}
	     */
	    function _normalizeProviders(providers, res) {
	        providers.forEach(function (b) {
	            if (b instanceof Type) {
	                res.push({ provide: b, useClass: b });
	            }
	            else if (b && typeof b == 'object' && ((b)).provide !== undefined) {
	                res.push(/** @type {?} */ (b));
	            }
	            else if (b instanceof Array) {
	                _normalizeProviders(b, res);
	            }
	            else {
	                throw new InvalidProviderError(b);
	            }
	        });
	        return res;
	    }
	    /**
	     * @param {?} typeOrFunc
	     * @param {?} dependencies
	     * @return {?}
	     */
	    function constructDependencies(typeOrFunc, dependencies) {
	        if (!dependencies) {
	            return _dependenciesFor(typeOrFunc);
	        }
	        else {
	            var /** @type {?} */ params_1 = dependencies.map(function (t) { return [t]; });
	            return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });
	        }
	    }
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    function _dependenciesFor(typeOrFunc) {
	        var /** @type {?} */ params = reflector.parameters(typeOrFunc);
	        if (!params)
	            return [];
	        if (params.some(function (p) { return p == null; })) {
	            throw new NoAnnotationError(typeOrFunc, params);
	        }
	        return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
	    }
	    /**
	     * @param {?} typeOrFunc
	     * @param {?} metadata
	     * @param {?} params
	     * @return {?}
	     */
	    function _extractToken(typeOrFunc, metadata, params) {
	        var /** @type {?} */ depProps = [];
	        var /** @type {?} */ token = null;
	        var /** @type {?} */ optional = false;
	        if (!Array.isArray(metadata)) {
	            if (metadata instanceof Inject) {
	                return _createDependency(metadata.token, optional, null, null, depProps);
	            }
	            else {
	                return _createDependency(metadata, optional, null, null, depProps);
	            }
	        }
	        var /** @type {?} */ lowerBoundVisibility = null;
	        var /** @type {?} */ upperBoundVisibility = null;
	        for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {
	            var /** @type {?} */ paramMetadata = metadata[i];
	            if (paramMetadata instanceof Type) {
	                token = paramMetadata;
	            }
	            else if (paramMetadata instanceof Inject) {
	                token = paramMetadata.token;
	            }
	            else if (paramMetadata instanceof Optional) {
	                optional = true;
	            }
	            else if (paramMetadata instanceof Self) {
	                upperBoundVisibility = paramMetadata;
	            }
	            else if (paramMetadata instanceof Host) {
	                upperBoundVisibility = paramMetadata;
	            }
	            else if (paramMetadata instanceof SkipSelf) {
	                lowerBoundVisibility = paramMetadata;
	            }
	        }
	        token = resolveForwardRef(token);
	        if (token != null) {
	            return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
	        }
	        else {
	            throw new NoAnnotationError(typeOrFunc, params);
	        }
	    }
	    /**
	     * @param {?} token
	     * @param {?} optional
	     * @param {?} lowerBoundVisibility
	     * @param {?} upperBoundVisibility
	     * @param {?} depProps
	     * @return {?}
	     */
	    function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) {
	        return new ReflectiveDependency(ReflectiveKey.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
	    }
	
	    // Threshold for the dynamic version
	    var /** @type {?} */ _MAX_CONSTRUCTION_COUNTER = 10;
	    var /** @type {?} */ UNDEFINED = new Object();
	    var ReflectiveProtoInjectorInlineStrategy = (function () {
	        /**
	         * @param {?} protoEI
	         * @param {?} providers
	         */
	        function ReflectiveProtoInjectorInlineStrategy(protoEI, providers) {
	            this.provider0 = null;
	            this.provider1 = null;
	            this.provider2 = null;
	            this.provider3 = null;
	            this.provider4 = null;
	            this.provider5 = null;
	            this.provider6 = null;
	            this.provider7 = null;
	            this.provider8 = null;
	            this.provider9 = null;
	            this.keyId0 = null;
	            this.keyId1 = null;
	            this.keyId2 = null;
	            this.keyId3 = null;
	            this.keyId4 = null;
	            this.keyId5 = null;
	            this.keyId6 = null;
	            this.keyId7 = null;
	            this.keyId8 = null;
	            this.keyId9 = null;
	            var length = providers.length;
	            if (length > 0) {
	                this.provider0 = providers[0];
	                this.keyId0 = providers[0].key.id;
	            }
	            if (length > 1) {
	                this.provider1 = providers[1];
	                this.keyId1 = providers[1].key.id;
	            }
	            if (length > 2) {
	                this.provider2 = providers[2];
	                this.keyId2 = providers[2].key.id;
	            }
	            if (length > 3) {
	                this.provider3 = providers[3];
	                this.keyId3 = providers[3].key.id;
	            }
	            if (length > 4) {
	                this.provider4 = providers[4];
	                this.keyId4 = providers[4].key.id;
	            }
	            if (length > 5) {
	                this.provider5 = providers[5];
	                this.keyId5 = providers[5].key.id;
	            }
	            if (length > 6) {
	                this.provider6 = providers[6];
	                this.keyId6 = providers[6].key.id;
	            }
	            if (length > 7) {
	                this.provider7 = providers[7];
	                this.keyId7 = providers[7].key.id;
	            }
	            if (length > 8) {
	                this.provider8 = providers[8];
	                this.keyId8 = providers[8].key.id;
	            }
	            if (length > 9) {
	                this.provider9 = providers[9];
	                this.keyId9 = providers[9].key.id;
	            }
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        ReflectiveProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function (index) {
	            if (index == 0)
	                return this.provider0;
	            if (index == 1)
	                return this.provider1;
	            if (index == 2)
	                return this.provider2;
	            if (index == 3)
	                return this.provider3;
	            if (index == 4)
	                return this.provider4;
	            if (index == 5)
	                return this.provider5;
	            if (index == 6)
	                return this.provider6;
	            if (index == 7)
	                return this.provider7;
	            if (index == 8)
	                return this.provider8;
	            if (index == 9)
	                return this.provider9;
	            throw new OutOfBoundsError(index);
	        };
	        /**
	         * @param {?} injector
	         * @return {?}
	         */
	        ReflectiveProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function (injector) {
	            return new ReflectiveInjectorInlineStrategy(injector, this);
	        };
	        return ReflectiveProtoInjectorInlineStrategy;
	    }());
	    var ReflectiveProtoInjectorDynamicStrategy = (function () {
	        /**
	         * @param {?} protoInj
	         * @param {?} providers
	         */
	        function ReflectiveProtoInjectorDynamicStrategy(protoInj, providers) {
	            this.providers = providers;
	            var len = providers.length;
	            this.keyIds = new Array(len);
	            for (var i = 0; i < len; i++) {
	                this.keyIds[i] = providers[i].key.id;
	            }
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        ReflectiveProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function (index) {
	            if (index < 0 || index >= this.providers.length) {
	                throw new OutOfBoundsError(index);
	            }
	            return this.providers[index];
	        };
	        /**
	         * @param {?} ei
	         * @return {?}
	         */
	        ReflectiveProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function (ei) {
	            return new ReflectiveInjectorDynamicStrategy(this, ei);
	        };
	        return ReflectiveProtoInjectorDynamicStrategy;
	    }());
	    var ReflectiveProtoInjector = (function () {
	        /**
	         * @param {?} providers
	         */
	        function ReflectiveProtoInjector(providers) {
	            this.numberOfProviders = providers.length;
	            this._strategy = providers.length > _MAX_CONSTRUCTION_COUNTER ?
	                new ReflectiveProtoInjectorDynamicStrategy(this, providers) :
	                new ReflectiveProtoInjectorInlineStrategy(this, providers);
	        }
	        /**
	         * @param {?} providers
	         * @return {?}
	         */
	        ReflectiveProtoInjector.fromResolvedProviders = function (providers) {
	            return new ReflectiveProtoInjector(providers);
	        };
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        ReflectiveProtoInjector.prototype.getProviderAtIndex = function (index) {
	            return this._strategy.getProviderAtIndex(index);
	        };
	        return ReflectiveProtoInjector;
	    }());
	    var ReflectiveInjectorInlineStrategy = (function () {
	        /**
	         * @param {?} injector
	         * @param {?} protoStrategy
	         */
	        function ReflectiveInjectorInlineStrategy(injector, protoStrategy) {
	            this.injector = injector;
	            this.protoStrategy = protoStrategy;
	            this.obj0 = UNDEFINED;
	            this.obj1 = UNDEFINED;
	            this.obj2 = UNDEFINED;
	            this.obj3 = UNDEFINED;
	            this.obj4 = UNDEFINED;
	            this.obj5 = UNDEFINED;
	            this.obj6 = UNDEFINED;
	            this.obj7 = UNDEFINED;
	            this.obj8 = UNDEFINED;
	            this.obj9 = UNDEFINED;
	        }
	        /**
	         * @return {?}
	         */
	        ReflectiveInjectorInlineStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };
	        /**
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjectorInlineStrategy.prototype.instantiateProvider = function (provider) {
	            return this.injector._new(provider);
	        };
	        /**
	         * @param {?} keyId
	         * @return {?}
	         */
	        ReflectiveInjectorInlineStrategy.prototype.getObjByKeyId = function (keyId) {
	            var /** @type {?} */ p = this.protoStrategy;
	            var /** @type {?} */ inj = this.injector;
	            if (p.keyId0 === keyId) {
	                if (this.obj0 === UNDEFINED) {
	                    this.obj0 = inj._new(p.provider0);
	                }
	                return this.obj0;
	            }
	            if (p.keyId1 === keyId) {
	                if (this.obj1 === UNDEFINED) {
	                    this.obj1 = inj._new(p.provider1);
	                }
	                return this.obj1;
	            }
	            if (p.keyId2 === keyId) {
	                if (this.obj2 === UNDEFINED) {
	                    this.obj2 = inj._new(p.provider2);
	                }
	                return this.obj2;
	            }
	            if (p.keyId3 === keyId) {
	                if (this.obj3 === UNDEFINED) {
	                    this.obj3 = inj._new(p.provider3);
	                }
	                return this.obj3;
	            }
	            if (p.keyId4 === keyId) {
	                if (this.obj4 === UNDEFINED) {
	                    this.obj4 = inj._new(p.provider4);
	                }
	                return this.obj4;
	            }
	            if (p.keyId5 === keyId) {
	                if (this.obj5 === UNDEFINED) {
	                    this.obj5 = inj._new(p.provider5);
	                }
	                return this.obj5;
	            }
	            if (p.keyId6 === keyId) {
	                if (this.obj6 === UNDEFINED) {
	                    this.obj6 = inj._new(p.provider6);
	                }
	                return this.obj6;
	            }
	            if (p.keyId7 === keyId) {
	                if (this.obj7 === UNDEFINED) {
	                    this.obj7 = inj._new(p.provider7);
	                }
	                return this.obj7;
	            }
	            if (p.keyId8 === keyId) {
	                if (this.obj8 === UNDEFINED) {
	                    this.obj8 = inj._new(p.provider8);
	                }
	                return this.obj8;
	            }
	            if (p.keyId9 === keyId) {
	                if (this.obj9 === UNDEFINED) {
	                    this.obj9 = inj._new(p.provider9);
	                }
	                return this.obj9;
	            }
	            return UNDEFINED;
	        };
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        ReflectiveInjectorInlineStrategy.prototype.getObjAtIndex = function (index) {
	            if (index == 0)
	                return this.obj0;
	            if (index == 1)
	                return this.obj1;
	            if (index == 2)
	                return this.obj2;
	            if (index == 3)
	                return this.obj3;
	            if (index == 4)
	                return this.obj4;
	            if (index == 5)
	                return this.obj5;
	            if (index == 6)
	                return this.obj6;
	            if (index == 7)
	                return this.obj7;
	            if (index == 8)
	                return this.obj8;
	            if (index == 9)
	                return this.obj9;
	            throw new OutOfBoundsError(index);
	        };
	        /**
	         * @return {?}
	         */
	        ReflectiveInjectorInlineStrategy.prototype.getMaxNumberOfObjects = function () { return _MAX_CONSTRUCTION_COUNTER; };
	        return ReflectiveInjectorInlineStrategy;
	    }());
	    var ReflectiveInjectorDynamicStrategy = (function () {
	        /**
	         * @param {?} protoStrategy
	         * @param {?} injector
	         */
	        function ReflectiveInjectorDynamicStrategy(protoStrategy, injector) {
	            this.protoStrategy = protoStrategy;
	            this.injector = injector;
	            this.objs = new Array(protoStrategy.providers.length).fill(UNDEFINED);
	        }
	        /**
	         * @return {?}
	         */
	        ReflectiveInjectorDynamicStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };
	        /**
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjectorDynamicStrategy.prototype.instantiateProvider = function (provider) {
	            return this.injector._new(provider);
	        };
	        /**
	         * @param {?} keyId
	         * @return {?}
	         */
	        ReflectiveInjectorDynamicStrategy.prototype.getObjByKeyId = function (keyId) {
	            var /** @type {?} */ p = this.protoStrategy;
	            for (var /** @type {?} */ i = 0; i < p.keyIds.length; i++) {
	                if (p.keyIds[i] === keyId) {
	                    if (this.objs[i] === UNDEFINED) {
	                        this.objs[i] = this.injector._new(p.providers[i]);
	                    }
	                    return this.objs[i];
	                }
	            }
	            return UNDEFINED;
	        };
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        ReflectiveInjectorDynamicStrategy.prototype.getObjAtIndex = function (index) {
	            if (index < 0 || index >= this.objs.length) {
	                throw new OutOfBoundsError(index);
	            }
	            return this.objs[index];
	        };
	        /**
	         * @return {?}
	         */
	        ReflectiveInjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function () { return this.objs.length; };
	        return ReflectiveInjectorDynamicStrategy;
	    }());
	    /**
	     *  A ReflectiveDependency injection container used for instantiating objects and resolving
	      * dependencies.
	      * *
	      * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
	      * constructor dependencies.
	      * *
	      * In typical use, application code asks for the dependencies in the constructor and they are
	      * resolved by the `Injector`.
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
	      * *
	      * The following example creates an `Injector` configured to create `Engine` and `Car`.
	      * *
	      * ```typescript
	      * class Engine {
	      * }
	      * *
	      * class Car {
	      * constructor(public engine:Engine) {}
	      * }
	      * *
	      * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	      * var car = injector.get(Car);
	      * expect(car instanceof Car).toBe(true);
	      * expect(car.engine instanceof Engine).toBe(true);
	      * ```
	      * *
	      * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
	      * resolve all of the object's dependencies automatically.
	      * *
	     * @abstract
	     */
	    var ReflectiveInjector = (function () {
	        function ReflectiveInjector() {
	        }
	        /**
	         *  Turns an array of provider definitions into an array of resolved providers.
	          * *
	          * A resolution is a process of flattening multiple nested arrays and converting individual
	          * providers into an array of {@link ResolvedReflectiveProvider}s.
	          * *
	          * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
	          * *
	          * ```typescript
	          * class Engine {
	          * }
	          * *
	          * class Car {
	          * constructor(public engine:Engine) {}
	          * }
	          * *
	          * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
	          * *
	          * expect(providers.length).toEqual(2);
	          * *
	          * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
	          * expect(providers[0].key.displayName).toBe("Car");
	          * expect(providers[0].dependencies.length).toEqual(1);
	          * expect(providers[0].factory).toBeDefined();
	          * *
	          * expect(providers[1].key.displayName).toBe("Engine");
	          * });
	          * ```
	          * *
	          * See {@link ReflectiveInjector#fromResolvedProviders} for more info.
	         * @param {?} providers
	         * @return {?}
	         */
	        ReflectiveInjector.resolve = function (providers) {
	            return resolveReflectiveProviders(providers);
	        };
	        /**
	         *  Resolves an array of providers and creates an injector from those providers.
	          * *
	          * The passed-in providers can be an array of `Type`, {@link Provider},
	          * or a recursive array of more providers.
	          * *
	          * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
	          * *
	          * ```typescript
	          * class Engine {
	          * }
	          * *
	          * class Car {
	          * constructor(public engine:Engine) {}
	          * }
	          * *
	          * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	          * expect(injector.get(Car) instanceof Car).toBe(true);
	          * ```
	          * *
	          * This function is slower than the corresponding `fromResolvedProviders`
	          * because it needs to resolve the passed-in providers first.
	          * See {@link Injector#resolve} and {@link Injector#fromResolvedProviders}.
	         * @param {?} providers
	         * @param {?=} parent
	         * @return {?}
	         */
	        ReflectiveInjector.resolveAndCreate = function (providers, parent) {
	            if (parent === void 0) { parent = null; }
	            var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	            return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
	        };
	        /**
	         *  Creates an injector from previously resolved providers.
	          * *
	          * This API is the recommended way to construct injectors in performance-sensitive parts.
	          * *
	          * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
	          * *
	          * ```typescript
	          * class Engine {
	          * }
	          * *
	          * class Car {
	          * constructor(public engine:Engine) {}
	          * }
	          * *
	          * var providers = ReflectiveInjector.resolve([Car, Engine]);
	          * var injector = ReflectiveInjector.fromResolvedProviders(providers);
	          * expect(injector.get(Car) instanceof Car).toBe(true);
	          * ```
	         * @param {?} providers
	         * @param {?=} parent
	         * @return {?}
	         */
	        ReflectiveInjector.fromResolvedProviders = function (providers, parent) {
	            if (parent === void 0) { parent = null; }
	            return new ReflectiveInjector_(ReflectiveProtoInjector.fromResolvedProviders(providers), parent);
	        };
	        Object.defineProperty(ReflectiveInjector.prototype, "parent", {
	            /**
	             *  Parent of this injector.
	              * *
	              * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	              * -->
	              * *
	              * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))
	              * *
	              * ```typescript
	              * var parent = ReflectiveInjector.resolveAndCreate([]);
	              * var child = parent.resolveAndCreateChild([]);
	              * expect(child.parent).toBe(parent);
	              * ```
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         *  Resolves an array of providers and creates a child injector from those providers.
	          * *
	          * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	          * -->
	          * *
	          * The passed-in providers can be an array of `Type`, {@link Provider},
	          * or a recursive array of more providers.
	          * *
	          * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))
	          * *
	          * ```typescript
	          * class ParentProvider {}
	          * class ChildProvider {}
	          * *
	          * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);
	          * var child = parent.resolveAndCreateChild([ChildProvider]);
	          * *
	          * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	          * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	          * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	          * ```
	          * *
	          * This function is slower than the corresponding `createChildFromResolved`
	          * because it needs to resolve the passed-in providers first.
	          * See {@link Injector#resolve} and {@link Injector#createChildFromResolved}.
	         * @param {?} providers
	         * @return {?}
	         */
	        ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { return unimplemented(); };
	        /**
	         *  Creates a child injector from previously resolved providers.
	          * *
	          * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	          * -->
	          * *
	          * This API is the recommended way to construct injectors in performance-sensitive parts.
	          * *
	          * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))
	          * *
	          * ```typescript
	          * class ParentProvider {}
	          * class ChildProvider {}
	          * *
	          * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);
	          * var childProviders = ReflectiveInjector.resolve([ChildProvider]);
	          * *
	          * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);
	          * var child = parent.createChildFromResolved(childProviders);
	          * *
	          * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	          * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	          * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	          * ```
	         * @param {?} providers
	         * @return {?}
	         */
	        ReflectiveInjector.prototype.createChildFromResolved = function (providers) {
	            return unimplemented();
	        };
	        /**
	         *  Resolves a provider and instantiates an object in the context of the injector.
	          * *
	          * The created object does not get cached by the injector.
	          * *
	          * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))
	          * *
	          * ```typescript
	          * class Engine {
	          * }
	          * *
	          * class Car {
	          * constructor(public engine:Engine) {}
	          * }
	          * *
	          * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
	          * *
	          * var car = injector.resolveAndInstantiate(Car);
	          * expect(car.engine).toBe(injector.get(Engine));
	          * expect(car).not.toBe(injector.resolveAndInstantiate(Car));
	          * ```
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { return unimplemented(); };
	        /**
	         *  Instantiates an object using a resolved provider in the context of the injector.
	          * *
	          * The created object does not get cached by the injector.
	          * *
	          * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))
	          * *
	          * ```typescript
	          * class Engine {
	          * }
	          * *
	          * class Car {
	          * constructor(public engine:Engine) {}
	          * }
	          * *
	          * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
	          * var carProvider = ReflectiveInjector.resolve([Car])[0];
	          * var car = injector.instantiateResolved(carProvider);
	          * expect(car.engine).toBe(injector.get(Engine));
	          * expect(car).not.toBe(injector.instantiateResolved(carProvider));
	          * ```
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjector.prototype.instantiateResolved = function (provider) { return unimplemented(); };
	        /**
	         * @abstract
	         * @param {?} token
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        ReflectiveInjector.prototype.get = function (token, notFoundValue) { };
	        return ReflectiveInjector;
	    }());
	    var ReflectiveInjector_ = (function () {
	        /**
	         *  Private
	         * @param {?} _proto
	         * @param {?=} _parent
	         */
	        function ReflectiveInjector_(_proto /* ProtoInjector */, _parent) {
	            if (_parent === void 0) { _parent = null; }
	            /** @internal */
	            this._constructionCounter = 0;
	            this._proto = _proto;
	            this._parent = _parent;
	            this._strategy = _proto._strategy.createInjectorStrategy(this);
	        }
	        /**
	         * @param {?} token
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	            return this._getByKey(ReflectiveKey.get(token), null, null, notFoundValue);
	        };
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.getAt = function (index) { return this._strategy.getObjAtIndex(index); };
	        Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._parent; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ReflectiveInjector_.prototype, "internalStrategy", {
	            /**
	             *  Internal. Do not use.
	              * We return `any` not to export the InjectorStrategy type.
	             * @return {?}
	             */
	            get: function () { return this._strategy; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} providers
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {
	            var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	            return this.createChildFromResolved(ResolvedReflectiveProviders);
	        };
	        /**
	         * @param {?} providers
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {
	            var /** @type {?} */ proto = new ReflectiveProtoInjector(providers);
	            var /** @type {?} */ inj = new ReflectiveInjector_(proto);
	            inj._parent = this;
	            return inj;
	        };
	        /**
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {
	            return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
	        };
	        /**
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.instantiateResolved = function (provider) {
	            return this._instantiateProvider(provider);
	        };
	        /**
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._new = function (provider) {
	            if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
	                throw new CyclicDependencyError(this, provider.key);
	            }
	            return this._instantiateProvider(provider);
	        };
	        /**
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._instantiateProvider = function (provider) {
	            if (provider.multiProvider) {
	                var /** @type {?} */ res = new Array(provider.resolvedFactories.length);
	                for (var /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {
	                    res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
	                }
	                return res;
	            }
	            else {
	                return this._instantiate(provider, provider.resolvedFactories[0]);
	            }
	        };
	        /**
	         * @param {?} provider
	         * @param {?} ResolvedReflectiveFactory
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory) {
	            var /** @type {?} */ factory = ResolvedReflectiveFactory.factory;
	            var /** @type {?} */ deps = ResolvedReflectiveFactory.dependencies;
	            var /** @type {?} */ length = deps.length;
	            var /** @type {?} */ d0;
	            var /** @type {?} */ d1;
	            var /** @type {?} */ d2;
	            var /** @type {?} */ d3;
	            var /** @type {?} */ d4;
	            var /** @type {?} */ d5;
	            var /** @type {?} */ d6;
	            var /** @type {?} */ d7;
	            var /** @type {?} */ d8;
	            var /** @type {?} */ d9;
	            var /** @type {?} */ d10;
	            var /** @type {?} */ d11;
	            var /** @type {?} */ d12;
	            var /** @type {?} */ d13;
	            var /** @type {?} */ d14;
	            var /** @type {?} */ d15;
	            var /** @type {?} */ d16;
	            var /** @type {?} */ d17;
	            var /** @type {?} */ d18;
	            var /** @type {?} */ d19;
	            try {
	                d0 = length > 0 ? this._getByReflectiveDependency(provider, deps[0]) : null;
	                d1 = length > 1 ? this._getByReflectiveDependency(provider, deps[1]) : null;
	                d2 = length > 2 ? this._getByReflectiveDependency(provider, deps[2]) : null;
	                d3 = length > 3 ? this._getByReflectiveDependency(provider, deps[3]) : null;
	                d4 = length > 4 ? this._getByReflectiveDependency(provider, deps[4]) : null;
	                d5 = length > 5 ? this._getByReflectiveDependency(provider, deps[5]) : null;
	                d6 = length > 6 ? this._getByReflectiveDependency(provider, deps[6]) : null;
	                d7 = length > 7 ? this._getByReflectiveDependency(provider, deps[7]) : null;
	                d8 = length > 8 ? this._getByReflectiveDependency(provider, deps[8]) : null;
	                d9 = length > 9 ? this._getByReflectiveDependency(provider, deps[9]) : null;
	                d10 = length > 10 ? this._getByReflectiveDependency(provider, deps[10]) : null;
	                d11 = length > 11 ? this._getByReflectiveDependency(provider, deps[11]) : null;
	                d12 = length > 12 ? this._getByReflectiveDependency(provider, deps[12]) : null;
	                d13 = length > 13 ? this._getByReflectiveDependency(provider, deps[13]) : null;
	                d14 = length > 14 ? this._getByReflectiveDependency(provider, deps[14]) : null;
	                d15 = length > 15 ? this._getByReflectiveDependency(provider, deps[15]) : null;
	                d16 = length > 16 ? this._getByReflectiveDependency(provider, deps[16]) : null;
	                d17 = length > 17 ? this._getByReflectiveDependency(provider, deps[17]) : null;
	                d18 = length > 18 ? this._getByReflectiveDependency(provider, deps[18]) : null;
	                d19 = length > 19 ? this._getByReflectiveDependency(provider, deps[19]) : null;
	            }
	            catch (e) {
	                if (e instanceof AbstractProviderError || e instanceof InstantiationError) {
	                    e.addKey(this, provider.key);
	                }
	                throw e;
	            }
	            var /** @type {?} */ obj;
	            try {
	                switch (length) {
	                    case 0:
	                        obj = factory();
	                        break;
	                    case 1:
	                        obj = factory(d0);
	                        break;
	                    case 2:
	                        obj = factory(d0, d1);
	                        break;
	                    case 3:
	                        obj = factory(d0, d1, d2);
	                        break;
	                    case 4:
	                        obj = factory(d0, d1, d2, d3);
	                        break;
	                    case 5:
	                        obj = factory(d0, d1, d2, d3, d4);
	                        break;
	                    case 6:
	                        obj = factory(d0, d1, d2, d3, d4, d5);
	                        break;
	                    case 7:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6);
	                        break;
	                    case 8:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
	                        break;
	                    case 9:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
	                        break;
	                    case 10:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
	                        break;
	                    case 11:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
	                        break;
	                    case 12:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
	                        break;
	                    case 13:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
	                        break;
	                    case 14:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
	                        break;
	                    case 15:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
	                        break;
	                    case 16:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
	                        break;
	                    case 17:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
	                        break;
	                    case 18:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
	                        break;
	                    case 19:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
	                        break;
	                    case 20:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
	                        break;
	                    default:
	                        throw new Error("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies");
	                }
	            }
	            catch (e) {
	                throw new InstantiationError(this, e, e.stack, provider.key);
	            }
	            return obj;
	        };
	        /**
	         * @param {?} provider
	         * @param {?} dep
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._getByReflectiveDependency = function (provider, dep) {
	            return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional ? null : THROW_IF_NOT_FOUND);
	        };
	        /**
	         * @param {?} key
	         * @param {?} lowerBoundVisibility
	         * @param {?} upperBoundVisibility
	         * @param {?} notFoundValue
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._getByKey = function (key, lowerBoundVisibility, upperBoundVisibility, notFoundValue) {
	            if (key === INJECTOR_KEY) {
	                return this;
	            }
	            if (upperBoundVisibility instanceof Self) {
	                return this._getByKeySelf(key, notFoundValue);
	            }
	            else {
	                return this._getByKeyDefault(key, notFoundValue, lowerBoundVisibility);
	            }
	        };
	        /**
	         * @param {?} key
	         * @param {?} notFoundValue
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {
	            if (notFoundValue !== THROW_IF_NOT_FOUND) {
	                return notFoundValue;
	            }
	            else {
	                throw new NoProviderError(this, key);
	            }
	        };
	        /**
	         * @param {?} key
	         * @param {?} notFoundValue
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {
	            var /** @type {?} */ obj = this._strategy.getObjByKeyId(key.id);
	            return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
	        };
	        /**
	         * @param {?} key
	         * @param {?} notFoundValue
	         * @param {?} lowerBoundVisibility
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, lowerBoundVisibility) {
	            var /** @type {?} */ inj;
	            if (lowerBoundVisibility instanceof SkipSelf) {
	                inj = this._parent;
	            }
	            else {
	                inj = this;
	            }
	            while (inj instanceof ReflectiveInjector_) {
	                var /** @type {?} */ inj_ = (inj);
	                var /** @type {?} */ obj = inj_._strategy.getObjByKeyId(key.id);
	                if (obj !== UNDEFINED)
	                    return obj;
	                inj = inj_._parent;
	            }
	            if (inj !== null) {
	                return inj.get(key.token, notFoundValue);
	            }
	            else {
	                return this._throwOrNull(key, notFoundValue);
	            }
	        };
	        Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ providers = _mapProviders(this, function (b) { return ' "' + b.key.displayName + '" '; })
	                    .join(', ');
	                return "ReflectiveInjector(providers: [" + providers + "])";
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.toString = function () { return this.displayName; };
	        return ReflectiveInjector_;
	    }());
	    var /** @type {?} */ INJECTOR_KEY = ReflectiveKey.get(Injector);
	    /**
	     * @param {?} injector
	     * @param {?} fn
	     * @return {?}
	     */
	    function _mapProviders(injector, fn) {
	        var /** @type {?} */ res = new Array(injector._proto.numberOfProviders);
	        for (var /** @type {?} */ i = 0; i < injector._proto.numberOfProviders; ++i) {
	            res[i] = fn(injector._proto.getProviderAtIndex(i));
	        }
	        return res;
	    }
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     *  *
	      * *
	      * The default implementation of `ErrorHandler` prints error messages to the `console`. To
	      * intercept error handling, write a custom exception handler that replaces this default as
	      * appropriate for your app.
	      * *
	      * ### Example
	      * *
	      * ```
	      * class MyErrorHandler implements ErrorHandler {
	      * handleError(error) {
	      * // do something with the exception
	      * }
	      * }
	      * *
	      * providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
	      * })
	      * class MyModule {}
	      * ```
	      * *
	     */
	    var ErrorHandler = (function () {
	        /**
	         * @param {?=} rethrowError
	         */
	        function ErrorHandler(rethrowError) {
	            if (rethrowError === void 0) { rethrowError = true; }
	            /**
	             * @internal
	             */
	            this._console = console;
	            this.rethrowError = rethrowError;
	        }
	        /**
	         * @param {?} error
	         * @return {?}
	         */
	        ErrorHandler.prototype.handleError = function (error) {
	            var /** @type {?} */ originalError = this._findOriginalError(error);
	            var /** @type {?} */ originalStack = this._findOriginalStack(error);
	            var /** @type {?} */ context = this._findContext(error);
	            this._console.error("EXCEPTION: " + this._extractMessage(error));
	            if (originalError) {
	                this._console.error("ORIGINAL EXCEPTION: " + this._extractMessage(originalError));
	            }
	            if (originalStack) {
	                this._console.error('ORIGINAL STACKTRACE:');
	                this._console.error(originalStack);
	            }
	            if (context) {
	                this._console.error('ERROR CONTEXT:');
	                this._console.error(context);
	            }
	            // We rethrow exceptions, so operations like 'bootstrap' will result in an error
	            // when an error happens. If we do not rethrow, bootstrap will always succeed.
	            if (this.rethrowError)
	                throw error;
	        };
	        /**
	         * @param {?} error
	         * @return {?}
	         */
	        ErrorHandler.prototype._extractMessage = function (error) {
	            return error instanceof Error ? error.message : error.toString();
	        };
	        /**
	         * @param {?} error
	         * @return {?}
	         */
	        ErrorHandler.prototype._findContext = function (error) {
	            if (error) {
	                return error.context ? error.context :
	                    this._findContext(((error)).originalError);
	            }
	            return null;
	        };
	        /**
	         * @param {?} error
	         * @return {?}
	         */
	        ErrorHandler.prototype._findOriginalError = function (error) {
	            var /** @type {?} */ e = ((error)).originalError;
	            while (e && ((e)).originalError) {
	                e = ((e)).originalError;
	            }
	            return e;
	        };
	        /**
	         * @param {?} error
	         * @return {?}
	         */
	        ErrorHandler.prototype._findOriginalStack = function (error) {
	            if (!(error instanceof Error))
	                return null;
	            var /** @type {?} */ e = error;
	            var /** @type {?} */ stack = e.stack;
	            while (e instanceof Error && ((e)).originalError) {
	                e = ((e)).originalError;
	                if (e instanceof Error && e.stack) {
	                    stack = e.stack;
	                }
	            }
	            return stack;
	        };
	        return ErrorHandler;
	    }());
	
	    /**
	     *  Wraps Javascript Objects
	     */
	    var StringMapWrapper = (function () {
	        function StringMapWrapper() {
	        }
	        /**
	         * @param {?} m1
	         * @param {?} m2
	         * @return {?}
	         */
	        StringMapWrapper.merge = function (m1, m2) {
	            var /** @type {?} */ m = {};
	            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	                var k = _a[_i];
	                m[k] = m1[k];
	            }
	            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	                var k = _c[_b];
	                m[k] = m2[k];
	            }
	            return m;
	        };
	        /**
	         * @param {?} m1
	         * @param {?} m2
	         * @return {?}
	         */
	        StringMapWrapper.equals = function (m1, m2) {
	            var /** @type {?} */ k1 = Object.keys(m1);
	            var /** @type {?} */ k2 = Object.keys(m2);
	            if (k1.length != k2.length) {
	                return false;
	            }
	            for (var /** @type {?} */ i = 0; i < k1.length; i++) {
	                var /** @type {?} */ key = k1[i];
	                if (m1[key] !== m2[key]) {
	                    return false;
	                }
	            }
	            return true;
	        };
	        return StringMapWrapper;
	    }());
	    var ListWrapper = (function () {
	        function ListWrapper() {
	        }
	        /**
	         * @param {?} arr
	         * @param {?} condition
	         * @return {?}
	         */
	        ListWrapper.findLast = function (arr, condition) {
	            for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {
	                if (condition(arr[i])) {
	                    return arr[i];
	                }
	            }
	            return null;
	        };
	        /**
	         * @param {?} list
	         * @param {?} items
	         * @return {?}
	         */
	        ListWrapper.removeAll = function (list, items) {
	            for (var /** @type {?} */ i = 0; i < items.length; ++i) {
	                var /** @type {?} */ index = list.indexOf(items[i]);
	                if (index > -1) {
	                    list.splice(index, 1);
	                }
	            }
	        };
	        /**
	         * @param {?} list
	         * @param {?} el
	         * @return {?}
	         */
	        ListWrapper.remove = function (list, el) {
	            var /** @type {?} */ index = list.indexOf(el);
	            if (index > -1) {
	                list.splice(index, 1);
	                return true;
	            }
	            return false;
	        };
	        /**
	         * @param {?} a
	         * @param {?} b
	         * @return {?}
	         */
	        ListWrapper.equals = function (a, b) {
	            if (a.length != b.length)
	                return false;
	            for (var /** @type {?} */ i = 0; i < a.length; ++i) {
	                if (a[i] !== b[i])
	                    return false;
	            }
	            return true;
	        };
	        /**
	         * @param {?} list
	         * @return {?}
	         */
	        ListWrapper.flatten = function (list) {
	            return list.reduce(function (flat, item) {
	                var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
	                return ((flat)).concat(flatItem);
	            }, []);
	        };
	        return ListWrapper;
	    }());
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isListLikeIterable(obj) {
	        if (!isJsObject(obj))
	            return false;
	        return Array.isArray(obj) ||
	            (!(obj instanceof Map) &&
	                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
	    }
	    /**
	     * @param {?} a
	     * @param {?} b
	     * @param {?} comparator
	     * @return {?}
	     */
	    function areIterablesEqual(a, b, comparator) {
	        var /** @type {?} */ iterator1 = a[getSymbolIterator()]();
	        var /** @type {?} */ iterator2 = b[getSymbolIterator()]();
	        while (true) {
	            var /** @type {?} */ item1 = iterator1.next();
	            var /** @type {?} */ item2 = iterator2.next();
	            if (item1.done && item2.done)
	                return true;
	            if (item1.done || item2.done)
	                return false;
	            if (!comparator(item1.value, item2.value))
	                return false;
	        }
	    }
	    /**
	     * @param {?} obj
	     * @param {?} fn
	     * @return {?}
	     */
	    function iterateListLike(obj, fn) {
	        if (Array.isArray(obj)) {
	            for (var /** @type {?} */ i = 0; i < obj.length; i++) {
	                fn(obj[i]);
	            }
	        }
	        else {
	            var /** @type {?} */ iterator = obj[getSymbolIterator()]();
	            var /** @type {?} */ item = void 0;
	            while (!((item = iterator.next()).done)) {
	                fn(item.value);
	            }
	        }
	    }
	
	    /**
	     * @license undefined
	      * Copyright Google Inc. All Rights Reserved.
	      * *
	      * Use of this source code is governed by an MIT-style license that can be
	      * found in the LICENSE file at https://angular.io/license
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPromise(obj) {
	        // allow any Promise/A+ compliant thenable.
	        // It's up to the caller to ensure that obj.then conforms to the spec
	        return !!obj && typeof obj.then === 'function';
	    }
	
	    /**
	     * A function that will be executed when an application is initialized.
	     * @experimental
	     */
	    var /** @type {?} */ APP_INITIALIZER = new OpaqueToken('Application Initializer');
	    /**
	     *  A class that reflects the state of running {@link APP_INITIALIZER}s.
	      * *
	     */
	    var ApplicationInitStatus = (function () {
	        /**
	         * @param {?} appInits
	         */
	        function ApplicationInitStatus(appInits) {
	            var _this = this;
	            this._done = false;
	            var asyncInitPromises = [];
	            if (appInits) {
	                for (var i = 0; i < appInits.length; i++) {
	                    var initResult = appInits[i]();
	                    if (isPromise(initResult)) {
	                        asyncInitPromises.push(initResult);
	                    }
	                }
	            }
	            this._donePromise = Promise.all(asyncInitPromises).then(function () { _this._done = true; });
	            if (asyncInitPromises.length === 0) {
	                this._done = true;
	            }
	        }
	        Object.defineProperty(ApplicationInitStatus.prototype, "done", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._done; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._donePromise; },
	            enumerable: true,
	            configurable: true
	        });
	        ApplicationInitStatus.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        ApplicationInitStatus.ctorParameters = function () { return [
	            { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },
	        ]; };
	        return ApplicationInitStatus;
	    }());
	
	    /**
	     * A DI Token representing a unique string id assigned to the application by Angular and used
	     * primarily for prefixing application attributes and CSS styles when
	     * {@link ViewEncapsulation#Emulated} is being used.
	     *
	     * If you need to avoid randomly generated value to be used as an application id, you can provide
	     * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}
	     * using this token.
	     * @experimental
	     */
	    var /** @type {?} */ APP_ID = new OpaqueToken('AppId');
	    /**
	     * @return {?}
	     */
	    function _appIdRandomProviderFactory() {
	        return "" + _randomChar() + _randomChar() + _randomChar();
	    }
	    /**
	     * Providers that will generate a random APP_ID_TOKEN.
	     * @experimental
	     */
	    var /** @type {?} */ APP_ID_RANDOM_PROVIDER = {
	        provide: APP_ID,
	        useFactory: _appIdRandomProviderFactory,
	        deps: /** @type {?} */ ([]),
	    };
	    /**
	     * @return {?}
	     */
	    function _randomChar() {
	        return String.fromCharCode(97 + Math.floor(Math.random() * 25));
	    }
	    /**
	     * A function that will be executed when a platform is initialized.
	     * @experimental
	     */
	    var /** @type {?} */ PLATFORM_INITIALIZER = new OpaqueToken('Platform Initializer');
	    /**
	     * All callbacks provided via this token will be called for every component that is bootstrapped.
	     * Signature of the callback:
	     *
	     * `(componentRef: ComponentRef) => void`.
	     *
	     * @experimental
	     */
	    var /** @type {?} */ APP_BOOTSTRAP_LISTENER = new OpaqueToken('appBootstrapListener');
	    /**
	     * A token which indicates the root directory of the application
	     * @experimental
	     */
	    var /** @type {?} */ PACKAGE_ROOT_URL = new OpaqueToken('Application Packages Root URL');
	
	    var Console = (function () {
	        function Console() {
	        }
	        /**
	         * @param {?} message
	         * @return {?}
	         */
	        Console.prototype.log = function (message) { print(message); };
	        /**
	         * @param {?} message
	         * @return {?}
	         */
	        Console.prototype.warn = function (message) { warn(message); };
	        Console.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        Console.ctorParameters = function () { return []; };
	        return Console;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     *  Indicates that a component is still being loaded in a synchronous compile.
	      * *
	     */
	    var ComponentStillLoadingError = (function (_super) {
	        __extends$4(ComponentStillLoadingError, _super);
	        /**
	         * @param {?} compType
	         */
	        function ComponentStillLoadingError(compType) {
	            _super.call(this, "Can't compile synchronously as " + stringify(compType) + " is still being loaded!");
	            this.compType = compType;
	        }
	        return ComponentStillLoadingError;
	    }(BaseError));
	    /**
	     *  Combination of NgModuleFactory and ComponentFactorys.
	      * *
	     */
	    var ModuleWithComponentFactories = (function () {
	        /**
	         * @param {?} ngModuleFactory
	         * @param {?} componentFactories
	         */
	        function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
	            this.ngModuleFactory = ngModuleFactory;
	            this.componentFactories = componentFactories;
	        }
	        return ModuleWithComponentFactories;
	    }());
	    /**
	     * @return {?}
	     */
	    function _throwError() {
	        throw new Error("Runtime compiler is not loaded");
	    }
	    /**
	     *  Low-level service for running the angular compiler during runtime
	      * to create {@link ComponentFactory}s, which
	      * can later be used to create and render a Component instance.
	      * *
	      * Each `@NgModule` provides an own `Compiler` to its injector,
	      * that will use the directives/pipes of the ng module for compilation
	      * of components.
	     */
	    var Compiler = (function () {
	        function Compiler() {
	        }
	        /**
	         *  Compiles the given NgModule and all of its components. All templates of the components listed
	          * in `entryComponents`
	          * have to be inlined. Otherwise throws a {@link ComponentStillLoadingError}.
	         * @param {?} moduleType
	         * @return {?}
	         */
	        Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };
	        /**
	         *  Compiles the given NgModule and all of its components
	         * @param {?} moduleType
	         * @return {?}
	         */
	        Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };
	        /**
	         *  Same as {@link compileModuleSync} but also creates ComponentFactories for all components.
	         * @param {?} moduleType
	         * @return {?}
	         */
	        Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	            throw _throwError();
	        };
	        /**
	         *  Same as {@link compileModuleAsync} but also creates ComponentFactories for all components.
	         * @param {?} moduleType
	         * @return {?}
	         */
	        Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	            throw _throwError();
	        };
	        /**
	         *  Exposes the CSS-style selectors that have been used in `ngContent` directives within
	          * the template of the given component.
	          * This is used by the `upgrade` library to compile the appropriate transclude content
	          * in the Angular 1 wrapper component.
	         * @param {?} component
	         * @return {?}
	         */
	        Compiler.prototype.getNgContentSelectors = function (component) { throw _throwError(); };
	        /**
	         *  Clears all caches.
	         * @return {?}
	         */
	        Compiler.prototype.clearCache = function () { };
	        /**
	         *  Clears the cache for the given component/ngModule.
	         * @param {?} type
	         * @return {?}
	         */
	        Compiler.prototype.clearCacheFor = function (type) { };
	        return Compiler;
	    }());
	    /**
	     * Token to provide CompilerOptions in the platform injector.
	     *
	     * @experimental
	     */
	    var /** @type {?} */ COMPILER_OPTIONS = new OpaqueToken('compilerOptions');
	    /**
	     *  A factory for creating a Compiler
	      * *
	     * @abstract
	     */
	    var CompilerFactory = (function () {
	        function CompilerFactory() {
	        }
	        /**
	         * @abstract
	         * @param {?=} options
	         * @return {?}
	         */
	        CompilerFactory.prototype.createCompiler = function (options) { };
	        return CompilerFactory;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * A wrapper around a native element inside of a View.
	     *
	     * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
	     * element.
	     *
	     * @security Permitting direct access to the DOM can make your application more vulnerable to
	     * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the
	     * [Security Guide](http://g.co/ng/security).
	     *
	     * @stable
	     */
	    // Note: We don't expose things like `Injector`, `ViewContainer`, ... here,
	    // i.e. users have to ask for what they need. With that, we can build better analysis tools
	    // and could do better codegen in the future.
	    var ElementRef = (function () {
	        /**
	         * @param {?} nativeElement
	         */
	        function ElementRef(nativeElement) {
	            this.nativeElement = nativeElement;
	        }
	        return ElementRef;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$6 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     *  Use by directives and components to emit custom Events.
	      * *
	      * ### Examples
	      * *
	      * In the following example, `Zippy` alternatively emits `open` and `close` events when its
	      * title gets clicked:
	      * *
	      * ```
	      * selector: 'zippy',
	      * template: `
	      * <div class="zippy">
	      * <div (click)="toggle()">Toggle</div>
	      * <div [hidden]="!visible">
	      * <ng-content></ng-content>
	      * </div>
	      * </div>`})
	      * export class Zippy {
	      * visible: boolean = true;
	      * @Output() open: EventEmitter<any> = new EventEmitter();
	      * @Output() close: EventEmitter<any> = new EventEmitter();
	      * *
	      * toggle() {
	      * this.visible = !this.visible;
	      * if (this.visible) {
	      * this.open.emit(null);
	      * } else {
	      * this.close.emit(null);
	      * }
	      * }
	      * }
	      * ```
	      * *
	      * The events payload can be accessed by the parameter `$event` on the components output event
	      * handler:
	      * *
	      * ```
	      * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
	      * ```
	      * *
	      * Uses Rx.Observable but provides an adapter to make it work as specified here:
	      * https://github.com/jhusain/observable-spec
	      * *
	      * Once a reference implementation of the spec is available, switch to it.
	     */
	    var EventEmitter = (function (_super) {
	        __extends$6(EventEmitter, _super);
	        /**
	         *  Creates an instance of [EventEmitter], which depending on [isAsync],
	          * delivers events synchronously or asynchronously.
	         * @param {?=} isAsync
	         */
	        function EventEmitter(isAsync) {
	            if (isAsync === void 0) { isAsync = false; }
	            _super.call(this);
	            this.__isAsync = isAsync;
	        }
	        /**
	         * @param {?=} value
	         * @return {?}
	         */
	        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
	        /**
	         * @param {?=} generatorOrNext
	         * @param {?=} error
	         * @param {?=} complete
	         * @return {?}
	         */
	        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
	            var /** @type {?} */ schedulerFn;
	            var /** @type {?} */ errorFn = function (err) { return null; };
	            var /** @type {?} */ completeFn = function () { return null; };
	            if (generatorOrNext && typeof generatorOrNext === 'object') {
	                schedulerFn = this.__isAsync ? function (value) {
	                    setTimeout(function () { return generatorOrNext.next(value); });
	                } : function (value) { generatorOrNext.next(value); };
	                if (generatorOrNext.error) {
	                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
	                        function (err) { generatorOrNext.error(err); };
	                }
	                if (generatorOrNext.complete) {
	                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
	                        function () { generatorOrNext.complete(); };
	                }
	            }
	            else {
	                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
	                    function (value) { generatorOrNext(value); };
	                if (error) {
	                    errorFn =
	                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
	                }
	                if (complete) {
	                    completeFn =
	                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
	                }
	            }
	            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
	        };
	        return EventEmitter;
	    }(rxjs_Subject.Subject));
	
	    /**
	     *  An injectable service for executing work inside or outside of the Angular zone.
	      * *
	      * The most common use of this service is to optimize performance when starting a work consisting of
	      * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
	      * Angular. Such tasks can be kicked off via {@link runOutsideAngular} and if needed, these tasks
	      * can reenter the Angular zone via {@link run}.
	      * *
	      * <!-- TODO: add/fix links to:
	      * - docs explaining zones and the use of zones in Angular and change-detection
	      * - link to runOutsideAngular/run (throughout this file!)
	      * -->
	      * *
	      * ### Example
	      * ```
	      * import {Component, NgZone} from '@angular/core';
	      * import {NgIf} from '@angular/common';
	      * *
	      * selector: 'ng-zone-demo'.
	      * template: `
	      * <h2>Demo: NgZone</h2>
	      * *
	      * <p>Progress: {{progress}}%</p>
	      * <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
	      * *
	      * <button (click)="processWithinAngularZone()">Process within Angular zone</button>
	      * <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
	      * `,
	      * })
	      * export class NgZoneDemo {
	      * progress: number = 0;
	      * label: string;
	      * *
	      * constructor(private _ngZone: NgZone) {}
	      * *
	      * // Loop inside the Angular zone
	      * // so the UI DOES refresh after each setTimeout cycle
	      * processWithinAngularZone() {
	      * this.label = 'inside';
	      * this.progress = 0;
	      * this._increaseProgress(() => console.log('Inside Done!'));
	      * }
	      * *
	      * // Loop outside of the Angular zone
	      * // so the UI DOES NOT refresh after each setTimeout cycle
	      * processOutsideOfAngularZone() {
	      * this.label = 'outside';
	      * this.progress = 0;
	      * this._ngZone.runOutsideAngular(() => {
	      * this._increaseProgress(() => {
	      * // reenter the Angular zone and display done
	      * this._ngZone.run(() => {console.log('Outside Done!') });
	      * }}));
	      * }
	      * *
	      * _increaseProgress(doneCallback: () => void) {
	      * this.progress += 1;
	      * console.log(`Current progress: ${this.progress}%`);
	      * *
	      * if (this.progress < 100) {
	      * window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
	      * } else {
	      * doneCallback();
	      * }
	      * }
	      * }
	      * ```
	     */
	    var NgZone = (function () {
	        /**
	         * @param {?} __0
	         */
	        function NgZone(_a) {
	            var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
	            this._hasPendingMicrotasks = false;
	            this._hasPendingMacrotasks = false;
	            this._isStable = true;
	            this._nesting = 0;
	            this._onUnstable = new EventEmitter(false);
	            this._onMicrotaskEmpty = new EventEmitter(false);
	            this._onStable = new EventEmitter(false);
	            this._onErrorEvents = new EventEmitter(false);
	            if (typeof Zone == 'undefined') {
	                throw new Error('Angular requires Zone.js prolyfill.');
	            }
	            Zone.assertZonePatched();
	            this.outer = this.inner = Zone.current;
	            if (Zone['wtfZoneSpec']) {
	                this.inner = this.inner.fork(Zone['wtfZoneSpec']);
	            }
	            if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
	                this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
	            }
	            this.forkInnerZoneWithAngularBehavior();
	        }
	        /**
	         * @return {?}
	         */
	        NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };
	        /**
	         * @return {?}
	         */
	        NgZone.assertInAngularZone = function () {
	            if (!NgZone.isInAngularZone()) {
	                throw new Error('Expected to be in Angular Zone, but it is not!');
	            }
	        };
	        /**
	         * @return {?}
	         */
	        NgZone.assertNotInAngularZone = function () {
	            if (NgZone.isInAngularZone()) {
	                throw new Error('Expected to not be in Angular Zone, but it is!');
	            }
	        };
	        /**
	         *  Executes the `fn` function synchronously within the Angular zone and returns value returned by
	          * the function.
	          * *
	          * Running functions via `run` allows you to reenter Angular zone from a task that was executed
	          * outside of the Angular zone (typically started via {@link runOutsideAngular}).
	          * *
	          * Any future tasks or microtasks scheduled from within this function will continue executing from
	          * within the Angular zone.
	          * *
	          * If a synchronous error happens it will be rethrown and not reported via `onError`.
	         * @param {?} fn
	         * @return {?}
	         */
	        NgZone.prototype.run = function (fn) { return this.inner.run(fn); };
	        /**
	         *  Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
	          * rethrown.
	         * @param {?} fn
	         * @return {?}
	         */
	        NgZone.prototype.runGuarded = function (fn) { return this.inner.runGuarded(fn); };
	        /**
	         *  Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
	          * the function.
	          * *
	          * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that
	          * doesn't trigger Angular change-detection or is subject to Angular's error handling.
	          * *
	          * Any future tasks or microtasks scheduled from within this function will continue executing from
	          * outside of the Angular zone.
	          * *
	          * Use {@link run} to reenter the Angular zone and do work that updates the application model.
	         * @param {?} fn
	         * @return {?}
	         */
	        NgZone.prototype.runOutsideAngular = function (fn) { return this.outer.run(fn); };
	        Object.defineProperty(NgZone.prototype, "onUnstable", {
	            /**
	             *  Notifies when code enters Angular Zone. This gets fired first on VM Turn.
	             * @return {?}
	             */
	            get: function () { return this._onUnstable; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
	            /**
	             *  Notifies when there is no more microtasks enqueue in the current VM Turn.
	              * This is a hint for Angular to do change detection, which may enqueue more microtasks.
	              * For this reason this event can fire multiple times per VM Turn.
	             * @return {?}
	             */
	            get: function () { return this._onMicrotaskEmpty; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "onStable", {
	            /**
	             *  Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
	              * implies we are about to relinquish VM turn.
	              * This event gets called just once.
	             * @return {?}
	             */
	            get: function () { return this._onStable; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "onError", {
	            /**
	             *  Notify that an error has been delivered.
	             * @return {?}
	             */
	            get: function () { return this._onErrorEvents; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "isStable", {
	            /**
	             *  Whether there are no outstanding microtasks or macrotasks.
	             * @return {?}
	             */
	            get: function () { return this._isStable; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._hasPendingMicrotasks; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._hasPendingMacrotasks; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        NgZone.prototype.checkStable = function () {
	            var _this = this;
	            if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {
	                try {
	                    this._nesting++;
	                    this._onMicrotaskEmpty.emit(null);
	                }
	                finally {
	                    this._nesting--;
	                    if (!this._hasPendingMicrotasks) {
	                        try {
	                            this.runOutsideAngular(function () { return _this._onStable.emit(null); });
	                        }
	                        finally {
	                            this._isStable = true;
	                        }
	                    }
	                }
	            }
	        };
	        /**
	         * @return {?}
	         */
	        NgZone.prototype.forkInnerZoneWithAngularBehavior = function () {
	            var _this = this;
	            this.inner = this.inner.fork({
	                name: 'angular',
	                properties: /** @type {?} */ ({ 'isAngularZone': true }),
	                onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
	                    try {
	                        _this.onEnter();
	                        return delegate.invokeTask(target, task, applyThis, applyArgs);
	                    }
	                    finally {
	                        _this.onLeave();
	                    }
	                },
	                onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
	                    try {
	                        _this.onEnter();
	                        return delegate.invoke(target, callback, applyThis, applyArgs, source);
	                    }
	                    finally {
	                        _this.onLeave();
	                    }
	                },
	                onHasTask: function (delegate, current, target, hasTaskState) {
	                    delegate.hasTask(target, hasTaskState);
	                    if (current === target) {
	                        // We are only interested in hasTask events which originate from our zone
	                        // (A child hasTask event is not interesting to us)
	                        if (hasTaskState.change == 'microTask') {
	                            _this.setHasMicrotask(hasTaskState.microTask);
	                        }
	                        else if (hasTaskState.change == 'macroTask') {
	                            _this.setHasMacrotask(hasTaskState.macroTask);
	                        }
	                    }
	                },
	                onHandleError: function (delegate, current, target, error) {
	                    delegate.handleError(target, error);
	                    _this.triggerError(error);
	                    return false;
	                }
	            });
	        };
	        /**
	         * @return {?}
	         */
	        NgZone.prototype.onEnter = function () {
	            this._nesting++;
	            if (this._isStable) {
	                this._isStable = false;
	                this._onUnstable.emit(null);
	            }
	        };
	        /**
	         * @return {?}
	         */
	        NgZone.prototype.onLeave = function () {
	            this._nesting--;
	            this.checkStable();
	        };
	        /**
	         * @param {?} hasMicrotasks
	         * @return {?}
	         */
	        NgZone.prototype.setHasMicrotask = function (hasMicrotasks) {
	            this._hasPendingMicrotasks = hasMicrotasks;
	            this.checkStable();
	        };
	        /**
	         * @param {?} hasMacrotasks
	         * @return {?}
	         */
	        NgZone.prototype.setHasMacrotask = function (hasMacrotasks) { this._hasPendingMacrotasks = hasMacrotasks; };
	        /**
	         * @param {?} error
	         * @return {?}
	         */
	        NgZone.prototype.triggerError = function (error) { this._onErrorEvents.emit(error); };
	        return NgZone;
	    }());
	
	    var AnimationQueue = (function () {
	        /**
	         * @param {?} _zone
	         */
	        function AnimationQueue(_zone) {
	            this._zone = _zone;
	            this.entries = [];
	        }
	        /**
	         * @param {?} player
	         * @return {?}
	         */
	        AnimationQueue.prototype.enqueue = function (player) { this.entries.push(player); };
	        /**
	         * @return {?}
	         */
	        AnimationQueue.prototype.flush = function () {
	            var _this = this;
	            // given that each animation player may set aside
	            // microtasks and rely on DOM-based events, this
	            // will cause Angular to run change detection after
	            // each request. This sidesteps the issue. If a user
	            // hooks into an animation via (@anim.start) or (@anim.done)
	            // then those methods will automatically trigger change
	            // detection by wrapping themselves inside of a zone
	            if (this.entries.length) {
	                this._zone.runOutsideAngular(function () {
	                    // this code is wrapped into a single promise such that the
	                    // onStart and onDone player callbacks are triggered outside
	                    // of the digest cycle of animations
	                    Promise.resolve(null).then(function () { return _this._triggerAnimations(); });
	                });
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AnimationQueue.prototype._triggerAnimations = function () {
	            NgZone.assertNotInAngularZone();
	            while (this.entries.length) {
	                var /** @type {?} */ player = this.entries.shift();
	                // in the event that an animation throws an error then we do
	                // not want to re-run animations on any previous animations
	                // if they have already been kicked off beforehand
	                if (!player.hasStarted()) {
	                    player.play();
	                }
	            }
	        };
	        AnimationQueue.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        AnimationQueue.ctorParameters = function () { return [
	            { type: NgZone, },
	        ]; };
	        return AnimationQueue;
	    }());
	
	    var DefaultIterableDifferFactory = (function () {
	        function DefaultIterableDifferFactory() {
	        }
	        /**
	         * @param {?} obj
	         * @return {?}
	         */
	        DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };
	        /**
	         * @param {?} cdRef
	         * @param {?=} trackByFn
	         * @return {?}
	         */
	        DefaultIterableDifferFactory.prototype.create = function (cdRef, trackByFn) {
	            return new DefaultIterableDiffer(trackByFn);
	        };
	        return DefaultIterableDifferFactory;
	    }());
	    var /** @type {?} */ trackByIdentity = function (index, item) { return item; };
	    /**
	     * @stable
	     */
	    var DefaultIterableDiffer = (function () {
	        /**
	         * @param {?=} _trackByFn
	         */
	        function DefaultIterableDiffer(_trackByFn) {
	            this._trackByFn = _trackByFn;
	            this._length = null;
	            this._collection = null;
	            this._linkedRecords = null;
	            this._unlinkedRecords = null;
	            this._previousItHead = null;
	            this._itHead = null;
	            this._itTail = null;
	            this._additionsHead = null;
	            this._additionsTail = null;
	            this._movesHead = null;
	            this._movesTail = null;
	            this._removalsHead = null;
	            this._removalsTail = null;
	            this._identityChangesHead = null;
	            this._identityChangesTail = null;
	            this._trackByFn = this._trackByFn || trackByIdentity;
	        }
	        Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._collection; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._length; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._itHead; record !== null; record = record._next) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachOperation = function (fn) {
	            var /** @type {?} */ nextIt = this._itHead;
	            var /** @type {?} */ nextRemove = this._removalsHead;
	            var /** @type {?} */ addRemoveOffset = 0;
	            var /** @type {?} */ moveOffsets = null;
	            while (nextIt || nextRemove) {
	                // Figure out which is the next record to process
	                // Order: remove, add, move
	                var /** @type {?} */ record = !nextRemove ||
	                    nextIt &&
	                        nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?
	                    nextIt :
	                    nextRemove;
	                var /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
	                var /** @type {?} */ currentIndex = record.currentIndex;
	                // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
	                if (record === nextRemove) {
	                    addRemoveOffset--;
	                    nextRemove = nextRemove._nextRemoved;
	                }
	                else {
	                    nextIt = nextIt._next;
	                    if (record.previousIndex == null) {
	                        addRemoveOffset++;
	                    }
	                    else {
	                        // INVARIANT:  currentIndex < previousIndex
	                        if (!moveOffsets)
	                            moveOffsets = [];
	                        var /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
	                        var /** @type {?} */ localCurrentIndex = currentIndex - addRemoveOffset;
	                        if (localMovePreviousIndex != localCurrentIndex) {
	                            for (var /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {
	                                var /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
	                                var /** @type {?} */ index = offset + i;
	                                if (localCurrentIndex <= index && index < localMovePreviousIndex) {
	                                    moveOffsets[i] = offset + 1;
	                                }
	                            }
	                            var /** @type {?} */ previousIndex = record.previousIndex;
	                            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
	                        }
	                    }
	                }
	                if (adjPreviousIndex !== currentIndex) {
	                    fn(record, adjPreviousIndex, currentIndex);
	                }
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._movesHead; record !== null; record = record._nextMoved) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} collection
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.diff = function (collection) {
	            if (isBlank(collection))
	                collection = [];
	            if (!isListLikeIterable(collection)) {
	                throw new Error("Error trying to diff '" + collection + "'");
	            }
	            if (this.check(collection)) {
	                return this;
	            }
	            else {
	                return null;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.onDestroy = function () { };
	        /**
	         * @param {?} collection
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.check = function (collection) {
	            var _this = this;
	            this._reset();
	            var /** @type {?} */ record = this._itHead;
	            var /** @type {?} */ mayBeDirty = false;
	            var /** @type {?} */ index;
	            var /** @type {?} */ item;
	            var /** @type {?} */ itemTrackBy;
	            if (Array.isArray(collection)) {
	                var /** @type {?} */ list = collection;
	                this._length = collection.length;
	                for (var /** @type {?} */ index_1 = 0; index_1 < this._length; index_1++) {
	                    item = list[index_1];
	                    itemTrackBy = this._trackByFn(index_1, item);
	                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                        record = this._mismatch(record, item, itemTrackBy, index_1);
	                        mayBeDirty = true;
	                    }
	                    else {
	                        if (mayBeDirty) {
	                            // TODO(misko): can we limit this to duplicates only?
	                            record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
	                        }
	                        if (!looseIdentical(record.item, item))
	                            this._addIdentityChange(record, item);
	                    }
	                    record = record._next;
	                }
	            }
	            else {
	                index = 0;
	                iterateListLike(collection, function (item /** TODO #9100 */) {
	                    itemTrackBy = _this._trackByFn(index, item);
	                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                        record = _this._mismatch(record, item, itemTrackBy, index);
	                        mayBeDirty = true;
	                    }
	                    else {
	                        if (mayBeDirty) {
	                            // TODO(misko): can we limit this to duplicates only?
	                            record = _this._verifyReinsertion(record, item, itemTrackBy, index);
	                        }
	                        if (!looseIdentical(record.item, item))
	                            _this._addIdentityChange(record, item);
	                    }
	                    record = record._next;
	                    index++;
	                });
	                this._length = index;
	            }
	            this._truncate(record);
	            this._collection = collection;
	            return this.isDirty;
	        };
	        Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._additionsHead !== null || this._movesHead !== null ||
	                    this._removalsHead !== null || this._identityChangesHead !== null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         *  Reset the state of the change objects to show no changes. This means set previousKey to
	          * currentKey, and clear all of the queues (additions, moves, removals).
	          * Set the previousIndexes of moved and added items to their currentIndexes
	          * Reset the list of additions, moves and removals
	          * *
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._reset = function () {
	            if (this.isDirty) {
	                var /** @type {?} */ record = void 0;
	                var /** @type {?} */ nextRecord = void 0;
	                for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
	                    record._nextPrevious = record._next;
	                }
	                for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                    record.previousIndex = record.currentIndex;
	                }
	                this._additionsHead = this._additionsTail = null;
	                for (record = this._movesHead; record !== null; record = nextRecord) {
	                    record.previousIndex = record.currentIndex;
	                    nextRecord = record._nextMoved;
	                }
	                this._movesHead = this._movesTail = null;
	                this._removalsHead = this._removalsTail = null;
	                this._identityChangesHead = this._identityChangesTail = null;
	            }
	        };
	        /**
	         *  This is the core function which handles differences between collections.
	          * *
	          * - `record` is the record which we saw at this position last time. If null then it is a new
	          * item.
	          * - `item` is the current item in the collection
	          * - `index` is the position of the item in the collection
	          * *
	         * @param {?} record
	         * @param {?} item
	         * @param {?} itemTrackBy
	         * @param {?} index
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
	            // The previous record after which we will append the current one.
	            var /** @type {?} */ previousRecord;
	            if (record === null) {
	                previousRecord = this._itTail;
	            }
	            else {
	                previousRecord = record._prev;
	                // Remove the record from the collection since we know it does not match the item.
	                this._remove(record);
	            }
	            // Attempt to see if we have seen the item before.
	            record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
	            if (record !== null) {
	                // We have seen this before, we need to move it forward in the collection.
	                // But first we need to check if identity changed, so we can update in view if necessary
	                if (!looseIdentical(record.item, item))
	                    this._addIdentityChange(record, item);
	                this._moveAfter(record, previousRecord, index);
	            }
	            else {
	                // Never seen it, check evicted list.
	                record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
	                if (record !== null) {
	                    // It is an item which we have evicted earlier: reinsert it back into the list.
	                    // But first we need to check if identity changed, so we can update in view if necessary
	                    if (!looseIdentical(record.item, item))
	                        this._addIdentityChange(record, item);
	                    this._reinsertAfter(record, previousRecord, index);
	                }
	                else {
	                    // It is a new item: add it.
	                    record =
	                        this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);
	                }
	            }
	            return record;
	        };
	        /**
	         *  This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
	          * *
	          * Use case: `[a, a]` => `[b, a, a]`
	          * *
	          * If we did not have this check then the insertion of `b` would:
	          * 1) evict first `a`
	          * 2) insert `b` at `0` index.
	          * 3) leave `a` at index `1` as is. <-- this is wrong!
	          * 3) reinsert `a` at index 2. <-- this is wrong!
	          * *
	          * The correct behavior is:
	          * 1) evict first `a`
	          * 2) insert `b` at `0` index.
	          * 3) reinsert `a` at index 1.
	          * 3) move `a` at from `1` to `2`.
	          * *
	          * *
	          * Double check that we have not evicted a duplicate item. We need to check if the item type may
	          * have already been removed:
	          * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
	          * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
	          * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
	          * at the end.
	          * *
	         * @param {?} record
	         * @param {?} item
	         * @param {?} itemTrackBy
	         * @param {?} index
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
	            var /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
	            if (reinsertRecord !== null) {
	                record = this._reinsertAfter(reinsertRecord, record._prev, index);
	            }
	            else if (record.currentIndex != index) {
	                record.currentIndex = index;
	                this._addToMoves(record, index);
	            }
	            return record;
	        };
	        /**
	         *  Get rid of any excess {@link CollectionChangeRecord}s from the previous collection
	          * *
	          * - `record` The first excess {@link CollectionChangeRecord}.
	          * *
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._truncate = function (record) {
	            // Anything after that needs to be removed;
	            while (record !== null) {
	                var /** @type {?} */ nextRecord = record._next;
	                this._addToRemovals(this._unlink(record));
	                record = nextRecord;
	            }
	            if (this._unlinkedRecords !== null) {
	                this._unlinkedRecords.clear();
	            }
	            if (this._additionsTail !== null) {
	                this._additionsTail._nextAdded = null;
	            }
	            if (this._movesTail !== null) {
	                this._movesTail._nextMoved = null;
	            }
	            if (this._itTail !== null) {
	                this._itTail._next = null;
	            }
	            if (this._removalsTail !== null) {
	                this._removalsTail._nextRemoved = null;
	            }
	            if (this._identityChangesTail !== null) {
	                this._identityChangesTail._nextIdentityChange = null;
	            }
	        };
	        /**
	         * @param {?} record
	         * @param {?} prevRecord
	         * @param {?} index
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
	            if (this._unlinkedRecords !== null) {
	                this._unlinkedRecords.remove(record);
	            }
	            var /** @type {?} */ prev = record._prevRemoved;
	            var /** @type {?} */ next = record._nextRemoved;
	            if (prev === null) {
	                this._removalsHead = next;
	            }
	            else {
	                prev._nextRemoved = next;
	            }
	            if (next === null) {
	                this._removalsTail = prev;
	            }
	            else {
	                next._prevRemoved = prev;
	            }
	            this._insertAfter(record, prevRecord, index);
	            this._addToMoves(record, index);
	            return record;
	        };
	        /**
	         * @param {?} record
	         * @param {?} prevRecord
	         * @param {?} index
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
	            this._unlink(record);
	            this._insertAfter(record, prevRecord, index);
	            this._addToMoves(record, index);
	            return record;
	        };
	        /**
	         * @param {?} record
	         * @param {?} prevRecord
	         * @param {?} index
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
	            this._insertAfter(record, prevRecord, index);
	            if (this._additionsTail === null) {
	                // todo(vicb)
	                // assert(this._additionsHead === null);
	                this._additionsTail = this._additionsHead = record;
	            }
	            else {
	                // todo(vicb)
	                // assert(_additionsTail._nextAdded === null);
	                // assert(record._nextAdded === null);
	                this._additionsTail = this._additionsTail._nextAdded = record;
	            }
	            return record;
	        };
	        /**
	         * @param {?} record
	         * @param {?} prevRecord
	         * @param {?} index
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
	            // todo(vicb)
	            // assert(record != prevRecord);
	            // assert(record._next === null);
	            // assert(record._prev === null);
	            var /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;
	            // todo(vicb)
	            // assert(next != record);
	            // assert(prevRecord != record);
	            record._next = next;
	            record._prev = prevRecord;
	            if (next === null) {
	                this._itTail = record;
	            }
	            else {
	                next._prev = record;
	            }
	            if (prevRecord === null) {
	                this._itHead = record;
	            }
	            else {
	                prevRecord._next = record;
	            }
	            if (this._linkedRecords === null) {
	                this._linkedRecords = new _DuplicateMap();
	            }
	            this._linkedRecords.put(record);
	            record.currentIndex = index;
	            return record;
	        };
	        /**
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._remove = function (record) {
	            return this._addToRemovals(this._unlink(record));
	        };
	        /**
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._unlink = function (record) {
	            if (this._linkedRecords !== null) {
	                this._linkedRecords.remove(record);
	            }
	            var /** @type {?} */ prev = record._prev;
	            var /** @type {?} */ next = record._next;
	            // todo(vicb)
	            // assert((record._prev = null) === null);
	            // assert((record._next = null) === null);
	            if (prev === null) {
	                this._itHead = next;
	            }
	            else {
	                prev._next = next;
	            }
	            if (next === null) {
	                this._itTail = prev;
	            }
	            else {
	                next._prev = prev;
	            }
	            return record;
	        };
	        /**
	         * @param {?} record
	         * @param {?} toIndex
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
	            // todo(vicb)
	            // assert(record._nextMoved === null);
	            if (record.previousIndex === toIndex) {
	                return record;
	            }
	            if (this._movesTail === null) {
	                // todo(vicb)
	                // assert(_movesHead === null);
	                this._movesTail = this._movesHead = record;
	            }
	            else {
	                // todo(vicb)
	                // assert(_movesTail._nextMoved === null);
	                this._movesTail = this._movesTail._nextMoved = record;
	            }
	            return record;
	        };
	        /**
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._addToRemovals = function (record) {
	            if (this._unlinkedRecords === null) {
	                this._unlinkedRecords = new _DuplicateMap();
	            }
	            this._unlinkedRecords.put(record);
	            record.currentIndex = null;
	            record._nextRemoved = null;
	            if (this._removalsTail === null) {
	                // todo(vicb)
	                // assert(_removalsHead === null);
	                this._removalsTail = this._removalsHead = record;
	                record._prevRemoved = null;
	            }
	            else {
	                // todo(vicb)
	                // assert(_removalsTail._nextRemoved === null);
	                // assert(record._nextRemoved === null);
	                record._prevRemoved = this._removalsTail;
	                this._removalsTail = this._removalsTail._nextRemoved = record;
	            }
	            return record;
	        };
	        /**
	         * @param {?} record
	         * @param {?} item
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
	            record.item = item;
	            if (this._identityChangesTail === null) {
	                this._identityChangesTail = this._identityChangesHead = record;
	            }
	            else {
	                this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
	            }
	            return record;
	        };
	        /**
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.toString = function () {
	            var /** @type {?} */ list = [];
	            this.forEachItem(function (record /** TODO #9100 */) { return list.push(record); });
	            var /** @type {?} */ previous = [];
	            this.forEachPreviousItem(function (record /** TODO #9100 */) { return previous.push(record); });
	            var /** @type {?} */ additions = [];
	            this.forEachAddedItem(function (record /** TODO #9100 */) { return additions.push(record); });
	            var /** @type {?} */ moves = [];
	            this.forEachMovedItem(function (record /** TODO #9100 */) { return moves.push(record); });
	            var /** @type {?} */ removals = [];
	            this.forEachRemovedItem(function (record /** TODO #9100 */) { return removals.push(record); });
	            var /** @type {?} */ identityChanges = [];
	            this.forEachIdentityChange(function (record /** TODO #9100 */) { return identityChanges.push(record); });
	            return 'collection: ' + list.join(', ') + '\n' +
	                'previous: ' + previous.join(', ') + '\n' +
	                'additions: ' + additions.join(', ') + '\n' +
	                'moves: ' + moves.join(', ') + '\n' +
	                'removals: ' + removals.join(', ') + '\n' +
	                'identityChanges: ' + identityChanges.join(', ') + '\n';
	        };
	        return DefaultIterableDiffer;
	    }());
	    /**
	     * @stable
	     */
	    var CollectionChangeRecord = (function () {
	        /**
	         * @param {?} item
	         * @param {?} trackById
	         */
	        function CollectionChangeRecord(item, trackById) {
	            this.item = item;
	            this.trackById = trackById;
	            this.currentIndex = null;
	            this.previousIndex = null;
	            /** @internal */
	            this._nextPrevious = null;
	            /** @internal */
	            this._prev = null;
	            /** @internal */
	            this._next = null;
	            /** @internal */
	            this._prevDup = null;
	            /** @internal */
	            this._nextDup = null;
	            /** @internal */
	            this._prevRemoved = null;
	            /** @internal */
	            this._nextRemoved = null;
	            /** @internal */
	            this._nextAdded = null;
	            /** @internal */
	            this._nextMoved = null;
	            /** @internal */
	            this._nextIdentityChange = null;
	        }
	        /**
	         * @return {?}
	         */
	        CollectionChangeRecord.prototype.toString = function () {
	            return this.previousIndex === this.currentIndex ? stringify(this.item) :
	                stringify(this.item) + '[' +
	                    stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
	        };
	        return CollectionChangeRecord;
	    }());
	    // A linked list of CollectionChangeRecords with the same CollectionChangeRecord.item
	    var _DuplicateItemRecordList = (function () {
	        function _DuplicateItemRecordList() {
	            /** @internal */
	            this._head = null;
	            /** @internal */
	            this._tail = null;
	        }
	        /**
	         *  Append the record to the list of duplicates.
	          * *
	          * Note: by design all records in the list of duplicates hold the same value in record.item.
	         * @param {?} record
	         * @return {?}
	         */
	        _DuplicateItemRecordList.prototype.add = function (record) {
	            if (this._head === null) {
	                this._head = this._tail = record;
	                record._nextDup = null;
	                record._prevDup = null;
	            }
	            else {
	                // todo(vicb)
	                // assert(record.item ==  _head.item ||
	                //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
	                this._tail._nextDup = record;
	                record._prevDup = this._tail;
	                record._nextDup = null;
	                this._tail = record;
	            }
	        };
	        /**
	         * @param {?} trackById
	         * @param {?} afterIndex
	         * @return {?}
	         */
	        _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {
	            var /** @type {?} */ record;
	            for (record = this._head; record !== null; record = record._nextDup) {
	                if ((afterIndex === null || afterIndex < record.currentIndex) &&
	                    looseIdentical(record.trackById, trackById)) {
	                    return record;
	                }
	            }
	            return null;
	        };
	        /**
	         *  Remove one {@link CollectionChangeRecord} from the list of duplicates.
	          * *
	          * Returns whether the list of duplicates is empty.
	         * @param {?} record
	         * @return {?}
	         */
	        _DuplicateItemRecordList.prototype.remove = function (record) {
	            // todo(vicb)
	            // assert(() {
	            //  // verify that the record being removed is in the list.
	            //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {
	            //    if (identical(cursor, record)) return true;
	            //  }
	            //  return false;
	            //});
	            var /** @type {?} */ prev = record._prevDup;
	            var /** @type {?} */ next = record._nextDup;
	            if (prev === null) {
	                this._head = next;
	            }
	            else {
	                prev._nextDup = next;
	            }
	            if (next === null) {
	                this._tail = prev;
	            }
	            else {
	                next._prevDup = prev;
	            }
	            return this._head === null;
	        };
	        return _DuplicateItemRecordList;
	    }());
	    var _DuplicateMap = (function () {
	        function _DuplicateMap() {
	            this.map = new Map();
	        }
	        /**
	         * @param {?} record
	         * @return {?}
	         */
	        _DuplicateMap.prototype.put = function (record) {
	            var /** @type {?} */ key = record.trackById;
	            var /** @type {?} */ duplicates = this.map.get(key);
	            if (!duplicates) {
	                duplicates = new _DuplicateItemRecordList();
	                this.map.set(key, duplicates);
	            }
	            duplicates.add(record);
	        };
	        /**
	         *  Retrieve the `value` using key. Because the CollectionChangeRecord value may be one which we
	          * have already iterated over, we use the afterIndex to pretend it is not there.
	          * *
	          * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
	          * have any more `a`s needs to return the last `a` not the first or second.
	         * @param {?} trackById
	         * @param {?=} afterIndex
	         * @return {?}
	         */
	        _DuplicateMap.prototype.get = function (trackById, afterIndex) {
	            if (afterIndex === void 0) { afterIndex = null; }
	            var /** @type {?} */ key = trackById;
	            var /** @type {?} */ recordList = this.map.get(key);
	            return recordList ? recordList.get(trackById, afterIndex) : null;
	        };
	        /**
	         *  Removes a {@link CollectionChangeRecord} from the list of duplicates.
	          * *
	          * The list of duplicates also is removed from the map if it gets empty.
	         * @param {?} record
	         * @return {?}
	         */
	        _DuplicateMap.prototype.remove = function (record) {
	            var /** @type {?} */ key = record.trackById;
	            var /** @type {?} */ recordList = this.map.get(key);
	            // Remove the list of duplicates when it gets empty
	            if (recordList.remove(record)) {
	                this.map.delete(key);
	            }
	            return record;
	        };
	        Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.map.size === 0; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        _DuplicateMap.prototype.clear = function () { this.map.clear(); };
	        /**
	         * @return {?}
	         */
	        _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + stringify(this.map) + ')'; };
	        return _DuplicateMap;
	    }());
	    /**
	     * @param {?} item
	     * @param {?} addRemoveOffset
	     * @param {?} moveOffsets
	     * @return {?}
	     */
	    function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
	        var /** @type {?} */ previousIndex = item.previousIndex;
	        if (previousIndex === null)
	            return previousIndex;
	        var /** @type {?} */ moveOffset = 0;
	        if (moveOffsets && previousIndex < moveOffsets.length) {
	            moveOffset = moveOffsets[previousIndex];
	        }
	        return previousIndex + addRemoveOffset + moveOffset;
	    }
	
	    var DefaultKeyValueDifferFactory = (function () {
	        function DefaultKeyValueDifferFactory() {
	        }
	        /**
	         * @param {?} obj
	         * @return {?}
	         */
	        DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };
	        /**
	         * @param {?} cdRef
	         * @return {?}
	         */
	        DefaultKeyValueDifferFactory.prototype.create = function (cdRef) { return new DefaultKeyValueDiffer(); };
	        return DefaultKeyValueDifferFactory;
	    }());
	    var DefaultKeyValueDiffer = (function () {
	        function DefaultKeyValueDiffer() {
	            this._records = new Map();
	            this._mapHead = null;
	            this._previousMapHead = null;
	            this._changesHead = null;
	            this._changesTail = null;
	            this._additionsHead = null;
	            this._additionsTail = null;
	            this._removalsHead = null;
	            this._removalsTail = null;
	        }
	        Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._additionsHead !== null || this._changesHead !== null ||
	                    this._removalsHead !== null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._mapHead; record !== null; record = record._next) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} map
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.diff = function (map) {
	            if (!map) {
	                map = new Map();
	            }
	            else if (!(map instanceof Map || isJsObject(map))) {
	                throw new Error("Error trying to diff '" + map + "'");
	            }
	            return this.check(map) ? this : null;
	        };
	        /**
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.onDestroy = function () { };
	        /**
	         * @param {?} map
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.check = function (map) {
	            var _this = this;
	            this._reset();
	            var /** @type {?} */ records = this._records;
	            var /** @type {?} */ oldSeqRecord = this._mapHead;
	            var /** @type {?} */ lastOldSeqRecord = null;
	            var /** @type {?} */ lastNewSeqRecord = null;
	            var /** @type {?} */ seqChanged = false;
	            this._forEach(map, function (value, key) {
	                var /** @type {?} */ newSeqRecord;
	                if (oldSeqRecord && key === oldSeqRecord.key) {
	                    newSeqRecord = oldSeqRecord;
	                    _this._maybeAddToChanges(newSeqRecord, value);
	                }
	                else {
	                    seqChanged = true;
	                    if (oldSeqRecord !== null) {
	                        _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
	                        _this._addToRemovals(oldSeqRecord);
	                    }
	                    if (records.has(key)) {
	                        newSeqRecord = records.get(key);
	                        _this._maybeAddToChanges(newSeqRecord, value);
	                    }
	                    else {
	                        newSeqRecord = new KeyValueChangeRecord(key);
	                        records.set(key, newSeqRecord);
	                        newSeqRecord.currentValue = value;
	                        _this._addToAdditions(newSeqRecord);
	                    }
	                }
	                if (seqChanged) {
	                    if (_this._isInRemovals(newSeqRecord)) {
	                        _this._removeFromRemovals(newSeqRecord);
	                    }
	                    if (lastNewSeqRecord == null) {
	                        _this._mapHead = newSeqRecord;
	                    }
	                    else {
	                        lastNewSeqRecord._next = newSeqRecord;
	                    }
	                }
	                lastOldSeqRecord = oldSeqRecord;
	                lastNewSeqRecord = newSeqRecord;
	                oldSeqRecord = oldSeqRecord && oldSeqRecord._next;
	            });
	            this._truncate(lastOldSeqRecord, oldSeqRecord);
	            return this.isDirty;
	        };
	        /**
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._reset = function () {
	            if (this.isDirty) {
	                var /** @type {?} */ record = void 0;
	                // Record the state of the mapping
	                for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
	                    record._nextPrevious = record._next;
	                }
	                for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                    record.previousValue = record.currentValue;
	                }
	                for (record = this._additionsHead; record != null; record = record._nextAdded) {
	                    record.previousValue = record.currentValue;
	                }
	                this._changesHead = this._changesTail = null;
	                this._additionsHead = this._additionsTail = null;
	                this._removalsHead = this._removalsTail = null;
	            }
	        };
	        /**
	         * @param {?} lastRecord
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {
	            while (record !== null) {
	                if (lastRecord === null) {
	                    this._mapHead = null;
	                }
	                else {
	                    lastRecord._next = null;
	                }
	                var /** @type {?} */ nextRecord = record._next;
	                this._addToRemovals(record);
	                lastRecord = record;
	                record = nextRecord;
	            }
	            for (var /** @type {?} */ rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
	                rec.previousValue = rec.currentValue;
	                rec.currentValue = null;
	                this._records.delete(rec.key);
	            }
	        };
	        /**
	         * @param {?} record
	         * @param {?} newValue
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {
	            if (!looseIdentical(newValue, record.currentValue)) {
	                record.previousValue = record.currentValue;
	                record.currentValue = newValue;
	                this._addToChanges(record);
	            }
	        };
	        /**
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {
	            return record === this._removalsHead || record._nextRemoved !== null ||
	                record._prevRemoved !== null;
	        };
	        /**
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {
	            if (this._removalsHead === null) {
	                this._removalsHead = this._removalsTail = record;
	            }
	            else {
	                this._removalsTail._nextRemoved = record;
	                record._prevRemoved = this._removalsTail;
	                this._removalsTail = record;
	            }
	        };
	        /**
	         * @param {?} prev
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {
	            var /** @type {?} */ next = record._next;
	            if (prev === null) {
	                this._mapHead = next;
	            }
	            else {
	                prev._next = next;
	            }
	            record._next = null;
	        };
	        /**
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {
	            var /** @type {?} */ prev = record._prevRemoved;
	            var /** @type {?} */ next = record._nextRemoved;
	            if (prev === null) {
	                this._removalsHead = next;
	            }
	            else {
	                prev._nextRemoved = next;
	            }
	            if (next === null) {
	                this._removalsTail = prev;
	            }
	            else {
	                next._prevRemoved = prev;
	            }
	            record._prevRemoved = record._nextRemoved = null;
	        };
	        /**
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
	            if (this._additionsHead === null) {
	                this._additionsHead = this._additionsTail = record;
	            }
	            else {
	                this._additionsTail._nextAdded = record;
	                this._additionsTail = record;
	            }
	        };
	        /**
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
	            if (this._changesHead === null) {
	                this._changesHead = this._changesTail = record;
	            }
	            else {
	                this._changesTail._nextChanged = record;
	                this._changesTail = record;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.toString = function () {
	            var /** @type {?} */ items = [];
	            var /** @type {?} */ previous = [];
	            var /** @type {?} */ changes = [];
	            var /** @type {?} */ additions = [];
	            var /** @type {?} */ removals = [];
	            var /** @type {?} */ record;
	            for (record = this._mapHead; record !== null; record = record._next) {
	                items.push(stringify(record));
	            }
	            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	                previous.push(stringify(record));
	            }
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                changes.push(stringify(record));
	            }
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                additions.push(stringify(record));
	            }
	            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	                removals.push(stringify(record));
	            }
	            return 'map: ' + items.join(', ') + '\n' +
	                'previous: ' + previous.join(', ') + '\n' +
	                'additions: ' + additions.join(', ') + '\n' +
	                'changes: ' + changes.join(', ') + '\n' +
	                'removals: ' + removals.join(', ') + '\n';
	        };
	        /**
	         * @param {?} obj
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
	            if (obj instanceof Map) {
	                obj.forEach(fn);
	            }
	            else {
	                Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });
	            }
	        };
	        return DefaultKeyValueDiffer;
	    }());
	    /**
	     * @stable
	     */
	    var KeyValueChangeRecord = (function () {
	        /**
	         * @param {?} key
	         */
	        function KeyValueChangeRecord(key) {
	            this.key = key;
	            this.previousValue = null;
	            this.currentValue = null;
	            /** @internal */
	            this._nextPrevious = null;
	            /** @internal */
	            this._next = null;
	            /** @internal */
	            this._nextAdded = null;
	            /** @internal */
	            this._nextRemoved = null;
	            /** @internal */
	            this._prevRemoved = null;
	            /** @internal */
	            this._nextChanged = null;
	        }
	        /**
	         * @return {?}
	         */
	        KeyValueChangeRecord.prototype.toString = function () {
	            return looseIdentical(this.previousValue, this.currentValue) ?
	                stringify(this.key) :
	                (stringify(this.key) + '[' + stringify(this.previousValue) + '->' +
	                    stringify(this.currentValue) + ']');
	        };
	        return KeyValueChangeRecord;
	    }());
	
	    /**
	     *  A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
	     */
	    var IterableDiffers = (function () {
	        /**
	         * @param {?} factories
	         */
	        function IterableDiffers(factories) {
	            this.factories = factories;
	        }
	        /**
	         * @param {?} factories
	         * @param {?=} parent
	         * @return {?}
	         */
	        IterableDiffers.create = function (factories, parent) {
	            if (isPresent(parent)) {
	                var /** @type {?} */ copied = parent.factories.slice();
	                factories = factories.concat(copied);
	                return new IterableDiffers(factories);
	            }
	            else {
	                return new IterableDiffers(factories);
	            }
	        };
	        /**
	         *  Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
	          * inherited {@link IterableDiffers} instance with the provided factories and return a new
	          * {@link IterableDiffers} instance.
	          * *
	          * The following example shows how to extend an existing list of factories,
	          * which will only be applied to the injector for this component and its children.
	          * This step is all that's required to make a new {@link IterableDiffer} available.
	          * *
	          * ### Example
	          * *
	          * ```
	          * viewProviders: [
	          * IterableDiffers.extend([new ImmutableListDiffer()])
	          * ]
	          * })
	          * ```
	         * @param {?} factories
	         * @return {?}
	         */
	        IterableDiffers.extend = function (factories) {
	            return {
	                provide: IterableDiffers,
	                useFactory: function (parent) {
	                    if (!parent) {
	                        // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
	                        // to
	                        // bootstrap(), which would override default pipes instead of extending them.
	                        throw new Error('Cannot extend IterableDiffers without a parent injector');
	                    }
	                    return IterableDiffers.create(factories, parent);
	                },
	                // Dependency technically isn't optional, but we can provide a better error message this way.
	                deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
	            };
	        };
	        /**
	         * @param {?} iterable
	         * @return {?}
	         */
	        IterableDiffers.prototype.find = function (iterable) {
	            var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(iterable); });
	            if (isPresent(factory)) {
	                return factory;
	            }
	            else {
	                throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
	            }
	        };
	        return IterableDiffers;
	    }());
	
	    /**
	     *  A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
	     */
	    var KeyValueDiffers = (function () {
	        /**
	         * @param {?} factories
	         */
	        function KeyValueDiffers(factories) {
	            this.factories = factories;
	        }
	        /**
	         * @param {?} factories
	         * @param {?=} parent
	         * @return {?}
	         */
	        KeyValueDiffers.create = function (factories, parent) {
	            if (isPresent(parent)) {
	                var /** @type {?} */ copied = parent.factories.slice();
	                factories = factories.concat(copied);
	                return new KeyValueDiffers(factories);
	            }
	            else {
	                return new KeyValueDiffers(factories);
	            }
	        };
	        /**
	         *  Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
	          * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
	          * {@link KeyValueDiffers} instance.
	          * *
	          * The following example shows how to extend an existing list of factories,
	          * which will only be applied to the injector for this component and its children.
	          * This step is all that's required to make a new {@link KeyValueDiffer} available.
	          * *
	          * ### Example
	          * *
	          * ```
	          * viewProviders: [
	          * KeyValueDiffers.extend([new ImmutableMapDiffer()])
	          * ]
	          * })
	          * ```
	         * @param {?} factories
	         * @return {?}
	         */
	        KeyValueDiffers.extend = function (factories) {
	            return {
	                provide: KeyValueDiffers,
	                useFactory: function (parent) {
	                    if (!parent) {
	                        // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
	                        // to
	                        // bootstrap(), which would override default pipes instead of extending them.
	                        throw new Error('Cannot extend KeyValueDiffers without a parent injector');
	                    }
	                    return KeyValueDiffers.create(factories, parent);
	                },
	                // Dependency technically isn't optional, but we can provide a better error message this way.
	                deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
	            };
	        };
	        /**
	         * @param {?} kv
	         * @return {?}
	         */
	        KeyValueDiffers.prototype.find = function (kv) {
	            var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(kv); });
	            if (isPresent(factory)) {
	                return factory;
	            }
	            else {
	                throw new Error("Cannot find a differ supporting object '" + kv + "'");
	            }
	        };
	        return KeyValueDiffers;
	    }());
	
	    var /** @type {?} */ UNINITIALIZED = {
	        toString: function () { return 'CD_INIT_VALUE'; }
	    };
	    /**
	     * @param {?} a
	     * @param {?} b
	     * @return {?}
	     */
	    function devModeEqual(a, b) {
	        if (isListLikeIterable(a) && isListLikeIterable(b)) {
	            return areIterablesEqual(a, b, devModeEqual);
	        }
	        else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {
	            return true;
	        }
	        else {
	            return looseIdentical(a, b);
	        }
	    }
	    /**
	     *  Indicates that the result of a {@link Pipe} transformation has changed even though the
	      * reference
	      * has not changed.
	      * *
	      * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
	      * *
	      * Example:
	      * *
	      * ```
	      * if (this._latestValue === this._latestReturnedValue) {
	      * return this._latestReturnedValue;
	      * } else {
	      * this._latestReturnedValue = this._latestValue;
	      * return WrappedValue.wrap(this._latestValue); // this will force update
	      * }
	      * ```
	     */
	    var WrappedValue = (function () {
	        /**
	         * @param {?} wrapped
	         */
	        function WrappedValue(wrapped) {
	            this.wrapped = wrapped;
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        WrappedValue.wrap = function (value) { return new WrappedValue(value); };
	        return WrappedValue;
	    }());
	    /**
	     *  Helper class for unwrapping WrappedValue s
	     */
	    var ValueUnwrapper = (function () {
	        function ValueUnwrapper() {
	            this.hasWrappedValue = false;
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        ValueUnwrapper.prototype.unwrap = function (value) {
	            if (value instanceof WrappedValue) {
	                this.hasWrappedValue = true;
	                return value.wrapped;
	            }
	            return value;
	        };
	        /**
	         * @return {?}
	         */
	        ValueUnwrapper.prototype.reset = function () { this.hasWrappedValue = false; };
	        return ValueUnwrapper;
	    }());
	    /**
	     *  Represents a basic change from a previous to a new value.
	     */
	    var SimpleChange = (function () {
	        /**
	         * @param {?} previousValue
	         * @param {?} currentValue
	         */
	        function SimpleChange(previousValue, currentValue) {
	            this.previousValue = previousValue;
	            this.currentValue = currentValue;
	        }
	        /**
	         *  Check whether the new value is the first value assigned.
	         * @return {?}
	         */
	        SimpleChange.prototype.isFirstChange = function () { return this.previousValue === UNINITIALIZED; };
	        return SimpleChange;
	    }());
	
	    /**
	     * @abstract
	     */
	    var ChangeDetectorRef = (function () {
	        function ChangeDetectorRef() {
	        }
	        /**
	         *  Marks all {@link ChangeDetectionStrategy#OnPush} ancestors as to be checked.
	          * *
	          * <!-- TODO: Add a link to a chapter on OnPush components -->
	          * *
	          * ### Example ([live demo](http://plnkr.co/edit/GC512b?p=preview))
	          * *
	          * ```typescript
	          * selector: 'cmp',
	          * changeDetection: ChangeDetectionStrategy.OnPush,
	          * template: `Number of ticks: {{numberOfTicks}}`
	          * })
	          * class Cmp {
	          * numberOfTicks = 0;
	          * *
	          * constructor(ref: ChangeDetectorRef) {
	          * setInterval(() => {
	          * this.numberOfTicks ++
	          * // the following is required, otherwise the view will not be updated
	          * this.ref.markForCheck();
	          * }, 1000);
	          * }
	          * }
	          * *
	          * selector: 'app',
	          * changeDetection: ChangeDetectionStrategy.OnPush,
	          * template: `
	          * <cmp><cmp>
	          * `,
	          * })
	          * class App {
	          * }
	          * ```
	         * @abstract
	         * @return {?}
	         */
	        ChangeDetectorRef.prototype.markForCheck = function () { };
	        /**
	         *  Detaches the change detector from the change detector tree.
	          * *
	          * The detached change detector will not be checked until it is reattached.
	          * *
	          * This can also be used in combination with {@link ChangeDetectorRef#detectChanges} to implement
	          * local change
	          * detection checks.
	          * *
	          * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	          * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
	          * *
	          * ### Example
	          * *
	          * The following example defines a component with a large list of readonly data.
	          * Imagine the data changes constantly, many times per second. For performance reasons,
	          * we want to check and update the list every five seconds. We can do that by detaching
	          * the component's change detector and doing a local check every five seconds.
	          * *
	          * ```typescript
	          * class DataProvider {
	          * // in a real application the returned data will be different every time
	          * get data() {
	          * return [1,2,3,4,5];
	          * }
	          * }
	          * *
	          * selector: 'giant-list',
	          * template: `
	          * <li *ngFor="let d of dataProvider.data">Data {{d}}</lig>
	          * `,
	          * })
	          * class GiantList {
	          * constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {
	          * ref.detach();
	          * setInterval(() => {
	          * this.ref.detectChanges();
	          * }, 5000);
	          * }
	          * }
	          * *
	          * selector: 'app',
	          * providers: [DataProvider],
	          * template: `
	          * <giant-list><giant-list>
	          * `,
	          * })
	          * class App {
	          * }
	          * ```
	         * @abstract
	         * @return {?}
	         */
	        ChangeDetectorRef.prototype.detach = function () { };
	        /**
	         *  Checks the change detector and its children.
	          * *
	          * This can also be used in combination with {@link ChangeDetectorRef#detach} to implement local
	          * change detection
	          * checks.
	          * *
	          * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	          * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
	          * *
	          * ### Example
	          * *
	          * The following example defines a component with a large list of readonly data.
	          * Imagine, the data changes constantly, many times per second. For performance reasons,
	          * we want to check and update the list every five seconds.
	          * *
	          * We can do that by detaching the component's change detector and doing a local change detection
	          * check
	          * every five seconds.
	          * *
	          * See {@link ChangeDetectorRef#detach} for more information.
	         * @abstract
	         * @return {?}
	         */
	        ChangeDetectorRef.prototype.detectChanges = function () { };
	        /**
	         *  Checks the change detector and its children, and throws if any changes are detected.
	          * *
	          * This is used in development mode to verify that running change detection doesn't introduce
	          * other changes.
	         * @abstract
	         * @return {?}
	         */
	        ChangeDetectorRef.prototype.checkNoChanges = function () { };
	        /**
	         *  Reattach the change detector to the change detector tree.
	          * *
	          * This also marks OnPush ancestors as to be checked. This reattached change detector will be
	          * checked during the next change detection run.
	          * *
	          * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	          * *
	          * ### Example ([live demo](http://plnkr.co/edit/aUhZha?p=preview))
	          * *
	          * The following example creates a component displaying `live` data. The component will detach
	          * its change detector from the main change detector tree when the component's live property
	          * is set to false.
	          * *
	          * ```typescript
	          * class DataProvider {
	          * data = 1;
	          * *
	          * constructor() {
	          * setInterval(() => {
	          * this.data = this.data * 2;
	          * }, 500);
	          * }
	          * }
	          * *
	          * selector: 'live-data',
	          * inputs: ['live'],
	          * template: 'Data: {{dataProvider.data}}'
	          * })
	          * class LiveData {
	          * constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {}
	          * *
	          * set live(value) {
	          * if (value)
	          * this.ref.reattach();
	          * else
	          * this.ref.detach();
	          * }
	          * }
	          * *
	          * selector: 'app',
	          * providers: [DataProvider],
	          * template: `
	          * Live Update: <input type="checkbox" [(ngModel)]="live">
	          * <live-data [live]="live"><live-data>
	          * `,
	          * })
	          * class App {
	          * live = true;
	          * }
	          * ```
	         * @abstract
	         * @return {?}
	         */
	        ChangeDetectorRef.prototype.reattach = function () { };
	        return ChangeDetectorRef;
	    }());
	
	    /**
	     * Structural diffing for `Object`s and `Map`s.
	     */
	    var /** @type {?} */ keyValDiff = [new DefaultKeyValueDifferFactory()];
	    /**
	     * Structural diffing for `Iterable` types such as `Array`s.
	     */
	    var /** @type {?} */ iterableDiff = [new DefaultIterableDifferFactory()];
	    var /** @type {?} */ defaultIterableDiffers = new IterableDiffers(iterableDiff);
	    var /** @type {?} */ defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
	
	    /**
	     * @experimental
	     */
	    // TODO (matsko): add typing for the animation function
	    var RenderComponentType = (function () {
	        /**
	         * @param {?} id
	         * @param {?} templateUrl
	         * @param {?} slotCount
	         * @param {?} encapsulation
	         * @param {?} styles
	         * @param {?} animations
	         */
	        function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
	            this.id = id;
	            this.templateUrl = templateUrl;
	            this.slotCount = slotCount;
	            this.encapsulation = encapsulation;
	            this.styles = styles;
	            this.animations = animations;
	        }
	        return RenderComponentType;
	    }());
	    /**
	     * @abstract
	     */
	    var RenderDebugInfo = (function () {
	        function RenderDebugInfo() {
	        }
	        Object.defineProperty(RenderDebugInfo.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "component", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "providerTokens", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "references", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "context", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "source", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        return RenderDebugInfo;
	    }());
	    /**
	     * @abstract
	     */
	    var Renderer = (function () {
	        function Renderer() {
	        }
	        /**
	         * @abstract
	         * @param {?} selectorOrNode
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };
	        /**
	         * @abstract
	         * @param {?} parentElement
	         * @param {?} name
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };
	        /**
	         * @abstract
	         * @param {?} hostElement
	         * @return {?}
	         */
	        Renderer.prototype.createViewRoot = function (hostElement) { };
	        /**
	         * @abstract
	         * @param {?} parentElement
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };
	        /**
	         * @abstract
	         * @param {?} parentElement
	         * @param {?} value
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        Renderer.prototype.createText = function (parentElement, value, debugInfo) { };
	        /**
	         * @abstract
	         * @param {?} parentElement
	         * @param {?} nodes
	         * @return {?}
	         */
	        Renderer.prototype.projectNodes = function (parentElement, nodes) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @param {?} viewRootNodes
	         * @return {?}
	         */
	        Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };
	        /**
	         * @abstract
	         * @param {?} viewRootNodes
	         * @return {?}
	         */
	        Renderer.prototype.detachView = function (viewRootNodes) { };
	        /**
	         * @abstract
	         * @param {?} hostElement
	         * @param {?} viewAllNodes
	         * @return {?}
	         */
	        Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };
	        /**
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} name
	         * @param {?} callback
	         * @return {?}
	         */
	        Renderer.prototype.listen = function (renderElement, name, callback) { };
	        /**
	         * @abstract
	         * @param {?} target
	         * @param {?} name
	         * @param {?} callback
	         * @return {?}
	         */
	        Renderer.prototype.listenGlobal = function (target, name, callback) { };
	        /**
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} propertyName
	         * @param {?} propertyValue
	         * @return {?}
	         */
	        Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };
	        /**
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} attributeName
	         * @param {?} attributeValue
	         * @return {?}
	         */
	        Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };
	        /**
	         *  Used only in debug mode to serialize property changes to dom nodes as attributes.
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} propertyName
	         * @param {?} propertyValue
	         * @return {?}
	         */
	        Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };
	        /**
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} className
	         * @param {?} isAdd
	         * @return {?}
	         */
	        Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };
	        /**
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} styleName
	         * @param {?} styleValue
	         * @return {?}
	         */
	        Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };
	        /**
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} methodName
	         * @param {?=} args
	         * @return {?}
	         */
	        Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };
	        /**
	         * @abstract
	         * @param {?} renderNode
	         * @param {?} text
	         * @return {?}
	         */
	        Renderer.prototype.setText = function (renderNode, text) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} startingStyles
	         * @param {?} keyframes
	         * @param {?} duration
	         * @param {?} delay
	         * @param {?} easing
	         * @param {?=} previousPlayers
	         * @return {?}
	         */
	        Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };
	        return Renderer;
	    }());
	    /**
	     *  Injectable service that provides a low-level interface for modifying the UI.
	      * *
	      * Use this service to bypass Angular's templating and make custom UI changes that can't be
	      * expressed declaratively. For example if you need to set a property or an attribute whose name is
	      * not statically known, use {@link #setElementProperty} or {@link #setElementAttribute}
	      * respectively.
	      * *
	      * If you are implementing a custom renderer, you must implement this interface.
	      * *
	      * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
	     * @abstract
	     */
	    var RootRenderer = (function () {
	        function RootRenderer() {
	        }
	        /**
	         * @abstract
	         * @param {?} componentType
	         * @return {?}
	         */
	        RootRenderer.prototype.renderComponent = function (componentType) { };
	        return RootRenderer;
	    }());
	
	    var SecurityContext = {};
	    SecurityContext.NONE = 0;
	    SecurityContext.HTML = 1;
	    SecurityContext.STYLE = 2;
	    SecurityContext.SCRIPT = 3;
	    SecurityContext.URL = 4;
	    SecurityContext.RESOURCE_URL = 5;
	    SecurityContext[SecurityContext.NONE] = "NONE";
	    SecurityContext[SecurityContext.HTML] = "HTML";
	    SecurityContext[SecurityContext.STYLE] = "STYLE";
	    SecurityContext[SecurityContext.SCRIPT] = "SCRIPT";
	    SecurityContext[SecurityContext.URL] = "URL";
	    SecurityContext[SecurityContext.RESOURCE_URL] = "RESOURCE_URL";
	    /**
	     *  Sanitizer is used by the views to sanitize potentially dangerous values.
	      * *
	     * @abstract
	     */
	    var Sanitizer = (function () {
	        function Sanitizer() {
	        }
	        /**
	         * @abstract
	         * @param {?} context
	         * @param {?} value
	         * @return {?}
	         */
	        Sanitizer.prototype.sanitize = function (context, value) { };
	        return Sanitizer;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$7 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     *  An error thrown if application changes model breaking the top-down data flow.
	      * *
	      * This exception is only thrown in dev mode.
	      * *
	      * <!-- TODO: Add a link once the dev mode option is configurable -->
	      * *
	      * ### Example
	      * *
	      * ```typescript
	      * selector: 'parent',
	      * template: '<child [prop]="parentProp"></child>',
	      * })
	      * class Parent {
	      * parentProp = 'init';
	      * }
	      * *
	      * class Child {
	      * constructor(public parent: Parent) {}
	      * *
	      * set prop(v) {
	      * // this updates the parent property, which is disallowed during change detection
	      * // this will result in ExpressionChangedAfterItHasBeenCheckedError
	      * this.parent.parentProp = 'updated';
	      * }
	      * }
	      * ```
	     */
	    var ExpressionChangedAfterItHasBeenCheckedError = (function (_super) {
	        __extends$7(ExpressionChangedAfterItHasBeenCheckedError, _super);
	        /**
	         * @param {?} oldValue
	         * @param {?} currValue
	         */
	        function ExpressionChangedAfterItHasBeenCheckedError(oldValue, currValue) {
	            var msg = "Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
	            if (oldValue === UNINITIALIZED) {
	                msg +=
	                    " It seems like the view has been created after its parent and its children have been dirty checked." +
	                        " Has it been created in a change detection hook ?";
	            }
	            _super.call(this, msg);
	        }
	        return ExpressionChangedAfterItHasBeenCheckedError;
	    }(BaseError));
	    /**
	     *  Thrown when an exception was raised during view creation, change detection or destruction.
	      * *
	      * This error wraps the original exception to attach additional contextual information that can
	      * be useful for debugging.
	     */
	    var ViewWrappedError = (function (_super) {
	        __extends$7(ViewWrappedError, _super);
	        /**
	         * @param {?} originalError
	         * @param {?} context
	         */
	        function ViewWrappedError(originalError, context) {
	            _super.call(this, "Error in " + context.source, originalError);
	            this.context = context;
	        }
	        return ViewWrappedError;
	    }(WrappedError));
	    /**
	     *  Thrown when a destroyed view is used.
	      * *
	      * This error indicates a bug in the framework.
	      * *
	      * This is an internal Angular error.
	     */
	    var ViewDestroyedError = (function (_super) {
	        __extends$7(ViewDestroyedError, _super);
	        /**
	         * @param {?} details
	         */
	        function ViewDestroyedError(details) {
	            _super.call(this, "Attempt to use a destroyed view: " + details);
	        }
	        return ViewDestroyedError;
	    }(BaseError));
	
	    var ViewUtils = (function () {
	        /**
	         * @param {?} _renderer
	         * @param {?} sanitizer
	         * @param {?} animationQueue
	         */
	        function ViewUtils(_renderer, sanitizer, animationQueue) {
	            this._renderer = _renderer;
	            this.animationQueue = animationQueue;
	            this._nextCompTypeId = 0;
	            this.sanitizer = sanitizer;
	        }
	        /**
	         * @param {?} renderComponentType
	         * @return {?}
	         */
	        ViewUtils.prototype.renderComponent = function (renderComponentType) {
	            return this._renderer.renderComponent(renderComponentType);
	        };
	        ViewUtils.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        ViewUtils.ctorParameters = function () { return [
	            { type: RootRenderer, },
	            { type: Sanitizer, },
	            { type: AnimationQueue, },
	        ]; };
	        return ViewUtils;
	    }());
	    var /** @type {?} */ nextRenderComponentTypeId = 0;
	    /**
	     * @param {?} templateUrl
	     * @param {?} slotCount
	     * @param {?} encapsulation
	     * @param {?} styles
	     * @param {?} animations
	     * @return {?}
	     */
	    function createRenderComponentType(templateUrl, slotCount, encapsulation, styles, animations) {
	        return new RenderComponentType("" + nextRenderComponentTypeId++, templateUrl, slotCount, encapsulation, styles, animations);
	    }
	    /**
	     * @param {?} e
	     * @param {?} array
	     * @return {?}
	     */
	    function addToArray(e, array) {
	        array.push(e);
	    }
	    /**
	     * @param {?} valueCount
	     * @param {?} constAndInterp
	     * @return {?}
	     */
	    function interpolate(valueCount, constAndInterp) {
	        var /** @type {?} */ result = '';
	        for (var /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {
	            result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
	        }
	        return result + constAndInterp[valueCount * 2];
	    }
	    /**
	     * @param {?} valueCount
	     * @param {?} c0
	     * @param {?} a1
	     * @param {?} c1
	     * @param {?=} a2
	     * @param {?=} c2
	     * @param {?=} a3
	     * @param {?=} c3
	     * @param {?=} a4
	     * @param {?=} c4
	     * @param {?=} a5
	     * @param {?=} c5
	     * @param {?=} a6
	     * @param {?=} c6
	     * @param {?=} a7
	     * @param {?=} c7
	     * @param {?=} a8
	     * @param {?=} c8
	     * @param {?=} a9
	     * @param {?=} c9
	     * @return {?}
	     */
	    function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
	        switch (valueCount) {
	            case 1:
	                return c0 + _toStringWithNull(a1) + c1;
	            case 2:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
	            case 3:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3;
	            case 4:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4;
	            case 5:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
	            case 6:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
	            case 7:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                    c6 + _toStringWithNull(a7) + c7;
	            case 8:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
	            case 9:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
	            default:
	                throw new Error("Does not support more than 9 expressions");
	        }
	    }
	    /**
	     * @param {?} v
	     * @return {?}
	     */
	    function _toStringWithNull(v) {
	        return v != null ? v.toString() : '';
	    }
	    /**
	     * @param {?} throwOnChange
	     * @param {?} oldValue
	     * @param {?} newValue
	     * @return {?}
	     */
	    function checkBinding(throwOnChange, oldValue, newValue) {
	        if (throwOnChange) {
	            if (!devModeEqual(oldValue, newValue)) {
	                throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue);
	            }
	            return false;
	        }
	        else {
	            return !looseIdentical(oldValue, newValue);
	        }
	    }
	    /**
	     * @param {?} input
	     * @param {?} value
	     * @return {?}
	     */
	    function castByValue(input, value) {
	        return (input);
	    }
	    var /** @type {?} */ EMPTY_ARRAY = [];
	    var /** @type {?} */ EMPTY_MAP = {};
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy1(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0 = UNINITIALIZED;
	        return function (p0) {
	            if (!looseIdentical(v0, p0)) {
	                v0 = p0;
	                result = fn(p0);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy2(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0 = UNINITIALIZED;
	        var /** @type {?} */ v1 = UNINITIALIZED;
	        return function (p0, p1) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {
	                v0 = p0;
	                v1 = p1;
	                result = fn(p0, p1);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy3(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0 = UNINITIALIZED;
	        var /** @type {?} */ v1 = UNINITIALIZED;
	        var /** @type {?} */ v2 = UNINITIALIZED;
	        return function (p0, p1, p2) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                result = fn(p0, p1, p2);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy4(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3;
	        v0 = v1 = v2 = v3 = UNINITIALIZED;
	        return function (p0, p1, p2, p3) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                result = fn(p0, p1, p2, p3);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy5(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4;
	        v0 = v1 = v2 = v3 = v4 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                result = fn(p0, p1, p2, p3, p4);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy6(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5;
	        v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                result = fn(p0, p1, p2, p3, p4, p5);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy7(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                result = fn(p0, p1, p2, p3, p4, p5, p6);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy8(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6, p7) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                v7 = p7;
	                result = fn(p0, p1, p2, p3, p4, p5, p6, p7);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy9(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7, /** @type {?} */ v8;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                v7 = p7;
	                v8 = p8;
	                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy10(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7, /** @type {?} */ v8, /** @type {?} */ v9;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) ||
	                !looseIdentical(v9, p9)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                v7 = p7;
	                v8 = p8;
	                v9 = p9;
	                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} renderer
	     * @param {?} el
	     * @param {?} changes
	     * @return {?}
	     */
	    function setBindingDebugInfoForChanges(renderer, el, changes) {
	        Object.keys(changes).forEach(function (propName) {
	            setBindingDebugInfo(renderer, el, propName, changes[propName].currentValue);
	        });
	    }
	    /**
	     * @param {?} renderer
	     * @param {?} el
	     * @param {?} propName
	     * @param {?} value
	     * @return {?}
	     */
	    function setBindingDebugInfo(renderer, el, propName, value) {
	        try {
	            renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), value ? value.toString() : null);
	        }
	        catch (e) {
	            renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), '[ERROR] Exception while trying to serialize the value');
	        }
	    }
	    var /** @type {?} */ CAMEL_CASE_REGEXP = /([A-Z])/g;
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    function camelCaseToDashCase(input) {
	        return input.replace(CAMEL_CASE_REGEXP, function () {
	            var m = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                m[_i - 0] = arguments[_i];
	            }
	            return '-' + m[1].toLowerCase();
	        });
	    }
	    /**
	     * @param {?} renderer
	     * @param {?} parentElement
	     * @param {?} name
	     * @param {?} attrs
	     * @param {?=} debugInfo
	     * @return {?}
	     */
	    function createRenderElement(renderer, parentElement, name, attrs, debugInfo) {
	        var /** @type {?} */ el = renderer.createElement(parentElement, name, debugInfo);
	        for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
	            renderer.setElementAttribute(el, attrs.get(i), attrs.get(i + 1));
	        }
	        return el;
	    }
	    /**
	     * @param {?} renderer
	     * @param {?} elementName
	     * @param {?} attrs
	     * @param {?} rootSelectorOrNode
	     * @param {?=} debugInfo
	     * @return {?}
	     */
	    function selectOrCreateRenderHostElement(renderer, elementName, attrs, rootSelectorOrNode, debugInfo) {
	        var /** @type {?} */ hostElement;
	        if (isPresent(rootSelectorOrNode)) {
	            hostElement = renderer.selectRootElement(rootSelectorOrNode, debugInfo);
	            for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
	                renderer.setElementAttribute(hostElement, attrs.get(i), attrs.get(i + 1));
	            }
	            renderer.setElementAttribute(hostElement, 'ng-version', VERSION.full);
	        }
	        else {
	            hostElement = createRenderElement(renderer, null, elementName, attrs, debugInfo);
	        }
	        return hostElement;
	    }
	    /**
	     * @param {?} view
	     * @param {?} element
	     * @param {?} eventNamesAndTargets
	     * @param {?} listener
	     * @return {?}
	     */
	    function subscribeToRenderElement(view, element, eventNamesAndTargets, listener) {
	        var /** @type {?} */ disposables = createEmptyInlineArray(eventNamesAndTargets.length / 2);
	        for (var /** @type {?} */ i = 0; i < eventNamesAndTargets.length; i += 2) {
	            var /** @type {?} */ eventName = eventNamesAndTargets.get(i);
	            var /** @type {?} */ eventTarget = eventNamesAndTargets.get(i + 1);
	            var /** @type {?} */ disposable = void 0;
	            if (eventTarget) {
	                disposable = view.renderer.listenGlobal(eventTarget, eventName, listener.bind(view, eventTarget + ":" + eventName));
	            }
	            else {
	                disposable = view.renderer.listen(element, eventName, listener.bind(view, eventName));
	            }
	            disposables.set(i / 2, disposable);
	        }
	        return disposeInlineArray.bind(null, disposables);
	    }
	    /**
	     * @param {?} disposables
	     * @return {?}
	     */
	    function disposeInlineArray(disposables) {
	        for (var /** @type {?} */ i = 0; i < disposables.length; i++) {
	            disposables.get(i)();
	        }
	    }
	    /**
	     * @return {?}
	     */
	    function noop() { }
	    /**
	     * @param {?} length
	     * @return {?}
	     */
	    function createEmptyInlineArray(length) {
	        var /** @type {?} */ ctor;
	        if (length <= 2) {
	            ctor = InlineArray2;
	        }
	        else if (length <= 4) {
	            ctor = InlineArray4;
	        }
	        else if (length <= 8) {
	            ctor = InlineArray8;
	        }
	        else if (length <= 16) {
	            ctor = InlineArray16;
	        }
	        else {
	            ctor = InlineArrayDynamic;
	        }
	        return new ctor(length);
	    }
	    var InlineArray0 = (function () {
	        function InlineArray0() {
	            this.length = 0;
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        InlineArray0.prototype.get = function (index) { return undefined; };
	        /**
	         * @param {?} index
	         * @param {?} value
	         * @return {?}
	         */
	        InlineArray0.prototype.set = function (index, value) { };
	        return InlineArray0;
	    }());
	    var InlineArray2 = (function () {
	        /**
	         * @param {?} length
	         * @param {?=} _v0
	         * @param {?=} _v1
	         */
	        function InlineArray2(length, _v0, _v1) {
	            this.length = length;
	            this._v0 = _v0;
	            this._v1 = _v1;
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        InlineArray2.prototype.get = function (index) {
	            switch (index) {
	                case 0:
	                    return this._v0;
	                case 1:
	                    return this._v1;
	                default:
	                    return undefined;
	            }
	        };
	        /**
	         * @param {?} index
	         * @param {?} value
	         * @return {?}
	         */
	        InlineArray2.prototype.set = function (index, value) {
	            switch (index) {
	                case 0:
	                    this._v0 = value;
	                    break;
	                case 1:
	                    this._v1 = value;
	                    break;
	            }
	        };
	        return InlineArray2;
	    }());
	    var InlineArray4 = (function () {
	        /**
	         * @param {?} length
	         * @param {?=} _v0
	         * @param {?=} _v1
	         * @param {?=} _v2
	         * @param {?=} _v3
	         */
	        function InlineArray4(length, _v0, _v1, _v2, _v3) {
	            this.length = length;
	            this._v0 = _v0;
	            this._v1 = _v1;
	            this._v2 = _v2;
	            this._v3 = _v3;
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        InlineArray4.prototype.get = function (index) {
	            switch (index) {
	                case 0:
	                    return this._v0;
	                case 1:
	                    return this._v1;
	                case 2:
	                    return this._v2;
	                case 3:
	                    return this._v3;
	                default:
	                    return undefined;
	            }
	        };
	        /**
	         * @param {?} index
	         * @param {?} value
	         * @return {?}
	         */
	        InlineArray4.prototype.set = function (index, value) {
	            switch (index) {
	                case 0:
	                    this._v0 = value;
	                    break;
	                case 1:
	                    this._v1 = value;
	                    break;
	                case 2:
	                    this._v2 = value;
	                    break;
	                case 3:
	                    this._v3 = value;
	                    break;
	            }
	        };
	        return InlineArray4;
	    }());
	    var InlineArray8 = (function () {
	        /**
	         * @param {?} length
	         * @param {?=} _v0
	         * @param {?=} _v1
	         * @param {?=} _v2
	         * @param {?=} _v3
	         * @param {?=} _v4
	         * @param {?=} _v5
	         * @param {?=} _v6
	         * @param {?=} _v7
	         */
	        function InlineArray8(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {
	            this.length = length;
	            this._v0 = _v0;
	            this._v1 = _v1;
	            this._v2 = _v2;
	            this._v3 = _v3;
	            this._v4 = _v4;
	            this._v5 = _v5;
	            this._v6 = _v6;
	            this._v7 = _v7;
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        InlineArray8.prototype.get = function (index) {
	            switch (index) {
	                case 0:
	                    return this._v0;
	                case 1:
	                    return this._v1;
	                case 2:
	                    return this._v2;
	                case 3:
	                    return this._v3;
	                case 4:
	                    return this._v4;
	                case 5:
	                    return this._v5;
	                case 6:
	                    return this._v6;
	                case 7:
	                    return this._v7;
	                default:
	                    return undefined;
	            }
	        };
	        /**
	         * @param {?} index
	         * @param {?} value
	         * @return {?}
	         */
	        InlineArray8.prototype.set = function (index, value) {
	            switch (index) {
	                case 0:
	                    this._v0 = value;
	                    break;
	                case 1:
	                    this._v1 = value;
	                    break;
	                case 2:
	                    this._v2 = value;
	                    break;
	                case 3:
	                    this._v3 = value;
	                    break;
	                case 4:
	                    this._v4 = value;
	                    break;
	                case 5:
	                    this._v5 = value;
	                    break;
	                case 6:
	                    this._v6 = value;
	                    break;
	                case 7:
	                    this._v7 = value;
	                    break;
	            }
	        };
	        return InlineArray8;
	    }());
	    var InlineArray16 = (function () {
	        /**
	         * @param {?} length
	         * @param {?=} _v0
	         * @param {?=} _v1
	         * @param {?=} _v2
	         * @param {?=} _v3
	         * @param {?=} _v4
	         * @param {?=} _v5
	         * @param {?=} _v6
	         * @param {?=} _v7
	         * @param {?=} _v8
	         * @param {?=} _v9
	         * @param {?=} _v10
	         * @param {?=} _v11
	         * @param {?=} _v12
	         * @param {?=} _v13
	         * @param {?=} _v14
	         * @param {?=} _v15
	         */
	        function InlineArray16(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8, _v9, _v10, _v11, _v12, _v13, _v14, _v15) {
	            this.length = length;
	            this._v0 = _v0;
	            this._v1 = _v1;
	            this._v2 = _v2;
	            this._v3 = _v3;
	            this._v4 = _v4;
	            this._v5 = _v5;
	            this._v6 = _v6;
	            this._v7 = _v7;
	            this._v8 = _v8;
	            this._v9 = _v9;
	            this._v10 = _v10;
	            this._v11 = _v11;
	            this._v12 = _v12;
	            this._v13 = _v13;
	            this._v14 = _v14;
	            this._v15 = _v15;
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        InlineArray16.prototype.get = function (index) {
	            switch (index) {
	                case 0:
	                    return this._v0;
	                case 1:
	                    return this._v1;
	                case 2:
	                    return this._v2;
	                case 3:
	                    return this._v3;
	                case 4:
	                    return this._v4;
	                case 5:
	                    return this._v5;
	                case 6:
	                    return this._v6;
	                case 7:
	                    return this._v7;
	                case 8:
	                    return this._v8;
	                case 9:
	                    return this._v9;
	                case 10:
	                    return this._v10;
	                case 11:
	                    return this._v11;
	                case 12:
	                    return this._v12;
	                case 13:
	                    return this._v13;
	                case 14:
	                    return this._v14;
	                case 15:
	                    return this._v15;
	                default:
	                    return undefined;
	            }
	        };
	        /**
	         * @param {?} index
	         * @param {?} value
	         * @return {?}
	         */
	        InlineArray16.prototype.set = function (index, value) {
	            switch (index) {
	                case 0:
	                    this._v0 = value;
	                    break;
	                case 1:
	                    this._v1 = value;
	                    break;
	                case 2:
	                    this._v2 = value;
	                    break;
	                case 3:
	                    this._v3 = value;
	                    break;
	                case 4:
	                    this._v4 = value;
	                    break;
	                case 5:
	                    this._v5 = value;
	                    break;
	                case 6:
	                    this._v6 = value;
	                    break;
	                case 7:
	                    this._v7 = value;
	                    break;
	                case 8:
	                    this._v8 = value;
	                    break;
	                case 9:
	                    this._v9 = value;
	                    break;
	                case 10:
	                    this._v10 = value;
	                    break;
	                case 11:
	                    this._v11 = value;
	                    break;
	                case 12:
	                    this._v12 = value;
	                    break;
	                case 13:
	                    this._v13 = value;
	                    break;
	                case 14:
	                    this._v14 = value;
	                    break;
	                case 15:
	                    this._v15 = value;
	                    break;
	            }
	        };
	        return InlineArray16;
	    }());
	    var InlineArrayDynamic = (function () {
	        /**
	         * @param {?} length
	         * @param {...?} values
	         */
	        function InlineArrayDynamic(length) {
	            var values = [];
	            for (var _i = 1; _i < arguments.length; _i++) {
	                values[_i - 1] = arguments[_i];
	            }
	            this.length = length;
	            this._values = values;
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        InlineArrayDynamic.prototype.get = function (index) { return this._values[index]; };
	        /**
	         * @param {?} index
	         * @param {?} value
	         * @return {?}
	         */
	        InlineArrayDynamic.prototype.set = function (index, value) { this._values[index] = value; };
	        return InlineArrayDynamic;
	    }());
	    var /** @type {?} */ EMPTY_INLINE_ARRAY = new InlineArray0();
	
	
	    var view_utils = Object.freeze({
	        ViewUtils: ViewUtils,
	        createRenderComponentType: createRenderComponentType,
	        addToArray: addToArray,
	        interpolate: interpolate,
	        inlineInterpolate: inlineInterpolate,
	        checkBinding: checkBinding,
	        castByValue: castByValue,
	        EMPTY_ARRAY: EMPTY_ARRAY,
	        EMPTY_MAP: EMPTY_MAP,
	        pureProxy1: pureProxy1,
	        pureProxy2: pureProxy2,
	        pureProxy3: pureProxy3,
	        pureProxy4: pureProxy4,
	        pureProxy5: pureProxy5,
	        pureProxy6: pureProxy6,
	        pureProxy7: pureProxy7,
	        pureProxy8: pureProxy8,
	        pureProxy9: pureProxy9,
	        pureProxy10: pureProxy10,
	        setBindingDebugInfoForChanges: setBindingDebugInfoForChanges,
	        setBindingDebugInfo: setBindingDebugInfo,
	        createRenderElement: createRenderElement,
	        selectOrCreateRenderHostElement: selectOrCreateRenderHostElement,
	        subscribeToRenderElement: subscribeToRenderElement,
	        noop: noop,
	        InlineArray2: InlineArray2,
	        InlineArray4: InlineArray4,
	        InlineArray8: InlineArray8,
	        InlineArray16: InlineArray16,
	        InlineArrayDynamic: InlineArrayDynamic,
	        EMPTY_INLINE_ARRAY: EMPTY_INLINE_ARRAY
	    });
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$5 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     *  Represents an instance of a Component created via a {@link ComponentFactory}.
	      * *
	      * `ComponentRef` provides access to the Component Instance as well other objects related to this
	      * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}
	      * method.
	     * @abstract
	     */
	    var ComponentRef = (function () {
	        function ComponentRef() {
	        }
	        Object.defineProperty(ComponentRef.prototype, "location", {
	            /**
	             *  Location of the Host Element of this Component Instance.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef.prototype, "injector", {
	            /**
	             *  The injector on which the component instance exists.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef.prototype, "instance", {
	            /**
	             *  The instance of the Component.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef.prototype, "hostView", {
	            /**
	             *  The {@link ViewRef} of the Host View of this Component instance.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef.prototype, "changeDetectorRef", {
	            /**
	             *  The {@link ChangeDetectorRef} of the Component instance.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef.prototype, "componentType", {
	            /**
	             *  The component type.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         *  Destroys the component instance and all of the data structures associated with it.
	         * @abstract
	         * @return {?}
	         */
	        ComponentRef.prototype.destroy = function () { };
	        /**
	         *  Allows to register a callback that will be called when the component is destroyed.
	         * @abstract
	         * @param {?} callback
	         * @return {?}
	         */
	        ComponentRef.prototype.onDestroy = function (callback) { };
	        return ComponentRef;
	    }());
	    var ComponentRef_ = (function (_super) {
	        __extends$5(ComponentRef_, _super);
	        /**
	         * @param {?} _index
	         * @param {?} _parentView
	         * @param {?} _nativeElement
	         * @param {?} _component
	         */
	        function ComponentRef_(_index, _parentView, _nativeElement, _component) {
	            _super.call(this);
	            this._index = _index;
	            this._parentView = _parentView;
	            this._nativeElement = _nativeElement;
	            this._component = _component;
	        }
	        Object.defineProperty(ComponentRef_.prototype, "location", {
	            /**
	             * @return {?}
	             */
	            get: function () { return new ElementRef(this._nativeElement); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef_.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._parentView.injector(this._index); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef_.prototype, "instance", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._component; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef_.prototype, "hostView", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._parentView.ref; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._parentView.ref; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef_.prototype, "componentType", {
	            /**
	             * @return {?}
	             */
	            get: function () { return (this._component.constructor); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        ComponentRef_.prototype.destroy = function () { this._parentView.detachAndDestroy(); };
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        ComponentRef_.prototype.onDestroy = function (callback) { this.hostView.onDestroy(callback); };
	        return ComponentRef_;
	    }(ComponentRef));
	    /**
	     * @stable
	     */
	    var ComponentFactory = (function () {
	        /**
	         * @param {?} selector
	         * @param {?} _viewClass
	         * @param {?} _componentType
	         */
	        function ComponentFactory(selector, _viewClass, _componentType) {
	            this.selector = selector;
	            this._viewClass = _viewClass;
	            this._componentType = _componentType;
	        }
	        Object.defineProperty(ComponentFactory.prototype, "componentType", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._componentType; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         *  Creates a new component.
	         * @param {?} injector
	         * @param {?=} projectableNodes
	         * @param {?=} rootSelectorOrNode
	         * @return {?}
	         */
	        ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode) {
	            if (projectableNodes === void 0) { projectableNodes = null; }
	            if (rootSelectorOrNode === void 0) { rootSelectorOrNode = null; }
	            var /** @type {?} */ vu = injector.get(ViewUtils);
	            if (!projectableNodes) {
	                projectableNodes = [];
	            }
	            var /** @type {?} */ hostView = new this._viewClass(vu, null, null, null);
	            return hostView.createHostView(rootSelectorOrNode, injector, projectableNodes);
	        };
	        return ComponentFactory;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$8 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @stable
	     */
	    var NoComponentFactoryError = (function (_super) {
	        __extends$8(NoComponentFactoryError, _super);
	        /**
	         * @param {?} component
	         */
	        function NoComponentFactoryError(component) {
	            _super.call(this, "No component factory found for " + stringify(component));
	            this.component = component;
	        }
	        return NoComponentFactoryError;
	    }(BaseError));
	    var _NullComponentFactoryResolver = (function () {
	        function _NullComponentFactoryResolver() {
	        }
	        /**
	         * @param {?} component
	         * @return {?}
	         */
	        _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	            throw new NoComponentFactoryError(component);
	        };
	        return _NullComponentFactoryResolver;
	    }());
	    /**
	     * @abstract
	     */
	    var ComponentFactoryResolver = (function () {
	        function ComponentFactoryResolver() {
	        }
	        /**
	         * @abstract
	         * @param {?} component
	         * @return {?}
	         */
	        ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };
	        ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
	        return ComponentFactoryResolver;
	    }());
	    var CodegenComponentFactoryResolver = (function () {
	        /**
	         * @param {?} factories
	         * @param {?} _parent
	         */
	        function CodegenComponentFactoryResolver(factories, _parent) {
	            this._parent = _parent;
	            this._factories = new Map();
	            for (var i = 0; i < factories.length; i++) {
	                var factory = factories[i];
	                this._factories.set(factory.componentType, factory);
	            }
	        }
	        /**
	         * @param {?} component
	         * @return {?}
	         */
	        CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	            var /** @type {?} */ result = this._factories.get(component);
	            if (!result) {
	                result = this._parent.resolveComponentFactory(component);
	            }
	            return result;
	        };
	        return CodegenComponentFactoryResolver;
	    }());
	
	    var /** @type {?} */ trace;
	    var /** @type {?} */ events;
	    /**
	     * @return {?}
	     */
	    function detectWTF() {
	        var /** @type {?} */ wtf = ((global$1) /** TODO #9100 */)['wtf'];
	        if (wtf) {
	            trace = wtf['trace'];
	            if (trace) {
	                events = trace['events'];
	                return true;
	            }
	        }
	        return false;
	    }
	    /**
	     * @param {?} signature
	     * @param {?=} flags
	     * @return {?}
	     */
	    function createScope(signature, flags) {
	        if (flags === void 0) { flags = null; }
	        return events.createScope(signature, flags);
	    }
	    /**
	     * @param {?} scope
	     * @param {?=} returnValue
	     * @return {?}
	     */
	    function leave(scope, returnValue) {
	        trace.leaveScope(scope, returnValue);
	        return returnValue;
	    }
	    /**
	     * @param {?} rangeType
	     * @param {?} action
	     * @return {?}
	     */
	    function startTimeRange(rangeType, action) {
	        return trace.beginTimeRange(rangeType, action);
	    }
	    /**
	     * @param {?} range
	     * @return {?}
	     */
	    function endTimeRange(range) {
	        trace.endTimeRange(range);
	    }
	
	    /**
	     * True if WTF is enabled.
	     */
	    var /** @type {?} */ wtfEnabled = detectWTF();
	    /**
	     * @param {?=} arg0
	     * @param {?=} arg1
	     * @return {?}
	     */
	    function noopScope(arg0, arg1) {
	        return null;
	    }
	    /**
	     * Create trace scope.
	     *
	     * Scopes must be strictly nested and are analogous to stack frames, but
	     * do not have to follow the stack frames. Instead it is recommended that they follow logical
	     * nesting. You may want to use
	     * [Event
	     * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
	     * as they are defined in WTF.
	     *
	     * Used to mark scope entry. The return value is used to leave the scope.
	     *
	     *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
	     *
	     *     someMethod() {
	     *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
	     *        // DO SOME WORK HERE
	     *        return wtfLeave(s, 123); // Return value 123
	     *     }
	     *
	     * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
	     * negatively impact the performance of your application. For this reason we recommend that
	     * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
	     * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
	     * exception, will produce incorrect trace, but presence of exception signifies logic error which
	     * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
	     * an exception is expected during normal execution while profiling.
	     *
	     * @experimental
	     */
	    var /** @type {?} */ wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope; };
	    /**
	     * Used to mark end of Scope.
	     *
	     * - `scope` to end.
	     * - `returnValue` (optional) to be passed to the WTF.
	     *
	     * Returns the `returnValue for easy chaining.
	     * @experimental
	     */
	    var /** @type {?} */ wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };
	    /**
	     * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
	     * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
	     * enabled.
	     *
	     *     someMethod() {
	     *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
	     *        var future = new Future.delay(5).then((_) {
	     *          wtfEndTimeRange(s);
	     *        });
	     *     }
	     * @experimental
	     */
	    var /** @type {?} */ wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };
	    /**
	     * Ends a async time range operation.
	     * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
	     * enabled.
	     * @experimental
	     */
	    var /** @type {?} */ wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };
	
	    /**
	     *  The Testability service provides testing hooks that can be accessed from
	      * the browser and by services such as Protractor. Each bootstrapped Angular
	      * application on the page will have an instance of Testability.
	     */
	    var Testability = (function () {
	        /**
	         * @param {?} _ngZone
	         */
	        function Testability(_ngZone) {
	            this._ngZone = _ngZone;
	            /** @internal */
	            this._pendingCount = 0;
	            /** @internal */
	            this._isZoneStable = true;
	            /**
	             * Whether any work was done since the last 'whenStable' callback. This is
	             * useful to detect if this could have potentially destabilized another
	             * component while it is stabilizing.
	             * @internal
	             */
	            this._didWork = false;
	            /** @internal */
	            this._callbacks = [];
	            this._watchAngularEvents();
	        }
	        /**
	         * @return {?}
	         */
	        Testability.prototype._watchAngularEvents = function () {
	            var _this = this;
	            this._ngZone.onUnstable.subscribe({
	                next: function () {
	                    _this._didWork = true;
	                    _this._isZoneStable = false;
	                }
	            });
	            this._ngZone.runOutsideAngular(function () {
	                _this._ngZone.onStable.subscribe({
	                    next: function () {
	                        NgZone.assertNotInAngularZone();
	                        scheduleMicroTask(function () {
	                            _this._isZoneStable = true;
	                            _this._runCallbacksIfReady();
	                        });
	                    }
	                });
	            });
	        };
	        /**
	         * @return {?}
	         */
	        Testability.prototype.increasePendingRequestCount = function () {
	            this._pendingCount += 1;
	            this._didWork = true;
	            return this._pendingCount;
	        };
	        /**
	         * @return {?}
	         */
	        Testability.prototype.decreasePendingRequestCount = function () {
	            this._pendingCount -= 1;
	            if (this._pendingCount < 0) {
	                throw new Error('pending async requests below zero');
	            }
	            this._runCallbacksIfReady();
	            return this._pendingCount;
	        };
	        /**
	         * @return {?}
	         */
	        Testability.prototype.isStable = function () {
	            return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
	        };
	        /**
	         * @return {?}
	         */
	        Testability.prototype._runCallbacksIfReady = function () {
	            var _this = this;
	            if (this.isStable()) {
	                // Schedules the call backs in a new frame so that it is always async.
	                scheduleMicroTask(function () {
	                    while (_this._callbacks.length !== 0) {
	                        (_this._callbacks.pop())(_this._didWork);
	                    }
	                    _this._didWork = false;
	                });
	            }
	            else {
	                // Not Ready
	                this._didWork = true;
	            }
	        };
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        Testability.prototype.whenStable = function (callback) {
	            this._callbacks.push(callback);
	            this._runCallbacksIfReady();
	        };
	        /**
	         * @return {?}
	         */
	        Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };
	        /**
	         * @deprecated use findProviders
	         * @param {?} using
	         * @param {?} provider
	         * @param {?} exactMatch
	         * @return {?}
	         */
	        Testability.prototype.findBindings = function (using, provider, exactMatch) {
	            // TODO(juliemr): implement.
	            return [];
	        };
	        /**
	         * @param {?} using
	         * @param {?} provider
	         * @param {?} exactMatch
	         * @return {?}
	         */
	        Testability.prototype.findProviders = function (using, provider, exactMatch) {
	            // TODO(juliemr): implement.
	            return [];
	        };
	        Testability.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        Testability.ctorParameters = function () { return [
	            { type: NgZone, },
	        ]; };
	        return Testability;
	    }());
	    /**
	     *  A global registry of {@link Testability} instances for specific elements.
	     */
	    var TestabilityRegistry = (function () {
	        function TestabilityRegistry() {
	            /** @internal */
	            this._applications = new Map();
	            _testabilityGetter.addToWindow(this);
	        }
	        /**
	         * @param {?} token
	         * @param {?} testability
	         * @return {?}
	         */
	        TestabilityRegistry.prototype.registerApplication = function (token, testability) {
	            this._applications.set(token, testability);
	        };
	        /**
	         * @param {?} elem
	         * @return {?}
	         */
	        TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem); };
	        /**
	         * @return {?}
	         */
	        TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };
	        /**
	         * @return {?}
	         */
	        TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };
	        /**
	         * @param {?} elem
	         * @param {?=} findInAncestors
	         * @return {?}
	         */
	        TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
	            if (findInAncestors === void 0) { findInAncestors = true; }
	            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
	        };
	        TestabilityRegistry.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        TestabilityRegistry.ctorParameters = function () { return []; };
	        return TestabilityRegistry;
	    }());
	    var _NoopGetTestability = (function () {
	        function _NoopGetTestability() {
	        }
	        /**
	         * @param {?} registry
	         * @return {?}
	         */
	        _NoopGetTestability.prototype.addToWindow = function (registry) { };
	        /**
	         * @param {?} registry
	         * @param {?} elem
	         * @param {?} findInAncestors
	         * @return {?}
	         */
	        _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	            return null;
	        };
	        return _NoopGetTestability;
	    }());
	    /**
	     *  Set the {@link GetTestability} implementation used by the Angular testing framework.
	     * @param {?} getter
	     * @return {?}
	     */
	    function setTestabilityGetter(getter) {
	        _testabilityGetter = getter;
	    }
	    var /** @type {?} */ _testabilityGetter = new _NoopGetTestability();
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ _devMode = true;
	    var /** @type {?} */ _runModeLocked = false;
	    var /** @type {?} */ _platform;
	    /**
	     *  Disable Angular's development mode, which turns off assertions and other
	      * checks within the framework.
	      * *
	      * One important assertion this disables verifies that a change detection pass
	      * does not result in additional changes to any bindings (also known as
	      * unidirectional data flow).
	      * *
	     * @return {?}
	     */
	    function enableProdMode() {
	        if (_runModeLocked) {
	            throw new Error('Cannot enable prod mode after platform setup.');
	        }
	        _devMode = false;
	    }
	    /**
	     *  Returns whether Angular is in development mode. After called once,
	      * the value is locked and won't change any more.
	      * *
	      * By default, this is true, unless a user calls `enableProdMode` before calling this.
	      * *
	     * @return {?}
	     */
	    function isDevMode() {
	        _runModeLocked = true;
	        return _devMode;
	    }
	    /**
	     *  A token for third-party components that can register themselves with NgProbe.
	      * *
	     */
	    var NgProbeToken = (function () {
	        /**
	         * @param {?} name
	         * @param {?} token
	         */
	        function NgProbeToken(name, token) {
	            this.name = name;
	            this.token = token;
	        }
	        return NgProbeToken;
	    }());
	    /**
	     *  Creates a platform.
	      * Platforms have to be eagerly created via this function.
	      * *
	     * @param {?} injector
	     * @return {?}
	     */
	    function createPlatform(injector) {
	        if (_platform && !_platform.destroyed) {
	            throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
	        }
	        _platform = injector.get(PlatformRef);
	        var /** @type {?} */ inits = (injector.get(PLATFORM_INITIALIZER, null));
	        if (inits)
	            inits.forEach(function (init) { return init(); });
	        return _platform;
	    }
	    /**
	     *  Creates a factory for a platform
	      * *
	     * @param {?} parentPlaformFactory
	     * @param {?} name
	     * @param {?=} providers
	     * @return {?}
	     */
	    function createPlatformFactory(parentPlaformFactory, name, providers) {
	        if (providers === void 0) { providers = []; }
	        var /** @type {?} */ marker = new OpaqueToken("Platform: " + name);
	        return function (extraProviders) {
	            if (extraProviders === void 0) { extraProviders = []; }
	            if (!getPlatform()) {
	                if (parentPlaformFactory) {
	                    parentPlaformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
	                }
	                else {
	                    createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));
	                }
	            }
	            return assertPlatform(marker);
	        };
	    }
	    /**
	     *  Checks that there currently is a platform
	      * which contains the given token as a provider.
	      * *
	     * @param {?} requiredToken
	     * @return {?}
	     */
	    function assertPlatform(requiredToken) {
	        var /** @type {?} */ platform = getPlatform();
	        if (!platform) {
	            throw new Error('No platform exists!');
	        }
	        if (!platform.injector.get(requiredToken, null)) {
	            throw new Error('A platform with a different configuration has been created. Please destroy it first.');
	        }
	        return platform;
	    }
	    /**
	     *  Destroy the existing platform.
	      * *
	     * @return {?}
	     */
	    function destroyPlatform() {
	        if (_platform && !_platform.destroyed) {
	            _platform.destroy();
	        }
	    }
	    /**
	     *  Returns the current platform.
	      * *
	     * @return {?}
	     */
	    function getPlatform() {
	        return _platform && !_platform.destroyed ? _platform : null;
	    }
	    /**
	     *  The Angular platform is the entry point for Angular on a web page. Each page
	      * has exactly one platform, and services (such as reflection) which are common
	      * to every Angular application running on the page are bound in its scope.
	      * *
	      * A page's platform is initialized implicitly when {@link bootstrap}() is called, or
	      * explicitly by calling {@link createPlatform}().
	      * *
	     * @abstract
	     */
	    var PlatformRef = (function () {
	        function PlatformRef() {
	        }
	        /**
	         *  Creates an instance of an `@NgModule` for the given platform
	          * for offline compilation.
	          * *
	          * ## Simple Example
	          * *
	          * ```typescript
	          * my_module.ts:
	          * *
	          * imports: [BrowserModule]
	          * })
	          * class MyModule {}
	          * *
	          * main.ts:
	          * import {MyModuleNgFactory} from './my_module.ngfactory';
	          * import {platformBrowser} from '@angular/platform-browser';
	          * *
	          * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
	          * ```
	          * *
	         * @param {?} moduleFactory
	         * @return {?}
	         */
	        PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) {
	            throw unimplemented();
	        };
	        /**
	         *  Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.
	          * *
	          * ## Simple Example
	          * *
	          * ```typescript
	          * imports: [BrowserModule]
	          * })
	          * class MyModule {}
	          * *
	          * let moduleRef = platformBrowser().bootstrapModule(MyModule);
	          * ```
	         * @param {?} moduleType
	         * @param {?=} compilerOptions
	         * @return {?}
	         */
	        PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) {
	            if (compilerOptions === void 0) { compilerOptions = []; }
	            throw unimplemented();
	        };
	        /**
	         *  Register a listener to be called when the platform is disposed.
	         * @abstract
	         * @param {?} callback
	         * @return {?}
	         */
	        PlatformRef.prototype.onDestroy = function (callback) { };
	        Object.defineProperty(PlatformRef.prototype, "injector", {
	            /**
	             *  Retrieve the platform {@link Injector}, which is the parent injector for
	              * every Angular application on the page and provides singleton providers.
	             * @return {?}
	             */
	            get: function () { throw unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        /**
	         *  Destroy the Angular platform and all Angular applications on the page.
	         * @abstract
	         * @return {?}
	         */
	        PlatformRef.prototype.destroy = function () { };
	        Object.defineProperty(PlatformRef.prototype, "destroyed", {
	            /**
	             * @return {?}
	             */
	            get: function () { throw unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        return PlatformRef;
	    }());
	    /**
	     * @param {?} errorHandler
	     * @param {?} callback
	     * @return {?}
	     */
	    function _callAndReportToErrorHandler(errorHandler, callback) {
	        try {
	            var /** @type {?} */ result = callback();
	            if (isPromise(result)) {
	                return result.catch(function (e) {
	                    errorHandler.handleError(e);
	                    // rethrow as the exception handler might not do it
	                    throw e;
	                });
	            }
	            return result;
	        }
	        catch (e) {
	            errorHandler.handleError(e);
	            // rethrow as the exception handler might not do it
	            throw e;
	        }
	    }
	    var PlatformRef_ = (function (_super) {
	        __extends$3(PlatformRef_, _super);
	        /**
	         * @param {?} _injector
	         */
	        function PlatformRef_(_injector) {
	            _super.call(this);
	            this._injector = _injector;
	            this._modules = [];
	            this._destroyListeners = [];
	            this._destroyed = false;
	        }
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	        Object.defineProperty(PlatformRef_.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._injector; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(PlatformRef_.prototype, "destroyed", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._destroyed; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        PlatformRef_.prototype.destroy = function () {
	            if (this._destroyed) {
	                throw new Error('The platform has already been destroyed!');
	            }
	            this._modules.slice().forEach(function (module) { return module.destroy(); });
	            this._destroyListeners.forEach(function (listener) { return listener(); });
	            this._destroyed = true;
	        };
	        /**
	         * @param {?} moduleFactory
	         * @return {?}
	         */
	        PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {
	            return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
	        };
	        /**
	         * @param {?} moduleFactory
	         * @param {?} ngZone
	         * @return {?}
	         */
	        PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {
	            var _this = this;
	            // Note: We need to create the NgZone _before_ we instantiate the module,
	            // as instantiating the module creates some providers eagerly.
	            // So we create a mini parent injector that just contains the new NgZone and
	            // pass that as parent to the NgModuleFactory.
	            if (!ngZone)
	                ngZone = new NgZone({ enableLongStackTrace: isDevMode() });
	            // Attention: Don't use ApplicationRef.run here,
	            // as we want to be sure that all possible constructor calls are inside `ngZone.run`!
	            return ngZone.run(function () {
	                var /** @type {?} */ ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector);
	                var /** @type {?} */ moduleRef = (moduleFactory.create(ngZoneInjector));
	                var /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
	                if (!exceptionHandler) {
	                    throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
	                }
	                moduleRef.onDestroy(function () { return ListWrapper.remove(_this._modules, moduleRef); });
	                ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } });
	                return _callAndReportToErrorHandler(exceptionHandler, function () {
	                    var /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);
	                    return initStatus.donePromise.then(function () {
	                        _this._moduleDoBootstrap(moduleRef);
	                        return moduleRef;
	                    });
	                });
	            });
	        };
	        /**
	         * @param {?} moduleType
	         * @param {?=} compilerOptions
	         * @return {?}
	         */
	        PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {
	            if (compilerOptions === void 0) { compilerOptions = []; }
	            return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
	        };
	        /**
	         * @param {?} moduleType
	         * @param {?=} compilerOptions
	         * @param {?} ngZone
	         * @param {?=} componentFactoryCallback
	         * @return {?}
	         */
	        PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone, componentFactoryCallback) {
	            var _this = this;
	            if (compilerOptions === void 0) { compilerOptions = []; }
	            var /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);
	            var /** @type {?} */ compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);
	            // ugly internal api hack: generate host component factories for all declared components and
	            // pass the factories into the callback - this is used by UpdateAdapter to get hold of all
	            // factories.
	            if (componentFactoryCallback) {
	                return compiler.compileModuleAndAllComponentsAsync(moduleType)
	                    .then(function (_a) {
	                    var ngModuleFactory = _a.ngModuleFactory, componentFactories = _a.componentFactories;
	                    componentFactoryCallback(componentFactories);
	                    return _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);
	                });
	            }
	            return compiler.compileModuleAsync(moduleType)
	                .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });
	        };
	        /**
	         * @param {?} moduleRef
	         * @return {?}
	         */
	        PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {
	            var /** @type {?} */ appRef = moduleRef.injector.get(ApplicationRef);
	            if (moduleRef.bootstrapFactories.length > 0) {
	                moduleRef.bootstrapFactories.forEach(function (compFactory) { return appRef.bootstrap(compFactory); });
	            }
	            else if (moduleRef.instance.ngDoBootstrap) {
	                moduleRef.instance.ngDoBootstrap(appRef);
	            }
	            else {
	                throw new Error(("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ") +
	                    "Please define one of these.");
	            }
	        };
	        PlatformRef_.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        PlatformRef_.ctorParameters = function () { return [
	            { type: Injector, },
	        ]; };
	        return PlatformRef_;
	    }(PlatformRef));
	    /**
	     *  A reference to an Angular application running on a page.
	      * *
	      * For more about Angular applications, see the documentation for {@link bootstrap}.
	      * *
	     * @abstract
	     */
	    var ApplicationRef = (function () {
	        function ApplicationRef() {
	        }
	        /**
	         *  Bootstrap a new component at the root level of the application.
	          * *
	          * ### Bootstrap process
	          * *
	          * When bootstrapping a new root component into an application, Angular mounts the
	          * specified application component onto DOM elements identified by the [componentType]'s
	          * selector and kicks off automatic change detection to finish initializing the component.
	          * *
	          * ### Example
	          * {@example core/ts/platform/platform.ts region='longform'}
	         * @abstract
	         * @param {?} componentFactory
	         * @return {?}
	         */
	        ApplicationRef.prototype.bootstrap = function (componentFactory) { };
	        /**
	         *  Invoke this method to explicitly process change detection and its side-effects.
	          * *
	          * In development mode, `tick()` also performs a second change detection cycle to ensure that no
	          * further changes are detected. If additional changes are picked up during this second cycle,
	          * bindings in the app have side-effects that cannot be resolved in a single change detection
	          * pass.
	          * In this case, Angular throws an error, since an Angular application can only have one change
	          * detection pass during which all change detection must complete.
	         * @abstract
	         * @return {?}
	         */
	        ApplicationRef.prototype.tick = function () { };
	        Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
	            /**
	             *  Get a list of component types registered to this application.
	              * This list is populated even before the component is created.
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ApplicationRef.prototype, "components", {
	            /**
	             *  Get a list of components registered to this application.
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        /**
	         *  Attaches a view so that it will be dirty checked.
	          * The view will be automatically detached when it is destroyed.
	          * This will throw if the view is already attached to a ViewContainer.
	         * @param {?} view
	         * @return {?}
	         */
	        ApplicationRef.prototype.attachView = function (view) { unimplemented(); };
	        /**
	         *  Detaches a view from dirty checking again.
	         * @param {?} view
	         * @return {?}
	         */
	        ApplicationRef.prototype.detachView = function (view) { unimplemented(); };
	        Object.defineProperty(ApplicationRef.prototype, "viewCount", {
	            /**
	             *  Returns the number of attached views.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        return ApplicationRef;
	    }());
	    var ApplicationRef_ = (function (_super) {
	        __extends$3(ApplicationRef_, _super);
	        /**
	         * @param {?} _zone
	         * @param {?} _console
	         * @param {?} _injector
	         * @param {?} _exceptionHandler
	         * @param {?} _componentFactoryResolver
	         * @param {?} _initStatus
	         * @param {?} _testabilityRegistry
	         * @param {?} _testability
	         */
	        function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {
	            var _this = this;
	            _super.call(this);
	            this._zone = _zone;
	            this._console = _console;
	            this._injector = _injector;
	            this._exceptionHandler = _exceptionHandler;
	            this._componentFactoryResolver = _componentFactoryResolver;
	            this._initStatus = _initStatus;
	            this._testabilityRegistry = _testabilityRegistry;
	            this._testability = _testability;
	            this._bootstrapListeners = [];
	            this._rootComponents = [];
	            this._rootComponentTypes = [];
	            this._views = [];
	            this._runningTick = false;
	            this._enforceNoNewChanges = false;
	            this._enforceNoNewChanges = isDevMode();
	            this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });
	        }
	        /**
	         * @param {?} viewRef
	         * @return {?}
	         */
	        ApplicationRef_.prototype.attachView = function (viewRef) {
	            var /** @type {?} */ view = ((viewRef)).internalView;
	            this._views.push(view);
	            view.attachToAppRef(this);
	        };
	        /**
	         * @param {?} viewRef
	         * @return {?}
	         */
	        ApplicationRef_.prototype.detachView = function (viewRef) {
	            var /** @type {?} */ view = ((viewRef)).internalView;
	            ListWrapper.remove(this._views, view);
	            view.detach();
	        };
	        /**
	         * @param {?} componentOrFactory
	         * @return {?}
	         */
	        ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {
	            var _this = this;
	            if (!this._initStatus.done) {
	                throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
	            }
	            var /** @type {?} */ componentFactory;
	            if (componentOrFactory instanceof ComponentFactory) {
	                componentFactory = componentOrFactory;
	            }
	            else {
	                componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
	            }
	            this._rootComponentTypes.push(componentFactory.componentType);
	            var /** @type {?} */ compRef = componentFactory.create(this._injector, [], componentFactory.selector);
	            compRef.onDestroy(function () { _this._unloadComponent(compRef); });
	            var /** @type {?} */ testability = compRef.injector.get(Testability, null);
	            if (testability) {
	                compRef.injector.get(TestabilityRegistry)
	                    .registerApplication(compRef.location.nativeElement, testability);
	            }
	            this._loadComponent(compRef);
	            if (isDevMode()) {
	                this._console.log("Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode.");
	            }
	            return compRef;
	        };
	        /**
	         * @param {?} componentRef
	         * @return {?}
	         */
	        ApplicationRef_.prototype._loadComponent = function (componentRef) {
	            this.attachView(componentRef.hostView);
	            this.tick();
	            this._rootComponents.push(componentRef);
	            // Get the listeners lazily to prevent DI cycles.
	            var /** @type {?} */ listeners = (this._injector.get(APP_BOOTSTRAP_LISTENER, [])
	                .concat(this._bootstrapListeners));
	            listeners.forEach(function (listener) { return listener(componentRef); });
	        };
	        /**
	         * @param {?} componentRef
	         * @return {?}
	         */
	        ApplicationRef_.prototype._unloadComponent = function (componentRef) {
	            this.detachView(componentRef.hostView);
	            ListWrapper.remove(this._rootComponents, componentRef);
	        };
	        /**
	         * @return {?}
	         */
	        ApplicationRef_.prototype.tick = function () {
	            if (this._runningTick) {
	                throw new Error('ApplicationRef.tick is called recursively');
	            }
	            var /** @type {?} */ scope = ApplicationRef_._tickScope();
	            try {
	                this._runningTick = true;
	                this._views.forEach(function (view) { return view.ref.detectChanges(); });
	                if (this._enforceNoNewChanges) {
	                    this._views.forEach(function (view) { return view.ref.checkNoChanges(); });
	                }
	            }
	            finally {
	                this._runningTick = false;
	                wtfLeave(scope);
	            }
	        };
	        /**
	         * @return {?}
	         */
	        ApplicationRef_.prototype.ngOnDestroy = function () {
	            // TODO(alxhub): Dispose of the NgZone.
	            this._views.slice().forEach(function (view) { return view.destroy(); });
	        };
	        Object.defineProperty(ApplicationRef_.prototype, "viewCount", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._views.length; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._rootComponentTypes; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ApplicationRef_.prototype, "components", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._rootComponents; },
	            enumerable: true,
	            configurable: true
	        });
	        /** @internal */
	        ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
	        ApplicationRef_.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        ApplicationRef_.ctorParameters = function () { return [
	            { type: NgZone, },
	            { type: Console, },
	            { type: Injector, },
	            { type: ErrorHandler, },
	            { type: ComponentFactoryResolver, },
	            { type: ApplicationInitStatus, },
	            { type: TestabilityRegistry, decorators: [{ type: Optional },] },
	            { type: Testability, decorators: [{ type: Optional },] },
	        ]; };
	        return ApplicationRef_;
	    }(ApplicationRef));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$9 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     *  Represents an instance of an NgModule created via a {@link NgModuleFactory}.
	      * *
	      * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this
	      * NgModule Instance.
	      * *
	     * @abstract
	     */
	    var NgModuleRef = (function () {
	        function NgModuleRef() {
	        }
	        Object.defineProperty(NgModuleRef.prototype, "injector", {
	            /**
	             *  The injector that contains all of the providers of the NgModule.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModuleRef.prototype, "componentFactoryResolver", {
	            /**
	             *  The ComponentFactoryResolver to get hold of the ComponentFactories
	              * declared in the `entryComponents` property of the module.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModuleRef.prototype, "instance", {
	            /**
	             *  The NgModule instance.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         *  Destroys the module instance and all of the data structures associated with it.
	         * @abstract
	         * @return {?}
	         */
	        NgModuleRef.prototype.destroy = function () { };
	        /**
	         *  Allows to register a callback that will be called when the module is destroyed.
	         * @abstract
	         * @param {?} callback
	         * @return {?}
	         */
	        NgModuleRef.prototype.onDestroy = function (callback) { };
	        return NgModuleRef;
	    }());
	    /**
	     * @experimental
	     */
	    var NgModuleFactory = (function () {
	        /**
	         * @param {?} _injectorClass
	         * @param {?} _moduleType
	         */
	        function NgModuleFactory(_injectorClass, _moduleType) {
	            this._injectorClass = _injectorClass;
	            this._moduleType = _moduleType;
	        }
	        Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._moduleType; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} parentInjector
	         * @return {?}
	         */
	        NgModuleFactory.prototype.create = function (parentInjector) {
	            if (!parentInjector) {
	                parentInjector = Injector.NULL;
	            }
	            var /** @type {?} */ instance = new this._injectorClass(parentInjector);
	            instance.create();
	            return instance;
	        };
	        return NgModuleFactory;
	    }());
	    var /** @type {?} */ _UNDEFINED = new Object();
	    /**
	     * @abstract
	     */
	    var NgModuleInjector = (function (_super) {
	        __extends$9(NgModuleInjector, _super);
	        /**
	         * @param {?} parent
	         * @param {?} factories
	         * @param {?} bootstrapFactories
	         */
	        function NgModuleInjector(parent, factories, bootstrapFactories) {
	            _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));
	            this.parent = parent;
	            this.bootstrapFactories = bootstrapFactories;
	            this._destroyListeners = [];
	            this._destroyed = false;
	        }
	        /**
	         * @return {?}
	         */
	        NgModuleInjector.prototype.create = function () { this.instance = this.createInternal(); };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        NgModuleInjector.prototype.createInternal = function () { };
	        /**
	         * @param {?} token
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        NgModuleInjector.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	            if (token === Injector || token === ComponentFactoryResolver) {
	                return this;
	            }
	            var /** @type {?} */ result = this.getInternal(token, _UNDEFINED);
	            return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
	        };
	        /**
	         * @abstract
	         * @param {?} token
	         * @param {?} notFoundValue
	         * @return {?}
	         */
	        NgModuleInjector.prototype.getInternal = function (token, notFoundValue) { };
	        Object.defineProperty(NgModuleInjector.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        NgModuleInjector.prototype.destroy = function () {
	            if (this._destroyed) {
	                throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
	            }
	            this._destroyed = true;
	            this.destroyInternal();
	            this._destroyListeners.forEach(function (listener) { return listener(); });
	        };
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        NgModuleInjector.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        NgModuleInjector.prototype.destroyInternal = function () { };
	        return NgModuleInjector;
	    }(CodegenComponentFactoryResolver));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     *  Used to load ng module factories.
	     * @abstract
	     */
	    var NgModuleFactoryLoader = (function () {
	        function NgModuleFactoryLoader() {
	        }
	        /**
	         * @abstract
	         * @param {?} path
	         * @return {?}
	         */
	        NgModuleFactoryLoader.prototype.load = function (path) { };
	        return NgModuleFactoryLoader;
	    }());
	    var /** @type {?} */ moduleFactories = new Map();
	    /**
	     *  Registers a loaded module. Should only be called from generated NgModuleFactory code.
	     * @param {?} id
	     * @param {?} factory
	     * @return {?}
	     */
	    function registerModuleFactory(id, factory) {
	        var /** @type {?} */ existing = moduleFactories.get(id);
	        if (existing) {
	            throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);
	        }
	        moduleFactories.set(id, factory);
	    }
	    /**
	     *  Returns the NgModuleFactory with the given id, if it exists and has been loaded.
	      * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module
	      * cannot be found.
	     * @param {?} id
	     * @return {?}
	     */
	    function getModuleFactory(id) {
	        var /** @type {?} */ factory = moduleFactories.get(id);
	        if (!factory)
	            throw new Error("No module with ID " + id + " loaded");
	        return factory;
	    }
	
	    /**
	     *  An unmodifiable list of items that Angular keeps up to date when the state
	      * of the application changes.
	      * *
	      * The type of object that {@link Query} and {@link ViewQueryMetadata} provide.
	      * *
	      * Implements an iterable interface, therefore it can be used in both ES6
	      * javascript `for (var i of items)` loops as well as in Angular templates with
	      * `*ngFor="let i of myList"`.
	      * *
	      * Changes can be observed by subscribing to the changes `Observable`.
	      * *
	      * NOTE: In the future this class will implement an `Observable` interface.
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
	      * ```typescript
	      * class Container {
	      * @ViewChildren(Item) items:QueryList<Item>;
	      * }
	      * ```
	     */
	    var QueryList = (function () {
	        function QueryList() {
	            this._dirty = true;
	            this._results = [];
	            this._emitter = new EventEmitter();
	        }
	        Object.defineProperty(QueryList.prototype, "changes", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._emitter; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(QueryList.prototype, "length", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._results.length; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(QueryList.prototype, "first", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._results[0]; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(QueryList.prototype, "last", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._results[this.length - 1]; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         *  See
	          * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
	         * @param {?} fn
	         * @return {?}
	         */
	        QueryList.prototype.map = function (fn) { return this._results.map(fn); };
	        /**
	         *  See
	          * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
	         * @param {?} fn
	         * @return {?}
	         */
	        QueryList.prototype.filter = function (fn) {
	            return this._results.filter(fn);
	        };
	        /**
	         *  See
	          * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
	         * @param {?} fn
	         * @return {?}
	         */
	        QueryList.prototype.find = function (fn) { return this._results.find(fn); };
	        /**
	         *  See
	          * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
	         * @param {?} fn
	         * @param {?} init
	         * @return {?}
	         */
	        QueryList.prototype.reduce = function (fn, init) {
	            return this._results.reduce(fn, init);
	        };
	        /**
	         *  See
	          * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
	         * @param {?} fn
	         * @return {?}
	         */
	        QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };
	        /**
	         *  See
	          * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
	         * @param {?} fn
	         * @return {?}
	         */
	        QueryList.prototype.some = function (fn) {
	            return this._results.some(fn);
	        };
	        /**
	         * @return {?}
	         */
	        QueryList.prototype.toArray = function () { return this._results.slice(); };
	        /**
	         * @return {?}
	         */
	        QueryList.prototype[getSymbolIterator()] = function () { return ((this._results))[getSymbolIterator()](); };
	        /**
	         * @return {?}
	         */
	        QueryList.prototype.toString = function () { return this._results.toString(); };
	        /**
	         * @param {?} res
	         * @return {?}
	         */
	        QueryList.prototype.reset = function (res) {
	            this._results = ListWrapper.flatten(res);
	            this._dirty = false;
	        };
	        /**
	         * @return {?}
	         */
	        QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };
	        /**
	         *  internal
	         * @return {?}
	         */
	        QueryList.prototype.setDirty = function () { this._dirty = true; };
	        Object.defineProperty(QueryList.prototype, "dirty", {
	            /**
	             *  internal
	             * @return {?}
	             */
	            get: function () { return this._dirty; },
	            enumerable: true,
	            configurable: true
	        });
	        return QueryList;
	    }());
	
	    var /** @type {?} */ _SEPARATOR = '#';
	    var /** @type {?} */ FACTORY_CLASS_SUFFIX = 'NgFactory';
	    /**
	     *  Configuration for SystemJsNgModuleLoader.
	      * token.
	      * *
	     * @abstract
	     */
	    var SystemJsNgModuleLoaderConfig = (function () {
	        function SystemJsNgModuleLoaderConfig() {
	        }
	        return SystemJsNgModuleLoaderConfig;
	    }());
	    var /** @type {?} */ DEFAULT_CONFIG = {
	        factoryPathPrefix: '',
	        factoryPathSuffix: '.ngfactory',
	    };
	    /**
	     *  NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
	     */
	    var SystemJsNgModuleLoader = (function () {
	        /**
	         * @param {?} _compiler
	         * @param {?=} config
	         */
	        function SystemJsNgModuleLoader(_compiler, config) {
	            this._compiler = _compiler;
	            this._config = config || DEFAULT_CONFIG;
	        }
	        /**
	         * @param {?} path
	         * @return {?}
	         */
	        SystemJsNgModuleLoader.prototype.load = function (path) {
	            var /** @type {?} */ offlineMode = this._compiler instanceof Compiler;
	            return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
	        };
	        /**
	         * @param {?} path
	         * @return {?}
	         */
	        SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {
	            var _this = this;
	            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
	            if (exportName === undefined) {
	                exportName = 'default';
	            }
	            return System.import(module)
	                .then(function (module) { return module[exportName]; })
	                .then(function (type) { return checkNotEmpty(type, module, exportName); })
	                .then(function (type) { return _this._compiler.compileModuleAsync(type); });
	        };
	        /**
	         * @param {?} path
	         * @return {?}
	         */
	        SystemJsNgModuleLoader.prototype.loadFactory = function (path) {
	            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
	            var /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;
	            if (exportName === undefined) {
	                exportName = 'default';
	                factoryClassSuffix = '';
	            }
	            return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)
	                .then(function (module) { return module[exportName + factoryClassSuffix]; })
	                .then(function (factory) { return checkNotEmpty(factory, module, exportName); });
	        };
	        SystemJsNgModuleLoader.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        SystemJsNgModuleLoader.ctorParameters = function () { return [
	            { type: Compiler, },
	            { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },
	        ]; };
	        return SystemJsNgModuleLoader;
	    }());
	    /**
	     * @param {?} value
	     * @param {?} modulePath
	     * @param {?} exportName
	     * @return {?}
	     */
	    function checkNotEmpty(value, modulePath, exportName) {
	        if (!value) {
	            throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
	        }
	        return value;
	    }
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$10 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     *  Represents an Embedded Template that can be used to instantiate Embedded Views.
	      * *
	      * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<template>` element (or
	      * directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into the
	      * constructor of the directive using the `TemplateRef` Token. Alternatively you can query for the
	      * `TemplateRef` from a Component or a Directive via {@link Query}.
	      * *
	      * To instantiate Embedded Views based on a Template, use
	      * {@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the
	      * View Container.
	     * @abstract
	     */
	    var TemplateRef = (function () {
	        function TemplateRef() {
	        }
	        Object.defineProperty(TemplateRef.prototype, "elementRef", {
	            /**
	             * @return {?}
	             */
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @abstract
	         * @param {?} context
	         * @return {?}
	         */
	        TemplateRef.prototype.createEmbeddedView = function (context) { };
	        return TemplateRef;
	    }());
	    var TemplateRef_ = (function (_super) {
	        __extends$10(TemplateRef_, _super);
	        /**
	         * @param {?} _parentView
	         * @param {?} _nodeIndex
	         * @param {?} _nativeElement
	         */
	        function TemplateRef_(_parentView, _nodeIndex, _nativeElement) {
	            _super.call(this);
	            this._parentView = _parentView;
	            this._nodeIndex = _nodeIndex;
	            this._nativeElement = _nativeElement;
	        }
	        /**
	         * @param {?} context
	         * @return {?}
	         */
	        TemplateRef_.prototype.createEmbeddedView = function (context) {
	            var /** @type {?} */ view = this._parentView.createEmbeddedViewInternal(this._nodeIndex);
	            view.create(context || ({}));
	            return view.ref;
	        };
	        Object.defineProperty(TemplateRef_.prototype, "elementRef", {
	            /**
	             * @return {?}
	             */
	            get: function () { return new ElementRef(this._nativeElement); },
	            enumerable: true,
	            configurable: true
	        });
	        return TemplateRef_;
	    }(TemplateRef));
	
	    /**
	     *  Represents a container where one or more Views can be attached.
	      * *
	      * The container can contain two kinds of Views. Host Views, created by instantiating a
	      * {@link Component} via {@link #createComponent}, and Embedded Views, created by instantiating an
	      * {@link TemplateRef Embedded Template} via {@link #createEmbeddedView}.
	      * *
	      * The location of the View Container within the containing View is specified by the Anchor
	      * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
	      * have a single View Container.
	      * *
	      * Root elements of Views attached to this container become siblings of the Anchor Element in
	      * the Rendered View.
	      * *
	      * To access a `ViewContainerRef` of an Element, you can either place a {@link Directive} injected
	      * with `ViewContainerRef` on the Element, or you obtain it via a {@link ViewChild} query.
	     * @abstract
	     */
	    var ViewContainerRef = (function () {
	        function ViewContainerRef() {
	        }
	        Object.defineProperty(ViewContainerRef.prototype, "element", {
	            /**
	             *  Anchor element that specifies the location of this container in the containing View.
	              * <!-- TODO: rename to anchorElement -->
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef.prototype, "parentInjector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         *  Destroys all Views in this container.
	         * @abstract
	         * @return {?}
	         */
	        ViewContainerRef.prototype.clear = function () { };
	        /**
	         *  Returns the {@link ViewRef} for the View located in this container at the specified index.
	         * @abstract
	         * @param {?} index
	         * @return {?}
	         */
	        ViewContainerRef.prototype.get = function (index) { };
	        Object.defineProperty(ViewContainerRef.prototype, "length", {
	            /**
	             *  Returns the number of Views currently attached to this container.
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        /**
	         *  Instantiates an Embedded View based on the {@link TemplateRef `templateRef`} and inserts it
	          * into this container at the specified `index`.
	          * *
	          * If `index` is not specified, the new View will be inserted as the last View in the container.
	          * *
	          * Returns the {@link ViewRef} for the newly created View.
	         * @abstract
	         * @param {?} templateRef
	         * @param {?=} context
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };
	        /**
	         *  Instantiates a single {@link Component} and inserts its Host View into this container at the
	          * specified `index`.
	          * *
	          * The component is instantiated using its {@link ComponentFactory} which can be
	          * obtained via {@link ComponentFactoryResolver#resolveComponentFactory}.
	          * *
	          * If `index` is not specified, the new View will be inserted as the last View in the container.
	          * *
	          * You can optionally specify the {@link Injector} that will be used as parent for the Component.
	          * *
	          * Returns the {@link ComponentRef} of the Host View created for the newly instantiated Component.
	         * @abstract
	         * @param {?} componentFactory
	         * @param {?=} index
	         * @param {?=} injector
	         * @param {?=} projectableNodes
	         * @return {?}
	         */
	        ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) { };
	        /**
	         *  Inserts a View identified by a {@link ViewRef} into the container at the specified `index`.
	          * *
	          * If `index` is not specified, the new View will be inserted as the last View in the container.
	          * *
	          * Returns the inserted {@link ViewRef}.
	         * @abstract
	         * @param {?} viewRef
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef.prototype.insert = function (viewRef, index) { };
	        /**
	         *  Moves a View identified by a {@link ViewRef} into the container at the specified `index`.
	          * *
	          * Returns the inserted {@link ViewRef}.
	         * @abstract
	         * @param {?} viewRef
	         * @param {?} currentIndex
	         * @return {?}
	         */
	        ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };
	        /**
	         *  Returns the index of the View, specified via {@link ViewRef}, within the current container or
	          * `-1` if this container doesn't contain the View.
	         * @abstract
	         * @param {?} viewRef
	         * @return {?}
	         */
	        ViewContainerRef.prototype.indexOf = function (viewRef) { };
	        /**
	         *  Destroys a View attached to this container at the specified `index`.
	          * *
	          * If `index` is not specified, the last View in the container will be removed.
	         * @abstract
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef.prototype.remove = function (index) { };
	        /**
	         *  Use along with {@link #insert} to move a View within the current container.
	          * *
	          * If the `index` param is omitted, the last {@link ViewRef} is detached.
	         * @abstract
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef.prototype.detach = function (index) { };
	        return ViewContainerRef;
	    }());
	    var ViewContainerRef_ = (function () {
	        /**
	         * @param {?} _element
	         */
	        function ViewContainerRef_(_element) {
	            this._element = _element;
	            /** @internal */
	            this._createComponentInContainerScope = wtfCreateScope('ViewContainerRef#createComponent()');
	            /** @internal */
	            this._insertScope = wtfCreateScope('ViewContainerRef#insert()');
	            /** @internal */
	            this._removeScope = wtfCreateScope('ViewContainerRef#remove()');
	            /** @internal */
	            this._detachScope = wtfCreateScope('ViewContainerRef#detach()');
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.get = function (index) { return this._element.nestedViews[index].ref; };
	        Object.defineProperty(ViewContainerRef_.prototype, "length", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ views = this._element.nestedViews;
	                return isPresent(views) ? views.length : 0;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef_.prototype, "element", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._element.elementRef; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef_.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._element.injector; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._element.parentInjector; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} templateRef
	         * @param {?=} context
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {
	            if (context === void 0) { context = null; }
	            if (index === void 0) { index = -1; }
	            var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context);
	            this.insert(viewRef, index);
	            return viewRef;
	        };
	        /**
	         * @param {?} componentFactory
	         * @param {?=} index
	         * @param {?=} injector
	         * @param {?=} projectableNodes
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) {
	            if (index === void 0) { index = -1; }
	            if (injector === void 0) { injector = null; }
	            if (projectableNodes === void 0) { projectableNodes = null; }
	            var /** @type {?} */ s = this._createComponentInContainerScope();
	            var /** @type {?} */ contextInjector = injector || this._element.parentInjector;
	            var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes);
	            this.insert(componentRef.hostView, index);
	            return wtfLeave(s, componentRef);
	        };
	        /**
	         * @param {?} viewRef
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.insert = function (viewRef, index) {
	            if (index === void 0) { index = -1; }
	            var /** @type {?} */ s = this._insertScope();
	            if (index == -1)
	                index = this.length;
	            var /** @type {?} */ viewRef_ = (viewRef);
	            this._element.attachView(viewRef_.internalView, index);
	            return wtfLeave(s, viewRef_);
	        };
	        /**
	         * @param {?} viewRef
	         * @param {?} currentIndex
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {
	            var /** @type {?} */ s = this._insertScope();
	            if (currentIndex == -1)
	                return;
	            var /** @type {?} */ viewRef_ = (viewRef);
	            this._element.moveView(viewRef_.internalView, currentIndex);
	            return wtfLeave(s, viewRef_);
	        };
	        /**
	         * @param {?} viewRef
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.indexOf = function (viewRef) {
	            return this._element.nestedViews.indexOf(((viewRef)).internalView);
	        };
	        /**
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.remove = function (index) {
	            if (index === void 0) { index = -1; }
	            var /** @type {?} */ s = this._removeScope();
	            if (index == -1)
	                index = this.length - 1;
	            var /** @type {?} */ view = this._element.detachView(index);
	            view.destroy();
	            // view is intentionally not returned to the client.
	            wtfLeave(s);
	        };
	        /**
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.detach = function (index) {
	            if (index === void 0) { index = -1; }
	            var /** @type {?} */ s = this._detachScope();
	            if (index == -1)
	                index = this.length - 1;
	            var /** @type {?} */ view = this._element.detachView(index);
	            return wtfLeave(s, view.ref);
	        };
	        /**
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.clear = function () {
	            for (var /** @type {?} */ i = this.length - 1; i >= 0; i--) {
	                this.remove(i);
	            }
	        };
	        return ViewContainerRef_;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$11 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @abstract
	     */
	    var ViewRef = (function (_super) {
	        __extends$11(ViewRef, _super);
	        function ViewRef() {
	            _super.apply(this, arguments);
	        }
	        /**
	         *  Destroys the view and all of the data structures associated with it.
	         * @abstract
	         * @return {?}
	         */
	        ViewRef.prototype.destroy = function () { };
	        Object.defineProperty(ViewRef.prototype, "destroyed", {
	            /**
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @abstract
	         * @param {?} callback
	         * @return {?}
	         */
	        ViewRef.prototype.onDestroy = function (callback) { };
	        return ViewRef;
	    }(ChangeDetectorRef));
	    /**
	     *  Represents an Angular View.
	      * *
	      * <!-- TODO: move the next two paragraphs to the dev guide -->
	      * A View is a fundamental building block of the application UI. It is the smallest grouping of
	      * Elements which are created and destroyed together.
	      * *
	      * Properties of elements in a View can change, but the structure (number and order) of elements in
	      * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
	      * removing nested Views via a {@link ViewContainerRef}. Each View can contain many View Containers.
	      * <!-- /TODO -->
	      * *
	      * ### Example
	      * *
	      * Given this template...
	      * *
	      * ```
	      * Count: {{items.length}}
	      * <ul>
	      * <li *ngFor="let  item of items">{{item}}</li>
	      * </ul>
	      * ```
	      * *
	      * We have two {@link TemplateRef}s:
	      * *
	      * Outer {@link TemplateRef}:
	      * ```
	      * Count: {{items.length}}
	      * <ul>
	      * <template ngFor let-item [ngForOf]="items"></template>
	      * </ul>
	      * ```
	      * *
	      * Inner {@link TemplateRef}:
	      * ```
	      * <li>{{item}}</li>
	      * ```
	      * *
	      * Notice that the original template is broken down into two separate {@link TemplateRef}s.
	      * *
	      * The outer/inner {@link TemplateRef}s are then assembled into views like so:
	      * *
	      * ```
	      * <!-- ViewRef: outer-0 -->
	      * Count: 2
	      * <ul>
	      * <template view-container-ref></template>
	      * <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
	      * <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
	      * </ul>
	      * <!-- /ViewRef: outer-0 -->
	      * ```
	     * @abstract
	     */
	    var EmbeddedViewRef = (function (_super) {
	        __extends$11(EmbeddedViewRef, _super);
	        function EmbeddedViewRef() {
	            _super.apply(this, arguments);
	        }
	        Object.defineProperty(EmbeddedViewRef.prototype, "context", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
	            /**
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        return EmbeddedViewRef;
	    }(ViewRef));
	    var ViewRef_ = (function () {
	        /**
	         * @param {?} _view
	         * @param {?} animationQueue
	         */
	        function ViewRef_(_view, animationQueue) {
	            this._view = _view;
	            this.animationQueue = animationQueue;
	            this._view = _view;
	            this._originalMode = this._view.cdMode;
	        }
	        Object.defineProperty(ViewRef_.prototype, "internalView", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._view; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewRef_.prototype, "rootNodes", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._view.flatRootNodes; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewRef_.prototype, "context", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._view.context; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewRef_.prototype, "destroyed", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._view.destroyed; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        ViewRef_.prototype.markForCheck = function () { this._view.markPathToRootAsCheckOnce(); };
	        /**
	         * @return {?}
	         */
	        ViewRef_.prototype.detach = function () { this._view.cdMode = ChangeDetectorStatus.Detached; };
	        /**
	         * @return {?}
	         */
	        ViewRef_.prototype.detectChanges = function () {
	            this._view.detectChanges(false);
	            this.animationQueue.flush();
	        };
	        /**
	         * @return {?}
	         */
	        ViewRef_.prototype.checkNoChanges = function () { this._view.detectChanges(true); };
	        /**
	         * @return {?}
	         */
	        ViewRef_.prototype.reattach = function () {
	            this._view.cdMode = this._originalMode;
	            this.markForCheck();
	        };
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        ViewRef_.prototype.onDestroy = function (callback) {
	            if (!this._view.disposables) {
	                this._view.disposables = [];
	            }
	            this._view.disposables.push(callback);
	        };
	        /**
	         * @return {?}
	         */
	        ViewRef_.prototype.destroy = function () { this._view.detachAndDestroy(); };
	        return ViewRef_;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$12 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var EventListener = (function () {
	        /**
	         * @param {?} name
	         * @param {?} callback
	         */
	        function EventListener(name, callback) {
	            this.name = name;
	            this.callback = callback;
	        }
	        ;
	        return EventListener;
	    }());
	    /**
	     * @experimental All debugging apis are currently experimental.
	     */
	    var DebugNode = (function () {
	        /**
	         * @param {?} nativeNode
	         * @param {?} parent
	         * @param {?} _debugInfo
	         */
	        function DebugNode(nativeNode, parent, _debugInfo) {
	            this._debugInfo = _debugInfo;
	            this.nativeNode = nativeNode;
	            if (parent && parent instanceof DebugElement) {
	                parent.addChild(this);
	            }
	            else {
	                this.parent = null;
	            }
	            this.listeners = [];
	        }
	        Object.defineProperty(DebugNode.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._debugInfo ? this._debugInfo.injector : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "componentInstance", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._debugInfo ? this._debugInfo.component : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "context", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._debugInfo ? this._debugInfo.context : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "references", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._debugInfo ? this._debugInfo.references : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "providerTokens", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._debugInfo ? this._debugInfo.providerTokens : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "source", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._debugInfo ? this._debugInfo.source : null; },
	            enumerable: true,
	            configurable: true
	        });
	        return DebugNode;
	    }());
	    /**
	     * @experimental All debugging apis are currently experimental.
	     */
	    var DebugElement = (function (_super) {
	        __extends$12(DebugElement, _super);
	        /**
	         * @param {?} nativeNode
	         * @param {?} parent
	         * @param {?} _debugInfo
	         */
	        function DebugElement(nativeNode, parent, _debugInfo) {
	            _super.call(this, nativeNode, parent, _debugInfo);
	            this.properties = {};
	            this.attributes = {};
	            this.classes = {};
	            this.styles = {};
	            this.childNodes = [];
	            this.nativeElement = nativeNode;
	        }
	        /**
	         * @param {?} child
	         * @return {?}
	         */
	        DebugElement.prototype.addChild = function (child) {
	            if (child) {
	                this.childNodes.push(child);
	                child.parent = this;
	            }
	        };
	        /**
	         * @param {?} child
	         * @return {?}
	         */
	        DebugElement.prototype.removeChild = function (child) {
	            var /** @type {?} */ childIndex = this.childNodes.indexOf(child);
	            if (childIndex !== -1) {
	                child.parent = null;
	                this.childNodes.splice(childIndex, 1);
	            }
	        };
	        /**
	         * @param {?} child
	         * @param {?} newChildren
	         * @return {?}
	         */
	        DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {
	            var /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);
	            if (siblingIndex !== -1) {
	                var /** @type {?} */ previousChildren = this.childNodes.slice(0, siblingIndex + 1);
	                var /** @type {?} */ nextChildren = this.childNodes.slice(siblingIndex + 1);
	                this.childNodes = previousChildren.concat(newChildren, nextChildren);
	                for (var /** @type {?} */ i = 0; i < newChildren.length; ++i) {
	                    var /** @type {?} */ newChild = newChildren[i];
	                    if (newChild.parent) {
	                        newChild.parent.removeChild(newChild);
	                    }
	                    newChild.parent = this;
	                }
	            }
	        };
	        /**
	         * @param {?} predicate
	         * @return {?}
	         */
	        DebugElement.prototype.query = function (predicate) {
	            var /** @type {?} */ results = this.queryAll(predicate);
	            return results[0] || null;
	        };
	        /**
	         * @param {?} predicate
	         * @return {?}
	         */
	        DebugElement.prototype.queryAll = function (predicate) {
	            var /** @type {?} */ matches = [];
	            _queryElementChildren(this, predicate, matches);
	            return matches;
	        };
	        /**
	         * @param {?} predicate
	         * @return {?}
	         */
	        DebugElement.prototype.queryAllNodes = function (predicate) {
	            var /** @type {?} */ matches = [];
	            _queryNodeChildren(this, predicate, matches);
	            return matches;
	        };
	        Object.defineProperty(DebugElement.prototype, "children", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} eventName
	         * @param {?} eventObj
	         * @return {?}
	         */
	        DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {
	            this.listeners.forEach(function (listener) {
	                if (listener.name == eventName) {
	                    listener.callback(eventObj);
	                }
	            });
	        };
	        return DebugElement;
	    }(DebugNode));
	    /**
	     * @param {?} debugEls
	     * @return {?}
	     */
	    function asNativeElements(debugEls) {
	        return debugEls.map(function (el) { return el.nativeElement; });
	    }
	    /**
	     * @param {?} element
	     * @param {?} predicate
	     * @param {?} matches
	     * @return {?}
	     */
	    function _queryElementChildren(element, predicate, matches) {
	        element.childNodes.forEach(function (node) {
	            if (node instanceof DebugElement) {
	                if (predicate(node)) {
	                    matches.push(node);
	                }
	                _queryElementChildren(node, predicate, matches);
	            }
	        });
	    }
	    /**
	     * @param {?} parentNode
	     * @param {?} predicate
	     * @param {?} matches
	     * @return {?}
	     */
	    function _queryNodeChildren(parentNode, predicate, matches) {
	        if (parentNode instanceof DebugElement) {
	            parentNode.childNodes.forEach(function (node) {
	                if (predicate(node)) {
	                    matches.push(node);
	                }
	                if (node instanceof DebugElement) {
	                    _queryNodeChildren(node, predicate, matches);
	                }
	            });
	        }
	    }
	    // Need to keep the nodes in a global Map so that multiple angular apps are supported.
	    var /** @type {?} */ _nativeNodeToDebugNode = new Map();
	    /**
	     * @param {?} nativeNode
	     * @return {?}
	     */
	    function getDebugNode(nativeNode) {
	        return _nativeNodeToDebugNode.get(nativeNode);
	    }
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    function indexDebugNode(node) {
	        _nativeNodeToDebugNode.set(node.nativeNode, node);
	    }
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    function removeDebugNodeFromIndex(node) {
	        _nativeNodeToDebugNode.delete(node.nativeNode);
	    }
	
	    /**
	     * @return {?}
	     */
	    function _reflector() {
	        return reflector;
	    }
	    var /** @type {?} */ _CORE_PLATFORM_PROVIDERS = [
	        PlatformRef_,
	        { provide: PlatformRef, useExisting: PlatformRef_ },
	        { provide: Reflector, useFactory: _reflector, deps: [] },
	        { provide: ReflectorReader, useExisting: Reflector },
	        TestabilityRegistry,
	        Console,
	    ];
	    /**
	     * This platform has to be included in any other platform
	     *
	     * @experimental
	     */
	    var /** @type {?} */ platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);
	
	    /**
	     * @experimental i18n support is experimental.
	     */
	    var /** @type {?} */ LOCALE_ID = new OpaqueToken('LocaleId');
	    /**
	     * @experimental i18n support is experimental.
	     */
	    var /** @type {?} */ TRANSLATIONS = new OpaqueToken('Translations');
	    /**
	     * @experimental i18n support is experimental.
	     */
	    var /** @type {?} */ TRANSLATIONS_FORMAT = new OpaqueToken('TranslationsFormat');
	
	    /**
	     * @return {?}
	     */
	    function _iterableDiffersFactory() {
	        return defaultIterableDiffers;
	    }
	    /**
	     * @return {?}
	     */
	    function _keyValueDiffersFactory() {
	        return defaultKeyValueDiffers;
	    }
	    /**
	     *  This module includes the providers of @angular/core that are needed
	      * to bootstrap components via `ApplicationRef`.
	      * *
	     */
	    var ApplicationModule = (function () {
	        function ApplicationModule() {
	        }
	        ApplicationModule.decorators = [
	            { type: NgModule, args: [{
	                        providers: [
	                            ApplicationRef_,
	                            { provide: ApplicationRef, useExisting: ApplicationRef_ },
	                            ApplicationInitStatus,
	                            Compiler,
	                            APP_ID_RANDOM_PROVIDER,
	                            ViewUtils,
	                            AnimationQueue,
	                            { provide: IterableDiffers, useFactory: _iterableDiffersFactory },
	                            { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },
	                            { provide: LOCALE_ID, useValue: 'en-US' },
	                        ]
	                    },] },
	        ];
	        /** @nocollapse */
	        ApplicationModule.ctorParameters = function () { return []; };
	        return ApplicationModule;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var /** @type {?} */ FILL_STYLE_FLAG = 'true'; // TODO (matsko): change to boolean
	    var /** @type {?} */ ANY_STATE = '*';
	    var /** @type {?} */ DEFAULT_STATE = '*';
	    var /** @type {?} */ EMPTY_STATE = 'void';
	
	    var AnimationGroupPlayer = (function () {
	        /**
	         * @param {?} _players
	         */
	        function AnimationGroupPlayer(_players) {
	            var _this = this;
	            this._players = _players;
	            this._onDoneFns = [];
	            this._onStartFns = [];
	            this._finished = false;
	            this._started = false;
	            this._destroyed = false;
	            this.parentPlayer = null;
	            var count = 0;
	            var total = this._players.length;
	            if (total == 0) {
	                scheduleMicroTask(function () { return _this._onFinish(); });
	            }
	            else {
	                this._players.forEach(function (player) {
	                    player.parentPlayer = _this;
	                    player.onDone(function () {
	                        if (++count >= total) {
	                            _this._onFinish();
	                        }
	                    });
	                });
	            }
	        }
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype._onFinish = function () {
	            if (!this._finished) {
	                this._finished = true;
	                this._onDoneFns.forEach(function (fn) { return fn(); });
	                this._onDoneFns = [];
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.hasStarted = function () { return this._started; };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.play = function () {
	            if (!isPresent(this.parentPlayer)) {
	                this.init();
	            }
	            if (!this.hasStarted()) {
	                this._onStartFns.forEach(function (fn) { return fn(); });
	                this._onStartFns = [];
	                this._started = true;
	            }
	            this._players.forEach(function (player) { return player.play(); });
	        };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.pause = function () { this._players.forEach(function (player) { return player.pause(); }); };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.restart = function () { this._players.forEach(function (player) { return player.restart(); }); };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.finish = function () {
	            this._onFinish();
	            this._players.forEach(function (player) { return player.finish(); });
	        };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.destroy = function () {
	            if (!this._destroyed) {
	                this._onFinish();
	                this._players.forEach(function (player) { return player.destroy(); });
	                this._destroyed = true;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.reset = function () {
	            this._players.forEach(function (player) { return player.reset(); });
	            this._destroyed = false;
	            this._finished = false;
	            this._started = false;
	        };
	        /**
	         * @param {?} p
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.setPosition = function (p) {
	            this._players.forEach(function (player) { player.setPosition(p); });
	        };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.getPosition = function () {
	            var /** @type {?} */ min = 0;
	            this._players.forEach(function (player) {
	                var /** @type {?} */ p = player.getPosition();
	                min = Math.min(p, min);
	            });
	            return min;
	        };
	        Object.defineProperty(AnimationGroupPlayer.prototype, "players", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._players; },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationGroupPlayer;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var AnimationKeyframe = (function () {
	        /**
	         * @param {?} offset
	         * @param {?} styles
	         */
	        function AnimationKeyframe(offset, styles) {
	            this.offset = offset;
	            this.styles = styles;
	        }
	        return AnimationKeyframe;
	    }());
	
	    /**
	     * @abstract
	     */
	    var AnimationPlayer = (function () {
	        function AnimationPlayer() {
	        }
	        /**
	         * @abstract
	         * @param {?} fn
	         * @return {?}
	         */
	        AnimationPlayer.prototype.onDone = function (fn) { };
	        /**
	         * @abstract
	         * @param {?} fn
	         * @return {?}
	         */
	        AnimationPlayer.prototype.onStart = function (fn) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.init = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.hasStarted = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.play = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.pause = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.restart = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.finish = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.destroy = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.reset = function () { };
	        /**
	         * @abstract
	         * @param {?} p
	         * @return {?}
	         */
	        AnimationPlayer.prototype.setPosition = function (p) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.getPosition = function () { };
	        Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", {
	            /**
	             * @return {?}
	             */
	            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },
	            /**
	             * @param {?} player
	             * @return {?}
	             */
	            set: function (player) { throw new Error('NOT IMPLEMENTED: Base Class'); },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationPlayer;
	    }());
	    var NoOpAnimationPlayer = (function () {
	        function NoOpAnimationPlayer() {
	            var _this = this;
	            this._onDoneFns = [];
	            this._onStartFns = [];
	            this._started = false;
	            this.parentPlayer = null;
	            scheduleMicroTask(function () { return _this._onFinish(); });
	        }
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype._onFinish = function () {
	            this._onDoneFns.forEach(function (fn) { return fn(); });
	            this._onDoneFns = [];
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.hasStarted = function () { return this._started; };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.init = function () { };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.play = function () {
	            if (!this.hasStarted()) {
	                this._onStartFns.forEach(function (fn) { return fn(); });
	                this._onStartFns = [];
	            }
	            this._started = true;
	        };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.pause = function () { };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.restart = function () { };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.finish = function () { this._onFinish(); };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.destroy = function () { };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.reset = function () { };
	        /**
	         * @param {?} p
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.setPosition = function (p) { };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.getPosition = function () { return 0; };
	        return NoOpAnimationPlayer;
	    }());
	
	    var AnimationSequencePlayer = (function () {
	        /**
	         * @param {?} _players
	         */
	        function AnimationSequencePlayer(_players) {
	            var _this = this;
	            this._players = _players;
	            this._currentIndex = 0;
	            this._onDoneFns = [];
	            this._onStartFns = [];
	            this._finished = false;
	            this._started = false;
	            this._destroyed = false;
	            this.parentPlayer = null;
	            this._players.forEach(function (player) { player.parentPlayer = _this; });
	            this._onNext(false);
	        }
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype._onNext = function (start) {
	            var _this = this;
	            if (this._finished)
	                return;
	            if (this._players.length == 0) {
	                this._activePlayer = new NoOpAnimationPlayer();
	                scheduleMicroTask(function () { return _this._onFinish(); });
	            }
	            else if (this._currentIndex >= this._players.length) {
	                this._activePlayer = new NoOpAnimationPlayer();
	                this._onFinish();
	            }
	            else {
	                var /** @type {?} */ player = this._players[this._currentIndex++];
	                player.onDone(function () { return _this._onNext(true); });
	                this._activePlayer = player;
	                if (start) {
	                    player.play();
	                }
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype._onFinish = function () {
	            if (!this._finished) {
	                this._finished = true;
	                this._onDoneFns.forEach(function (fn) { return fn(); });
	                this._onDoneFns = [];
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.hasStarted = function () { return this._started; };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.play = function () {
	            if (!isPresent(this.parentPlayer)) {
	                this.init();
	            }
	            if (!this.hasStarted()) {
	                this._onStartFns.forEach(function (fn) { return fn(); });
	                this._onStartFns = [];
	                this._started = true;
	            }
	            this._activePlayer.play();
	        };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.pause = function () { this._activePlayer.pause(); };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.restart = function () {
	            this.reset();
	            if (this._players.length > 0) {
	                this._players[0].restart();
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.reset = function () {
	            this._players.forEach(function (player) { return player.reset(); });
	            this._destroyed = false;
	            this._finished = false;
	            this._started = false;
	        };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.finish = function () {
	            this._onFinish();
	            this._players.forEach(function (player) { return player.finish(); });
	        };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.destroy = function () {
	            if (!this._destroyed) {
	                this._onFinish();
	                this._players.forEach(function (player) { return player.destroy(); });
	                this._destroyed = true;
	                this._activePlayer = new NoOpAnimationPlayer();
	            }
	        };
	        /**
	         * @param {?} p
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.setPosition = function (p) { this._players[0].setPosition(p); };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.getPosition = function () { return this._players[0].getPosition(); };
	        Object.defineProperty(AnimationSequencePlayer.prototype, "players", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._players; },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationSequencePlayer;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$13 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @experimental Animation support is experimental.
	     */
	    var /** @type {?} */ AUTO_STYLE = '*';
	    /**
	     *  Metadata representing the entry of animations.
	      * Instances of this class are provided via the animation DSL when the {@link trigger trigger
	      * animation function} is called.
	      * *
	     */
	    var AnimationEntryMetadata = (function () {
	        /**
	         * @param {?} name
	         * @param {?} definitions
	         */
	        function AnimationEntryMetadata(name, definitions) {
	            this.name = name;
	            this.definitions = definitions;
	        }
	        return AnimationEntryMetadata;
	    }());
	    /**
	     * @abstract
	     */
	    var AnimationStateMetadata = (function () {
	        function AnimationStateMetadata() {
	        }
	        return AnimationStateMetadata;
	    }());
	    /**
	     *  Metadata representing the entry of animations.
	      * Instances of this class are provided via the animation DSL when the {@link state state animation
	      * function} is called.
	      * *
	     */
	    var AnimationStateDeclarationMetadata = (function (_super) {
	        __extends$13(AnimationStateDeclarationMetadata, _super);
	        /**
	         * @param {?} stateNameExpr
	         * @param {?} styles
	         */
	        function AnimationStateDeclarationMetadata(stateNameExpr, styles) {
	            _super.call(this);
	            this.stateNameExpr = stateNameExpr;
	            this.styles = styles;
	        }
	        return AnimationStateDeclarationMetadata;
	    }(AnimationStateMetadata));
	    /**
	     *  Metadata representing the entry of animations.
	      * Instances of this class are provided via the animation DSL when the
	      * {@link transition transition animation function} is called.
	      * *
	     */
	    var AnimationStateTransitionMetadata = (function (_super) {
	        __extends$13(AnimationStateTransitionMetadata, _super);
	        /**
	         * @param {?} stateChangeExpr
	         * @param {?} steps
	         */
	        function AnimationStateTransitionMetadata(stateChangeExpr, steps) {
	            _super.call(this);
	            this.stateChangeExpr = stateChangeExpr;
	            this.steps = steps;
	        }
	        return AnimationStateTransitionMetadata;
	    }(AnimationStateMetadata));
	    /**
	     * @abstract
	     */
	    var AnimationMetadata = (function () {
	        function AnimationMetadata() {
	        }
	        return AnimationMetadata;
	    }());
	    /**
	     *  Metadata representing the entry of animations.
	      * Instances of this class are provided via the animation DSL when the {@link keyframes keyframes
	      * animation function} is called.
	      * *
	     */
	    var AnimationKeyframesSequenceMetadata = (function (_super) {
	        __extends$13(AnimationKeyframesSequenceMetadata, _super);
	        /**
	         * @param {?} steps
	         */
	        function AnimationKeyframesSequenceMetadata(steps) {
	            _super.call(this);
	            this.steps = steps;
	        }
	        return AnimationKeyframesSequenceMetadata;
	    }(AnimationMetadata));
	    /**
	     *  Metadata representing the entry of animations.
	      * Instances of this class are provided via the animation DSL when the {@link style style animation
	      * function} is called.
	      * *
	     */
	    var AnimationStyleMetadata = (function (_super) {
	        __extends$13(AnimationStyleMetadata, _super);
	        /**
	         * @param {?} styles
	         * @param {?=} offset
	         */
	        function AnimationStyleMetadata(styles, offset) {
	            if (offset === void 0) { offset = null; }
	            _super.call(this);
	            this.styles = styles;
	            this.offset = offset;
	        }
	        return AnimationStyleMetadata;
	    }(AnimationMetadata));
	    /**
	     *  Metadata representing the entry of animations.
	      * Instances of this class are provided via the animation DSL when the {@link animate animate
	      * animation function} is called.
	      * *
	     */
	    var AnimationAnimateMetadata = (function (_super) {
	        __extends$13(AnimationAnimateMetadata, _super);
	        /**
	         * @param {?} timings
	         * @param {?} styles
	         */
	        function AnimationAnimateMetadata(timings, styles) {
	            _super.call(this);
	            this.timings = timings;
	            this.styles = styles;
	        }
	        return AnimationAnimateMetadata;
	    }(AnimationMetadata));
	    /**
	     * @abstract
	     */
	    var AnimationWithStepsMetadata = (function (_super) {
	        __extends$13(AnimationWithStepsMetadata, _super);
	        function AnimationWithStepsMetadata() {
	            _super.call(this);
	        }
	        Object.defineProperty(AnimationWithStepsMetadata.prototype, "steps", {
	            /**
	             * @return {?}
	             */
	            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationWithStepsMetadata;
	    }(AnimationMetadata));
	    /**
	     *  Metadata representing the entry of animations.
	      * Instances of this class are provided via the animation DSL when the {@link sequence sequence
	      * animation function} is called.
	      * *
	     */
	    var AnimationSequenceMetadata = (function (_super) {
	        __extends$13(AnimationSequenceMetadata, _super);
	        /**
	         * @param {?} _steps
	         */
	        function AnimationSequenceMetadata(_steps) {
	            _super.call(this);
	            this._steps = _steps;
	        }
	        Object.defineProperty(AnimationSequenceMetadata.prototype, "steps", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._steps; },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationSequenceMetadata;
	    }(AnimationWithStepsMetadata));
	    /**
	     *  Metadata representing the entry of animations.
	      * Instances of this class are provided via the animation DSL when the {@link group group animation
	      * function} is called.
	      * *
	     */
	    var AnimationGroupMetadata = (function (_super) {
	        __extends$13(AnimationGroupMetadata, _super);
	        /**
	         * @param {?} _steps
	         */
	        function AnimationGroupMetadata(_steps) {
	            _super.call(this);
	            this._steps = _steps;
	        }
	        Object.defineProperty(AnimationGroupMetadata.prototype, "steps", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._steps; },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationGroupMetadata;
	    }(AnimationWithStepsMetadata));
	    /**
	     *  `animate` is an animation-specific function that is designed to be used inside of Angular2's
	      * animation
	      * DSL language. If this information is new, please navigate to the
	      * {@link Component#animations-anchor component animations metadata
	      * page} to gain a better understanding of how animations in Angular2 are used.
	      * *
	      * `animate` specifies an animation step that will apply the provided `styles` data for a given
	      * amount of
	      * time based on the provided `timing` expression value. Calls to `animate` are expected to be
	      * used within {@link sequence an animation sequence}, {@link group group}, or {@link transition
	      * transition}.
	      * *
	      * ### Usage
	      * *
	      * The `animate` function accepts two input parameters: `timing` and `styles`:
	      * *
	      * - `timing` is a string based value that can be a combination of a duration with optional
	      * delay and easing values. The format for the expression breaks down to `duration delay easing`
	      * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,
	      * delay=100, easing=ease-out`.
	      * If a numeric value is provided then that will be used as the `duration` value in millisecond
	      * form.
	      * - `styles` is the style input data which can either be a call to {@link style style} or {@link
	      * keyframes keyframes}.
	      * If left empty then the styles from the destination state will be collected and used (this is
	      * useful when
	      * describing an animation step that will complete an animation by {@link
	      * transition#the-final-animate-call animating to the final state}).
	      * *
	      * ```typescript
	      * // various functions for specifying timing data
	      * animate(500, style(...))
	      * animate("1s", style(...))
	      * animate("100ms 0.5s", style(...))
	      * animate("5s ease", style(...))
	      * animate("5s 10ms cubic-bezier(.17,.67,.88,.1)", style(...))
	      * *
	      * // either style() of keyframes() can be used
	      * animate(500, style({ background: "red" }))
	      * animate(500, keyframes([
	      * style({ background: "blue" })),
	      * style({ background: "red" }))
	      * ])
	      * ```
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	      * *
	      * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	      * *
	     * @param {?} timing
	     * @param {?=} styles
	     * @return {?}
	     */
	    function animate(timing, styles) {
	        if (styles === void 0) { styles = null; }
	        var /** @type {?} */ stylesEntry = styles;
	        if (!isPresent(stylesEntry)) {
	            var /** @type {?} */ EMPTY_STYLE = {};
	            stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);
	        }
	        return new AnimationAnimateMetadata(timing, stylesEntry);
	    }
	    /**
	     *  `group` is an animation-specific function that is designed to be used inside of Angular2's
	      * animation
	      * DSL language. If this information is new, please navigate to the
	      * {@link Component#animations-anchor component animations metadata
	      * page} to gain a better understanding of how animations in Angular2 are used.
	      * *
	      * `group` specifies a list of animation steps that are all run in parallel. Grouped animations
	      * are useful when a series of styles must be animated/closed off
	      * at different statrting/ending times.
	      * *
	      * The `group` function can either be used within a {@link sequence sequence} or a {@link transition
	      * transition}
	      * and it will only continue to the next instruction once all of the inner animation steps
	      * have completed.
	      * *
	      * ### Usage
	      * *
	      * The `steps` data that is passed into the `group` animation function can either consist
	      * of {@link style style} or {@link animate animate} function calls. Each call to `style()` or
	      * `animate()`
	      * within a group will be executed instantly (use {@link keyframes keyframes} or a
	      * {@link animate#usage animate() with a delay value} to offset styles to be applied at a later
	      * time).
	      * *
	      * ```typescript
	      * group([
	      * animate("1s", { background: "black" }))
	      * animate("2s", { color: "white" }))
	      * ])
	      * ```
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	      * *
	      * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	      * *
	     * @param {?} steps
	     * @return {?}
	     */
	    function group(steps) {
	        return new AnimationGroupMetadata(steps);
	    }
	    /**
	     *  `sequence` is an animation-specific function that is designed to be used inside of Angular2's
	      * animation
	      * DSL language. If this information is new, please navigate to the
	      * {@link Component#animations-anchor component animations metadata
	      * page} to gain a better understanding of how animations in Angular2 are used.
	      * *
	      * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used
	      * by default when an array is passed as animation data into {@link transition transition}.)
	      * *
	      * The `sequence` function can either be used within a {@link group group} or a {@link transition
	      * transition}
	      * and it will only continue to the next instruction once each of the inner animation steps
	      * have completed.
	      * *
	      * To perform animation styling in parallel with other animation steps then
	      * have a look at the {@link group group} animation function.
	      * *
	      * ### Usage
	      * *
	      * The `steps` data that is passed into the `sequence` animation function can either consist
	      * of {@link style style} or {@link animate animate} function calls. A call to `style()` will apply
	      * the
	      * provided styling data immediately while a call to `animate()` will apply its styling
	      * data over a given time depending on its timing data.
	      * *
	      * ```typescript
	      * sequence([
	      * style({ opacity: 0 })),
	      * animate("1s", { opacity: 1 }))
	      * ])
	      * ```
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	      * *
	      * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	      * *
	     * @param {?} steps
	     * @return {?}
	     */
	    function sequence(steps) {
	        return new AnimationSequenceMetadata(steps);
	    }
	    /**
	     *  `style` is an animation-specific function that is designed to be used inside of Angular2's
	      * animation
	      * DSL language. If this information is new, please navigate to the
	      * {@link Component#animations-anchor component animations metadata
	      * page} to gain a better understanding of how animations in Angular2 are used.
	      * *
	      * `style` declares a key/value object containing CSS properties/styles that can then
	      * be used for {@link state animation states}, within an {@link sequence animation sequence}, or as
	      * styling data for both {@link animate animate} and {@link keyframes keyframes}.
	      * *
	      * ### Usage
	      * *
	      * `style` takes in a key/value string map as data and expects one or more CSS property/value
	      * pairs to be defined.
	      * *
	      * ```typescript
	      * // string values are used for css properties
	      * style({ background: "red", color: "blue" })
	      * *
	      * // numerical (pixel) values are also supported
	      * style({ width: 100, height: 0 })
	      * ```
	      * *
	      * #### Auto-styles (using `*`)
	      * *
	      * When an asterix (`*`) character is used as a value then it will be detected from the element
	      * being animated
	      * and applied as animation data when the animation starts.
	      * *
	      * This feature proves useful for a state depending on layout and/or environment factors; in such
	      * cases
	      * the styles are calculated just before the animation starts.
	      * *
	      * ```typescript
	      * // the steps below will animate from 0 to the
	      * // actual height of the element
	      * style({ height: 0 }),
	      * animate("1s", style({ height: "*" }))
	      * ```
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	      * *
	      * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	      * *
	     * @param {?} tokens
	     * @return {?}
	     */
	    function style(tokens) {
	        var /** @type {?} */ input;
	        var /** @type {?} */ offset = null;
	        if (typeof tokens === 'string') {
	            input = [(tokens)];
	        }
	        else {
	            if (Array.isArray(tokens)) {
	                input = (tokens);
	            }
	            else {
	                input = [(tokens)];
	            }
	            input.forEach(function (entry) {
	                var /** @type {?} */ entryOffset = ((entry) /** TODO #9100 */)['offset'];
	                if (isPresent(entryOffset)) {
	                    offset = offset == null ? parseFloat(entryOffset) : offset;
	                }
	            });
	        }
	        return new AnimationStyleMetadata(input, offset);
	    }
	    /**
	     *  `state` is an animation-specific function that is designed to be used inside of Angular2's
	      * animation
	      * DSL language. If this information is new, please navigate to the
	      * {@link Component#animations-anchor component animations metadata
	      * page} to gain a better understanding of how animations in Angular2 are used.
	      * *
	      * `state` declares an animation state within the given trigger. When a state is
	      * active within a component then its associated styles will persist on
	      * the element that the trigger is attached to (even when the animation ends).
	      * *
	      * To animate between states, have a look at the animation {@link transition transition}
	      * DSL function. To register states to an animation trigger please have a look
	      * at the {@link trigger trigger} function.
	      * *
	      * #### The `void` state
	      * *
	      * The `void` state value is a reserved word that angular uses to determine when the element is not
	      * apart
	      * of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the
	      * associated element
	      * is void).
	      * *
	      * #### The `*` (default) state
	      * *
	      * The `*` state (when styled) is a fallback state that will be used if
	      * the state that is being animated is not declared within the trigger.
	      * *
	      * ### Usage
	      * *
	      * `state` will declare an animation state with its associated styles
	      * within the given trigger.
	      * *
	      * - `stateNameExpr` can be one or more state names separated by commas.
	      * - `styles` refers to the {@link style styling data} that will be persisted on the element once
	      * the state
	      * has been reached.
	      * *
	      * ```typescript
	      * // "void" is a reserved name for a state and is used to represent
	      * // the state in which an element is detached from from the application.
	      * state("void", style({ height: 0 }))
	      * *
	      * // user-defined states
	      * state("closed", style({ height: 0 }))
	      * state("open, visible", style({ height: "*" }))
	      * ```
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	      * *
	      * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	      * *
	     * @param {?} stateNameExpr
	     * @param {?} styles
	     * @return {?}
	     */
	    function state(stateNameExpr, styles) {
	        return new AnimationStateDeclarationMetadata(stateNameExpr, styles);
	    }
	    /**
	     *  `keyframes` is an animation-specific function that is designed to be used inside of Angular2's
	      * animation
	      * DSL language. If this information is new, please navigate to the
	      * {@link Component#animations-anchor component animations metadata
	      * page} to gain a better understanding of how animations in Angular2 are used.
	      * *
	      * `keyframes` specifies a collection of {@link style style} entries each optionally characterized
	      * by an `offset` value.
	      * *
	      * ### Usage
	      * *
	      * The `keyframes` animation function is designed to be used alongside the {@link animate animate}
	      * animation function. Instead of applying animations from where they are
	      * currently to their destination, keyframes can describe how each style entry is applied
	      * and at what point within the animation arc (much like CSS Keyframe Animations do).
	      * *
	      * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at
	      * what percentage of the animate time the styles will be applied.
	      * *
	      * ```typescript
	      * // the provided offset values describe when each backgroundColor value is applied.
	      * animate("5s", keyframes([
	      * style({ backgroundColor: "red", offset: 0 }),
	      * style({ backgroundColor: "blue", offset: 0.2 }),
	      * style({ backgroundColor: "orange", offset: 0.3 }),
	      * style({ backgroundColor: "black", offset: 1 })
	      * ]))
	      * ```
	      * *
	      * Alternatively, if there are no `offset` values used within the style entries then the offsets
	      * will
	      * be calculated automatically.
	      * *
	      * ```typescript
	      * animate("5s", keyframes([
	      * style({ backgroundColor: "red" }) // offset = 0
	      * style({ backgroundColor: "blue" }) // offset = 0.33
	      * style({ backgroundColor: "orange" }) // offset = 0.66
	      * style({ backgroundColor: "black" }) // offset = 1
	      * ]))
	      * ```
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	      * *
	      * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	      * *
	     * @param {?} steps
	     * @return {?}
	     */
	    function keyframes(steps) {
	        return new AnimationKeyframesSequenceMetadata(steps);
	    }
	    /**
	     *  `transition` is an animation-specific function that is designed to be used inside of Angular2's
	      * animation
	      * DSL language. If this information is new, please navigate to the
	      * {@link Component#animations-anchor component animations metadata
	      * page} to gain a better understanding of how animations in Angular2 are used.
	      * *
	      * `transition` declares the {@link sequence sequence of animation steps} that will be run when the
	      * provided
	      * `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 => state2`
	      * which consists
	      * of two known states (use an asterix (`*`) to refer to a dynamic starting and/or ending state).
	      * *
	      * Animation transitions are placed within an {@link trigger animation trigger}. For an transition
	      * to animate to
	      * a state value and persist its styles then one or more {@link state animation states} is expected
	      * to be defined.
	      * *
	      * ### Usage
	      * *
	      * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on
	      * what the
	      * previous state is and what the current state has become. In other words, if a transition is
	      * defined that
	      * matches the old/current state criteria then the associated animation will be triggered.
	      * *
	      * ```typescript
	      * // all transition/state changes are defined within an animation trigger
	      * trigger("myAnimationTrigger", [
	      * // if a state is defined then its styles will be persisted when the
	      * // animation has fully completed itself
	      * state("on", style({ background: "green" })),
	      * state("off", style({ background: "grey" })),
	      * *
	      * // a transition animation that will be kicked off when the state value
	      * // bound to "myAnimationTrigger" changes from "on" to "off"
	      * transition("on => off", animate(500)),
	      * *
	      * // it is also possible to do run the same animation for both directions
	      * transition("on <=> off", animate(500)),
	      * *
	      * // or to define multiple states pairs separated by commas
	      * transition("on => off, off => void", animate(500)),
	      * *
	      * // this is a catch-all state change for when an element is inserted into
	      * // the page and the destination state is unknown
	      * transition("void => *", [
	      * style({ opacity: 0 }),
	      * animate(500)
	      * ]),
	      * *
	      * // this will capture a state change between any states
	      * transition("* => *", animate("1s 0s")),
	      * ])
	      * ```
	      * *
	      * The template associated with this component will make use of the `myAnimationTrigger`
	      * animation trigger by binding to an element within its template code.
	      * *
	      * ```html
	      * <!-- somewhere inside of my-component-tpl.html -->
	      * <div [@myAnimationTrigger]="myStatusExp">...</div>
	      * ```
	      * *
	      * #### The final `animate` call
	      * *
	      * If the final step within the transition steps is a call to `animate()` that **only**
	      * uses a timing value with **no style data** then it will be automatically used as the final
	      * animation
	      * arc for the element to animate itself to the final state. This involves an automatic mix of
	      * adding/removing CSS styles so that the element will be in the exact state it should be for the
	      * applied state to be presented correctly.
	      * *
	      * ```
	      * // start off by hiding the element, but make sure that it animates properly to whatever state
	      * // is currently active for "myAnimationTrigger"
	      * transition("void => *", [
	      * style({ opacity: 0 }),
	      * animate(500)
	      * ])
	      * ```
	      * *
	      * ### Transition Aliases (`:enter` and `:leave`)
	      * *
	      * Given that enter (insertion) and leave (removal) animations are so common,
	      * the `transition` function accepts both `:enter` and `:leave` values which
	      * are aliases for the `void => *` and `* => void` state changes.
	      * *
	      * ```
	      * transition(":enter", [
	      * style({ opacity: 0 }),
	      * animate(500, style({ opacity: 1 }))
	      * ])
	      * transition(":leave", [
	      * animate(500, style({ opacity: 0 }))
	      * ])
	      * ```
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	      * *
	      * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	      * *
	     * @param {?} stateChangeExpr
	     * @param {?} steps
	     * @return {?}
	     */
	    function transition(stateChangeExpr, steps) {
	        var /** @type {?} */ animationData = Array.isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;
	        return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);
	    }
	    /**
	     *  `trigger` is an animation-specific function that is designed to be used inside of Angular2's
	      * animation
	      * DSL language. If this information is new, please navigate to the
	      * {@link Component#animations-anchor component animations metadata
	      * page} to gain a better understanding of how animations in Angular2 are used.
	      * *
	      * `trigger` Creates an animation trigger which will a list of {@link state state} and {@link
	      * transition transition}
	      * entries that will be evaluated when the expression bound to the trigger changes.
	      * *
	      * Triggers are registered within the component annotation data under the
	      * {@link Component#animations-anchor animations section}. An animation trigger can
	      * be placed on an element within a template by referencing the name of the
	      * trigger followed by the expression value that the trigger is bound to
	      * (in the form of `[@triggerName]="expression"`.
	      * *
	      * ### Usage
	      * *
	      * `trigger` will create an animation trigger reference based on the provided `name` value.
	      * The provided `animation` value is expected to be an array consisting of {@link state state} and
	      * {@link transition transition}
	      * declarations.
	      * *
	      * ```typescript
	      * selector: 'my-component',
	      * templateUrl: 'my-component-tpl.html',
	      * animations: [
	      * trigger("myAnimationTrigger", [
	      * state(...),
	      * state(...),
	      * transition(...),
	      * transition(...)
	      * ])
	      * ]
	      * })
	      * class MyComponent {
	      * myStatusExp = "something";
	      * }
	      * ```
	      * *
	      * The template associated with this component will make use of the `myAnimationTrigger`
	      * animation trigger by binding to an element within its template code.
	      * *
	      * ```html
	      * <!-- somewhere inside of my-component-tpl.html -->
	      * <div [@myAnimationTrigger]="myStatusExp">...</div>
	      * ```
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	      * *
	      * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	      * *
	     * @param {?} name
	     * @param {?} animation
	     * @return {?}
	     */
	    function trigger(name, animation) {
	        return new AnimationEntryMetadata(name, animation);
	    }
	
	    /**
	     * @param {?} previousStyles
	     * @param {?} newStyles
	     * @param {?=} nullValue
	     * @return {?}
	     */
	    function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {
	        if (nullValue === void 0) { nullValue = null; }
	        var /** @type {?} */ finalStyles = {};
	        Object.keys(newStyles).forEach(function (prop) {
	            var /** @type {?} */ value = newStyles[prop];
	            finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();
	        });
	        Object.keys(previousStyles).forEach(function (prop) {
	            if (!isPresent(finalStyles[prop])) {
	                finalStyles[prop] = nullValue;
	            }
	        });
	        return finalStyles;
	    }
	    /**
	     * @param {?} collectedStyles
	     * @param {?} finalStateStyles
	     * @param {?} keyframes
	     * @return {?}
	     */
	    function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {
	        var /** @type {?} */ limit = keyframes.length - 1;
	        var /** @type {?} */ firstKeyframe = keyframes[0];
	        // phase 1: copy all the styles from the first keyframe into the lookup map
	        var /** @type {?} */ flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);
	        var /** @type {?} */ extraFirstKeyframeStyles = {};
	        var /** @type {?} */ hasExtraFirstStyles = false;
	        Object.keys(collectedStyles).forEach(function (prop) {
	            var /** @type {?} */ value = (collectedStyles[prop]);
	            // if the style is already defined in the first keyframe then
	            // we do not replace it.
	            if (!flatenedFirstKeyframeStyles[prop]) {
	                flatenedFirstKeyframeStyles[prop] = value;
	                extraFirstKeyframeStyles[prop] = value;
	                hasExtraFirstStyles = true;
	            }
	        });
	        var /** @type {?} */ keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);
	        // phase 2: normalize the final keyframe
	        var /** @type {?} */ finalKeyframe = keyframes[limit];
	        finalKeyframe.styles.styles.unshift(finalStateStyles);
	        var /** @type {?} */ flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);
	        var /** @type {?} */ extraFinalKeyframeStyles = {};
	        var /** @type {?} */ hasExtraFinalStyles = false;
	        Object.keys(keyframeCollectedStyles).forEach(function (prop) {
	            if (!isPresent(flatenedFinalKeyframeStyles[prop])) {
	                extraFinalKeyframeStyles[prop] = AUTO_STYLE;
	                hasExtraFinalStyles = true;
	            }
	        });
	        if (hasExtraFinalStyles) {
	            finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);
	        }
	        Object.keys(flatenedFinalKeyframeStyles).forEach(function (prop) {
	            if (!isPresent(flatenedFirstKeyframeStyles[prop])) {
	                extraFirstKeyframeStyles[prop] = AUTO_STYLE;
	                hasExtraFirstStyles = true;
	            }
	        });
	        if (hasExtraFirstStyles) {
	            firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);
	        }
	        collectAndResolveStyles(collectedStyles, [finalStateStyles]);
	        return keyframes;
	    }
	    /**
	     * @param {?} styles
	     * @return {?}
	     */
	    function clearStyles(styles) {
	        var /** @type {?} */ finalStyles = {};
	        Object.keys(styles).forEach(function (key) { finalStyles[key] = null; });
	        return finalStyles;
	    }
	    /**
	     * @param {?} collection
	     * @param {?} styles
	     * @return {?}
	     */
	    function collectAndResolveStyles(collection, styles) {
	        return styles.map(function (entry) {
	            var /** @type {?} */ stylesObj = {};
	            Object.keys(entry).forEach(function (prop) {
	                var /** @type {?} */ value = entry[prop];
	                if (value == FILL_STYLE_FLAG) {
	                    value = collection[prop];
	                    if (!isPresent(value)) {
	                        value = AUTO_STYLE;
	                    }
	                }
	                collection[prop] = value;
	                stylesObj[prop] = value;
	            });
	            return stylesObj;
	        });
	    }
	    /**
	     * @param {?} element
	     * @param {?} renderer
	     * @param {?} styles
	     * @return {?}
	     */
	    function renderStyles(element, renderer, styles) {
	        Object.keys(styles).forEach(function (prop) { renderer.setElementStyle(element, prop, styles[prop]); });
	    }
	    /**
	     * @param {?} styles
	     * @return {?}
	     */
	    function flattenStyles(styles) {
	        var /** @type {?} */ finalStyles = {};
	        styles.forEach(function (entry) {
	            Object.keys(entry).forEach(function (prop) { finalStyles[prop] = (entry[prop]); });
	        });
	        return finalStyles;
	    }
	
	    /**
	     * @license undefined
	      * Copyright Google Inc. All Rights Reserved.
	      * *
	      * Use of this source code is governed by an MIT-style license that can be
	      * found in the LICENSE file at https://angular.io/license
	     */
	    var AnimationStyles = (function () {
	        /**
	         * @param {?} styles
	         */
	        function AnimationStyles(styles) {
	            this.styles = styles;
	        }
	        return AnimationStyles;
	    }());
	
	    /**
	     *  An instance of this class is returned as an event parameter when an animation
	      * callback is captured for an animation either during the start or done phase.
	      * *
	      * ```typescript
	      * host: {
	      * '[@myAnimationTrigger]': 'someExpression',
	      * '(@myAnimationTrigger.start)': 'captureStartEvent($event)',
	      * '(@myAnimationTrigger.done)': 'captureDoneEvent($event)',
	      * },
	      * animations: [
	      * trigger("myAnimationTrigger", [
	      * // ...
	      * ])
	      * ]
	      * })
	      * class MyComponent {
	      * someExpression: any = false;
	      * captureStartEvent(event: AnimationTransitionEvent) {
	      * // the toState, fromState and totalTime data is accessible from the event variable
	      * }
	      * *
	      * captureDoneEvent(event: AnimationTransitionEvent) {
	      * // the toState, fromState and totalTime data is accessible from the event variable
	      * }
	      * }
	      * ```
	      * *
	     */
	    var AnimationTransitionEvent = (function () {
	        /**
	         * @param {?} __0
	         */
	        function AnimationTransitionEvent(_a) {
	            var fromState = _a.fromState, toState = _a.toState, totalTime = _a.totalTime, phaseName = _a.phaseName;
	            this.fromState = fromState;
	            this.toState = toState;
	            this.totalTime = totalTime;
	            this.phaseName = phaseName;
	        }
	        return AnimationTransitionEvent;
	    }());
	
	    var AnimationTransition = (function () {
	        /**
	         * @param {?} _player
	         * @param {?} _fromState
	         * @param {?} _toState
	         * @param {?} _totalTime
	         */
	        function AnimationTransition(_player, _fromState, _toState, _totalTime) {
	            this._player = _player;
	            this._fromState = _fromState;
	            this._toState = _toState;
	            this._totalTime = _totalTime;
	        }
	        /**
	         * @param {?} phaseName
	         * @return {?}
	         */
	        AnimationTransition.prototype._createEvent = function (phaseName) {
	            return new AnimationTransitionEvent({
	                fromState: this._fromState,
	                toState: this._toState,
	                totalTime: this._totalTime,
	                phaseName: phaseName
	            });
	        };
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        AnimationTransition.prototype.onStart = function (callback) {
	            var _this = this;
	            var /** @type {?} */ fn = (Zone.current.wrap(function () { return callback(_this._createEvent('start')); }, 'player.onStart'));
	            this._player.onStart(fn);
	        };
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        AnimationTransition.prototype.onDone = function (callback) {
	            var _this = this;
	            var /** @type {?} */ fn = (Zone.current.wrap(function () { return callback(_this._createEvent('done')); }, 'player.onDone'));
	            this._player.onDone(fn);
	        };
	        return AnimationTransition;
	    }());
	
	    var DebugDomRootRenderer = (function () {
	        /**
	         * @param {?} _delegate
	         */
	        function DebugDomRootRenderer(_delegate) {
	            this._delegate = _delegate;
	        }
	        /**
	         * @param {?} componentProto
	         * @return {?}
	         */
	        DebugDomRootRenderer.prototype.renderComponent = function (componentProto) {
	            return new DebugDomRenderer(this._delegate.renderComponent(componentProto));
	        };
	        return DebugDomRootRenderer;
	    }());
	    var DebugDomRenderer = (function () {
	        /**
	         * @param {?} _delegate
	         */
	        function DebugDomRenderer(_delegate) {
	            this._delegate = _delegate;
	        }
	        /**
	         * @param {?} selectorOrNode
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
	            var /** @type {?} */ nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);
	            var /** @type {?} */ debugEl = new DebugElement(nativeEl, null, debugInfo);
	            indexDebugNode(debugEl);
	            return nativeEl;
	        };
	        /**
	         * @param {?} parentElement
	         * @param {?} name
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.createElement = function (parentElement, name, debugInfo) {
	            var /** @type {?} */ nativeEl = this._delegate.createElement(parentElement, name, debugInfo);
	            var /** @type {?} */ debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);
	            debugEl.name = name;
	            indexDebugNode(debugEl);
	            return nativeEl;
	        };
	        /**
	         * @param {?} hostElement
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.createViewRoot = function (hostElement) { return this._delegate.createViewRoot(hostElement); };
	        /**
	         * @param {?} parentElement
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
	            var /** @type {?} */ comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);
	            var /** @type {?} */ debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);
	            indexDebugNode(debugEl);
	            return comment;
	        };
	        /**
	         * @param {?} parentElement
	         * @param {?} value
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.createText = function (parentElement, value, debugInfo) {
	            var /** @type {?} */ text = this._delegate.createText(parentElement, value, debugInfo);
	            var /** @type {?} */ debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);
	            indexDebugNode(debugEl);
	            return text;
	        };
	        /**
	         * @param {?} parentElement
	         * @param {?} nodes
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.projectNodes = function (parentElement, nodes) {
	            var /** @type {?} */ debugParent = getDebugNode(parentElement);
	            if (isPresent(debugParent) && debugParent instanceof DebugElement) {
	                var /** @type {?} */ debugElement_1 = debugParent;
	                nodes.forEach(function (node) { debugElement_1.addChild(getDebugNode(node)); });
	            }
	            this._delegate.projectNodes(parentElement, nodes);
	        };
	        /**
	         * @param {?} node
	         * @param {?} viewRootNodes
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {
	            var /** @type {?} */ debugNode = getDebugNode(node);
	            if (isPresent(debugNode)) {
	                var /** @type {?} */ debugParent = debugNode.parent;
	                if (viewRootNodes.length > 0 && isPresent(debugParent)) {
	                    var /** @type {?} */ debugViewRootNodes_1 = [];
	                    viewRootNodes.forEach(function (rootNode) { return debugViewRootNodes_1.push(getDebugNode(rootNode)); });
	                    debugParent.insertChildrenAfter(debugNode, debugViewRootNodes_1);
	                }
	            }
	            this._delegate.attachViewAfter(node, viewRootNodes);
	        };
	        /**
	         * @param {?} viewRootNodes
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.detachView = function (viewRootNodes) {
	            viewRootNodes.forEach(function (node) {
	                var /** @type {?} */ debugNode = getDebugNode(node);
	                if (isPresent(debugNode) && isPresent(debugNode.parent)) {
	                    debugNode.parent.removeChild(debugNode);
	                }
	            });
	            this._delegate.detachView(viewRootNodes);
	        };
	        /**
	         * @param {?} hostElement
	         * @param {?} viewAllNodes
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
	            viewAllNodes = viewAllNodes || [];
	            viewAllNodes.forEach(function (node) { removeDebugNodeFromIndex(getDebugNode(node)); });
	            this._delegate.destroyView(hostElement, viewAllNodes);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} name
	         * @param {?} callback
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.listen = function (renderElement, name, callback) {
	            var /** @type {?} */ debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl)) {
	                debugEl.listeners.push(new EventListener(name, callback));
	            }
	            return this._delegate.listen(renderElement, name, callback);
	        };
	        /**
	         * @param {?} target
	         * @param {?} name
	         * @param {?} callback
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.listenGlobal = function (target, name, callback) {
	            return this._delegate.listenGlobal(target, name, callback);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} propertyName
	         * @param {?} propertyValue
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
	            var /** @type {?} */ debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.properties[propertyName] = propertyValue;
	            }
	            this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} attributeName
	         * @param {?} attributeValue
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
	            var /** @type {?} */ debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.attributes[attributeName] = attributeValue;
	            }
	            this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} propertyName
	         * @param {?} propertyValue
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
	            this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} className
	         * @param {?} isAdd
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
	            var /** @type {?} */ debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.classes[className] = isAdd;
	            }
	            this._delegate.setElementClass(renderElement, className, isAdd);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} styleName
	         * @param {?} styleValue
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
	            var /** @type {?} */ debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.styles[styleName] = styleValue;
	            }
	            this._delegate.setElementStyle(renderElement, styleName, styleValue);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} methodName
	         * @param {?=} args
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
	            this._delegate.invokeElementMethod(renderElement, methodName, args);
	        };
	        /**
	         * @param {?} renderNode
	         * @param {?} text
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.setText = function (renderNode, text) { this._delegate.setText(renderNode, text); };
	        /**
	         * @param {?} element
	         * @param {?} startingStyles
	         * @param {?} keyframes
	         * @param {?} duration
	         * @param {?} delay
	         * @param {?} easing
	         * @param {?=} previousPlayers
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
	            if (previousPlayers === void 0) { previousPlayers = []; }
	            return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
	        };
	        return DebugDomRenderer;
	    }());
	
	    var ViewType = {};
	    ViewType.HOST = 0;
	    ViewType.COMPONENT = 1;
	    ViewType.EMBEDDED = 2;
	    ViewType[ViewType.HOST] = "HOST";
	    ViewType[ViewType.COMPONENT] = "COMPONENT";
	    ViewType[ViewType.EMBEDDED] = "EMBEDDED";
	
	    var StaticNodeDebugInfo = (function () {
	        /**
	         * @param {?} providerTokens
	         * @param {?} componentToken
	         * @param {?} refTokens
	         */
	        function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {
	            this.providerTokens = providerTokens;
	            this.componentToken = componentToken;
	            this.refTokens = refTokens;
	        }
	        return StaticNodeDebugInfo;
	    }());
	    var DebugContext = (function () {
	        /**
	         * @param {?} _view
	         * @param {?} _nodeIndex
	         * @param {?} _tplRow
	         * @param {?} _tplCol
	         */
	        function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {
	            this._view = _view;
	            this._nodeIndex = _nodeIndex;
	            this._tplRow = _tplRow;
	            this._tplCol = _tplCol;
	        }
	        Object.defineProperty(DebugContext.prototype, "_staticNodeInfo", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "context", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._view.context; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "component", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;
	                if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {
	                    return this.injector.get(staticNodeInfo.componentToken);
	                }
	                return null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "componentRenderElement", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ componentView = this._view;
	                while (isPresent(componentView.parentView) && componentView.type !== ViewType.COMPONENT) {
	                    componentView = (componentView.parentView);
	                }
	                return componentView.parentElement;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._view.injector(this._nodeIndex); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "renderNode", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                if (isPresent(this._nodeIndex) && this._view.allNodes) {
	                    return this._view.allNodes[this._nodeIndex];
	                }
	                else {
	                    return null;
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "providerTokens", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;
	                return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "source", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._view.componentType.templateUrl + ":" + this._tplRow + ":" + this._tplCol;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "references", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var _this = this;
	                var /** @type {?} */ varValues = {};
	                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;
	                if (isPresent(staticNodeInfo)) {
	                    var /** @type {?} */ refs_1 = staticNodeInfo.refTokens;
	                    Object.keys(refs_1).forEach(function (refName) {
	                        var /** @type {?} */ refToken = refs_1[refName];
	                        var /** @type {?} */ varValue;
	                        if (isBlank(refToken)) {
	                            varValue = _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null;
	                        }
	                        else {
	                            varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);
	                        }
	                        varValues[refName] = varValue;
	                    });
	                }
	                return varValues;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return DebugContext;
	    }());
	
	    var ViewAnimationMap = (function () {
	        function ViewAnimationMap() {
	            this._map = new Map();
	            this._allPlayers = [];
	        }
	        /**
	         * @param {?} element
	         * @param {?} animationName
	         * @return {?}
	         */
	        ViewAnimationMap.prototype.find = function (element, animationName) {
	            var /** @type {?} */ playersByAnimation = this._map.get(element);
	            if (isPresent(playersByAnimation)) {
	                return playersByAnimation[animationName];
	            }
	        };
	        /**
	         * @param {?} element
	         * @return {?}
	         */
	        ViewAnimationMap.prototype.findAllPlayersByElement = function (element) {
	            var /** @type {?} */ el = this._map.get(element);
	            return el ? Object.keys(el).map(function (k) { return el[k]; }) : [];
	        };
	        /**
	         * @param {?} element
	         * @param {?} animationName
	         * @param {?} player
	         * @return {?}
	         */
	        ViewAnimationMap.prototype.set = function (element, animationName, player) {
	            var /** @type {?} */ playersByAnimation = this._map.get(element);
	            if (!isPresent(playersByAnimation)) {
	                playersByAnimation = {};
	            }
	            var /** @type {?} */ existingEntry = playersByAnimation[animationName];
	            if (isPresent(existingEntry)) {
	                this.remove(element, animationName);
	            }
	            playersByAnimation[animationName] = player;
	            this._allPlayers.push(player);
	            this._map.set(element, playersByAnimation);
	        };
	        /**
	         * @return {?}
	         */
	        ViewAnimationMap.prototype.getAllPlayers = function () { return this._allPlayers; };
	        /**
	         * @param {?} element
	         * @param {?} animationName
	         * @param {?=} targetPlayer
	         * @return {?}
	         */
	        ViewAnimationMap.prototype.remove = function (element, animationName, targetPlayer) {
	            if (targetPlayer === void 0) { targetPlayer = null; }
	            var /** @type {?} */ playersByAnimation = this._map.get(element);
	            if (playersByAnimation) {
	                var /** @type {?} */ player = playersByAnimation[animationName];
	                if (!targetPlayer || player === targetPlayer) {
	                    delete playersByAnimation[animationName];
	                    var /** @type {?} */ index = this._allPlayers.indexOf(player);
	                    this._allPlayers.splice(index, 1);
	                    if (Object.keys(playersByAnimation).length === 0) {
	                        this._map.delete(element);
	                    }
	                }
	            }
	        };
	        return ViewAnimationMap;
	    }());
	
	    var AnimationViewContext = (function () {
	        /**
	         * @param {?} _animationQueue
	         */
	        function AnimationViewContext(_animationQueue) {
	            this._animationQueue = _animationQueue;
	            this._players = new ViewAnimationMap();
	        }
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        AnimationViewContext.prototype.onAllActiveAnimationsDone = function (callback) {
	            var /** @type {?} */ activeAnimationPlayers = this._players.getAllPlayers();
	            // we check for the length to avoid having GroupAnimationPlayer
	            // issue an unnecessary microtask when zero players are passed in
	            if (activeAnimationPlayers.length) {
	                new AnimationGroupPlayer(activeAnimationPlayers).onDone(function () { return callback(); });
	            }
	            else {
	                callback();
	            }
	        };
	        /**
	         * @param {?} element
	         * @param {?} animationName
	         * @param {?} player
	         * @return {?}
	         */
	        AnimationViewContext.prototype.queueAnimation = function (element, animationName, player) {
	            var _this = this;
	            this._animationQueue.enqueue(player);
	            this._players.set(element, animationName, player);
	            player.onDone(function () { return _this._players.remove(element, animationName, player); });
	        };
	        /**
	         * @param {?} element
	         * @param {?=} animationName
	         * @return {?}
	         */
	        AnimationViewContext.prototype.getAnimationPlayers = function (element, animationName) {
	            if (animationName === void 0) { animationName = null; }
	            var /** @type {?} */ players = [];
	            if (animationName) {
	                var /** @type {?} */ currentPlayer = this._players.find(element, animationName);
	                if (currentPlayer) {
	                    _recursePlayers(currentPlayer, players);
	                }
	            }
	            else {
	                this._players.findAllPlayersByElement(element).forEach(function (player) { return _recursePlayers(player, players); });
	            }
	            return players;
	        };
	        return AnimationViewContext;
	    }());
	    /**
	     * @param {?} player
	     * @param {?} collectedPlayers
	     * @return {?}
	     */
	    function _recursePlayers(player, collectedPlayers) {
	        if ((player instanceof AnimationGroupPlayer) || (player instanceof AnimationSequencePlayer)) {
	            player.players.forEach(function (player) { return _recursePlayers(player, collectedPlayers); });
	        }
	        else {
	            collectedPlayers.push(player);
	        }
	    }
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$15 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var ElementInjector = (function (_super) {
	        __extends$15(ElementInjector, _super);
	        /**
	         * @param {?} _view
	         * @param {?} _nodeIndex
	         */
	        function ElementInjector(_view, _nodeIndex) {
	            _super.call(this);
	            this._view = _view;
	            this._nodeIndex = _nodeIndex;
	        }
	        /**
	         * @param {?} token
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        ElementInjector.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	            return this._view.injectorGet(token, this._nodeIndex, notFoundValue);
	        };
	        return ElementInjector;
	    }(Injector));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$14 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ _scope_check = wtfCreateScope("AppView#check(ascii id)");
	    /**
	     * @experimental
	     */
	    var /** @type {?} */ EMPTY_CONTEXT$1 = new Object();
	    var /** @type {?} */ UNDEFINED$1 = new Object();
	    /**
	     *  Cost of making objects: http://jsperf.com/instantiate-size-of-object
	      * *
	     * @abstract
	     */
	    var AppView = (function () {
	        /**
	         * @param {?} clazz
	         * @param {?} componentType
	         * @param {?} type
	         * @param {?} viewUtils
	         * @param {?} parentView
	         * @param {?} parentIndex
	         * @param {?} parentElement
	         * @param {?} cdMode
	         * @param {?=} declaredViewContainer
	         */
	        function AppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentElement, cdMode, declaredViewContainer) {
	            if (declaredViewContainer === void 0) { declaredViewContainer = null; }
	            this.clazz = clazz;
	            this.componentType = componentType;
	            this.type = type;
	            this.viewUtils = viewUtils;
	            this.parentView = parentView;
	            this.parentIndex = parentIndex;
	            this.parentElement = parentElement;
	            this.cdMode = cdMode;
	            this.declaredViewContainer = declaredViewContainer;
	            this.numberOfChecks = 0;
	            this.ref = new ViewRef_(this, viewUtils.animationQueue);
	            if (type === ViewType.COMPONENT || type === ViewType.HOST) {
	                this.renderer = viewUtils.renderComponent(componentType);
	            }
	            else {
	                this.renderer = parentView.renderer;
	            }
	            this._directRenderer = this.renderer.directRenderer;
	        }
	        Object.defineProperty(AppView.prototype, "animationContext", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                if (!this._animationContext) {
	                    this._animationContext = new AnimationViewContext(this.viewUtils.animationQueue);
	                }
	                return this._animationContext;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppView.prototype, "destroyed", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.cdMode === ChangeDetectorStatus.Destroyed; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} context
	         * @return {?}
	         */
	        AppView.prototype.create = function (context) {
	            this.context = context;
	            return this.createInternal(null);
	        };
	        /**
	         * @param {?} rootSelectorOrNode
	         * @param {?} hostInjector
	         * @param {?} projectableNodes
	         * @return {?}
	         */
	        AppView.prototype.createHostView = function (rootSelectorOrNode, hostInjector, projectableNodes) {
	            this.context = (EMPTY_CONTEXT$1);
	            this._hasExternalHostElement = isPresent(rootSelectorOrNode);
	            this._hostInjector = hostInjector;
	            this._hostProjectableNodes = projectableNodes;
	            return this.createInternal(rootSelectorOrNode);
	        };
	        /**
	         *  Overwritten by implementations.
	          * Returns the ComponentRef for the host element for ViewType.HOST.
	         * @param {?} rootSelectorOrNode
	         * @return {?}
	         */
	        AppView.prototype.createInternal = function (rootSelectorOrNode) { return null; };
	        /**
	         *  Overwritten by implementations.
	         * @param {?} templateNodeIndex
	         * @return {?}
	         */
	        AppView.prototype.createEmbeddedViewInternal = function (templateNodeIndex) { return null; };
	        /**
	         * @param {?} lastRootNode
	         * @param {?} allNodes
	         * @param {?} disposables
	         * @return {?}
	         */
	        AppView.prototype.init = function (lastRootNode, allNodes, disposables) {
	            this.lastRootNode = lastRootNode;
	            this.allNodes = allNodes;
	            this.disposables = disposables;
	            if (this.type === ViewType.COMPONENT) {
	                this.dirtyParentQueriesInternal();
	            }
	        };
	        /**
	         * @param {?} token
	         * @param {?} nodeIndex
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        AppView.prototype.injectorGet = function (token, nodeIndex, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	            var /** @type {?} */ result = UNDEFINED$1;
	            var /** @type {?} */ view = this;
	            while (result === UNDEFINED$1) {
	                if (isPresent(nodeIndex)) {
	                    result = view.injectorGetInternal(token, nodeIndex, UNDEFINED$1);
	                }
	                if (result === UNDEFINED$1 && view.type === ViewType.HOST) {
	                    result = view._hostInjector.get(token, notFoundValue);
	                }
	                nodeIndex = view.parentIndex;
	                view = view.parentView;
	            }
	            return result;
	        };
	        /**
	         *  Overwritten by implementations
	         * @param {?} token
	         * @param {?} nodeIndex
	         * @param {?} notFoundResult
	         * @return {?}
	         */
	        AppView.prototype.injectorGetInternal = function (token, nodeIndex, notFoundResult) {
	            return notFoundResult;
	        };
	        /**
	         * @param {?} nodeIndex
	         * @return {?}
	         */
	        AppView.prototype.injector = function (nodeIndex) { return new ElementInjector(this, nodeIndex); };
	        /**
	         * @return {?}
	         */
	        AppView.prototype.detachAndDestroy = function () {
	            if (this.viewContainer) {
	                this.viewContainer.detachView(this.viewContainer.nestedViews.indexOf(this));
	            }
	            else if (this.appRef) {
	                this.appRef.detachView(this.ref);
	            }
	            else if (this._hasExternalHostElement) {
	                this.detach();
	            }
	            this.destroy();
	        };
	        /**
	         * @return {?}
	         */
	        AppView.prototype.destroy = function () {
	            var _this = this;
	            if (this.cdMode === ChangeDetectorStatus.Destroyed) {
	                return;
	            }
	            var /** @type {?} */ hostElement = this.type === ViewType.COMPONENT ? this.parentElement : null;
	            if (this.disposables) {
	                for (var /** @type {?} */ i = 0; i < this.disposables.length; i++) {
	                    this.disposables[i]();
	                }
	            }
	            this.destroyInternal();
	            this.dirtyParentQueriesInternal();
	            if (this._animationContext) {
	                this._animationContext.onAllActiveAnimationsDone(function () { return _this.renderer.destroyView(hostElement, _this.allNodes); });
	            }
	            else {
	                this.renderer.destroyView(hostElement, this.allNodes);
	            }
	            this.cdMode = ChangeDetectorStatus.Destroyed;
	        };
	        /**
	         *  Overwritten by implementations
	         * @return {?}
	         */
	        AppView.prototype.destroyInternal = function () { };
	        /**
	         *  Overwritten by implementations
	         * @return {?}
	         */
	        AppView.prototype.detachInternal = function () { };
	        /**
	         * @return {?}
	         */
	        AppView.prototype.detach = function () {
	            var _this = this;
	            this.detachInternal();
	            if (this._animationContext) {
	                this._animationContext.onAllActiveAnimationsDone(function () { return _this._renderDetach(); });
	            }
	            else {
	                this._renderDetach();
	            }
	            if (this.declaredViewContainer && this.declaredViewContainer !== this.viewContainer &&
	                this.declaredViewContainer.projectedViews) {
	                var /** @type {?} */ projectedViews = this.declaredViewContainer.projectedViews;
	                var /** @type {?} */ index = projectedViews.indexOf(this);
	                // perf: pop is faster than splice!
	                if (index >= projectedViews.length - 1) {
	                    projectedViews.pop();
	                }
	                else {
	                    projectedViews.splice(index, 1);
	                }
	            }
	            this.appRef = null;
	            this.viewContainer = null;
	            this.dirtyParentQueriesInternal();
	        };
	        /**
	         * @return {?}
	         */
	        AppView.prototype._renderDetach = function () {
	            if (this._directRenderer) {
	                this.visitRootNodesInternal(this._directRenderer.remove, null);
	            }
	            else {
	                this.renderer.detachView(this.flatRootNodes);
	            }
	        };
	        /**
	         * @param {?} appRef
	         * @return {?}
	         */
	        AppView.prototype.attachToAppRef = function (appRef) {
	            if (this.viewContainer) {
	                throw new Error('This view is already attached to a ViewContainer!');
	            }
	            this.appRef = appRef;
	            this.dirtyParentQueriesInternal();
	        };
	        /**
	         * @param {?} viewContainer
	         * @param {?} prevView
	         * @return {?}
	         */
	        AppView.prototype.attachAfter = function (viewContainer, prevView) {
	            if (this.appRef) {
	                throw new Error('This view is already attached directly to the ApplicationRef!');
	            }
	            this._renderAttach(viewContainer, prevView);
	            this.viewContainer = viewContainer;
	            if (this.declaredViewContainer && this.declaredViewContainer !== viewContainer) {
	                if (!this.declaredViewContainer.projectedViews) {
	                    this.declaredViewContainer.projectedViews = [];
	                }
	                this.declaredViewContainer.projectedViews.push(this);
	            }
	            this.dirtyParentQueriesInternal();
	        };
	        /**
	         * @param {?} viewContainer
	         * @param {?} prevView
	         * @return {?}
	         */
	        AppView.prototype.moveAfter = function (viewContainer, prevView) {
	            this._renderAttach(viewContainer, prevView);
	            this.dirtyParentQueriesInternal();
	        };
	        /**
	         * @param {?} viewContainer
	         * @param {?} prevView
	         * @return {?}
	         */
	        AppView.prototype._renderAttach = function (viewContainer, prevView) {
	            var /** @type {?} */ prevNode = prevView ? prevView.lastRootNode : viewContainer.nativeElement;
	            if (this._directRenderer) {
	                var /** @type {?} */ nextSibling = this._directRenderer.nextSibling(prevNode);
	                if (nextSibling) {
	                    this.visitRootNodesInternal(this._directRenderer.insertBefore, nextSibling);
	                }
	                else {
	                    var /** @type {?} */ parentElement = this._directRenderer.parentElement(prevNode);
	                    if (parentElement) {
	                        this.visitRootNodesInternal(this._directRenderer.appendChild, parentElement);
	                    }
	                }
	            }
	            else {
	                this.renderer.attachViewAfter(prevNode, this.flatRootNodes);
	            }
	        };
	        Object.defineProperty(AppView.prototype, "changeDetectorRef", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.ref; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppView.prototype, "flatRootNodes", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ nodes = [];
	                this.visitRootNodesInternal(addToArray, nodes);
	                return nodes;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} parentElement
	         * @param {?} ngContentIndex
	         * @return {?}
	         */
	        AppView.prototype.projectNodes = function (parentElement, ngContentIndex) {
	            if (this._directRenderer) {
	                this.visitProjectedNodes(ngContentIndex, this._directRenderer.appendChild, parentElement);
	            }
	            else {
	                var /** @type {?} */ nodes = [];
	                this.visitProjectedNodes(ngContentIndex, addToArray, nodes);
	                this.renderer.projectNodes(parentElement, nodes);
	            }
	        };
	        /**
	         * @param {?} ngContentIndex
	         * @param {?} cb
	         * @param {?} c
	         * @return {?}
	         */
	        AppView.prototype.visitProjectedNodes = function (ngContentIndex, cb, c) {
	            switch (this.type) {
	                case ViewType.EMBEDDED:
	                    this.parentView.visitProjectedNodes(ngContentIndex, cb, c);
	                    break;
	                case ViewType.COMPONENT:
	                    if (this.parentView.type === ViewType.HOST) {
	                        var /** @type {?} */ nodes = this.parentView._hostProjectableNodes[ngContentIndex] || [];
	                        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	                            cb(nodes[i], c);
	                        }
	                    }
	                    else {
	                        this.parentView.visitProjectableNodesInternal(this.parentIndex, ngContentIndex, cb, c);
	                    }
	                    break;
	            }
	        };
	        /**
	         *  Overwritten by implementations
	         * @param {?} cb
	         * @param {?} c
	         * @return {?}
	         */
	        AppView.prototype.visitRootNodesInternal = function (cb, c) { };
	        /**
	         *  Overwritten by implementations
	         * @param {?} nodeIndex
	         * @param {?} ngContentIndex
	         * @param {?} cb
	         * @param {?} c
	         * @return {?}
	         */
	        AppView.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, c) { };
	        /**
	         *  Overwritten by implementations
	         * @return {?}
	         */
	        AppView.prototype.dirtyParentQueriesInternal = function () { };
	        /**
	         * @param {?} throwOnChange
	         * @return {?}
	         */
	        AppView.prototype.internalDetectChanges = function (throwOnChange) {
	            if (this.cdMode !== ChangeDetectorStatus.Detached) {
	                this.detectChanges(throwOnChange);
	            }
	        };
	        /**
	         * @param {?} throwOnChange
	         * @return {?}
	         */
	        AppView.prototype.detectChanges = function (throwOnChange) {
	            var /** @type {?} */ s = _scope_check(this.clazz);
	            if (this.cdMode === ChangeDetectorStatus.Checked ||
	                this.cdMode === ChangeDetectorStatus.Errored)
	                return;
	            if (this.cdMode === ChangeDetectorStatus.Destroyed) {
	                this.throwDestroyedError('detectChanges');
	            }
	            this.detectChangesInternal(throwOnChange);
	            if (this.cdMode === ChangeDetectorStatus.CheckOnce)
	                this.cdMode = ChangeDetectorStatus.Checked;
	            this.numberOfChecks++;
	            wtfLeave(s);
	        };
	        /**
	         *  Overwritten by implementations
	         * @param {?} throwOnChange
	         * @return {?}
	         */
	        AppView.prototype.detectChangesInternal = function (throwOnChange) { };
	        /**
	         * @return {?}
	         */
	        AppView.prototype.markAsCheckOnce = function () { this.cdMode = ChangeDetectorStatus.CheckOnce; };
	        /**
	         * @return {?}
	         */
	        AppView.prototype.markPathToRootAsCheckOnce = function () {
	            var /** @type {?} */ c = this;
	            while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {
	                if (c.cdMode === ChangeDetectorStatus.Checked) {
	                    c.cdMode = ChangeDetectorStatus.CheckOnce;
	                }
	                if (c.type === ViewType.COMPONENT) {
	                    c = c.parentView;
	                }
	                else {
	                    c = c.viewContainer ? c.viewContainer.parentView : null;
	                }
	            }
	        };
	        /**
	         * @param {?} cb
	         * @return {?}
	         */
	        AppView.prototype.eventHandler = function (cb) {
	            return cb;
	        };
	        /**
	         * @param {?} details
	         * @return {?}
	         */
	        AppView.prototype.throwDestroyedError = function (details) { throw new ViewDestroyedError(details); };
	        return AppView;
	    }());
	    var DebugAppView = (function (_super) {
	        __extends$14(DebugAppView, _super);
	        /**
	         * @param {?} clazz
	         * @param {?} componentType
	         * @param {?} type
	         * @param {?} viewUtils
	         * @param {?} parentView
	         * @param {?} parentIndex
	         * @param {?} parentNode
	         * @param {?} cdMode
	         * @param {?} staticNodeDebugInfos
	         * @param {?=} declaredViewContainer
	         */
	        function DebugAppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, staticNodeDebugInfos, declaredViewContainer) {
	            if (declaredViewContainer === void 0) { declaredViewContainer = null; }
	            _super.call(this, clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, declaredViewContainer);
	            this.staticNodeDebugInfos = staticNodeDebugInfos;
	            this._currentDebugContext = null;
	        }
	        /**
	         * @param {?} context
	         * @return {?}
	         */
	        DebugAppView.prototype.create = function (context) {
	            this._resetDebug();
	            try {
	                return _super.prototype.create.call(this, context);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        /**
	         * @param {?} rootSelectorOrNode
	         * @param {?} injector
	         * @param {?=} projectableNodes
	         * @return {?}
	         */
	        DebugAppView.prototype.createHostView = function (rootSelectorOrNode, injector, projectableNodes) {
	            if (projectableNodes === void 0) { projectableNodes = null; }
	            this._resetDebug();
	            try {
	                return _super.prototype.createHostView.call(this, rootSelectorOrNode, injector, projectableNodes);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        /**
	         * @param {?} token
	         * @param {?} nodeIndex
	         * @param {?=} notFoundResult
	         * @return {?}
	         */
	        DebugAppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {
	            this._resetDebug();
	            try {
	                return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        DebugAppView.prototype.detach = function () {
	            this._resetDebug();
	            try {
	                _super.prototype.detach.call(this);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        DebugAppView.prototype.destroy = function () {
	            this._resetDebug();
	            try {
	                _super.prototype.destroy.call(this);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        /**
	         * @param {?} throwOnChange
	         * @return {?}
	         */
	        DebugAppView.prototype.detectChanges = function (throwOnChange) {
	            this._resetDebug();
	            try {
	                _super.prototype.detectChanges.call(this, throwOnChange);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        DebugAppView.prototype._resetDebug = function () { this._currentDebugContext = null; };
	        /**
	         * @param {?} nodeIndex
	         * @param {?} rowNum
	         * @param {?} colNum
	         * @return {?}
	         */
	        DebugAppView.prototype.debug = function (nodeIndex, rowNum, colNum) {
	            return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);
	        };
	        /**
	         * @param {?} e
	         * @return {?}
	         */
	        DebugAppView.prototype._rethrowWithContext = function (e) {
	            if (!(e instanceof ViewWrappedError)) {
	                if (!(e instanceof ExpressionChangedAfterItHasBeenCheckedError)) {
	                    this.cdMode = ChangeDetectorStatus.Errored;
	                }
	                if (isPresent(this._currentDebugContext)) {
	                    throw new ViewWrappedError(e, this._currentDebugContext);
	                }
	            }
	        };
	        /**
	         * @param {?} cb
	         * @return {?}
	         */
	        DebugAppView.prototype.eventHandler = function (cb) {
	            var _this = this;
	            var /** @type {?} */ superHandler = _super.prototype.eventHandler.call(this, cb);
	            return function (eventName, event) {
	                _this._resetDebug();
	                try {
	                    return superHandler.call(_this, eventName, event);
	                }
	                catch (e) {
	                    _this._rethrowWithContext(e);
	                    throw e;
	                }
	            };
	        };
	        return DebugAppView;
	    }(AppView));
	
	    /**
	     *  A ViewContainer is created for elements that have a ViewContainerRef
	      * to keep track of the nested views.
	     */
	    var ViewContainer = (function () {
	        /**
	         * @param {?} index
	         * @param {?} parentIndex
	         * @param {?} parentView
	         * @param {?} nativeElement
	         */
	        function ViewContainer(index, parentIndex, parentView, nativeElement) {
	            this.index = index;
	            this.parentIndex = parentIndex;
	            this.parentView = parentView;
	            this.nativeElement = nativeElement;
	        }
	        Object.defineProperty(ViewContainer.prototype, "elementRef", {
	            /**
	             * @return {?}
	             */
	            get: function () { return new ElementRef(this.nativeElement); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainer.prototype, "vcRef", {
	            /**
	             * @return {?}
	             */
	            get: function () { return new ViewContainerRef_(this); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainer.prototype, "parentInjector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.parentView.injector(this.parentIndex); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainer.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.parentView.injector(this.index); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} throwOnChange
	         * @return {?}
	         */
	        ViewContainer.prototype.detectChangesInNestedViews = function (throwOnChange) {
	            if (this.nestedViews) {
	                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
	                    this.nestedViews[i].detectChanges(throwOnChange);
	                }
	            }
	        };
	        /**
	         * @return {?}
	         */
	        ViewContainer.prototype.destroyNestedViews = function () {
	            if (this.nestedViews) {
	                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
	                    this.nestedViews[i].destroy();
	                }
	            }
	        };
	        /**
	         * @param {?} cb
	         * @param {?} c
	         * @return {?}
	         */
	        ViewContainer.prototype.visitNestedViewRootNodes = function (cb, c) {
	            if (this.nestedViews) {
	                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
	                    this.nestedViews[i].visitRootNodesInternal(cb, c);
	                }
	            }
	        };
	        /**
	         * @param {?} nestedViewClass
	         * @param {?} callback
	         * @return {?}
	         */
	        ViewContainer.prototype.mapNestedViews = function (nestedViewClass, callback) {
	            var /** @type {?} */ result = [];
	            if (this.nestedViews) {
	                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
	                    var /** @type {?} */ nestedView = this.nestedViews[i];
	                    if (nestedView.clazz === nestedViewClass) {
	                        result.push(callback(nestedView));
	                    }
	                }
	            }
	            if (this.projectedViews) {
	                for (var /** @type {?} */ i = 0; i < this.projectedViews.length; i++) {
	                    var /** @type {?} */ projectedView = this.projectedViews[i];
	                    if (projectedView.clazz === nestedViewClass) {
	                        result.push(callback(projectedView));
	                    }
	                }
	            }
	            return result;
	        };
	        /**
	         * @param {?} view
	         * @param {?} currentIndex
	         * @return {?}
	         */
	        ViewContainer.prototype.moveView = function (view, currentIndex) {
	            var /** @type {?} */ previousIndex = this.nestedViews.indexOf(view);
	            if (view.type === ViewType.COMPONENT) {
	                throw new Error("Component views can't be moved!");
	            }
	            var /** @type {?} */ nestedViews = this.nestedViews;
	            if (nestedViews == null) {
	                nestedViews = [];
	                this.nestedViews = nestedViews;
	            }
	            nestedViews.splice(previousIndex, 1);
	            nestedViews.splice(currentIndex, 0, view);
	            var /** @type {?} */ prevView = currentIndex > 0 ? nestedViews[currentIndex - 1] : null;
	            view.moveAfter(this, prevView);
	        };
	        /**
	         * @param {?} view
	         * @param {?} viewIndex
	         * @return {?}
	         */
	        ViewContainer.prototype.attachView = function (view, viewIndex) {
	            if (view.type === ViewType.COMPONENT) {
	                throw new Error("Component views can't be moved!");
	            }
	            var /** @type {?} */ nestedViews = this.nestedViews;
	            if (nestedViews == null) {
	                nestedViews = [];
	                this.nestedViews = nestedViews;
	            }
	            // perf: array.push is faster than array.splice!
	            if (viewIndex >= nestedViews.length) {
	                nestedViews.push(view);
	            }
	            else {
	                nestedViews.splice(viewIndex, 0, view);
	            }
	            var /** @type {?} */ prevView = viewIndex > 0 ? nestedViews[viewIndex - 1] : null;
	            view.attachAfter(this, prevView);
	        };
	        /**
	         * @param {?} viewIndex
	         * @return {?}
	         */
	        ViewContainer.prototype.detachView = function (viewIndex) {
	            var /** @type {?} */ view = this.nestedViews[viewIndex];
	            // perf: array.pop is faster than array.splice!
	            if (viewIndex >= this.nestedViews.length - 1) {
	                this.nestedViews.pop();
	            }
	            else {
	                this.nestedViews.splice(viewIndex, 1);
	            }
	            if (view.type === ViewType.COMPONENT) {
	                throw new Error("Component views can't be moved!");
	            }
	            view.detach();
	            return view;
	        };
	        return ViewContainer;
	    }());
	
	    var /** @type {?} */ __core_private__ = {
	        isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,
	        ChangeDetectorStatus: ChangeDetectorStatus,
	        constructDependencies: constructDependencies,
	        LifecycleHooks: LifecycleHooks,
	        LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES,
	        ReflectorReader: ReflectorReader,
	        CodegenComponentFactoryResolver: CodegenComponentFactoryResolver,
	        ComponentRef_: ComponentRef_,
	        ViewContainer: ViewContainer,
	        AppView: AppView,
	        DebugAppView: DebugAppView,
	        NgModuleInjector: NgModuleInjector,
	        registerModuleFactory: registerModuleFactory,
	        ViewType: ViewType,
	        view_utils: view_utils,
	        ViewMetadata: ViewMetadata,
	        DebugContext: DebugContext,
	        StaticNodeDebugInfo: StaticNodeDebugInfo,
	        devModeEqual: devModeEqual,
	        UNINITIALIZED: UNINITIALIZED,
	        ValueUnwrapper: ValueUnwrapper,
	        RenderDebugInfo: RenderDebugInfo,
	        TemplateRef_: TemplateRef_,
	        ReflectionCapabilities: ReflectionCapabilities,
	        makeDecorator: makeDecorator,
	        DebugDomRootRenderer: DebugDomRootRenderer,
	        Console: Console,
	        reflector: reflector,
	        Reflector: Reflector,
	        NoOpAnimationPlayer: NoOpAnimationPlayer,
	        AnimationPlayer: AnimationPlayer,
	        AnimationSequencePlayer: AnimationSequencePlayer,
	        AnimationGroupPlayer: AnimationGroupPlayer,
	        AnimationKeyframe: AnimationKeyframe,
	        prepareFinalAnimationStyles: prepareFinalAnimationStyles,
	        balanceAnimationKeyframes: balanceAnimationKeyframes,
	        flattenStyles: flattenStyles,
	        clearStyles: clearStyles,
	        renderStyles: renderStyles,
	        collectAndResolveStyles: collectAndResolveStyles,
	        APP_ID_RANDOM_PROVIDER: APP_ID_RANDOM_PROVIDER,
	        AnimationStyles: AnimationStyles,
	        ANY_STATE: ANY_STATE,
	        DEFAULT_STATE: DEFAULT_STATE,
	        EMPTY_STATE: EMPTY_STATE,
	        FILL_STYLE_FLAG: FILL_STYLE_FLAG,
	        ComponentStillLoadingError: ComponentStillLoadingError,
	        isPromise: isPromise,
	        AnimationTransition: AnimationTransition
	    };
	
	    exports.createPlatform = createPlatform;
	    exports.assertPlatform = assertPlatform;
	    exports.destroyPlatform = destroyPlatform;
	    exports.getPlatform = getPlatform;
	    exports.PlatformRef = PlatformRef;
	    exports.ApplicationRef = ApplicationRef;
	    exports.enableProdMode = enableProdMode;
	    exports.isDevMode = isDevMode;
	    exports.createPlatformFactory = createPlatformFactory;
	    exports.NgProbeToken = NgProbeToken;
	    exports.APP_ID = APP_ID;
	    exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;
	    exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;
	    exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;
	    exports.APP_INITIALIZER = APP_INITIALIZER;
	    exports.ApplicationInitStatus = ApplicationInitStatus;
	    exports.DebugElement = DebugElement;
	    exports.DebugNode = DebugNode;
	    exports.asNativeElements = asNativeElements;
	    exports.getDebugNode = getDebugNode;
	    exports.Testability = Testability;
	    exports.TestabilityRegistry = TestabilityRegistry;
	    exports.setTestabilityGetter = setTestabilityGetter;
	    exports.TRANSLATIONS = TRANSLATIONS;
	    exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;
	    exports.LOCALE_ID = LOCALE_ID;
	    exports.ApplicationModule = ApplicationModule;
	    exports.wtfCreateScope = wtfCreateScope;
	    exports.wtfLeave = wtfLeave;
	    exports.wtfStartTimeRange = wtfStartTimeRange;
	    exports.wtfEndTimeRange = wtfEndTimeRange;
	    exports.Type = Type;
	    exports.EventEmitter = EventEmitter;
	    exports.ErrorHandler = ErrorHandler;
	    exports.AnimationTransitionEvent = AnimationTransitionEvent;
	    exports.AnimationPlayer = AnimationPlayer;
	    exports.Sanitizer = Sanitizer;
	    exports.SecurityContext = SecurityContext;
	    exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;
	    exports.Attribute = Attribute;
	    exports.ContentChild = ContentChild;
	    exports.ContentChildren = ContentChildren;
	    exports.Query = Query;
	    exports.ViewChild = ViewChild;
	    exports.ViewChildren = ViewChildren;
	    exports.Component = Component;
	    exports.Directive = Directive;
	    exports.HostBinding = HostBinding;
	    exports.HostListener = HostListener;
	    exports.Input = Input;
	    exports.Output = Output;
	    exports.Pipe = Pipe;
	    exports.AfterContentChecked = AfterContentChecked;
	    exports.AfterContentInit = AfterContentInit;
	    exports.AfterViewChecked = AfterViewChecked;
	    exports.AfterViewInit = AfterViewInit;
	    exports.DoCheck = DoCheck;
	    exports.OnChanges = OnChanges;
	    exports.OnDestroy = OnDestroy;
	    exports.OnInit = OnInit;
	    exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;
	    exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;
	    exports.NgModule = NgModule;
	    exports.ViewEncapsulation = ViewEncapsulation;
	    exports.Version = Version;
	    exports.VERSION = VERSION;
	    exports.Class = Class;
	    exports.forwardRef = forwardRef;
	    exports.resolveForwardRef = resolveForwardRef;
	    exports.Injector = Injector;
	    exports.ReflectiveInjector = ReflectiveInjector;
	    exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;
	    exports.ReflectiveKey = ReflectiveKey;
	    exports.OpaqueToken = OpaqueToken;
	    exports.Inject = Inject;
	    exports.Optional = Optional;
	    exports.Injectable = Injectable;
	    exports.Self = Self;
	    exports.SkipSelf = SkipSelf;
	    exports.Host = Host;
	    exports.NgZone = NgZone;
	    exports.RenderComponentType = RenderComponentType;
	    exports.Renderer = Renderer;
	    exports.RootRenderer = RootRenderer;
	    exports.COMPILER_OPTIONS = COMPILER_OPTIONS;
	    exports.Compiler = Compiler;
	    exports.CompilerFactory = CompilerFactory;
	    exports.ModuleWithComponentFactories = ModuleWithComponentFactories;
	    exports.ComponentFactory = ComponentFactory;
	    exports.ComponentRef = ComponentRef;
	    exports.ComponentFactoryResolver = ComponentFactoryResolver;
	    exports.ElementRef = ElementRef;
	    exports.NgModuleFactory = NgModuleFactory;
	    exports.NgModuleRef = NgModuleRef;
	    exports.NgModuleFactoryLoader = NgModuleFactoryLoader;
	    exports.getModuleFactory = getModuleFactory;
	    exports.QueryList = QueryList;
	    exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;
	    exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;
	    exports.TemplateRef = TemplateRef;
	    exports.ViewContainerRef = ViewContainerRef;
	    exports.EmbeddedViewRef = EmbeddedViewRef;
	    exports.ViewRef = ViewRef;
	    exports.ChangeDetectionStrategy = ChangeDetectionStrategy;
	    exports.ChangeDetectorRef = ChangeDetectorRef;
	    exports.CollectionChangeRecord = CollectionChangeRecord;
	    exports.DefaultIterableDiffer = DefaultIterableDiffer;
	    exports.IterableDiffers = IterableDiffers;
	    exports.KeyValueChangeRecord = KeyValueChangeRecord;
	    exports.KeyValueDiffers = KeyValueDiffers;
	    exports.SimpleChange = SimpleChange;
	    exports.WrappedValue = WrappedValue;
	    exports.platformCore = platformCore;
	    exports.__core_private__ = __core_private__;
	    exports.AUTO_STYLE = AUTO_STYLE;
	    exports.AnimationEntryMetadata = AnimationEntryMetadata;
	    exports.AnimationStateMetadata = AnimationStateMetadata;
	    exports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata;
	    exports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata;
	    exports.AnimationMetadata = AnimationMetadata;
	    exports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata;
	    exports.AnimationStyleMetadata = AnimationStyleMetadata;
	    exports.AnimationAnimateMetadata = AnimationAnimateMetadata;
	    exports.AnimationWithStepsMetadata = AnimationWithStepsMetadata;
	    exports.AnimationSequenceMetadata = AnimationSequenceMetadata;
	    exports.AnimationGroupMetadata = AnimationGroupMetadata;
	    exports.animate = animate;
	    exports.group = group;
	    exports.sequence = sequence;
	    exports.style = style;
	    exports.state = state;
	    exports.keyframes = keyframes;
	    exports.transition = transition;
	    exports.trigger = trigger;
	
	}));

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(270);
	var Subscriber_1 = __webpack_require__(273);
	var Subscription_1 = __webpack_require__(275);
	var ObjectUnsubscribedError_1 = __webpack_require__(284);
	var SubjectSubscription_1 = __webpack_require__(285);
	var rxSubscriber_1 = __webpack_require__(282);
	/**
	 * @class SubjectSubscriber<T>
	 */
	var SubjectSubscriber = (function (_super) {
	    __extends(SubjectSubscriber, _super);
	    function SubjectSubscriber(destination) {
	        _super.call(this, destination);
	        this.destination = destination;
	    }
	    return SubjectSubscriber;
	}(Subscriber_1.Subscriber));
	exports.SubjectSubscriber = SubjectSubscriber;
	/**
	 * @class Subject<T>
	 */
	var Subject = (function (_super) {
	    __extends(Subject, _super);
	    function Subject() {
	        _super.call(this);
	        this.observers = [];
	        this.closed = false;
	        this.isStopped = false;
	        this.hasError = false;
	        this.thrownError = null;
	    }
	    Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
	        return new SubjectSubscriber(this);
	    };
	    Subject.prototype.lift = function (operator) {
	        var subject = new AnonymousSubject(this, this);
	        subject.operator = operator;
	        return subject;
	    };
	    Subject.prototype.next = function (value) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        if (!this.isStopped) {
	            var observers = this.observers;
	            var len = observers.length;
	            var copy = observers.slice();
	            for (var i = 0; i < len; i++) {
	                copy[i].next(value);
	            }
	        }
	    };
	    Subject.prototype.error = function (err) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        this.hasError = true;
	        this.thrownError = err;
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].error(err);
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.complete = function () {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].complete();
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.unsubscribe = function () {
	        this.isStopped = true;
	        this.closed = true;
	        this.observers = null;
	    };
	    Subject.prototype._subscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        else if (this.hasError) {
	            subscriber.error(this.thrownError);
	            return Subscription_1.Subscription.EMPTY;
	        }
	        else if (this.isStopped) {
	            subscriber.complete();
	            return Subscription_1.Subscription.EMPTY;
	        }
	        else {
	            this.observers.push(subscriber);
	            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
	        }
	    };
	    Subject.prototype.asObservable = function () {
	        var observable = new Observable_1.Observable();
	        observable.source = this;
	        return observable;
	    };
	    Subject.create = function (destination, source) {
	        return new AnonymousSubject(destination, source);
	    };
	    return Subject;
	}(Observable_1.Observable));
	exports.Subject = Subject;
	/**
	 * @class AnonymousSubject<T>
	 */
	var AnonymousSubject = (function (_super) {
	    __extends(AnonymousSubject, _super);
	    function AnonymousSubject(destination, source) {
	        _super.call(this);
	        this.destination = destination;
	        this.source = source;
	    }
	    AnonymousSubject.prototype.next = function (value) {
	        var destination = this.destination;
	        if (destination && destination.next) {
	            destination.next(value);
	        }
	    };
	    AnonymousSubject.prototype.error = function (err) {
	        var destination = this.destination;
	        if (destination && destination.error) {
	            this.destination.error(err);
	        }
	    };
	    AnonymousSubject.prototype.complete = function () {
	        var destination = this.destination;
	        if (destination && destination.complete) {
	            this.destination.complete();
	        }
	    };
	    AnonymousSubject.prototype._subscribe = function (subscriber) {
	        var source = this.source;
	        if (source) {
	            return this.source.subscribe(subscriber);
	        }
	        else {
	            return Subscription_1.Subscription.EMPTY;
	        }
	    };
	    return AnonymousSubject;
	}(Subject));
	exports.AnonymousSubject = AnonymousSubject;
	//# sourceMappingURL=Subject.js.map

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(271);
	var toSubscriber_1 = __webpack_require__(272);
	var observable_1 = __webpack_require__(283);
	/**
	 * A representation of any set of values over any amount of time. This the most basic building block
	 * of RxJS.
	 *
	 * @class Observable<T>
	 */
	var Observable = (function () {
	    /**
	     * @constructor
	     * @param {Function} subscribe the function that is  called when the Observable is
	     * initially subscribed to. This function is given a Subscriber, to which new values
	     * can be `next`ed, or an `error` method can be called to raise an error, or
	     * `complete` can be called to notify of a successful completion.
	     */
	    function Observable(subscribe) {
	        this._isScalar = false;
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }
	    /**
	     * Creates a new Observable, with this Observable as the source, and the passed
	     * operator defined as the new observable's operator.
	     * @method lift
	     * @param {Operator} operator the operator defining the operation to take on the observable
	     * @return {Observable} a new observable with the Operator applied
	     */
	    Observable.prototype.lift = function (operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };
	    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
	        var operator = this.operator;
	        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
	        if (operator) {
	            operator.call(sink, this);
	        }
	        else {
	            sink.add(this._subscribe(sink));
	        }
	        if (sink.syncErrorThrowable) {
	            sink.syncErrorThrowable = false;
	            if (sink.syncErrorThrown) {
	                throw sink.syncErrorValue;
	            }
	        }
	        return sink;
	    };
	    /**
	     * @method forEach
	     * @param {Function} next a handler for each value emitted by the observable
	     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
	     * @return {Promise} a promise that either resolves on observable completion or
	     *  rejects with the handled error
	     */
	    Observable.prototype.forEach = function (next, PromiseCtor) {
	        var _this = this;
	        if (!PromiseCtor) {
	            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
	                PromiseCtor = root_1.root.Rx.config.Promise;
	            }
	            else if (root_1.root.Promise) {
	                PromiseCtor = root_1.root.Promise;
	            }
	        }
	        if (!PromiseCtor) {
	            throw new Error('no Promise impl found');
	        }
	        return new PromiseCtor(function (resolve, reject) {
	            var subscription = _this.subscribe(function (value) {
	                if (subscription) {
	                    // if there is a subscription, then we can surmise
	                    // the next handling is asynchronous. Any errors thrown
	                    // need to be rejected explicitly and unsubscribe must be
	                    // called manually
	                    try {
	                        next(value);
	                    }
	                    catch (err) {
	                        reject(err);
	                        subscription.unsubscribe();
	                    }
	                }
	                else {
	                    // if there is NO subscription, then we're getting a nexted
	                    // value synchronously during subscription. We can just call it.
	                    // If it errors, Observable's `subscribe` will ensure the
	                    // unsubscription logic is called, then synchronously rethrow the error.
	                    // After that, Promise will trap the error and send it
	                    // down the rejection path.
	                    next(value);
	                }
	            }, reject, resolve);
	        });
	    };
	    Observable.prototype._subscribe = function (subscriber) {
	        return this.source.subscribe(subscriber);
	    };
	    /**
	     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
	     * @method Symbol.observable
	     * @return {Observable} this instance of the observable
	     */
	    Observable.prototype[observable_1.$$observable] = function () {
	        return this;
	    };
	    // HACK: Since TypeScript inherits static properties too, we have to
	    // fight against TypeScript here so Subject can have a different static create signature
	    /**
	     * Creates a new cold Observable by calling the Observable constructor
	     * @static true
	     * @owner Observable
	     * @method create
	     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
	     * @return {Observable} a new cold observable
	     */
	    Observable.create = function (subscribe) {
	        return new Observable(subscribe);
	    };
	    return Observable;
	}());
	exports.Observable = Observable;
	//# sourceMappingURL=Observable.js.map

/***/ },
/* 271 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * window: browser in DOM main thread
	 * self: browser in WebWorker
	 * global: Node.js/other
	 */
	exports.root = (typeof window == 'object' && window.window === window && window
	    || typeof self == 'object' && self.self === self && self
	    || typeof global == 'object' && global.global === global && global);
	if (!exports.root) {
	    throw new Error('RxJS could not find any global context (window, self, global)');
	}
	//# sourceMappingURL=root.js.map

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Subscriber_1 = __webpack_require__(273);
	var rxSubscriber_1 = __webpack_require__(282);
	var Observer_1 = __webpack_require__(281);
	function toSubscriber(nextOrObserver, error, complete) {
	    if (nextOrObserver) {
	        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
	            return nextOrObserver;
	        }
	        if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {
	            return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
	        }
	    }
	    if (!nextOrObserver && !error && !complete) {
	        return new Subscriber_1.Subscriber(Observer_1.empty);
	    }
	    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
	}
	exports.toSubscriber = toSubscriber;
	//# sourceMappingURL=toSubscriber.js.map

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isFunction_1 = __webpack_require__(274);
	var Subscription_1 = __webpack_require__(275);
	var Observer_1 = __webpack_require__(281);
	var rxSubscriber_1 = __webpack_require__(282);
	/**
	 * Implements the {@link Observer} interface and extends the
	 * {@link Subscription} class. While the {@link Observer} is the public API for
	 * consuming the values of an {@link Observable}, all Observers get converted to
	 * a Subscriber, in order to provide Subscription-like capabilities such as
	 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
	 * implementing operators, but it is rarely used as a public API.
	 *
	 * @class Subscriber<T>
	 */
	var Subscriber = (function (_super) {
	    __extends(Subscriber, _super);
	    /**
	     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
	     * defined Observer or a `next` callback function.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     */
	    function Subscriber(destinationOrNext, error, complete) {
	        _super.call(this);
	        this.syncErrorValue = null;
	        this.syncErrorThrown = false;
	        this.syncErrorThrowable = false;
	        this.isStopped = false;
	        switch (arguments.length) {
	            case 0:
	                this.destination = Observer_1.empty;
	                break;
	            case 1:
	                if (!destinationOrNext) {
	                    this.destination = Observer_1.empty;
	                    break;
	                }
	                if (typeof destinationOrNext === 'object') {
	                    if (destinationOrNext instanceof Subscriber) {
	                        this.destination = destinationOrNext;
	                        this.destination.add(this);
	                    }
	                    else {
	                        this.syncErrorThrowable = true;
	                        this.destination = new SafeSubscriber(this, destinationOrNext);
	                    }
	                    break;
	                }
	            default:
	                this.syncErrorThrowable = true;
	                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
	                break;
	        }
	    }
	    Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () { return this; };
	    /**
	     * A static factory for a Subscriber, given a (potentially partial) definition
	     * of an Observer.
	     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
	     * Observer represented by the given arguments.
	     */
	    Subscriber.create = function (next, error, complete) {
	        var subscriber = new Subscriber(next, error, complete);
	        subscriber.syncErrorThrowable = false;
	        return subscriber;
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `next` from
	     * the Observable, with a value. The Observable may call this method 0 or more
	     * times.
	     * @param {T} [value] The `next` value.
	     * @return {void}
	     */
	    Subscriber.prototype.next = function (value) {
	        if (!this.isStopped) {
	            this._next(value);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `error` from
	     * the Observable, with an attached {@link Error}. Notifies the Observer that
	     * the Observable has experienced an error condition.
	     * @param {any} [err] The `error` exception.
	     * @return {void}
	     */
	    Subscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._error(err);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive a valueless notification of type
	     * `complete` from the Observable. Notifies the Observer that the Observable
	     * has finished sending push-based notifications.
	     * @return {void}
	     */
	    Subscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._complete();
	        }
	    };
	    Subscriber.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.isStopped = true;
	        _super.prototype.unsubscribe.call(this);
	    };
	    Subscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    Subscriber.prototype._error = function (err) {
	        this.destination.error(err);
	        this.unsubscribe();
	    };
	    Subscriber.prototype._complete = function () {
	        this.destination.complete();
	        this.unsubscribe();
	    };
	    return Subscriber;
	}(Subscription_1.Subscription));
	exports.Subscriber = Subscriber;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SafeSubscriber = (function (_super) {
	    __extends(SafeSubscriber, _super);
	    function SafeSubscriber(_parent, observerOrNext, error, complete) {
	        _super.call(this);
	        this._parent = _parent;
	        var next;
	        var context = this;
	        if (isFunction_1.isFunction(observerOrNext)) {
	            next = observerOrNext;
	        }
	        else if (observerOrNext) {
	            context = observerOrNext;
	            next = observerOrNext.next;
	            error = observerOrNext.error;
	            complete = observerOrNext.complete;
	            if (isFunction_1.isFunction(context.unsubscribe)) {
	                this.add(context.unsubscribe.bind(context));
	            }
	            context.unsubscribe = this.unsubscribe.bind(this);
	        }
	        this._context = context;
	        this._next = next;
	        this._error = error;
	        this._complete = complete;
	    }
	    SafeSubscriber.prototype.next = function (value) {
	        if (!this.isStopped && this._next) {
	            var _parent = this._parent;
	            if (!_parent.syncErrorThrowable) {
	                this.__tryOrUnsub(this._next, value);
	            }
	            else if (this.__tryOrSetError(_parent, this._next, value)) {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var _parent = this._parent;
	            if (this._error) {
	                if (!_parent.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._error, err);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parent, this._error, err);
	                    this.unsubscribe();
	                }
	            }
	            else if (!_parent.syncErrorThrowable) {
	                this.unsubscribe();
	                throw err;
	            }
	            else {
	                _parent.syncErrorValue = err;
	                _parent.syncErrorThrown = true;
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            var _parent = this._parent;
	            if (this._complete) {
	                if (!_parent.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._complete);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parent, this._complete);
	                    this.unsubscribe();
	                }
	            }
	            else {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            this.unsubscribe();
	            throw err;
	        }
	    };
	    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            parent.syncErrorValue = err;
	            parent.syncErrorThrown = true;
	            return true;
	        }
	        return false;
	    };
	    SafeSubscriber.prototype._unsubscribe = function () {
	        var _parent = this._parent;
	        this._context = null;
	        this._parent = null;
	        _parent.unsubscribe();
	    };
	    return SafeSubscriber;
	}(Subscriber));
	//# sourceMappingURL=Subscriber.js.map

/***/ },
/* 274 */
/***/ function(module, exports) {

	"use strict";
	function isFunction(x) {
	    return typeof x === 'function';
	}
	exports.isFunction = isFunction;
	//# sourceMappingURL=isFunction.js.map

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var isArray_1 = __webpack_require__(276);
	var isObject_1 = __webpack_require__(277);
	var isFunction_1 = __webpack_require__(274);
	var tryCatch_1 = __webpack_require__(278);
	var errorObject_1 = __webpack_require__(279);
	var UnsubscriptionError_1 = __webpack_require__(280);
	/**
	 * Represents a disposable resource, such as the execution of an Observable. A
	 * Subscription has one important method, `unsubscribe`, that takes no argument
	 * and just disposes the resource held by the subscription.
	 *
	 * Additionally, subscriptions may be grouped together through the `add()`
	 * method, which will attach a child Subscription to the current Subscription.
	 * When a Subscription is unsubscribed, all its children (and its grandchildren)
	 * will be unsubscribed as well.
	 *
	 * @class Subscription
	 */
	var Subscription = (function () {
	    /**
	     * @param {function(): void} [unsubscribe] A function describing how to
	     * perform the disposal of resources when the `unsubscribe` method is called.
	     */
	    function Subscription(unsubscribe) {
	        /**
	         * A flag to indicate whether this Subscription has already been unsubscribed.
	         * @type {boolean}
	         */
	        this.closed = false;
	        if (unsubscribe) {
	            this._unsubscribe = unsubscribe;
	        }
	    }
	    /**
	     * Disposes the resources held by the subscription. May, for instance, cancel
	     * an ongoing Observable execution or cancel any other type of work that
	     * started when the Subscription was created.
	     * @return {void}
	     */
	    Subscription.prototype.unsubscribe = function () {
	        var hasErrors = false;
	        var errors;
	        if (this.closed) {
	            return;
	        }
	        this.closed = true;
	        var _a = this, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
	        this._subscriptions = null;
	        if (isFunction_1.isFunction(_unsubscribe)) {
	            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
	            if (trial === errorObject_1.errorObject) {
	                hasErrors = true;
	                (errors = errors || []).push(errorObject_1.errorObject.e);
	            }
	        }
	        if (isArray_1.isArray(_subscriptions)) {
	            var index = -1;
	            var len = _subscriptions.length;
	            while (++index < len) {
	                var sub = _subscriptions[index];
	                if (isObject_1.isObject(sub)) {
	                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
	                    if (trial === errorObject_1.errorObject) {
	                        hasErrors = true;
	                        errors = errors || [];
	                        var err = errorObject_1.errorObject.e;
	                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
	                            errors = errors.concat(err.errors);
	                        }
	                        else {
	                            errors.push(err);
	                        }
	                    }
	                }
	            }
	        }
	        if (hasErrors) {
	            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
	        }
	    };
	    /**
	     * Adds a tear down to be called during the unsubscribe() of this
	     * Subscription.
	     *
	     * If the tear down being added is a subscription that is already
	     * unsubscribed, is the same reference `add` is being called on, or is
	     * `Subscription.EMPTY`, it will not be added.
	     *
	     * If this subscription is already in an `closed` state, the passed
	     * tear down logic will be executed immediately.
	     *
	     * @param {TeardownLogic} teardown The additional logic to execute on
	     * teardown.
	     * @return {Subscription} Returns the Subscription used or created to be
	     * added to the inner subscriptions list. This Subscription can be used with
	     * `remove()` to remove the passed teardown logic from the inner subscriptions
	     * list.
	     */
	    Subscription.prototype.add = function (teardown) {
	        if (!teardown || (teardown === Subscription.EMPTY)) {
	            return Subscription.EMPTY;
	        }
	        if (teardown === this) {
	            return this;
	        }
	        var sub = teardown;
	        switch (typeof teardown) {
	            case 'function':
	                sub = new Subscription(teardown);
	            case 'object':
	                if (sub.closed || typeof sub.unsubscribe !== 'function') {
	                    break;
	                }
	                else if (this.closed) {
	                    sub.unsubscribe();
	                }
	                else {
	                    (this._subscriptions || (this._subscriptions = [])).push(sub);
	                }
	                break;
	            default:
	                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
	        }
	        return sub;
	    };
	    /**
	     * Removes a Subscription from the internal list of subscriptions that will
	     * unsubscribe during the unsubscribe process of this Subscription.
	     * @param {Subscription} subscription The subscription to remove.
	     * @return {void}
	     */
	    Subscription.prototype.remove = function (subscription) {
	        // HACK: This might be redundant because of the logic in `add()`
	        if (subscription == null || (subscription === this) || (subscription === Subscription.EMPTY)) {
	            return;
	        }
	        var subscriptions = this._subscriptions;
	        if (subscriptions) {
	            var subscriptionIndex = subscriptions.indexOf(subscription);
	            if (subscriptionIndex !== -1) {
	                subscriptions.splice(subscriptionIndex, 1);
	            }
	        }
	    };
	    Subscription.EMPTY = (function (empty) {
	        empty.closed = true;
	        return empty;
	    }(new Subscription()));
	    return Subscription;
	}());
	exports.Subscription = Subscription;
	//# sourceMappingURL=Subscription.js.map

/***/ },
/* 276 */
/***/ function(module, exports) {

	"use strict";
	exports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
	//# sourceMappingURL=isArray.js.map

/***/ },
/* 277 */
/***/ function(module, exports) {

	"use strict";
	function isObject(x) {
	    return x != null && typeof x === 'object';
	}
	exports.isObject = isObject;
	//# sourceMappingURL=isObject.js.map

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var errorObject_1 = __webpack_require__(279);
	var tryCatchTarget;
	function tryCatcher() {
	    try {
	        return tryCatchTarget.apply(this, arguments);
	    }
	    catch (e) {
	        errorObject_1.errorObject.e = e;
	        return errorObject_1.errorObject;
	    }
	}
	function tryCatch(fn) {
	    tryCatchTarget = fn;
	    return tryCatcher;
	}
	exports.tryCatch = tryCatch;
	;
	//# sourceMappingURL=tryCatch.js.map

/***/ },
/* 279 */
/***/ function(module, exports) {

	"use strict";
	// typeof any so that it we don't have to cast when comparing a result to the error object
	exports.errorObject = { e: {} };
	//# sourceMappingURL=errorObject.js.map

/***/ },
/* 280 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when one or more errors have occurred during the
	 * `unsubscribe` of a {@link Subscription}.
	 */
	var UnsubscriptionError = (function (_super) {
	    __extends(UnsubscriptionError, _super);
	    function UnsubscriptionError(errors) {
	        _super.call(this);
	        this.errors = errors;
	        var err = Error.call(this, errors ?
	            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
	        this.name = err.name = 'UnsubscriptionError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return UnsubscriptionError;
	}(Error));
	exports.UnsubscriptionError = UnsubscriptionError;
	//# sourceMappingURL=UnsubscriptionError.js.map

/***/ },
/* 281 */
/***/ function(module, exports) {

	"use strict";
	exports.empty = {
	    closed: true,
	    next: function (value) { },
	    error: function (err) { throw err; },
	    complete: function () { }
	};
	//# sourceMappingURL=Observer.js.map

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(271);
	var Symbol = root_1.root.Symbol;
	exports.$$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
	    Symbol.for('rxSubscriber') : '@@rxSubscriber';
	//# sourceMappingURL=rxSubscriber.js.map

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(271);
	function getSymbolObservable(context) {
	    var $$observable;
	    var Symbol = context.Symbol;
	    if (typeof Symbol === 'function') {
	        if (Symbol.observable) {
	            $$observable = Symbol.observable;
	        }
	        else {
	            $$observable = Symbol('observable');
	            Symbol.observable = $$observable;
	        }
	    }
	    else {
	        $$observable = '@@observable';
	    }
	    return $$observable;
	}
	exports.getSymbolObservable = getSymbolObservable;
	exports.$$observable = getSymbolObservable(root_1.root);
	//# sourceMappingURL=observable.js.map

/***/ },
/* 284 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when an action is invalid because the object has been
	 * unsubscribed.
	 *
	 * @see {@link Subject}
	 * @see {@link BehaviorSubject}
	 *
	 * @class ObjectUnsubscribedError
	 */
	var ObjectUnsubscribedError = (function (_super) {
	    __extends(ObjectUnsubscribedError, _super);
	    function ObjectUnsubscribedError() {
	        var err = _super.call(this, 'object unsubscribed');
	        this.name = err.name = 'ObjectUnsubscribedError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return ObjectUnsubscribedError;
	}(Error));
	exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
	//# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscription_1 = __webpack_require__(275);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SubjectSubscription = (function (_super) {
	    __extends(SubjectSubscription, _super);
	    function SubjectSubscription(subject, subscriber) {
	        _super.call(this);
	        this.subject = subject;
	        this.subscriber = subscriber;
	        this.closed = false;
	    }
	    SubjectSubscription.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.closed = true;
	        var subject = this.subject;
	        var observers = subject.observers;
	        this.subject = null;
	        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
	            return;
	        }
	        var subscriberIndex = observers.indexOf(this.subscriber);
	        if (subscriberIndex !== -1) {
	            observers.splice(subscriberIndex, 1);
	        }
	    };
	    return SubjectSubscription;
	}(Subscription_1.Subscription));
	exports.SubjectSubscription = SubjectSubscription;
	//# sourceMappingURL=SubjectSubscription.js.map

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v2.3.1
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	   true ? factory(exports, __webpack_require__(287), __webpack_require__(268)) :
	  typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core'], factory) :
	  (factory((global.ng = global.ng || {}, global.ng.platformBrowser = global.ng.platformBrowser || {}),global.ng.common,global.ng.core));
	}(this, function (exports,_angular_common,core) { 'use strict';
	
	  var /** @type {?} */ DebugDomRootRenderer = core.__core_private__.DebugDomRootRenderer;
	  var /** @type {?} */ NoOpAnimationPlayer = core.__core_private__.NoOpAnimationPlayer;
	
	  /**
	   * @experimental
	   */
	  var NoOpAnimationDriver = (function () {
	      function NoOpAnimationDriver() {
	      }
	      /**
	       * @param {?} element
	       * @param {?} startingStyles
	       * @param {?} keyframes
	       * @param {?} duration
	       * @param {?} delay
	       * @param {?} easing
	       * @param {?=} previousPlayers
	       * @return {?}
	       */
	      NoOpAnimationDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
	          if (previousPlayers === void 0) { previousPlayers = []; }
	          return new NoOpAnimationPlayer();
	      };
	      return NoOpAnimationDriver;
	  }());
	  /**
	   * @abstract
	   */
	  var AnimationDriver = (function () {
	      function AnimationDriver() {
	      }
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} startingStyles
	       * @param {?} keyframes
	       * @param {?} duration
	       * @param {?} delay
	       * @param {?} easing
	       * @param {?=} previousPlayers
	       * @return {?}
	       */
	      AnimationDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };
	      AnimationDriver.NOOP = new NoOpAnimationDriver();
	      return AnimationDriver;
	  }());
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var /** @type {?} */ globalScope;
	  if (typeof window === 'undefined') {
	      if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	          // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	          globalScope = (self);
	      }
	      else {
	          globalScope = (global);
	      }
	  }
	  else {
	      globalScope = (window);
	  }
	  // Need to declare a new variable for global here since TypeScript
	  // exports the original value of the symbol.
	  var /** @type {?} */ global$1 = globalScope;
	  // TODO: remove calls to assert in production environment
	  // Note: Can't just export this and import in in other files
	  // as `assert` is a reserved keyword in Dart
	  global$1.assert = function assert(condition) {
	      // TODO: to be fixed properly via #2830, noop for now
	  };
	  /**
	   * @param {?} obj
	   * @return {?}
	   */
	  function isPresent(obj) {
	      return obj != null;
	  }
	  /**
	   * @param {?} obj
	   * @return {?}
	   */
	  function isBlank(obj) {
	      return obj == null;
	  }
	  /**
	   * @param {?} token
	   * @return {?}
	   */
	  function stringify(token) {
	      if (typeof token === 'string') {
	          return token;
	      }
	      if (token == null) {
	          return '' + token;
	      }
	      if (token.overriddenName) {
	          return "" + token.overriddenName;
	      }
	      if (token.name) {
	          return "" + token.name;
	      }
	      var /** @type {?} */ res = token.toString();
	      var /** @type {?} */ newLineIndex = res.indexOf('\n');
	      return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	  }
	  /**
	   * @param {?} global
	   * @param {?} path
	   * @param {?} value
	   * @return {?}
	   */
	  function setValueOnPath(global, path, value) {
	      var /** @type {?} */ parts = path.split('.');
	      var /** @type {?} */ obj = global;
	      while (parts.length > 1) {
	          var /** @type {?} */ name_1 = parts.shift();
	          if (obj.hasOwnProperty(name_1) && obj[name_1] != null) {
	              obj = obj[name_1];
	          }
	          else {
	              obj = obj[name_1] = {};
	          }
	      }
	      if (obj === undefined || obj === null) {
	          obj = {};
	      }
	      obj[parts.shift()] = value;
	  }
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var /** @type {?} */ _DOM = null;
	  /**
	   * @return {?}
	   */
	  function getDOM() {
	      return _DOM;
	  }
	  /**
	   * @param {?} adapter
	   * @return {?}
	   */
	  function setRootDomAdapter(adapter) {
	      if (!_DOM) {
	          _DOM = adapter;
	      }
	  }
	  /**
	   *  Provides DOM operations in an environment-agnostic way.
	    * *
	    * can introduce XSS risks.
	   * @abstract
	   */
	  var DomAdapter = (function () {
	      function DomAdapter() {
	          this.resourceLoaderType = null;
	      }
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} name
	       * @return {?}
	       */
	      DomAdapter.prototype.hasProperty = function (element /** TODO #9100 */, name) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @param {?} name
	       * @param {?} value
	       * @return {?}
	       */
	      DomAdapter.prototype.setProperty = function (el, name, value) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @param {?} name
	       * @return {?}
	       */
	      DomAdapter.prototype.getProperty = function (el, name) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @param {?} methodName
	       * @param {?} args
	       * @return {?}
	       */
	      DomAdapter.prototype.invoke = function (el, methodName, args) { };
	      /**
	       * @abstract
	       * @param {?} error
	       * @return {?}
	       */
	      DomAdapter.prototype.logError = function (error) { };
	      /**
	       * @abstract
	       * @param {?} error
	       * @return {?}
	       */
	      DomAdapter.prototype.log = function (error) { };
	      /**
	       * @abstract
	       * @param {?} error
	       * @return {?}
	       */
	      DomAdapter.prototype.logGroup = function (error) { };
	      /**
	       * @abstract
	       * @return {?}
	       */
	      DomAdapter.prototype.logGroupEnd = function () { };
	      Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
	          /**
	           *  Maps attribute names to their corresponding property names for cases
	            * where attribute name doesn't match property name.
	           * @return {?}
	           */
	          get: function () { return this._attrToPropMap; },
	          /**
	           * @param {?} value
	           * @return {?}
	           */
	          set: function (value) { this._attrToPropMap = value; },
	          enumerable: true,
	          configurable: true
	      });
	      ;
	      ;
	      /**
	       * @abstract
	       * @param {?} templateHtml
	       * @return {?}
	       */
	      DomAdapter.prototype.parse = function (templateHtml) { };
	      /**
	       * @abstract
	       * @param {?} selector
	       * @return {?}
	       */
	      DomAdapter.prototype.query = function (selector) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @param {?} selector
	       * @return {?}
	       */
	      DomAdapter.prototype.querySelector = function (el /** TODO #9100 */, selector) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @param {?} selector
	       * @return {?}
	       */
	      DomAdapter.prototype.querySelectorAll = function (el /** TODO #9100 */, selector) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @param {?} evt
	       * @param {?} listener
	       * @return {?}
	       */
	      DomAdapter.prototype.on = function (el /** TODO #9100 */, evt /** TODO #9100 */, listener) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @param {?} evt
	       * @param {?} listener
	       * @return {?}
	       */
	      DomAdapter.prototype.onAndCancel = function (el /** TODO #9100 */, evt /** TODO #9100 */, listener) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @param {?} evt
	       * @return {?}
	       */
	      DomAdapter.prototype.dispatchEvent = function (el /** TODO #9100 */, evt) { };
	      /**
	       * @abstract
	       * @param {?} eventType
	       * @return {?}
	       */
	      DomAdapter.prototype.createMouseEvent = function (eventType) { };
	      /**
	       * @abstract
	       * @param {?} eventType
	       * @return {?}
	       */
	      DomAdapter.prototype.createEvent = function (eventType) { };
	      /**
	       * @abstract
	       * @param {?} evt
	       * @return {?}
	       */
	      DomAdapter.prototype.preventDefault = function (evt) { };
	      /**
	       * @abstract
	       * @param {?} evt
	       * @return {?}
	       */
	      DomAdapter.prototype.isPrevented = function (evt) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.getInnerHTML = function (el) { };
	      /**
	       *  Returns content if el is a <template> element, null otherwise.
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.getTemplateContent = function (el) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.getOuterHTML = function (el) { };
	      /**
	       * @abstract
	       * @param {?} node
	       * @return {?}
	       */
	      DomAdapter.prototype.nodeName = function (node) { };
	      /**
	       * @abstract
	       * @param {?} node
	       * @return {?}
	       */
	      DomAdapter.prototype.nodeValue = function (node) { };
	      /**
	       * @abstract
	       * @param {?} node
	       * @return {?}
	       */
	      DomAdapter.prototype.type = function (node) { };
	      /**
	       * @abstract
	       * @param {?} node
	       * @return {?}
	       */
	      DomAdapter.prototype.content = function (node) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.firstChild = function (el) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.nextSibling = function (el) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.parentElement = function (el) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.childNodes = function (el) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.childNodesAsList = function (el) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.clearNodes = function (el) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @param {?} node
	       * @return {?}
	       */
	      DomAdapter.prototype.appendChild = function (el /** TODO #9100 */, node) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @param {?} node
	       * @return {?}
	       */
	      DomAdapter.prototype.removeChild = function (el /** TODO #9100 */, node) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @param {?} newNode
	       * @param {?} oldNode
	       * @return {?}
	       */
	      DomAdapter.prototype.replaceChild = function (el /** TODO #9100 */, newNode /** TODO #9100 */, oldNode) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.remove = function (el) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @param {?} node
	       * @return {?}
	       */
	      DomAdapter.prototype.insertBefore = function (el /** TODO #9100 */, node) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @param {?} nodes
	       * @return {?}
	       */
	      DomAdapter.prototype.insertAllBefore = function (el /** TODO #9100 */, nodes) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @param {?} node
	       * @return {?}
	       */
	      DomAdapter.prototype.insertAfter = function (el /** TODO #9100 */, node) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @param {?} value
	       * @return {?}
	       */
	      DomAdapter.prototype.setInnerHTML = function (el /** TODO #9100 */, value) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.getText = function (el) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @param {?} value
	       * @return {?}
	       */
	      DomAdapter.prototype.setText = function (el /** TODO #9100 */, value) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.getValue = function (el) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @param {?} value
	       * @return {?}
	       */
	      DomAdapter.prototype.setValue = function (el /** TODO #9100 */, value) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.getChecked = function (el) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @param {?} value
	       * @return {?}
	       */
	      DomAdapter.prototype.setChecked = function (el /** TODO #9100 */, value) { };
	      /**
	       * @abstract
	       * @param {?} text
	       * @return {?}
	       */
	      DomAdapter.prototype.createComment = function (text) { };
	      /**
	       * @abstract
	       * @param {?} html
	       * @return {?}
	       */
	      DomAdapter.prototype.createTemplate = function (html) { };
	      /**
	       * @abstract
	       * @param {?} tagName
	       * @param {?=} doc
	       * @return {?}
	       */
	      DomAdapter.prototype.createElement = function (tagName /** TODO #9100 */, doc) { };
	      /**
	       * @abstract
	       * @param {?} ns
	       * @param {?} tagName
	       * @param {?=} doc
	       * @return {?}
	       */
	      DomAdapter.prototype.createElementNS = function (ns, tagName, doc) { };
	      /**
	       * @abstract
	       * @param {?} text
	       * @param {?=} doc
	       * @return {?}
	       */
	      DomAdapter.prototype.createTextNode = function (text, doc) { };
	      /**
	       * @abstract
	       * @param {?} attrName
	       * @param {?} attrValue
	       * @param {?=} doc
	       * @return {?}
	       */
	      DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) { };
	      /**
	       * @abstract
	       * @param {?} css
	       * @param {?=} doc
	       * @return {?}
	       */
	      DomAdapter.prototype.createStyleElement = function (css, doc) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.createShadowRoot = function (el) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.getShadowRoot = function (el) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.getHost = function (el) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.getDistributedNodes = function (el) { };
	      /**
	       * @abstract
	       * @param {?} node
	       * @return {?}
	       */
	      DomAdapter.prototype.clone /*<T extends Node>*/ = function (node) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} name
	       * @return {?}
	       */
	      DomAdapter.prototype.getElementsByClassName = function (element /** TODO #9100 */, name) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} name
	       * @return {?}
	       */
	      DomAdapter.prototype.getElementsByTagName = function (element /** TODO #9100 */, name) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @return {?}
	       */
	      DomAdapter.prototype.classList = function (element) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} className
	       * @return {?}
	       */
	      DomAdapter.prototype.addClass = function (element /** TODO #9100 */, className) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} className
	       * @return {?}
	       */
	      DomAdapter.prototype.removeClass = function (element /** TODO #9100 */, className) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} className
	       * @return {?}
	       */
	      DomAdapter.prototype.hasClass = function (element /** TODO #9100 */, className) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} styleName
	       * @param {?} styleValue
	       * @return {?}
	       */
	      DomAdapter.prototype.setStyle = function (element /** TODO #9100 */, styleName, styleValue) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} styleName
	       * @return {?}
	       */
	      DomAdapter.prototype.removeStyle = function (element /** TODO #9100 */, styleName) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} styleName
	       * @return {?}
	       */
	      DomAdapter.prototype.getStyle = function (element /** TODO #9100 */, styleName) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} styleName
	       * @param {?=} styleValue
	       * @return {?}
	       */
	      DomAdapter.prototype.hasStyle = function (element /** TODO #9100 */, styleName, styleValue) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @return {?}
	       */
	      DomAdapter.prototype.tagName = function (element) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @return {?}
	       */
	      DomAdapter.prototype.attributeMap = function (element) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} attribute
	       * @return {?}
	       */
	      DomAdapter.prototype.hasAttribute = function (element /** TODO #9100 */, attribute) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} ns
	       * @param {?} attribute
	       * @return {?}
	       */
	      DomAdapter.prototype.hasAttributeNS = function (element /** TODO #9100 */, ns, attribute) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} attribute
	       * @return {?}
	       */
	      DomAdapter.prototype.getAttribute = function (element /** TODO #9100 */, attribute) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} ns
	       * @param {?} attribute
	       * @return {?}
	       */
	      DomAdapter.prototype.getAttributeNS = function (element /** TODO #9100 */, ns, attribute) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} name
	       * @param {?} value
	       * @return {?}
	       */
	      DomAdapter.prototype.setAttribute = function (element /** TODO #9100 */, name, value) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} ns
	       * @param {?} name
	       * @param {?} value
	       * @return {?}
	       */
	      DomAdapter.prototype.setAttributeNS = function (element /** TODO #9100 */, ns, name, value) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} attribute
	       * @return {?}
	       */
	      DomAdapter.prototype.removeAttribute = function (element /** TODO #9100 */, attribute) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} ns
	       * @param {?} attribute
	       * @return {?}
	       */
	      DomAdapter.prototype.removeAttributeNS = function (element /** TODO #9100 */, ns, attribute) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.templateAwareRoot = function (el) { };
	      /**
	       * @abstract
	       * @return {?}
	       */
	      DomAdapter.prototype.createHtmlDocument = function () { };
	      /**
	       * @abstract
	       * @return {?}
	       */
	      DomAdapter.prototype.defaultDoc = function () { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.getBoundingClientRect = function (el) { };
	      /**
	       * @abstract
	       * @return {?}
	       */
	      DomAdapter.prototype.getTitle = function () { };
	      /**
	       * @abstract
	       * @param {?} newTitle
	       * @return {?}
	       */
	      DomAdapter.prototype.setTitle = function (newTitle) { };
	      /**
	       * @abstract
	       * @param {?} n
	       * @param {?} selector
	       * @return {?}
	       */
	      DomAdapter.prototype.elementMatches = function (n /** TODO #9100 */, selector) { };
	      /**
	       * @abstract
	       * @param {?} el
	       * @return {?}
	       */
	      DomAdapter.prototype.isTemplateElement = function (el) { };
	      /**
	       * @abstract
	       * @param {?} node
	       * @return {?}
	       */
	      DomAdapter.prototype.isTextNode = function (node) { };
	      /**
	       * @abstract
	       * @param {?} node
	       * @return {?}
	       */
	      DomAdapter.prototype.isCommentNode = function (node) { };
	      /**
	       * @abstract
	       * @param {?} node
	       * @return {?}
	       */
	      DomAdapter.prototype.isElementNode = function (node) { };
	      /**
	       * @abstract
	       * @param {?} node
	       * @return {?}
	       */
	      DomAdapter.prototype.hasShadowRoot = function (node) { };
	      /**
	       * @abstract
	       * @param {?} node
	       * @return {?}
	       */
	      DomAdapter.prototype.isShadowRoot = function (node) { };
	      /**
	       * @abstract
	       * @param {?} node
	       * @return {?}
	       */
	      DomAdapter.prototype.importIntoDoc /*<T extends Node>*/ = function (node) { };
	      /**
	       * @abstract
	       * @param {?} node
	       * @return {?}
	       */
	      DomAdapter.prototype.adoptNode /*<T extends Node>*/ = function (node) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @return {?}
	       */
	      DomAdapter.prototype.getHref = function (element) { };
	      /**
	       * @abstract
	       * @param {?} event
	       * @return {?}
	       */
	      DomAdapter.prototype.getEventKey = function (event) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} baseUrl
	       * @param {?} href
	       * @return {?}
	       */
	      DomAdapter.prototype.resolveAndSetHref = function (element /** TODO #9100 */, baseUrl, href) { };
	      /**
	       * @abstract
	       * @return {?}
	       */
	      DomAdapter.prototype.supportsDOMEvents = function () { };
	      /**
	       * @abstract
	       * @return {?}
	       */
	      DomAdapter.prototype.supportsNativeShadowDOM = function () { };
	      /**
	       * @abstract
	       * @param {?} target
	       * @return {?}
	       */
	      DomAdapter.prototype.getGlobalEventTarget = function (target) { };
	      /**
	       * @abstract
	       * @return {?}
	       */
	      DomAdapter.prototype.getHistory = function () { };
	      /**
	       * @abstract
	       * @return {?}
	       */
	      DomAdapter.prototype.getLocation = function () { };
	      /**
	       * @abstract
	       * @return {?}
	       */
	      DomAdapter.prototype.getBaseHref = function () { };
	      /**
	       * @abstract
	       * @return {?}
	       */
	      DomAdapter.prototype.resetBaseElement = function () { };
	      /**
	       * @abstract
	       * @return {?}
	       */
	      DomAdapter.prototype.getUserAgent = function () { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} name
	       * @param {?} value
	       * @return {?}
	       */
	      DomAdapter.prototype.setData = function (element /** TODO #9100 */, name, value) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @return {?}
	       */
	      DomAdapter.prototype.getComputedStyle = function (element) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} name
	       * @return {?}
	       */
	      DomAdapter.prototype.getData = function (element /** TODO #9100 */, name) { };
	      /**
	       * @abstract
	       * @param {?} name
	       * @param {?} value
	       * @return {?}
	       */
	      DomAdapter.prototype.setGlobalVar = function (name, value) { };
	      /**
	       * @abstract
	       * @return {?}
	       */
	      DomAdapter.prototype.supportsWebAnimation = function () { };
	      /**
	       * @abstract
	       * @return {?}
	       */
	      DomAdapter.prototype.performanceNow = function () { };
	      /**
	       * @abstract
	       * @return {?}
	       */
	      DomAdapter.prototype.getAnimationPrefix = function () { };
	      /**
	       * @abstract
	       * @return {?}
	       */
	      DomAdapter.prototype.getTransitionEnd = function () { };
	      /**
	       * @abstract
	       * @return {?}
	       */
	      DomAdapter.prototype.supportsAnimation = function () { };
	      /**
	       * @abstract
	       * @return {?}
	       */
	      DomAdapter.prototype.supportsCookies = function () { };
	      /**
	       * @abstract
	       * @param {?} name
	       * @return {?}
	       */
	      DomAdapter.prototype.getCookie = function (name) { };
	      /**
	       * @abstract
	       * @param {?} name
	       * @param {?} value
	       * @return {?}
	       */
	      DomAdapter.prototype.setCookie = function (name, value) { };
	      return DomAdapter;
	  }());
	
	  var WebAnimationsPlayer = (function () {
	      /**
	       * @param {?} element
	       * @param {?} keyframes
	       * @param {?} options
	       * @param {?=} previousPlayers
	       */
	      function WebAnimationsPlayer(element, keyframes, options, previousPlayers) {
	          var _this = this;
	          if (previousPlayers === void 0) { previousPlayers = []; }
	          this.element = element;
	          this.keyframes = keyframes;
	          this.options = options;
	          this._onDoneFns = [];
	          this._onStartFns = [];
	          this._initialized = false;
	          this._finished = false;
	          this._started = false;
	          this._destroyed = false;
	          this.parentPlayer = null;
	          this._duration = options['duration'];
	          this.previousStyles = {};
	          previousPlayers.forEach(function (player) {
	              var styles = player._captureStyles();
	              Object.keys(styles).forEach(function (prop) { return _this.previousStyles[prop] = styles[prop]; });
	          });
	      }
	      /**
	       * @return {?}
	       */
	      WebAnimationsPlayer.prototype._onFinish = function () {
	          if (!this._finished) {
	              this._finished = true;
	              this._onDoneFns.forEach(function (fn) { return fn(); });
	              this._onDoneFns = [];
	          }
	      };
	      /**
	       * @return {?}
	       */
	      WebAnimationsPlayer.prototype.init = function () {
	          var _this = this;
	          if (this._initialized)
	              return;
	          this._initialized = true;
	          var /** @type {?} */ keyframes = this.keyframes.map(function (styles) {
	              var /** @type {?} */ formattedKeyframe = {};
	              Object.keys(styles).forEach(function (prop, index) {
	                  var /** @type {?} */ value = styles[prop];
	                  if (value == core.AUTO_STYLE) {
	                      value = _computeStyle(_this.element, prop);
	                  }
	                  if (value != undefined) {
	                      formattedKeyframe[prop] = value;
	                  }
	              });
	              return formattedKeyframe;
	          });
	          var /** @type {?} */ previousStyleProps = Object.keys(this.previousStyles);
	          if (previousStyleProps.length) {
	              var /** @type {?} */ startingKeyframe_1 = findStartingKeyframe(keyframes);
	              previousStyleProps.forEach(function (prop) {
	                  if (isPresent(startingKeyframe_1[prop])) {
	                      startingKeyframe_1[prop] = _this.previousStyles[prop];
	                  }
	              });
	          }
	          this._player = this._triggerWebAnimation(this.element, keyframes, this.options);
	          this._finalKeyframe = _copyKeyframeStyles(keyframes[keyframes.length - 1]);
	          // this is required so that the player doesn't start to animate right away
	          this._resetDomPlayerState();
	          this._player.addEventListener('finish', function () { return _this._onFinish(); });
	      };
	      /**
	       * @param {?} element
	       * @param {?} keyframes
	       * @param {?} options
	       * @return {?}
	       */
	      WebAnimationsPlayer.prototype._triggerWebAnimation = function (element, keyframes, options) {
	          return (element.animate(keyframes, options));
	      };
	      Object.defineProperty(WebAnimationsPlayer.prototype, "domPlayer", {
	          /**
	           * @return {?}
	           */
	          get: function () { return this._player; },
	          enumerable: true,
	          configurable: true
	      });
	      /**
	       * @param {?} fn
	       * @return {?}
	       */
	      WebAnimationsPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	      /**
	       * @param {?} fn
	       * @return {?}
	       */
	      WebAnimationsPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	      /**
	       * @return {?}
	       */
	      WebAnimationsPlayer.prototype.play = function () {
	          this.init();
	          if (!this.hasStarted()) {
	              this._onStartFns.forEach(function (fn) { return fn(); });
	              this._onStartFns = [];
	              this._started = true;
	          }
	          this._player.play();
	      };
	      /**
	       * @return {?}
	       */
	      WebAnimationsPlayer.prototype.pause = function () {
	          this.init();
	          this._player.pause();
	      };
	      /**
	       * @return {?}
	       */
	      WebAnimationsPlayer.prototype.finish = function () {
	          this.init();
	          this._onFinish();
	          this._player.finish();
	      };
	      /**
	       * @return {?}
	       */
	      WebAnimationsPlayer.prototype.reset = function () {
	          this._resetDomPlayerState();
	          this._destroyed = false;
	          this._finished = false;
	          this._started = false;
	      };
	      /**
	       * @return {?}
	       */
	      WebAnimationsPlayer.prototype._resetDomPlayerState = function () { this._player.cancel(); };
	      /**
	       * @return {?}
	       */
	      WebAnimationsPlayer.prototype.restart = function () {
	          this.reset();
	          this.play();
	      };
	      /**
	       * @return {?}
	       */
	      WebAnimationsPlayer.prototype.hasStarted = function () { return this._started; };
	      /**
	       * @return {?}
	       */
	      WebAnimationsPlayer.prototype.destroy = function () {
	          if (!this._destroyed) {
	              this._resetDomPlayerState();
	              this._onFinish();
	              this._destroyed = true;
	          }
	      };
	      Object.defineProperty(WebAnimationsPlayer.prototype, "totalTime", {
	          /**
	           * @return {?}
	           */
	          get: function () { return this._duration; },
	          enumerable: true,
	          configurable: true
	      });
	      /**
	       * @param {?} p
	       * @return {?}
	       */
	      WebAnimationsPlayer.prototype.setPosition = function (p) { this._player.currentTime = p * this.totalTime; };
	      /**
	       * @return {?}
	       */
	      WebAnimationsPlayer.prototype.getPosition = function () { return this._player.currentTime / this.totalTime; };
	      /**
	       * @return {?}
	       */
	      WebAnimationsPlayer.prototype._captureStyles = function () {
	          var _this = this;
	          var /** @type {?} */ styles = {};
	          if (this.hasStarted()) {
	              Object.keys(this._finalKeyframe).forEach(function (prop) {
	                  if (prop != 'offset') {
	                      styles[prop] =
	                          _this._finished ? _this._finalKeyframe[prop] : _computeStyle(_this.element, prop);
	                  }
	              });
	          }
	          return styles;
	      };
	      return WebAnimationsPlayer;
	  }());
	  /**
	   * @param {?} element
	   * @param {?} prop
	   * @return {?}
	   */
	  function _computeStyle(element, prop) {
	      return getDOM().getComputedStyle(element)[prop];
	  }
	  /**
	   * @param {?} styles
	   * @return {?}
	   */
	  function _copyKeyframeStyles(styles) {
	      var /** @type {?} */ newStyles = {};
	      Object.keys(styles).forEach(function (prop) {
	          if (prop != 'offset') {
	              newStyles[prop] = styles[prop];
	          }
	      });
	      return newStyles;
	  }
	  /**
	   * @param {?} keyframes
	   * @return {?}
	   */
	  function findStartingKeyframe(keyframes) {
	      var /** @type {?} */ startingKeyframe = keyframes[0];
	      // it's important that we find the LAST keyframe
	      // to ensure that style overidding is final.
	      for (var /** @type {?} */ i = 1; i < keyframes.length; i++) {
	          var /** @type {?} */ kf = keyframes[i];
	          var /** @type {?} */ offset = kf['offset'];
	          if (offset !== 0)
	              break;
	          startingKeyframe = kf;
	      }
	      return startingKeyframe;
	  }
	
	  var WebAnimationsDriver = (function () {
	      function WebAnimationsDriver() {
	      }
	      /**
	       * @param {?} element
	       * @param {?} startingStyles
	       * @param {?} keyframes
	       * @param {?} duration
	       * @param {?} delay
	       * @param {?} easing
	       * @param {?=} previousPlayers
	       * @return {?}
	       */
	      WebAnimationsDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
	          if (previousPlayers === void 0) { previousPlayers = []; }
	          var /** @type {?} */ formattedSteps = [];
	          var /** @type {?} */ startingStyleLookup = {};
	          if (isPresent(startingStyles) && startingStyles.styles.length > 0) {
	              startingStyleLookup = _populateStyles(startingStyles, {});
	              startingStyleLookup['offset'] = 0;
	              formattedSteps.push(startingStyleLookup);
	          }
	          keyframes.forEach(function (keyframe) {
	              var /** @type {?} */ data = _populateStyles(keyframe.styles, startingStyleLookup);
	              data['offset'] = Math.max(0, Math.min(1, keyframe.offset));
	              formattedSteps.push(data);
	          });
	          // this is a special case when only styles are applied as an
	          // animation. When this occurs we want to animate from start to
	          // end with the same values. Removing the offset and having only
	          // start/end values is suitable enough for the web-animations API
	          if (formattedSteps.length == 1) {
	              var /** @type {?} */ start = formattedSteps[0];
	              start['offset'] = null;
	              formattedSteps = [start, start];
	          }
	          var /** @type {?} */ playerOptions = {
	              'duration': duration,
	              'delay': delay,
	              'fill': 'both' // we use `both` because it allows for styling at 0% to work with `delay`
	          };
	          // we check for this to avoid having a null|undefined value be present
	          // for the easing (which results in an error for certain browsers #9752)
	          if (easing) {
	              playerOptions['easing'] = easing;
	          }
	          // there may be a chance a NoOp player is returned depending
	          // on when the previous animation was cancelled
	          previousPlayers = previousPlayers.filter(filterWebAnimationPlayerFn);
	          return new WebAnimationsPlayer(element, formattedSteps, playerOptions, /** @type {?} */ (previousPlayers));
	      };
	      return WebAnimationsDriver;
	  }());
	  /**
	   * @param {?} styles
	   * @param {?} defaultStyles
	   * @return {?}
	   */
	  function _populateStyles(styles, defaultStyles) {
	      var /** @type {?} */ data = {};
	      styles.styles.forEach(function (entry) { Object.keys(entry).forEach(function (prop) { data[prop] = entry[prop]; }); });
	      Object.keys(defaultStyles).forEach(function (prop) {
	          if (!isPresent(data[prop])) {
	              data[prop] = defaultStyles[prop];
	          }
	      });
	      return data;
	  }
	  /**
	   * @param {?} player
	   * @return {?}
	   */
	  function filterWebAnimationPlayerFn(player) {
	      return player instanceof WebAnimationsPlayer;
	  }
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$1 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  /**
	   *  Provides DOM operations in any browser environment.
	    * *
	    * can introduce XSS risks.
	   * @abstract
	   */
	  var GenericBrowserDomAdapter = (function (_super) {
	      __extends$1(GenericBrowserDomAdapter, _super);
	      function GenericBrowserDomAdapter() {
	          var _this = this;
	          _super.call(this);
	          this._animationPrefix = null;
	          this._transitionEnd = null;
	          try {
	              var element_1 = this.createElement('div', this.defaultDoc());
	              if (isPresent(this.getStyle(element_1, 'animationName'))) {
	                  this._animationPrefix = '';
	              }
	              else {
	                  var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
	                  for (var i = 0; i < domPrefixes.length; i++) {
	                      if (isPresent(this.getStyle(element_1, domPrefixes[i] + 'AnimationName'))) {
	                          this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
	                          break;
	                      }
	                  }
	              }
	              var transEndEventNames_1 = {
	                  WebkitTransition: 'webkitTransitionEnd',
	                  MozTransition: 'transitionend',
	                  OTransition: 'oTransitionEnd otransitionend',
	                  transition: 'transitionend'
	              };
	              Object.keys(transEndEventNames_1).forEach(function (key) {
	                  if (isPresent(_this.getStyle(element_1, key))) {
	                      _this._transitionEnd = transEndEventNames_1[key];
	                  }
	              });
	          }
	          catch (e) {
	              this._animationPrefix = null;
	              this._transitionEnd = null;
	          }
	      }
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return ((el)).getDistributedNodes(); };
	      /**
	       * @param {?} el
	       * @param {?} baseUrl
	       * @param {?} href
	       * @return {?}
	       */
	      GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
	          el.href = href == null ? baseUrl : baseUrl + '/../' + href;
	      };
	      /**
	       * @return {?}
	       */
	      GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };
	      /**
	       * @return {?}
	       */
	      GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
	          return typeof ((this.defaultDoc().body)).createShadowRoot === 'function';
	      };
	      /**
	       * @return {?}
	       */
	      GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () { return this._animationPrefix ? this._animationPrefix : ''; };
	      /**
	       * @return {?}
	       */
	      GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return this._transitionEnd ? this._transitionEnd : ''; };
	      /**
	       * @return {?}
	       */
	      GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
	          return isPresent(this._animationPrefix) && isPresent(this._transitionEnd);
	      };
	      return GenericBrowserDomAdapter;
	  }(DomAdapter));
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var /** @type {?} */ _attrToPropMap = {
	      'class': 'className',
	      'innerHtml': 'innerHTML',
	      'readonly': 'readOnly',
	      'tabindex': 'tabIndex',
	  };
	  var /** @type {?} */ DOM_KEY_LOCATION_NUMPAD = 3;
	  // Map to convert some key or keyIdentifier values to what will be returned by getEventKey
	  var /** @type {?} */ _keyMap = {
	      // The following values are here for cross-browser compatibility and to match the W3C standard
	      // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
	      '\b': 'Backspace',
	      '\t': 'Tab',
	      '\x7F': 'Delete',
	      '\x1B': 'Escape',
	      'Del': 'Delete',
	      'Esc': 'Escape',
	      'Left': 'ArrowLeft',
	      'Right': 'ArrowRight',
	      'Up': 'ArrowUp',
	      'Down': 'ArrowDown',
	      'Menu': 'ContextMenu',
	      'Scroll': 'ScrollLock',
	      'Win': 'OS'
	  };
	  // There is a bug in Chrome for numeric keypad keys:
	  // https://code.google.com/p/chromium/issues/detail?id=155654
	  // 1, 2, 3 ... are reported as A, B, C ...
	  var /** @type {?} */ _chromeNumKeyPadMap = {
	      'A': '1',
	      'B': '2',
	      'C': '3',
	      'D': '4',
	      'E': '5',
	      'F': '6',
	      'G': '7',
	      'H': '8',
	      'I': '9',
	      'J': '*',
	      'K': '+',
	      'M': '-',
	      'N': '.',
	      'O': '/',
	      '\x60': '0',
	      '\x90': 'NumLock'
	  };
	  /**
	   * A `DomAdapter` powered by full browser DOM APIs.
	   *
	   * @security Tread carefully! Interacting with the DOM directly is dangerous and
	   * can introduce XSS risks.
	   */
	  /* tslint:disable:requireParameterType */
	  var BrowserDomAdapter = (function (_super) {
	      __extends(BrowserDomAdapter, _super);
	      function BrowserDomAdapter() {
	          _super.apply(this, arguments);
	      }
	      /**
	       * @param {?} templateHtml
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };
	      /**
	       * @return {?}
	       */
	      BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };
	      /**
	       * @param {?} element
	       * @param {?} name
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };
	      /**
	       * @param {?} el
	       * @param {?} name
	       * @param {?} value
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.setProperty = function (el, name, value) { ((el))[name] = value; };
	      /**
	       * @param {?} el
	       * @param {?} name
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getProperty = function (el, name) { return ((el))[name]; };
	      /**
	       * @param {?} el
	       * @param {?} methodName
	       * @param {?} args
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.invoke = function (el, methodName, args) { (_a = ((el)))[methodName].apply(_a, args); var _a; };
	      /**
	       * @param {?} error
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.logError = function (error) {
	          if (window.console) {
	              if (console.error) {
	                  console.error(error);
	              }
	              else {
	                  // tslint:disable-next-line:no-console
	                  console.log(error);
	              }
	          }
	      };
	      /**
	       * @param {?} error
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.log = function (error) {
	          if (window.console) {
	              // tslint:disable-next-line:no-console
	              window.console.log && window.console.log(error);
	          }
	      };
	      /**
	       * @param {?} error
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.logGroup = function (error) {
	          if (window.console) {
	              window.console.group && window.console.group(error);
	          }
	      };
	      /**
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.logGroupEnd = function () {
	          if (window.console) {
	              window.console.groupEnd && window.console.groupEnd();
	          }
	      };
	      Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
	          /**
	           * @return {?}
	           */
	          get: function () { return _attrToPropMap; },
	          enumerable: true,
	          configurable: true
	      });
	      /**
	       * @param {?} selector
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.query = function (selector) { return document.querySelector(selector); };
	      /**
	       * @param {?} el
	       * @param {?} selector
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.querySelector = function (el, selector) {
	          return (el.querySelector(selector));
	      };
	      /**
	       * @param {?} el
	       * @param {?} selector
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };
	      /**
	       * @param {?} el
	       * @param {?} evt
	       * @param {?} listener
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };
	      /**
	       * @param {?} el
	       * @param {?} evt
	       * @param {?} listener
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
	          el.addEventListener(evt, listener, false);
	          // Needed to follow Dart's subscription semantic, until fix of
	          // https://code.google.com/p/dart/issues/detail?id=17406
	          return function () { el.removeEventListener(evt, listener, false); };
	      };
	      /**
	       * @param {?} el
	       * @param {?} evt
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };
	      /**
	       * @param {?} eventType
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
	          var /** @type {?} */ evt = document.createEvent('MouseEvent');
	          evt.initEvent(eventType, true, true);
	          return evt;
	      };
	      /**
	       * @param {?} eventType
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.createEvent = function (eventType) {
	          var /** @type {?} */ evt = document.createEvent('Event');
	          evt.initEvent(eventType, true, true);
	          return evt;
	      };
	      /**
	       * @param {?} evt
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.preventDefault = function (evt) {
	          evt.preventDefault();
	          evt.returnValue = false;
	      };
	      /**
	       * @param {?} evt
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.isPrevented = function (evt) {
	          return evt.defaultPrevented || isPresent(evt.returnValue) && !evt.returnValue;
	      };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getTemplateContent = function (el) {
	          return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
	      };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };
	      /**
	       * @param {?} node
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };
	      /**
	       * @param {?} node
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
	      /**
	       * @param {?} node
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.type = function (node) { return node.type; };
	      /**
	       * @param {?} node
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.content = function (node) {
	          if (this.hasProperty(node, 'content')) {
	              return ((node)).content;
	          }
	          else {
	              return node;
	          }
	      };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.childNodesAsList = function (el) {
	          var /** @type {?} */ childNodes = el.childNodes;
	          var /** @type {?} */ res = new Array(childNodes.length);
	          for (var /** @type {?} */ i = 0; i < childNodes.length; i++) {
	              res[i] = childNodes[i];
	          }
	          return res;
	      };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.clearNodes = function (el) {
	          while (el.firstChild) {
	              el.removeChild(el.firstChild);
	          }
	      };
	      /**
	       * @param {?} el
	       * @param {?} node
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };
	      /**
	       * @param {?} el
	       * @param {?} node
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };
	      /**
	       * @param {?} el
	       * @param {?} newChild
	       * @param {?} oldChild
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };
	      /**
	       * @param {?} node
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.remove = function (node) {
	          if (node.parentNode) {
	              node.parentNode.removeChild(node);
	          }
	          return node;
	      };
	      /**
	       * @param {?} el
	       * @param {?} node
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.insertBefore = function (el, node) { el.parentNode.insertBefore(node, el); };
	      /**
	       * @param {?} el
	       * @param {?} nodes
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.insertAllBefore = function (el, nodes) {
	          nodes.forEach(function (n) { return el.parentNode.insertBefore(n, el); });
	      };
	      /**
	       * @param {?} el
	       * @param {?} node
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.insertAfter = function (el, node) { el.parentNode.insertBefore(node, el.nextSibling); };
	      /**
	       * @param {?} el
	       * @param {?} value
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };
	      /**
	       * @param {?} el
	       * @param {?} value
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };
	      /**
	       * @param {?} el
	       * @param {?} value
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };
	      /**
	       * @param {?} el
	       * @param {?} value
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };
	      /**
	       * @param {?} text
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };
	      /**
	       * @param {?} html
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.createTemplate = function (html) {
	          var /** @type {?} */ t = document.createElement('template');
	          t.innerHTML = html;
	          return t;
	      };
	      /**
	       * @param {?} tagName
	       * @param {?=} doc
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
	          if (doc === void 0) { doc = document; }
	          return doc.createElement(tagName);
	      };
	      /**
	       * @param {?} ns
	       * @param {?} tagName
	       * @param {?=} doc
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {
	          if (doc === void 0) { doc = document; }
	          return doc.createElementNS(ns, tagName);
	      };
	      /**
	       * @param {?} text
	       * @param {?=} doc
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
	          if (doc === void 0) { doc = document; }
	          return doc.createTextNode(text);
	      };
	      /**
	       * @param {?} attrName
	       * @param {?} attrValue
	       * @param {?=} doc
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
	          if (doc === void 0) { doc = document; }
	          var /** @type {?} */ el = (doc.createElement('SCRIPT'));
	          el.setAttribute(attrName, attrValue);
	          return el;
	      };
	      /**
	       * @param {?} css
	       * @param {?=} doc
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
	          if (doc === void 0) { doc = document; }
	          var /** @type {?} */ style = (doc.createElement('style'));
	          this.appendChild(style, this.createTextNode(css));
	          return style;
	      };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.createShadowRoot = function (el) { return ((el)).createShadowRoot(); };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getShadowRoot = function (el) { return ((el)).shadowRoot; };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getHost = function (el) { return ((el)).host; };
	      /**
	       * @param {?} node
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };
	      /**
	       * @param {?} element
	       * @param {?} name
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
	          return element.getElementsByClassName(name);
	      };
	      /**
	       * @param {?} element
	       * @param {?} name
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
	          return element.getElementsByTagName(name);
	      };
	      /**
	       * @param {?} element
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };
	      /**
	       * @param {?} element
	       * @param {?} className
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };
	      /**
	       * @param {?} element
	       * @param {?} className
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };
	      /**
	       * @param {?} element
	       * @param {?} className
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.hasClass = function (element, className) {
	          return element.classList.contains(className);
	      };
	      /**
	       * @param {?} element
	       * @param {?} styleName
	       * @param {?} styleValue
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {
	          element.style[styleName] = styleValue;
	      };
	      /**
	       * @param {?} element
	       * @param {?} stylename
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {
	          // IE requires '' instead of null
	          // see https://github.com/angular/angular/issues/7916
	          element.style[stylename] = '';
	      };
	      /**
	       * @param {?} element
	       * @param {?} stylename
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };
	      /**
	       * @param {?} element
	       * @param {?} styleName
	       * @param {?=} styleValue
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {
	          if (styleValue === void 0) { styleValue = null; }
	          var /** @type {?} */ value = this.getStyle(element, styleName) || '';
	          return styleValue ? value == styleValue : value.length > 0;
	      };
	      /**
	       * @param {?} element
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };
	      /**
	       * @param {?} element
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.attributeMap = function (element) {
	          var /** @type {?} */ res = new Map();
	          var /** @type {?} */ elAttrs = element.attributes;
	          for (var /** @type {?} */ i = 0; i < elAttrs.length; i++) {
	              var /** @type {?} */ attrib = elAttrs[i];
	              res.set(attrib.name, attrib.value);
	          }
	          return res;
	      };
	      /**
	       * @param {?} element
	       * @param {?} attribute
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {
	          return element.hasAttribute(attribute);
	      };
	      /**
	       * @param {?} element
	       * @param {?} ns
	       * @param {?} attribute
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {
	          return element.hasAttributeNS(ns, attribute);
	      };
	      /**
	       * @param {?} element
	       * @param {?} attribute
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {
	          return element.getAttribute(attribute);
	      };
	      /**
	       * @param {?} element
	       * @param {?} ns
	       * @param {?} name
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {
	          return element.getAttributeNS(ns, name);
	      };
	      /**
	       * @param {?} element
	       * @param {?} name
	       * @param {?} value
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };
	      /**
	       * @param {?} element
	       * @param {?} ns
	       * @param {?} name
	       * @param {?} value
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {
	          element.setAttributeNS(ns, name, value);
	      };
	      /**
	       * @param {?} element
	       * @param {?} attribute
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };
	      /**
	       * @param {?} element
	       * @param {?} ns
	       * @param {?} name
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {
	          element.removeAttributeNS(ns, name);
	      };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };
	      /**
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.createHtmlDocument = function () {
	          return document.implementation.createHTMLDocument('fakeTitle');
	      };
	      /**
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.defaultDoc = function () { return document; };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
	          try {
	              return el.getBoundingClientRect();
	          }
	          catch (e) {
	              return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
	          }
	      };
	      /**
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getTitle = function () { return document.title; };
	      /**
	       * @param {?} newTitle
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.setTitle = function (newTitle) { document.title = newTitle || ''; };
	      /**
	       * @param {?} n
	       * @param {?} selector
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
	          if (n instanceof HTMLElement) {
	              return n.matches && n.matches(selector) ||
	                  n.msMatchesSelector && n.msMatchesSelector(selector) ||
	                  n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
	          }
	          return false;
	      };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.isTemplateElement = function (el) {
	          return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
	      };
	      /**
	       * @param {?} node
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };
	      /**
	       * @param {?} node
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };
	      /**
	       * @param {?} node
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };
	      /**
	       * @param {?} node
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.hasShadowRoot = function (node) {
	          return isPresent(node.shadowRoot) && node instanceof HTMLElement;
	      };
	      /**
	       * @param {?} node
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };
	      /**
	       * @param {?} node
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.importIntoDoc = function (node) { return document.importNode(this.templateAwareRoot(node), true); };
	      /**
	       * @param {?} node
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getHref = function (el) { return ((el)).href; };
	      /**
	       * @param {?} event
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getEventKey = function (event) {
	          var /** @type {?} */ key = event.key;
	          if (isBlank(key)) {
	              key = event.keyIdentifier;
	              // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
	              // Safari cf
	              // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
	              if (isBlank(key)) {
	                  return 'Unidentified';
	              }
	              if (key.startsWith('U+')) {
	                  key = String.fromCharCode(parseInt(key.substring(2), 16));
	                  if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
	                      // There is a bug in Chrome for numeric keypad keys:
	                      // https://code.google.com/p/chromium/issues/detail?id=155654
	                      // 1, 2, 3 ... are reported as A, B, C ...
	                      key = ((_chromeNumKeyPadMap))[key];
	                  }
	              }
	          }
	          return _keyMap[key] || key;
	      };
	      /**
	       * @param {?} target
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getGlobalEventTarget = function (target) {
	          if (target === 'window') {
	              return window;
	          }
	          if (target === 'document') {
	              return document;
	          }
	          if (target === 'body') {
	              return document.body;
	          }
	      };
	      /**
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getHistory = function () { return window.history; };
	      /**
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getLocation = function () { return window.location; };
	      /**
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getBaseHref = function () {
	          var /** @type {?} */ href = getBaseElementHref();
	          return isBlank(href) ? null : relativePath(href);
	      };
	      /**
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };
	      /**
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };
	      /**
	       * @param {?} element
	       * @param {?} name
	       * @param {?} value
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.setData = function (element, name, value) {
	          this.setAttribute(element, 'data-' + name, value);
	      };
	      /**
	       * @param {?} element
	       * @param {?} name
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getData = function (element, name) {
	          return this.getAttribute(element, 'data-' + name);
	      };
	      /**
	       * @param {?} element
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };
	      /**
	       * @param {?} path
	       * @param {?} value
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.setGlobalVar = function (path, value) { setValueOnPath(global$1, path, value); };
	      /**
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.supportsWebAnimation = function () {
	          return typeof ((Element)).prototype['animate'] === 'function';
	      };
	      /**
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.performanceNow = function () {
	          // performance.now() is not available in all browsers, see
	          // http://caniuse.com/#search=performance.now
	          return window.performance && window.performance.now ? window.performance.now() :
	              new Date().getTime();
	      };
	      /**
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.supportsCookies = function () { return true; };
	      /**
	       * @param {?} name
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.getCookie = function (name) { return parseCookieValue(document.cookie, name); };
	      /**
	       * @param {?} name
	       * @param {?} value
	       * @return {?}
	       */
	      BrowserDomAdapter.prototype.setCookie = function (name, value) {
	          // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does
	          // not clear other cookies.
	          document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
	      };
	      return BrowserDomAdapter;
	  }(GenericBrowserDomAdapter));
	  var /** @type {?} */ baseElement = null;
	  /**
	   * @return {?}
	   */
	  function getBaseElementHref() {
	      if (!baseElement) {
	          baseElement = document.querySelector('base');
	          if (!baseElement) {
	              return null;
	          }
	      }
	      return baseElement.getAttribute('href');
	  }
	  // based on urlUtils.js in AngularJS 1
	  var /** @type {?} */ urlParsingNode;
	  /**
	   * @param {?} url
	   * @return {?}
	   */
	  function relativePath(url) {
	      if (!urlParsingNode) {
	          urlParsingNode = document.createElement('a');
	      }
	      urlParsingNode.setAttribute('href', url);
	      return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
	          '/' + urlParsingNode.pathname;
	  }
	  /**
	   * @param {?} cookieStr
	   * @param {?} name
	   * @return {?}
	   */
	  function parseCookieValue(cookieStr, name) {
	      name = encodeURIComponent(name);
	      for (var _i = 0, _a = cookieStr.split(';'); _i < _a.length; _i++) {
	          var cookie = _a[_i];
	          var /** @type {?} */ eqIndex = cookie.indexOf('=');
	          var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], cookieName = _b[0], cookieValue = _b[1];
	          if (cookieName.trim() === name) {
	              return decodeURIComponent(cookieValue);
	          }
	      }
	      return null;
	  }
	
	  /**
	   * @license undefined
	    * Copyright Google Inc. All Rights Reserved.
	    * *
	    * Use of this source code is governed by an MIT-style license that can be
	    * found in the LICENSE file at https://angular.io/license
	   * @return {?}
	   */
	  function supportsState() {
	      return !!window.history.pushState;
	  }
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$2 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  /**
	   *  `PlatformLocation` encapsulates all of the direct calls to platform APIs.
	    * This class should not be used directly by an application developer. Instead, use
	    * {@link Location}.
	   */
	  var BrowserPlatformLocation = (function (_super) {
	      __extends$2(BrowserPlatformLocation, _super);
	      function BrowserPlatformLocation() {
	          _super.call(this);
	          this._init();
	      }
	      /**
	       * @return {?}
	       */
	      BrowserPlatformLocation.prototype._init = function () {
	          this._location = getDOM().getLocation();
	          this._history = getDOM().getHistory();
	      };
	      Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
	          /**
	           * @return {?}
	           */
	          get: function () { return this._location; },
	          enumerable: true,
	          configurable: true
	      });
	      /**
	       * @return {?}
	       */
	      BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return getDOM().getBaseHref(); };
	      /**
	       * @param {?} fn
	       * @return {?}
	       */
	      BrowserPlatformLocation.prototype.onPopState = function (fn) {
	          getDOM().getGlobalEventTarget('window').addEventListener('popstate', fn, false);
	      };
	      /**
	       * @param {?} fn
	       * @return {?}
	       */
	      BrowserPlatformLocation.prototype.onHashChange = function (fn) {
	          getDOM().getGlobalEventTarget('window').addEventListener('hashchange', fn, false);
	      };
	      Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
	          /**
	           * @return {?}
	           */
	          get: function () { return this._location.pathname; },
	          /**
	           * @param {?} newPath
	           * @return {?}
	           */
	          set: function (newPath) { this._location.pathname = newPath; },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
	          /**
	           * @return {?}
	           */
	          get: function () { return this._location.search; },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
	          /**
	           * @return {?}
	           */
	          get: function () { return this._location.hash; },
	          enumerable: true,
	          configurable: true
	      });
	      /**
	       * @param {?} state
	       * @param {?} title
	       * @param {?} url
	       * @return {?}
	       */
	      BrowserPlatformLocation.prototype.pushState = function (state, title, url) {
	          if (supportsState()) {
	              this._history.pushState(state, title, url);
	          }
	          else {
	              this._location.hash = url;
	          }
	      };
	      /**
	       * @param {?} state
	       * @param {?} title
	       * @param {?} url
	       * @return {?}
	       */
	      BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {
	          if (supportsState()) {
	              this._history.replaceState(state, title, url);
	          }
	          else {
	              this._location.hash = url;
	          }
	      };
	      /**
	       * @return {?}
	       */
	      BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };
	      /**
	       * @return {?}
	       */
	      BrowserPlatformLocation.prototype.back = function () { this._history.back(); };
	      BrowserPlatformLocation.decorators = [
	          { type: core.Injectable },
	      ];
	      /** @nocollapse */
	      BrowserPlatformLocation.ctorParameters = function () { return []; };
	      return BrowserPlatformLocation;
	  }(_angular_common.PlatformLocation));
	
	  var BrowserGetTestability = (function () {
	      function BrowserGetTestability() {
	      }
	      /**
	       * @return {?}
	       */
	      BrowserGetTestability.init = function () { core.setTestabilityGetter(new BrowserGetTestability()); };
	      /**
	       * @param {?} registry
	       * @return {?}
	       */
	      BrowserGetTestability.prototype.addToWindow = function (registry) {
	          global$1.getAngularTestability = function (elem, findInAncestors) {
	              if (findInAncestors === void 0) { findInAncestors = true; }
	              var /** @type {?} */ testability = registry.findTestabilityInTree(elem, findInAncestors);
	              if (testability == null) {
	                  throw new Error('Could not find testability for element.');
	              }
	              return testability;
	          };
	          global$1.getAllAngularTestabilities = function () { return registry.getAllTestabilities(); };
	          global$1.getAllAngularRootElements = function () { return registry.getAllRootElements(); };
	          var /** @type {?} */ whenAllStable = function (callback /** TODO #9100 */) {
	              var /** @type {?} */ testabilities = global$1.getAllAngularTestabilities();
	              var /** @type {?} */ count = testabilities.length;
	              var /** @type {?} */ didWork = false;
	              var /** @type {?} */ decrement = function (didWork_ /** TODO #9100 */) {
	                  didWork = didWork || didWork_;
	                  count--;
	                  if (count == 0) {
	                      callback(didWork);
	                  }
	              };
	              testabilities.forEach(function (testability /** TODO #9100 */) {
	                  testability.whenStable(decrement);
	              });
	          };
	          if (!global$1['frameworkStabilizers']) {
	              global$1['frameworkStabilizers'] = [];
	          }
	          global$1['frameworkStabilizers'].push(whenAllStable);
	      };
	      /**
	       * @param {?} registry
	       * @param {?} elem
	       * @param {?} findInAncestors
	       * @return {?}
	       */
	      BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	          if (elem == null) {
	              return null;
	          }
	          var /** @type {?} */ t = registry.getTestability(elem);
	          if (isPresent(t)) {
	              return t;
	          }
	          else if (!findInAncestors) {
	              return null;
	          }
	          if (getDOM().isShadowRoot(elem)) {
	              return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
	          }
	          return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
	      };
	      return BrowserGetTestability;
	  }());
	
	  /**
	   *  A service that can be used to get and set the title of a current HTML document.
	    * *
	    * Since an Angular 2 application can't be bootstrapped on the entire HTML document (`<html>` tag)
	    * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
	    * (representing the `<title>` tag). Instead, this service can be used to set and get the current
	    * title value.
	    * *
	   */
	  var Title = (function () {
	      function Title() {
	      }
	      /**
	       *  Get the title of the current HTML document.
	       * @return {?}
	       */
	      Title.prototype.getTitle = function () { return getDOM().getTitle(); };
	      /**
	       *  Set the title of the current HTML document.
	       * @param {?} newTitle
	       * @return {?}
	       */
	      Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(newTitle); };
	      return Title;
	  }());
	
	  /**
	   *  Wraps Javascript Objects
	   */
	  var StringMapWrapper = (function () {
	      function StringMapWrapper() {
	      }
	      /**
	       * @param {?} m1
	       * @param {?} m2
	       * @return {?}
	       */
	      StringMapWrapper.merge = function (m1, m2) {
	          var /** @type {?} */ m = {};
	          for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	              var k = _a[_i];
	              m[k] = m1[k];
	          }
	          for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	              var k = _c[_b];
	              m[k] = m2[k];
	          }
	          return m;
	      };
	      /**
	       * @param {?} m1
	       * @param {?} m2
	       * @return {?}
	       */
	      StringMapWrapper.equals = function (m1, m2) {
	          var /** @type {?} */ k1 = Object.keys(m1);
	          var /** @type {?} */ k2 = Object.keys(m2);
	          if (k1.length != k2.length) {
	              return false;
	          }
	          for (var /** @type {?} */ i = 0; i < k1.length; i++) {
	              var /** @type {?} */ key = k1[i];
	              if (m1[key] !== m2[key]) {
	                  return false;
	              }
	          }
	          return true;
	      };
	      return StringMapWrapper;
	  }());
	
	  /**
	   * A DI Token representing the main rendering context. In a browser this is the DOM Document.
	   *
	   * Note: Document might not be available in the Application Context when Application and Rendering
	   * Contexts are not the same (e.g. when running the application into a Web Worker).
	   *
	   * @stable
	   */
	  var /** @type {?} */ DOCUMENT = new core.OpaqueToken('DocumentToken');
	
	  /**
	   * @stable
	   */
	  var /** @type {?} */ EVENT_MANAGER_PLUGINS = new core.OpaqueToken('EventManagerPlugins');
	  /**
	   * @stable
	   */
	  var EventManager = (function () {
	      /**
	       * @param {?} plugins
	       * @param {?} _zone
	       */
	      function EventManager(plugins, _zone) {
	          var _this = this;
	          this._zone = _zone;
	          this._eventNameToPlugin = new Map();
	          plugins.forEach(function (p) { return p.manager = _this; });
	          this._plugins = plugins.slice().reverse();
	      }
	      /**
	       * @param {?} element
	       * @param {?} eventName
	       * @param {?} handler
	       * @return {?}
	       */
	      EventManager.prototype.addEventListener = function (element, eventName, handler) {
	          var /** @type {?} */ plugin = this._findPluginFor(eventName);
	          return plugin.addEventListener(element, eventName, handler);
	      };
	      /**
	       * @param {?} target
	       * @param {?} eventName
	       * @param {?} handler
	       * @return {?}
	       */
	      EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
	          var /** @type {?} */ plugin = this._findPluginFor(eventName);
	          return plugin.addGlobalEventListener(target, eventName, handler);
	      };
	      /**
	       * @return {?}
	       */
	      EventManager.prototype.getZone = function () { return this._zone; };
	      /**
	       * @param {?} eventName
	       * @return {?}
	       */
	      EventManager.prototype._findPluginFor = function (eventName) {
	          var /** @type {?} */ plugin = this._eventNameToPlugin.get(eventName);
	          if (plugin) {
	              return plugin;
	          }
	          var /** @type {?} */ plugins = this._plugins;
	          for (var /** @type {?} */ i = 0; i < plugins.length; i++) {
	              var /** @type {?} */ plugin_1 = plugins[i];
	              if (plugin_1.supports(eventName)) {
	                  this._eventNameToPlugin.set(eventName, plugin_1);
	                  return plugin_1;
	              }
	          }
	          throw new Error("No event manager plugin found for event " + eventName);
	      };
	      EventManager.decorators = [
	          { type: core.Injectable },
	      ];
	      /** @nocollapse */
	      EventManager.ctorParameters = function () { return [
	          { type: Array, decorators: [{ type: core.Inject, args: [EVENT_MANAGER_PLUGINS,] },] },
	          { type: core.NgZone, },
	      ]; };
	      return EventManager;
	  }());
	  /**
	   * @abstract
	   */
	  var EventManagerPlugin = (function () {
	      function EventManagerPlugin() {
	      }
	      /**
	       * @abstract
	       * @param {?} eventName
	       * @return {?}
	       */
	      EventManagerPlugin.prototype.supports = function (eventName) { };
	      /**
	       * @abstract
	       * @param {?} element
	       * @param {?} eventName
	       * @param {?} handler
	       * @return {?}
	       */
	      EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) { };
	      /**
	       * @param {?} element
	       * @param {?} eventName
	       * @param {?} handler
	       * @return {?}
	       */
	      EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
	          var /** @type {?} */ target = getDOM().getGlobalEventTarget(element);
	          if (!target) {
	              throw new Error("Unsupported event target " + target + " for event " + eventName);
	          }
	          return this.addEventListener(target, eventName, handler);
	      };
	      ;
	      return EventManagerPlugin;
	  }());
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$4 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var SharedStylesHost = (function () {
	      function SharedStylesHost() {
	          /** @internal */
	          this._styles = [];
	          /** @internal */
	          this._stylesSet = new Set();
	      }
	      /**
	       * @param {?} styles
	       * @return {?}
	       */
	      SharedStylesHost.prototype.addStyles = function (styles) {
	          var _this = this;
	          var /** @type {?} */ additions = [];
	          styles.forEach(function (style) {
	              if (!_this._stylesSet.has(style)) {
	                  _this._stylesSet.add(style);
	                  _this._styles.push(style);
	                  additions.push(style);
	              }
	          });
	          this.onStylesAdded(additions);
	      };
	      /**
	       * @param {?} additions
	       * @return {?}
	       */
	      SharedStylesHost.prototype.onStylesAdded = function (additions) { };
	      /**
	       * @return {?}
	       */
	      SharedStylesHost.prototype.getAllStyles = function () { return this._styles; };
	      SharedStylesHost.decorators = [
	          { type: core.Injectable },
	      ];
	      /** @nocollapse */
	      SharedStylesHost.ctorParameters = function () { return []; };
	      return SharedStylesHost;
	  }());
	  var DomSharedStylesHost = (function (_super) {
	      __extends$4(DomSharedStylesHost, _super);
	      /**
	       * @param {?} doc
	       */
	      function DomSharedStylesHost(doc) {
	          _super.call(this);
	          this._hostNodes = new Set();
	          this._hostNodes.add(doc.head);
	      }
	      /**
	       * @param {?} styles
	       * @param {?} host
	       * @return {?}
	       */
	      DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
	          for (var /** @type {?} */ i = 0; i < styles.length; i++) {
	              var /** @type {?} */ styleEl = document.createElement('style');
	              styleEl.textContent = styles[i];
	              host.appendChild(styleEl);
	          }
	      };
	      /**
	       * @param {?} hostNode
	       * @return {?}
	       */
	      DomSharedStylesHost.prototype.addHost = function (hostNode) {
	          this._addStylesToHost(this._styles, hostNode);
	          this._hostNodes.add(hostNode);
	      };
	      /**
	       * @param {?} hostNode
	       * @return {?}
	       */
	      DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };
	      /**
	       * @param {?} additions
	       * @return {?}
	       */
	      DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
	          var _this = this;
	          this._hostNodes.forEach(function (hostNode) { _this._addStylesToHost(additions, hostNode); });
	      };
	      DomSharedStylesHost.decorators = [
	          { type: core.Injectable },
	      ];
	      /** @nocollapse */
	      DomSharedStylesHost.ctorParameters = function () { return [
	          { type: undefined, decorators: [{ type: core.Inject, args: [DOCUMENT,] },] },
	      ]; };
	      return DomSharedStylesHost;
	  }(SharedStylesHost));
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$3 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var /** @type {?} */ NAMESPACE_URIS = {
	      'xlink': 'http://www.w3.org/1999/xlink',
	      'svg': 'http://www.w3.org/2000/svg',
	      'xhtml': 'http://www.w3.org/1999/xhtml'
	  };
	  var /** @type {?} */ TEMPLATE_COMMENT_TEXT = 'template bindings={}';
	  var /** @type {?} */ TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/;
	  /**
	   * @abstract
	   */
	  var DomRootRenderer = (function () {
	      /**
	       * @param {?} document
	       * @param {?} eventManager
	       * @param {?} sharedStylesHost
	       * @param {?} animationDriver
	       * @param {?} appId
	       */
	      function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver, appId) {
	          this.document = document;
	          this.eventManager = eventManager;
	          this.sharedStylesHost = sharedStylesHost;
	          this.animationDriver = animationDriver;
	          this.appId = appId;
	          this.registeredComponents = new Map();
	      }
	      /**
	       * @param {?} componentProto
	       * @return {?}
	       */
	      DomRootRenderer.prototype.renderComponent = function (componentProto) {
	          var /** @type {?} */ renderer = this.registeredComponents.get(componentProto.id);
	          if (!renderer) {
	              renderer = new DomRenderer(this, componentProto, this.animationDriver, this.appId + "-" + componentProto.id);
	              this.registeredComponents.set(componentProto.id, renderer);
	          }
	          return renderer;
	      };
	      return DomRootRenderer;
	  }());
	  var DomRootRenderer_ = (function (_super) {
	      __extends$3(DomRootRenderer_, _super);
	      /**
	       * @param {?} _document
	       * @param {?} _eventManager
	       * @param {?} sharedStylesHost
	       * @param {?} animationDriver
	       * @param {?} appId
	       */
	      function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver, appId) {
	          _super.call(this, _document, _eventManager, sharedStylesHost, animationDriver, appId);
	      }
	      DomRootRenderer_.decorators = [
	          { type: core.Injectable },
	      ];
	      /** @nocollapse */
	      DomRootRenderer_.ctorParameters = function () { return [
	          { type: undefined, decorators: [{ type: core.Inject, args: [DOCUMENT,] },] },
	          { type: EventManager, },
	          { type: DomSharedStylesHost, },
	          { type: AnimationDriver, },
	          { type: undefined, decorators: [{ type: core.Inject, args: [core.APP_ID,] },] },
	      ]; };
	      return DomRootRenderer_;
	  }(DomRootRenderer));
	  var /** @type {?} */ DIRECT_DOM_RENDERER = {
	      /**
	       * @param {?} node
	       * @return {?}
	       */
	      remove: function (node) {
	          if (node.parentNode) {
	              node.parentNode.removeChild(node);
	          }
	      },
	      /**
	       * @param {?} node
	       * @param {?} parent
	       * @return {?}
	       */
	      appendChild: function (node, parent) { parent.appendChild(node); },
	      /**
	       * @param {?} node
	       * @param {?} refNode
	       * @return {?}
	       */
	      insertBefore: function (node, refNode) { refNode.parentNode.insertBefore(node, refNode); },
	      /**
	       * @param {?} node
	       * @return {?}
	       */
	      nextSibling: function (node) { return node.nextSibling; },
	      /**
	       * @param {?} node
	       * @return {?}
	       */
	      parentElement: function (node) { return (node.parentNode); }
	  };
	  var DomRenderer = (function () {
	      /**
	       * @param {?} _rootRenderer
	       * @param {?} componentProto
	       * @param {?} _animationDriver
	       * @param {?} styleShimId
	       */
	      function DomRenderer(_rootRenderer, componentProto, _animationDriver, styleShimId) {
	          this._rootRenderer = _rootRenderer;
	          this.componentProto = componentProto;
	          this._animationDriver = _animationDriver;
	          this.directRenderer = DIRECT_DOM_RENDERER;
	          this._styles = flattenStyles(styleShimId, componentProto.styles, []);
	          if (componentProto.encapsulation !== core.ViewEncapsulation.Native) {
	              this._rootRenderer.sharedStylesHost.addStyles(this._styles);
	          }
	          if (this.componentProto.encapsulation === core.ViewEncapsulation.Emulated) {
	              this._contentAttr = shimContentAttribute(styleShimId);
	              this._hostAttr = shimHostAttribute(styleShimId);
	          }
	          else {
	              this._contentAttr = null;
	              this._hostAttr = null;
	          }
	      }
	      /**
	       * @param {?} selectorOrNode
	       * @param {?} debugInfo
	       * @return {?}
	       */
	      DomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
	          var /** @type {?} */ el;
	          if (typeof selectorOrNode === 'string') {
	              el = this._rootRenderer.document.querySelector(selectorOrNode);
	              if (!el) {
	                  throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
	              }
	          }
	          else {
	              el = selectorOrNode;
	          }
	          while (el.firstChild) {
	              el.removeChild(el.firstChild);
	          }
	          return el;
	      };
	      /**
	       * @param {?} parent
	       * @param {?} name
	       * @param {?} debugInfo
	       * @return {?}
	       */
	      DomRenderer.prototype.createElement = function (parent, name, debugInfo) {
	          var /** @type {?} */ el;
	          if (isNamespaced(name)) {
	              var /** @type {?} */ nsAndName = splitNamespace(name);
	              el = document.createElementNS((NAMESPACE_URIS)[nsAndName[0]], nsAndName[1]);
	          }
	          else {
	              el = document.createElement(name);
	          }
	          if (this._contentAttr) {
	              el.setAttribute(this._contentAttr, '');
	          }
	          if (parent) {
	              parent.appendChild(el);
	          }
	          return el;
	      };
	      /**
	       * @param {?} hostElement
	       * @return {?}
	       */
	      DomRenderer.prototype.createViewRoot = function (hostElement) {
	          var /** @type {?} */ nodesParent;
	          if (this.componentProto.encapsulation === core.ViewEncapsulation.Native) {
	              nodesParent = ((hostElement)).createShadowRoot();
	              this._rootRenderer.sharedStylesHost.addHost(nodesParent);
	              for (var /** @type {?} */ i = 0; i < this._styles.length; i++) {
	                  var /** @type {?} */ styleEl = document.createElement('style');
	                  styleEl.textContent = this._styles[i];
	                  nodesParent.appendChild(styleEl);
	              }
	          }
	          else {
	              if (this._hostAttr) {
	                  hostElement.setAttribute(this._hostAttr, '');
	              }
	              nodesParent = hostElement;
	          }
	          return nodesParent;
	      };
	      /**
	       * @param {?} parentElement
	       * @param {?} debugInfo
	       * @return {?}
	       */
	      DomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
	          var /** @type {?} */ comment = document.createComment(TEMPLATE_COMMENT_TEXT);
	          if (parentElement) {
	              parentElement.appendChild(comment);
	          }
	          return comment;
	      };
	      /**
	       * @param {?} parentElement
	       * @param {?} value
	       * @param {?} debugInfo
	       * @return {?}
	       */
	      DomRenderer.prototype.createText = function (parentElement, value, debugInfo) {
	          var /** @type {?} */ node = document.createTextNode(value);
	          if (parentElement) {
	              parentElement.appendChild(node);
	          }
	          return node;
	      };
	      /**
	       * @param {?} parentElement
	       * @param {?} nodes
	       * @return {?}
	       */
	      DomRenderer.prototype.projectNodes = function (parentElement, nodes) {
	          if (!parentElement)
	              return;
	          appendNodes(parentElement, nodes);
	      };
	      /**
	       * @param {?} node
	       * @param {?} viewRootNodes
	       * @return {?}
	       */
	      DomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) { moveNodesAfterSibling(node, viewRootNodes); };
	      /**
	       * @param {?} viewRootNodes
	       * @return {?}
	       */
	      DomRenderer.prototype.detachView = function (viewRootNodes) {
	          for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {
	              var /** @type {?} */ node = viewRootNodes[i];
	              if (node.parentNode) {
	                  node.parentNode.removeChild(node);
	              }
	          }
	      };
	      /**
	       * @param {?} hostElement
	       * @param {?} viewAllNodes
	       * @return {?}
	       */
	      DomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
	          if (this.componentProto.encapsulation === core.ViewEncapsulation.Native && hostElement) {
	              this._rootRenderer.sharedStylesHost.removeHost(((hostElement)).shadowRoot);
	          }
	      };
	      /**
	       * @param {?} renderElement
	       * @param {?} name
	       * @param {?} callback
	       * @return {?}
	       */
	      DomRenderer.prototype.listen = function (renderElement, name, callback) {
	          return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
	      };
	      /**
	       * @param {?} target
	       * @param {?} name
	       * @param {?} callback
	       * @return {?}
	       */
	      DomRenderer.prototype.listenGlobal = function (target, name, callback) {
	          return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
	      };
	      /**
	       * @param {?} renderElement
	       * @param {?} propertyName
	       * @param {?} propertyValue
	       * @return {?}
	       */
	      DomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
	          ((renderElement))[propertyName] = propertyValue;
	      };
	      /**
	       * @param {?} renderElement
	       * @param {?} attributeName
	       * @param {?} attributeValue
	       * @return {?}
	       */
	      DomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
	          var /** @type {?} */ attrNs;
	          var /** @type {?} */ attrNameWithoutNs = attributeName;
	          if (isNamespaced(attributeName)) {
	              var /** @type {?} */ nsAndName = splitNamespace(attributeName);
	              attrNameWithoutNs = nsAndName[1];
	              attributeName = nsAndName[0] + ':' + nsAndName[1];
	              attrNs = NAMESPACE_URIS[nsAndName[0]];
	          }
	          if (isPresent(attributeValue)) {
	              if (attrNs) {
	                  renderElement.setAttributeNS(attrNs, attributeName, attributeValue);
	              }
	              else {
	                  renderElement.setAttribute(attributeName, attributeValue);
	              }
	          }
	          else {
	              if (isPresent(attrNs)) {
	                  renderElement.removeAttributeNS(attrNs, attrNameWithoutNs);
	              }
	              else {
	                  renderElement.removeAttribute(attributeName);
	              }
	          }
	      };
	      /**
	       * @param {?} renderElement
	       * @param {?} propertyName
	       * @param {?} propertyValue
	       * @return {?}
	       */
	      DomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
	          if (renderElement.nodeType === Node.COMMENT_NODE) {
	              var /** @type {?} */ existingBindings = renderElement.nodeValue.replace(/\n/g, '').match(TEMPLATE_BINDINGS_EXP);
	              var /** @type {?} */ parsedBindings = JSON.parse(existingBindings[1]);
	              parsedBindings[propertyName] = propertyValue;
	              renderElement.nodeValue =
	                  TEMPLATE_COMMENT_TEXT.replace('{}', JSON.stringify(parsedBindings, null, 2));
	          }
	          else {
	              this.setElementAttribute(renderElement, propertyName, propertyValue);
	          }
	      };
	      /**
	       * @param {?} renderElement
	       * @param {?} className
	       * @param {?} isAdd
	       * @return {?}
	       */
	      DomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
	          if (isAdd) {
	              renderElement.classList.add(className);
	          }
	          else {
	              renderElement.classList.remove(className);
	          }
	      };
	      /**
	       * @param {?} renderElement
	       * @param {?} styleName
	       * @param {?} styleValue
	       * @return {?}
	       */
	      DomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
	          if (isPresent(styleValue)) {
	              ((renderElement.style))[styleName] = stringify(styleValue);
	          }
	          else {
	              // IE requires '' instead of null
	              // see https://github.com/angular/angular/issues/7916
	              ((renderElement.style))[styleName] = '';
	          }
	      };
	      /**
	       * @param {?} renderElement
	       * @param {?} methodName
	       * @param {?} args
	       * @return {?}
	       */
	      DomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
	          ((renderElement))[methodName].apply(renderElement, args);
	      };
	      /**
	       * @param {?} renderNode
	       * @param {?} text
	       * @return {?}
	       */
	      DomRenderer.prototype.setText = function (renderNode, text) { renderNode.nodeValue = text; };
	      /**
	       * @param {?} element
	       * @param {?} startingStyles
	       * @param {?} keyframes
	       * @param {?} duration
	       * @param {?} delay
	       * @param {?} easing
	       * @param {?=} previousPlayers
	       * @return {?}
	       */
	      DomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
	          if (previousPlayers === void 0) { previousPlayers = []; }
	          return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
	      };
	      return DomRenderer;
	  }());
	  /**
	   * @param {?} sibling
	   * @param {?} nodes
	   * @return {?}
	   */
	  function moveNodesAfterSibling(sibling, nodes) {
	      var /** @type {?} */ parent = sibling.parentNode;
	      if (nodes.length > 0 && parent) {
	          var /** @type {?} */ nextSibling = sibling.nextSibling;
	          if (nextSibling) {
	              for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	                  parent.insertBefore(nodes[i], nextSibling);
	              }
	          }
	          else {
	              for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	                  parent.appendChild(nodes[i]);
	              }
	          }
	      }
	  }
	  /**
	   * @param {?} parent
	   * @param {?} nodes
	   * @return {?}
	   */
	  function appendNodes(parent, nodes) {
	      for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	          parent.appendChild(nodes[i]);
	      }
	  }
	  /**
	   * @param {?} eventHandler
	   * @return {?}
	   */
	  function decoratePreventDefault(eventHandler) {
	      return function (event) {
	          var /** @type {?} */ allowDefaultBehavior = eventHandler(event);
	          if (allowDefaultBehavior === false) {
	              // TODO(tbosch): move preventDefault into event plugins...
	              event.preventDefault();
	              event.returnValue = false;
	          }
	      };
	  }
	  var /** @type {?} */ COMPONENT_REGEX = /%COMP%/g;
	  var /** @type {?} */ COMPONENT_VARIABLE = '%COMP%';
	  var /** @type {?} */ HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
	  var /** @type {?} */ CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
	  /**
	   * @param {?} componentShortId
	   * @return {?}
	   */
	  function shimContentAttribute(componentShortId) {
	      return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
	  }
	  /**
	   * @param {?} componentShortId
	   * @return {?}
	   */
	  function shimHostAttribute(componentShortId) {
	      return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
	  }
	  /**
	   * @param {?} compId
	   * @param {?} styles
	   * @param {?} target
	   * @return {?}
	   */
	  function flattenStyles(compId, styles, target) {
	      for (var /** @type {?} */ i = 0; i < styles.length; i++) {
	          var /** @type {?} */ style = styles[i];
	          if (Array.isArray(style)) {
	              flattenStyles(compId, style, target);
	          }
	          else {
	              style = style.replace(COMPONENT_REGEX, compId);
	              target.push(style);
	          }
	      }
	      return target;
	  }
	  var /** @type {?} */ NS_PREFIX_RE = /^:([^:]+):(.+)$/;
	  /**
	   * @param {?} name
	   * @return {?}
	   */
	  function isNamespaced(name) {
	      return name[0] === ':';
	  }
	  /**
	   * @param {?} name
	   * @return {?}
	   */
	  function splitNamespace(name) {
	      var /** @type {?} */ match = name.match(NS_PREFIX_RE);
	      return [match[1], match[2]];
	  }
	
	  var /** @type {?} */ CORE_TOKENS = {
	      'ApplicationRef': core.ApplicationRef,
	      'NgZone': core.NgZone,
	  };
	  var /** @type {?} */ INSPECT_GLOBAL_NAME = 'ng.probe';
	  var /** @type {?} */ CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
	  /**
	   *  Returns a {@link DebugElement} for the given native DOM element, or
	    * null if the given native element does not have an Angular view associated
	    * with it.
	   * @param {?} element
	   * @return {?}
	   */
	  function inspectNativeElement(element) {
	      return core.getDebugNode(element);
	  }
	  /**
	   *  Deprecated. Use the one from '@angular/core'.
	   * @deprecated
	   */
	  var NgProbeToken = (function () {
	      /**
	       * @param {?} name
	       * @param {?} token
	       */
	      function NgProbeToken(name, token) {
	          this.name = name;
	          this.token = token;
	      }
	      return NgProbeToken;
	  }());
	  /**
	   * @param {?} rootRenderer
	   * @param {?} extraTokens
	   * @param {?} coreTokens
	   * @return {?}
	   */
	  function _createConditionalRootRenderer(rootRenderer, extraTokens, coreTokens) {
	      return core.isDevMode() ?
	          _createRootRenderer(rootRenderer, (extraTokens || []).concat(coreTokens || [])) :
	          rootRenderer;
	  }
	  /**
	   * @param {?} rootRenderer
	   * @param {?} extraTokens
	   * @return {?}
	   */
	  function _createRootRenderer(rootRenderer, extraTokens) {
	      getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
	      getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, StringMapWrapper.merge(CORE_TOKENS, _ngProbeTokensToMap(extraTokens || [])));
	      return new DebugDomRootRenderer(rootRenderer);
	  }
	  /**
	   * @param {?} tokens
	   * @return {?}
	   */
	  function _ngProbeTokensToMap(tokens) {
	      return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});
	  }
	  /**
	   * Providers which support debugging Angular applications (e.g. via `ng.probe`).
	   */
	  var /** @type {?} */ ELEMENT_PROBE_PROVIDERS = [{
	          provide: core.RootRenderer,
	          useFactory: _createConditionalRootRenderer,
	          deps: [
	              DomRootRenderer, [NgProbeToken, new core.Optional()],
	              [core.NgProbeToken, new core.Optional()]
	          ]
	      }];
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$5 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var DomEventsPlugin = (function (_super) {
	      __extends$5(DomEventsPlugin, _super);
	      function DomEventsPlugin() {
	          _super.apply(this, arguments);
	      }
	      /**
	       * @param {?} eventName
	       * @return {?}
	       */
	      DomEventsPlugin.prototype.supports = function (eventName) { return true; };
	      /**
	       * @param {?} element
	       * @param {?} eventName
	       * @param {?} handler
	       * @return {?}
	       */
	      DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	          element.addEventListener(eventName, /** @type {?} */ (handler), false);
	          return function () { return element.removeEventListener(eventName, /** @type {?} */ (handler), false); };
	      };
	      DomEventsPlugin.decorators = [
	          { type: core.Injectable },
	      ];
	      /** @nocollapse */
	      DomEventsPlugin.ctorParameters = function () { return []; };
	      return DomEventsPlugin;
	  }(EventManagerPlugin));
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$6 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var /** @type {?} */ EVENT_NAMES = {
	      // pan
	      'pan': true,
	      'panstart': true,
	      'panmove': true,
	      'panend': true,
	      'pancancel': true,
	      'panleft': true,
	      'panright': true,
	      'panup': true,
	      'pandown': true,
	      // pinch
	      'pinch': true,
	      'pinchstart': true,
	      'pinchmove': true,
	      'pinchend': true,
	      'pinchcancel': true,
	      'pinchin': true,
	      'pinchout': true,
	      // press
	      'press': true,
	      'pressup': true,
	      // rotate
	      'rotate': true,
	      'rotatestart': true,
	      'rotatemove': true,
	      'rotateend': true,
	      'rotatecancel': true,
	      // swipe
	      'swipe': true,
	      'swipeleft': true,
	      'swiperight': true,
	      'swipeup': true,
	      'swipedown': true,
	      // tap
	      'tap': true,
	  };
	  /**
	   * A DI token that you can use to provide{@link HammerGestureConfig} to Angular. Use it to configure
	   * Hammer gestures.
	   *
	   * @experimental
	   */
	  var /** @type {?} */ HAMMER_GESTURE_CONFIG = new core.OpaqueToken('HammerGestureConfig');
	  /**
	   * @experimental
	   */
	  var HammerGestureConfig = (function () {
	      function HammerGestureConfig() {
	          this.events = [];
	          this.overrides = {};
	      }
	      /**
	       * @param {?} element
	       * @return {?}
	       */
	      HammerGestureConfig.prototype.buildHammer = function (element) {
	          var /** @type {?} */ mc = new Hammer(element);
	          mc.get('pinch').set({ enable: true });
	          mc.get('rotate').set({ enable: true });
	          for (var eventName in this.overrides) {
	              mc.get(eventName).set(this.overrides[eventName]);
	          }
	          return mc;
	      };
	      HammerGestureConfig.decorators = [
	          { type: core.Injectable },
	      ];
	      /** @nocollapse */
	      HammerGestureConfig.ctorParameters = function () { return []; };
	      return HammerGestureConfig;
	  }());
	  var HammerGesturesPlugin = (function (_super) {
	      __extends$6(HammerGesturesPlugin, _super);
	      /**
	       * @param {?} _config
	       */
	      function HammerGesturesPlugin(_config) {
	          _super.call(this);
	          this._config = _config;
	      }
	      /**
	       * @param {?} eventName
	       * @return {?}
	       */
	      HammerGesturesPlugin.prototype.supports = function (eventName) {
	          if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
	              return false;
	          }
	          if (!((window)).Hammer) {
	              throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
	          }
	          return true;
	      };
	      /**
	       * @param {?} element
	       * @param {?} eventName
	       * @param {?} handler
	       * @return {?}
	       */
	      HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
	          var _this = this;
	          var /** @type {?} */ zone = this.manager.getZone();
	          eventName = eventName.toLowerCase();
	          return zone.runOutsideAngular(function () {
	              // Creating the manager bind events, must be done outside of angular
	              var /** @type {?} */ mc = _this._config.buildHammer(element);
	              var /** @type {?} */ callback = function (eventObj) {
	                  zone.runGuarded(function () { handler(eventObj); });
	              };
	              mc.on(eventName, callback);
	              return function () { return mc.off(eventName, callback); };
	          });
	      };
	      /**
	       * @param {?} eventName
	       * @return {?}
	       */
	      HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };
	      HammerGesturesPlugin.decorators = [
	          { type: core.Injectable },
	      ];
	      /** @nocollapse */
	      HammerGesturesPlugin.ctorParameters = function () { return [
	          { type: HammerGestureConfig, decorators: [{ type: core.Inject, args: [HAMMER_GESTURE_CONFIG,] },] },
	      ]; };
	      return HammerGesturesPlugin;
	  }(EventManagerPlugin));
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$7 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var /** @type {?} */ MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
	  var /** @type {?} */ MODIFIER_KEY_GETTERS = {
	      'alt': function (event) { return event.altKey; },
	      'control': function (event) { return event.ctrlKey; },
	      'meta': function (event) { return event.metaKey; },
	      'shift': function (event) { return event.shiftKey; }
	  };
	  /**
	   * @experimental
	   */
	  var KeyEventsPlugin = (function (_super) {
	      __extends$7(KeyEventsPlugin, _super);
	      function KeyEventsPlugin() {
	          _super.call(this);
	      }
	      /**
	       * @param {?} eventName
	       * @return {?}
	       */
	      KeyEventsPlugin.prototype.supports = function (eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; };
	      /**
	       * @param {?} element
	       * @param {?} eventName
	       * @param {?} handler
	       * @return {?}
	       */
	      KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	          var /** @type {?} */ parsedEvent = KeyEventsPlugin.parseEventName(eventName);
	          var /** @type {?} */ outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
	          return this.manager.getZone().runOutsideAngular(function () {
	              return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
	          });
	      };
	      /**
	       * @param {?} eventName
	       * @return {?}
	       */
	      KeyEventsPlugin.parseEventName = function (eventName) {
	          var /** @type {?} */ parts = eventName.toLowerCase().split('.');
	          var /** @type {?} */ domEventName = parts.shift();
	          if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {
	              return null;
	          }
	          var /** @type {?} */ key = KeyEventsPlugin._normalizeKey(parts.pop());
	          var /** @type {?} */ fullKey = '';
	          MODIFIER_KEYS.forEach(function (modifierName) {
	              var /** @type {?} */ index = parts.indexOf(modifierName);
	              if (index > -1) {
	                  parts.splice(index, 1);
	                  fullKey += modifierName + '.';
	              }
	          });
	          fullKey += key;
	          if (parts.length != 0 || key.length === 0) {
	              // returning null instead of throwing to let another plugin process the event
	              return null;
	          }
	          var /** @type {?} */ result = {};
	          result['domEventName'] = domEventName;
	          result['fullKey'] = fullKey;
	          return result;
	      };
	      /**
	       * @param {?} event
	       * @return {?}
	       */
	      KeyEventsPlugin.getEventFullKey = function (event) {
	          var /** @type {?} */ fullKey = '';
	          var /** @type {?} */ key = getDOM().getEventKey(event);
	          key = key.toLowerCase();
	          if (key === ' ') {
	              key = 'space'; // for readability
	          }
	          else if (key === '.') {
	              key = 'dot'; // because '.' is used as a separator in event names
	          }
	          MODIFIER_KEYS.forEach(function (modifierName) {
	              if (modifierName != key) {
	                  var /** @type {?} */ modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
	                  if (modifierGetter(event)) {
	                      fullKey += modifierName + '.';
	                  }
	              }
	          });
	          fullKey += key;
	          return fullKey;
	      };
	      /**
	       * @param {?} fullKey
	       * @param {?} handler
	       * @param {?} zone
	       * @return {?}
	       */
	      KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {
	          return function (event /** TODO #9100 */) {
	              if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
	                  zone.runGuarded(function () { return handler(event); });
	              }
	          };
	      };
	      /**
	       * @param {?} keyName
	       * @return {?}
	       */
	      KeyEventsPlugin._normalizeKey = function (keyName) {
	          // TODO: switch to a Map if the mapping grows too much
	          switch (keyName) {
	              case 'esc':
	                  return 'escape';
	              default:
	                  return keyName;
	          }
	      };
	      KeyEventsPlugin.decorators = [
	          { type: core.Injectable },
	      ];
	      /** @nocollapse */
	      KeyEventsPlugin.ctorParameters = function () { return []; };
	      return KeyEventsPlugin;
	  }(EventManagerPlugin));
	
	  /**
	   * A pattern that recognizes a commonly useful subset of URLs that are safe.
	   *
	   * This regular expression matches a subset of URLs that will not cause script
	   * execution if used in URL context within a HTML document. Specifically, this
	   * regular expression matches if (comment from here on and regex copied from
	   * Soy's EscapingConventions):
	   * (1) Either a protocol in a whitelist (http, https, mailto or ftp).
	   * (2) or no protocol.  A protocol must be followed by a colon. The below
	   *     allows that by allowing colons only after one of the characters [/?#].
	   *     A colon after a hash (#) must be in the fragment.
	   *     Otherwise, a colon after a (?) must be in a query.
	   *     Otherwise, a colon after a single solidus (/) must be in a path.
	   *     Otherwise, a colon after a double solidus (//) must be in the authority
	   *     (before port).
	   *
	   * The pattern disallows &, used in HTML entity declarations before
	   * one of the characters in [/?#]. This disallows HTML entities used in the
	   * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
	   * It also disallows HTML entities in the first path part of a relative path,
	   * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
	   * that. More importantly, it disallows masking of a colon,
	   * e.g. "javascript&#58;...".
	   *
	   * This regular expression was taken from the Closure sanitization library.
	   */
	  var /** @type {?} */ SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
	  /** A pattern that matches safe data URLs. Only matches image, video and audio types. */
	  var /** @type {?} */ DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
	  /**
	   * @param {?} url
	   * @return {?}
	   */
	  function sanitizeUrl(url) {
	      url = String(url);
	      if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
	          return url;
	      if (core.isDevMode()) {
	          getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
	      }
	      return 'unsafe:' + url;
	  }
	  /**
	   * @param {?} srcset
	   * @return {?}
	   */
	  function sanitizeSrcset(srcset) {
	      srcset = String(srcset);
	      return srcset.split(',').map(function (srcset) { return sanitizeUrl(srcset.trim()); }).join(', ');
	  }
	
	  /** A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below. */
	  var /** @type {?} */ inertElement = null;
	  /** Lazily initialized to make sure the DOM adapter gets set before use. */
	  var /** @type {?} */ DOM = null;
	  /**
	   *  Returns an HTML element that is guaranteed to not execute code when creating elements in it.
	   * @return {?}
	   */
	  function getInertElement() {
	      if (inertElement)
	          return inertElement;
	      DOM = getDOM();
	      // Prefer using <template> element if supported.
	      var /** @type {?} */ templateEl = DOM.createElement('template');
	      if ('content' in templateEl)
	          return templateEl;
	      var /** @type {?} */ doc = DOM.createHtmlDocument();
	      inertElement = DOM.querySelector(doc, 'body');
	      if (inertElement == null) {
	          // usually there should be only one body element in the document, but IE doesn't have any, so we
	          // need to create one.
	          var /** @type {?} */ html = DOM.createElement('html', doc);
	          inertElement = DOM.createElement('body', doc);
	          DOM.appendChild(html, inertElement);
	          DOM.appendChild(doc, html);
	      }
	      return inertElement;
	  }
	  /**
	   * @param {?} tags
	   * @return {?}
	   */
	  function tagSet(tags) {
	      var /** @type {?} */ res = {};
	      for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {
	          var t = _a[_i];
	          res[t] = true;
	      }
	      return res;
	  }
	  /**
	   * @param {...?} sets
	   * @return {?}
	   */
	  function merge() {
	      var sets = [];
	      for (var _i = 0; _i < arguments.length; _i++) {
	          sets[_i - 0] = arguments[_i];
	      }
	      var /** @type {?} */ res = {};
	      for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {
	          var s = sets_1[_a];
	          for (var v in s) {
	              if (s.hasOwnProperty(v))
	                  res[v] = true;
	          }
	      }
	      return res;
	  }
	  // Good source of info about elements and attributes
	  // http://dev.w3.org/html5/spec/Overview.html#semantics
	  // http://simon.html5.org/html-elements
	  // Safe Void Elements - HTML5
	  // http://dev.w3.org/html5/spec/Overview.html#void-elements
	  var /** @type {?} */ VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
	  // Elements that you can, intentionally, leave open (and which close themselves)
	  // http://dev.w3.org/html5/spec/Overview.html#optional-tags
	  var /** @type {?} */ OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
	  var /** @type {?} */ OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
	  var /** @type {?} */ OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
	  // Safe Block Elements - HTML5
	  var /** @type {?} */ BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +
	      'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
	      'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
	  // Inline Elements - HTML5
	  var /** @type {?} */ INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +
	      'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +
	      'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
	  var /** @type {?} */ VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
	  // Attributes that have href and hence need to be sanitized
	  var /** @type {?} */ URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
	  // Attributes that have special href set hence need to be sanitized
	  var /** @type {?} */ SRCSET_ATTRS = tagSet('srcset');
	  var /** @type {?} */ HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +
	      'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +
	      'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +
	      'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +
	      'valign,value,vspace,width');
	  // NB: This currently conciously doesn't support SVG. SVG sanitization has had several security
	  // issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
	  // innerHTML is required, SVG attributes should be added here.
	  // NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
	  // can be sanitized, but they increase security surface area without a legitimate use case, so they
	  // are left out here.
	  var /** @type {?} */ VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
	  /**
	   *  SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
	    * attributes.
	   */
	  var SanitizingHtmlSerializer = (function () {
	      function SanitizingHtmlSerializer() {
	          this.sanitizedSomething = false;
	          this.buf = [];
	      }
	      /**
	       * @param {?} el
	       * @return {?}
	       */
	      SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {
	          // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
	          // However this code never accesses properties off of `document` before deleting its contents
	          // again, so it shouldn't be vulnerable to DOM clobbering.
	          var /** @type {?} */ current = el.firstChild;
	          while (current) {
	              if (DOM.isElementNode(current)) {
	                  this.startElement(/** @type {?} */ (current));
	              }
	              else if (DOM.isTextNode(current)) {
	                  this.chars(DOM.nodeValue(current));
	              }
	              else {
	                  // Strip non-element, non-text nodes.
	                  this.sanitizedSomething = true;
	              }
	              if (DOM.firstChild(current)) {
	                  current = DOM.firstChild(current);
	                  continue;
	              }
	              while (current) {
	                  // Leaving the element. Walk up and to the right, closing tags as we go.
	                  if (DOM.isElementNode(current)) {
	                      this.endElement(/** @type {?} */ (current));
	                  }
	                  if (DOM.nextSibling(current)) {
	                      current = DOM.nextSibling(current);
	                      break;
	                  }
	                  current = DOM.parentElement(current);
	              }
	          }
	          return this.buf.join('');
	      };
	      /**
	       * @param {?} element
	       * @return {?}
	       */
	      SanitizingHtmlSerializer.prototype.startElement = function (element) {
	          var _this = this;
	          var /** @type {?} */ tagName = DOM.nodeName(element).toLowerCase();
	          if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
	              this.sanitizedSomething = true;
	              return;
	          }
	          this.buf.push('<');
	          this.buf.push(tagName);
	          DOM.attributeMap(element).forEach(function (value, attrName) {
	              var /** @type {?} */ lower = attrName.toLowerCase();
	              if (!VALID_ATTRS.hasOwnProperty(lower)) {
	                  _this.sanitizedSomething = true;
	                  return;
	              }
	              // TODO(martinprobst): Special case image URIs for data:image/...
	              if (URI_ATTRS[lower])
	                  value = sanitizeUrl(value);
	              if (SRCSET_ATTRS[lower])
	                  value = sanitizeSrcset(value);
	              _this.buf.push(' ');
	              _this.buf.push(attrName);
	              _this.buf.push('="');
	              _this.buf.push(encodeEntities(value));
	              _this.buf.push('"');
	          });
	          this.buf.push('>');
	      };
	      /**
	       * @param {?} current
	       * @return {?}
	       */
	      SanitizingHtmlSerializer.prototype.endElement = function (current) {
	          var /** @type {?} */ tagName = DOM.nodeName(current).toLowerCase();
	          if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
	              this.buf.push('</');
	              this.buf.push(tagName);
	              this.buf.push('>');
	          }
	      };
	      /**
	       * @param {?} chars
	       * @return {?}
	       */
	      SanitizingHtmlSerializer.prototype.chars = function (chars /** TODO #9100 */) { this.buf.push(encodeEntities(chars)); };
	      return SanitizingHtmlSerializer;
	  }());
	  // Regular Expressions for parsing tags and attributes
	  var /** @type {?} */ SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
	  // ! to ~ is the ASCII range.
	  var /** @type {?} */ NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
	  /**
	   *  Escapes all potentially dangerous characters, so that the
	    * resulting string can be safely inserted into attribute or
	    * element text.
	   * @param {?} value
	   * @return {?}
	   */
	  function encodeEntities(value) {
	      return value.replace(/&/g, '&amp;')
	          .replace(SURROGATE_PAIR_REGEXP, function (match) {
	          var /** @type {?} */ hi = match.charCodeAt(0);
	          var /** @type {?} */ low = match.charCodeAt(1);
	          return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
	      })
	          .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })
	          .replace(/</g, '&lt;')
	          .replace(/>/g, '&gt;');
	  }
	  /**
	   *  When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
	    * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').
	    * *
	    * This is undesirable since we don't want to allow any of these custom attributes. This method
	    * strips them all.
	   * @param {?} el
	   * @return {?}
	   */
	  function stripCustomNsAttrs(el) {
	      DOM.attributeMap(el).forEach(function (_, attrName) {
	          if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
	              DOM.removeAttribute(el, attrName);
	          }
	      });
	      for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
	          var n = _a[_i];
	          if (DOM.isElementNode(n))
	              stripCustomNsAttrs(/** @type {?} */ (n));
	      }
	  }
	  /**
	   *  Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
	    * the DOM in a browser environment.
	   * @param {?} unsafeHtmlInput
	   * @return {?}
	   */
	  function sanitizeHtml(unsafeHtmlInput) {
	      try {
	          var /** @type {?} */ containerEl = getInertElement();
	          // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).
	          var /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
	          // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
	          // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.
	          var /** @type {?} */ mXSSAttempts = 5;
	          var /** @type {?} */ parsedHtml = unsafeHtml;
	          do {
	              if (mXSSAttempts === 0) {
	                  throw new Error('Failed to sanitize html because the input is unstable');
	              }
	              mXSSAttempts--;
	              unsafeHtml = parsedHtml;
	              DOM.setInnerHTML(containerEl, unsafeHtml);
	              if (((DOM.defaultDoc())).documentMode) {
	                  // strip custom-namespaced attributes on IE<=11
	                  stripCustomNsAttrs(containerEl);
	              }
	              parsedHtml = DOM.getInnerHTML(containerEl);
	          } while (unsafeHtml !== parsedHtml);
	          var /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();
	          var /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
	          // Clear out the body element.
	          var /** @type {?} */ parent_1 = DOM.getTemplateContent(containerEl) || containerEl;
	          for (var _i = 0, _a = DOM.childNodesAsList(parent_1); _i < _a.length; _i++) {
	              var child = _a[_i];
	              DOM.removeChild(parent_1, child);
	          }
	          if (core.isDevMode() && sanitizer.sanitizedSomething) {
	              DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
	          }
	          return safeHtml;
	      }
	      catch (e) {
	          // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
	          inertElement = null;
	          throw e;
	      }
	  }
	
	  /**
	   * Regular expression for safe style values.
	   *
	   * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.
	   *
	   * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or
	   * font-family) and hence could allow multiple values to get injected, but that should pose no risk
	   * of XSS.
	   *
	   * The function expression checks only for XSS safety, not for CSS validity.
	   *
	   * This regular expression was taken from the Closure sanitization library, and augmented for
	   * transformation values.
	   */
	  var /** @type {?} */ VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
	  var /** @type {?} */ TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
	  var /** @type {?} */ COLOR_FNS = '(?:rgb|hsl)a?';
	  var /** @type {?} */ FN_ARGS = '\\([-0-9.%, a-zA-Z]+\\)';
	  var /** @type {?} */ SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + ")" + FN_ARGS + ")$", 'g');
	  /**
	   * Matches a `url(...)` value with an arbitrary argument as long as it does
	   * not contain parentheses.
	   *
	   * The URL value still needs to be sanitized separately.
	   *
	   * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted
	   * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.
	   * by observing whether scroll bars are displayed, or character ranges used by a font face
	   * definition.
	   *
	   * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that
	   * binding a URL value without further cooperation from the page will cause an information leak, and
	   * if so, it is just a leak, not a full blown XSS vulnerability.
	   *
	   * Given the common use case, low likelihood of attack vector, and low impact of an attack, this
	   * code is permissive and allows URLs that sanitize otherwise.
	   */
	  var /** @type {?} */ URL_RE = /^url\(([^)]+)\)$/;
	  /**
	   *  Checks that quotes (" and ') are properly balanced inside a string. Assumes
	    * that neither escape (\) nor any other character that could result in
	    * breaking out of a string parsing context are allowed;
	    * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
	    * *
	    * This code was taken from the Closure sanitization library.
	   * @param {?} value
	   * @return {?}
	   */
	  function hasBalancedQuotes(value) {
	      var /** @type {?} */ outsideSingle = true;
	      var /** @type {?} */ outsideDouble = true;
	      for (var /** @type {?} */ i = 0; i < value.length; i++) {
	          var /** @type {?} */ c = value.charAt(i);
	          if (c === '\'' && outsideDouble) {
	              outsideSingle = !outsideSingle;
	          }
	          else if (c === '"' && outsideSingle) {
	              outsideDouble = !outsideDouble;
	          }
	      }
	      return outsideSingle && outsideDouble;
	  }
	  /**
	   *  Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single
	    * value) and returns a value that is safe to use in a browser environment.
	   * @param {?} value
	   * @return {?}
	   */
	  function sanitizeStyle(value) {
	      value = String(value).trim(); // Make sure it's actually a string.
	      if (!value)
	          return '';
	      // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for
	      // reasoning behind this.
	      var /** @type {?} */ urlMatch = value.match(URL_RE);
	      if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||
	          value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
	          return value; // Safe style values.
	      }
	      if (core.isDevMode()) {
	          getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
	      }
	      return 'unsafe';
	  }
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$8 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  /**
	   *  DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
	    * values to be safe to use in the different DOM contexts.
	    * *
	    * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
	    * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
	    * the website.
	    * *
	    * In specific situations, it might be necessary to disable sanitization, for example if the
	    * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
	    * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
	    * methods, and then binding to that value from the template.
	    * *
	    * These situations should be very rare, and extraordinary care must be taken to avoid creating a
	    * Cross Site Scripting (XSS) security bug!
	    * *
	    * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
	    * close as possible to the source of the value, to make it easy to verify no security bug is
	    * created by its use.
	    * *
	    * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
	    * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
	    * code. The sanitizer leaves safe values intact.
	    * *
	    * sanitization for the value passed in. Carefully check and audit all values and code paths going
	    * into this call. Make sure any user data is appropriately escaped for this security context.
	    * For more detail, see the [Security Guide](http://g.co/ng/security).
	    * *
	   * @abstract
	   */
	  var DomSanitizer = (function () {
	      function DomSanitizer() {
	      }
	      /**
	       *  Sanitizes a value for use in the given SecurityContext.
	        * *
	        * If value is trusted for the context, this method will unwrap the contained safe value and use
	        * it directly. Otherwise, value will be sanitized to be safe in the given context, for example
	        * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation
	        * is responsible to make sure that the value can definitely be safely used in the given context.
	       * @abstract
	       * @param {?} context
	       * @param {?} value
	       * @return {?}
	       */
	      DomSanitizer.prototype.sanitize = function (context, value) { };
	      /**
	       *  Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML
	        * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will
	        * leave safe HTML intact, so in most situations this method should not be used.
	        * *
	        * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	        * security risks!
	       * @abstract
	       * @param {?} value
	       * @return {?}
	       */
	      DomSanitizer.prototype.bypassSecurityTrustHtml = function (value) { };
	      /**
	       *  Bypass security and trust the given value to be safe style value (CSS).
	        * *
	        * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	        * security risks!
	       * @abstract
	       * @param {?} value
	       * @return {?}
	       */
	      DomSanitizer.prototype.bypassSecurityTrustStyle = function (value) { };
	      /**
	       *  Bypass security and trust the given value to be safe JavaScript.
	        * *
	        * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	        * security risks!
	       * @abstract
	       * @param {?} value
	       * @return {?}
	       */
	      DomSanitizer.prototype.bypassSecurityTrustScript = function (value) { };
	      /**
	       *  Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used
	        * in hyperlinks or `<img src>`.
	        * *
	        * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	        * security risks!
	       * @abstract
	       * @param {?} value
	       * @return {?}
	       */
	      DomSanitizer.prototype.bypassSecurityTrustUrl = function (value) { };
	      /**
	       *  Bypass security and trust the given value to be a safe resource URL, i.e. a location that may
	        * be used to load executable code from, like `<script src>`, or `<iframe src>`.
	        * *
	        * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	        * security risks!
	       * @abstract
	       * @param {?} value
	       * @return {?}
	       */
	      DomSanitizer.prototype.bypassSecurityTrustResourceUrl = function (value) { };
	      return DomSanitizer;
	  }());
	  var DomSanitizerImpl = (function (_super) {
	      __extends$8(DomSanitizerImpl, _super);
	      function DomSanitizerImpl() {
	          _super.apply(this, arguments);
	      }
	      /**
	       * @param {?} ctx
	       * @param {?} value
	       * @return {?}
	       */
	      DomSanitizerImpl.prototype.sanitize = function (ctx, value) {
	          if (value == null)
	              return null;
	          switch (ctx) {
	              case core.SecurityContext.NONE:
	                  return value;
	              case core.SecurityContext.HTML:
	                  if (value instanceof SafeHtmlImpl)
	                      return value.changingThisBreaksApplicationSecurity;
	                  this.checkNotSafeValue(value, 'HTML');
	                  return sanitizeHtml(String(value));
	              case core.SecurityContext.STYLE:
	                  if (value instanceof SafeStyleImpl)
	                      return value.changingThisBreaksApplicationSecurity;
	                  this.checkNotSafeValue(value, 'Style');
	                  return sanitizeStyle(value);
	              case core.SecurityContext.SCRIPT:
	                  if (value instanceof SafeScriptImpl)
	                      return value.changingThisBreaksApplicationSecurity;
	                  this.checkNotSafeValue(value, 'Script');
	                  throw new Error('unsafe value used in a script context');
	              case core.SecurityContext.URL:
	                  if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
	                      // Allow resource URLs in URL contexts, they are strictly more trusted.
	                      return value.changingThisBreaksApplicationSecurity;
	                  }
	                  this.checkNotSafeValue(value, 'URL');
	                  return sanitizeUrl(String(value));
	              case core.SecurityContext.RESOURCE_URL:
	                  if (value instanceof SafeResourceUrlImpl) {
	                      return value.changingThisBreaksApplicationSecurity;
	                  }
	                  this.checkNotSafeValue(value, 'ResourceURL');
	                  throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
	              default:
	                  throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
	          }
	      };
	      /**
	       * @param {?} value
	       * @param {?} expectedType
	       * @return {?}
	       */
	      DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {
	          if (value instanceof SafeValueImpl) {
	              throw new Error(("Required a safe " + expectedType + ", got a " + value.getTypeName() + " ") +
	                  "(see http://g.co/ng/security#xss)");
	          }
	      };
	      /**
	       * @param {?} value
	       * @return {?}
	       */
	      DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };
	      /**
	       * @param {?} value
	       * @return {?}
	       */
	      DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };
	      /**
	       * @param {?} value
	       * @return {?}
	       */
	      DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };
	      /**
	       * @param {?} value
	       * @return {?}
	       */
	      DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };
	      /**
	       * @param {?} value
	       * @return {?}
	       */
	      DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {
	          return new SafeResourceUrlImpl(value);
	      };
	      DomSanitizerImpl.decorators = [
	          { type: core.Injectable },
	      ];
	      /** @nocollapse */
	      DomSanitizerImpl.ctorParameters = function () { return []; };
	      return DomSanitizerImpl;
	  }(DomSanitizer));
	  /**
	   * @abstract
	   */
	  var SafeValueImpl = (function () {
	      /**
	       * @param {?} changingThisBreaksApplicationSecurity
	       */
	      function SafeValueImpl(changingThisBreaksApplicationSecurity) {
	          this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
	          // empty
	      }
	      /**
	       * @abstract
	       * @return {?}
	       */
	      SafeValueImpl.prototype.getTypeName = function () { };
	      /**
	       * @return {?}
	       */
	      SafeValueImpl.prototype.toString = function () {
	          return ("SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity) +
	              " (see http://g.co/ng/security#xss)";
	      };
	      return SafeValueImpl;
	  }());
	  var SafeHtmlImpl = (function (_super) {
	      __extends$8(SafeHtmlImpl, _super);
	      function SafeHtmlImpl() {
	          _super.apply(this, arguments);
	      }
	      /**
	       * @return {?}
	       */
	      SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };
	      return SafeHtmlImpl;
	  }(SafeValueImpl));
	  var SafeStyleImpl = (function (_super) {
	      __extends$8(SafeStyleImpl, _super);
	      function SafeStyleImpl() {
	          _super.apply(this, arguments);
	      }
	      /**
	       * @return {?}
	       */
	      SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };
	      return SafeStyleImpl;
	  }(SafeValueImpl));
	  var SafeScriptImpl = (function (_super) {
	      __extends$8(SafeScriptImpl, _super);
	      function SafeScriptImpl() {
	          _super.apply(this, arguments);
	      }
	      /**
	       * @return {?}
	       */
	      SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };
	      return SafeScriptImpl;
	  }(SafeValueImpl));
	  var SafeUrlImpl = (function (_super) {
	      __extends$8(SafeUrlImpl, _super);
	      function SafeUrlImpl() {
	          _super.apply(this, arguments);
	      }
	      /**
	       * @return {?}
	       */
	      SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };
	      return SafeUrlImpl;
	  }(SafeValueImpl));
	  var SafeResourceUrlImpl = (function (_super) {
	      __extends$8(SafeResourceUrlImpl, _super);
	      function SafeResourceUrlImpl() {
	          _super.apply(this, arguments);
	      }
	      /**
	       * @return {?}
	       */
	      SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };
	      return SafeResourceUrlImpl;
	  }(SafeValueImpl));
	
	  var /** @type {?} */ INTERNAL_BROWSER_PLATFORM_PROVIDERS = [
	      { provide: core.PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },
	      { provide: _angular_common.PlatformLocation, useClass: BrowserPlatformLocation }
	  ];
	  /**
	   * @security Replacing built-in sanitization providers exposes the application to XSS risks.
	   * Attacker-controlled data introduced by an unsanitized provider could expose your
	   * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
	   * @experimental
	   */
	  var /** @type {?} */ BROWSER_SANITIZATION_PROVIDERS = [
	      { provide: core.Sanitizer, useExisting: DomSanitizer },
	      { provide: DomSanitizer, useClass: DomSanitizerImpl },
	  ];
	  /**
	   * @stable
	   */
	  var /** @type {?} */ platformBrowser = core.createPlatformFactory(core.platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
	  /**
	   * @return {?}
	   */
	  function initDomAdapter() {
	      BrowserDomAdapter.makeCurrent();
	      BrowserGetTestability.init();
	  }
	  /**
	   * @return {?}
	   */
	  function errorHandler() {
	      return new core.ErrorHandler();
	  }
	  /**
	   * @return {?}
	   */
	  function _document() {
	      return getDOM().defaultDoc();
	  }
	  /**
	   * @return {?}
	   */
	  function _resolveDefaultAnimationDriver() {
	      if (getDOM().supportsWebAnimation()) {
	          return new WebAnimationsDriver();
	      }
	      return AnimationDriver.NOOP;
	  }
	  /**
	   *  The ng module for the browser.
	    * *
	   */
	  var BrowserModule = (function () {
	      /**
	       * @param {?} parentModule
	       */
	      function BrowserModule(parentModule) {
	          if (parentModule) {
	              throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
	          }
	      }
	      BrowserModule.decorators = [
	          { type: core.NgModule, args: [{
	                      providers: [
	                          BROWSER_SANITIZATION_PROVIDERS, { provide: core.ErrorHandler, useFactory: errorHandler, deps: [] },
	                          { provide: DOCUMENT, useFactory: _document, deps: [] },
	                          { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true },
	                          { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true },
	                          { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true },
	                          { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig },
	                          { provide: DomRootRenderer, useClass: DomRootRenderer_ },
	                          { provide: core.RootRenderer, useExisting: DomRootRenderer },
	                          { provide: SharedStylesHost, useExisting: DomSharedStylesHost },
	                          { provide: AnimationDriver, useFactory: _resolveDefaultAnimationDriver }, DomSharedStylesHost,
	                          core.Testability, EventManager, ELEMENT_PROBE_PROVIDERS, Title
	                      ],
	                      exports: [_angular_common.CommonModule, core.ApplicationModule]
	                  },] },
	      ];
	      /** @nocollapse */
	      BrowserModule.ctorParameters = function () { return [
	          { type: BrowserModule, decorators: [{ type: core.Optional }, { type: core.SkipSelf },] },
	      ]; };
	      return BrowserModule;
	  }());
	
	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  /**
	   * JS version of browser APIs. This library can only run in the browser.
	   */
	  var /** @type {?} */ win = typeof window !== 'undefined' && window || ({});
	
	  var ChangeDetectionPerfRecord = (function () {
	      /**
	       * @param {?} msPerTick
	       * @param {?} numTicks
	       */
	      function ChangeDetectionPerfRecord(msPerTick, numTicks) {
	          this.msPerTick = msPerTick;
	          this.numTicks = numTicks;
	      }
	      return ChangeDetectionPerfRecord;
	  }());
	  /**
	   *  Entry point for all Angular debug tools. This object corresponds to the `ng`
	    * global variable accessible in the dev console.
	   */
	  var AngularTools = (function () {
	      /**
	       * @param {?} ref
	       */
	      function AngularTools(ref) {
	          this.profiler = new AngularProfiler(ref);
	      }
	      return AngularTools;
	  }());
	  /**
	   *  Entry point for all Angular profiling-related debug tools. This object
	    * corresponds to the `ng.profiler` in the dev console.
	   */
	  var AngularProfiler = (function () {
	      /**
	       * @param {?} ref
	       */
	      function AngularProfiler(ref) {
	          this.appRef = ref.injector.get(core.ApplicationRef);
	      }
	      /**
	       *  Exercises change detection in a loop and then prints the average amount of
	        * time in milliseconds how long a single round of change detection takes for
	        * the current state of the UI. It runs a minimum of 5 rounds for a minimum
	        * of 500 milliseconds.
	        * *
	        * Optionally, a user may pass a `config` parameter containing a map of
	        * options. Supported options are:
	        * *
	        * `record` (boolean) - causes the profiler to record a CPU profile while
	        * it exercises the change detector. Example:
	        * *
	        * ```
	        * ng.profiler.timeChangeDetection({record: true})
	        * ```
	       * @param {?} config
	       * @return {?}
	       */
	      AngularProfiler.prototype.timeChangeDetection = function (config) {
	          var /** @type {?} */ record = config && config['record'];
	          var /** @type {?} */ profileName = 'Change Detection';
	          // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened
	          var /** @type {?} */ isProfilerAvailable = isPresent(win.console.profile);
	          if (record && isProfilerAvailable) {
	              win.console.profile(profileName);
	          }
	          var /** @type {?} */ start = getDOM().performanceNow();
	          var /** @type {?} */ numTicks = 0;
	          while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {
	              this.appRef.tick();
	              numTicks++;
	          }
	          var /** @type {?} */ end = getDOM().performanceNow();
	          if (record && isProfilerAvailable) {
	              // need to cast to <any> because type checker thinks there's no argument
	              // while in fact there is:
	              //
	              // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd
	              ((win.console.profileEnd))(profileName);
	          }
	          var /** @type {?} */ msPerTick = (end - start) / numTicks;
	          win.console.log("ran " + numTicks + " change detection cycles");
	          win.console.log(msPerTick.toFixed(2) + " ms per check");
	          return new ChangeDetectionPerfRecord(msPerTick, numTicks);
	      };
	      return AngularProfiler;
	  }());
	
	  var /** @type {?} */ context = (global$1);
	  /**
	   *  Enabled Angular 2 debug tools that are accessible via your browser's
	    * developer console.
	    * *
	    * Usage:
	    * *
	    * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
	    * 1. Type `ng.` (usually the console will show auto-complete suggestion)
	    * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
	    * then hit Enter.
	    * *
	   * @param {?} ref
	   * @return {?}
	   */
	  function enableDebugTools(ref) {
	      ((Object)).assign(context.ng, new AngularTools(ref));
	      return ref;
	  }
	  /**
	   *  Disables Angular 2 tools.
	    * *
	   * @return {?}
	   */
	  function disableDebugTools() {
	      if (context.ng) {
	          delete context.ng.profiler;
	      }
	  }
	
	  /**
	   *  Predicates for use with {@link DebugElement}'s query functions.
	    * *
	   */
	  var By = (function () {
	      function By() {
	      }
	      /**
	       *  Match all elements.
	        * *
	        * ## Example
	        * *
	        * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
	       * @return {?}
	       */
	      By.all = function () { return function (debugElement) { return true; }; };
	      /**
	       *  Match elements by the given CSS selector.
	        * *
	        * ## Example
	        * *
	        * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
	       * @param {?} selector
	       * @return {?}
	       */
	      By.css = function (selector) {
	          return function (debugElement) {
	              return isPresent(debugElement.nativeElement) ?
	                  getDOM().elementMatches(debugElement.nativeElement, selector) :
	                  false;
	          };
	      };
	      /**
	       *  Match elements that have the given directive present.
	        * *
	        * ## Example
	        * *
	        * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
	       * @param {?} type
	       * @return {?}
	       */
	      By.directive = function (type) {
	          return function (debugElement) { return debugElement.providerTokens.indexOf(type) !== -1; };
	      };
	      return By;
	  }());
	
	  var /** @type {?} */ __platform_browser_private__ = {
	      BrowserPlatformLocation: BrowserPlatformLocation,
	      DomAdapter: DomAdapter,
	      BrowserDomAdapter: BrowserDomAdapter,
	      BrowserGetTestability: BrowserGetTestability,
	      getDOM: getDOM,
	      setRootDomAdapter: setRootDomAdapter,
	      DomRootRenderer_: DomRootRenderer_,
	      DomRootRenderer: DomRootRenderer,
	      NAMESPACE_URIS: NAMESPACE_URIS,
	      shimContentAttribute: shimContentAttribute,
	      shimHostAttribute: shimHostAttribute,
	      flattenStyles: flattenStyles,
	      splitNamespace: splitNamespace,
	      isNamespaced: isNamespaced,
	      DomSharedStylesHost: DomSharedStylesHost,
	      SharedStylesHost: SharedStylesHost,
	      ELEMENT_PROBE_PROVIDERS: ELEMENT_PROBE_PROVIDERS,
	      DomEventsPlugin: DomEventsPlugin,
	      KeyEventsPlugin: KeyEventsPlugin,
	      HammerGesturesPlugin: HammerGesturesPlugin,
	      initDomAdapter: initDomAdapter,
	      INTERNAL_BROWSER_PLATFORM_PROVIDERS: INTERNAL_BROWSER_PLATFORM_PROVIDERS,
	      BROWSER_SANITIZATION_PROVIDERS: BROWSER_SANITIZATION_PROVIDERS,
	      WebAnimationsDriver: WebAnimationsDriver
	  };
	
	  /**
	   * @stable
	   */
	  var /** @type {?} */ VERSION = new core.Version('2.3.1');
	
	  exports.BrowserModule = BrowserModule;
	  exports.platformBrowser = platformBrowser;
	  exports.Title = Title;
	  exports.disableDebugTools = disableDebugTools;
	  exports.enableDebugTools = enableDebugTools;
	  exports.AnimationDriver = AnimationDriver;
	  exports.By = By;
	  exports.NgProbeToken = NgProbeToken;
	  exports.DOCUMENT = DOCUMENT;
	  exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS;
	  exports.EventManager = EventManager;
	  exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG;
	  exports.HammerGestureConfig = HammerGestureConfig;
	  exports.DomSanitizer = DomSanitizer;
	  exports.VERSION = VERSION;
	  exports.__platform_browser_private__ = __platform_browser_private__;
	
	}));

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v2.3.1
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(268)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}),global.ng.core));
	}(this, function (exports,_angular_core) { 'use strict';
	
	    /**
	     *  This class should not be used directly by an application developer. Instead, use
	      * {@link Location}.
	      * *
	      * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform
	      * agnostic.
	      * This means that we can have different implementation of `PlatformLocation` for the different
	      * platforms
	      * that angular supports. For example, the default `PlatformLocation` is {@link
	      * BrowserPlatformLocation},
	      * however when you run your app in a WebWorker you use {@link WebWorkerPlatformLocation}.
	      * *
	      * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}
	      * when
	      * they need to interact with the DOM apis like pushState, popState, etc...
	      * *
	      * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly
	      * by
	      * the {@link Router} in order to navigate between routes. Since all interactions between {@link
	      * Router} /
	      * {@link Location} / {@link LocationStrategy} and DOM apis flow through the `PlatformLocation`
	      * class
	      * they are all platform independent.
	      * *
	     * @abstract
	     */
	    var PlatformLocation = (function () {
	        function PlatformLocation() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        PlatformLocation.prototype.getBaseHrefFromDOM = function () { };
	        /**
	         * @abstract
	         * @param {?} fn
	         * @return {?}
	         */
	        PlatformLocation.prototype.onPopState = function (fn) { };
	        /**
	         * @abstract
	         * @param {?} fn
	         * @return {?}
	         */
	        PlatformLocation.prototype.onHashChange = function (fn) { };
	        Object.defineProperty(PlatformLocation.prototype, "pathname", {
	            /**
	             * @return {?}
	             */
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(PlatformLocation.prototype, "search", {
	            /**
	             * @return {?}
	             */
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(PlatformLocation.prototype, "hash", {
	            /**
	             * @return {?}
	             */
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @abstract
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @return {?}
	         */
	        PlatformLocation.prototype.replaceState = function (state, title, url) { };
	        /**
	         * @abstract
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @return {?}
	         */
	        PlatformLocation.prototype.pushState = function (state, title, url) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        PlatformLocation.prototype.forward = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        PlatformLocation.prototype.back = function () { };
	        return PlatformLocation;
	    }());
	
	    /**
	     *  `LocationStrategy` is responsible for representing and reading route state
	      * from the browser's URL. Angular provides two strategies:
	      * {@link HashLocationStrategy} and {@link PathLocationStrategy}.
	      * *
	      * This is used under the hood of the {@link Location} service.
	      * *
	      * Applications should use the {@link Router} or {@link Location} services to
	      * interact with application route state.
	      * *
	      * For instance, {@link HashLocationStrategy} produces URLs like
	      * `http://example.com#/foo`, and {@link PathLocationStrategy} produces
	      * `http://example.com/foo` as an equivalent URL.
	      * *
	      * See these two classes for more.
	      * *
	     * @abstract
	     */
	    var LocationStrategy = (function () {
	        function LocationStrategy() {
	        }
	        /**
	         * @abstract
	         * @param {?=} includeHash
	         * @return {?}
	         */
	        LocationStrategy.prototype.path = function (includeHash) { };
	        /**
	         * @abstract
	         * @param {?} internal
	         * @return {?}
	         */
	        LocationStrategy.prototype.prepareExternalUrl = function (internal) { };
	        /**
	         * @abstract
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @param {?} queryParams
	         * @return {?}
	         */
	        LocationStrategy.prototype.pushState = function (state, title, url, queryParams) { };
	        /**
	         * @abstract
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @param {?} queryParams
	         * @return {?}
	         */
	        LocationStrategy.prototype.replaceState = function (state, title, url, queryParams) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        LocationStrategy.prototype.forward = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        LocationStrategy.prototype.back = function () { };
	        /**
	         * @abstract
	         * @param {?} fn
	         * @return {?}
	         */
	        LocationStrategy.prototype.onPopState = function (fn) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        LocationStrategy.prototype.getBaseHref = function () { };
	        return LocationStrategy;
	    }());
	    /**
	     * The `APP_BASE_HREF` token represents the base href to be used with the
	     * {@link PathLocationStrategy}.
	     *
	     * If you're using {@link PathLocationStrategy}, you must provide a provider to a string
	     * representing the URL prefix that should be preserved when generating and recognizing
	     * URLs.
	     *
	     * ### Example
	     *
	     * ```typescript
	     * import {Component, NgModule} from '@angular/core';
	     * import {APP_BASE_HREF} from '@angular/common';
	     *
	     * @NgModule({
	     *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
	     * })
	     * class AppModule {}
	     * ```
	     *
	     * @stable
	     */
	    var /** @type {?} */ APP_BASE_HREF = new _angular_core.OpaqueToken('appBaseHref');
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var /** @type {?} */ globalScope;
	    if (typeof window === 'undefined') {
	        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	            globalScope = (self);
	        }
	        else {
	            globalScope = (global);
	        }
	    }
	    else {
	        globalScope = (window);
	    }
	    // Need to declare a new variable for global here since TypeScript
	    // exports the original value of the symbol.
	    var /** @type {?} */ _global = globalScope;
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    function getTypeNameForDebugging(type) {
	        return type['name'] || typeof type;
	    }
	    // TODO: remove calls to assert in production environment
	    // Note: Can't just export this and import in in other files
	    // as `assert` is a reserved keyword in Dart
	    _global.assert = function assert(condition) {
	        // TODO: to be fixed properly via #2830, noop for now
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPresent(obj) {
	        return obj != null;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isBlank(obj) {
	        return obj == null;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isDate(obj) {
	        return obj instanceof Date && !isNaN(obj.valueOf());
	    }
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    function stringify(token) {
	        if (typeof token === 'string') {
	            return token;
	        }
	        if (token == null) {
	            return '' + token;
	        }
	        if (token.overriddenName) {
	            return "" + token.overriddenName;
	        }
	        if (token.name) {
	            return "" + token.name;
	        }
	        var /** @type {?} */ res = token.toString();
	        var /** @type {?} */ newLineIndex = res.indexOf('\n');
	        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	    }
	    var NumberWrapper = (function () {
	        function NumberWrapper() {
	        }
	        /**
	         * @param {?} text
	         * @return {?}
	         */
	        NumberWrapper.parseIntAutoRadix = function (text) {
	            var /** @type {?} */ result = parseInt(text);
	            if (isNaN(result)) {
	                throw new Error('Invalid integer literal when parsing ' + text);
	            }
	            return result;
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };
	        return NumberWrapper;
	    }());
	    /**
	     * @param {?} o
	     * @return {?}
	     */
	    function isJsObject(o) {
	        return o !== null && (typeof o === 'function' || typeof o === 'object');
	    }
	    var /** @type {?} */ _symbolIterator = null;
	    /**
	     * @return {?}
	     */
	    function getSymbolIterator() {
	        if (!_symbolIterator) {
	            if (((globalScope)).Symbol && Symbol.iterator) {
	                _symbolIterator = Symbol.iterator;
	            }
	            else {
	                // es6-shim specific logic
	                var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);
	                for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
	                    var /** @type {?} */ key = keys[i];
	                    if (key !== 'entries' && key !== 'size' &&
	                        ((Map)).prototype[key] === Map.prototype['entries']) {
	                        _symbolIterator = key;
	                    }
	                }
	            }
	        }
	        return _symbolIterator;
	    }
	
	    /**
	     *  Depending on which {@link LocationStrategy} is used, `Location` will either persist
	      * to the URL's path or the URL's hash segment.
	      * *
	      * Note: it's better to use {@link Router#navigate} service to trigger route changes. Use
	      * `Location` only if you need to interact with or create normalized URLs outside of
	      * routing.
	      * *
	      * `Location` is responsible for normalizing the URL against the application's base href.
	      * A normalized URL is absolute from the URL host, includes the application's base href, and has no
	      * trailing slash:
	      * - `/my/app/user/123` is normalized
	      * - `my/app/user/123` **is not** normalized
	      * - `/my/app/user/123/` **is not** normalized
	      * *
	      * ### Example
	      * {@example common/location/ts/path_location_component.ts region='LocationComponent'}
	     */
	    var Location = (function () {
	        /**
	         * @param {?} platformStrategy
	         */
	        function Location(platformStrategy) {
	            var _this = this;
	            /** @internal */
	            this._subject = new _angular_core.EventEmitter();
	            this._platformStrategy = platformStrategy;
	            var browserBaseHref = this._platformStrategy.getBaseHref();
	            this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
	            this._platformStrategy.onPopState(function (ev) {
	                _this._subject.emit({
	                    'url': _this.path(true),
	                    'pop': true,
	                    'type': ev.type,
	                });
	            });
	        }
	        /**
	         * @param {?=} includeHash
	         * @return {?}
	         */
	        Location.prototype.path = function (includeHash) {
	            if (includeHash === void 0) { includeHash = false; }
	            return this.normalize(this._platformStrategy.path(includeHash));
	        };
	        /**
	         *  Normalizes the given path and compares to the current normalized path.
	         * @param {?} path
	         * @param {?=} query
	         * @return {?}
	         */
	        Location.prototype.isCurrentPathEqualTo = function (path, query) {
	            if (query === void 0) { query = ''; }
	            return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
	        };
	        /**
	         *  Given a string representing a URL, returns the normalized URL path without leading or
	          * trailing slashes.
	         * @param {?} url
	         * @return {?}
	         */
	        Location.prototype.normalize = function (url) {
	            return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
	        };
	        /**
	         *  Given a string representing a URL, returns the platform-specific external URL path.
	          * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
	          * before normalizing. This method will also add a hash if `HashLocationStrategy` is
	          * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
	         * @param {?} url
	         * @return {?}
	         */
	        Location.prototype.prepareExternalUrl = function (url) {
	            if (url && url[0] !== '/') {
	                url = '/' + url;
	            }
	            return this._platformStrategy.prepareExternalUrl(url);
	        };
	        /**
	         *  Changes the browsers URL to the normalized version of the given URL, and pushes a
	          * new item onto the platform's history.
	         * @param {?} path
	         * @param {?=} query
	         * @return {?}
	         */
	        Location.prototype.go = function (path, query) {
	            if (query === void 0) { query = ''; }
	            this._platformStrategy.pushState(null, '', path, query);
	        };
	        /**
	         *  Changes the browsers URL to the normalized version of the given URL, and replaces
	          * the top item on the platform's history stack.
	         * @param {?} path
	         * @param {?=} query
	         * @return {?}
	         */
	        Location.prototype.replaceState = function (path, query) {
	            if (query === void 0) { query = ''; }
	            this._platformStrategy.replaceState(null, '', path, query);
	        };
	        /**
	         *  Navigates forward in the platform's history.
	         * @return {?}
	         */
	        Location.prototype.forward = function () { this._platformStrategy.forward(); };
	        /**
	         *  Navigates back in the platform's history.
	         * @return {?}
	         */
	        Location.prototype.back = function () { this._platformStrategy.back(); };
	        /**
	         *  Subscribe to the platform's `popState` events.
	         * @param {?} onNext
	         * @param {?=} onThrow
	         * @param {?=} onReturn
	         * @return {?}
	         */
	        Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
	            if (onThrow === void 0) { onThrow = null; }
	            if (onReturn === void 0) { onReturn = null; }
	            return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
	        };
	        /**
	         *  Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as
	          * is.
	         * @param {?} params
	         * @return {?}
	         */
	        Location.normalizeQueryParams = function (params) {
	            return params && params[0] !== '?' ? '?' + params : params;
	        };
	        /**
	         *  Given 2 parts of a url, join them with a slash if needed.
	         * @param {?} start
	         * @param {?} end
	         * @return {?}
	         */
	        Location.joinWithSlash = function (start, end) {
	            if (start.length == 0) {
	                return end;
	            }
	            if (end.length == 0) {
	                return start;
	            }
	            var /** @type {?} */ slashes = 0;
	            if (start.endsWith('/')) {
	                slashes++;
	            }
	            if (end.startsWith('/')) {
	                slashes++;
	            }
	            if (slashes == 2) {
	                return start + end.substring(1);
	            }
	            if (slashes == 1) {
	                return start + end;
	            }
	            return start + '/' + end;
	        };
	        /**
	         *  If url has a trailing slash, remove it, otherwise return url as is.
	         * @param {?} url
	         * @return {?}
	         */
	        Location.stripTrailingSlash = function (url) { return url.replace(/\/$/, ''); };
	        Location.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        Location.ctorParameters = function () { return [
	            { type: LocationStrategy, },
	        ]; };
	        return Location;
	    }());
	    /**
	     * @param {?} baseHref
	     * @param {?} url
	     * @return {?}
	     */
	    function _stripBaseHref(baseHref, url) {
	        return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
	    }
	    /**
	     * @param {?} url
	     * @return {?}
	     */
	    function _stripIndexHtml(url) {
	        return url.replace(/\/index.html$/, '');
	    }
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     *  `HashLocationStrategy` is a {@link LocationStrategy} used to configure the
	      * {@link Location} service to represent its state in the
	      * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
	      * of the browser's URL.
	      * *
	      * For instance, if you call `location.go('/foo')`, the browser's URL will become
	      * `example.com#/foo`.
	      * *
	      * ### Example
	      * *
	      * {@example common/location/ts/hash_location_component.ts region='LocationComponent'}
	      * *
	     */
	    var HashLocationStrategy = (function (_super) {
	        __extends(HashLocationStrategy, _super);
	        /**
	         * @param {?} _platformLocation
	         * @param {?=} _baseHref
	         */
	        function HashLocationStrategy(_platformLocation, _baseHref) {
	            _super.call(this);
	            this._platformLocation = _platformLocation;
	            this._baseHref = '';
	            if (isPresent(_baseHref)) {
	                this._baseHref = _baseHref;
	            }
	        }
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.onPopState = function (fn) {
	            this._platformLocation.onPopState(fn);
	            this._platformLocation.onHashChange(fn);
	        };
	        /**
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
	        /**
	         * @param {?=} includeHash
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.path = function (includeHash) {
	            if (includeHash === void 0) { includeHash = false; }
	            // the hash value is always prefixed with a `#`
	            // and if it is empty then it will stay empty
	            var /** @type {?} */ path = this._platformLocation.hash;
	            if (!isPresent(path))
	                path = '#';
	            return path.length > 0 ? path.substring(1) : path;
	        };
	        /**
	         * @param {?} internal
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	            var /** @type {?} */ url = Location.joinWithSlash(this._baseHref, internal);
	            return url.length > 0 ? ('#' + url) : url;
	        };
	        /**
	         * @param {?} state
	         * @param {?} title
	         * @param {?} path
	         * @param {?} queryParams
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {
	            var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
	            if (url.length == 0) {
	                url = this._platformLocation.pathname;
	            }
	            this._platformLocation.pushState(state, title, url);
	        };
	        /**
	         * @param {?} state
	         * @param {?} title
	         * @param {?} path
	         * @param {?} queryParams
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {
	            var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
	            if (url.length == 0) {
	                url = this._platformLocation.pathname;
	            }
	            this._platformLocation.replaceState(state, title, url);
	        };
	        /**
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
	        /**
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
	        HashLocationStrategy.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        HashLocationStrategy.ctorParameters = function () { return [
	            { type: PlatformLocation, },
	            { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF,] },] },
	        ]; };
	        return HashLocationStrategy;
	    }(LocationStrategy));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     *  `PathLocationStrategy` is a {@link LocationStrategy} used to configure the
	      * {@link Location} service to represent its state in the
	      * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
	      * browser's URL.
	      * *
	      * If you're using `PathLocationStrategy`, you must provide a {@link APP_BASE_HREF}
	      * or add a base element to the document. This URL prefix that will be preserved
	      * when generating and recognizing URLs.
	      * *
	      * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
	      * `location.go('/foo')`, the browser's URL will become
	      * `example.com/my/app/foo`.
	      * *
	      * Similarly, if you add `<base href='/my/app'/>` to the document and call
	      * `location.go('/foo')`, the browser's URL will become
	      * `example.com/my/app/foo`.
	      * *
	      * ### Example
	      * *
	      * {@example common/location/ts/path_location_component.ts region='LocationComponent'}
	      * *
	     */
	    var PathLocationStrategy = (function (_super) {
	        __extends$1(PathLocationStrategy, _super);
	        /**
	         * @param {?} _platformLocation
	         * @param {?=} href
	         */
	        function PathLocationStrategy(_platformLocation, href) {
	            _super.call(this);
	            this._platformLocation = _platformLocation;
	            if (isBlank(href)) {
	                href = this._platformLocation.getBaseHrefFromDOM();
	            }
	            if (isBlank(href)) {
	                throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
	            }
	            this._baseHref = href;
	        }
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.onPopState = function (fn) {
	            this._platformLocation.onPopState(fn);
	            this._platformLocation.onHashChange(fn);
	        };
	        /**
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
	        /**
	         * @param {?} internal
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	            return Location.joinWithSlash(this._baseHref, internal);
	        };
	        /**
	         * @param {?=} includeHash
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.path = function (includeHash) {
	            if (includeHash === void 0) { includeHash = false; }
	            var /** @type {?} */ pathname = this._platformLocation.pathname +
	                Location.normalizeQueryParams(this._platformLocation.search);
	            var /** @type {?} */ hash = this._platformLocation.hash;
	            return hash && includeHash ? "" + pathname + hash : pathname;
	        };
	        /**
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @param {?} queryParams
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {
	            var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
	            this._platformLocation.pushState(state, title, externalUrl);
	        };
	        /**
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @param {?} queryParams
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {
	            var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
	            this._platformLocation.replaceState(state, title, externalUrl);
	        };
	        /**
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
	        /**
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
	        PathLocationStrategy.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        PathLocationStrategy.ctorParameters = function () { return [
	            { type: PlatformLocation, },
	            { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF,] },] },
	        ]; };
	        return PathLocationStrategy;
	    }(LocationStrategy));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @abstract
	     */
	    var NgLocalization = (function () {
	        function NgLocalization() {
	        }
	        /**
	         * @abstract
	         * @param {?} value
	         * @return {?}
	         */
	        NgLocalization.prototype.getPluralCategory = function (value) { };
	        return NgLocalization;
	    }());
	    /**
	     *  Returns the plural category for a given value.
	      * - "=value" when the case exists,
	      * - the plural category otherwise
	      * *
	     * @param {?} value
	     * @param {?} cases
	     * @param {?} ngLocalization
	     * @return {?}
	     */
	    function getPluralCategory(value, cases, ngLocalization) {
	        var /** @type {?} */ key = "=" + value;
	        if (cases.indexOf(key) > -1) {
	            return key;
	        }
	        key = ngLocalization.getPluralCategory(value);
	        if (cases.indexOf(key) > -1) {
	            return key;
	        }
	        if (cases.indexOf('other') > -1) {
	            return 'other';
	        }
	        throw new Error("No plural message found for value \"" + value + "\"");
	    }
	    /**
	     *  Returns the plural case based on the locale
	      * *
	     */
	    var NgLocaleLocalization = (function (_super) {
	        __extends$2(NgLocaleLocalization, _super);
	        /**
	         * @param {?} _locale
	         */
	        function NgLocaleLocalization(_locale) {
	            _super.call(this);
	            this._locale = _locale;
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        NgLocaleLocalization.prototype.getPluralCategory = function (value) {
	            var /** @type {?} */ plural = getPluralCase(this._locale, value);
	            switch (plural) {
	                case Plural.Zero:
	                    return 'zero';
	                case Plural.One:
	                    return 'one';
	                case Plural.Two:
	                    return 'two';
	                case Plural.Few:
	                    return 'few';
	                case Plural.Many:
	                    return 'many';
	                default:
	                    return 'other';
	            }
	        };
	        NgLocaleLocalization.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        NgLocaleLocalization.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ]; };
	        return NgLocaleLocalization;
	    }(NgLocalization));
	    var Plural = {};
	    Plural.Zero = 0;
	    Plural.One = 1;
	    Plural.Two = 2;
	    Plural.Few = 3;
	    Plural.Many = 4;
	    Plural.Other = 5;
	    Plural[Plural.Zero] = "Zero";
	    Plural[Plural.One] = "One";
	    Plural[Plural.Two] = "Two";
	    Plural[Plural.Few] = "Few";
	    Plural[Plural.Many] = "Many";
	    Plural[Plural.Other] = "Other";
	    /**
	     *  Returns the plural case based on the locale
	      * *
	     * @param {?} locale
	     * @param {?} nLike
	     * @return {?}
	     */
	    function getPluralCase(locale, nLike) {
	        // TODO(vicb): lazy compute
	        if (typeof nLike === 'string') {
	            nLike = parseInt(/** @type {?} */ (nLike), 10);
	        }
	        var /** @type {?} */ n = (nLike);
	        var /** @type {?} */ nDecimal = n.toString().replace(/^[^.]*\.?/, '');
	        var /** @type {?} */ i = Math.floor(Math.abs(n));
	        var /** @type {?} */ v = nDecimal.length;
	        var /** @type {?} */ f = parseInt(nDecimal, 10);
	        var /** @type {?} */ t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
	        var /** @type {?} */ lang = locale.split('-')[0].toLowerCase();
	        switch (lang) {
	            case 'af':
	            case 'asa':
	            case 'az':
	            case 'bem':
	            case 'bez':
	            case 'bg':
	            case 'brx':
	            case 'ce':
	            case 'cgg':
	            case 'chr':
	            case 'ckb':
	            case 'ee':
	            case 'el':
	            case 'eo':
	            case 'es':
	            case 'eu':
	            case 'fo':
	            case 'fur':
	            case 'gsw':
	            case 'ha':
	            case 'haw':
	            case 'hu':
	            case 'jgo':
	            case 'jmc':
	            case 'ka':
	            case 'kk':
	            case 'kkj':
	            case 'kl':
	            case 'ks':
	            case 'ksb':
	            case 'ky':
	            case 'lb':
	            case 'lg':
	            case 'mas':
	            case 'mgo':
	            case 'ml':
	            case 'mn':
	            case 'nb':
	            case 'nd':
	            case 'ne':
	            case 'nn':
	            case 'nnh':
	            case 'nyn':
	            case 'om':
	            case 'or':
	            case 'os':
	            case 'ps':
	            case 'rm':
	            case 'rof':
	            case 'rwk':
	            case 'saq':
	            case 'seh':
	            case 'sn':
	            case 'so':
	            case 'sq':
	            case 'ta':
	            case 'te':
	            case 'teo':
	            case 'tk':
	            case 'tr':
	            case 'ug':
	            case 'uz':
	            case 'vo':
	            case 'vun':
	            case 'wae':
	            case 'xog':
	                if (n === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'agq':
	            case 'bas':
	            case 'cu':
	            case 'dav':
	            case 'dje':
	            case 'dua':
	            case 'dyo':
	            case 'ebu':
	            case 'ewo':
	            case 'guz':
	            case 'kam':
	            case 'khq':
	            case 'ki':
	            case 'kln':
	            case 'kok':
	            case 'ksf':
	            case 'lrc':
	            case 'lu':
	            case 'luo':
	            case 'luy':
	            case 'mer':
	            case 'mfe':
	            case 'mgh':
	            case 'mua':
	            case 'mzn':
	            case 'nmg':
	            case 'nus':
	            case 'qu':
	            case 'rn':
	            case 'rw':
	            case 'sbp':
	            case 'twq':
	            case 'vai':
	            case 'yav':
	            case 'yue':
	            case 'zgh':
	            case 'ak':
	            case 'ln':
	            case 'mg':
	            case 'pa':
	            case 'ti':
	                if (n === Math.floor(n) && n >= 0 && n <= 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'am':
	            case 'as':
	            case 'bn':
	            case 'fa':
	            case 'gu':
	            case 'hi':
	            case 'kn':
	            case 'mr':
	            case 'zu':
	                if (i === 0 || n === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'ar':
	                if (n === 0)
	                    return Plural.Zero;
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)
	                    return Plural.Few;
	                if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'ast':
	            case 'ca':
	            case 'de':
	            case 'en':
	            case 'et':
	            case 'fi':
	            case 'fy':
	            case 'gl':
	            case 'it':
	            case 'nl':
	            case 'sv':
	            case 'sw':
	            case 'ur':
	            case 'yi':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                return Plural.Other;
	            case 'be':
	                if (n % 10 === 1 && !(n % 100 === 11))
	                    return Plural.One;
	                if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&
	                    !(n % 100 >= 12 && n % 100 <= 14))
	                    return Plural.Few;
	                if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||
	                    n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'br':
	                if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))
	                    return Plural.One;
	                if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))
	                    return Plural.Two;
	                if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&
	                    !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||
	                        n % 100 >= 90 && n % 100 <= 99))
	                    return Plural.Few;
	                if (!(n === 0) && n % 1e6 === 0)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'bs':
	            case 'hr':
	            case 'sr':
	                if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))
	                    return Plural.One;
	                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                    !(i % 100 >= 12 && i % 100 <= 14) ||
	                    f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&
	                        !(f % 100 >= 12 && f % 100 <= 14))
	                    return Plural.Few;
	                return Plural.Other;
	            case 'cs':
	            case 'sk':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)
	                    return Plural.Few;
	                if (!(v === 0))
	                    return Plural.Many;
	                return Plural.Other;
	            case 'cy':
	                if (n === 0)
	                    return Plural.Zero;
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                if (n === 3)
	                    return Plural.Few;
	                if (n === 6)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'da':
	                if (n === 1 || !(t === 0) && (i === 0 || i === 1))
	                    return Plural.One;
	                return Plural.Other;
	            case 'dsb':
	            case 'hsb':
	                if (v === 0 && i % 100 === 1 || f % 100 === 1)
	                    return Plural.One;
	                if (v === 0 && i % 100 === 2 || f % 100 === 2)
	                    return Plural.Two;
	                if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||
	                    f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)
	                    return Plural.Few;
	                return Plural.Other;
	            case 'ff':
	            case 'fr':
	            case 'hy':
	            case 'kab':
	                if (i === 0 || i === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'fil':
	                if (v === 0 && (i === 1 || i === 2 || i === 3) ||
	                    v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||
	                    !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))
	                    return Plural.One;
	                return Plural.Other;
	            case 'ga':
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                if (n === Math.floor(n) && n >= 3 && n <= 6)
	                    return Plural.Few;
	                if (n === Math.floor(n) && n >= 7 && n <= 10)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'gd':
	                if (n === 1 || n === 11)
	                    return Plural.One;
	                if (n === 2 || n === 12)
	                    return Plural.Two;
	                if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))
	                    return Plural.Few;
	                return Plural.Other;
	            case 'gv':
	                if (v === 0 && i % 10 === 1)
	                    return Plural.One;
	                if (v === 0 && i % 10 === 2)
	                    return Plural.Two;
	                if (v === 0 &&
	                    (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))
	                    return Plural.Few;
	                if (!(v === 0))
	                    return Plural.Many;
	                return Plural.Other;
	            case 'he':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (i === 2 && v === 0)
	                    return Plural.Two;
	                if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'is':
	                if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))
	                    return Plural.One;
	                return Plural.Other;
	            case 'ksh':
	                if (n === 0)
	                    return Plural.Zero;
	                if (n === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'kw':
	            case 'naq':
	            case 'se':
	            case 'smn':
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                return Plural.Other;
	            case 'lag':
	                if (n === 0)
	                    return Plural.Zero;
	                if ((i === 0 || i === 1) && !(n === 0))
	                    return Plural.One;
	                return Plural.Other;
	            case 'lt':
	                if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))
	                    return Plural.One;
	                if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&
	                    !(n % 100 >= 11 && n % 100 <= 19))
	                    return Plural.Few;
	                if (!(f === 0))
	                    return Plural.Many;
	                return Plural.Other;
	            case 'lv':
	            case 'prg':
	                if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||
	                    v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)
	                    return Plural.Zero;
	                if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||
	                    !(v === 2) && f % 10 === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'mk':
	                if (v === 0 && i % 10 === 1 || f % 10 === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'mt':
	                if (n === 1)
	                    return Plural.One;
	                if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)
	                    return Plural.Few;
	                if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'pl':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                    !(i % 100 >= 12 && i % 100 <= 14))
	                    return Plural.Few;
	                if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||
	                    v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
	                    v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'pt':
	                if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))
	                    return Plural.One;
	                return Plural.Other;
	            case 'ro':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (!(v === 0) || n === 0 ||
	                    !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)
	                    return Plural.Few;
	                return Plural.Other;
	            case 'ru':
	            case 'uk':
	                if (v === 0 && i % 10 === 1 && !(i % 100 === 11))
	                    return Plural.One;
	                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                    !(i % 100 >= 12 && i % 100 <= 14))
	                    return Plural.Few;
	                if (v === 0 && i % 10 === 0 ||
	                    v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
	                    v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'shi':
	                if (i === 0 || n === 1)
	                    return Plural.One;
	                if (n === Math.floor(n) && n >= 2 && n <= 10)
	                    return Plural.Few;
	                return Plural.Other;
	            case 'si':
	                if (n === 0 || n === 1 || i === 0 && f === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'sl':
	                if (v === 0 && i % 100 === 1)
	                    return Plural.One;
	                if (v === 0 && i % 100 === 2)
	                    return Plural.Two;
	                if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))
	                    return Plural.Few;
	                return Plural.Other;
	            case 'tzm':
	                if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)
	                    return Plural.One;
	                return Plural.Other;
	            default:
	                return Plural.Other;
	        }
	    }
	
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isListLikeIterable(obj) {
	        if (!isJsObject(obj))
	            return false;
	        return Array.isArray(obj) ||
	            (!(obj instanceof Map) &&
	                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
	    }
	
	    /**
	     *  *
	      * *
	      * ```
	      * <some-element [ngClass]="'first second'">...</some-element>
	      * *
	      * <some-element [ngClass]="['first', 'second']">...</some-element>
	      * *
	      * <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
	      * *
	      * <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
	      * ```
	      * *
	      * *
	      * The CSS classes are updated as follows, depending on the type of the expression evaluation:
	      * - `string` - the CSS classes listed in the string (space delimited) are added,
	      * - `Array` - the CSS classes declared as Array elements are added,
	      * - `Object` - keys are CSS classes that get added when the expression given in the value
	      * evaluates to a truthy value, otherwise they are removed.
	      * *
	     */
	    var NgClass = (function () {
	        /**
	         * @param {?} _iterableDiffers
	         * @param {?} _keyValueDiffers
	         * @param {?} _ngEl
	         * @param {?} _renderer
	         */
	        function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
	            this._iterableDiffers = _iterableDiffers;
	            this._keyValueDiffers = _keyValueDiffers;
	            this._ngEl = _ngEl;
	            this._renderer = _renderer;
	            this._initialClasses = [];
	        }
	        Object.defineProperty(NgClass.prototype, "klass", {
	            /**
	             * @param {?} v
	             * @return {?}
	             */
	            set: function (v) {
	                this._applyInitialClasses(true);
	                this._initialClasses = typeof v === 'string' ? v.split(/\s+/) : [];
	                this._applyInitialClasses(false);
	                this._applyClasses(this._rawClass, false);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgClass.prototype, "ngClass", {
	            /**
	             * @param {?} v
	             * @return {?}
	             */
	            set: function (v) {
	                this._cleanupClasses(this._rawClass);
	                this._iterableDiffer = null;
	                this._keyValueDiffer = null;
	                this._rawClass = typeof v === 'string' ? v.split(/\s+/) : v;
	                if (this._rawClass) {
	                    if (isListLikeIterable(this._rawClass)) {
	                        this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create(null);
	                    }
	                    else {
	                        this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create(null);
	                    }
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        NgClass.prototype.ngDoCheck = function () {
	            if (this._iterableDiffer) {
	                var /** @type {?} */ changes = this._iterableDiffer.diff(this._rawClass);
	                if (changes) {
	                    this._applyIterableChanges(changes);
	                }
	            }
	            else if (this._keyValueDiffer) {
	                var /** @type {?} */ changes = this._keyValueDiffer.diff(this._rawClass);
	                if (changes) {
	                    this._applyKeyValueChanges(changes);
	                }
	            }
	        };
	        /**
	         * @param {?} rawClassVal
	         * @return {?}
	         */
	        NgClass.prototype._cleanupClasses = function (rawClassVal) {
	            this._applyClasses(rawClassVal, true);
	            this._applyInitialClasses(false);
	        };
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgClass.prototype._applyKeyValueChanges = function (changes) {
	            var _this = this;
	            changes.forEachAddedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
	            changes.forEachChangedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
	            changes.forEachRemovedItem(function (record) {
	                if (record.previousValue) {
	                    _this._toggleClass(record.key, false);
	                }
	            });
	        };
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgClass.prototype._applyIterableChanges = function (changes) {
	            var _this = this;
	            changes.forEachAddedItem(function (record) {
	                if (typeof record.item === 'string') {
	                    _this._toggleClass(record.item, true);
	                }
	                else {
	                    throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + stringify(record.item));
	                }
	            });
	            changes.forEachRemovedItem(function (record) { return _this._toggleClass(record.item, false); });
	        };
	        /**
	         * @param {?} isCleanup
	         * @return {?}
	         */
	        NgClass.prototype._applyInitialClasses = function (isCleanup) {
	            var _this = this;
	            this._initialClasses.forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
	        };
	        /**
	         * @param {?} rawClassVal
	         * @param {?} isCleanup
	         * @return {?}
	         */
	        NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
	            var _this = this;
	            if (rawClassVal) {
	                if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
	                    ((rawClassVal)).forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
	                }
	                else {
	                    Object.keys(rawClassVal).forEach(function (klass) {
	                        if (isPresent(rawClassVal[klass]))
	                            _this._toggleClass(klass, !isCleanup);
	                    });
	                }
	            }
	        };
	        /**
	         * @param {?} klass
	         * @param {?} enabled
	         * @return {?}
	         */
	        NgClass.prototype._toggleClass = function (klass, enabled) {
	            var _this = this;
	            klass = klass.trim();
	            if (klass) {
	                klass.split(/\s+/g).forEach(function (klass) { _this._renderer.setElementClass(_this._ngEl.nativeElement, klass, enabled); });
	            }
	        };
	        NgClass.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngClass]' },] },
	        ];
	        /** @nocollapse */
	        NgClass.ctorParameters = function () { return [
	            { type: _angular_core.IterableDiffers, },
	            { type: _angular_core.KeyValueDiffers, },
	            { type: _angular_core.ElementRef, },
	            { type: _angular_core.Renderer, },
	        ]; };
	        NgClass.propDecorators = {
	            'klass': [{ type: _angular_core.Input, args: ['class',] },],
	            'ngClass': [{ type: _angular_core.Input },],
	        };
	        return NgClass;
	    }());
	
	    var NgForRow = (function () {
	        /**
	         * @param {?} $implicit
	         * @param {?} index
	         * @param {?} count
	         */
	        function NgForRow($implicit, index, count) {
	            this.$implicit = $implicit;
	            this.index = index;
	            this.count = count;
	        }
	        Object.defineProperty(NgForRow.prototype, "first", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.index === 0; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForRow.prototype, "last", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.index === this.count - 1; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForRow.prototype, "even", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.index % 2 === 0; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForRow.prototype, "odd", {
	            /**
	             * @return {?}
	             */
	            get: function () { return !this.even; },
	            enumerable: true,
	            configurable: true
	        });
	        return NgForRow;
	    }());
	    /**
	     *  The `NgFor` directive instantiates a template once per item from an iterable. The context for
	      * each instantiated template inherits from the outer context with the given loop variable set
	      * to the current item from the iterable.
	      * *
	      * ### Local Variables
	      * *
	      * `NgFor` provides several exported values that can be aliased to local variables:
	      * *
	      * * `index` will be set to the current loop iteration for each template context.
	      * * `first` will be set to a boolean value indicating whether the item is the first one in the
	      * iteration.
	      * * `last` will be set to a boolean value indicating whether the item is the last one in the
	      * iteration.
	      * * `even` will be set to a boolean value indicating whether this item has an even index.
	      * * `odd` will be set to a boolean value indicating whether this item has an odd index.
	      * *
	      * ### Change Propagation
	      * *
	      * When the contents of the iterator changes, `NgFor` makes the corresponding changes to the DOM:
	      * *
	      * * When an item is added, a new instance of the template is added to the DOM.
	      * * When an item is removed, its template instance is removed from the DOM.
	      * * When items are reordered, their respective templates are reordered in the DOM.
	      * * Otherwise, the DOM element for that item will remain the same.
	      * *
	      * Angular uses object identity to track insertions and deletions within the iterator and reproduce
	      * those changes in the DOM. This has important implications for animations and any stateful
	      * controls
	      * (such as `<input>` elements which accept user input) that are present. Inserted rows can be
	      * animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state such
	      * as user input.
	      * *
	      * It is possible for the identities of elements in the iterator to change while the data does not.
	      * This can happen, for example, if the iterator produced from an RPC to the server, and that
	      * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with
	      * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old
	      * elements were deleted and all new elements inserted). This is an expensive operation and should
	      * be avoided if possible.
	      * *
	      * To customize the default tracking algorithm, `NgFor` supports `trackBy` option.
	      * `trackBy` takes a function which has two arguments: `index` and `item`.
	      * If `trackBy` is given, Angular tracks changes by the return value of the function.
	      * *
	      * ### Syntax
	      * *
	      * - `<li *ngFor="let item of items; let i = index; trackBy: trackByFn">...</li>`
	      * - `<li template="ngFor let item of items; let i = index; trackBy: trackByFn">...</li>`
	      * *
	      * With `<template>` element:
	      * *
	      * ```
	      * <template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
	      * <li>...</li>
	      * </template>
	      * ```
	      * *
	      * ### Example
	      * *
	      * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed
	      * example.
	      * *
	     */
	    var NgFor = (function () {
	        /**
	         * @param {?} _viewContainer
	         * @param {?} _template
	         * @param {?} _differs
	         * @param {?} _cdr
	         */
	        function NgFor(_viewContainer, _template, _differs, _cdr) {
	            this._viewContainer = _viewContainer;
	            this._template = _template;
	            this._differs = _differs;
	            this._cdr = _cdr;
	            this._differ = null;
	        }
	        Object.defineProperty(NgFor.prototype, "ngForTemplate", {
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) {
	                if (value) {
	                    this._template = value;
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgFor.prototype.ngOnChanges = function (changes) {
	            if ('ngForOf' in changes) {
	                // React on ngForOf changes only once all inputs have been initialized
	                var /** @type {?} */ value = changes['ngForOf'].currentValue;
	                if (!this._differ && value) {
	                    try {
	                        this._differ = this._differs.find(value).create(this._cdr, this.ngForTrackBy);
	                    }
	                    catch (e) {
	                        throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
	                    }
	                }
	            }
	        };
	        /**
	         * @return {?}
	         */
	        NgFor.prototype.ngDoCheck = function () {
	            if (this._differ) {
	                var /** @type {?} */ changes = this._differ.diff(this.ngForOf);
	                if (changes)
	                    this._applyChanges(changes);
	            }
	        };
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgFor.prototype._applyChanges = function (changes) {
	            var _this = this;
	            var /** @type {?} */ insertTuples = [];
	            changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
	                if (item.previousIndex == null) {
	                    var /** @type {?} */ view = _this._viewContainer.createEmbeddedView(_this._template, new NgForRow(null, null, null), currentIndex);
	                    var /** @type {?} */ tuple = new RecordViewTuple(item, view);
	                    insertTuples.push(tuple);
	                }
	                else if (currentIndex == null) {
	                    _this._viewContainer.remove(adjustedPreviousIndex);
	                }
	                else {
	                    var /** @type {?} */ view = _this._viewContainer.get(adjustedPreviousIndex);
	                    _this._viewContainer.move(view, currentIndex);
	                    var /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */ (view));
	                    insertTuples.push(tuple);
	                }
	            });
	            for (var /** @type {?} */ i = 0; i < insertTuples.length; i++) {
	                this._perViewChange(insertTuples[i].view, insertTuples[i].record);
	            }
	            for (var /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {
	                var /** @type {?} */ viewRef = (this._viewContainer.get(i));
	                viewRef.context.index = i;
	                viewRef.context.count = ilen;
	            }
	            changes.forEachIdentityChange(function (record) {
	                var /** @type {?} */ viewRef = (_this._viewContainer.get(record.currentIndex));
	                viewRef.context.$implicit = record.item;
	            });
	        };
	        /**
	         * @param {?} view
	         * @param {?} record
	         * @return {?}
	         */
	        NgFor.prototype._perViewChange = function (view, record) {
	            view.context.$implicit = record.item;
	        };
	        NgFor.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngFor][ngForOf]' },] },
	        ];
	        /** @nocollapse */
	        NgFor.ctorParameters = function () { return [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	            { type: _angular_core.IterableDiffers, },
	            { type: _angular_core.ChangeDetectorRef, },
	        ]; };
	        NgFor.propDecorators = {
	            'ngForOf': [{ type: _angular_core.Input },],
	            'ngForTrackBy': [{ type: _angular_core.Input },],
	            'ngForTemplate': [{ type: _angular_core.Input },],
	        };
	        return NgFor;
	    }());
	    var RecordViewTuple = (function () {
	        /**
	         * @param {?} record
	         * @param {?} view
	         */
	        function RecordViewTuple(record, view) {
	            this.record = record;
	            this.view = view;
	        }
	        return RecordViewTuple;
	    }());
	
	    /**
	     *  Removes or recreates a portion of the DOM tree based on an {expression}.
	      * *
	      * If the expression assigned to `ngIf` evaluates to a falsy value then the element
	      * is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/fe0kgemFBtmQOY31b4tw?p=preview)):
	      * *
	      * ```
	      * <div *ngIf="errorCount > 0" class="error">
	      * <!-- Error message displayed when the errorCount property in the current context is greater
	      * than 0. -->
	      * {{errorCount}} errors detected
	      * </div>
	      * ```
	      * *
	      * ### Syntax
	      * *
	      * - `<div *ngIf="condition">...</div>`
	      * - `<div template="ngIf condition">...</div>`
	      * - `<template [ngIf]="condition"><div>...</div></template>`
	      * *
	     */
	    var NgIf = (function () {
	        /**
	         * @param {?} _viewContainer
	         * @param {?} _template
	         */
	        function NgIf(_viewContainer, _template) {
	            this._viewContainer = _viewContainer;
	            this._template = _template;
	            this._hasView = false;
	        }
	        Object.defineProperty(NgIf.prototype, "ngIf", {
	            /**
	             * @param {?} condition
	             * @return {?}
	             */
	            set: function (condition) {
	                if (condition && !this._hasView) {
	                    this._hasView = true;
	                    this._viewContainer.createEmbeddedView(this._template);
	                }
	                else if (!condition && this._hasView) {
	                    this._hasView = false;
	                    this._viewContainer.clear();
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        NgIf.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngIf]' },] },
	        ];
	        /** @nocollapse */
	        NgIf.ctorParameters = function () { return [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	        ]; };
	        NgIf.propDecorators = {
	            'ngIf': [{ type: _angular_core.Input },],
	        };
	        return NgIf;
	    }());
	
	    var SwitchView = (function () {
	        /**
	         * @param {?} _viewContainerRef
	         * @param {?} _templateRef
	         */
	        function SwitchView(_viewContainerRef, _templateRef) {
	            this._viewContainerRef = _viewContainerRef;
	            this._templateRef = _templateRef;
	            this._created = false;
	        }
	        /**
	         * @return {?}
	         */
	        SwitchView.prototype.create = function () {
	            this._created = true;
	            this._viewContainerRef.createEmbeddedView(this._templateRef);
	        };
	        /**
	         * @return {?}
	         */
	        SwitchView.prototype.destroy = function () {
	            this._created = false;
	            this._viewContainerRef.clear();
	        };
	        /**
	         * @param {?} created
	         * @return {?}
	         */
	        SwitchView.prototype.enforceState = function (created) {
	            if (created && !this._created) {
	                this.create();
	            }
	            else if (!created && this._created) {
	                this.destroy();
	            }
	        };
	        return SwitchView;
	    }());
	    /**
	     *  *
	      * expression.
	      * *
	      * ```
	      * <container-element [ngSwitch]="switch_expression">
	      * <some-element *ngSwitchCase="match_expression_1">...</some-element>
	      * <some-element *ngSwitchCase="match_expression_2">...</some-element>
	      * <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
	      * <ng-container *ngSwitchCase="match_expression_3">
	      * <!-- use a ng-container to group multiple root nodes -->
	      * <inner-element></inner-element>
	      * <inner-other-element></inner-other-element>
	      * </ng-container>
	      * <some-element *ngSwitchDefault>...</some-element>
	      * </container-element>
	      * ```
	      * *
	      * `NgSwitch` stamps out nested views when their match expression value matches the value of the
	      * switch expression.
	      * *
	      * In other words:
	      * - you define a container element (where you place the directive with a switch expression on the
	      * `[ngSwitch]="..."` attribute)
	      * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view
	      * root elements.
	      * *
	      * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will
	      * be preserved at the location.
	      * *
	      * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the
	      * expression is evaluated.
	      * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is
	      * stamped out.
	      * *
	     */
	    var NgSwitch = (function () {
	        function NgSwitch() {
	            this._defaultUsed = false;
	            this._caseCount = 0;
	            this._lastCaseCheckIndex = 0;
	            this._lastCasesMatched = false;
	        }
	        Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
	            /**
	             * @param {?} newValue
	             * @return {?}
	             */
	            set: function (newValue) {
	                this._ngSwitch = newValue;
	                if (this._caseCount === 0) {
	                    this._updateDefaultCases(true);
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        NgSwitch.prototype._addCase = function () { return this._caseCount++; };
	        /**
	         * @param {?} view
	         * @return {?}
	         */
	        NgSwitch.prototype._addDefault = function (view) {
	            if (!this._defaultViews) {
	                this._defaultViews = [];
	            }
	            this._defaultViews.push(view);
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        NgSwitch.prototype._matchCase = function (value) {
	            var /** @type {?} */ matched = value == this._ngSwitch;
	            this._lastCasesMatched = this._lastCasesMatched || matched;
	            this._lastCaseCheckIndex++;
	            if (this._lastCaseCheckIndex === this._caseCount) {
	                this._updateDefaultCases(!this._lastCasesMatched);
	                this._lastCaseCheckIndex = 0;
	                this._lastCasesMatched = false;
	            }
	            return matched;
	        };
	        /**
	         * @param {?} useDefault
	         * @return {?}
	         */
	        NgSwitch.prototype._updateDefaultCases = function (useDefault) {
	            if (this._defaultViews && useDefault !== this._defaultUsed) {
	                this._defaultUsed = useDefault;
	                for (var /** @type {?} */ i = 0; i < this._defaultViews.length; i++) {
	                    var /** @type {?} */ defaultView = this._defaultViews[i];
	                    defaultView.enforceState(useDefault);
	                }
	            }
	        };
	        NgSwitch.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngSwitch]' },] },
	        ];
	        /** @nocollapse */
	        NgSwitch.ctorParameters = function () { return []; };
	        NgSwitch.propDecorators = {
	            'ngSwitch': [{ type: _angular_core.Input },],
	        };
	        return NgSwitch;
	    }());
	    /**
	     *  *
	      * given expression evaluate to respectively the same/different value as the switch
	      * expression.
	      * *
	      * ```
	      * <container-element [ngSwitch]="switch_expression">
	      * <some-element *ngSwitchCase="match_expression_1">...</some-element>
	      * </container-element>
	      * *```
	      * *
	      * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch
	      * expression.
	      * *
	      * If multiple match expressions match the switch expression value, all of them are displayed.
	      * *
	      * See {@link NgSwitch} for more details and example.
	      * *
	     */
	    var NgSwitchCase = (function () {
	        /**
	         * @param {?} viewContainer
	         * @param {?} templateRef
	         * @param {?} ngSwitch
	         */
	        function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
	            this.ngSwitch = ngSwitch;
	            ngSwitch._addCase();
	            this._view = new SwitchView(viewContainer, templateRef);
	        }
	        /**
	         * @return {?}
	         */
	        NgSwitchCase.prototype.ngDoCheck = function () { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); };
	        NgSwitchCase.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngSwitchCase]' },] },
	        ];
	        /** @nocollapse */
	        NgSwitchCase.ctorParameters = function () { return [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	            { type: NgSwitch, decorators: [{ type: _angular_core.Host },] },
	        ]; };
	        NgSwitchCase.propDecorators = {
	            'ngSwitchCase': [{ type: _angular_core.Input },],
	        };
	        return NgSwitchCase;
	    }());
	    /**
	     *  match the
	      * switch expression.
	      * *
	      * ```
	      * <container-element [ngSwitch]="switch_expression">
	      * <some-element *ngSwitchCase="match_expression_1">...</some-element>
	      * <some-other-element *ngSwitchDefault>...</some-other-element>
	      * </container-element>
	      * ```
	      * *
	      * *
	      * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch
	      * expression.
	      * *
	      * See {@link NgSwitch} for more details and example.
	      * *
	     */
	    var NgSwitchDefault = (function () {
	        /**
	         * @param {?} viewContainer
	         * @param {?} templateRef
	         * @param {?} ngSwitch
	         */
	        function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
	            ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
	        }
	        NgSwitchDefault.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngSwitchDefault]' },] },
	        ];
	        /** @nocollapse */
	        NgSwitchDefault.ctorParameters = function () { return [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	            { type: NgSwitch, decorators: [{ type: _angular_core.Host },] },
	        ]; };
	        return NgSwitchDefault;
	    }());
	
	    /**
	     *  *
	      * *
	      * ```
	      * <some-element [ngPlural]="value">
	      * <ng-container *ngPluralCase="'=0'">there is nothing</ng-container>
	      * <ng-container *ngPluralCase="'=1'">there is one</ng-container>
	      * <ng-container *ngPluralCase="'few'">there are a few</ng-container>
	      * <ng-container *ngPluralCase="'other'">there are exactly #</ng-container>
	      * </some-element>
	      * ```
	      * *
	      * *
	      * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
	      * that match the switch expression's pluralization category.
	      * *
	      * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
	      * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
	      * expression:
	      * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
	      * matches the switch expression exactly,
	      * - otherwise, the view will be treated as a "category match", and will only display if exact
	      * value matches aren't found and the value maps to its category for the defined locale.
	      * *
	      * See http://cldr.unicode.org/index/cldr-spec/plural-rules
	      * *
	     */
	    var NgPlural = (function () {
	        /**
	         * @param {?} _localization
	         */
	        function NgPlural(_localization) {
	            this._localization = _localization;
	            this._caseViews = {};
	        }
	        Object.defineProperty(NgPlural.prototype, "ngPlural", {
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) {
	                this._switchValue = value;
	                this._updateView();
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} value
	         * @param {?} switchView
	         * @return {?}
	         */
	        NgPlural.prototype.addCase = function (value, switchView) { this._caseViews[value] = switchView; };
	        /**
	         * @return {?}
	         */
	        NgPlural.prototype._updateView = function () {
	            this._clearViews();
	            var /** @type {?} */ cases = Object.keys(this._caseViews);
	            var /** @type {?} */ key = getPluralCategory(this._switchValue, cases, this._localization);
	            this._activateView(this._caseViews[key]);
	        };
	        /**
	         * @return {?}
	         */
	        NgPlural.prototype._clearViews = function () {
	            if (this._activeView)
	                this._activeView.destroy();
	        };
	        /**
	         * @param {?} view
	         * @return {?}
	         */
	        NgPlural.prototype._activateView = function (view) {
	            if (view) {
	                this._activeView = view;
	                this._activeView.create();
	            }
	        };
	        NgPlural.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngPlural]' },] },
	        ];
	        /** @nocollapse */
	        NgPlural.ctorParameters = function () { return [
	            { type: NgLocalization, },
	        ]; };
	        NgPlural.propDecorators = {
	            'ngPlural': [{ type: _angular_core.Input },],
	        };
	        return NgPlural;
	    }());
	    /**
	     *  *
	      * given expression matches the plural expression according to CLDR rules.
	      * *
	      * ```
	      * <some-element [ngPlural]="value">
	      * <ng-container *ngPluralCase="'=0'">...</ng-container>
	      * <ng-container *ngPluralCase="'other'">...</ng-container>
	      * </some-element>
	      * *```
	      * *
	      * See {@link NgPlural} for more details and example.
	      * *
	     */
	    var NgPluralCase = (function () {
	        /**
	         * @param {?} value
	         * @param {?} template
	         * @param {?} viewContainer
	         * @param {?} ngPlural
	         */
	        function NgPluralCase(value, template, viewContainer, ngPlural) {
	            this.value = value;
	            ngPlural.addCase(value, new SwitchView(viewContainer, template));
	        }
	        NgPluralCase.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngPluralCase]' },] },
	        ];
	        /** @nocollapse */
	        NgPluralCase.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Attribute, args: ['ngPluralCase',] },] },
	            { type: _angular_core.TemplateRef, },
	            { type: _angular_core.ViewContainerRef, },
	            { type: NgPlural, decorators: [{ type: _angular_core.Host },] },
	        ]; };
	        return NgPluralCase;
	    }());
	
	    /**
	     *  *
	      * *
	      * ```
	      * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
	      * *
	      * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
	      * *
	      * <some-element [ngStyle]="objExp">...</some-element>
	      * ```
	      * *
	      * *
	      * The styles are updated according to the value of the expression evaluation:
	      * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),
	      * - values are the values assigned to those properties (expressed in the given unit).
	      * *
	     */
	    var NgStyle = (function () {
	        /**
	         * @param {?} _differs
	         * @param {?} _ngEl
	         * @param {?} _renderer
	         */
	        function NgStyle(_differs, _ngEl, _renderer) {
	            this._differs = _differs;
	            this._ngEl = _ngEl;
	            this._renderer = _renderer;
	        }
	        Object.defineProperty(NgStyle.prototype, "ngStyle", {
	            /**
	             * @param {?} v
	             * @return {?}
	             */
	            set: function (v) {
	                this._ngStyle = v;
	                if (!this._differ && v) {
	                    this._differ = this._differs.find(v).create(null);
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        NgStyle.prototype.ngDoCheck = function () {
	            if (this._differ) {
	                var /** @type {?} */ changes = this._differ.diff(this._ngStyle);
	                if (changes) {
	                    this._applyChanges(changes);
	                }
	            }
	        };
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgStyle.prototype._applyChanges = function (changes) {
	            var _this = this;
	            changes.forEachRemovedItem(function (record) { return _this._setStyle(record.key, null); });
	            changes.forEachAddedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
	            changes.forEachChangedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
	        };
	        /**
	         * @param {?} nameAndUnit
	         * @param {?} value
	         * @return {?}
	         */
	        NgStyle.prototype._setStyle = function (nameAndUnit, value) {
	            var _a = nameAndUnit.split('.'), name = _a[0], unit = _a[1];
	            value = value && unit ? "" + value + unit : value;
	            this._renderer.setElementStyle(this._ngEl.nativeElement, name, value);
	        };
	        NgStyle.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngStyle]' },] },
	        ];
	        /** @nocollapse */
	        NgStyle.ctorParameters = function () { return [
	            { type: _angular_core.KeyValueDiffers, },
	            { type: _angular_core.ElementRef, },
	            { type: _angular_core.Renderer, },
	        ]; };
	        NgStyle.propDecorators = {
	            'ngStyle': [{ type: _angular_core.Input },],
	        };
	        return NgStyle;
	    }());
	
	    /**
	     *  *
	      * *
	      * ```
	      * <template [ngTemplateOutlet]="templateRefExpression"
	      * [ngOutletContext]="objectExpression">
	      * </template>
	      * ```
	      * *
	      * *
	      * You can attach a context object to the `EmbeddedViewRef` by setting `[ngOutletContext]`.
	      * `[ngOutletContext]` should be an object, the object's keys will be the local template variables
	      * available within the `TemplateRef`.
	      * *
	      * Note: using the key `$implicit` in the context object will set it's value as default.
	      * *
	     */
	    var NgTemplateOutlet = (function () {
	        /**
	         * @param {?} _viewContainerRef
	         */
	        function NgTemplateOutlet(_viewContainerRef) {
	            this._viewContainerRef = _viewContainerRef;
	        }
	        Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
	            /**
	             * @param {?} context
	             * @return {?}
	             */
	            set: function (context) { this._context = context; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgTemplateOutlet.prototype, "ngTemplateOutlet", {
	            /**
	             * @param {?} templateRef
	             * @return {?}
	             */
	            set: function (templateRef) { this._templateRef = templateRef; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgTemplateOutlet.prototype.ngOnChanges = function (changes) {
	            if (this._viewRef) {
	                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
	            }
	            if (this._templateRef) {
	                this._viewRef = this._viewContainerRef.createEmbeddedView(this._templateRef, this._context);
	            }
	        };
	        NgTemplateOutlet.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngTemplateOutlet]' },] },
	        ];
	        /** @nocollapse */
	        NgTemplateOutlet.ctorParameters = function () { return [
	            { type: _angular_core.ViewContainerRef, },
	        ]; };
	        NgTemplateOutlet.propDecorators = {
	            'ngOutletContext': [{ type: _angular_core.Input },],
	            'ngTemplateOutlet': [{ type: _angular_core.Input },],
	        };
	        return NgTemplateOutlet;
	    }());
	
	    /**
	     * A collection of Angular directives that are likely to be used in each and every Angular
	     * application.
	     */
	    var /** @type {?} */ COMMON_DIRECTIVES = [
	        NgClass,
	        NgFor,
	        NgIf,
	        NgTemplateOutlet,
	        NgStyle,
	        NgSwitch,
	        NgSwitchCase,
	        NgSwitchDefault,
	        NgPlural,
	        NgPluralCase,
	    ];
	
	    var /** @type {?} */ isPromise = _angular_core.__core_private__.isPromise;
	
	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @stable
	     */
	    var BaseError = (function (_super) {
	        __extends$4(BaseError, _super);
	        /**
	         * @param {?} message
	         */
	        function BaseError(message) {
	            _super.call(this, message);
	            // Errors don't use current this, instead they create a new instance.
	            // We have to do forward all of our api to the nativeInstance.
	            // TODO(bradfordcsmith): Remove this hack when
	            //     google/closure-compiler/issues/2102 is fixed.
	            var nativeError = new Error(message);
	            this._nativeError = nativeError;
	        }
	        Object.defineProperty(BaseError.prototype, "message", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._nativeError.message; },
	            /**
	             * @param {?} message
	             * @return {?}
	             */
	            set: function (message) { this._nativeError.message = message; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "name", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._nativeError.name; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "stack", {
	            /**
	             * @return {?}
	             */
	            get: function () { return ((this._nativeError)).stack; },
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) { ((this._nativeError)).stack = value; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        BaseError.prototype.toString = function () { return this._nativeError.toString(); };
	        return BaseError;
	    }(Error));
	    /**
	     * @stable
	     */
	    var WrappedError = (function (_super) {
	        __extends$4(WrappedError, _super);
	        /**
	         * @param {?} message
	         * @param {?} error
	         */
	        function WrappedError(message, error) {
	            _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
	            this.originalError = error;
	        }
	        Object.defineProperty(WrappedError.prototype, "stack", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return (((this.originalError instanceof Error ? this.originalError : this._nativeError)))
	                    .stack;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return WrappedError;
	    }(BaseError));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var InvalidPipeArgumentError = (function (_super) {
	        __extends$3(InvalidPipeArgumentError, _super);
	        /**
	         * @param {?} type
	         * @param {?} value
	         */
	        function InvalidPipeArgumentError(type, value) {
	            _super.call(this, "Invalid argument '" + value + "' for pipe '" + stringify(type) + "'");
	        }
	        return InvalidPipeArgumentError;
	    }(BaseError));
	
	    var ObservableStrategy = (function () {
	        function ObservableStrategy() {
	        }
	        /**
	         * @param {?} async
	         * @param {?} updateLatestValue
	         * @return {?}
	         */
	        ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	            return async.subscribe({ next: updateLatestValue, error: function (e) { throw e; } });
	        };
	        /**
	         * @param {?} subscription
	         * @return {?}
	         */
	        ObservableStrategy.prototype.dispose = function (subscription) { subscription.unsubscribe(); };
	        /**
	         * @param {?} subscription
	         * @return {?}
	         */
	        ObservableStrategy.prototype.onDestroy = function (subscription) { subscription.unsubscribe(); };
	        return ObservableStrategy;
	    }());
	    var PromiseStrategy = (function () {
	        function PromiseStrategy() {
	        }
	        /**
	         * @param {?} async
	         * @param {?} updateLatestValue
	         * @return {?}
	         */
	        PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	            return async.then(updateLatestValue, function (e) { throw e; });
	        };
	        /**
	         * @param {?} subscription
	         * @return {?}
	         */
	        PromiseStrategy.prototype.dispose = function (subscription) { };
	        /**
	         * @param {?} subscription
	         * @return {?}
	         */
	        PromiseStrategy.prototype.onDestroy = function (subscription) { };
	        return PromiseStrategy;
	    }());
	    var /** @type {?} */ _promiseStrategy = new PromiseStrategy();
	    var /** @type {?} */ _observableStrategy = new ObservableStrategy();
	    /**
	     *  The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
	      * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
	      * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
	      * potential memory leaks.
	      * *
	      * *
	      * ## Examples
	      * *
	      * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
	      * promise.
	      * *
	      * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
	      * *
	      * It's also possible to use `async` with Observables. The example below binds the `time` Observable
	      * to the view. The Observable continuously updates the view with the current time.
	      * *
	      * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
	      * *
	     */
	    var AsyncPipe = (function () {
	        /**
	         * @param {?} _ref
	         */
	        function AsyncPipe(_ref) {
	            this._ref = _ref;
	            this._latestValue = null;
	            this._latestReturnedValue = null;
	            this._subscription = null;
	            this._obj = null;
	            this._strategy = null;
	        }
	        /**
	         * @return {?}
	         */
	        AsyncPipe.prototype.ngOnDestroy = function () {
	            if (this._subscription) {
	                this._dispose();
	            }
	        };
	        /**
	         * @param {?} obj
	         * @return {?}
	         */
	        AsyncPipe.prototype.transform = function (obj) {
	            if (!this._obj) {
	                if (obj) {
	                    this._subscribe(obj);
	                }
	                this._latestReturnedValue = this._latestValue;
	                return this._latestValue;
	            }
	            if (obj !== this._obj) {
	                this._dispose();
	                return this.transform(obj);
	            }
	            if (this._latestValue === this._latestReturnedValue) {
	                return this._latestReturnedValue;
	            }
	            this._latestReturnedValue = this._latestValue;
	            return _angular_core.WrappedValue.wrap(this._latestValue);
	        };
	        /**
	         * @param {?} obj
	         * @return {?}
	         */
	        AsyncPipe.prototype._subscribe = function (obj) {
	            var _this = this;
	            this._obj = obj;
	            this._strategy = this._selectStrategy(obj);
	            this._subscription = this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });
	        };
	        /**
	         * @param {?} obj
	         * @return {?}
	         */
	        AsyncPipe.prototype._selectStrategy = function (obj) {
	            if (isPromise(obj)) {
	                return _promiseStrategy;
	            }
	            if (((obj)).subscribe) {
	                return _observableStrategy;
	            }
	            throw new InvalidPipeArgumentError(AsyncPipe, obj);
	        };
	        /**
	         * @return {?}
	         */
	        AsyncPipe.prototype._dispose = function () {
	            this._strategy.dispose(this._subscription);
	            this._latestValue = null;
	            this._latestReturnedValue = null;
	            this._subscription = null;
	            this._obj = null;
	        };
	        /**
	         * @param {?} async
	         * @param {?} value
	         * @return {?}
	         */
	        AsyncPipe.prototype._updateLatestValue = function (async, value) {
	            if (async === this._obj) {
	                this._latestValue = value;
	                this._ref.markForCheck();
	            }
	        };
	        AsyncPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'async', pure: false },] },
	        ];
	        /** @nocollapse */
	        AsyncPipe.ctorParameters = function () { return [
	            { type: _angular_core.ChangeDetectorRef, },
	        ]; };
	        return AsyncPipe;
	    }());
	
	    var NumberFormatStyle = {};
	    NumberFormatStyle.Decimal = 0;
	    NumberFormatStyle.Percent = 1;
	    NumberFormatStyle.Currency = 2;
	    NumberFormatStyle[NumberFormatStyle.Decimal] = "Decimal";
	    NumberFormatStyle[NumberFormatStyle.Percent] = "Percent";
	    NumberFormatStyle[NumberFormatStyle.Currency] = "Currency";
	    var NumberFormatter = (function () {
	        function NumberFormatter() {
	        }
	        /**
	         * @param {?} num
	         * @param {?} locale
	         * @param {?} style
	         * @param {?=} __3
	         * @return {?}
	         */
	        NumberFormatter.format = function (num, locale, style, _a) {
	            var _b = _a === void 0 ? {} : _a, minimumIntegerDigits = _b.minimumIntegerDigits, minimumFractionDigits = _b.minimumFractionDigits, maximumFractionDigits = _b.maximumFractionDigits, currency = _b.currency, _c = _b.currencyAsSymbol, currencyAsSymbol = _c === void 0 ? false : _c;
	            var /** @type {?} */ options = {
	                minimumIntegerDigits: minimumIntegerDigits,
	                minimumFractionDigits: minimumFractionDigits,
	                maximumFractionDigits: maximumFractionDigits,
	                style: NumberFormatStyle[style].toLowerCase()
	            };
	            if (style == NumberFormatStyle.Currency) {
	                options.currency = currency;
	                options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
	            }
	            return new Intl.NumberFormat(locale, options).format(num);
	        };
	        return NumberFormatter;
	    }());
	    var /** @type {?} */ DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
	    var /** @type {?} */ PATTERN_ALIASES = {
	        // Keys are quoted so they do not get renamed during closure compilation.
	        'yMMMdjms': datePartGetterFactory(combine([
	            digitCondition('year', 1),
	            nameCondition('month', 3),
	            digitCondition('day', 1),
	            digitCondition('hour', 1),
	            digitCondition('minute', 1),
	            digitCondition('second', 1),
	        ])),
	        'yMdjm': datePartGetterFactory(combine([
	            digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),
	            digitCondition('hour', 1), digitCondition('minute', 1)
	        ])),
	        'yMMMMEEEEd': datePartGetterFactory(combine([
	            digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),
	            digitCondition('day', 1)
	        ])),
	        'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
	        'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
	        'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
	        'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
	        'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
	    };
	    var /** @type {?} */ DATE_FORMATS = {
	        // Keys are quoted so they do not get renamed.
	        'yyyy': datePartGetterFactory(digitCondition('year', 4)),
	        'yy': datePartGetterFactory(digitCondition('year', 2)),
	        'y': datePartGetterFactory(digitCondition('year', 1)),
	        'MMMM': datePartGetterFactory(nameCondition('month', 4)),
	        'MMM': datePartGetterFactory(nameCondition('month', 3)),
	        'MM': datePartGetterFactory(digitCondition('month', 2)),
	        'M': datePartGetterFactory(digitCondition('month', 1)),
	        'LLLL': datePartGetterFactory(nameCondition('month', 4)),
	        'L': datePartGetterFactory(nameCondition('month', 1)),
	        'dd': datePartGetterFactory(digitCondition('day', 2)),
	        'd': datePartGetterFactory(digitCondition('day', 1)),
	        'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
	        'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
	        'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
	        'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
	        'jj': datePartGetterFactory(digitCondition('hour', 2)),
	        'j': datePartGetterFactory(digitCondition('hour', 1)),
	        'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
	        'm': datePartGetterFactory(digitCondition('minute', 1)),
	        'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),
	        's': datePartGetterFactory(digitCondition('second', 1)),
	        // while ISO 8601 requires fractions to be prefixed with `.` or `,`
	        // we can be just safely rely on using `sss` since we currently don't support single or two digit
	        // fractions
	        'sss': datePartGetterFactory(digitCondition('second', 3)),
	        'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),
	        'EEE': datePartGetterFactory(nameCondition('weekday', 3)),
	        'EE': datePartGetterFactory(nameCondition('weekday', 2)),
	        'E': datePartGetterFactory(nameCondition('weekday', 1)),
	        'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
	        'Z': timeZoneGetter('short'),
	        'z': timeZoneGetter('long'),
	        'ww': datePartGetterFactory({}),
	        // first Thursday of the year. not support ?
	        'w': datePartGetterFactory({}),
	        // of the year not support ?
	        'G': datePartGetterFactory(nameCondition('era', 1)),
	        'GG': datePartGetterFactory(nameCondition('era', 2)),
	        'GGG': datePartGetterFactory(nameCondition('era', 3)),
	        'GGGG': datePartGetterFactory(nameCondition('era', 4))
	    };
	    /**
	     * @param {?} inner
	     * @return {?}
	     */
	    function digitModifier(inner) {
	        return function (date, locale) {
	            var /** @type {?} */ result = inner(date, locale);
	            return result.length == 1 ? '0' + result : result;
	        };
	    }
	    /**
	     * @param {?} inner
	     * @return {?}
	     */
	    function hourClockExtractor(inner) {
	        return function (date, locale) { return inner(date, locale).split(' ')[1]; };
	    }
	    /**
	     * @param {?} inner
	     * @return {?}
	     */
	    function hourExtractor(inner) {
	        return function (date, locale) { return inner(date, locale).split(' ')[0]; };
	    }
	    /**
	     * @param {?} date
	     * @param {?} locale
	     * @param {?} options
	     * @return {?}
	     */
	    function intlDateFormat(date, locale, options) {
	        return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
	    }
	    /**
	     * @param {?} timezone
	     * @return {?}
	     */
	    function timeZoneGetter(timezone) {
	        // To workaround `Intl` API restriction for single timezone let format with 24 hours
	        var /** @type {?} */ options = { hour: '2-digit', hour12: false, timeZoneName: timezone };
	        return function (date, locale) {
	            var /** @type {?} */ result = intlDateFormat(date, locale, options);
	            // Then extract first 3 letters that related to hours
	            return result ? result.substring(3) : '';
	        };
	    }
	    /**
	     * @param {?} options
	     * @param {?} value
	     * @return {?}
	     */
	    function hour12Modify(options, value) {
	        options.hour12 = value;
	        return options;
	    }
	    /**
	     * @param {?} prop
	     * @param {?} len
	     * @return {?}
	     */
	    function digitCondition(prop, len) {
	        var /** @type {?} */ result = {};
	        result[prop] = len === 2 ? '2-digit' : 'numeric';
	        return result;
	    }
	    /**
	     * @param {?} prop
	     * @param {?} len
	     * @return {?}
	     */
	    function nameCondition(prop, len) {
	        var /** @type {?} */ result = {};
	        if (len < 4) {
	            result[prop] = len > 1 ? 'short' : 'narrow';
	        }
	        else {
	            result[prop] = 'long';
	        }
	        return result;
	    }
	    /**
	     * @param {?} options
	     * @return {?}
	     */
	    function combine(options) {
	        return (_a = ((Object))).assign.apply(_a, [{}].concat(options));
	        var _a;
	    }
	    /**
	     * @param {?} ret
	     * @return {?}
	     */
	    function datePartGetterFactory(ret) {
	        return function (date, locale) { return intlDateFormat(date, locale, ret); };
	    }
	    var /** @type {?} */ DATE_FORMATTER_CACHE = new Map();
	    /**
	     * @param {?} format
	     * @param {?} date
	     * @param {?} locale
	     * @return {?}
	     */
	    function dateFormatter(format, date, locale) {
	        var /** @type {?} */ fn = PATTERN_ALIASES[format];
	        if (fn)
	            return fn(date, locale);
	        var /** @type {?} */ cacheKey = format;
	        var /** @type {?} */ parts = DATE_FORMATTER_CACHE.get(cacheKey);
	        if (!parts) {
	            parts = [];
	            var /** @type {?} */ match = void 0;
	            DATE_FORMATS_SPLIT.exec(format);
	            while (format) {
	                match = DATE_FORMATS_SPLIT.exec(format);
	                if (match) {
	                    parts = parts.concat(match.slice(1));
	                    format = parts.pop();
	                }
	                else {
	                    parts.push(format);
	                    format = null;
	                }
	            }
	            DATE_FORMATTER_CACHE.set(cacheKey, parts);
	        }
	        return parts.reduce(function (text, part) {
	            var /** @type {?} */ fn = DATE_FORMATS[part];
	            return text + (fn ? fn(date, locale) : partToTime(part));
	        }, '');
	    }
	    /**
	     * @param {?} part
	     * @return {?}
	     */
	    function partToTime(part) {
	        return part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
	    }
	    var DateFormatter = (function () {
	        function DateFormatter() {
	        }
	        /**
	         * @param {?} date
	         * @param {?} locale
	         * @param {?} pattern
	         * @return {?}
	         */
	        DateFormatter.format = function (date, locale, pattern) {
	            return dateFormatter(pattern, date, locale);
	        };
	        return DateFormatter;
	    }());
	
	    /**
	     *  *
	      * Where:
	      * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string
	      * (https://www.w3.org/TR/NOTE-datetime).
	      * - `format` indicates which date/time components to include. The format can be predifined as
	      * shown below or custom as shown in the table.
	      * - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)
	      * - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)
	      * - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)
	      * - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)
	      * - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)
	      * - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)
	      * - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)
	      * - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)
	      * *
	      * *
	      * | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |
	      * |-----------|:------:|--------|--------------|-------------------|-----------|-----------|
	      * | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |
	      * | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |
	      * | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
	      * | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |
	      * | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
	      * | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |
	      * | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|
	      * | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |
	      * | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |
	      * | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |
	      * | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |
	      * | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |
	      * | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |
	      * *
	      * In javascript, only the components specified will be respected (not the ordering,
	      * punctuations, ...) and details of the formatting will be dependent on the locale.
	      * *
	      * Timezone of the formatted text will be the local system timezone of the end-user's machine.
	      * *
	      * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not
	      * applied and the formatted text will have the same day, month and year of the expression.
	      * *
	      * WARNINGS:
	      * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
	      * Instead users should treat the date as an immutable object and change the reference when the
	      * pipe needs to re-run (this is to avoid reformatting the date on every change detection run
	      * which would be an expensive operation).
	      * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera
	      * browsers.
	      * *
	      * ### Examples
	      * *
	      * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
	      * in the _local_ time and locale is 'en-US':
	      * *
	      * ```
	      * {{ dateObj | date }}               // output is 'Jun 15, 2015'
	      * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
	      * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
	      * {{ dateObj | date:'mmss' }}        // output is '43:11'
	      * ```
	      * *
	      * {@example common/pipes/ts/date_pipe.ts region='DatePipe'}
	      * *
	     */
	    var DatePipe = (function () {
	        /**
	         * @param {?} _locale
	         */
	        function DatePipe(_locale) {
	            this._locale = _locale;
	        }
	        /**
	         * @param {?} value
	         * @param {?=} pattern
	         * @return {?}
	         */
	        DatePipe.prototype.transform = function (value, pattern) {
	            if (pattern === void 0) { pattern = 'mediumDate'; }
	            var /** @type {?} */ date;
	            if (isBlank$1(value))
	                return null;
	            if (typeof value === 'string') {
	                value = value.trim();
	            }
	            if (isDate(value)) {
	                date = value;
	            }
	            else if (NumberWrapper.isNumeric(value)) {
	                date = new Date(parseFloat(value));
	            }
	            else if (typeof value === 'string' && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
	                /**
	                * For ISO Strings without time the day, month and year must be extracted from the ISO String
	                * before Date creation to avoid time offset and errors in the new Date.
	                * If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
	                * date, some browsers (e.g. IE 9) will throw an invalid Date error
	                * If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
	                * is applied
	                * Note: ISO months are 0 for January, 1 for February, ...
	                */
	                var _a = value.split('-').map(function (val) { return parseInt(val, 10); }), y = _a[0], m = _a[1], d = _a[2];
	                date = new Date(y, m - 1, d);
	            }
	            else {
	                date = new Date(value);
	            }
	            if (!isDate(date)) {
	                throw new InvalidPipeArgumentError(DatePipe, value);
	            }
	            return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);
	        };
	        /** @internal */
	        DatePipe._ALIASES = {
	            'medium': 'yMMMdjms',
	            'short': 'yMdjm',
	            'fullDate': 'yMMMMEEEEd',
	            'longDate': 'yMMMMd',
	            'mediumDate': 'yMMMd',
	            'shortDate': 'yMd',
	            'mediumTime': 'jms',
	            'shortTime': 'jm'
	        };
	        DatePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'date', pure: true },] },
	        ];
	        /** @nocollapse */
	        DatePipe.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ]; };
	        return DatePipe;
	    }());
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isBlank$1(obj) {
	        return obj == null || obj === '';
	    }
	
	    var /** @type {?} */ _INTERPOLATION_REGEXP = /#/g;
	    /**
	     *  *
	      * Where:
	      * - `expression` is a number.
	      * - `mapping` is an object that mimics the ICU format, see
	      * http://userguide.icu-project.org/formatparse/messages
	      * *
	      * ## Example
	      * *
	      * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
	      * *
	     */
	    var I18nPluralPipe = (function () {
	        /**
	         * @param {?} _localization
	         */
	        function I18nPluralPipe(_localization) {
	            this._localization = _localization;
	        }
	        /**
	         * @param {?} value
	         * @param {?} pluralMap
	         * @return {?}
	         */
	        I18nPluralPipe.prototype.transform = function (value, pluralMap) {
	            if (isBlank(value))
	                return '';
	            if (typeof pluralMap !== 'object' || pluralMap === null) {
	                throw new InvalidPipeArgumentError(I18nPluralPipe, pluralMap);
	            }
	            var /** @type {?} */ key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
	            return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
	        };
	        I18nPluralPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'i18nPlural', pure: true },] },
	        ];
	        /** @nocollapse */
	        I18nPluralPipe.ctorParameters = function () { return [
	            { type: NgLocalization, },
	        ]; };
	        return I18nPluralPipe;
	    }());
	
	    /**
	     *  *
	      * Where `mapping` is an object that indicates the text that should be displayed
	      * for different values of the provided `expression`.
	      * If none of the keys of the mapping match the value of the `expression`, then the content
	      * of the `other` key is returned when present, otherwise an empty string is returned.
	      * *
	      * ## Example
	      * *
	      * {@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
	      * *
	      * @experimental
	     */
	    var I18nSelectPipe = (function () {
	        function I18nSelectPipe() {
	        }
	        /**
	         * @param {?} value
	         * @param {?} mapping
	         * @return {?}
	         */
	        I18nSelectPipe.prototype.transform = function (value, mapping) {
	            if (value == null)
	                return '';
	            if (typeof mapping !== 'object' || typeof value !== 'string') {
	                throw new InvalidPipeArgumentError(I18nSelectPipe, mapping);
	            }
	            if (mapping.hasOwnProperty(value)) {
	                return mapping[value];
	            }
	            if (mapping.hasOwnProperty('other')) {
	                return mapping['other'];
	            }
	            return '';
	        };
	        I18nSelectPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'i18nSelect', pure: true },] },
	        ];
	        /** @nocollapse */
	        I18nSelectPipe.ctorParameters = function () { return []; };
	        return I18nSelectPipe;
	    }());
	
	    /**
	     *  *
	      * Converts value into string using `JSON.stringify`. Useful for debugging.
	      * *
	      * ### Example
	      * {@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
	      * *
	     */
	    var JsonPipe = (function () {
	        function JsonPipe() {
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        JsonPipe.prototype.transform = function (value) { return JSON.stringify(value, null, 2); };
	        JsonPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'json', pure: false },] },
	        ];
	        /** @nocollapse */
	        JsonPipe.ctorParameters = function () { return []; };
	        return JsonPipe;
	    }());
	
	    /**
	     *  *
	      * Converts value into a lowercase string using `String.prototype.toLowerCase()`.
	      * *
	      * ### Example
	      * *
	      * {@example common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe'}
	      * *
	     */
	    var LowerCasePipe = (function () {
	        function LowerCasePipe() {
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        LowerCasePipe.prototype.transform = function (value) {
	            if (isBlank(value))
	                return value;
	            if (typeof value !== 'string') {
	                throw new InvalidPipeArgumentError(LowerCasePipe, value);
	            }
	            return value.toLowerCase();
	        };
	        LowerCasePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'lowercase' },] },
	        ];
	        /** @nocollapse */
	        LowerCasePipe.ctorParameters = function () { return []; };
	        return LowerCasePipe;
	    }());
	
	    var /** @type {?} */ _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
	    /**
	     * @param {?} pipe
	     * @param {?} locale
	     * @param {?} value
	     * @param {?} style
	     * @param {?} digits
	     * @param {?=} currency
	     * @param {?=} currencyAsSymbol
	     * @return {?}
	     */
	    function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
	        if (currency === void 0) { currency = null; }
	        if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
	        if (isBlank(value))
	            return null;
	        // Convert strings to numbers
	        value = typeof value === 'string' && NumberWrapper.isNumeric(value) ? +value : value;
	        if (typeof value !== 'number') {
	            throw new InvalidPipeArgumentError(pipe, value);
	        }
	        var /** @type {?} */ minInt;
	        var /** @type {?} */ minFraction;
	        var /** @type {?} */ maxFraction;
	        if (style !== NumberFormatStyle.Currency) {
	            // rely on Intl default for currency
	            minInt = 1;
	            minFraction = 0;
	            maxFraction = 3;
	        }
	        if (digits) {
	            var /** @type {?} */ parts = digits.match(_NUMBER_FORMAT_REGEXP);
	            if (parts === null) {
	                throw new Error(digits + " is not a valid digit info for number pipes");
	            }
	            if (isPresent(parts[1])) {
	                minInt = NumberWrapper.parseIntAutoRadix(parts[1]);
	            }
	            if (isPresent(parts[3])) {
	                minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);
	            }
	            if (isPresent(parts[5])) {
	                maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);
	            }
	        }
	        return NumberFormatter.format(/** @type {?} */ (value), locale, style, {
	            minimumIntegerDigits: minInt,
	            minimumFractionDigits: minFraction,
	            maximumFractionDigits: maxFraction,
	            currency: currency,
	            currencyAsSymbol: currencyAsSymbol,
	        });
	    }
	    /**
	     *  *
	      * Formats a number as text. Group sizing and separator and other locale-specific
	      * configurations are based on the active locale.
	      * *
	      * where `expression` is a number:
	      * - `digitInfo` is a `string` which has a following format: <br>
	      * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>
	      * - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.
	      * - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.
	      * - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.
	      * *
	      * For more information on the acceptable range for each of these numbers and other
	      * details see your native internationalization library.
	      * *
	      * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	      * and may require a polyfill. See {@linkDocs guide/browser-support} for details.
	      * *
	      * ### Example
	      * *
	      * {@example common/pipes/ts/number_pipe.ts region='NumberPipe'}
	      * *
	     */
	    var DecimalPipe = (function () {
	        /**
	         * @param {?} _locale
	         */
	        function DecimalPipe(_locale) {
	            this._locale = _locale;
	        }
	        /**
	         * @param {?} value
	         * @param {?=} digits
	         * @return {?}
	         */
	        DecimalPipe.prototype.transform = function (value, digits) {
	            if (digits === void 0) { digits = null; }
	            return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
	        };
	        DecimalPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'number' },] },
	        ];
	        /** @nocollapse */
	        DecimalPipe.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ]; };
	        return DecimalPipe;
	    }());
	    /**
	     *  *
	      * *
	      * Formats a number as percentage.
	      * *
	      * - `digitInfo` See {@link DecimalPipe} for detailed description.
	      * *
	      * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	      * and may require a polyfill. See {@linkDocs guide/browser-support} for details.
	      * *
	      * ### Example
	      * *
	      * {@example common/pipes/ts/number_pipe.ts region='PercentPipe'}
	      * *
	     */
	    var PercentPipe = (function () {
	        /**
	         * @param {?} _locale
	         */
	        function PercentPipe(_locale) {
	            this._locale = _locale;
	        }
	        /**
	         * @param {?} value
	         * @param {?=} digits
	         * @return {?}
	         */
	        PercentPipe.prototype.transform = function (value, digits) {
	            if (digits === void 0) { digits = null; }
	            return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
	        };
	        PercentPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'percent' },] },
	        ];
	        /** @nocollapse */
	        PercentPipe.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ]; };
	        return PercentPipe;
	    }());
	    /**
	     *  *
	      * Use `currency` to format a number as currency.
	      * *
	      * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such
	      * as `USD` for the US dollar and `EUR` for the euro.
	      * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.
	      * - `true`: use symbol (e.g. `$`).
	      * - `false`(default): use code (e.g. `USD`).
	      * - `digitInfo` See {@link DecimalPipe} for detailed description.
	      * *
	      * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	      * and may require a polyfill. See {@linkDocs guide/browser-support} for details.
	      * *
	      * ### Example
	      * *
	      * {@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}
	      * *
	     */
	    var CurrencyPipe = (function () {
	        /**
	         * @param {?} _locale
	         */
	        function CurrencyPipe(_locale) {
	            this._locale = _locale;
	        }
	        /**
	         * @param {?} value
	         * @param {?=} currencyCode
	         * @param {?=} symbolDisplay
	         * @param {?=} digits
	         * @return {?}
	         */
	        CurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) {
	            if (currencyCode === void 0) { currencyCode = 'USD'; }
	            if (symbolDisplay === void 0) { symbolDisplay = false; }
	            if (digits === void 0) { digits = null; }
	            return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
	        };
	        CurrencyPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'currency' },] },
	        ];
	        /** @nocollapse */
	        CurrencyPipe.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ]; };
	        return CurrencyPipe;
	    }());
	
	    /**
	     *  *
	      * Where the input expression is a `List` or `String`, and:
	      * - `start`: The starting index of the subset to return.
	      * - **a positive integer**: return the item at `start` index and all items after
	      * in the list or string expression.
	      * - **a negative integer**: return the item at `start` index from the end and all items after
	      * in the list or string expression.
	      * - **if positive and greater than the size of the expression**: return an empty list or string.
	      * - **if negative and greater than the size of the expression**: return entire list or string.
	      * - `end`: The ending index of the subset to return.
	      * - **omitted**: return all items until the end.
	      * - **if positive**: return all items before `end` index of the list or string.
	      * - **if negative**: return all items before `end` index from the end of the list or string.
	      * *
	      * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
	      * and `String.prototype.slice()`.
	      * *
	      * When operating on a [List], the returned list is always a copy even when all
	      * the elements are being returned.
	      * *
	      * When operating on a blank value, the pipe returns the blank value.
	      * *
	      * ## List Example
	      * *
	      * This `ngFor` example:
	      * *
	      * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
	      * *
	      * produces the following:
	      * *
	      * <li>b</li>
	      * <li>c</li>
	      * *
	      * ## String Examples
	      * *
	      * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
	      * *
	     */
	    var SlicePipe = (function () {
	        function SlicePipe() {
	        }
	        /**
	         * @param {?} value
	         * @param {?} start
	         * @param {?=} end
	         * @return {?}
	         */
	        SlicePipe.prototype.transform = function (value, start, end) {
	            if (isBlank(value))
	                return value;
	            if (!this.supports(value)) {
	                throw new InvalidPipeArgumentError(SlicePipe, value);
	            }
	            return value.slice(start, end);
	        };
	        /**
	         * @param {?} obj
	         * @return {?}
	         */
	        SlicePipe.prototype.supports = function (obj) { return typeof obj === 'string' || Array.isArray(obj); };
	        SlicePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'slice', pure: false },] },
	        ];
	        /** @nocollapse */
	        SlicePipe.ctorParameters = function () { return []; };
	        return SlicePipe;
	    }());
	
	    /**
	     *  *
	      * Converts value into an uppercase string using `String.prototype.toUpperCase()`.
	      * *
	      * ### Example
	      * *
	      * {@example common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe'}
	      * *
	     */
	    var UpperCasePipe = (function () {
	        function UpperCasePipe() {
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        UpperCasePipe.prototype.transform = function (value) {
	            if (isBlank(value))
	                return value;
	            if (typeof value !== 'string') {
	                throw new InvalidPipeArgumentError(UpperCasePipe, value);
	            }
	            return value.toUpperCase();
	        };
	        UpperCasePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'uppercase' },] },
	        ];
	        /** @nocollapse */
	        UpperCasePipe.ctorParameters = function () { return []; };
	        return UpperCasePipe;
	    }());
	
	    /**
	     * A collection of Angular pipes that are likely to be used in each and every application.
	     */
	    var /** @type {?} */ COMMON_PIPES = [
	        AsyncPipe,
	        UpperCasePipe,
	        LowerCasePipe,
	        JsonPipe,
	        SlicePipe,
	        DecimalPipe,
	        PercentPipe,
	        CurrencyPipe,
	        DatePipe,
	        I18nPluralPipe,
	        I18nSelectPipe,
	    ];
	
	    /**
	     *  The module that includes all the basic Angular directives like {@link NgIf}, {@link NgFor}, ...
	      * *
	     */
	    var CommonModule = (function () {
	        function CommonModule() {
	        }
	        CommonModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
	                        exports: [COMMON_DIRECTIVES, COMMON_PIPES],
	                        providers: [
	                            { provide: NgLocalization, useClass: NgLocaleLocalization },
	                        ],
	                    },] },
	        ];
	        /** @nocollapse */
	        CommonModule.ctorParameters = function () { return []; };
	        return CommonModule;
	    }());
	
	    /**
	     * @stable
	     */
	    var /** @type {?} */ VERSION = new _angular_core.Version('2.3.1');
	
	    exports.NgLocalization = NgLocalization;
	    exports.CommonModule = CommonModule;
	    exports.NgClass = NgClass;
	    exports.NgFor = NgFor;
	    exports.NgIf = NgIf;
	    exports.NgPlural = NgPlural;
	    exports.NgPluralCase = NgPluralCase;
	    exports.NgStyle = NgStyle;
	    exports.NgSwitch = NgSwitch;
	    exports.NgSwitchCase = NgSwitchCase;
	    exports.NgSwitchDefault = NgSwitchDefault;
	    exports.NgTemplateOutlet = NgTemplateOutlet;
	    exports.AsyncPipe = AsyncPipe;
	    exports.DatePipe = DatePipe;
	    exports.I18nPluralPipe = I18nPluralPipe;
	    exports.I18nSelectPipe = I18nSelectPipe;
	    exports.JsonPipe = JsonPipe;
	    exports.LowerCasePipe = LowerCasePipe;
	    exports.CurrencyPipe = CurrencyPipe;
	    exports.DecimalPipe = DecimalPipe;
	    exports.PercentPipe = PercentPipe;
	    exports.SlicePipe = SlicePipe;
	    exports.UpperCasePipe = UpperCasePipe;
	    exports.VERSION = VERSION;
	    exports.Version = _angular_core.Version;
	    exports.PlatformLocation = PlatformLocation;
	    exports.LocationStrategy = LocationStrategy;
	    exports.APP_BASE_HREF = APP_BASE_HREF;
	    exports.HashLocationStrategy = HashLocationStrategy;
	    exports.PathLocationStrategy = PathLocationStrategy;
	    exports.Location = Location;
	
	}));

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var platform_browser_1 = __webpack_require__(286);
	var core_1 = __webpack_require__(268);
	var compiler_1 = __webpack_require__(267);
	exports.BROWSER_SANITIZATION_PROVIDERS = platform_browser_1.__platform_browser_private__.BROWSER_SANITIZATION_PROVIDERS;
	exports.SharedStylesHost = platform_browser_1.__platform_browser_private__.SharedStylesHost;
	exports.DomSharedStylesHost = platform_browser_1.__platform_browser_private__.DomSharedStylesHost;
	exports.DomRootRenderer = platform_browser_1.__platform_browser_private__.DomRootRenderer;
	exports.DomEventsPlugin = platform_browser_1.__platform_browser_private__.DomEventsPlugin;
	exports.KeyEventsPlugin = platform_browser_1.__platform_browser_private__.KeyEventsPlugin;
	exports.DomAdapter = platform_browser_1.__platform_browser_private__.DomAdapter;
	exports.setRootDomAdapter = platform_browser_1.__platform_browser_private__.setRootDomAdapter;
	exports.HammerGesturesPlugin = platform_browser_1.__platform_browser_private__.HammerGesturesPlugin;
	exports.ViewUtils = core_1.__core_private__.ViewUtils;
	exports.AnimationKeyframe = core_1.__core_private__.AnimationKeyframe;
	exports.AnimationPlayer = core_1.__core_private__.AnimationPlayer;
	exports.AnimationStyles = core_1.__core_private__.AnimationStyles;
	exports.RenderDebugInfo = core_1.__core_private__.RenderDebugInfo;
	exports.SelectorMatcher = compiler_1.__compiler_private__.SelectorMatcher;
	exports.CssSelector = compiler_1.__compiler_private__.CssSelector;
	var __empty = null;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = __empty;
	//# sourceMappingURL=__private_imports__.js.map

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(290));
	//# sourceMappingURL=node.js.map

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var universalNode = __webpack_require__(291);
	__export(__webpack_require__(291));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = universalNode;
	//# sourceMappingURL=index.js.map

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(292));
	__export(__webpack_require__(293));
	__export(__webpack_require__(344));
	__export(__webpack_require__(345));
	__export(__webpack_require__(294));
	//# sourceMappingURL=node.js.map

/***/ },
/* 292 */
/***/ function(module, exports) {

	"use strict";
	exports.isBrowser = false;
	exports.isNode = true;
	//# sourceMappingURL=env.js.map

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(268);
	var lib_1 = __webpack_require__(294);
	function platformUniversalDynamic(extraProviders) {
	    var platform = lib_1.platformNodeDynamic(extraProviders);
	    return platform;
	}
	exports.platformUniversalDynamic = platformUniversalDynamic;
	;
	var UniversalModule = (function () {
	    function UniversalModule() {
	    }
	    UniversalModule.withConfig = function (config) {
	        if (config === void 0) { config = {}; }
	        var providers = lib_1.NodeModule.withConfig(config).providers;
	        return {
	            ngModule: UniversalModule,
	            providers: providers || []
	        };
	    };
	    UniversalModule.decorators = [
	        { type: core_1.NgModule, args: [{
	                    exports: [
	                        lib_1.NodeModule,
	                        lib_1.NodeHttpModule,
	                        lib_1.NodeJsonpModule
	                    ]
	                },] },
	    ];
	    UniversalModule.ctorParameters = [];
	    return UniversalModule;
	}());
	exports.UniversalModule = UniversalModule;
	//# sourceMappingURL=universal-module.js.map

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(295));
	//# sourceMappingURL=index.js.map

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var get_dom_1 = __webpack_require__(296);
	exports.getDOM = get_dom_1.getDOM;
	__export(__webpack_require__(297));
	__export(__webpack_require__(298));
	__export(__webpack_require__(327));
	__export(__webpack_require__(335));
	__export(__webpack_require__(337));
	__export(__webpack_require__(338));
	__export(__webpack_require__(336));
	__export(__webpack_require__(334));
	//# sourceMappingURL=index.js.map

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var platform_browser_1 = __webpack_require__(286);
	var getDOM = platform_browser_1.__platform_browser_private__.getDOM;
	exports.getDOM = getDOM;
	//# sourceMappingURL=get-dom.js.map

/***/ },
/* 297 */
/***/ function(module, exports) {

	"use strict";
	function cssHyphenate(propertyName) {
	    return propertyName.replace(/([A-Z])/g, '-$1')
	        .replace(/^ms-/, '-ms-')
	        .toLowerCase();
	}
	exports.cssHyphenate = cssHyphenate;
	function isPresent(obj) {
	    return obj !== undefined && obj !== null;
	}
	exports.isPresent = isPresent;
	function isString(str) {
	    return typeof str === 'string';
	}
	exports.isString = isString;
	function isBlank(obj) {
	    return obj === undefined || obj === null;
	}
	exports.isBlank = isBlank;
	function regExFirstMatch(regExp, input) {
	    regExp.lastIndex = 0;
	    return regExp.exec(input);
	}
	exports.regExFirstMatch = regExFirstMatch;
	function setValueOnPath(context, path, value) {
	    var parts = path.split('.');
	    var obj = context;
	    while (parts.length > 1) {
	        var name = parts.shift();
	        if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
	            obj = obj[name];
	        }
	        else {
	            obj = obj[name] = {};
	        }
	    }
	    if (obj === undefined || obj === null) {
	        obj = {};
	    }
	    obj[parts.shift()] = value;
	}
	exports.setValueOnPath = setValueOnPath;
	var ListWrapper = (function () {
	    function ListWrapper() {
	    }
	    ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };
	    ListWrapper.remove = function (list, el) {
	        var index = list.indexOf(el);
	        if (index > -1) {
	            list.splice(index, 1);
	            return true;
	        }
	        return false;
	    };
	    return ListWrapper;
	}());
	exports.ListWrapper = ListWrapper;
	var StringMapWrapper = (function () {
	    function StringMapWrapper() {
	    }
	    StringMapWrapper.create = function () {
	        return {};
	    };
	    StringMapWrapper.contains = function (map, key) {
	        return map.hasOwnProperty(key);
	    };
	    StringMapWrapper.get = function (map, key) {
	        return map.hasOwnProperty(key) ? map[key] : undefined;
	    };
	    StringMapWrapper.set = function (map, key, value) { map[key] = value; };
	    StringMapWrapper.keys = function (map) { return Object.keys(map); };
	    StringMapWrapper.values = function (map) {
	        return Object.keys(map).map(function (k) { return map[k]; });
	    };
	    StringMapWrapper.isEmpty = function (map) {
	        for (var prop in map) {
	            !prop;
	            return false;
	        }
	        return true;
	    };
	    StringMapWrapper.delete = function (map, key) { delete map[key]; };
	    StringMapWrapper.forEach = function (map, callback) {
	        for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {
	            var k = _a[_i];
	            callback(map[k], k);
	        }
	    };
	    StringMapWrapper.merge = function (m1, m2) {
	        var m = {};
	        for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	            var k = _a[_i];
	            m[k] = m1[k];
	        }
	        for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	            var k = _c[_b];
	            m[k] = m2[k];
	        }
	        return m;
	    };
	    StringMapWrapper.equals = function (m1, m2) {
	        var k1 = Object.keys(m1);
	        var k2 = Object.keys(m2);
	        if (k1.length !== k2.length) {
	            return false;
	        }
	        var key;
	        for (var i = 0; i < k1.length; i++) {
	            key = k1[i];
	            if (m1[key] !== m2[key]) {
	                return false;
	            }
	        }
	        return true;
	    };
	    return StringMapWrapper;
	}());
	exports.StringMapWrapper = StringMapWrapper;
	var CAMEL_CASE_REGEXP = /([A-Z])/g;
	var DASH_CASE_REGEXP = /-([a-z])/g;
	function replaceAllMapped(s, from, cb) {
	    return s.replace(from, function () {
	        var matches = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            matches[_i - 0] = arguments[_i];
	        }
	        matches.splice(-2, 2);
	        return cb(matches);
	    });
	}
	function camelCaseToDashCase(input) {
	    return replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) { return '-' + m[1].toLowerCase(); });
	}
	exports.camelCaseToDashCase = camelCaseToDashCase;
	function dashCaseToCamelCase(input) {
	    return replaceAllMapped(input, DASH_CASE_REGEXP, function (m) { return m[1].toUpperCase(); });
	}
	exports.dashCaseToCamelCase = dashCaseToCamelCase;
	function stringify(token) {
	    if (typeof token === 'string') {
	        return token;
	    }
	    if (token === undefined || token === null) {
	        return '' + token;
	    }
	    if (token.overriddenName) {
	        return token.overriddenName;
	    }
	    if (token.name) {
	        return token.name;
	    }
	    var res = token.toString();
	    var newLineIndex = res.indexOf('\n');
	    return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);
	}
	exports.stringify = stringify;
	exports.listContains = function (list, el) { return list.indexOf(el) !== -1; };
	function stringMapForEach(map, callback) {
	    for (var prop in map) {
	        if (map.hasOwnProperty(prop)) {
	            callback(map[prop], prop);
	        }
	    }
	}
	exports.stringMapForEach = stringMapForEach;
	exports.isSuccess = (function (status) { return (status >= 200 && status < 300); });
	function _randomChar() {
	    return String.fromCharCode(97 + Math.floor(Math.random() * 25));
	}
	exports._randomChar = _randomChar;
	function _appIdRandomProviderFactory() {
	    return "" + _randomChar() + _randomChar() + _randomChar();
	}
	exports._appIdRandomProviderFactory = _appIdRandomProviderFactory;
	function arrayFlattenTree(children, arr) {
	    for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
	        var child = children_1[_i];
	        if (Array.isArray(child)) {
	            arrayFlattenTree(child, arr);
	        }
	        else {
	            arr.push(child);
	        }
	    }
	    return arr;
	}
	exports.arrayFlattenTree = arrayFlattenTree;
	var __empty = null;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = __empty;
	//# sourceMappingURL=helper.js.map

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var get_dom_1 = __webpack_require__(296);
	var parse5 = __webpack_require__(299);
	var treeAdapter = parse5.treeAdapters.htmlparser2;
	function isTag(tagName, node) {
	    return node.type === 'tag' && node.name === tagName;
	}
	exports.isTag = isTag;
	function parseFragment(el) {
	    return parse5.parseFragment(el, { treeAdapter: parse5.treeAdapters.htmlparser2 });
	}
	exports.parseFragment = parseFragment;
	function parseDocument(documentHtml) {
	    if (documentHtml === undefined) {
	        throw new Error('parseDocument requires a document string');
	    }
	    if (typeof documentHtml !== 'string') {
	        throw new Error('parseDocument needs to be a string to be parsed correctly');
	    }
	    var doc = parse5.parse(documentHtml, { treeAdapter: parse5.treeAdapters.htmlparser2 });
	    var rootNode = undefined;
	    var bodyNode = undefined;
	    var headNode = undefined;
	    var titleNode = undefined;
	    for (var i = 0; i < doc.childNodes.length; ++i) {
	        var child = doc.childNodes[i];
	        if (isTag('html', child)) {
	            rootNode = child;
	            break;
	        }
	    }
	    if (!rootNode) {
	        rootNode = doc;
	    }
	    for (var i = 0; i < rootNode.childNodes.length; ++i) {
	        var child = rootNode.childNodes[i];
	        if (isTag('head', child)) {
	            headNode = child;
	        }
	        if (isTag('body', child)) {
	            bodyNode = child;
	        }
	    }
	    if (!headNode) {
	        headNode = treeAdapter.createElement('head', null, []);
	        get_dom_1.getDOM().appendChild(doc, headNode);
	    }
	    if (!bodyNode) {
	        bodyNode = treeAdapter.createElement('body', null, []);
	        get_dom_1.getDOM().appendChild(doc, bodyNode);
	    }
	    for (var i = 0; i < headNode.childNodes.length; ++i) {
	        if (isTag('title', headNode.childNodes[i])) {
	            titleNode = headNode.childNodes[i];
	            break;
	        }
	    }
	    if (!titleNode) {
	        titleNode = treeAdapter.createElement('title', null, []);
	        get_dom_1.getDOM().appendChild(headNode, titleNode);
	    }
	    doc._window = {};
	    doc.head = headNode;
	    doc.body = bodyNode;
	    var titleNodeText = titleNode.childNodes[0];
	    Object.defineProperty(doc, 'title', {
	        get: function () { return titleNodeText.data; },
	        set: function (newTitle) { return titleNodeText.data = newTitle; }
	    });
	    return doc;
	}
	exports.parseDocument = parseDocument;
	function serializeDocument(document, pretty) {
	    var doc = parse5.serialize(document, { treeAdapter: parse5.treeAdapters.htmlparser2 });
	    if (pretty) {
	        var beautify = __webpack_require__(323);
	        return beautify.html(doc, { indent_size: 2 });
	    }
	    return doc;
	}
	exports.serializeDocument = serializeDocument;
	//# sourceMappingURL=node-document.js.map

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Parser = __webpack_require__(300),
	    Serializer = __webpack_require__(314);
	
	/** @namespace parse5 */
	
	/**
	 * Parses an HTML string.
	 * @function parse
	 * @memberof parse5
	 * @instance
	 * @param {string} html - Input HTML string.
	 * @param {ParserOptions} [options] - Parsing options.
	 * @returns {ASTNode<Document>} document
	 * @example
	 * var parse5 = require('parse5');
	 *
	 * var document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');
	 */
	exports.parse = function parse(html, options) {
	    var parser = new Parser(options);
	
	    return parser.parse(html);
	};
	
	/**
	 * Parses an HTML fragment.
	 * @function parseFragment
	 * @memberof parse5
	 * @instance
	 * @param {ASTNode} [fragmentContext] - Parsing context element. If specified, given fragment
	 * will be parsed as if it was set to the context element's `innerHTML` property.
	 * @param {string} html - Input HTML fragment string.
	 * @param {ParserOptions} [options] - Parsing options.
	 * @returns {ASTNode<DocumentFragment>} documentFragment
	 * @example
	 * var parse5 = require('parse5');
	 *
	 * var documentFragment = parse5.parseFragment('<table></table>');
	 *
	 * // Parses the html fragment in the context of the parsed <table> element.
	 * var trFragment = parser.parseFragment(documentFragment.childNodes[0], '<tr><td>Shake it, baby</td></tr>');
	 */
	exports.parseFragment = function parseFragment(fragmentContext, html, options) {
	    if (typeof fragmentContext === 'string') {
	        options = html;
	        html = fragmentContext;
	        fragmentContext = null;
	    }
	
	    var parser = new Parser(options);
	
	    return parser.parseFragment(html, fragmentContext);
	};
	
	/**
	 * Serializes an AST node to an HTML string.
	 * @function serialize
	 * @memberof parse5
	 * @instance
	 * @param {ASTNode} node - Node to serialize.
	 * @param {SerializerOptions} [options] - Serialization options.
	 * @returns {String} html
	 * @example
	 * var parse5 = require('parse5');
	 *
	 * var document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');
	 *
	 * // Serializes a document.
	 * var html = parse5.serialize(document);
	 *
	 * // Serializes the <body> element content.
	 * var bodyInnerHtml = parse5.serialize(document.childNodes[0].childNodes[1]);
	 */
	exports.serialize = function (node, options) {
	    var serializer = new Serializer(node, options);
	
	    return serializer.serialize();
	};
	
	/**
	 * Provides built-in tree adapters that can be used for parsing and serialization.
	 * @var treeAdapters
	 * @memberof parse5
	 * @instance
	 * @property {TreeAdapter} default - Default tree format for parse5.
	 * @property {TreeAdapter} htmlparser2 - Quite popular [htmlparser2](https://github.com/fb55/htmlparser2) tree format
	 * (e.g. used by [cheerio](https://github.com/MatthewMueller/cheerio) and [jsdom](https://github.com/tmpvar/jsdom)).
	 * @example
	 * var parse5 = require('parse5');
	 *
	 * // Uses the default tree adapter for parsing.
	 * var document = parse5.parse('<div></div>', { treeAdapter: parse5.treeAdapters.default });
	 *
	 * // Uses the htmlparser2 tree adapter with the SerializerStream.
	 * var serializer = new parse5.SerializerStream(node, { treeAdapter: parse5.treeAdapters.htmlparser2 });
	 */
	exports.treeAdapters = {
	    default: __webpack_require__(310),
	    htmlparser2: __webpack_require__(315)
	};
	
	
	// Streaming
	exports.ParserStream = __webpack_require__(316);
	exports.SerializerStream = __webpack_require__(319);
	exports.SAXParser = __webpack_require__(320);


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Tokenizer = __webpack_require__(301),
	    OpenElementStack = __webpack_require__(306),
	    FormattingElementList = __webpack_require__(308),
	    locationInfoMixin = __webpack_require__(309),
	    defaultTreeAdapter = __webpack_require__(310),
	    doctype = __webpack_require__(311),
	    foreignContent = __webpack_require__(312),
	    mergeOptions = __webpack_require__(313),
	    UNICODE = __webpack_require__(303),
	    HTML = __webpack_require__(307);
	
	//Aliases
	var $ = HTML.TAG_NAMES,
	    NS = HTML.NAMESPACES,
	    ATTRS = HTML.ATTRS;
	
	/**
	 * @typedef {Object} ParserOptions
	 *
	 * @property {Boolean} [locationInfo=false] - Enables source code location information for the nodes.
	 * When enabled, each node (except root node) has the `__location` property. In case the node is not an empty element,
	 * `__location` will be {@link ElementLocationInfo} object, otherwise it's {@link LocationInfo}.
	 * If the element was implicitly created by the parser it's `__location` property will be `null`.
	 *
	 * @property {TreeAdapter} [treeAdapter=parse5.treeAdapters.default] - Specifies the resulting tree format.
	 */
	var DEFAULT_OPTIONS = {
	    locationInfo: false,
	    treeAdapter: defaultTreeAdapter
	};
	
	//Misc constants
	var HIDDEN_INPUT_TYPE = 'hidden';
	
	//Adoption agency loops iteration count
	var AA_OUTER_LOOP_ITER = 8,
	    AA_INNER_LOOP_ITER = 3;
	
	//Insertion modes
	var INITIAL_MODE = 'INITIAL_MODE',
	    BEFORE_HTML_MODE = 'BEFORE_HTML_MODE',
	    BEFORE_HEAD_MODE = 'BEFORE_HEAD_MODE',
	    IN_HEAD_MODE = 'IN_HEAD_MODE',
	    AFTER_HEAD_MODE = 'AFTER_HEAD_MODE',
	    IN_BODY_MODE = 'IN_BODY_MODE',
	    TEXT_MODE = 'TEXT_MODE',
	    IN_TABLE_MODE = 'IN_TABLE_MODE',
	    IN_TABLE_TEXT_MODE = 'IN_TABLE_TEXT_MODE',
	    IN_CAPTION_MODE = 'IN_CAPTION_MODE',
	    IN_COLUMN_GROUP_MODE = 'IN_COLUMN_GROUP_MODE',
	    IN_TABLE_BODY_MODE = 'IN_TABLE_BODY_MODE',
	    IN_ROW_MODE = 'IN_ROW_MODE',
	    IN_CELL_MODE = 'IN_CELL_MODE',
	    IN_SELECT_MODE = 'IN_SELECT_MODE',
	    IN_SELECT_IN_TABLE_MODE = 'IN_SELECT_IN_TABLE_MODE',
	    IN_TEMPLATE_MODE = 'IN_TEMPLATE_MODE',
	    AFTER_BODY_MODE = 'AFTER_BODY_MODE',
	    IN_FRAMESET_MODE = 'IN_FRAMESET_MODE',
	    AFTER_FRAMESET_MODE = 'AFTER_FRAMESET_MODE',
	    AFTER_AFTER_BODY_MODE = 'AFTER_AFTER_BODY_MODE',
	    AFTER_AFTER_FRAMESET_MODE = 'AFTER_AFTER_FRAMESET_MODE';
	
	//Insertion mode reset map
	var INSERTION_MODE_RESET_MAP = {};
	
	INSERTION_MODE_RESET_MAP[$.TR] = IN_ROW_MODE;
	INSERTION_MODE_RESET_MAP[$.TBODY] =
	INSERTION_MODE_RESET_MAP[$.THEAD] =
	INSERTION_MODE_RESET_MAP[$.TFOOT] = IN_TABLE_BODY_MODE;
	INSERTION_MODE_RESET_MAP[$.CAPTION] = IN_CAPTION_MODE;
	INSERTION_MODE_RESET_MAP[$.COLGROUP] = IN_COLUMN_GROUP_MODE;
	INSERTION_MODE_RESET_MAP[$.TABLE] = IN_TABLE_MODE;
	INSERTION_MODE_RESET_MAP[$.BODY] = IN_BODY_MODE;
	INSERTION_MODE_RESET_MAP[$.FRAMESET] = IN_FRAMESET_MODE;
	
	//Template insertion mode switch map
	var TEMPLATE_INSERTION_MODE_SWITCH_MAP = {};
	
	TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.CAPTION] =
	TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.COLGROUP] =
	TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TBODY] =
	TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TFOOT] =
	TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.THEAD] = IN_TABLE_MODE;
	TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.COL] = IN_COLUMN_GROUP_MODE;
	TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TR] = IN_TABLE_BODY_MODE;
	TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TD] =
	TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TH] = IN_ROW_MODE;
	
	//Token handlers map for insertion modes
	var _ = {};
	
	_[INITIAL_MODE] = {};
	_[INITIAL_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[INITIAL_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInInitialMode;
	_[INITIAL_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
	_[INITIAL_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[INITIAL_MODE][Tokenizer.DOCTYPE_TOKEN] = doctypeInInitialMode;
	_[INITIAL_MODE][Tokenizer.START_TAG_TOKEN] =
	_[INITIAL_MODE][Tokenizer.END_TAG_TOKEN] =
	_[INITIAL_MODE][Tokenizer.EOF_TOKEN] = tokenInInitialMode;
	
	_[BEFORE_HTML_MODE] = {};
	_[BEFORE_HTML_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[BEFORE_HTML_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenBeforeHtml;
	_[BEFORE_HTML_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
	_[BEFORE_HTML_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[BEFORE_HTML_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[BEFORE_HTML_MODE][Tokenizer.START_TAG_TOKEN] = startTagBeforeHtml;
	_[BEFORE_HTML_MODE][Tokenizer.END_TAG_TOKEN] = endTagBeforeHtml;
	_[BEFORE_HTML_MODE][Tokenizer.EOF_TOKEN] = tokenBeforeHtml;
	
	_[BEFORE_HEAD_MODE] = {};
	_[BEFORE_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[BEFORE_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenBeforeHead;
	_[BEFORE_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
	_[BEFORE_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[BEFORE_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[BEFORE_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagBeforeHead;
	_[BEFORE_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagBeforeHead;
	_[BEFORE_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenBeforeHead;
	
	_[IN_HEAD_MODE] = {};
	_[IN_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[IN_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInHead;
	_[IN_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
	_[IN_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagInHead;
	_[IN_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagInHead;
	_[IN_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenInHead;
	
	_[AFTER_HEAD_MODE] = {};
	_[AFTER_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[AFTER_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterHead;
	_[AFTER_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
	_[AFTER_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[AFTER_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[AFTER_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterHead;
	_[AFTER_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterHead;
	_[AFTER_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenAfterHead;
	
	_[IN_BODY_MODE] = {};
	_[IN_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
	_[IN_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[IN_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
	_[IN_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagInBody;
	_[IN_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagInBody;
	_[IN_BODY_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
	
	_[TEXT_MODE] = {};
	_[TEXT_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[TEXT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] =
	_[TEXT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
	_[TEXT_MODE][Tokenizer.COMMENT_TOKEN] =
	_[TEXT_MODE][Tokenizer.DOCTYPE_TOKEN] =
	_[TEXT_MODE][Tokenizer.START_TAG_TOKEN] = ignoreToken;
	_[TEXT_MODE][Tokenizer.END_TAG_TOKEN] = endTagInText;
	_[TEXT_MODE][Tokenizer.EOF_TOKEN] = eofInText;
	
	_[IN_TABLE_MODE] = {};
	_[IN_TABLE_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[IN_TABLE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] =
	_[IN_TABLE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
	_[IN_TABLE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_TABLE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_TABLE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTable;
	_[IN_TABLE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTable;
	_[IN_TABLE_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
	
	_[IN_TABLE_TEXT_MODE] = {};
	_[IN_TABLE_TEXT_MODE][Tokenizer.CHARACTER_TOKEN] = characterInTableText;
	_[IN_TABLE_TEXT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[IN_TABLE_TEXT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInTableText;
	_[IN_TABLE_TEXT_MODE][Tokenizer.COMMENT_TOKEN] =
	_[IN_TABLE_TEXT_MODE][Tokenizer.DOCTYPE_TOKEN] =
	_[IN_TABLE_TEXT_MODE][Tokenizer.START_TAG_TOKEN] =
	_[IN_TABLE_TEXT_MODE][Tokenizer.END_TAG_TOKEN] =
	_[IN_TABLE_TEXT_MODE][Tokenizer.EOF_TOKEN] = tokenInTableText;
	
	_[IN_CAPTION_MODE] = {};
	_[IN_CAPTION_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
	_[IN_CAPTION_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[IN_CAPTION_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
	_[IN_CAPTION_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_CAPTION_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_CAPTION_MODE][Tokenizer.START_TAG_TOKEN] = startTagInCaption;
	_[IN_CAPTION_MODE][Tokenizer.END_TAG_TOKEN] = endTagInCaption;
	_[IN_CAPTION_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
	
	_[IN_COLUMN_GROUP_MODE] = {};
	_[IN_COLUMN_GROUP_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[IN_COLUMN_GROUP_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInColumnGroup;
	_[IN_COLUMN_GROUP_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
	_[IN_COLUMN_GROUP_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_COLUMN_GROUP_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_COLUMN_GROUP_MODE][Tokenizer.START_TAG_TOKEN] = startTagInColumnGroup;
	_[IN_COLUMN_GROUP_MODE][Tokenizer.END_TAG_TOKEN] = endTagInColumnGroup;
	_[IN_COLUMN_GROUP_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
	
	_[IN_TABLE_BODY_MODE] = {};
	_[IN_TABLE_BODY_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[IN_TABLE_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] =
	_[IN_TABLE_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
	_[IN_TABLE_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_TABLE_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_TABLE_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTableBody;
	_[IN_TABLE_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTableBody;
	_[IN_TABLE_BODY_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
	
	_[IN_ROW_MODE] = {};
	_[IN_ROW_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[IN_ROW_MODE][Tokenizer.NULL_CHARACTER_TOKEN] =
	_[IN_ROW_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
	_[IN_ROW_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_ROW_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_ROW_MODE][Tokenizer.START_TAG_TOKEN] = startTagInRow;
	_[IN_ROW_MODE][Tokenizer.END_TAG_TOKEN] = endTagInRow;
	_[IN_ROW_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
	
	_[IN_CELL_MODE] = {};
	_[IN_CELL_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
	_[IN_CELL_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[IN_CELL_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
	_[IN_CELL_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_CELL_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_CELL_MODE][Tokenizer.START_TAG_TOKEN] = startTagInCell;
	_[IN_CELL_MODE][Tokenizer.END_TAG_TOKEN] = endTagInCell;
	_[IN_CELL_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
	
	_[IN_SELECT_MODE] = {};
	_[IN_SELECT_MODE][Tokenizer.CHARACTER_TOKEN] = insertCharacters;
	_[IN_SELECT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[IN_SELECT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
	_[IN_SELECT_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_SELECT_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_SELECT_MODE][Tokenizer.START_TAG_TOKEN] = startTagInSelect;
	_[IN_SELECT_MODE][Tokenizer.END_TAG_TOKEN] = endTagInSelect;
	_[IN_SELECT_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
	
	_[IN_SELECT_IN_TABLE_MODE] = {};
	_[IN_SELECT_IN_TABLE_MODE][Tokenizer.CHARACTER_TOKEN] = insertCharacters;
	_[IN_SELECT_IN_TABLE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[IN_SELECT_IN_TABLE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
	_[IN_SELECT_IN_TABLE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_SELECT_IN_TABLE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_SELECT_IN_TABLE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInSelectInTable;
	_[IN_SELECT_IN_TABLE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInSelectInTable;
	_[IN_SELECT_IN_TABLE_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
	
	_[IN_TEMPLATE_MODE] = {};
	_[IN_TEMPLATE_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
	_[IN_TEMPLATE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[IN_TEMPLATE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
	_[IN_TEMPLATE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_TEMPLATE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_TEMPLATE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTemplate;
	_[IN_TEMPLATE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTemplate;
	_[IN_TEMPLATE_MODE][Tokenizer.EOF_TOKEN] = eofInTemplate;
	
	_[AFTER_BODY_MODE] = {};
	_[AFTER_BODY_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[AFTER_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterBody;
	_[AFTER_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
	_[AFTER_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToRootHtmlElement;
	_[AFTER_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[AFTER_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterBody;
	_[AFTER_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterBody;
	_[AFTER_BODY_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
	
	_[IN_FRAMESET_MODE] = {};
	_[IN_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[IN_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[IN_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
	_[IN_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagInFrameset;
	_[IN_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = endTagInFrameset;
	_[IN_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
	
	_[AFTER_FRAMESET_MODE] = {};
	_[AFTER_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[AFTER_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[AFTER_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
	_[AFTER_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[AFTER_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[AFTER_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterFrameset;
	_[AFTER_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterFrameset;
	_[AFTER_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
	
	_[AFTER_AFTER_BODY_MODE] = {};
	_[AFTER_AFTER_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = tokenAfterAfterBody;
	_[AFTER_AFTER_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterAfterBody;
	_[AFTER_AFTER_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
	_[AFTER_AFTER_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToDocument;
	_[AFTER_AFTER_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[AFTER_AFTER_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterAfterBody;
	_[AFTER_AFTER_BODY_MODE][Tokenizer.END_TAG_TOKEN] = tokenAfterAfterBody;
	_[AFTER_AFTER_BODY_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
	
	_[AFTER_AFTER_FRAMESET_MODE] = {};
	_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
	_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToDocument;
	_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterAfterFrameset;
	_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = ignoreToken;
	_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
	
	
	//Parser
	var Parser = module.exports = function (options) {
	    this.options = mergeOptions(DEFAULT_OPTIONS, options);
	
	    this.treeAdapter = this.options.treeAdapter;
	    this.pendingScript = null;
	
	    if (this.options.locationInfo)
	        locationInfoMixin.assign(this);
	};
	
	// API
	Parser.prototype.parse = function (html) {
	    var document = this.treeAdapter.createDocument();
	
	    this._bootstrap(document, null);
	    this.tokenizer.write(html, true);
	    this._runParsingLoop(null, null);
	
	    return document;
	};
	
	Parser.prototype.parseFragment = function (html, fragmentContext) {
	    //NOTE: use <template> element as a fragment context if context element was not provided,
	    //so we will parse in "forgiving" manner
	    if (!fragmentContext)
	        fragmentContext = this.treeAdapter.createElement($.TEMPLATE, NS.HTML, []);
	
	    //NOTE: create fake element which will be used as 'document' for fragment parsing.
	    //This is important for jsdom there 'document' can't be recreated, therefore
	    //fragment parsing causes messing of the main `document`.
	    var documentMock = this.treeAdapter.createElement('documentmock', NS.HTML, []);
	
	    this._bootstrap(documentMock, fragmentContext);
	
	    if (this.treeAdapter.getTagName(fragmentContext) === $.TEMPLATE)
	        this._pushTmplInsertionMode(IN_TEMPLATE_MODE);
	
	    this._initTokenizerForFragmentParsing();
	    this._insertFakeRootElement();
	    this._resetInsertionMode();
	    this._findFormInFragmentContext();
	    this.tokenizer.write(html, true);
	    this._runParsingLoop(null, null);
	
	    var rootElement = this.treeAdapter.getFirstChild(documentMock),
	        fragment = this.treeAdapter.createDocumentFragment();
	
	    this._adoptNodes(rootElement, fragment);
	
	    return fragment;
	};
	
	//Bootstrap parser
	Parser.prototype._bootstrap = function (document, fragmentContext) {
	    this.tokenizer = new Tokenizer(this.options);
	
	    this.stopped = false;
	
	    this.insertionMode = INITIAL_MODE;
	    this.originalInsertionMode = '';
	
	    this.document = document;
	    this.fragmentContext = fragmentContext;
	
	    this.headElement = null;
	    this.formElement = null;
	
	    this.openElements = new OpenElementStack(this.document, this.treeAdapter);
	    this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
	
	    this.tmplInsertionModeStack = [];
	    this.tmplInsertionModeStackTop = -1;
	    this.currentTmplInsertionMode = null;
	
	    this.pendingCharacterTokens = [];
	    this.hasNonWhitespacePendingCharacterToken = false;
	
	    this.framesetOk = true;
	    this.skipNextNewLine = false;
	    this.fosterParentingEnabled = false;
	};
	
	//Parsing loop
	Parser.prototype._runParsingLoop = function (writeCallback, scriptHandler) {
	    while (!this.stopped) {
	        this._setupTokenizerCDATAMode();
	
	        var token = this.tokenizer.getNextToken();
	
	        if (token.type === Tokenizer.HIBERNATION_TOKEN)
	            break;
	
	        if (this.skipNextNewLine) {
	            this.skipNextNewLine = false;
	
	            if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === '\n') {
	                if (token.chars.length === 1)
	                    continue;
	
	                token.chars = token.chars.substr(1);
	            }
	        }
	
	        this._processInputToken(token);
	
	        if (scriptHandler && this.pendingScript)
	            break;
	    }
	
	    if (scriptHandler && this.pendingScript) {
	        var script = this.pendingScript;
	
	        this.pendingScript = null;
	
	        scriptHandler(script);
	
	        return;
	    }
	
	    if (writeCallback)
	        writeCallback();
	};
	
	//Text parsing
	Parser.prototype._setupTokenizerCDATAMode = function () {
	    var current = this._getAdjustedCurrentElement();
	
	    this.tokenizer.allowCDATA = current && current !== this.document &&
	                                this.treeAdapter.getNamespaceURI(current) !== NS.HTML &&
	                                !this._isIntegrationPoint(current);
	};
	
	Parser.prototype._switchToTextParsing = function (currentToken, nextTokenizerState) {
	    this._insertElement(currentToken, NS.HTML);
	    this.tokenizer.state = nextTokenizerState;
	    this.originalInsertionMode = this.insertionMode;
	    this.insertionMode = TEXT_MODE;
	};
	
	//Fragment parsing
	Parser.prototype._getAdjustedCurrentElement = function () {
	    return this.openElements.stackTop === 0 && this.fragmentContext ?
	           this.fragmentContext :
	           this.openElements.current;
	};
	
	Parser.prototype._findFormInFragmentContext = function () {
	    var node = this.fragmentContext;
	
	    do {
	        if (this.treeAdapter.getTagName(node) === $.FORM) {
	            this.formElement = node;
	            break;
	        }
	
	        node = this.treeAdapter.getParentNode(node);
	    } while (node);
	};
	
	Parser.prototype._initTokenizerForFragmentParsing = function () {
	    if (this.treeAdapter.getNamespaceURI(this.fragmentContext) === NS.HTML) {
	        var tn = this.treeAdapter.getTagName(this.fragmentContext);
	
	        if (tn === $.TITLE || tn === $.TEXTAREA)
	            this.tokenizer.state = Tokenizer.MODE.RCDATA;
	
	        else if (tn === $.STYLE || tn === $.XMP || tn === $.IFRAME ||
	                 tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT)
	            this.tokenizer.state = Tokenizer.MODE.RAWTEXT;
	
	        else if (tn === $.SCRIPT)
	            this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;
	
	        else if (tn === $.PLAINTEXT)
	            this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
	    }
	};
	
	//Tree mutation
	Parser.prototype._setDocumentType = function (token) {
	    this.treeAdapter.setDocumentType(this.document, token.name, token.publicId, token.systemId);
	};
	
	Parser.prototype._attachElementToTree = function (element) {
	    if (this._shouldFosterParentOnInsertion())
	        this._fosterParentElement(element);
	
	    else {
	        var parent = this.openElements.currentTmplContent || this.openElements.current;
	
	        this.treeAdapter.appendChild(parent, element);
	    }
	};
	
	Parser.prototype._appendElement = function (token, namespaceURI) {
	    var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
	
	    this._attachElementToTree(element);
	};
	
	Parser.prototype._insertElement = function (token, namespaceURI) {
	    var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
	
	    this._attachElementToTree(element);
	    this.openElements.push(element);
	};
	
	Parser.prototype._insertFakeElement = function (tagName) {
	    var element = this.treeAdapter.createElement(tagName, NS.HTML, []);
	
	    this._attachElementToTree(element);
	    this.openElements.push(element);
	};
	
	Parser.prototype._insertTemplate = function (token) {
	    var tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs),
	        content = this.treeAdapter.createDocumentFragment();
	
	    this.treeAdapter.setTemplateContent(tmpl, content);
	    this._attachElementToTree(tmpl);
	    this.openElements.push(tmpl);
	};
	
	Parser.prototype._insertFakeRootElement = function () {
	    var element = this.treeAdapter.createElement($.HTML, NS.HTML, []);
	
	    this.treeAdapter.appendChild(this.openElements.current, element);
	    this.openElements.push(element);
	};
	
	Parser.prototype._appendCommentNode = function (token, parent) {
	    var commentNode = this.treeAdapter.createCommentNode(token.data);
	
	    this.treeAdapter.appendChild(parent, commentNode);
	};
	
	Parser.prototype._insertCharacters = function (token) {
	    if (this._shouldFosterParentOnInsertion())
	        this._fosterParentText(token.chars);
	
	    else {
	        var parent = this.openElements.currentTmplContent || this.openElements.current;
	
	        this.treeAdapter.insertText(parent, token.chars);
	    }
	};
	
	Parser.prototype._adoptNodes = function (donor, recipient) {
	    while (true) {
	        var child = this.treeAdapter.getFirstChild(donor);
	
	        if (!child)
	            break;
	
	        this.treeAdapter.detachNode(child);
	        this.treeAdapter.appendChild(recipient, child);
	    }
	};
	
	//Token processing
	Parser.prototype._shouldProcessTokenInForeignContent = function (token) {
	    var current = this._getAdjustedCurrentElement();
	
	    if (!current || current === this.document)
	        return false;
	
	    var ns = this.treeAdapter.getNamespaceURI(current);
	
	    if (ns === NS.HTML)
	        return false;
	
	    if (this.treeAdapter.getTagName(current) === $.ANNOTATION_XML && ns === NS.MATHML &&
	        token.type === Tokenizer.START_TAG_TOKEN && token.tagName === $.SVG)
	        return false;
	
	    var isCharacterToken = token.type === Tokenizer.CHARACTER_TOKEN ||
	                           token.type === Tokenizer.NULL_CHARACTER_TOKEN ||
	                           token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN,
	        isMathMLTextStartTag = token.type === Tokenizer.START_TAG_TOKEN &&
	                               token.tagName !== $.MGLYPH &&
	                               token.tagName !== $.MALIGNMARK;
	
	    if ((isMathMLTextStartTag || isCharacterToken) && this._isIntegrationPoint(current, NS.MATHML))
	        return false;
	
	    if ((token.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) && this._isIntegrationPoint(current, NS.HTML))
	        return false;
	
	    return token.type !== Tokenizer.EOF_TOKEN;
	};
	
	Parser.prototype._processToken = function (token) {
	    _[this.insertionMode][token.type](this, token);
	};
	
	Parser.prototype._processTokenInBodyMode = function (token) {
	    _[IN_BODY_MODE][token.type](this, token);
	};
	
	Parser.prototype._processTokenInForeignContent = function (token) {
	    if (token.type === Tokenizer.CHARACTER_TOKEN)
	        characterInForeignContent(this, token);
	
	    else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN)
	        nullCharacterInForeignContent(this, token);
	
	    else if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN)
	        insertCharacters(this, token);
	
	    else if (token.type === Tokenizer.COMMENT_TOKEN)
	        appendComment(this, token);
	
	    else if (token.type === Tokenizer.START_TAG_TOKEN)
	        startTagInForeignContent(this, token);
	
	    else if (token.type === Tokenizer.END_TAG_TOKEN)
	        endTagInForeignContent(this, token);
	};
	
	Parser.prototype._processInputToken = function (token) {
	    if (this._shouldProcessTokenInForeignContent(token))
	        this._processTokenInForeignContent(token);
	
	    else
	        this._processToken(token);
	};
	
	//Integration points
	Parser.prototype._isIntegrationPoint = function (element, foreignNS) {
	    var tn = this.treeAdapter.getTagName(element),
	        ns = this.treeAdapter.getNamespaceURI(element),
	        attrs = this.treeAdapter.getAttrList(element);
	
	    return foreignContent.isIntegrationPoint(tn, ns, attrs, foreignNS);
	};
	
	//Active formatting elements reconstruction
	Parser.prototype._reconstructActiveFormattingElements = function () {
	    var listLength = this.activeFormattingElements.length;
	
	    if (listLength) {
	        var unopenIdx = listLength,
	            entry = null;
	
	        do {
	            unopenIdx--;
	            entry = this.activeFormattingElements.entries[unopenIdx];
	
	            if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {
	                unopenIdx++;
	                break;
	            }
	        } while (unopenIdx > 0);
	
	        for (var i = unopenIdx; i < listLength; i++) {
	            entry = this.activeFormattingElements.entries[i];
	            this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
	            entry.element = this.openElements.current;
	        }
	    }
	};
	
	//Close elements
	Parser.prototype._closeTableCell = function () {
	    this.openElements.generateImpliedEndTags();
	    this.openElements.popUntilTableCellPopped();
	    this.activeFormattingElements.clearToLastMarker();
	    this.insertionMode = IN_ROW_MODE;
	};
	
	Parser.prototype._closePElement = function () {
	    this.openElements.generateImpliedEndTagsWithExclusion($.P);
	    this.openElements.popUntilTagNamePopped($.P);
	};
	
	//Insertion modes
	Parser.prototype._resetInsertionMode = function () {
	    for (var i = this.openElements.stackTop, last = false; i >= 0; i--) {
	        var element = this.openElements.items[i];
	
	        if (i === 0) {
	            last = true;
	
	            if (this.fragmentContext)
	                element = this.fragmentContext;
	        }
	
	        var tn = this.treeAdapter.getTagName(element),
	            newInsertionMode = INSERTION_MODE_RESET_MAP[tn];
	
	        if (newInsertionMode) {
	            this.insertionMode = newInsertionMode;
	            break;
	        }
	
	        else if (!last && (tn === $.TD || tn === $.TH)) {
	            this.insertionMode = IN_CELL_MODE;
	            break;
	        }
	
	        else if (!last && tn === $.HEAD) {
	            this.insertionMode = IN_HEAD_MODE;
	            break;
	        }
	
	        else if (tn === $.SELECT) {
	            this._resetInsertionModeForSelect(i);
	            break;
	        }
	
	        else if (tn === $.TEMPLATE) {
	            this.insertionMode = this.currentTmplInsertionMode;
	            break;
	        }
	
	        else if (tn === $.HTML) {
	            this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;
	            break;
	        }
	
	        else if (last) {
	            this.insertionMode = IN_BODY_MODE;
	            break;
	        }
	    }
	};
	
	Parser.prototype._resetInsertionModeForSelect = function (selectIdx) {
	    if (selectIdx > 0) {
	        for (var i = selectIdx - 1; i > 0; i--) {
	            var ancestor = this.openElements.items[i],
	                tn = this.treeAdapter.getTagName(ancestor);
	
	            if (tn === $.TEMPLATE)
	                break;
	
	            else if (tn === $.TABLE) {
	                this.insertionMode = IN_SELECT_IN_TABLE_MODE;
	                return;
	            }
	        }
	    }
	
	    this.insertionMode = IN_SELECT_MODE;
	};
	
	Parser.prototype._pushTmplInsertionMode = function (mode) {
	    this.tmplInsertionModeStack.push(mode);
	    this.tmplInsertionModeStackTop++;
	    this.currentTmplInsertionMode = mode;
	};
	
	Parser.prototype._popTmplInsertionMode = function () {
	    this.tmplInsertionModeStack.pop();
	    this.tmplInsertionModeStackTop--;
	    this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];
	};
	
	//Foster parenting
	Parser.prototype._isElementCausesFosterParenting = function (element) {
	    var tn = this.treeAdapter.getTagName(element);
	
	    return tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR;
	};
	
	Parser.prototype._shouldFosterParentOnInsertion = function () {
	    return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current);
	};
	
	Parser.prototype._findFosterParentingLocation = function () {
	    var location = {
	        parent: null,
	        beforeElement: null
	    };
	
	    for (var i = this.openElements.stackTop; i >= 0; i--) {
	        var openElement = this.openElements.items[i],
	            tn = this.treeAdapter.getTagName(openElement),
	            ns = this.treeAdapter.getNamespaceURI(openElement);
	
	        if (tn === $.TEMPLATE && ns === NS.HTML) {
	            location.parent = this.treeAdapter.getTemplateContent(openElement);
	            break;
	        }
	
	        else if (tn === $.TABLE) {
	            location.parent = this.treeAdapter.getParentNode(openElement);
	
	            if (location.parent)
	                location.beforeElement = openElement;
	            else
	                location.parent = this.openElements.items[i - 1];
	
	            break;
	        }
	    }
	
	    if (!location.parent)
	        location.parent = this.openElements.items[0];
	
	    return location;
	};
	
	Parser.prototype._fosterParentElement = function (element) {
	    var location = this._findFosterParentingLocation();
	
	    if (location.beforeElement)
	        this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);
	    else
	        this.treeAdapter.appendChild(location.parent, element);
	};
	
	Parser.prototype._fosterParentText = function (chars) {
	    var location = this._findFosterParentingLocation();
	
	    if (location.beforeElement)
	        this.treeAdapter.insertTextBefore(location.parent, chars, location.beforeElement);
	    else
	        this.treeAdapter.insertText(location.parent, chars);
	};
	
	//Special elements
	Parser.prototype._isSpecialElement = function (element) {
	    var tn = this.treeAdapter.getTagName(element),
	        ns = this.treeAdapter.getNamespaceURI(element);
	
	    return HTML.SPECIAL_ELEMENTS[ns][tn];
	};
	
	//Adoption agency algorithm
	//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)
	//------------------------------------------------------------------
	
	//Steps 5-8 of the algorithm
	function aaObtainFormattingElementEntry(p, token) {
	    var formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);
	
	    if (formattingElementEntry) {
	        if (!p.openElements.contains(formattingElementEntry.element)) {
	            p.activeFormattingElements.removeEntry(formattingElementEntry);
	            formattingElementEntry = null;
	        }
	
	        else if (!p.openElements.hasInScope(token.tagName))
	            formattingElementEntry = null;
	    }
	
	    else
	        genericEndTagInBody(p, token);
	
	    return formattingElementEntry;
	}
	
	//Steps 9 and 10 of the algorithm
	function aaObtainFurthestBlock(p, formattingElementEntry) {
	    var furthestBlock = null;
	
	    for (var i = p.openElements.stackTop; i >= 0; i--) {
	        var element = p.openElements.items[i];
	
	        if (element === formattingElementEntry.element)
	            break;
	
	        if (p._isSpecialElement(element))
	            furthestBlock = element;
	    }
	
	    if (!furthestBlock) {
	        p.openElements.popUntilElementPopped(formattingElementEntry.element);
	        p.activeFormattingElements.removeEntry(formattingElementEntry);
	    }
	
	    return furthestBlock;
	}
	
	//Step 13 of the algorithm
	function aaInnerLoop(p, furthestBlock, formattingElement) {
	    var lastElement = furthestBlock,
	        nextElement = p.openElements.getCommonAncestor(furthestBlock);
	
	    for (var i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {
	        //NOTE: store next element for the next loop iteration (it may be deleted from the stack by step 9.5)
	        nextElement = p.openElements.getCommonAncestor(element);
	
	        var elementEntry = p.activeFormattingElements.getElementEntry(element),
	            counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER,
	            shouldRemoveFromOpenElements = !elementEntry || counterOverflow;
	
	        if (shouldRemoveFromOpenElements) {
	            if (counterOverflow)
	                p.activeFormattingElements.removeEntry(elementEntry);
	
	            p.openElements.remove(element);
	        }
	
	        else {
	            element = aaRecreateElementFromEntry(p, elementEntry);
	
	            if (lastElement === furthestBlock)
	                p.activeFormattingElements.bookmark = elementEntry;
	
	            p.treeAdapter.detachNode(lastElement);
	            p.treeAdapter.appendChild(element, lastElement);
	            lastElement = element;
	        }
	    }
	
	    return lastElement;
	}
	
	//Step 13.7 of the algorithm
	function aaRecreateElementFromEntry(p, elementEntry) {
	    var ns = p.treeAdapter.getNamespaceURI(elementEntry.element),
	        newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);
	
	    p.openElements.replace(elementEntry.element, newElement);
	    elementEntry.element = newElement;
	
	    return newElement;
	}
	
	//Step 14 of the algorithm
	function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
	    if (p._isElementCausesFosterParenting(commonAncestor))
	        p._fosterParentElement(lastElement);
	
	    else {
	        var tn = p.treeAdapter.getTagName(commonAncestor),
	            ns = p.treeAdapter.getNamespaceURI(commonAncestor);
	
	        if (tn === $.TEMPLATE && ns === NS.HTML)
	            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);
	
	        p.treeAdapter.appendChild(commonAncestor, lastElement);
	    }
	}
	
	//Steps 15-19 of the algorithm
	function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
	    var ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element),
	        token = formattingElementEntry.token,
	        newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);
	
	    p._adoptNodes(furthestBlock, newElement);
	    p.treeAdapter.appendChild(furthestBlock, newElement);
	
	    p.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);
	    p.activeFormattingElements.removeEntry(formattingElementEntry);
	
	    p.openElements.remove(formattingElementEntry.element);
	    p.openElements.insertAfter(furthestBlock, newElement);
	}
	
	//Algorithm entry point
	function callAdoptionAgency(p, token) {
	    var formattingElementEntry;
	
	    for (var i = 0; i < AA_OUTER_LOOP_ITER; i++) {
	        formattingElementEntry = aaObtainFormattingElementEntry(p, token, formattingElementEntry);
	
	        if (!formattingElementEntry)
	            break;
	
	        var furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);
	
	        if (!furthestBlock)
	            break;
	
	        p.activeFormattingElements.bookmark = formattingElementEntry;
	
	        var lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element),
	            commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);
	
	        p.treeAdapter.detachNode(lastElement);
	        aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
	        aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
	    }
	}
	
	
	//Generic token handlers
	//------------------------------------------------------------------
	function ignoreToken() {
	    //NOTE: do nothing =)
	}
	
	function appendComment(p, token) {
	    p._appendCommentNode(token, p.openElements.currentTmplContent || p.openElements.current);
	}
	
	function appendCommentToRootHtmlElement(p, token) {
	    p._appendCommentNode(token, p.openElements.items[0]);
	}
	
	function appendCommentToDocument(p, token) {
	    p._appendCommentNode(token, p.document);
	}
	
	function insertCharacters(p, token) {
	    p._insertCharacters(token);
	}
	
	function stopParsing(p) {
	    p.stopped = true;
	}
	
	//12.2.5.4.1 The "initial" insertion mode
	//------------------------------------------------------------------
	function doctypeInInitialMode(p, token) {
	    p._setDocumentType(token);
	
	    if (token.forceQuirks || doctype.isQuirks(token.name, token.publicId, token.systemId))
	        p.treeAdapter.setQuirksMode(p.document);
	
	    p.insertionMode = BEFORE_HTML_MODE;
	}
	
	function tokenInInitialMode(p, token) {
	    p.treeAdapter.setQuirksMode(p.document);
	    p.insertionMode = BEFORE_HTML_MODE;
	    p._processToken(token);
	}
	
	
	//12.2.5.4.2 The "before html" insertion mode
	//------------------------------------------------------------------
	function startTagBeforeHtml(p, token) {
	    if (token.tagName === $.HTML) {
	        p._insertElement(token, NS.HTML);
	        p.insertionMode = BEFORE_HEAD_MODE;
	    }
	
	    else
	        tokenBeforeHtml(p, token);
	}
	
	function endTagBeforeHtml(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR)
	        tokenBeforeHtml(p, token);
	}
	
	function tokenBeforeHtml(p, token) {
	    p._insertFakeRootElement();
	    p.insertionMode = BEFORE_HEAD_MODE;
	    p._processToken(token);
	}
	
	
	//12.2.5.4.3 The "before head" insertion mode
	//------------------------------------------------------------------
	function startTagBeforeHead(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.HTML)
	        startTagInBody(p, token);
	
	    else if (tn === $.HEAD) {
	        p._insertElement(token, NS.HTML);
	        p.headElement = p.openElements.current;
	        p.insertionMode = IN_HEAD_MODE;
	    }
	
	    else
	        tokenBeforeHead(p, token);
	}
	
	function endTagBeforeHead(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR)
	        tokenBeforeHead(p, token);
	}
	
	function tokenBeforeHead(p, token) {
	    p._insertFakeElement($.HEAD);
	    p.headElement = p.openElements.current;
	    p.insertionMode = IN_HEAD_MODE;
	    p._processToken(token);
	}
	
	
	//12.2.5.4.4 The "in head" insertion mode
	//------------------------------------------------------------------
	function startTagInHead(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.HTML)
	        startTagInBody(p, token);
	
	    else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META)
	        p._appendElement(token, NS.HTML);
	
	    else if (tn === $.TITLE)
	        p._switchToTextParsing(token, Tokenizer.MODE.RCDATA);
	
	    //NOTE: here we assume that we always act as an interactive user agent with enabled scripting, so we parse
	    //<noscript> as a rawtext.
	    else if (tn === $.NOSCRIPT || tn === $.NOFRAMES || tn === $.STYLE)
	        p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
	
	    else if (tn === $.SCRIPT)
	        p._switchToTextParsing(token, Tokenizer.MODE.SCRIPT_DATA);
	
	    else if (tn === $.TEMPLATE) {
	        p._insertTemplate(token, NS.HTML);
	        p.activeFormattingElements.insertMarker();
	        p.framesetOk = false;
	        p.insertionMode = IN_TEMPLATE_MODE;
	        p._pushTmplInsertionMode(IN_TEMPLATE_MODE);
	    }
	
	    else if (tn !== $.HEAD)
	        tokenInHead(p, token);
	}
	
	function endTagInHead(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.HEAD) {
	        p.openElements.pop();
	        p.insertionMode = AFTER_HEAD_MODE;
	    }
	
	    else if (tn === $.BODY || tn === $.BR || tn === $.HTML)
	        tokenInHead(p, token);
	
	    else if (tn === $.TEMPLATE && p.openElements.tmplCount > 0) {
	        p.openElements.generateImpliedEndTags();
	        p.openElements.popUntilTagNamePopped($.TEMPLATE);
	        p.activeFormattingElements.clearToLastMarker();
	        p._popTmplInsertionMode();
	        p._resetInsertionMode();
	    }
	}
	
	function tokenInHead(p, token) {
	    p.openElements.pop();
	    p.insertionMode = AFTER_HEAD_MODE;
	    p._processToken(token);
	}
	
	
	//12.2.5.4.6 The "after head" insertion mode
	//------------------------------------------------------------------
	function startTagAfterHead(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.HTML)
	        startTagInBody(p, token);
	
	    else if (tn === $.BODY) {
	        p._insertElement(token, NS.HTML);
	        p.framesetOk = false;
	        p.insertionMode = IN_BODY_MODE;
	    }
	
	    else if (tn === $.FRAMESET) {
	        p._insertElement(token, NS.HTML);
	        p.insertionMode = IN_FRAMESET_MODE;
	    }
	
	    else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META ||
	             tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
	        p.openElements.push(p.headElement);
	        startTagInHead(p, token);
	        p.openElements.remove(p.headElement);
	    }
	
	    else if (tn !== $.HEAD)
	        tokenAfterHead(p, token);
	}
	
	function endTagAfterHead(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.BODY || tn === $.HTML || tn === $.BR)
	        tokenAfterHead(p, token);
	
	    else if (tn === $.TEMPLATE)
	        endTagInHead(p, token);
	}
	
	function tokenAfterHead(p, token) {
	    p._insertFakeElement($.BODY);
	    p.insertionMode = IN_BODY_MODE;
	    p._processToken(token);
	}
	
	
	//12.2.5.4.7 The "in body" insertion mode
	//------------------------------------------------------------------
	function whitespaceCharacterInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._insertCharacters(token);
	}
	
	function characterInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._insertCharacters(token);
	    p.framesetOk = false;
	}
	
	function htmlStartTagInBody(p, token) {
	    if (p.openElements.tmplCount === 0)
	        p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
	}
	
	function bodyStartTagInBody(p, token) {
	    var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
	
	    if (bodyElement && p.openElements.tmplCount === 0) {
	        p.framesetOk = false;
	        p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
	    }
	}
	
	function framesetStartTagInBody(p, token) {
	    var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
	
	    if (p.framesetOk && bodyElement) {
	        p.treeAdapter.detachNode(bodyElement);
	        p.openElements.popAllUpToHtmlElement();
	        p._insertElement(token, NS.HTML);
	        p.insertionMode = IN_FRAMESET_MODE;
	    }
	}
	
	function addressStartTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope($.P))
	        p._closePElement();
	
	    p._insertElement(token, NS.HTML);
	}
	
	function numberedHeaderStartTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope($.P))
	        p._closePElement();
	
	    var tn = p.openElements.currentTagName;
	
	    if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6)
	        p.openElements.pop();
	
	    p._insertElement(token, NS.HTML);
	}
	
	function preStartTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope($.P))
	        p._closePElement();
	
	    p._insertElement(token, NS.HTML);
	    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
	    //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)
	    p.skipNextNewLine = true;
	    p.framesetOk = false;
	}
	
	function formStartTagInBody(p, token) {
	    var inTemplate = p.openElements.tmplCount > 0;
	
	    if (!p.formElement || inTemplate) {
	        if (p.openElements.hasInButtonScope($.P))
	            p._closePElement();
	
	        p._insertElement(token, NS.HTML);
	
	        if (!inTemplate)
	            p.formElement = p.openElements.current;
	    }
	}
	
	function listItemStartTagInBody(p, token) {
	    p.framesetOk = false;
	
	    var tn = token.tagName;
	
	    for (var i = p.openElements.stackTop; i >= 0; i--) {
	        var element = p.openElements.items[i],
	            elementTn = p.treeAdapter.getTagName(element),
	            closeTn = null;
	
	        if (tn === $.LI && elementTn === $.LI)
	            closeTn = $.LI;
	
	        else if ((tn === $.DD || tn === $.DT) && (elementTn === $.DD || elementTn === $.DT))
	            closeTn = elementTn;
	
	        if (closeTn) {
	            p.openElements.generateImpliedEndTagsWithExclusion(closeTn);
	            p.openElements.popUntilTagNamePopped(closeTn);
	            break;
	        }
	
	        if (elementTn !== $.ADDRESS && elementTn !== $.DIV && elementTn !== $.P && p._isSpecialElement(element))
	            break;
	    }
	
	    if (p.openElements.hasInButtonScope($.P))
	        p._closePElement();
	
	    p._insertElement(token, NS.HTML);
	}
	
	function plaintextStartTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope($.P))
	        p._closePElement();
	
	    p._insertElement(token, NS.HTML);
	    p.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
	}
	
	function buttonStartTagInBody(p, token) {
	    if (p.openElements.hasInScope($.BUTTON)) {
	        p.openElements.generateImpliedEndTags();
	        p.openElements.popUntilTagNamePopped($.BUTTON);
	    }
	
	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	    p.framesetOk = false;
	}
	
	function aStartTagInBody(p, token) {
	    var activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName($.A);
	
	    if (activeElementEntry) {
	        callAdoptionAgency(p, token);
	        p.openElements.remove(activeElementEntry.element);
	        p.activeFormattingElements.removeEntry(activeElementEntry);
	    }
	
	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	    p.activeFormattingElements.pushElement(p.openElements.current, token);
	}
	
	function bStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	    p.activeFormattingElements.pushElement(p.openElements.current, token);
	}
	
	function nobrStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	
	    if (p.openElements.hasInScope($.NOBR)) {
	        callAdoptionAgency(p, token);
	        p._reconstructActiveFormattingElements();
	    }
	
	    p._insertElement(token, NS.HTML);
	    p.activeFormattingElements.pushElement(p.openElements.current, token);
	}
	
	function appletStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	    p.activeFormattingElements.insertMarker();
	    p.framesetOk = false;
	}
	
	function tableStartTagInBody(p, token) {
	    if (!p.treeAdapter.isQuirksMode(p.document) && p.openElements.hasInButtonScope($.P))
	        p._closePElement();
	
	    p._insertElement(token, NS.HTML);
	    p.framesetOk = false;
	    p.insertionMode = IN_TABLE_MODE;
	}
	
	function areaStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._appendElement(token, NS.HTML);
	    p.framesetOk = false;
	}
	
	function inputStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._appendElement(token, NS.HTML);
	
	    var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);
	
	    if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE)
	        p.framesetOk = false;
	
	}
	
	function paramStartTagInBody(p, token) {
	    p._appendElement(token, NS.HTML);
	}
	
	function hrStartTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope($.P))
	        p._closePElement();
	
	    if (p.openElements.currentTagName === $.MENUITEM)
	        p.openElements.pop();
	
	    p._appendElement(token, NS.HTML);
	    p.framesetOk = false;
	}
	
	function imageStartTagInBody(p, token) {
	    token.tagName = $.IMG;
	    areaStartTagInBody(p, token);
	}
	
	function textareaStartTagInBody(p, token) {
	    p._insertElement(token, NS.HTML);
	    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
	    //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)
	    p.skipNextNewLine = true;
	    p.tokenizer.state = Tokenizer.MODE.RCDATA;
	    p.originalInsertionMode = p.insertionMode;
	    p.framesetOk = false;
	    p.insertionMode = TEXT_MODE;
	}
	
	function xmpStartTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope($.P))
	        p._closePElement();
	
	    p._reconstructActiveFormattingElements();
	    p.framesetOk = false;
	    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
	}
	
	function iframeStartTagInBody(p, token) {
	    p.framesetOk = false;
	    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
	}
	
	//NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse
	//<noembed> as a rawtext.
	function noembedStartTagInBody(p, token) {
	    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
	}
	
	function selectStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	    p.framesetOk = false;
	
	    if (p.insertionMode === IN_TABLE_MODE ||
	        p.insertionMode === IN_CAPTION_MODE ||
	        p.insertionMode === IN_TABLE_BODY_MODE ||
	        p.insertionMode === IN_ROW_MODE ||
	        p.insertionMode === IN_CELL_MODE)
	
	        p.insertionMode = IN_SELECT_IN_TABLE_MODE;
	
	    else
	        p.insertionMode = IN_SELECT_MODE;
	}
	
	function optgroupStartTagInBody(p, token) {
	    if (p.openElements.currentTagName === $.OPTION)
	        p.openElements.pop();
	
	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	}
	
	function rbStartTagInBody(p, token) {
	    if (p.openElements.hasInScope($.RUBY))
	        p.openElements.generateImpliedEndTags();
	
	    p._insertElement(token, NS.HTML);
	}
	
	function rtStartTagInBody(p, token) {
	    if (p.openElements.hasInScope($.RUBY))
	        p.openElements.generateImpliedEndTagsWithExclusion($.RTC);
	
	    p._insertElement(token, NS.HTML);
	}
	
	function menuitemStartTagInBody(p, token) {
	    if (p.openElements.currentTagName === $.MENUITEM)
	        p.openElements.pop();
	
	    // TODO needs clarification, see https://github.com/whatwg/html/pull/907/files#r73505877
	    p._reconstructActiveFormattingElements();
	
	    p._insertElement(token, NS.HTML);
	}
	
	function menuStartTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope($.P))
	        p._closePElement();
	
	    if (p.openElements.currentTagName === $.MENUITEM)
	        p.openElements.pop();
	
	    p._insertElement(token, NS.HTML);
	}
	
	function mathStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	
	    foreignContent.adjustTokenMathMLAttrs(token);
	    foreignContent.adjustTokenXMLAttrs(token);
	
	    if (token.selfClosing)
	        p._appendElement(token, NS.MATHML);
	    else
	        p._insertElement(token, NS.MATHML);
	}
	
	function svgStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	
	    foreignContent.adjustTokenSVGAttrs(token);
	    foreignContent.adjustTokenXMLAttrs(token);
	
	    if (token.selfClosing)
	        p._appendElement(token, NS.SVG);
	    else
	        p._insertElement(token, NS.SVG);
	}
	
	function genericStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	}
	
	//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
	//It's faster than using dictionary.
	function startTagInBody(p, token) {
	    var tn = token.tagName;
	
	    switch (tn.length) {
	        case 1:
	            if (tn === $.I || tn === $.S || tn === $.B || tn === $.U)
	                bStartTagInBody(p, token);
	
	            else if (tn === $.P)
	                addressStartTagInBody(p, token);
	
	            else if (tn === $.A)
	                aStartTagInBody(p, token);
	
	            else
	                genericStartTagInBody(p, token);
	
	            break;
	
	        case 2:
	            if (tn === $.DL || tn === $.OL || tn === $.UL)
	                addressStartTagInBody(p, token);
	
	            else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6)
	                numberedHeaderStartTagInBody(p, token);
	
	            else if (tn === $.LI || tn === $.DD || tn === $.DT)
	                listItemStartTagInBody(p, token);
	
	            else if (tn === $.EM || tn === $.TT)
	                bStartTagInBody(p, token);
	
	            else if (tn === $.BR)
	                areaStartTagInBody(p, token);
	
	            else if (tn === $.HR)
	                hrStartTagInBody(p, token);
	
	            else if (tn === $.RB)
	                rbStartTagInBody(p, token);
	
	            else if (tn === $.RT || tn === $.RP)
	                rtStartTagInBody(p, token);
	
	            else if (tn !== $.TH && tn !== $.TD && tn !== $.TR)
	                genericStartTagInBody(p, token);
	
	            break;
	
	        case 3:
	            if (tn === $.DIV || tn === $.DIR || tn === $.NAV)
	                addressStartTagInBody(p, token);
	
	            else if (tn === $.PRE)
	                preStartTagInBody(p, token);
	
	            else if (tn === $.BIG)
	                bStartTagInBody(p, token);
	
	            else if (tn === $.IMG || tn === $.WBR)
	                areaStartTagInBody(p, token);
	
	            else if (tn === $.XMP)
	                xmpStartTagInBody(p, token);
	
	            else if (tn === $.SVG)
	                svgStartTagInBody(p, token);
	
	            else if (tn === $.RTC)
	                rbStartTagInBody(p, token);
	
	            else if (tn !== $.COL)
	                genericStartTagInBody(p, token);
	
	            break;
	
	        case 4:
	            if (tn === $.HTML)
	                htmlStartTagInBody(p, token);
	
	            else if (tn === $.BASE || tn === $.LINK || tn === $.META)
	                startTagInHead(p, token);
	
	            else if (tn === $.BODY)
	                bodyStartTagInBody(p, token);
	
	            else if (tn === $.MAIN)
	                addressStartTagInBody(p, token);
	
	            else if (tn === $.FORM)
	                formStartTagInBody(p, token);
	
	            else if (tn === $.CODE || tn === $.FONT)
	                bStartTagInBody(p, token);
	
	            else if (tn === $.NOBR)
	                nobrStartTagInBody(p, token);
	
	            else if (tn === $.AREA)
	                areaStartTagInBody(p, token);
	
	            else if (tn === $.MATH)
	                mathStartTagInBody(p, token);
	
	            else if (tn === $.MENU)
	                menuStartTagInBody(p, token);
	
	            else if (tn !== $.HEAD)
	                genericStartTagInBody(p, token);
	
	            break;
	
	        case 5:
	            if (tn === $.STYLE || tn === $.TITLE)
	                startTagInHead(p, token);
	
	            else if (tn === $.ASIDE)
	                addressStartTagInBody(p, token);
	
	            else if (tn === $.SMALL)
	                bStartTagInBody(p, token);
	
	            else if (tn === $.TABLE)
	                tableStartTagInBody(p, token);
	
	            else if (tn === $.EMBED)
	                areaStartTagInBody(p, token);
	
	            else if (tn === $.INPUT)
	                inputStartTagInBody(p, token);
	
	            else if (tn === $.PARAM || tn === $.TRACK)
	                paramStartTagInBody(p, token);
	
	            else if (tn === $.IMAGE)
	                imageStartTagInBody(p, token);
	
	            else if (tn !== $.FRAME && tn !== $.TBODY && tn !== $.TFOOT && tn !== $.THEAD)
	                genericStartTagInBody(p, token);
	
	            break;
	
	        case 6:
	            if (tn === $.SCRIPT)
	                startTagInHead(p, token);
	
	            else if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP)
	                addressStartTagInBody(p, token);
	
	            else if (tn === $.BUTTON)
	                buttonStartTagInBody(p, token);
	
	            else if (tn === $.STRIKE || tn === $.STRONG)
	                bStartTagInBody(p, token);
	
	            else if (tn === $.APPLET || tn === $.OBJECT)
	                appletStartTagInBody(p, token);
	
	            else if (tn === $.KEYGEN)
	                areaStartTagInBody(p, token);
	
	            else if (tn === $.SOURCE)
	                paramStartTagInBody(p, token);
	
	            else if (tn === $.IFRAME)
	                iframeStartTagInBody(p, token);
	
	            else if (tn === $.SELECT)
	                selectStartTagInBody(p, token);
	
	            else if (tn === $.OPTION)
	                optgroupStartTagInBody(p, token);
	
	            else
	                genericStartTagInBody(p, token);
	
	            break;
	
	        case 7:
	            if (tn === $.BGSOUND)
	                startTagInHead(p, token);
	
	            else if (tn === $.DETAILS || tn === $.ADDRESS || tn === $.ARTICLE || tn === $.SECTION || tn === $.SUMMARY)
	                addressStartTagInBody(p, token);
	
	            else if (tn === $.LISTING)
	                preStartTagInBody(p, token);
	
	            else if (tn === $.MARQUEE)
	                appletStartTagInBody(p, token);
	
	            else if (tn === $.NOEMBED)
	                noembedStartTagInBody(p, token);
	
	            else if (tn !== $.CAPTION)
	                genericStartTagInBody(p, token);
	
	            break;
	
	        case 8:
	            if (tn === $.BASEFONT)
	                startTagInHead(p, token);
	
	            else if (tn === $.MENUITEM)
	                menuitemStartTagInBody(p, token);
	
	            else if (tn === $.FRAMESET)
	                framesetStartTagInBody(p, token);
	
	            else if (tn === $.FIELDSET)
	                addressStartTagInBody(p, token);
	
	            else if (tn === $.TEXTAREA)
	                textareaStartTagInBody(p, token);
	
	            else if (tn === $.TEMPLATE)
	                startTagInHead(p, token);
	
	            else if (tn === $.NOSCRIPT)
	                noembedStartTagInBody(p, token);
	
	            else if (tn === $.OPTGROUP)
	                optgroupStartTagInBody(p, token);
	
	            else if (tn !== $.COLGROUP)
	                genericStartTagInBody(p, token);
	
	            break;
	
	        case 9:
	            if (tn === $.PLAINTEXT)
	                plaintextStartTagInBody(p, token);
	
	            else
	                genericStartTagInBody(p, token);
	
	            break;
	
	        case 10:
	            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION)
	                addressStartTagInBody(p, token);
	
	            else
	                genericStartTagInBody(p, token);
	
	            break;
	
	        default:
	            genericStartTagInBody(p, token);
	    }
	}
	
	function bodyEndTagInBody(p) {
	    if (p.openElements.hasInScope($.BODY))
	        p.insertionMode = AFTER_BODY_MODE;
	}
	
	function htmlEndTagInBody(p, token) {
	    if (p.openElements.hasInScope($.BODY)) {
	        p.insertionMode = AFTER_BODY_MODE;
	        p._processToken(token);
	    }
	}
	
	function addressEndTagInBody(p, token) {
	    var tn = token.tagName;
	
	    if (p.openElements.hasInScope(tn)) {
	        p.openElements.generateImpliedEndTags();
	        p.openElements.popUntilTagNamePopped(tn);
	    }
	}
	
	function formEndTagInBody(p) {
	    var inTemplate = p.openElements.tmplCount > 0,
	        formElement = p.formElement;
	
	    if (!inTemplate)
	        p.formElement = null;
	
	    if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {
	        p.openElements.generateImpliedEndTags();
	
	        if (inTemplate)
	            p.openElements.popUntilTagNamePopped($.FORM);
	
	        else
	            p.openElements.remove(formElement);
	    }
	}
	
	function pEndTagInBody(p) {
	    if (!p.openElements.hasInButtonScope($.P))
	        p._insertFakeElement($.P);
	
	    p._closePElement();
	}
	
	function liEndTagInBody(p) {
	    if (p.openElements.hasInListItemScope($.LI)) {
	        p.openElements.generateImpliedEndTagsWithExclusion($.LI);
	        p.openElements.popUntilTagNamePopped($.LI);
	    }
	}
	
	function ddEndTagInBody(p, token) {
	    var tn = token.tagName;
	
	    if (p.openElements.hasInScope(tn)) {
	        p.openElements.generateImpliedEndTagsWithExclusion(tn);
	        p.openElements.popUntilTagNamePopped(tn);
	    }
	}
	
	function numberedHeaderEndTagInBody(p) {
	    if (p.openElements.hasNumberedHeaderInScope()) {
	        p.openElements.generateImpliedEndTags();
	        p.openElements.popUntilNumberedHeaderPopped();
	    }
	}
	
	function appletEndTagInBody(p, token) {
	    var tn = token.tagName;
	
	    if (p.openElements.hasInScope(tn)) {
	        p.openElements.generateImpliedEndTags();
	        p.openElements.popUntilTagNamePopped(tn);
	        p.activeFormattingElements.clearToLastMarker();
	    }
	}
	
	function brEndTagInBody(p) {
	    p._reconstructActiveFormattingElements();
	    p._insertFakeElement($.BR);
	    p.openElements.pop();
	    p.framesetOk = false;
	}
	
	function genericEndTagInBody(p, token) {
	    var tn = token.tagName;
	
	    for (var i = p.openElements.stackTop; i > 0; i--) {
	        var element = p.openElements.items[i];
	
	        if (p.treeAdapter.getTagName(element) === tn) {
	            p.openElements.generateImpliedEndTagsWithExclusion(tn);
	            p.openElements.popUntilElementPopped(element);
	            break;
	        }
	
	        if (p._isSpecialElement(element))
	            break;
	    }
	}
	
	//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
	//It's faster than using dictionary.
	function endTagInBody(p, token) {
	    var tn = token.tagName;
	
	    switch (tn.length) {
	        case 1:
	            if (tn === $.A || tn === $.B || tn === $.I || tn === $.S || tn === $.U)
	                callAdoptionAgency(p, token);
	
	            else if (tn === $.P)
	                pEndTagInBody(p, token);
	
	            else
	                genericEndTagInBody(p, token);
	
	            break;
	
	        case 2:
	            if (tn === $.DL || tn === $.UL || tn === $.OL)
	                addressEndTagInBody(p, token);
	
	            else if (tn === $.LI)
	                liEndTagInBody(p, token);
	
	            else if (tn === $.DD || tn === $.DT)
	                ddEndTagInBody(p, token);
	
	            else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6)
	                numberedHeaderEndTagInBody(p, token);
	
	            else if (tn === $.BR)
	                brEndTagInBody(p, token);
	
	            else if (tn === $.EM || tn === $.TT)
	                callAdoptionAgency(p, token);
	
	            else
	                genericEndTagInBody(p, token);
	
	            break;
	
	        case 3:
	            if (tn === $.BIG)
	                callAdoptionAgency(p, token);
	
	            else if (tn === $.DIR || tn === $.DIV || tn === $.NAV)
	                addressEndTagInBody(p, token);
	
	            else
	                genericEndTagInBody(p, token);
	
	            break;
	
	        case 4:
	            if (tn === $.BODY)
	                bodyEndTagInBody(p, token);
	
	            else if (tn === $.HTML)
	                htmlEndTagInBody(p, token);
	
	            else if (tn === $.FORM)
	                formEndTagInBody(p, token);
	
	            else if (tn === $.CODE || tn === $.FONT || tn === $.NOBR)
	                callAdoptionAgency(p, token);
	
	            else if (tn === $.MAIN || tn === $.MENU)
	                addressEndTagInBody(p, token);
	
	            else
	                genericEndTagInBody(p, token);
	
	            break;
	
	        case 5:
	            if (tn === $.ASIDE)
	                addressEndTagInBody(p, token);
	
	            else if (tn === $.SMALL)
	                callAdoptionAgency(p, token);
	
	            else
	                genericEndTagInBody(p, token);
	
	            break;
	
	        case 6:
	            if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP)
	                addressEndTagInBody(p, token);
	
	            else if (tn === $.APPLET || tn === $.OBJECT)
	                appletEndTagInBody(p, token);
	
	            else if (tn === $.STRIKE || tn === $.STRONG)
	                callAdoptionAgency(p, token);
	
	            else
	                genericEndTagInBody(p, token);
	
	            break;
	
	        case 7:
	            if (tn === $.ADDRESS || tn === $.ARTICLE || tn === $.DETAILS || tn === $.SECTION || tn === $.SUMMARY)
	                addressEndTagInBody(p, token);
	
	            else if (tn === $.MARQUEE)
	                appletEndTagInBody(p, token);
	
	            else
	                genericEndTagInBody(p, token);
	
	            break;
	
	        case 8:
	            if (tn === $.FIELDSET)
	                addressEndTagInBody(p, token);
	
	            else if (tn === $.TEMPLATE)
	                endTagInHead(p, token);
	
	            else
	                genericEndTagInBody(p, token);
	
	            break;
	
	        case 10:
	            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION)
	                addressEndTagInBody(p, token);
	
	            else
	                genericEndTagInBody(p, token);
	
	            break;
	
	        default :
	            genericEndTagInBody(p, token);
	    }
	}
	
	function eofInBody(p, token) {
	    if (p.tmplInsertionModeStackTop > -1)
	        eofInTemplate(p, token);
	
	    else
	        p.stopped = true;
	}
	
	//12.2.5.4.8 The "text" insertion mode
	//------------------------------------------------------------------
	function endTagInText(p, token) {
	    if (token.tagName === $.SCRIPT)
	        p.pendingScript = p.openElements.current;
	
	    p.openElements.pop();
	    p.insertionMode = p.originalInsertionMode;
	}
	
	
	function eofInText(p, token) {
	    p.openElements.pop();
	    p.insertionMode = p.originalInsertionMode;
	    p._processToken(token);
	}
	
	
	//12.2.5.4.9 The "in table" insertion mode
	//------------------------------------------------------------------
	function characterInTable(p, token) {
	    var curTn = p.openElements.currentTagName;
	
	    if (curTn === $.TABLE || curTn === $.TBODY || curTn === $.TFOOT || curTn === $.THEAD || curTn === $.TR) {
	        p.pendingCharacterTokens = [];
	        p.hasNonWhitespacePendingCharacterToken = false;
	        p.originalInsertionMode = p.insertionMode;
	        p.insertionMode = IN_TABLE_TEXT_MODE;
	        p._processToken(token);
	    }
	
	    else
	        tokenInTable(p, token);
	}
	
	function captionStartTagInTable(p, token) {
	    p.openElements.clearBackToTableContext();
	    p.activeFormattingElements.insertMarker();
	    p._insertElement(token, NS.HTML);
	    p.insertionMode = IN_CAPTION_MODE;
	}
	
	function colgroupStartTagInTable(p, token) {
	    p.openElements.clearBackToTableContext();
	    p._insertElement(token, NS.HTML);
	    p.insertionMode = IN_COLUMN_GROUP_MODE;
	}
	
	function colStartTagInTable(p, token) {
	    p.openElements.clearBackToTableContext();
	    p._insertFakeElement($.COLGROUP);
	    p.insertionMode = IN_COLUMN_GROUP_MODE;
	    p._processToken(token);
	}
	
	function tbodyStartTagInTable(p, token) {
	    p.openElements.clearBackToTableContext();
	    p._insertElement(token, NS.HTML);
	    p.insertionMode = IN_TABLE_BODY_MODE;
	}
	
	function tdStartTagInTable(p, token) {
	    p.openElements.clearBackToTableContext();
	    p._insertFakeElement($.TBODY);
	    p.insertionMode = IN_TABLE_BODY_MODE;
	    p._processToken(token);
	}
	
	function tableStartTagInTable(p, token) {
	    if (p.openElements.hasInTableScope($.TABLE)) {
	        p.openElements.popUntilTagNamePopped($.TABLE);
	        p._resetInsertionMode();
	        p._processToken(token);
	    }
	}
	
	function inputStartTagInTable(p, token) {
	    var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);
	
	    if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE)
	        p._appendElement(token, NS.HTML);
	
	    else
	        tokenInTable(p, token);
	}
	
	function formStartTagInTable(p, token) {
	    if (!p.formElement && p.openElements.tmplCount === 0) {
	        p._insertElement(token, NS.HTML);
	        p.formElement = p.openElements.current;
	        p.openElements.pop();
	    }
	}
	
	function startTagInTable(p, token) {
	    var tn = token.tagName;
	
	    switch (tn.length) {
	        case 2:
	            if (tn === $.TD || tn === $.TH || tn === $.TR)
	                tdStartTagInTable(p, token);
	
	            else
	                tokenInTable(p, token);
	
	            break;
	
	        case 3:
	            if (tn === $.COL)
	                colStartTagInTable(p, token);
	
	            else
	                tokenInTable(p, token);
	
	            break;
	
	        case 4:
	            if (tn === $.FORM)
	                formStartTagInTable(p, token);
	
	            else
	                tokenInTable(p, token);
	
	            break;
	
	        case 5:
	            if (tn === $.TABLE)
	                tableStartTagInTable(p, token);
	
	            else if (tn === $.STYLE)
	                startTagInHead(p, token);
	
	            else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD)
	                tbodyStartTagInTable(p, token);
	
	            else if (tn === $.INPUT)
	                inputStartTagInTable(p, token);
	
	            else
	                tokenInTable(p, token);
	
	            break;
	
	        case 6:
	            if (tn === $.SCRIPT)
	                startTagInHead(p, token);
	
	            else
	                tokenInTable(p, token);
	
	            break;
	
	        case 7:
	            if (tn === $.CAPTION)
	                captionStartTagInTable(p, token);
	
	            else
	                tokenInTable(p, token);
	
	            break;
	
	        case 8:
	            if (tn === $.COLGROUP)
	                colgroupStartTagInTable(p, token);
	
	            else if (tn === $.TEMPLATE)
	                startTagInHead(p, token);
	
	            else
	                tokenInTable(p, token);
	
	            break;
	
	        default:
	            tokenInTable(p, token);
	    }
	
	}
	
	function endTagInTable(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.TABLE) {
	        if (p.openElements.hasInTableScope($.TABLE)) {
	            p.openElements.popUntilTagNamePopped($.TABLE);
	            p._resetInsertionMode();
	        }
	    }
	
	    else if (tn === $.TEMPLATE)
	        endTagInHead(p, token);
	
	    else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML &&
	             tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR)
	        tokenInTable(p, token);
	}
	
	function tokenInTable(p, token) {
	    var savedFosterParentingState = p.fosterParentingEnabled;
	
	    p.fosterParentingEnabled = true;
	    p._processTokenInBodyMode(token);
	    p.fosterParentingEnabled = savedFosterParentingState;
	}
	
	
	//12.2.5.4.10 The "in table text" insertion mode
	//------------------------------------------------------------------
	function whitespaceCharacterInTableText(p, token) {
	    p.pendingCharacterTokens.push(token);
	}
	
	function characterInTableText(p, token) {
	    p.pendingCharacterTokens.push(token);
	    p.hasNonWhitespacePendingCharacterToken = true;
	}
	
	function tokenInTableText(p, token) {
	    var i = 0;
	
	    if (p.hasNonWhitespacePendingCharacterToken) {
	        for (; i < p.pendingCharacterTokens.length; i++)
	            tokenInTable(p, p.pendingCharacterTokens[i]);
	    }
	
	    else {
	        for (; i < p.pendingCharacterTokens.length; i++)
	            p._insertCharacters(p.pendingCharacterTokens[i]);
	    }
	
	    p.insertionMode = p.originalInsertionMode;
	    p._processToken(token);
	}
	
	
	//12.2.5.4.11 The "in caption" insertion mode
	//------------------------------------------------------------------
	function startTagInCaption(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY ||
	        tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
	        if (p.openElements.hasInTableScope($.CAPTION)) {
	            p.openElements.generateImpliedEndTags();
	            p.openElements.popUntilTagNamePopped($.CAPTION);
	            p.activeFormattingElements.clearToLastMarker();
	            p.insertionMode = IN_TABLE_MODE;
	            p._processToken(token);
	        }
	    }
	
	    else
	        startTagInBody(p, token);
	}
	
	function endTagInCaption(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.CAPTION || tn === $.TABLE) {
	        if (p.openElements.hasInTableScope($.CAPTION)) {
	            p.openElements.generateImpliedEndTags();
	            p.openElements.popUntilTagNamePopped($.CAPTION);
	            p.activeFormattingElements.clearToLastMarker();
	            p.insertionMode = IN_TABLE_MODE;
	
	            if (tn === $.TABLE)
	                p._processToken(token);
	        }
	    }
	
	    else if (tn !== $.BODY && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY &&
	             tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR)
	        endTagInBody(p, token);
	}
	
	
	//12.2.5.4.12 The "in column group" insertion mode
	//------------------------------------------------------------------
	function startTagInColumnGroup(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.HTML)
	        startTagInBody(p, token);
	
	    else if (tn === $.COL)
	        p._appendElement(token, NS.HTML);
	
	    else if (tn === $.TEMPLATE)
	        startTagInHead(p, token);
	
	    else
	        tokenInColumnGroup(p, token);
	}
	
	function endTagInColumnGroup(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.COLGROUP) {
	        if (p.openElements.currentTagName === $.COLGROUP) {
	            p.openElements.pop();
	            p.insertionMode = IN_TABLE_MODE;
	        }
	    }
	
	    else if (tn === $.TEMPLATE)
	        endTagInHead(p, token);
	
	    else if (tn !== $.COL)
	        tokenInColumnGroup(p, token);
	}
	
	function tokenInColumnGroup(p, token) {
	    if (p.openElements.currentTagName === $.COLGROUP) {
	        p.openElements.pop();
	        p.insertionMode = IN_TABLE_MODE;
	        p._processToken(token);
	    }
	}
	
	//12.2.5.4.13 The "in table body" insertion mode
	//------------------------------------------------------------------
	function startTagInTableBody(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.TR) {
	        p.openElements.clearBackToTableBodyContext();
	        p._insertElement(token, NS.HTML);
	        p.insertionMode = IN_ROW_MODE;
	    }
	
	    else if (tn === $.TH || tn === $.TD) {
	        p.openElements.clearBackToTableBodyContext();
	        p._insertFakeElement($.TR);
	        p.insertionMode = IN_ROW_MODE;
	        p._processToken(token);
	    }
	
	    else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP ||
	             tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
	
	        if (p.openElements.hasTableBodyContextInTableScope()) {
	            p.openElements.clearBackToTableBodyContext();
	            p.openElements.pop();
	            p.insertionMode = IN_TABLE_MODE;
	            p._processToken(token);
	        }
	    }
	
	    else
	        startTagInTable(p, token);
	}
	
	function endTagInTableBody(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
	        if (p.openElements.hasInTableScope(tn)) {
	            p.openElements.clearBackToTableBodyContext();
	            p.openElements.pop();
	            p.insertionMode = IN_TABLE_MODE;
	        }
	    }
	
	    else if (tn === $.TABLE) {
	        if (p.openElements.hasTableBodyContextInTableScope()) {
	            p.openElements.clearBackToTableBodyContext();
	            p.openElements.pop();
	            p.insertionMode = IN_TABLE_MODE;
	            p._processToken(token);
	        }
	    }
	
	    else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP ||
	             tn !== $.HTML && tn !== $.TD && tn !== $.TH && tn !== $.TR)
	        endTagInTable(p, token);
	}
	
	//12.2.5.4.14 The "in row" insertion mode
	//------------------------------------------------------------------
	function startTagInRow(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.TH || tn === $.TD) {
	        p.openElements.clearBackToTableRowContext();
	        p._insertElement(token, NS.HTML);
	        p.insertionMode = IN_CELL_MODE;
	        p.activeFormattingElements.insertMarker();
	    }
	
	    else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY ||
	             tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
	        if (p.openElements.hasInTableScope($.TR)) {
	            p.openElements.clearBackToTableRowContext();
	            p.openElements.pop();
	            p.insertionMode = IN_TABLE_BODY_MODE;
	            p._processToken(token);
	        }
	    }
	
	    else
	        startTagInTable(p, token);
	}
	
	function endTagInRow(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.TR) {
	        if (p.openElements.hasInTableScope($.TR)) {
	            p.openElements.clearBackToTableRowContext();
	            p.openElements.pop();
	            p.insertionMode = IN_TABLE_BODY_MODE;
	        }
	    }
	
	    else if (tn === $.TABLE) {
	        if (p.openElements.hasInTableScope($.TR)) {
	            p.openElements.clearBackToTableRowContext();
	            p.openElements.pop();
	            p.insertionMode = IN_TABLE_BODY_MODE;
	            p._processToken(token);
	        }
	    }
	
	    else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
	        if (p.openElements.hasInTableScope(tn) || p.openElements.hasInTableScope($.TR)) {
	            p.openElements.clearBackToTableRowContext();
	            p.openElements.pop();
	            p.insertionMode = IN_TABLE_BODY_MODE;
	            p._processToken(token);
	        }
	    }
	
	    else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP ||
	             tn !== $.HTML && tn !== $.TD && tn !== $.TH)
	        endTagInTable(p, token);
	}
	
	
	//12.2.5.4.15 The "in cell" insertion mode
	//------------------------------------------------------------------
	function startTagInCell(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY ||
	        tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
	
	        if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {
	            p._closeTableCell();
	            p._processToken(token);
	        }
	    }
	
	    else
	        startTagInBody(p, token);
	}
	
	function endTagInCell(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.TD || tn === $.TH) {
	        if (p.openElements.hasInTableScope(tn)) {
	            p.openElements.generateImpliedEndTags();
	            p.openElements.popUntilTagNamePopped(tn);
	            p.activeFormattingElements.clearToLastMarker();
	            p.insertionMode = IN_ROW_MODE;
	        }
	    }
	
	    else if (tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
	        if (p.openElements.hasInTableScope(tn)) {
	            p._closeTableCell();
	            p._processToken(token);
	        }
	    }
	
	    else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML)
	        endTagInBody(p, token);
	}
	
	//12.2.5.4.16 The "in select" insertion mode
	//------------------------------------------------------------------
	function startTagInSelect(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.HTML)
	        startTagInBody(p, token);
	
	    else if (tn === $.OPTION) {
	        if (p.openElements.currentTagName === $.OPTION)
	            p.openElements.pop();
	
	        p._insertElement(token, NS.HTML);
	    }
	
	    else if (tn === $.OPTGROUP) {
	        if (p.openElements.currentTagName === $.OPTION)
	            p.openElements.pop();
	
	        if (p.openElements.currentTagName === $.OPTGROUP)
	            p.openElements.pop();
	
	        p._insertElement(token, NS.HTML);
	    }
	
	    else if (tn === $.INPUT || tn === $.KEYGEN || tn === $.TEXTAREA || tn === $.SELECT) {
	        if (p.openElements.hasInSelectScope($.SELECT)) {
	            p.openElements.popUntilTagNamePopped($.SELECT);
	            p._resetInsertionMode();
	
	            if (tn !== $.SELECT)
	                p._processToken(token);
	        }
	    }
	
	    else if (tn === $.SCRIPT || tn === $.TEMPLATE)
	        startTagInHead(p, token);
	}
	
	function endTagInSelect(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.OPTGROUP) {
	        var prevOpenElement = p.openElements.items[p.openElements.stackTop - 1],
	            prevOpenElementTn = prevOpenElement && p.treeAdapter.getTagName(prevOpenElement);
	
	        if (p.openElements.currentTagName === $.OPTION && prevOpenElementTn === $.OPTGROUP)
	            p.openElements.pop();
	
	        if (p.openElements.currentTagName === $.OPTGROUP)
	            p.openElements.pop();
	    }
	
	    else if (tn === $.OPTION) {
	        if (p.openElements.currentTagName === $.OPTION)
	            p.openElements.pop();
	    }
	
	    else if (tn === $.SELECT && p.openElements.hasInSelectScope($.SELECT)) {
	        p.openElements.popUntilTagNamePopped($.SELECT);
	        p._resetInsertionMode();
	    }
	
	    else if (tn === $.TEMPLATE)
	        endTagInHead(p, token);
	}
	
	//12.2.5.4.17 The "in select in table" insertion mode
	//------------------------------------------------------------------
	function startTagInSelectInTable(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT ||
	        tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
	        p.openElements.popUntilTagNamePopped($.SELECT);
	        p._resetInsertionMode();
	        p._processToken(token);
	    }
	
	    else
	        startTagInSelect(p, token);
	}
	
	function endTagInSelectInTable(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT ||
	        tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
	        if (p.openElements.hasInTableScope(tn)) {
	            p.openElements.popUntilTagNamePopped($.SELECT);
	            p._resetInsertionMode();
	            p._processToken(token);
	        }
	    }
	
	    else
	        endTagInSelect(p, token);
	}
	
	//12.2.5.4.18 The "in template" insertion mode
	//------------------------------------------------------------------
	function startTagInTemplate(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META ||
	        tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE)
	        startTagInHead(p, token);
	
	    else {
	        var newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;
	
	        p._popTmplInsertionMode();
	        p._pushTmplInsertionMode(newInsertionMode);
	        p.insertionMode = newInsertionMode;
	        p._processToken(token);
	    }
	}
	
	function endTagInTemplate(p, token) {
	    if (token.tagName === $.TEMPLATE)
	        endTagInHead(p, token);
	}
	
	function eofInTemplate(p, token) {
	    if (p.openElements.tmplCount > 0) {
	        p.openElements.popUntilTagNamePopped($.TEMPLATE);
	        p.activeFormattingElements.clearToLastMarker();
	        p._popTmplInsertionMode();
	        p._resetInsertionMode();
	        p._processToken(token);
	    }
	
	    else
	        p.stopped = true;
	}
	
	
	//12.2.5.4.19 The "after body" insertion mode
	//------------------------------------------------------------------
	function startTagAfterBody(p, token) {
	    if (token.tagName === $.HTML)
	        startTagInBody(p, token);
	
	    else
	        tokenAfterBody(p, token);
	}
	
	function endTagAfterBody(p, token) {
	    if (token.tagName === $.HTML) {
	        if (!p.fragmentContext)
	            p.insertionMode = AFTER_AFTER_BODY_MODE;
	    }
	
	    else
	        tokenAfterBody(p, token);
	}
	
	function tokenAfterBody(p, token) {
	    p.insertionMode = IN_BODY_MODE;
	    p._processToken(token);
	}
	
	//12.2.5.4.20 The "in frameset" insertion mode
	//------------------------------------------------------------------
	function startTagInFrameset(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.HTML)
	        startTagInBody(p, token);
	
	    else if (tn === $.FRAMESET)
	        p._insertElement(token, NS.HTML);
	
	    else if (tn === $.FRAME)
	        p._appendElement(token, NS.HTML);
	
	    else if (tn === $.NOFRAMES)
	        startTagInHead(p, token);
	}
	
	function endTagInFrameset(p, token) {
	    if (token.tagName === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
	        p.openElements.pop();
	
	        if (!p.fragmentContext && p.openElements.currentTagName !== $.FRAMESET)
	            p.insertionMode = AFTER_FRAMESET_MODE;
	    }
	}
	
	//12.2.5.4.21 The "after frameset" insertion mode
	//------------------------------------------------------------------
	function startTagAfterFrameset(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.HTML)
	        startTagInBody(p, token);
	
	    else if (tn === $.NOFRAMES)
	        startTagInHead(p, token);
	}
	
	function endTagAfterFrameset(p, token) {
	    if (token.tagName === $.HTML)
	        p.insertionMode = AFTER_AFTER_FRAMESET_MODE;
	}
	
	//12.2.5.4.22 The "after after body" insertion mode
	//------------------------------------------------------------------
	function startTagAfterAfterBody(p, token) {
	    if (token.tagName === $.HTML)
	        startTagInBody(p, token);
	
	    else
	        tokenAfterAfterBody(p, token);
	}
	
	function tokenAfterAfterBody(p, token) {
	    p.insertionMode = IN_BODY_MODE;
	    p._processToken(token);
	}
	
	//12.2.5.4.23 The "after after frameset" insertion mode
	//------------------------------------------------------------------
	function startTagAfterAfterFrameset(p, token) {
	    var tn = token.tagName;
	
	    if (tn === $.HTML)
	        startTagInBody(p, token);
	
	    else if (tn === $.NOFRAMES)
	        startTagInHead(p, token);
	}
	
	
	//12.2.5.5 The rules for parsing tokens in foreign content
	//------------------------------------------------------------------
	function nullCharacterInForeignContent(p, token) {
	    token.chars = UNICODE.REPLACEMENT_CHARACTER;
	    p._insertCharacters(token);
	}
	
	function characterInForeignContent(p, token) {
	    p._insertCharacters(token);
	    p.framesetOk = false;
	}
	
	function startTagInForeignContent(p, token) {
	    if (foreignContent.causesExit(token) && !p.fragmentContext) {
	        while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML && !p._isIntegrationPoint(p.openElements.current))
	            p.openElements.pop();
	
	        p._processToken(token);
	    }
	
	    else {
	        var current = p._getAdjustedCurrentElement(),
	            currentNs = p.treeAdapter.getNamespaceURI(current);
	
	        if (currentNs === NS.MATHML)
	            foreignContent.adjustTokenMathMLAttrs(token);
	
	        else if (currentNs === NS.SVG) {
	            foreignContent.adjustTokenSVGTagName(token);
	            foreignContent.adjustTokenSVGAttrs(token);
	        }
	
	        foreignContent.adjustTokenXMLAttrs(token);
	
	        if (token.selfClosing)
	            p._appendElement(token, currentNs);
	        else
	            p._insertElement(token, currentNs);
	    }
	}
	
	function endTagInForeignContent(p, token) {
	    for (var i = p.openElements.stackTop; i > 0; i--) {
	        var element = p.openElements.items[i];
	
	        if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
	            p._processToken(token);
	            break;
	        }
	
	        if (p.treeAdapter.getTagName(element).toLowerCase() === token.tagName) {
	            p.openElements.popUntilElementPopped(element);
	            break;
	        }
	    }
	}


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Preprocessor = __webpack_require__(302),
	    locationInfoMixin = __webpack_require__(304),
	    UNICODE = __webpack_require__(303),
	    NAMED_ENTITY_TRIE = __webpack_require__(305);
	
	//Aliases
	var $ = UNICODE.CODE_POINTS,
	    $$ = UNICODE.CODE_POINT_SEQUENCES;
	
	//Replacement code points for numeric entities
	var NUMERIC_ENTITY_REPLACEMENTS = {
	    0x00: 0xFFFD, 0x0D: 0x000D, 0x80: 0x20AC, 0x81: 0x0081, 0x82: 0x201A, 0x83: 0x0192, 0x84: 0x201E,
	    0x85: 0x2026, 0x86: 0x2020, 0x87: 0x2021, 0x88: 0x02C6, 0x89: 0x2030, 0x8A: 0x0160, 0x8B: 0x2039,
	    0x8C: 0x0152, 0x8D: 0x008D, 0x8E: 0x017D, 0x8F: 0x008F, 0x90: 0x0090, 0x91: 0x2018, 0x92: 0x2019,
	    0x93: 0x201C, 0x94: 0x201D, 0x95: 0x2022, 0x96: 0x2013, 0x97: 0x2014, 0x98: 0x02DC, 0x99: 0x2122,
	    0x9A: 0x0161, 0x9B: 0x203A, 0x9C: 0x0153, 0x9D: 0x009D, 0x9E: 0x017E, 0x9F: 0x0178
	};
	
	//States
	var DATA_STATE = 'DATA_STATE',
	    CHARACTER_REFERENCE_IN_DATA_STATE = 'CHARACTER_REFERENCE_IN_DATA_STATE',
	    RCDATA_STATE = 'RCDATA_STATE',
	    CHARACTER_REFERENCE_IN_RCDATA_STATE = 'CHARACTER_REFERENCE_IN_RCDATA_STATE',
	    RAWTEXT_STATE = 'RAWTEXT_STATE',
	    SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE',
	    PLAINTEXT_STATE = 'PLAINTEXT_STATE',
	    TAG_OPEN_STATE = 'TAG_OPEN_STATE',
	    END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE',
	    TAG_NAME_STATE = 'TAG_NAME_STATE',
	    RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE',
	    RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE',
	    RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE',
	    RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE',
	    RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE',
	    RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE',
	    SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE',
	    SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE',
	    SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE',
	    SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE',
	    SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE',
	    SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE',
	    SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE',
	    SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE',
	    SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE',
	    SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE',
	    SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE',
	    SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE',
	    SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE',
	    SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE',
	    SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE',
	    SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE',
	    SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE',
	    BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE',
	    ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE',
	    AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE',
	    BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE',
	    ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE',
	    ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE',
	    ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE',
	    CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE = 'CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE',
	    AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE',
	    SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE',
	    BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE',
	    BOGUS_COMMENT_STATE_CONTINUATION = 'BOGUS_COMMENT_STATE_CONTINUATION',
	    MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE',
	    COMMENT_START_STATE = 'COMMENT_START_STATE',
	    COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE',
	    COMMENT_STATE = 'COMMENT_STATE',
	    COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE',
	    COMMENT_END_STATE = 'COMMENT_END_STATE',
	    COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE',
	    DOCTYPE_STATE = 'DOCTYPE_STATE',
	    DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE',
	    AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE',
	    BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE',
	    DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE',
	    DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE',
	    BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE',
	    BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE',
	    DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE',
	    DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE',
	    AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE',
	    BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE',
	    CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';
	
	//Utils
	
	//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline
	//this functions if they will be situated in another module due to context switch.
	//Always perform inlining check before modifying this functions ('node --trace-inlining').
	function isWhitespace(cp) {
	    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;
	}
	
	function isAsciiDigit(cp) {
	    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;
	}
	
	function isAsciiUpper(cp) {
	    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;
	}
	
	function isAsciiLower(cp) {
	    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;
	}
	
	function isAsciiLetter(cp) {
	    return isAsciiLower(cp) || isAsciiUpper(cp);
	}
	
	function isAsciiAlphaNumeric(cp) {
	    return isAsciiLetter(cp) || isAsciiDigit(cp);
	}
	
	function isDigit(cp, isHex) {
	    return isAsciiDigit(cp) || isHex && (cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F ||
	                                         cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F);
	}
	
	function isReservedCodePoint(cp) {
	    return cp >= 0xD800 && cp <= 0xDFFF || cp > 0x10FFFF;
	}
	
	function toAsciiLowerCodePoint(cp) {
	    return cp + 0x0020;
	}
	
	//NOTE: String.fromCharCode() function can handle only characters from BMP subset.
	//So, we need to workaround this manually.
	//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)
	function toChar(cp) {
	    if (cp <= 0xFFFF)
	        return String.fromCharCode(cp);
	
	    cp -= 0x10000;
	    return String.fromCharCode(cp >>> 10 & 0x3FF | 0xD800) + String.fromCharCode(0xDC00 | cp & 0x3FF);
	}
	
	function toAsciiLowerChar(cp) {
	    return String.fromCharCode(toAsciiLowerCodePoint(cp));
	}
	
	//Tokenizer
	var Tokenizer = module.exports = function (options) {
	    this.preprocessor = new Preprocessor();
	
	    this.tokenQueue = [];
	
	    this.allowCDATA = false;
	
	    this.state = DATA_STATE;
	    this.returnState = '';
	
	    this.tempBuff = [];
	    this.additionalAllowedCp = void 0;
	    this.lastStartTagName = '';
	
	    this.consumedAfterSnapshot = -1;
	    this.active = false;
	
	    this.currentCharacterToken = null;
	    this.currentToken = null;
	    this.currentAttr = null;
	
	    if (options && options.locationInfo)
	        locationInfoMixin.assign(this);
	};
	
	//Token types
	Tokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';
	Tokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';
	Tokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';
	Tokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';
	Tokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';
	Tokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';
	Tokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';
	Tokenizer.EOF_TOKEN = 'EOF_TOKEN';
	Tokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN';
	
	//Tokenizer initial states for different modes
	Tokenizer.MODE = Tokenizer.prototype.MODE = {
	    DATA: DATA_STATE,
	    RCDATA: RCDATA_STATE,
	    RAWTEXT: RAWTEXT_STATE,
	    SCRIPT_DATA: SCRIPT_DATA_STATE,
	    PLAINTEXT: PLAINTEXT_STATE
	};
	
	//Static
	Tokenizer.getTokenAttr = function (token, attrName) {
	    for (var i = token.attrs.length - 1; i >= 0; i--) {
	        if (token.attrs[i].name === attrName)
	            return token.attrs[i].value;
	    }
	
	    return null;
	};
	
	//API
	Tokenizer.prototype.getNextToken = function () {
	    while (!this.tokenQueue.length && this.active) {
	        this._hibernationSnapshot();
	
	        var cp = this._consume();
	
	        if (!this._ensureHibernation())
	            this[this.state](cp);
	    }
	
	    return this.tokenQueue.shift();
	};
	
	Tokenizer.prototype.write = function (chunk, isLastChunk) {
	    this.active = true;
	    this.preprocessor.write(chunk, isLastChunk);
	};
	
	Tokenizer.prototype.insertHtmlAtCurrentPos = function (chunk) {
	    this.active = true;
	    this.preprocessor.insertHtmlAtCurrentPos(chunk);
	};
	
	//Hibernation
	Tokenizer.prototype._hibernationSnapshot = function () {
	    this.consumedAfterSnapshot = 0;
	};
	
	Tokenizer.prototype._ensureHibernation = function () {
	    if (this.preprocessor.endOfChunkHit) {
	        for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--)
	            this.preprocessor.retreat();
	
	        this.active = false;
	        this.tokenQueue.push({type: Tokenizer.HIBERNATION_TOKEN});
	
	        return true;
	    }
	
	    return false;
	};
	
	
	//Consumption
	Tokenizer.prototype._consume = function () {
	    this.consumedAfterSnapshot++;
	    return this.preprocessor.advance();
	};
	
	Tokenizer.prototype._unconsume = function () {
	    this.consumedAfterSnapshot--;
	    this.preprocessor.retreat();
	};
	
	Tokenizer.prototype._unconsumeSeveral = function (count) {
	    while (count--)
	        this._unconsume();
	};
	
	Tokenizer.prototype._reconsumeInState = function (state) {
	    this.state = state;
	    this._unconsume();
	};
	
	Tokenizer.prototype._consumeSubsequentIfMatch = function (pattern, startCp, caseSensitive) {
	    var consumedCount = 0,
	        isMatch = true,
	        patternLength = pattern.length,
	        patternPos = 0,
	        cp = startCp,
	        patternCp = void 0;
	
	    for (; patternPos < patternLength; patternPos++) {
	        if (patternPos > 0) {
	            cp = this._consume();
	            consumedCount++;
	        }
	
	        if (cp === $.EOF) {
	            isMatch = false;
	            break;
	        }
	
	        patternCp = pattern[patternPos];
	
	        if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {
	            isMatch = false;
	            break;
	        }
	    }
	
	    if (!isMatch)
	        this._unconsumeSeveral(consumedCount);
	
	    return isMatch;
	};
	
	//Lookahead
	Tokenizer.prototype._lookahead = function () {
	    var cp = this._consume();
	
	    this._unconsume();
	
	    return cp;
	};
	
	//Temp buffer
	Tokenizer.prototype.isTempBufferEqualToScriptString = function () {
	    if (this.tempBuff.length !== $$.SCRIPT_STRING.length)
	        return false;
	
	    for (var i = 0; i < this.tempBuff.length; i++) {
	        if (this.tempBuff[i] !== $$.SCRIPT_STRING[i])
	            return false;
	    }
	
	    return true;
	};
	
	//Token creation
	Tokenizer.prototype._createStartTagToken = function () {
	    this.currentToken = {
	        type: Tokenizer.START_TAG_TOKEN,
	        tagName: '',
	        selfClosing: false,
	        attrs: []
	    };
	};
	
	Tokenizer.prototype._createEndTagToken = function () {
	    this.currentToken = {
	        type: Tokenizer.END_TAG_TOKEN,
	        tagName: '',
	        attrs: []
	    };
	};
	
	Tokenizer.prototype._createCommentToken = function () {
	    this.currentToken = {
	        type: Tokenizer.COMMENT_TOKEN,
	        data: ''
	    };
	};
	
	Tokenizer.prototype._createDoctypeToken = function (initialName) {
	    this.currentToken = {
	        type: Tokenizer.DOCTYPE_TOKEN,
	        name: initialName,
	        forceQuirks: false,
	        publicId: null,
	        systemId: null
	    };
	};
	
	Tokenizer.prototype._createCharacterToken = function (type, ch) {
	    this.currentCharacterToken = {
	        type: type,
	        chars: ch
	    };
	};
	
	//Tag attributes
	Tokenizer.prototype._createAttr = function (attrNameFirstCh) {
	    this.currentAttr = {
	        name: attrNameFirstCh,
	        value: ''
	    };
	};
	
	Tokenizer.prototype._isDuplicateAttr = function () {
	    return Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) !== null;
	};
	
	Tokenizer.prototype._leaveAttrName = function (toState) {
	    this.state = toState;
	
	    if (!this._isDuplicateAttr())
	        this.currentToken.attrs.push(this.currentAttr);
	};
	
	Tokenizer.prototype._leaveAttrValue = function (toState) {
	    this.state = toState;
	};
	
	//Appropriate end tag token
	//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#appropriate-end-tag-token)
	Tokenizer.prototype._isAppropriateEndTagToken = function () {
	    return this.lastStartTagName === this.currentToken.tagName;
	};
	
	//Token emission
	Tokenizer.prototype._emitCurrentToken = function () {
	    this._emitCurrentCharacterToken();
	
	    //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.
	    if (this.currentToken.type === Tokenizer.START_TAG_TOKEN)
	        this.lastStartTagName = this.currentToken.tagName;
	
	    this.tokenQueue.push(this.currentToken);
	    this.currentToken = null;
	};
	
	Tokenizer.prototype._emitCurrentCharacterToken = function () {
	    if (this.currentCharacterToken) {
	        this.tokenQueue.push(this.currentCharacterToken);
	        this.currentCharacterToken = null;
	    }
	};
	
	Tokenizer.prototype._emitEOFToken = function () {
	    this._emitCurrentCharacterToken();
	    this.tokenQueue.push({type: Tokenizer.EOF_TOKEN});
	};
	
	//Characters emission
	
	//OPTIMIZATION: specification uses only one type of character tokens (one token per character).
	//This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.
	//If we have a sequence of characters that belong to the same group, parser can process it
	//as a single solid character token.
	//So, there are 3 types of character tokens in parse5:
	//1)NULL_CHARACTER_TOKEN - \u0000-character sequences (e.g. '\u0000\u0000\u0000')
	//2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\n  \r\t   \f')
	//3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')
	Tokenizer.prototype._appendCharToCurrentCharacterToken = function (type, ch) {
	    if (this.currentCharacterToken && this.currentCharacterToken.type !== type)
	        this._emitCurrentCharacterToken();
	
	    if (this.currentCharacterToken)
	        this.currentCharacterToken.chars += ch;
	
	    else
	        this._createCharacterToken(type, ch);
	};
	
	Tokenizer.prototype._emitCodePoint = function (cp) {
	    var type = Tokenizer.CHARACTER_TOKEN;
	
	    if (isWhitespace(cp))
	        type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;
	
	    else if (cp === $.NULL)
	        type = Tokenizer.NULL_CHARACTER_TOKEN;
	
	    this._appendCharToCurrentCharacterToken(type, toChar(cp));
	};
	
	Tokenizer.prototype._emitSeveralCodePoints = function (codePoints) {
	    for (var i = 0; i < codePoints.length; i++)
	        this._emitCodePoint(codePoints[i]);
	};
	
	//NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.
	//So we can avoid additional checks here.
	Tokenizer.prototype._emitChar = function (ch) {
	    this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);
	};
	
	//Character reference tokenization
	Tokenizer.prototype._consumeNumericEntity = function (isHex) {
	    var digits = '',
	        nextCp = void 0;
	
	    do {
	        digits += toChar(this._consume());
	        nextCp = this._lookahead();
	    } while (nextCp !== $.EOF && isDigit(nextCp, isHex));
	
	    if (this._lookahead() === $.SEMICOLON)
	        this._consume();
	
	    var referencedCp = parseInt(digits, isHex ? 16 : 10),
	        replacement = NUMERIC_ENTITY_REPLACEMENTS[referencedCp];
	
	    if (replacement)
	        return replacement;
	
	    if (isReservedCodePoint(referencedCp))
	        return $.REPLACEMENT_CHARACTER;
	
	    return referencedCp;
	};
	
	Tokenizer.prototype._consumeNamedEntity = function (startCp, inAttr) {
	    var referencedCodePoints = null,
	        entityCodePointsCount = 0,
	        cp = startCp,
	        leaf = NAMED_ENTITY_TRIE[cp],
	        consumedCount = 1,
	        semicolonTerminated = false;
	
	    for (; leaf && cp !== $.EOF; cp = this._consume(), consumedCount++, leaf = leaf.l && leaf.l[cp]) {
	        if (leaf.c) {
	            //NOTE: we have at least one named reference match. But we don't stop lookup at this point,
	            //because longer matches still can be found (e.g. '&not' and '&notin;') except the case
	            //then found match is terminated by semicolon.
	            referencedCodePoints = leaf.c;
	            entityCodePointsCount = consumedCount;
	
	            if (cp === $.SEMICOLON) {
	                semicolonTerminated = true;
	                break;
	            }
	        }
	    }
	
	    if (referencedCodePoints) {
	        if (!semicolonTerminated) {
	            //NOTE: unconsume excess (e.g. 'it' in '&notit')
	            this._unconsumeSeveral(consumedCount - entityCodePointsCount);
	
	            //NOTE: If the character reference is being consumed as part of an attribute and the next character
	            //is either a U+003D EQUALS SIGN character (=) or an alphanumeric ASCII character, then, for historical
	            //reasons, all the characters that were matched after the U+0026 AMPERSAND character (&) must be
	            //unconsumed, and nothing is returned.
	            //However, if this next character is in fact a U+003D EQUALS SIGN character (=), then this is a
	            //parse error, because some legacy user agents will misinterpret the markup in those cases.
	            //(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#tokenizing-character-references)
	            if (inAttr) {
	                var nextCp = this._lookahead();
	
	                if (nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp)) {
	                    this._unconsumeSeveral(entityCodePointsCount);
	                    return null;
	                }
	            }
	        }
	
	        return referencedCodePoints;
	    }
	
	    this._unconsumeSeveral(consumedCount);
	
	    return null;
	};
	
	Tokenizer.prototype._consumeCharacterReference = function (startCp, inAttr) {
	    if (isWhitespace(startCp) || startCp === $.GREATER_THAN_SIGN ||
	        startCp === $.AMPERSAND || startCp === this.additionalAllowedCp || startCp === $.EOF) {
	        //NOTE: not a character reference. No characters are consumed, and nothing is returned.
	        this._unconsume();
	        return null;
	    }
	
	    if (startCp === $.NUMBER_SIGN) {
	        //NOTE: we have a numeric entity candidate, now we should determine if it's hex or decimal
	        var isHex = false,
	            nextCp = this._lookahead();
	
	        if (nextCp === $.LATIN_SMALL_X || nextCp === $.LATIN_CAPITAL_X) {
	            this._consume();
	            isHex = true;
	        }
	
	        nextCp = this._lookahead();
	
	        //NOTE: if we have at least one digit this is a numeric entity for sure, so we consume it
	        if (nextCp !== $.EOF && isDigit(nextCp, isHex))
	            return [this._consumeNumericEntity(isHex)];
	
	        //NOTE: otherwise this is a bogus number entity and a parse error. Unconsume the number sign
	        //and the 'x'-character if appropriate.
	        this._unconsumeSeveral(isHex ? 2 : 1);
	        return null;
	    }
	
	    return this._consumeNamedEntity(startCp, inAttr);
	};
	
	//State machine
	var _ = Tokenizer.prototype;
	
	//12.2.4.1 Data state
	//------------------------------------------------------------------
	_[DATA_STATE] = function dataState(cp) {
	    this.preprocessor.dropParsedChunk();
	
	    if (cp === $.AMPERSAND)
	        this.state = CHARACTER_REFERENCE_IN_DATA_STATE;
	
	    else if (cp === $.LESS_THAN_SIGN)
	        this.state = TAG_OPEN_STATE;
	
	    else if (cp === $.NULL)
	        this._emitCodePoint(cp);
	
	    else if (cp === $.EOF)
	        this._emitEOFToken();
	
	    else
	        this._emitCodePoint(cp);
	};
	
	
	//12.2.4.2 Character reference in data state
	//------------------------------------------------------------------
	_[CHARACTER_REFERENCE_IN_DATA_STATE] = function characterReferenceInDataState(cp) {
	    this.additionalAllowedCp = void 0;
	
	    var referencedCodePoints = this._consumeCharacterReference(cp, false);
	
	    if (!this._ensureHibernation()) {
	        if (referencedCodePoints)
	            this._emitSeveralCodePoints(referencedCodePoints);
	
	        else
	            this._emitChar('&');
	
	        this.state = DATA_STATE;
	    }
	};
	
	
	//12.2.4.3 RCDATA state
	//------------------------------------------------------------------
	_[RCDATA_STATE] = function rcdataState(cp) {
	    this.preprocessor.dropParsedChunk();
	
	    if (cp === $.AMPERSAND)
	        this.state = CHARACTER_REFERENCE_IN_RCDATA_STATE;
	
	    else if (cp === $.LESS_THAN_SIGN)
	        this.state = RCDATA_LESS_THAN_SIGN_STATE;
	
	    else if (cp === $.NULL)
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
	
	    else if (cp === $.EOF)
	        this._emitEOFToken();
	
	    else
	        this._emitCodePoint(cp);
	};
	
	
	//12.2.4.4 Character reference in RCDATA state
	//------------------------------------------------------------------
	_[CHARACTER_REFERENCE_IN_RCDATA_STATE] = function characterReferenceInRcdataState(cp) {
	    this.additionalAllowedCp = void 0;
	
	    var referencedCodePoints = this._consumeCharacterReference(cp, false);
	
	    if (!this._ensureHibernation()) {
	        if (referencedCodePoints)
	            this._emitSeveralCodePoints(referencedCodePoints);
	
	        else
	            this._emitChar('&');
	
	        this.state = RCDATA_STATE;
	    }
	};
	
	
	//12.2.4.5 RAWTEXT state
	//------------------------------------------------------------------
	_[RAWTEXT_STATE] = function rawtextState(cp) {
	    this.preprocessor.dropParsedChunk();
	
	    if (cp === $.LESS_THAN_SIGN)
	        this.state = RAWTEXT_LESS_THAN_SIGN_STATE;
	
	    else if (cp === $.NULL)
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
	
	    else if (cp === $.EOF)
	        this._emitEOFToken();
	
	    else
	        this._emitCodePoint(cp);
	};
	
	
	//12.2.4.6 Script data state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_STATE] = function scriptDataState(cp) {
	    this.preprocessor.dropParsedChunk();
	
	    if (cp === $.LESS_THAN_SIGN)
	        this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;
	
	    else if (cp === $.NULL)
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
	
	    else if (cp === $.EOF)
	        this._emitEOFToken();
	
	    else
	        this._emitCodePoint(cp);
	};
	
	
	//12.2.4.7 PLAINTEXT state
	//------------------------------------------------------------------
	_[PLAINTEXT_STATE] = function plaintextState(cp) {
	    this.preprocessor.dropParsedChunk();
	
	    if (cp === $.NULL)
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
	
	    else if (cp === $.EOF)
	        this._emitEOFToken();
	
	    else
	        this._emitCodePoint(cp);
	};
	
	
	//12.2.4.8 Tag open state
	//------------------------------------------------------------------
	_[TAG_OPEN_STATE] = function tagOpenState(cp) {
	    if (cp === $.EXCLAMATION_MARK)
	        this.state = MARKUP_DECLARATION_OPEN_STATE;
	
	    else if (cp === $.SOLIDUS)
	        this.state = END_TAG_OPEN_STATE;
	
	    else if (isAsciiLetter(cp)) {
	        this._createStartTagToken();
	        this._reconsumeInState(TAG_NAME_STATE);
	    }
	
	    else if (cp === $.QUESTION_MARK)
	        this._reconsumeInState(BOGUS_COMMENT_STATE);
	
	    else {
	        this._emitChar('<');
	        this._reconsumeInState(DATA_STATE);
	    }
	};
	
	
	//12.2.4.9 End tag open state
	//------------------------------------------------------------------
	_[END_TAG_OPEN_STATE] = function endTagOpenState(cp) {
	    if (isAsciiLetter(cp)) {
	        this._createEndTagToken();
	        this._reconsumeInState(TAG_NAME_STATE);
	    }
	
	    else if (cp === $.GREATER_THAN_SIGN)
	        this.state = DATA_STATE;
	
	    else if (cp === $.EOF) {
	        this._reconsumeInState(DATA_STATE);
	        this._emitChar('<');
	        this._emitChar('/');
	    }
	
	    else
	        this._reconsumeInState(BOGUS_COMMENT_STATE);
	};
	
	
	//12.2.4.10 Tag name state
	//------------------------------------------------------------------
	_[TAG_NAME_STATE] = function tagNameState(cp) {
	    if (isWhitespace(cp))
	        this.state = BEFORE_ATTRIBUTE_NAME_STATE;
	
	    else if (cp === $.SOLIDUS)
	        this.state = SELF_CLOSING_START_TAG_STATE;
	
	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }
	
	    else if (isAsciiUpper(cp))
	        this.currentToken.tagName += toAsciiLowerChar(cp);
	
	    else if (cp === $.NULL)
	        this.currentToken.tagName += UNICODE.REPLACEMENT_CHARACTER;
	
	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);
	
	    else
	        this.currentToken.tagName += toChar(cp);
	};
	
	
	//12.2.4.11 RCDATA less-than sign state
	//------------------------------------------------------------------
	_[RCDATA_LESS_THAN_SIGN_STATE] = function rcdataLessThanSignState(cp) {
	    if (cp === $.SOLIDUS) {
	        this.tempBuff = [];
	        this.state = RCDATA_END_TAG_OPEN_STATE;
	    }
	
	    else {
	        this._emitChar('<');
	        this._reconsumeInState(RCDATA_STATE);
	    }
	};
	
	
	//12.2.4.12 RCDATA end tag open state
	//------------------------------------------------------------------
	_[RCDATA_END_TAG_OPEN_STATE] = function rcdataEndTagOpenState(cp) {
	    if (isAsciiLetter(cp)) {
	        this._createEndTagToken();
	        this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);
	    }
	
	    else {
	        this._emitChar('<');
	        this._emitChar('/');
	        this._reconsumeInState(RCDATA_STATE);
	    }
	};
	
	
	//12.2.4.13 RCDATA end tag name state
	//------------------------------------------------------------------
	_[RCDATA_END_TAG_NAME_STATE] = function rcdataEndTagNameState(cp) {
	    if (isAsciiUpper(cp)) {
	        this.currentToken.tagName += toAsciiLowerChar(cp);
	        this.tempBuff.push(cp);
	    }
	
	    else if (isAsciiLower(cp)) {
	        this.currentToken.tagName += toChar(cp);
	        this.tempBuff.push(cp);
	    }
	
	    else {
	        if (this._isAppropriateEndTagToken()) {
	            if (isWhitespace(cp)) {
	                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
	                return;
	            }
	
	            if (cp === $.SOLIDUS) {
	                this.state = SELF_CLOSING_START_TAG_STATE;
	                return;
	            }
	
	            if (cp === $.GREATER_THAN_SIGN) {
	                this.state = DATA_STATE;
	                this._emitCurrentToken();
	                return;
	            }
	        }
	
	        this._emitChar('<');
	        this._emitChar('/');
	        this._emitSeveralCodePoints(this.tempBuff);
	        this._reconsumeInState(RCDATA_STATE);
	    }
	};
	
	
	//12.2.4.14 RAWTEXT less-than sign state
	//------------------------------------------------------------------
	_[RAWTEXT_LESS_THAN_SIGN_STATE] = function rawtextLessThanSignState(cp) {
	    if (cp === $.SOLIDUS) {
	        this.tempBuff = [];
	        this.state = RAWTEXT_END_TAG_OPEN_STATE;
	    }
	
	    else {
	        this._emitChar('<');
	        this._reconsumeInState(RAWTEXT_STATE);
	    }
	};
	
	
	//12.2.4.15 RAWTEXT end tag open state
	//------------------------------------------------------------------
	_[RAWTEXT_END_TAG_OPEN_STATE] = function rawtextEndTagOpenState(cp) {
	    if (isAsciiLetter(cp)) {
	        this._createEndTagToken();
	        this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);
	    }
	
	    else {
	        this._emitChar('<');
	        this._emitChar('/');
	        this._reconsumeInState(RAWTEXT_STATE);
	    }
	};
	
	
	//12.2.4.16 RAWTEXT end tag name state
	//------------------------------------------------------------------
	_[RAWTEXT_END_TAG_NAME_STATE] = function rawtextEndTagNameState(cp) {
	    if (isAsciiUpper(cp)) {
	        this.currentToken.tagName += toAsciiLowerChar(cp);
	        this.tempBuff.push(cp);
	    }
	
	    else if (isAsciiLower(cp)) {
	        this.currentToken.tagName += toChar(cp);
	        this.tempBuff.push(cp);
	    }
	
	    else {
	        if (this._isAppropriateEndTagToken()) {
	            if (isWhitespace(cp)) {
	                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
	                return;
	            }
	
	            if (cp === $.SOLIDUS) {
	                this.state = SELF_CLOSING_START_TAG_STATE;
	                return;
	            }
	
	            if (cp === $.GREATER_THAN_SIGN) {
	                this._emitCurrentToken();
	                this.state = DATA_STATE;
	                return;
	            }
	        }
	
	        this._emitChar('<');
	        this._emitChar('/');
	        this._emitSeveralCodePoints(this.tempBuff);
	        this._reconsumeInState(RAWTEXT_STATE);
	    }
	};
	
	
	//12.2.4.17 Script data less-than sign state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_LESS_THAN_SIGN_STATE] = function scriptDataLessThanSignState(cp) {
	    if (cp === $.SOLIDUS) {
	        this.tempBuff = [];
	        this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;
	    }
	
	    else if (cp === $.EXCLAMATION_MARK) {
	        this.state = SCRIPT_DATA_ESCAPE_START_STATE;
	        this._emitChar('<');
	        this._emitChar('!');
	    }
	
	    else {
	        this._emitChar('<');
	        this._reconsumeInState(SCRIPT_DATA_STATE);
	    }
	};
	
	
	//12.2.4.18 Script data end tag open state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_END_TAG_OPEN_STATE] = function scriptDataEndTagOpenState(cp) {
	    if (isAsciiLetter(cp)) {
	        this._createEndTagToken();
	        this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);
	    }
	
	    else {
	        this._emitChar('<');
	        this._emitChar('/');
	        this._reconsumeInState(SCRIPT_DATA_STATE);
	    }
	};
	
	
	//12.2.4.19 Script data end tag name state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_END_TAG_NAME_STATE] = function scriptDataEndTagNameState(cp) {
	    if (isAsciiUpper(cp)) {
	        this.currentToken.tagName += toAsciiLowerChar(cp);
	        this.tempBuff.push(cp);
	    }
	
	    else if (isAsciiLower(cp)) {
	        this.currentToken.tagName += toChar(cp);
	        this.tempBuff.push(cp);
	    }
	
	    else {
	        if (this._isAppropriateEndTagToken()) {
	            if (isWhitespace(cp)) {
	                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
	                return;
	            }
	
	            else if (cp === $.SOLIDUS) {
	                this.state = SELF_CLOSING_START_TAG_STATE;
	                return;
	            }
	
	            else if (cp === $.GREATER_THAN_SIGN) {
	                this._emitCurrentToken();
	                this.state = DATA_STATE;
	                return;
	            }
	        }
	
	        this._emitChar('<');
	        this._emitChar('/');
	        this._emitSeveralCodePoints(this.tempBuff);
	        this._reconsumeInState(SCRIPT_DATA_STATE);
	    }
	};
	
	
	//12.2.4.20 Script data escape start state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_ESCAPE_START_STATE] = function scriptDataEscapeStartState(cp) {
	    if (cp === $.HYPHEN_MINUS) {
	        this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;
	        this._emitChar('-');
	    }
	
	    else
	        this._reconsumeInState(SCRIPT_DATA_STATE);
	};
	
	
	//12.2.4.21 Script data escape start dash state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_ESCAPE_START_DASH_STATE] = function scriptDataEscapeStartDashState(cp) {
	    if (cp === $.HYPHEN_MINUS) {
	        this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
	        this._emitChar('-');
	    }
	
	    else
	        this._reconsumeInState(SCRIPT_DATA_STATE);
	};
	
	
	//12.2.4.22 Script data escaped state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_ESCAPED_STATE] = function scriptDataEscapedState(cp) {
	    if (cp === $.HYPHEN_MINUS) {
	        this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;
	        this._emitChar('-');
	    }
	
	    else if (cp === $.LESS_THAN_SIGN)
	        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
	
	    else if (cp === $.NULL)
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
	
	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);
	
	    else
	        this._emitCodePoint(cp);
	};
	
	
	//12.2.4.23 Script data escaped dash state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_ESCAPED_DASH_STATE] = function scriptDataEscapedDashState(cp) {
	    if (cp === $.HYPHEN_MINUS) {
	        this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
	        this._emitChar('-');
	    }
	
	    else if (cp === $.LESS_THAN_SIGN)
	        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
	
	    else if (cp === $.NULL) {
	        this.state = SCRIPT_DATA_ESCAPED_STATE;
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
	    }
	
	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);
	
	    else {
	        this.state = SCRIPT_DATA_ESCAPED_STATE;
	        this._emitCodePoint(cp);
	    }
	};
	
	
	//12.2.4.24 Script data escaped dash dash state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_ESCAPED_DASH_DASH_STATE] = function scriptDataEscapedDashDashState(cp) {
	    if (cp === $.HYPHEN_MINUS)
	        this._emitChar('-');
	
	    else if (cp === $.LESS_THAN_SIGN)
	        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
	
	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.state = SCRIPT_DATA_STATE;
	        this._emitChar('>');
	    }
	
	    else if (cp === $.NULL) {
	        this.state = SCRIPT_DATA_ESCAPED_STATE;
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
	    }
	
	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);
	
	    else {
	        this.state = SCRIPT_DATA_ESCAPED_STATE;
	        this._emitCodePoint(cp);
	    }
	};
	
	
	//12.2.4.25 Script data escaped less-than sign state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE] = function scriptDataEscapedLessThanSignState(cp) {
	    if (cp === $.SOLIDUS) {
	        this.tempBuff = [];
	        this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;
	    }
	
	    else if (isAsciiLetter(cp)) {
	        this.tempBuff = [];
	        this._emitChar('<');
	        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);
	    }
	
	    else {
	        this._emitChar('<');
	        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
	    }
	};
	
	
	//12.2.4.26 Script data escaped end tag open state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE] = function scriptDataEscapedEndTagOpenState(cp) {
	    if (isAsciiLetter(cp)) {
	        this._createEndTagToken();
	        this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);
	    }
	
	    else {
	        this._emitChar('<');
	        this._emitChar('/');
	        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
	    }
	};
	
	
	//12.2.4.27 Script data escaped end tag name state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE] = function scriptDataEscapedEndTagNameState(cp) {
	    if (isAsciiUpper(cp)) {
	        this.currentToken.tagName += toAsciiLowerChar(cp);
	        this.tempBuff.push(cp);
	    }
	
	    else if (isAsciiLower(cp)) {
	        this.currentToken.tagName += toChar(cp);
	        this.tempBuff.push(cp);
	    }
	
	    else {
	        if (this._isAppropriateEndTagToken()) {
	            if (isWhitespace(cp)) {
	                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
	                return;
	            }
	
	            if (cp === $.SOLIDUS) {
	                this.state = SELF_CLOSING_START_TAG_STATE;
	                return;
	            }
	
	            if (cp === $.GREATER_THAN_SIGN) {
	                this._emitCurrentToken();
	                this.state = DATA_STATE;
	                return;
	            }
	        }
	
	        this._emitChar('<');
	        this._emitChar('/');
	        this._emitSeveralCodePoints(this.tempBuff);
	        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
	    }
	};
	
	
	//12.2.4.28 Script data double escape start state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE] = function scriptDataDoubleEscapeStartState(cp) {
	    if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
	        this.state = this.isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;
	        this._emitCodePoint(cp);
	    }
	
	    else if (isAsciiUpper(cp)) {
	        this.tempBuff.push(toAsciiLowerCodePoint(cp));
	        this._emitCodePoint(cp);
	    }
	
	    else if (isAsciiLower(cp)) {
	        this.tempBuff.push(cp);
	        this._emitCodePoint(cp);
	    }
	
	    else
	        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
	};
	
	
	//12.2.4.29 Script data double escaped state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_DOUBLE_ESCAPED_STATE] = function scriptDataDoubleEscapedState(cp) {
	    if (cp === $.HYPHEN_MINUS) {
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;
	        this._emitChar('-');
	    }
	
	    else if (cp === $.LESS_THAN_SIGN) {
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
	        this._emitChar('<');
	    }
	
	    else if (cp === $.NULL)
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
	
	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);
	
	    else
	        this._emitCodePoint(cp);
	};
	
	
	//12.2.4.30 Script data double escaped dash state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE] = function scriptDataDoubleEscapedDashState(cp) {
	    if (cp === $.HYPHEN_MINUS) {
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;
	        this._emitChar('-');
	    }
	
	    else if (cp === $.LESS_THAN_SIGN) {
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
	        this._emitChar('<');
	    }
	
	    else if (cp === $.NULL) {
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
	    }
	
	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);
	
	    else {
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
	        this._emitCodePoint(cp);
	    }
	};
	
	
	//12.2.4.31 Script data double escaped dash dash state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE] = function scriptDataDoubleEscapedDashDashState(cp) {
	    if (cp === $.HYPHEN_MINUS)
	        this._emitChar('-');
	
	    else if (cp === $.LESS_THAN_SIGN) {
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
	        this._emitChar('<');
	    }
	
	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.state = SCRIPT_DATA_STATE;
	        this._emitChar('>');
	    }
	
	    else if (cp === $.NULL) {
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
	    }
	
	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);
	
	    else {
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
	        this._emitCodePoint(cp);
	    }
	};
	
	
	//12.2.4.32 Script data double escaped less-than sign state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE] = function scriptDataDoubleEscapedLessThanSignState(cp) {
	    if (cp === $.SOLIDUS) {
	        this.tempBuff = [];
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;
	        this._emitChar('/');
	    }
	
	    else
	        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
	};
	
	
	//12.2.4.33 Script data double escape end state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE] = function scriptDataDoubleEscapeEndState(cp) {
	    if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
	        this.state = this.isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
	
	        this._emitCodePoint(cp);
	    }
	
	    else if (isAsciiUpper(cp)) {
	        this.tempBuff.push(toAsciiLowerCodePoint(cp));
	        this._emitCodePoint(cp);
	    }
	
	    else if (isAsciiLower(cp)) {
	        this.tempBuff.push(cp);
	        this._emitCodePoint(cp);
	    }
	
	    else
	        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
	};
	
	
	//12.2.4.34 Before attribute name state
	//------------------------------------------------------------------
	_[BEFORE_ATTRIBUTE_NAME_STATE] = function beforeAttributeNameState(cp) {
	    if (isWhitespace(cp))
	        return;
	
	    if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF)
	        this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);
	
	    else if (cp === $.EQUALS_SIGN) {
	        this._createAttr('=');
	        this.state = ATTRIBUTE_NAME_STATE;
	    }
	
	    else {
	        this._createAttr('');
	        this._reconsumeInState(ATTRIBUTE_NAME_STATE);
	    }
	};
	
	
	//12.2.4.35 Attribute name state
	//------------------------------------------------------------------
	_[ATTRIBUTE_NAME_STATE] = function attributeNameState(cp) {
	    if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {
	        this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);
	        this._unconsume();
	    }
	
	    else if (cp === $.EQUALS_SIGN)
	        this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);
	
	    else if (isAsciiUpper(cp))
	        this.currentAttr.name += toAsciiLowerChar(cp);
	
	    else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN)
	        this.currentAttr.name += toChar(cp);
	
	    else if (cp === $.NULL)
	        this.currentAttr.name += UNICODE.REPLACEMENT_CHARACTER;
	
	    else
	        this.currentAttr.name += toChar(cp);
	};
	
	
	//12.2.4.36 After attribute name state
	//------------------------------------------------------------------
	_[AFTER_ATTRIBUTE_NAME_STATE] = function afterAttributeNameState(cp) {
	    if (isWhitespace(cp))
	        return;
	
	    if (cp === $.SOLIDUS)
	        this.state = SELF_CLOSING_START_TAG_STATE;
	
	    else if (cp === $.EQUALS_SIGN)
	        this.state = BEFORE_ATTRIBUTE_VALUE_STATE;
	
	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }
	
	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);
	
	    else {
	        this._createAttr('');
	        this._reconsumeInState(ATTRIBUTE_NAME_STATE);
	    }
	};
	
	
	//12.2.4.37 Before attribute value state
	//------------------------------------------------------------------
	_[BEFORE_ATTRIBUTE_VALUE_STATE] = function beforeAttributeValueState(cp) {
	    if (isWhitespace(cp))
	        return;
	
	    if (cp === $.QUOTATION_MARK)
	        this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;
	
	    else if (cp === $.APOSTROPHE)
	        this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;
	
	    else
	        this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);
	};
	
	
	//12.2.4.38 Attribute value (double-quoted) state
	//------------------------------------------------------------------
	_[ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE] = function attributeValueDoubleQuotedState(cp) {
	    if (cp === $.QUOTATION_MARK)
	        this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
	
	    else if (cp === $.AMPERSAND) {
	        this.additionalAllowedCp = $.QUOTATION_MARK;
	        this.returnState = this.state;
	        this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
	    }
	
	    else if (cp === $.NULL)
	        this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;
	
	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);
	
	    else
	        this.currentAttr.value += toChar(cp);
	};
	
	
	//12.2.4.39 Attribute value (single-quoted) state
	//------------------------------------------------------------------
	_[ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE] = function attributeValueSingleQuotedState(cp) {
	    if (cp === $.APOSTROPHE)
	        this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
	
	    else if (cp === $.AMPERSAND) {
	        this.additionalAllowedCp = $.APOSTROPHE;
	        this.returnState = this.state;
	        this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
	    }
	
	    else if (cp === $.NULL)
	        this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;
	
	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);
	
	    else
	        this.currentAttr.value += toChar(cp);
	};
	
	
	//12.2.4.40 Attribute value (unquoted) state
	//------------------------------------------------------------------
	_[ATTRIBUTE_VALUE_UNQUOTED_STATE] = function attributeValueUnquotedState(cp) {
	    if (isWhitespace(cp))
	        this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
	
	    else if (cp === $.AMPERSAND) {
	        this.additionalAllowedCp = $.GREATER_THAN_SIGN;
	        this.returnState = this.state;
	        this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
	    }
	
	    else if (cp === $.GREATER_THAN_SIGN) {
	        this._leaveAttrValue(DATA_STATE);
	        this._emitCurrentToken();
	    }
	
	    else if (cp === $.NULL)
	        this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;
	
	    else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN ||
	             cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT)
	        this.currentAttr.value += toChar(cp);
	
	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);
	
	    else
	        this.currentAttr.value += toChar(cp);
	};
	
	
	//12.2.4.41 Character reference in attribute value state
	//------------------------------------------------------------------
	_[CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE] = function characterReferenceInAttributeValueState(cp) {
	    var referencedCodePoints = this._consumeCharacterReference(cp, true);
	
	    if (!this._ensureHibernation()) {
	        if (referencedCodePoints) {
	            for (var i = 0; i < referencedCodePoints.length; i++)
	                this.currentAttr.value += toChar(referencedCodePoints[i]);
	        }
	        else
	            this.currentAttr.value += '&';
	
	        this.state = this.returnState;
	    }
	};
	
	
	//12.2.4.42 After attribute value (quoted) state
	//------------------------------------------------------------------
	_[AFTER_ATTRIBUTE_VALUE_QUOTED_STATE] = function afterAttributeValueQuotedState(cp) {
	    if (isWhitespace(cp))
	        this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
	
	    else if (cp === $.SOLIDUS)
	        this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);
	
	    else if (cp === $.GREATER_THAN_SIGN) {
	        this._leaveAttrValue(DATA_STATE);
	        this._emitCurrentToken();
	    }
	
	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);
	
	    else
	        this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
	};
	
	
	//12.2.4.43 Self-closing start tag state
	//------------------------------------------------------------------
	_[SELF_CLOSING_START_TAG_STATE] = function selfClosingStartTagState(cp) {
	    if (cp === $.GREATER_THAN_SIGN) {
	        this.currentToken.selfClosing = true;
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }
	
	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);
	
	    else
	        this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
	};
	
	
	//12.2.4.44 Bogus comment state
	//------------------------------------------------------------------
	_[BOGUS_COMMENT_STATE] = function bogusCommentState() {
	    this._createCommentToken();
	    this._reconsumeInState(BOGUS_COMMENT_STATE_CONTINUATION);
	};
	
	//HACK: to support streaming and make BOGUS_COMMENT_STATE reentrant we've
	//introduced BOGUS_COMMENT_STATE_CONTINUATION state which will not produce
	//comment token on each call.
	_[BOGUS_COMMENT_STATE_CONTINUATION] = function bogusCommentStateContinuation(cp) {
	    while (true) {
	        if (cp === $.GREATER_THAN_SIGN) {
	            this.state = DATA_STATE;
	            break;
	        }
	
	        else if (cp === $.EOF) {
	            this._reconsumeInState(DATA_STATE);
	            break;
	        }
	
	        else {
	            this.currentToken.data += cp === $.NULL ? UNICODE.REPLACEMENT_CHARACTER : toChar(cp);
	
	            this._hibernationSnapshot();
	            cp = this._consume();
	
	            if (this._ensureHibernation())
	                return;
	        }
	    }
	
	    this._emitCurrentToken();
	};
	
	//12.2.4.45 Markup declaration open state
	//------------------------------------------------------------------
	_[MARKUP_DECLARATION_OPEN_STATE] = function markupDeclarationOpenState(cp) {
	    var dashDashMatch = this._consumeSubsequentIfMatch($$.DASH_DASH_STRING, cp, true),
	        doctypeMatch = !dashDashMatch && this._consumeSubsequentIfMatch($$.DOCTYPE_STRING, cp, false),
	        cdataMatch = !dashDashMatch && !doctypeMatch &&
	                     this.allowCDATA &&
	                     this._consumeSubsequentIfMatch($$.CDATA_START_STRING, cp, true);
	
	    if (!this._ensureHibernation()) {
	        if (dashDashMatch) {
	            this._createCommentToken();
	            this.state = COMMENT_START_STATE;
	        }
	
	        else if (doctypeMatch)
	            this.state = DOCTYPE_STATE;
	
	        else if (cdataMatch)
	            this.state = CDATA_SECTION_STATE;
	
	        else
	            this._reconsumeInState(BOGUS_COMMENT_STATE);
	    }
	};
	
	
	//12.2.4.46 Comment start state
	//------------------------------------------------------------------
	_[COMMENT_START_STATE] = function commentStartState(cp) {
	    if (cp === $.HYPHEN_MINUS)
	        this.state = COMMENT_START_DASH_STATE;
	
	    else if (cp === $.NULL) {
	        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
	        this.state = COMMENT_STATE;
	    }
	
	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }
	
	    else if (cp === $.EOF) {
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }
	
	    else {
	        this.currentToken.data += toChar(cp);
	        this.state = COMMENT_STATE;
	    }
	};
	
	
	//12.2.4.47 Comment start dash state
	//------------------------------------------------------------------
	_[COMMENT_START_DASH_STATE] = function commentStartDashState(cp) {
	    if (cp === $.HYPHEN_MINUS)
	        this.state = COMMENT_END_STATE;
	
	    else if (cp === $.NULL) {
	        this.currentToken.data += '-';
	        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
	        this.state = COMMENT_STATE;
	    }
	
	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }
	
	    else if (cp === $.EOF) {
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }
	
	    else {
	        this.currentToken.data += '-';
	        this.currentToken.data += toChar(cp);
	        this.state = COMMENT_STATE;
	    }
	};
	
	
	//12.2.4.48 Comment state
	//------------------------------------------------------------------
	_[COMMENT_STATE] = function commentState(cp) {
	    if (cp === $.HYPHEN_MINUS)
	        this.state = COMMENT_END_DASH_STATE;
	
	    else if (cp === $.NULL)
	        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
	
	    else if (cp === $.EOF) {
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }
	
	    else
	        this.currentToken.data += toChar(cp);
	};
	
	
	//12.2.4.49 Comment end dash state
	//------------------------------------------------------------------
	_[COMMENT_END_DASH_STATE] = function commentEndDashState(cp) {
	    if (cp === $.HYPHEN_MINUS)
	        this.state = COMMENT_END_STATE;
	
	    else if (cp === $.NULL) {
	        this.currentToken.data += '-';
	        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
	        this.state = COMMENT_STATE;
	    }
	
	    else if (cp === $.EOF) {
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }
	
	    else {
	        this.currentToken.data += '-';
	        this.currentToken.data += toChar(cp);
	        this.state = COMMENT_STATE;
	    }
	};
	
	
	//12.2.4.50 Comment end state
	//------------------------------------------------------------------
	_[COMMENT_END_STATE] = function commentEndState(cp) {
	    if (cp === $.GREATER_THAN_SIGN) {
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }
	
	    else if (cp === $.EXCLAMATION_MARK)
	        this.state = COMMENT_END_BANG_STATE;
	
	    else if (cp === $.HYPHEN_MINUS)
	        this.currentToken.data += '-';
	
	    else if (cp === $.NULL) {
	        this.currentToken.data += '--';
	        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
	        this.state = COMMENT_STATE;
	    }
	
	    else if (cp === $.EOF) {
	        this._reconsumeInState(DATA_STATE);
	        this._emitCurrentToken();
	    }
	
	    else {
	        this.currentToken.data += '--';
	        this.currentToken.data += toChar(cp);
	        this.state = COMMENT_STATE;
	    }
	};
	
	
	//12.2.4.51 Comment end bang state
	//------------------------------------------------------------------
	_[COMMENT_END_BANG_STATE] = function commentEndBangState(cp) {
	    if (cp === $.HYPHEN_MINUS) {
	        this.currentToken.data += '--!';
	        this.state = COMMENT_END_DASH_STATE;
	    }
	
	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }
	
	    else if (cp === $.NULL) {
	        this.currentToken.data += '--!';
	        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
	        this.state = COMMENT_STATE;
	    }
	
	    else if (cp === $.EOF) {
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }
	
	    else {
	        this.currentToken.data += '--!';
	        this.currentToken.data += toChar(cp);
	        this.state = COMMENT_STATE;
	    }
	};
	
	
	//12.2.4.52 DOCTYPE state
	//------------------------------------------------------------------
	_[DOCTYPE_STATE] = function doctypeState(cp) {
	    if (isWhitespace(cp))
	        return;
	
	    else if (cp === $.GREATER_THAN_SIGN) {
	        this._createDoctypeToken(null);
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }
	
	    else if (cp === $.EOF) {
	        this._createDoctypeToken(null);
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }
	    else {
	        this._createDoctypeToken('');
	        this._reconsumeInState(DOCTYPE_NAME_STATE);
	    }
	};
	
	
	//12.2.4.54 DOCTYPE name state
	//------------------------------------------------------------------
	_[DOCTYPE_NAME_STATE] = function doctypeNameState(cp) {
	    if (isWhitespace(cp) || cp === $.GREATER_THAN_SIGN || cp === $.EOF)
	        this._reconsumeInState(AFTER_DOCTYPE_NAME_STATE);
	
	    else if (isAsciiUpper(cp))
	        this.currentToken.name += toAsciiLowerChar(cp);
	
	    else if (cp === $.NULL)
	        this.currentToken.name += UNICODE.REPLACEMENT_CHARACTER;
	
	    else
	        this.currentToken.name += toChar(cp);
	};
	
	
	//12.2.4.55 After DOCTYPE name state
	//------------------------------------------------------------------
	_[AFTER_DOCTYPE_NAME_STATE] = function afterDoctypeNameState(cp) {
	    if (isWhitespace(cp))
	        return;
	
	    if (cp === $.GREATER_THAN_SIGN) {
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }
	
	    else {
	        var publicMatch = this._consumeSubsequentIfMatch($$.PUBLIC_STRING, cp, false),
	            systemMatch = !publicMatch && this._consumeSubsequentIfMatch($$.SYSTEM_STRING, cp, false);
	
	        if (!this._ensureHibernation()) {
	            if (publicMatch)
	                this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
	
	            else if (systemMatch)
	                this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
	
	            else {
	                this.currentToken.forceQuirks = true;
	                this.state = BOGUS_DOCTYPE_STATE;
	            }
	        }
	    }
	};
	
	
	//12.2.4.57 Before DOCTYPE public identifier state
	//------------------------------------------------------------------
	_[BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE] = function beforeDoctypePublicIdentifierState(cp) {
	    if (isWhitespace(cp))
	        return;
	
	    if (cp === $.QUOTATION_MARK) {
	        this.currentToken.publicId = '';
	        this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
	    }
	
	    else if (cp === $.APOSTROPHE) {
	        this.currentToken.publicId = '';
	        this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
	    }
	
	    else {
	        this.currentToken.forceQuirks = true;
	        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
	    }
	};
	
	
	//12.2.4.58 DOCTYPE public identifier (double-quoted) state
	//------------------------------------------------------------------
	_[DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE] = function doctypePublicIdentifierDoubleQuotedState(cp) {
	    if (cp === $.QUOTATION_MARK)
	        this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;
	
	    else if (cp === $.NULL)
	        this.currentToken.publicId += UNICODE.REPLACEMENT_CHARACTER;
	
	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }
	
	    else if (cp === $.EOF) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }
	
	    else
	        this.currentToken.publicId += toChar(cp);
	};
	
	
	//12.2.4.59 DOCTYPE public identifier (single-quoted) state
	//------------------------------------------------------------------
	_[DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE] = function doctypePublicIdentifierSingleQuotedState(cp) {
	    if (cp === $.APOSTROPHE)
	        this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;
	
	    else if (cp === $.NULL)
	        this.currentToken.publicId += UNICODE.REPLACEMENT_CHARACTER;
	
	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }
	
	    else if (cp === $.EOF) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }
	
	    else
	        this.currentToken.publicId += toChar(cp);
	};
	
	
	//12.2.4.61 Between DOCTYPE public and system identifiers state
	//------------------------------------------------------------------
	_[BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE] = function betweenDoctypePublicAndSystemIdentifiersState(cp) {
	    if (isWhitespace(cp))
	        return;
	
	    if (cp === $.GREATER_THAN_SIGN) {
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }
	
	    else if (cp === $.QUOTATION_MARK) {
	        this.currentToken.systemId = '';
	        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
	    }
	
	
	    else if (cp === $.APOSTROPHE) {
	        this.currentToken.systemId = '';
	        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
	    }
	
	    else {
	        this.currentToken.forceQuirks = true;
	        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
	    }
	};
	
	
	//12.2.4.63 Before DOCTYPE system identifier state
	//------------------------------------------------------------------
	_[BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE] = function beforeDoctypeSystemIdentifierState(cp) {
	    if (isWhitespace(cp))
	        return;
	
	    if (cp === $.QUOTATION_MARK) {
	        this.currentToken.systemId = '';
	        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
	    }
	
	    else if (cp === $.APOSTROPHE) {
	        this.currentToken.systemId = '';
	        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
	    }
	
	    else {
	        this.currentToken.forceQuirks = true;
	        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
	    }
	};
	
	
	//12.2.4.64 DOCTYPE system identifier (double-quoted) state
	//------------------------------------------------------------------
	_[DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE] = function doctypeSystemIdentifierDoubleQuotedState(cp) {
	    if (cp === $.QUOTATION_MARK)
	        this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
	
	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }
	
	    else if (cp === $.NULL)
	        this.currentToken.systemId += UNICODE.REPLACEMENT_CHARACTER;
	
	    else if (cp === $.EOF) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }
	
	    else
	        this.currentToken.systemId += toChar(cp);
	};
	
	
	//12.2.4.65 DOCTYPE system identifier (single-quoted) state
	//------------------------------------------------------------------
	_[DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE] = function doctypeSystemIdentifierSingleQuotedState(cp) {
	    if (cp === $.APOSTROPHE)
	        this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
	
	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }
	
	    else if (cp === $.NULL)
	        this.currentToken.systemId += UNICODE.REPLACEMENT_CHARACTER;
	
	    else if (cp === $.EOF) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }
	
	    else
	        this.currentToken.systemId += toChar(cp);
	};
	
	
	//12.2.4.66 After DOCTYPE system identifier state
	//------------------------------------------------------------------
	_[AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE] = function afterDoctypeSystemIdentifierState(cp) {
	    if (isWhitespace(cp))
	        return;
	
	    if (cp === $.GREATER_THAN_SIGN) {
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }
	
	    else if (cp === $.EOF) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }
	
	    else
	        this.state = BOGUS_DOCTYPE_STATE;
	};
	
	
	//12.2.4.67 Bogus DOCTYPE state
	//------------------------------------------------------------------
	_[BOGUS_DOCTYPE_STATE] = function bogusDoctypeState(cp) {
	    if (cp === $.GREATER_THAN_SIGN) {
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }
	
	    else if (cp === $.EOF) {
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }
	};
	
	
	//12.2.4.68 CDATA section state
	//------------------------------------------------------------------
	_[CDATA_SECTION_STATE] = function cdataSectionState(cp) {
	    while (true) {
	        if (cp === $.EOF) {
	            this._reconsumeInState(DATA_STATE);
	            break;
	        }
	
	        else {
	            var cdataEndMatch = this._consumeSubsequentIfMatch($$.CDATA_END_STRING, cp, true);
	
	            if (this._ensureHibernation())
	                break;
	
	            if (cdataEndMatch) {
	                this.state = DATA_STATE;
	                break;
	            }
	
	            this._emitCodePoint(cp);
	
	            this._hibernationSnapshot();
	            cp = this._consume();
	
	            if (this._ensureHibernation())
	                break;
	        }
	    }
	};


/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var UNICODE = __webpack_require__(303);
	
	//Aliases
	var $ = UNICODE.CODE_POINTS;
	
	//Utils
	
	//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline
	//this functions if they will be situated in another module due to context switch.
	//Always perform inlining check before modifying this functions ('node --trace-inlining').
	function isSurrogatePair(cp1, cp2) {
	    return cp1 >= 0xD800 && cp1 <= 0xDBFF && cp2 >= 0xDC00 && cp2 <= 0xDFFF;
	}
	
	function getSurrogatePairCodePoint(cp1, cp2) {
	    return (cp1 - 0xD800) * 0x400 + 0x2400 + cp2;
	}
	
	
	//Const
	var DEFAULT_BUFFER_WATERLINE = 1 << 16;
	
	
	//Preprocessor
	//NOTE: HTML input preprocessing
	//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)
	var Preprocessor = module.exports = function () {
	    this.html = null;
	
	    this.pos = -1;
	    this.lastGapPos = -1;
	    this.lastCharPos = -1;
	    this.droppedBufferSize = 0;
	
	    this.gapStack = [];
	
	    this.skipNextNewLine = false;
	
	    this.lastChunkWritten = false;
	    this.endOfChunkHit = false;
	    this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
	};
	
	Object.defineProperty(Preprocessor.prototype, 'sourcePos', {
	    get: function () {
	        return this.droppedBufferSize + this.pos;
	    }
	});
	
	Preprocessor.prototype.dropParsedChunk = function () {
	    if (this.pos > this.bufferWaterline) {
	        this.lastCharPos -= this.pos;
	        this.droppedBufferSize += this.pos;
	        this.html = this.html.substring(this.pos);
	        this.pos = 0;
	        this.lastGapPos = -1;
	        this.gapStack = [];
	    }
	};
	
	Preprocessor.prototype._addGap = function () {
	    this.gapStack.push(this.lastGapPos);
	    this.lastGapPos = this.pos;
	};
	
	Preprocessor.prototype._processHighRangeCodePoint = function (cp) {
	    //NOTE: try to peek a surrogate pair
	    if (this.pos !== this.lastCharPos) {
	        var nextCp = this.html.charCodeAt(this.pos + 1);
	
	        if (isSurrogatePair(cp, nextCp)) {
	            //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.
	            this.pos++;
	            cp = getSurrogatePairCodePoint(cp, nextCp);
	
	            //NOTE: add gap that should be avoided during retreat
	            this._addGap();
	        }
	    }
	
	    // NOTE: we've hit the end of chunk, stop processing at this point
	    else if (!this.lastChunkWritten) {
	        this.endOfChunkHit = true;
	        return $.EOF;
	    }
	
	    return cp;
	};
	
	Preprocessor.prototype.write = function (chunk, isLastChunk) {
	    if (this.html)
	        this.html += chunk;
	
	    else
	        this.html = chunk;
	
	    this.lastCharPos = this.html.length - 1;
	    this.endOfChunkHit = false;
	    this.lastChunkWritten = isLastChunk;
	};
	
	Preprocessor.prototype.insertHtmlAtCurrentPos = function (chunk) {
	    this.html = this.html.substring(0, this.pos + 1) +
	                chunk +
	                this.html.substring(this.pos + 1, this.html.length);
	
	    this.lastCharPos = this.html.length - 1;
	    this.endOfChunkHit = false;
	};
	
	
	Preprocessor.prototype.advance = function () {
	    this.pos++;
	
	    if (this.pos > this.lastCharPos) {
	        if (!this.lastChunkWritten)
	            this.endOfChunkHit = true;
	
	        return $.EOF;
	    }
	
	    var cp = this.html.charCodeAt(this.pos);
	
	    //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character
	    //must be ignored.
	    if (this.skipNextNewLine && cp === $.LINE_FEED) {
	        this.skipNextNewLine = false;
	        this._addGap();
	        return this.advance();
	    }
	
	    //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters
	    if (cp === $.CARRIAGE_RETURN) {
	        this.skipNextNewLine = true;
	        return $.LINE_FEED;
	    }
	
	    this.skipNextNewLine = false;
	
	    //OPTIMIZATION: first perform check if the code point in the allowed range that covers most common
	    //HTML input (e.g. ASCII codes) to avoid performance-cost operations for high-range code points.
	    return cp >= 0xD800 ? this._processHighRangeCodePoint(cp) : cp;
	};
	
	Preprocessor.prototype.retreat = function () {
	    if (this.pos === this.lastGapPos) {
	        this.lastGapPos = this.gapStack.pop();
	        this.pos--;
	    }
	
	    this.pos--;
	};
	


/***/ },
/* 303 */
/***/ function(module, exports) {

	'use strict';
	
	exports.REPLACEMENT_CHARACTER = '\uFFFD';
	
	exports.CODE_POINTS = {
	    EOF: -1,
	    NULL: 0x00,
	    TABULATION: 0x09,
	    CARRIAGE_RETURN: 0x0D,
	    LINE_FEED: 0x0A,
	    FORM_FEED: 0x0C,
	    SPACE: 0x20,
	    EXCLAMATION_MARK: 0x21,
	    QUOTATION_MARK: 0x22,
	    NUMBER_SIGN: 0x23,
	    AMPERSAND: 0x26,
	    APOSTROPHE: 0x27,
	    HYPHEN_MINUS: 0x2D,
	    SOLIDUS: 0x2F,
	    DIGIT_0: 0x30,
	    DIGIT_9: 0x39,
	    SEMICOLON: 0x3B,
	    LESS_THAN_SIGN: 0x3C,
	    EQUALS_SIGN: 0x3D,
	    GREATER_THAN_SIGN: 0x3E,
	    QUESTION_MARK: 0x3F,
	    LATIN_CAPITAL_A: 0x41,
	    LATIN_CAPITAL_F: 0x46,
	    LATIN_CAPITAL_X: 0x58,
	    LATIN_CAPITAL_Z: 0x5A,
	    GRAVE_ACCENT: 0x60,
	    LATIN_SMALL_A: 0x61,
	    LATIN_SMALL_F: 0x66,
	    LATIN_SMALL_X: 0x78,
	    LATIN_SMALL_Z: 0x7A,
	    REPLACEMENT_CHARACTER: 0xFFFD
	};
	
	exports.CODE_POINT_SEQUENCES = {
	    DASH_DASH_STRING: [0x2D, 0x2D], //--
	    DOCTYPE_STRING: [0x44, 0x4F, 0x43, 0x54, 0x59, 0x50, 0x45], //DOCTYPE
	    CDATA_START_STRING: [0x5B, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5B], //[CDATA[
	    CDATA_END_STRING: [0x5D, 0x5D, 0x3E], //]]>
	    SCRIPT_STRING: [0x73, 0x63, 0x72, 0x69, 0x70, 0x74], //script
	    PUBLIC_STRING: [0x50, 0x55, 0x42, 0x4C, 0x49, 0x43], //PUBLIC
	    SYSTEM_STRING: [0x53, 0x59, 0x53, 0x54, 0x45, 0x4D] //SYSTEM
	};


/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var UNICODE = __webpack_require__(303);
	
	//Aliases
	var $ = UNICODE.CODE_POINTS;
	
	
	exports.assign = function (tokenizer) {
	    //NOTE: obtain Tokenizer proto this way to avoid module circular references
	    var tokenizerProto = Object.getPrototypeOf(tokenizer),
	        tokenStartOffset = -1,
	        tokenCol = -1,
	        tokenLine = 1,
	        isEol = false,
	        lineStartPosStack = [0],
	        lineStartPos = 0,
	        col = -1,
	        line = 1;
	
	    function attachLocationInfo(token) {
	        /**
	         * @typedef {Object} LocationInfo
	         *
	         * @property {Number} line - One-based line index
	         * @property {Number} col - One-based column index
	         * @property {Number} startOffset - Zero-based first character index
	         * @property {Number} endOffset - Zero-based last character index
	         */
	        token.location = {
	            line: tokenLine,
	            col: tokenCol,
	            startOffset: tokenStartOffset,
	            endOffset: -1
	        };
	    }
	
	    //NOTE: patch consumption method to track line/col information
	    tokenizer._consume = function () {
	        var cp = tokenizerProto._consume.call(this);
	
	        //NOTE: LF should be in the last column of the line
	        if (isEol) {
	            isEol = false;
	            line++;
	            lineStartPosStack.push(this.preprocessor.sourcePos);
	            lineStartPos = this.preprocessor.sourcePos;
	        }
	
	        if (cp === $.LINE_FEED)
	            isEol = true;
	
	        col = this.preprocessor.sourcePos - lineStartPos + 1;
	
	        return cp;
	    };
	
	    tokenizer._unconsume = function () {
	        tokenizerProto._unconsume.call(this);
	        isEol = false;
	
	        while (lineStartPos > this.preprocessor.sourcePos && lineStartPosStack.length > 1) {
	            lineStartPos = lineStartPosStack.pop();
	            line--;
	        }
	
	        col = this.preprocessor.sourcePos - lineStartPos + 1;
	    };
	
	    //NOTE: patch token creation methods and attach location objects
	    tokenizer._createStartTagToken = function () {
	        tokenizerProto._createStartTagToken.call(this);
	        attachLocationInfo(this.currentToken);
	    };
	
	    tokenizer._createEndTagToken = function () {
	        tokenizerProto._createEndTagToken.call(this);
	        attachLocationInfo(this.currentToken);
	    };
	
	    tokenizer._createCommentToken = function () {
	        tokenizerProto._createCommentToken.call(this);
	        attachLocationInfo(this.currentToken);
	    };
	
	    tokenizer._createDoctypeToken = function (initialName) {
	        tokenizerProto._createDoctypeToken.call(this, initialName);
	        attachLocationInfo(this.currentToken);
	    };
	
	    tokenizer._createCharacterToken = function (type, ch) {
	        tokenizerProto._createCharacterToken.call(this, type, ch);
	        attachLocationInfo(this.currentCharacterToken);
	    };
	
	    tokenizer._createAttr = function (attrNameFirstCh) {
	        tokenizerProto._createAttr.call(this, attrNameFirstCh);
	        this.currentAttrLocation = {
	            line: line,
	            col: col,
	            startOffset: this.preprocessor.sourcePos,
	            endOffset: -1
	        };
	    };
	
	    tokenizer._leaveAttrName = function (toState) {
	        tokenizerProto._leaveAttrName.call(this, toState);
	        this._attachCurrentAttrLocationInfo();
	    };
	
	    tokenizer._leaveAttrValue = function (toState) {
	        tokenizerProto._leaveAttrValue.call(this, toState);
	        this._attachCurrentAttrLocationInfo();
	    };
	
	    tokenizer._attachCurrentAttrLocationInfo = function () {
	        this.currentAttrLocation.endOffset = this.preprocessor.sourcePos;
	
	        if (!this.currentToken.location.attrs)
	            this.currentToken.location.attrs = {};
	
	        /**
	         * @typedef {Object} StartTagLocationInfo
	         * @extends LocationInfo
	         *
	         * @property {Dictionary<String, LocationInfo>} attrs - Start tag attributes' location info.
	         */
	        this.currentToken.location.attrs[this.currentAttr.name] = this.currentAttrLocation;
	    };
	
	    //NOTE: patch token emission methods to determine end location
	    tokenizer._emitCurrentToken = function () {
	        //NOTE: if we have pending character token make it's end location equal to the
	        //current token's start location.
	        if (this.currentCharacterToken)
	            this.currentCharacterToken.location.endOffset = this.currentToken.location.startOffset;
	
	        this.currentToken.location.endOffset = this.preprocessor.sourcePos + 1;
	        tokenizerProto._emitCurrentToken.call(this);
	    };
	
	    tokenizer._emitCurrentCharacterToken = function () {
	        //NOTE: if we have character token and it's location wasn't set in the _emitCurrentToken(),
	        //then set it's location at the current preprocessor position.
	        //We don't need to increment preprocessor position, since character token
	        //emission is always forced by the start of the next character token here.
	        //So, we already have advanced position.
	        if (this.currentCharacterToken && this.currentCharacterToken.location.endOffset === -1)
	            this.currentCharacterToken.location.endOffset = this.preprocessor.sourcePos;
	
	        tokenizerProto._emitCurrentCharacterToken.call(this);
	    };
	
	    //NOTE: patch initial states for each mode to obtain token start position
	    Object.keys(tokenizerProto.MODE)
	
	        .map(function (modeName) {
	            return tokenizerProto.MODE[modeName];
	        })
	
	        .forEach(function (state) {
	            tokenizer[state] = function (cp) {
	                tokenStartOffset = this.preprocessor.sourcePos;
	                tokenLine = line;
	                tokenCol = col;
	                tokenizerProto[state].call(this, cp);
	            };
	        });
	};


/***/ },
/* 305 */
/***/ function(module, exports) {

	'use strict';
	
	//NOTE: this file contains auto-generated trie structure that is used for named entity references consumption
	//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#tokenizing-character-references and
	//http://www.whatwg.org/specs/web-apps/current-work/multipage/named-character-references.html#named-character-references)
	module.exports = {65:{l:{69:{l:{108:{l:{105:{l:{103:{l:{59:{c:[198]}},c:[198]}}}}}}},77:{l:{80:{l:{59:{c:[38]}},c:[38]}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[193]}},c:[193]}}}}}}}}},98:{l:{114:{l:{101:{l:{118:{l:{101:{l:{59:{c:[258]}}}}}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[194]}},c:[194]}}}}},121:{l:{59:{c:[1040]}}}}},102:{l:{114:{l:{59:{c:[120068]}}}}},103:{l:{114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[192]}},c:[192]}}}}}}}}},108:{l:{112:{l:{104:{l:{97:{l:{59:{c:[913]}}}}}}}}},109:{l:{97:{l:{99:{l:{114:{l:{59:{c:[256]}}}}}}}}},110:{l:{100:{l:{59:{c:[10835]}}}}},111:{l:{103:{l:{111:{l:{110:{l:{59:{c:[260]}}}}}}},112:{l:{102:{l:{59:{c:[120120]}}}}}}},112:{l:{112:{l:{108:{l:{121:{l:{70:{l:{117:{l:{110:{l:{99:{l:{116:{l:{105:{l:{111:{l:{110:{l:{59:{c:[8289]}}}}}}}}}}}}}}}}}}}}}}}}},114:{l:{105:{l:{110:{l:{103:{l:{59:{c:[197]}},c:[197]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119964]}}}}},115:{l:{105:{l:{103:{l:{110:{l:{59:{c:[8788]}}}}}}}}}}},116:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[195]}},c:[195]}}}}}}}}},117:{l:{109:{l:{108:{l:{59:{c:[196]}},c:[196]}}}}}}},66:{l:{97:{l:{99:{l:{107:{l:{115:{l:{108:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8726]}}}}}}}}}}}}}}},114:{l:{118:{l:{59:{c:[10983]}}},119:{l:{101:{l:{100:{l:{59:{c:[8966]}}}}}}}}}}},99:{l:{121:{l:{59:{c:[1041]}}}}},101:{l:{99:{l:{97:{l:{117:{l:{115:{l:{101:{l:{59:{c:[8757]}}}}}}}}}}},114:{l:{110:{l:{111:{l:{117:{l:{108:{l:{108:{l:{105:{l:{115:{l:{59:{c:[8492]}}}}}}}}}}}}}}}}},116:{l:{97:{l:{59:{c:[914]}}}}}}},102:{l:{114:{l:{59:{c:[120069]}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120121]}}}}}}},114:{l:{101:{l:{118:{l:{101:{l:{59:{c:[728]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8492]}}}}}}},117:{l:{109:{l:{112:{l:{101:{l:{113:{l:{59:{c:[8782]}}}}}}}}}}}}},67:{l:{72:{l:{99:{l:{121:{l:{59:{c:[1063]}}}}}}},79:{l:{80:{l:{89:{l:{59:{c:[169]}},c:[169]}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[262]}}}}}}}}},112:{l:{59:{c:[8914]},105:{l:{116:{l:{97:{l:{108:{l:{68:{l:{105:{l:{102:{l:{102:{l:{101:{l:{114:{l:{101:{l:{110:{l:{116:{l:{105:{l:{97:{l:{108:{l:{68:{l:{59:{c:[8517]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},121:{l:{108:{l:{101:{l:{121:{l:{115:{l:{59:{c:[8493]}}}}}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[268]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[199]}},c:[199]}}}}}}},105:{l:{114:{l:{99:{l:{59:{c:[264]}}}}}}},111:{l:{110:{l:{105:{l:{110:{l:{116:{l:{59:{c:[8752]}}}}}}}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[266]}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{108:{l:{97:{l:{59:{c:[184]}}}}}}}}}}},110:{l:{116:{l:{101:{l:{114:{l:{68:{l:{111:{l:{116:{l:{59:{c:[183]}}}}}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[8493]}}}}},104:{l:{105:{l:{59:{c:[935]}}}}},105:{l:{114:{l:{99:{l:{108:{l:{101:{l:{68:{l:{111:{l:{116:{l:{59:{c:[8857]}}}}}}},77:{l:{105:{l:{110:{l:{117:{l:{115:{l:{59:{c:[8854]}}}}}}}}}}},80:{l:{108:{l:{117:{l:{115:{l:{59:{c:[8853]}}}}}}}}},84:{l:{105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[8855]}}}}}}}}}}}}}}}}}}}}},108:{l:{111:{l:{99:{l:{107:{l:{119:{l:{105:{l:{115:{l:{101:{l:{67:{l:{111:{l:{110:{l:{116:{l:{111:{l:{117:{l:{114:{l:{73:{l:{110:{l:{116:{l:{101:{l:{103:{l:{114:{l:{97:{l:{108:{l:{59:{c:[8754]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},115:{l:{101:{l:{67:{l:{117:{l:{114:{l:{108:{l:{121:{l:{68:{l:{111:{l:{117:{l:{98:{l:{108:{l:{101:{l:{81:{l:{117:{l:{111:{l:{116:{l:{101:{l:{59:{c:[8221]}}}}}}}}}}}}}}}}}}}}}}},81:{l:{117:{l:{111:{l:{116:{l:{101:{l:{59:{c:[8217]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},111:{l:{108:{l:{111:{l:{110:{l:{59:{c:[8759]},101:{l:{59:{c:[10868]}}}}}}}}},110:{l:{103:{l:{114:{l:{117:{l:{101:{l:{110:{l:{116:{l:{59:{c:[8801]}}}}}}}}}}}}},105:{l:{110:{l:{116:{l:{59:{c:[8751]}}}}}}},116:{l:{111:{l:{117:{l:{114:{l:{73:{l:{110:{l:{116:{l:{101:{l:{103:{l:{114:{l:{97:{l:{108:{l:{59:{c:[8750]}}}}}}}}}}}}}}}}}}}}}}}}}}},112:{l:{102:{l:{59:{c:[8450]}}},114:{l:{111:{l:{100:{l:{117:{l:{99:{l:{116:{l:{59:{c:[8720]}}}}}}}}}}}}}}},117:{l:{110:{l:{116:{l:{101:{l:{114:{l:{67:{l:{108:{l:{111:{l:{99:{l:{107:{l:{119:{l:{105:{l:{115:{l:{101:{l:{67:{l:{111:{l:{110:{l:{116:{l:{111:{l:{117:{l:{114:{l:{73:{l:{110:{l:{116:{l:{101:{l:{103:{l:{114:{l:{97:{l:{108:{l:{59:{c:[8755]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},114:{l:{111:{l:{115:{l:{115:{l:{59:{c:[10799]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119966]}}}}}}},117:{l:{112:{l:{59:{c:[8915]},67:{l:{97:{l:{112:{l:{59:{c:[8781]}}}}}}}}}}}}},68:{l:{68:{l:{59:{c:[8517]},111:{l:{116:{l:{114:{l:{97:{l:{104:{l:{100:{l:{59:{c:[10513]}}}}}}}}}}}}}}},74:{l:{99:{l:{121:{l:{59:{c:[1026]}}}}}}},83:{l:{99:{l:{121:{l:{59:{c:[1029]}}}}}}},90:{l:{99:{l:{121:{l:{59:{c:[1039]}}}}}}},97:{l:{103:{l:{103:{l:{101:{l:{114:{l:{59:{c:[8225]}}}}}}}}},114:{l:{114:{l:{59:{c:[8609]}}}}},115:{l:{104:{l:{118:{l:{59:{c:[10980]}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[270]}}}}}}}}},121:{l:{59:{c:[1044]}}}}},101:{l:{108:{l:{59:{c:[8711]},116:{l:{97:{l:{59:{c:[916]}}}}}}}}},102:{l:{114:{l:{59:{c:[120071]}}}}},105:{l:{97:{l:{99:{l:{114:{l:{105:{l:{116:{l:{105:{l:{99:{l:{97:{l:{108:{l:{65:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[180]}}}}}}}}}}},68:{l:{111:{l:{116:{l:{59:{c:[729]}}},117:{l:{98:{l:{108:{l:{101:{l:{65:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[733]}}}}}}}}}}}}}}}}}}}}}}},71:{l:{114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[96]}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[732]}}}}}}}}}}}}}}}}}}}}}}}}}}},109:{l:{111:{l:{110:{l:{100:{l:{59:{c:[8900]}}}}}}}}}}},102:{l:{102:{l:{101:{l:{114:{l:{101:{l:{110:{l:{116:{l:{105:{l:{97:{l:{108:{l:{68:{l:{59:{c:[8518]}}}}}}}}}}}}}}}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120123]}}}}},116:{l:{59:{c:[168]},68:{l:{111:{l:{116:{l:{59:{c:[8412]}}}}}}},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8784]}}}}}}}}}}}}},117:{l:{98:{l:{108:{l:{101:{l:{67:{l:{111:{l:{110:{l:{116:{l:{111:{l:{117:{l:{114:{l:{73:{l:{110:{l:{116:{l:{101:{l:{103:{l:{114:{l:{97:{l:{108:{l:{59:{c:[8751]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},68:{l:{111:{l:{116:{l:{59:{c:[168]}}},119:{l:{110:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8659]}}}}}}}}}}}}}}}}}}},76:{l:{101:{l:{102:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8656]}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8660]}}}}}}}}}}}}}}}}}}}}},84:{l:{101:{l:{101:{l:{59:{c:[10980]}}}}}}}}}}}}},111:{l:{110:{l:{103:{l:{76:{l:{101:{l:{102:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10232]}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10234]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10233]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8658]}}}}}}}}}}},84:{l:{101:{l:{101:{l:{59:{c:[8872]}}}}}}}}}}}}}}}}},85:{l:{112:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8657]}}}}}}}}}}},68:{l:{111:{l:{119:{l:{110:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8661]}}}}}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{114:{l:{116:{l:{105:{l:{99:{l:{97:{l:{108:{l:{66:{l:{97:{l:{114:{l:{59:{c:[8741]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},119:{l:{110:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8595]},66:{l:{97:{l:{114:{l:{59:{c:[10515]}}}}}}},85:{l:{112:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8693]}}}}}}}}}}}}}}}}}}}}}}}}},66:{l:{114:{l:{101:{l:{118:{l:{101:{l:{59:{c:[785]}}}}}}}}}}},76:{l:{101:{l:{102:{l:{116:{l:{82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10576]}}}}}}}}}}}}}}}}}}}}}}},84:{l:{101:{l:{101:{l:{86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10590]}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[8637]},66:{l:{97:{l:{114:{l:{59:{c:[10582]}}}}}}}}}}}}}}}}}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{84:{l:{101:{l:{101:{l:{86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10591]}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[8641]},66:{l:{97:{l:{114:{l:{59:{c:[10583]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},84:{l:{101:{l:{101:{l:{59:{c:[8868]},65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8615]}}}}}}}}}}}}}}}}},97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8659]}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119967]}}}}},116:{l:{114:{l:{111:{l:{107:{l:{59:{c:[272]}}}}}}}}}}}}},69:{l:{78:{l:{71:{l:{59:{c:[330]}}}}},84:{l:{72:{l:{59:{c:[208]}},c:[208]}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[201]}},c:[201]}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[282]}}}}}}}}},105:{l:{114:{l:{99:{l:{59:{c:[202]}},c:[202]}}}}},121:{l:{59:{c:[1069]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[278]}}}}}}},102:{l:{114:{l:{59:{c:[120072]}}}}},103:{l:{114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[200]}},c:[200]}}}}}}}}},108:{l:{101:{l:{109:{l:{101:{l:{110:{l:{116:{l:{59:{c:[8712]}}}}}}}}}}}}},109:{l:{97:{l:{99:{l:{114:{l:{59:{c:[274]}}}}}}},112:{l:{116:{l:{121:{l:{83:{l:{109:{l:{97:{l:{108:{l:{108:{l:{83:{l:{113:{l:{117:{l:{97:{l:{114:{l:{101:{l:{59:{c:[9723]}}}}}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{114:{l:{121:{l:{83:{l:{109:{l:{97:{l:{108:{l:{108:{l:{83:{l:{113:{l:{117:{l:{97:{l:{114:{l:{101:{l:{59:{c:[9643]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},111:{l:{103:{l:{111:{l:{110:{l:{59:{c:[280]}}}}}}},112:{l:{102:{l:{59:{c:[120124]}}}}}}},112:{l:{115:{l:{105:{l:{108:{l:{111:{l:{110:{l:{59:{c:[917]}}}}}}}}}}}}},113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[10869]},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8770]}}}}}}}}}}}}}}},105:{l:{108:{l:{105:{l:{98:{l:{114:{l:{105:{l:{117:{l:{109:{l:{59:{c:[8652]}}}}}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8496]}}}}},105:{l:{109:{l:{59:{c:[10867]}}}}}}},116:{l:{97:{l:{59:{c:[919]}}}}},117:{l:{109:{l:{108:{l:{59:{c:[203]}},c:[203]}}}}},120:{l:{105:{l:{115:{l:{116:{l:{115:{l:{59:{c:[8707]}}}}}}}}},112:{l:{111:{l:{110:{l:{101:{l:{110:{l:{116:{l:{105:{l:{97:{l:{108:{l:{69:{l:{59:{c:[8519]}}}}}}}}}}}}}}}}}}}}}}}}},70:{l:{99:{l:{121:{l:{59:{c:[1060]}}}}},102:{l:{114:{l:{59:{c:[120073]}}}}},105:{l:{108:{l:{108:{l:{101:{l:{100:{l:{83:{l:{109:{l:{97:{l:{108:{l:{108:{l:{83:{l:{113:{l:{117:{l:{97:{l:{114:{l:{101:{l:{59:{c:[9724]}}}}}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{114:{l:{121:{l:{83:{l:{109:{l:{97:{l:{108:{l:{108:{l:{83:{l:{113:{l:{117:{l:{97:{l:{114:{l:{101:{l:{59:{c:[9642]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120125]}}}}},114:{l:{65:{l:{108:{l:{108:{l:{59:{c:[8704]}}}}}}}}},117:{l:{114:{l:{105:{l:{101:{l:{114:{l:{116:{l:{114:{l:{102:{l:{59:{c:[8497]}}}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8497]}}}}}}}}},71:{l:{74:{l:{99:{l:{121:{l:{59:{c:[1027]}}}}}}},84:{l:{59:{c:[62]}},c:[62]},97:{l:{109:{l:{109:{l:{97:{l:{59:{c:[915]},100:{l:{59:{c:[988]}}}}}}}}}}},98:{l:{114:{l:{101:{l:{118:{l:{101:{l:{59:{c:[286]}}}}}}}}}}},99:{l:{101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[290]}}}}}}}}},105:{l:{114:{l:{99:{l:{59:{c:[284]}}}}}}},121:{l:{59:{c:[1043]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[288]}}}}}}},102:{l:{114:{l:{59:{c:[120074]}}}}},103:{l:{59:{c:[8921]}}},111:{l:{112:{l:{102:{l:{59:{c:[120126]}}}}}}},114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8805]},76:{l:{101:{l:{115:{l:{115:{l:{59:{c:[8923]}}}}}}}}}}}}}}}}}}},70:{l:{117:{l:{108:{l:{108:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8807]}}}}}}}}}}}}}}}}}}},71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{59:{c:[10914]}}}}}}}}}}}}}}},76:{l:{101:{l:{115:{l:{115:{l:{59:{c:[8823]}}}}}}}}},83:{l:{108:{l:{97:{l:{110:{l:{116:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[10878]}}}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8819]}}}}}}}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119970]}}}}}}},116:{l:{59:{c:[8811]}}}}},72:{l:{65:{l:{82:{l:{68:{l:{99:{l:{121:{l:{59:{c:[1066]}}}}}}}}}}},97:{l:{99:{l:{101:{l:{107:{l:{59:{c:[711]}}}}}}},116:{l:{59:{c:[94]}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[292]}}}}}}}}},102:{l:{114:{l:{59:{c:[8460]}}}}},105:{l:{108:{l:{98:{l:{101:{l:{114:{l:{116:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8459]}}}}}}}}}}}}}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[8461]}}}}},114:{l:{105:{l:{122:{l:{111:{l:{110:{l:{116:{l:{97:{l:{108:{l:{76:{l:{105:{l:{110:{l:{101:{l:{59:{c:[9472]}}}}}}}}}}}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8459]}}}}},116:{l:{114:{l:{111:{l:{107:{l:{59:{c:[294]}}}}}}}}}}},117:{l:{109:{l:{112:{l:{68:{l:{111:{l:{119:{l:{110:{l:{72:{l:{117:{l:{109:{l:{112:{l:{59:{c:[8782]}}}}}}}}}}}}}}}}},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8783]}}}}}}}}}}}}}}}}}}},73:{l:{69:{l:{99:{l:{121:{l:{59:{c:[1045]}}}}}}},74:{l:{108:{l:{105:{l:{103:{l:{59:{c:[306]}}}}}}}}},79:{l:{99:{l:{121:{l:{59:{c:[1025]}}}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[205]}},c:[205]}}}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[206]}},c:[206]}}}}},121:{l:{59:{c:[1048]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[304]}}}}}}},102:{l:{114:{l:{59:{c:[8465]}}}}},103:{l:{114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[204]}},c:[204]}}}}}}}}},109:{l:{59:{c:[8465]},97:{l:{99:{l:{114:{l:{59:{c:[298]}}}}},103:{l:{105:{l:{110:{l:{97:{l:{114:{l:{121:{l:{73:{l:{59:{c:[8520]}}}}}}}}}}}}}}}}},112:{l:{108:{l:{105:{l:{101:{l:{115:{l:{59:{c:[8658]}}}}}}}}}}}}},110:{l:{116:{l:{59:{c:[8748]},101:{l:{103:{l:{114:{l:{97:{l:{108:{l:{59:{c:[8747]}}}}}}}}},114:{l:{115:{l:{101:{l:{99:{l:{116:{l:{105:{l:{111:{l:{110:{l:{59:{c:[8898]}}}}}}}}}}}}}}}}}}}}},118:{l:{105:{l:{115:{l:{105:{l:{98:{l:{108:{l:{101:{l:{67:{l:{111:{l:{109:{l:{109:{l:{97:{l:{59:{c:[8291]}}}}}}}}}}},84:{l:{105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[8290]}}}}}}}}}}}}}}}}}}}}}}}}}}},111:{l:{103:{l:{111:{l:{110:{l:{59:{c:[302]}}}}}}},112:{l:{102:{l:{59:{c:[120128]}}}}},116:{l:{97:{l:{59:{c:[921]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8464]}}}}}}},116:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[296]}}}}}}}}}}},117:{l:{107:{l:{99:{l:{121:{l:{59:{c:[1030]}}}}}}},109:{l:{108:{l:{59:{c:[207]}},c:[207]}}}}}}},74:{l:{99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[308]}}}}}}},121:{l:{59:{c:[1049]}}}}},102:{l:{114:{l:{59:{c:[120077]}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120129]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119973]}}}}},101:{l:{114:{l:{99:{l:{121:{l:{59:{c:[1032]}}}}}}}}}}},117:{l:{107:{l:{99:{l:{121:{l:{59:{c:[1028]}}}}}}}}}}},75:{l:{72:{l:{99:{l:{121:{l:{59:{c:[1061]}}}}}}},74:{l:{99:{l:{121:{l:{59:{c:[1036]}}}}}}},97:{l:{112:{l:{112:{l:{97:{l:{59:{c:[922]}}}}}}}}},99:{l:{101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[310]}}}}}}}}},121:{l:{59:{c:[1050]}}}}},102:{l:{114:{l:{59:{c:[120078]}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120130]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119974]}}}}}}}}},76:{l:{74:{l:{99:{l:{121:{l:{59:{c:[1033]}}}}}}},84:{l:{59:{c:[60]}},c:[60]},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[313]}}}}}}}}},109:{l:{98:{l:{100:{l:{97:{l:{59:{c:[923]}}}}}}}}},110:{l:{103:{l:{59:{c:[10218]}}}}},112:{l:{108:{l:{97:{l:{99:{l:{101:{l:{116:{l:{114:{l:{102:{l:{59:{c:[8466]}}}}}}}}}}}}}}}}},114:{l:{114:{l:{59:{c:[8606]}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[317]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[315]}}}}}}}}},121:{l:{59:{c:[1051]}}}}},101:{l:{102:{l:{116:{l:{65:{l:{110:{l:{103:{l:{108:{l:{101:{l:{66:{l:{114:{l:{97:{l:{99:{l:{107:{l:{101:{l:{116:{l:{59:{c:[10216]}}}}}}}}}}}}}}}}}}}}}}},114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8592]},66:{l:{97:{l:{114:{l:{59:{c:[8676]}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8646]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},67:{l:{101:{l:{105:{l:{108:{l:{105:{l:{110:{l:{103:{l:{59:{c:[8968]}}}}}}}}}}}}}}},68:{l:{111:{l:{117:{l:{98:{l:{108:{l:{101:{l:{66:{l:{114:{l:{97:{l:{99:{l:{107:{l:{101:{l:{116:{l:{59:{c:[10214]}}}}}}}}}}}}}}}}}}}}}}},119:{l:{110:{l:{84:{l:{101:{l:{101:{l:{86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10593]}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[8643]},66:{l:{97:{l:{114:{l:{59:{c:[10585]}}}}}}}}}}}}}}}}}}}}}}}}}}},70:{l:{108:{l:{111:{l:{111:{l:{114:{l:{59:{c:[8970]}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8596]}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10574]}}}}}}}}}}}}}}}}}}}}}}},84:{l:{101:{l:{101:{l:{59:{c:[8867]},65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8612]}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10586]}}}}}}}}}}}}}}}}},114:{l:{105:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{59:{c:[8882]},66:{l:{97:{l:{114:{l:{59:{c:[10703]}}}}}}},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8884]}}}}}}}}}}}}}}}}}}}}}}}}}}},85:{l:{112:{l:{68:{l:{111:{l:{119:{l:{110:{l:{86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10577]}}}}}}}}}}}}}}}}}}}}},84:{l:{101:{l:{101:{l:{86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10592]}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[8639]},66:{l:{97:{l:{114:{l:{59:{c:[10584]}}}}}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[8636]},66:{l:{97:{l:{114:{l:{59:{c:[10578]}}}}}}}}}}}}}}}}}}},97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8656]}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8660]}}}}}}}}}}}}}}}}}}}}}}}}},115:{l:{115:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{59:{c:[8922]}}}}}}}}}}}}}}}}}}}}}}}}},70:{l:{117:{l:{108:{l:{108:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8806]}}}}}}}}}}}}}}}}}}},71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{59:{c:[8822]}}}}}}}}}}}}}}},76:{l:{101:{l:{115:{l:{115:{l:{59:{c:[10913]}}}}}}}}},83:{l:{108:{l:{97:{l:{110:{l:{116:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[10877]}}}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8818]}}}}}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120079]}}}}},108:{l:{59:{c:[8920]},101:{l:{102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8666]}}}}}}}}}}}}}}}}}}},109:{l:{105:{l:{100:{l:{111:{l:{116:{l:{59:{c:[319]}}}}}}}}}}},111:{l:{110:{l:{103:{l:{76:{l:{101:{l:{102:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10229]}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10231]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10230]}}}}}}}}}}}}}}}}}}}}},108:{l:{101:{l:{102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10232]}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10234]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10233]}}}}}}}}}}}}}}}}}}}}}}}}},112:{l:{102:{l:{59:{c:[120131]}}}}},119:{l:{101:{l:{114:{l:{76:{l:{101:{l:{102:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8601]}}}}}}}}}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8600]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8466]}}}}},104:{l:{59:{c:[8624]}}},116:{l:{114:{l:{111:{l:{107:{l:{59:{c:[321]}}}}}}}}}}},116:{l:{59:{c:[8810]}}}}},77:{l:{97:{l:{112:{l:{59:{c:[10501]}}}}},99:{l:{121:{l:{59:{c:[1052]}}}}},101:{l:{100:{l:{105:{l:{117:{l:{109:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8287]}}}}}}}}}}}}}}}}}}},108:{l:{108:{l:{105:{l:{110:{l:{116:{l:{114:{l:{102:{l:{59:{c:[8499]}}}}}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120080]}}}}},105:{l:{110:{l:{117:{l:{115:{l:{80:{l:{108:{l:{117:{l:{115:{l:{59:{c:[8723]}}}}}}}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120132]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8499]}}}}}}},117:{l:{59:{c:[924]}}}}},78:{l:{74:{l:{99:{l:{121:{l:{59:{c:[1034]}}}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[323]}}}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[327]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[325]}}}}}}}}},121:{l:{59:{c:[1053]}}}}},101:{l:{103:{l:{97:{l:{116:{l:{105:{l:{118:{l:{101:{l:{77:{l:{101:{l:{100:{l:{105:{l:{117:{l:{109:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8203]}}}}}}}}}}}}}}}}}}}}}}},84:{l:{104:{l:{105:{l:{99:{l:{107:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8203]}}}}}}}}}}}}}}},110:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8203]}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{114:{l:{121:{l:{84:{l:{104:{l:{105:{l:{110:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8203]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},115:{l:{116:{l:{101:{l:{100:{l:{71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{59:{c:[8811]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},76:{l:{101:{l:{115:{l:{115:{l:{76:{l:{101:{l:{115:{l:{115:{l:{59:{c:[8810]}}}}}}}}}}}}}}}}}}}}}}}}},119:{l:{76:{l:{105:{l:{110:{l:{101:{l:{59:{c:[10]}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120081]}}}}},111:{l:{66:{l:{114:{l:{101:{l:{97:{l:{107:{l:{59:{c:[8288]}}}}}}}}}}},110:{l:{66:{l:{114:{l:{101:{l:{97:{l:{107:{l:{105:{l:{110:{l:{103:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[160]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},112:{l:{102:{l:{59:{c:[8469]}}}}},116:{l:{59:{c:[10988]},67:{l:{111:{l:{110:{l:{103:{l:{114:{l:{117:{l:{101:{l:{110:{l:{116:{l:{59:{c:[8802]}}}}}}}}}}}}}}}}},117:{l:{112:{l:{67:{l:{97:{l:{112:{l:{59:{c:[8813]}}}}}}}}}}}}},68:{l:{111:{l:{117:{l:{98:{l:{108:{l:{101:{l:{86:{l:{101:{l:{114:{l:{116:{l:{105:{l:{99:{l:{97:{l:{108:{l:{66:{l:{97:{l:{114:{l:{59:{c:[8742]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},69:{l:{108:{l:{101:{l:{109:{l:{101:{l:{110:{l:{116:{l:{59:{c:[8713]}}}}}}}}}}}}},113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8800]},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8770,824]}}}}}}}}}}}}}}}}}}},120:{l:{105:{l:{115:{l:{116:{l:{115:{l:{59:{c:[8708]}}}}}}}}}}}}},71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{59:{c:[8815]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8817]}}}}}}}}}}},70:{l:{117:{l:{108:{l:{108:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8807,824]}}}}}}}}}}}}}}}}}}},71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{59:{c:[8811,824]}}}}}}}}}}}}}}},76:{l:{101:{l:{115:{l:{115:{l:{59:{c:[8825]}}}}}}}}},83:{l:{108:{l:{97:{l:{110:{l:{116:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[10878,824]}}}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8821]}}}}}}}}}}}}}}}}}}}}}}}}},72:{l:{117:{l:{109:{l:{112:{l:{68:{l:{111:{l:{119:{l:{110:{l:{72:{l:{117:{l:{109:{l:{112:{l:{59:{c:[8782,824]}}}}}}}}}}}}}}}}},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8783,824]}}}}}}}}}}}}}}}}}}},76:{l:{101:{l:{102:{l:{116:{l:{84:{l:{114:{l:{105:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{59:{c:[8938]},66:{l:{97:{l:{114:{l:{59:{c:[10703,824]}}}}}}},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8940]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},115:{l:{115:{l:{59:{c:[8814]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8816]}}}}}}}}}}},71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{59:{c:[8824]}}}}}}}}}}}}}}},76:{l:{101:{l:{115:{l:{115:{l:{59:{c:[8810,824]}}}}}}}}},83:{l:{108:{l:{97:{l:{110:{l:{116:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[10877,824]}}}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8820]}}}}}}}}}}}}}}}}}}},78:{l:{101:{l:{115:{l:{116:{l:{101:{l:{100:{l:{71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{59:{c:[10914,824]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},76:{l:{101:{l:{115:{l:{115:{l:{76:{l:{101:{l:{115:{l:{115:{l:{59:{c:[10913,824]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},80:{l:{114:{l:{101:{l:{99:{l:{101:{l:{100:{l:{101:{l:{115:{l:{59:{c:[8832]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[10927,824]}}}}}}}}}}},83:{l:{108:{l:{97:{l:{110:{l:{116:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8928]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},82:{l:{101:{l:{118:{l:{101:{l:{114:{l:{115:{l:{101:{l:{69:{l:{108:{l:{101:{l:{109:{l:{101:{l:{110:{l:{116:{l:{59:{c:[8716]}}}}}}}}}}}}}}}}}}}}}}}}}}},105:{l:{103:{l:{104:{l:{116:{l:{84:{l:{114:{l:{105:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{59:{c:[8939]},66:{l:{97:{l:{114:{l:{59:{c:[10704,824]}}}}}}},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8941]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},83:{l:{113:{l:{117:{l:{97:{l:{114:{l:{101:{l:{83:{l:{117:{l:{98:{l:{115:{l:{101:{l:{116:{l:{59:{c:[8847,824]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8930]}}}}}}}}}}}}}}}}}}},112:{l:{101:{l:{114:{l:{115:{l:{101:{l:{116:{l:{59:{c:[8848,824]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8931]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},117:{l:{98:{l:{115:{l:{101:{l:{116:{l:{59:{c:[8834,8402]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8840]}}}}}}}}}}}}}}}}}}},99:{l:{99:{l:{101:{l:{101:{l:{100:{l:{115:{l:{59:{c:[8833]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[10928,824]}}}}}}}}}}},83:{l:{108:{l:{97:{l:{110:{l:{116:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8929]}}}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8831,824]}}}}}}}}}}}}}}}}}}}}}}},112:{l:{101:{l:{114:{l:{115:{l:{101:{l:{116:{l:{59:{c:[8835,8402]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8841]}}}}}}}}}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8769]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8772]}}}}}}}}}}},70:{l:{117:{l:{108:{l:{108:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8775]}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8777]}}}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{114:{l:{116:{l:{105:{l:{99:{l:{97:{l:{108:{l:{66:{l:{97:{l:{114:{l:{59:{c:[8740]}}}}}}}}}}}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119977]}}}}}}},116:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[209]}},c:[209]}}}}}}}}},117:{l:{59:{c:[925]}}}}},79:{l:{69:{l:{108:{l:{105:{l:{103:{l:{59:{c:[338]}}}}}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[211]}},c:[211]}}}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[212]}},c:[212]}}}}},121:{l:{59:{c:[1054]}}}}},100:{l:{98:{l:{108:{l:{97:{l:{99:{l:{59:{c:[336]}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120082]}}}}},103:{l:{114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[210]}},c:[210]}}}}}}}}},109:{l:{97:{l:{99:{l:{114:{l:{59:{c:[332]}}}}}}},101:{l:{103:{l:{97:{l:{59:{c:[937]}}}}}}},105:{l:{99:{l:{114:{l:{111:{l:{110:{l:{59:{c:[927]}}}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120134]}}}}}}},112:{l:{101:{l:{110:{l:{67:{l:{117:{l:{114:{l:{108:{l:{121:{l:{68:{l:{111:{l:{117:{l:{98:{l:{108:{l:{101:{l:{81:{l:{117:{l:{111:{l:{116:{l:{101:{l:{59:{c:[8220]}}}}}}}}}}}}}}}}}}}}}}},81:{l:{117:{l:{111:{l:{116:{l:{101:{l:{59:{c:[8216]}}}}}}}}}}}}}}}}}}}}}}}}}}},114:{l:{59:{c:[10836]}}},115:{l:{99:{l:{114:{l:{59:{c:[119978]}}}}},108:{l:{97:{l:{115:{l:{104:{l:{59:{c:[216]}},c:[216]}}}}}}}}},116:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[213]}},c:[213]}}}}},109:{l:{101:{l:{115:{l:{59:{c:[10807]}}}}}}}}}}},117:{l:{109:{l:{108:{l:{59:{c:[214]}},c:[214]}}}}},118:{l:{101:{l:{114:{l:{66:{l:{97:{l:{114:{l:{59:{c:[8254]}}}}},114:{l:{97:{l:{99:{l:{101:{l:{59:{c:[9182]}}},107:{l:{101:{l:{116:{l:{59:{c:[9140]}}}}}}}}}}}}}}},80:{l:{97:{l:{114:{l:{101:{l:{110:{l:{116:{l:{104:{l:{101:{l:{115:{l:{105:{l:{115:{l:{59:{c:[9180]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},80:{l:{97:{l:{114:{l:{116:{l:{105:{l:{97:{l:{108:{l:{68:{l:{59:{c:[8706]}}}}}}}}}}}}}}},99:{l:{121:{l:{59:{c:[1055]}}}}},102:{l:{114:{l:{59:{c:[120083]}}}}},104:{l:{105:{l:{59:{c:[934]}}}}},105:{l:{59:{c:[928]}}},108:{l:{117:{l:{115:{l:{77:{l:{105:{l:{110:{l:{117:{l:{115:{l:{59:{c:[177]}}}}}}}}}}}}}}}}},111:{l:{105:{l:{110:{l:{99:{l:{97:{l:{114:{l:{101:{l:{112:{l:{108:{l:{97:{l:{110:{l:{101:{l:{59:{c:[8460]}}}}}}}}}}}}}}}}}}}}}}},112:{l:{102:{l:{59:{c:[8473]}}}}}}},114:{l:{59:{c:[10939]},101:{l:{99:{l:{101:{l:{100:{l:{101:{l:{115:{l:{59:{c:[8826]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[10927]}}}}}}}}}}},83:{l:{108:{l:{97:{l:{110:{l:{116:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8828]}}}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8830]}}}}}}}}}}}}}}}}}}}}}}},105:{l:{109:{l:{101:{l:{59:{c:[8243]}}}}}}},111:{l:{100:{l:{117:{l:{99:{l:{116:{l:{59:{c:[8719]}}}}}}}}},112:{l:{111:{l:{114:{l:{116:{l:{105:{l:{111:{l:{110:{l:{59:{c:[8759]},97:{l:{108:{l:{59:{c:[8733]}}}}}}}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119979]}}}}},105:{l:{59:{c:[936]}}}}}}},81:{l:{85:{l:{79:{l:{84:{l:{59:{c:[34]}},c:[34]}}}}},102:{l:{114:{l:{59:{c:[120084]}}}}},111:{l:{112:{l:{102:{l:{59:{c:[8474]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119980]}}}}}}}}},82:{l:{66:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10512]}}}}}}}}},69:{l:{71:{l:{59:{c:[174]}},c:[174]}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[340]}}}}}}}}},110:{l:{103:{l:{59:{c:[10219]}}}}},114:{l:{114:{l:{59:{c:[8608]},116:{l:{108:{l:{59:{c:[10518]}}}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[344]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[342]}}}}}}}}},121:{l:{59:{c:[1056]}}}}},101:{l:{59:{c:[8476]},118:{l:{101:{l:{114:{l:{115:{l:{101:{l:{69:{l:{108:{l:{101:{l:{109:{l:{101:{l:{110:{l:{116:{l:{59:{c:[8715]}}}}}}}}}}}}},113:{l:{117:{l:{105:{l:{108:{l:{105:{l:{98:{l:{114:{l:{105:{l:{117:{l:{109:{l:{59:{c:[8651]}}}}}}}}}}}}}}}}}}}}}}},85:{l:{112:{l:{69:{l:{113:{l:{117:{l:{105:{l:{108:{l:{105:{l:{98:{l:{114:{l:{105:{l:{117:{l:{109:{l:{59:{c:[10607]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[8476]}}}}},104:{l:{111:{l:{59:{c:[929]}}}}},105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{110:{l:{103:{l:{108:{l:{101:{l:{66:{l:{114:{l:{97:{l:{99:{l:{107:{l:{101:{l:{116:{l:{59:{c:[10217]}}}}}}}}}}}}}}}}}}}}}}},114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8594]},66:{l:{97:{l:{114:{l:{59:{c:[8677]}}}}}}},76:{l:{101:{l:{102:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8644]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},67:{l:{101:{l:{105:{l:{108:{l:{105:{l:{110:{l:{103:{l:{59:{c:[8969]}}}}}}}}}}}}}}},68:{l:{111:{l:{117:{l:{98:{l:{108:{l:{101:{l:{66:{l:{114:{l:{97:{l:{99:{l:{107:{l:{101:{l:{116:{l:{59:{c:[10215]}}}}}}}}}}}}}}}}}}}}}}},119:{l:{110:{l:{84:{l:{101:{l:{101:{l:{86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10589]}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[8642]},66:{l:{97:{l:{114:{l:{59:{c:[10581]}}}}}}}}}}}}}}}}}}}}}}}}}}},70:{l:{108:{l:{111:{l:{111:{l:{114:{l:{59:{c:[8971]}}}}}}}}}}},84:{l:{101:{l:{101:{l:{59:{c:[8866]},65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8614]}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10587]}}}}}}}}}}}}}}}}},114:{l:{105:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{59:{c:[8883]},66:{l:{97:{l:{114:{l:{59:{c:[10704]}}}}}}},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8885]}}}}}}}}}}}}}}}}}}}}}}}}}}},85:{l:{112:{l:{68:{l:{111:{l:{119:{l:{110:{l:{86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10575]}}}}}}}}}}}}}}}}}}}}},84:{l:{101:{l:{101:{l:{86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10588]}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[8638]},66:{l:{97:{l:{114:{l:{59:{c:[10580]}}}}}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[8640]},66:{l:{97:{l:{114:{l:{59:{c:[10579]}}}}}}}}}}}}}}}}}}},97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8658]}}}}}}}}}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[8477]}}}}},117:{l:{110:{l:{100:{l:{73:{l:{109:{l:{112:{l:{108:{l:{105:{l:{101:{l:{115:{l:{59:{c:[10608]}}}}}}}}}}}}}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8667]}}}}}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8475]}}}}},104:{l:{59:{c:[8625]}}}}},117:{l:{108:{l:{101:{l:{68:{l:{101:{l:{108:{l:{97:{l:{121:{l:{101:{l:{100:{l:{59:{c:[10740]}}}}}}}}}}}}}}}}}}}}}}},83:{l:{72:{l:{67:{l:{72:{l:{99:{l:{121:{l:{59:{c:[1065]}}}}}}}}},99:{l:{121:{l:{59:{c:[1064]}}}}}}},79:{l:{70:{l:{84:{l:{99:{l:{121:{l:{59:{c:[1068]}}}}}}}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[346]}}}}}}}}}}},99:{l:{59:{c:[10940]},97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[352]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[350]}}}}}}}}},105:{l:{114:{l:{99:{l:{59:{c:[348]}}}}}}},121:{l:{59:{c:[1057]}}}}},102:{l:{114:{l:{59:{c:[120086]}}}}},104:{l:{111:{l:{114:{l:{116:{l:{68:{l:{111:{l:{119:{l:{110:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8595]}}}}}}}}}}}}}}}}}}},76:{l:{101:{l:{102:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8592]}}}}}}}}}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8594]}}}}}}}}}}}}}}}}}}}}},85:{l:{112:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8593]}}}}}}}}}}}}}}}}}}}}}}},105:{l:{103:{l:{109:{l:{97:{l:{59:{c:[931]}}}}}}}}},109:{l:{97:{l:{108:{l:{108:{l:{67:{l:{105:{l:{114:{l:{99:{l:{108:{l:{101:{l:{59:{c:[8728]}}}}}}}}}}}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120138]}}}}}}},113:{l:{114:{l:{116:{l:{59:{c:[8730]}}}}},117:{l:{97:{l:{114:{l:{101:{l:{59:{c:[9633]},73:{l:{110:{l:{116:{l:{101:{l:{114:{l:{115:{l:{101:{l:{99:{l:{116:{l:{105:{l:{111:{l:{110:{l:{59:{c:[8851]}}}}}}}}}}}}}}}}}}}}}}}}},83:{l:{117:{l:{98:{l:{115:{l:{101:{l:{116:{l:{59:{c:[8847]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8849]}}}}}}}}}}}}}}}}}}},112:{l:{101:{l:{114:{l:{115:{l:{101:{l:{116:{l:{59:{c:[8848]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8850]}}}}}}}}}}}}}}}}}}}}}}}}}}},85:{l:{110:{l:{105:{l:{111:{l:{110:{l:{59:{c:[8852]}}}}}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119982]}}}}}}},116:{l:{97:{l:{114:{l:{59:{c:[8902]}}}}}}},117:{l:{98:{l:{59:{c:[8912]},115:{l:{101:{l:{116:{l:{59:{c:[8912]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8838]}}}}}}}}}}}}}}}}}}},99:{l:{99:{l:{101:{l:{101:{l:{100:{l:{115:{l:{59:{c:[8827]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[10928]}}}}}}}}}}},83:{l:{108:{l:{97:{l:{110:{l:{116:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8829]}}}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8831]}}}}}}}}}}}}}}}}}}}}},104:{l:{84:{l:{104:{l:{97:{l:{116:{l:{59:{c:[8715]}}}}}}}}}}}}},109:{l:{59:{c:[8721]}}},112:{l:{59:{c:[8913]},101:{l:{114:{l:{115:{l:{101:{l:{116:{l:{59:{c:[8835]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8839]}}}}}}}}}}}}}}}}}}}}},115:{l:{101:{l:{116:{l:{59:{c:[8913]}}}}}}}}}}}}},84:{l:{72:{l:{79:{l:{82:{l:{78:{l:{59:{c:[222]}},c:[222]}}}}}}},82:{l:{65:{l:{68:{l:{69:{l:{59:{c:[8482]}}}}}}}}},83:{l:{72:{l:{99:{l:{121:{l:{59:{c:[1035]}}}}}}},99:{l:{121:{l:{59:{c:[1062]}}}}}}},97:{l:{98:{l:{59:{c:[9]}}},117:{l:{59:{c:[932]}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[356]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[354]}}}}}}}}},121:{l:{59:{c:[1058]}}}}},102:{l:{114:{l:{59:{c:[120087]}}}}},104:{l:{101:{l:{114:{l:{101:{l:{102:{l:{111:{l:{114:{l:{101:{l:{59:{c:[8756]}}}}}}}}}}}}},116:{l:{97:{l:{59:{c:[920]}}}}}}},105:{l:{99:{l:{107:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8287,8202]}}}}}}}}}}}}}}},110:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8201]}}}}}}}}}}}}}}}}},105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8764]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8771]}}}}}}}}}}},70:{l:{117:{l:{108:{l:{108:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8773]}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8776]}}}}}}}}}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120139]}}}}}}},114:{l:{105:{l:{112:{l:{108:{l:{101:{l:{68:{l:{111:{l:{116:{l:{59:{c:[8411]}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119983]}}}}},116:{l:{114:{l:{111:{l:{107:{l:{59:{c:[358]}}}}}}}}}}}}},85:{l:{97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[218]}},c:[218]}}}}}}},114:{l:{114:{l:{59:{c:[8607]},111:{l:{99:{l:{105:{l:{114:{l:{59:{c:[10569]}}}}}}}}}}}}}}},98:{l:{114:{l:{99:{l:{121:{l:{59:{c:[1038]}}}}},101:{l:{118:{l:{101:{l:{59:{c:[364]}}}}}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[219]}},c:[219]}}}}},121:{l:{59:{c:[1059]}}}}},100:{l:{98:{l:{108:{l:{97:{l:{99:{l:{59:{c:[368]}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120088]}}}}},103:{l:{114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[217]}},c:[217]}}}}}}}}},109:{l:{97:{l:{99:{l:{114:{l:{59:{c:[362]}}}}}}}}},110:{l:{100:{l:{101:{l:{114:{l:{66:{l:{97:{l:{114:{l:{59:{c:[95]}}}}},114:{l:{97:{l:{99:{l:{101:{l:{59:{c:[9183]}}},107:{l:{101:{l:{116:{l:{59:{c:[9141]}}}}}}}}}}}}}}},80:{l:{97:{l:{114:{l:{101:{l:{110:{l:{116:{l:{104:{l:{101:{l:{115:{l:{105:{l:{115:{l:{59:{c:[9181]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},105:{l:{111:{l:{110:{l:{59:{c:[8899]},80:{l:{108:{l:{117:{l:{115:{l:{59:{c:[8846]}}}}}}}}}}}}}}}}},111:{l:{103:{l:{111:{l:{110:{l:{59:{c:[370]}}}}}}},112:{l:{102:{l:{59:{c:[120140]}}}}}}},112:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8593]},66:{l:{97:{l:{114:{l:{59:{c:[10514]}}}}}}},68:{l:{111:{l:{119:{l:{110:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8645]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},68:{l:{111:{l:{119:{l:{110:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8597]}}}}}}}}}}}}}}}}}}},69:{l:{113:{l:{117:{l:{105:{l:{108:{l:{105:{l:{98:{l:{114:{l:{105:{l:{117:{l:{109:{l:{59:{c:[10606]}}}}}}}}}}}}}}}}}}}}}}},84:{l:{101:{l:{101:{l:{59:{c:[8869]},65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8613]}}}}}}}}}}}}}}}}},97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8657]}}}}}}}}}}},100:{l:{111:{l:{119:{l:{110:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8661]}}}}}}}}}}}}}}}}}}},112:{l:{101:{l:{114:{l:{76:{l:{101:{l:{102:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8598]}}}}}}}}}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8599]}}}}}}}}}}}}}}}}}}}}}}}}}}},115:{l:{105:{l:{59:{c:[978]},108:{l:{111:{l:{110:{l:{59:{c:[933]}}}}}}}}}}}}},114:{l:{105:{l:{110:{l:{103:{l:{59:{c:[366]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119984]}}}}}}},116:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[360]}}}}}}}}}}},117:{l:{109:{l:{108:{l:{59:{c:[220]}},c:[220]}}}}}}},86:{l:{68:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8875]}}}}}}}}},98:{l:{97:{l:{114:{l:{59:{c:[10987]}}}}}}},99:{l:{121:{l:{59:{c:[1042]}}}}},100:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8873]},108:{l:{59:{c:[10982]}}}}}}}}}}},101:{l:{101:{l:{59:{c:[8897]}}},114:{l:{98:{l:{97:{l:{114:{l:{59:{c:[8214]}}}}}}},116:{l:{59:{c:[8214]},105:{l:{99:{l:{97:{l:{108:{l:{66:{l:{97:{l:{114:{l:{59:{c:[8739]}}}}}}},76:{l:{105:{l:{110:{l:{101:{l:{59:{c:[124]}}}}}}}}},83:{l:{101:{l:{112:{l:{97:{l:{114:{l:{97:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10072]}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8768]}}}}}}}}}}}}}}}}}}}}},121:{l:{84:{l:{104:{l:{105:{l:{110:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8202]}}}}}}}}}}}}}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120089]}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120141]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119985]}}}}}}},118:{l:{100:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8874]}}}}}}}}}}}}},87:{l:{99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[372]}}}}}}}}},101:{l:{100:{l:{103:{l:{101:{l:{59:{c:[8896]}}}}}}}}},102:{l:{114:{l:{59:{c:[120090]}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120142]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119986]}}}}}}}}},88:{l:{102:{l:{114:{l:{59:{c:[120091]}}}}},105:{l:{59:{c:[926]}}},111:{l:{112:{l:{102:{l:{59:{c:[120143]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119987]}}}}}}}}},89:{l:{65:{l:{99:{l:{121:{l:{59:{c:[1071]}}}}}}},73:{l:{99:{l:{121:{l:{59:{c:[1031]}}}}}}},85:{l:{99:{l:{121:{l:{59:{c:[1070]}}}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[221]}},c:[221]}}}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[374]}}}}}}},121:{l:{59:{c:[1067]}}}}},102:{l:{114:{l:{59:{c:[120092]}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120144]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119988]}}}}}}},117:{l:{109:{l:{108:{l:{59:{c:[376]}}}}}}}}},90:{l:{72:{l:{99:{l:{121:{l:{59:{c:[1046]}}}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[377]}}}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[381]}}}}}}}}},121:{l:{59:{c:[1047]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[379]}}}}}}},101:{l:{114:{l:{111:{l:{87:{l:{105:{l:{100:{l:{116:{l:{104:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8203]}}}}}}}}}}}}}}}}}}}}}}}}},116:{l:{97:{l:{59:{c:[918]}}}}}}},102:{l:{114:{l:{59:{c:[8488]}}}}},111:{l:{112:{l:{102:{l:{59:{c:[8484]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119989]}}}}}}}}},97:{l:{97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[225]}},c:[225]}}}}}}}}},98:{l:{114:{l:{101:{l:{118:{l:{101:{l:{59:{c:[259]}}}}}}}}}}},99:{l:{59:{c:[8766]},69:{l:{59:{c:[8766,819]}}},100:{l:{59:{c:[8767]}}},105:{l:{114:{l:{99:{l:{59:{c:[226]}},c:[226]}}}}},117:{l:{116:{l:{101:{l:{59:{c:[180]}},c:[180]}}}}},121:{l:{59:{c:[1072]}}}}},101:{l:{108:{l:{105:{l:{103:{l:{59:{c:[230]}},c:[230]}}}}}}},102:{l:{59:{c:[8289]},114:{l:{59:{c:[120094]}}}}},103:{l:{114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[224]}},c:[224]}}}}}}}}},108:{l:{101:{l:{102:{l:{115:{l:{121:{l:{109:{l:{59:{c:[8501]}}}}}}}}},112:{l:{104:{l:{59:{c:[8501]}}}}}}},112:{l:{104:{l:{97:{l:{59:{c:[945]}}}}}}}}},109:{l:{97:{l:{99:{l:{114:{l:{59:{c:[257]}}}}},108:{l:{103:{l:{59:{c:[10815]}}}}}}},112:{l:{59:{c:[38]}},c:[38]}}},110:{l:{100:{l:{59:{c:[8743]},97:{l:{110:{l:{100:{l:{59:{c:[10837]}}}}}}},100:{l:{59:{c:[10844]}}},115:{l:{108:{l:{111:{l:{112:{l:{101:{l:{59:{c:[10840]}}}}}}}}}}},118:{l:{59:{c:[10842]}}}}},103:{l:{59:{c:[8736]},101:{l:{59:{c:[10660]}}},108:{l:{101:{l:{59:{c:[8736]}}}}},109:{l:{115:{l:{100:{l:{59:{c:[8737]},97:{l:{97:{l:{59:{c:[10664]}}},98:{l:{59:{c:[10665]}}},99:{l:{59:{c:[10666]}}},100:{l:{59:{c:[10667]}}},101:{l:{59:{c:[10668]}}},102:{l:{59:{c:[10669]}}},103:{l:{59:{c:[10670]}}},104:{l:{59:{c:[10671]}}}}}}}}}}},114:{l:{116:{l:{59:{c:[8735]},118:{l:{98:{l:{59:{c:[8894]},100:{l:{59:{c:[10653]}}}}}}}}}}},115:{l:{112:{l:{104:{l:{59:{c:[8738]}}}}},116:{l:{59:{c:[197]}}}}},122:{l:{97:{l:{114:{l:{114:{l:{59:{c:[9084]}}}}}}}}}}}}},111:{l:{103:{l:{111:{l:{110:{l:{59:{c:[261]}}}}}}},112:{l:{102:{l:{59:{c:[120146]}}}}}}},112:{l:{59:{c:[8776]},69:{l:{59:{c:[10864]}}},97:{l:{99:{l:{105:{l:{114:{l:{59:{c:[10863]}}}}}}}}},101:{l:{59:{c:[8778]}}},105:{l:{100:{l:{59:{c:[8779]}}}}},111:{l:{115:{l:{59:{c:[39]}}}}},112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[8776]},101:{l:{113:{l:{59:{c:[8778]}}}}}}}}}}}}}}},114:{l:{105:{l:{110:{l:{103:{l:{59:{c:[229]}},c:[229]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119990]}}}}},116:{l:{59:{c:[42]}}},121:{l:{109:{l:{112:{l:{59:{c:[8776]},101:{l:{113:{l:{59:{c:[8781]}}}}}}}}}}}}},116:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[227]}},c:[227]}}}}}}}}},117:{l:{109:{l:{108:{l:{59:{c:[228]}},c:[228]}}}}},119:{l:{99:{l:{111:{l:{110:{l:{105:{l:{110:{l:{116:{l:{59:{c:[8755]}}}}}}}}}}}}},105:{l:{110:{l:{116:{l:{59:{c:[10769]}}}}}}}}}}},98:{l:{78:{l:{111:{l:{116:{l:{59:{c:[10989]}}}}}}},97:{l:{99:{l:{107:{l:{99:{l:{111:{l:{110:{l:{103:{l:{59:{c:[8780]}}}}}}}}},101:{l:{112:{l:{115:{l:{105:{l:{108:{l:{111:{l:{110:{l:{59:{c:[1014]}}}}}}}}}}}}}}},112:{l:{114:{l:{105:{l:{109:{l:{101:{l:{59:{c:[8245]}}}}}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8765]},101:{l:{113:{l:{59:{c:[8909]}}}}}}}}}}}}}}},114:{l:{118:{l:{101:{l:{101:{l:{59:{c:[8893]}}}}}}},119:{l:{101:{l:{100:{l:{59:{c:[8965]},103:{l:{101:{l:{59:{c:[8965]}}}}}}}}}}}}}}},98:{l:{114:{l:{107:{l:{59:{c:[9141]},116:{l:{98:{l:{114:{l:{107:{l:{59:{c:[9142]}}}}}}}}}}}}}}},99:{l:{111:{l:{110:{l:{103:{l:{59:{c:[8780]}}}}}}},121:{l:{59:{c:[1073]}}}}},100:{l:{113:{l:{117:{l:{111:{l:{59:{c:[8222]}}}}}}}}},101:{l:{99:{l:{97:{l:{117:{l:{115:{l:{59:{c:[8757]},101:{l:{59:{c:[8757]}}}}}}}}}}},109:{l:{112:{l:{116:{l:{121:{l:{118:{l:{59:{c:[10672]}}}}}}}}}}},112:{l:{115:{l:{105:{l:{59:{c:[1014]}}}}}}},114:{l:{110:{l:{111:{l:{117:{l:{59:{c:[8492]}}}}}}}}},116:{l:{97:{l:{59:{c:[946]}}},104:{l:{59:{c:[8502]}}},119:{l:{101:{l:{101:{l:{110:{l:{59:{c:[8812]}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120095]}}}}},105:{l:{103:{l:{99:{l:{97:{l:{112:{l:{59:{c:[8898]}}}}},105:{l:{114:{l:{99:{l:{59:{c:[9711]}}}}}}},117:{l:{112:{l:{59:{c:[8899]}}}}}}},111:{l:{100:{l:{111:{l:{116:{l:{59:{c:[10752]}}}}}}},112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[10753]}}}}}}}}},116:{l:{105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[10754]}}}}}}}}}}}}},115:{l:{113:{l:{99:{l:{117:{l:{112:{l:{59:{c:[10758]}}}}}}}}},116:{l:{97:{l:{114:{l:{59:{c:[9733]}}}}}}}}},116:{l:{114:{l:{105:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{100:{l:{111:{l:{119:{l:{110:{l:{59:{c:[9661]}}}}}}}}},117:{l:{112:{l:{59:{c:[9651]}}}}}}}}}}}}}}}}}}}}},117:{l:{112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[10756]}}}}}}}}}}},118:{l:{101:{l:{101:{l:{59:{c:[8897]}}}}}}},119:{l:{101:{l:{100:{l:{103:{l:{101:{l:{59:{c:[8896]}}}}}}}}}}}}}}},107:{l:{97:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10509]}}}}}}}}}}},108:{l:{97:{l:{99:{l:{107:{l:{108:{l:{111:{l:{122:{l:{101:{l:{110:{l:{103:{l:{101:{l:{59:{c:[10731]}}}}}}}}}}}}}}},115:{l:{113:{l:{117:{l:{97:{l:{114:{l:{101:{l:{59:{c:[9642]}}}}}}}}}}}}},116:{l:{114:{l:{105:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{59:{c:[9652]},100:{l:{111:{l:{119:{l:{110:{l:{59:{c:[9662]}}}}}}}}},108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[9666]}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{59:{c:[9656]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},110:{l:{107:{l:{59:{c:[9251]}}}}}}},107:{l:{49:{l:{50:{l:{59:{c:[9618]}}},52:{l:{59:{c:[9617]}}}}},51:{l:{52:{l:{59:{c:[9619]}}}}}}},111:{l:{99:{l:{107:{l:{59:{c:[9608]}}}}}}}}},110:{l:{101:{l:{59:{c:[61,8421]},113:{l:{117:{l:{105:{l:{118:{l:{59:{c:[8801,8421]}}}}}}}}}}},111:{l:{116:{l:{59:{c:[8976]}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120147]}}}}},116:{l:{59:{c:[8869]},116:{l:{111:{l:{109:{l:{59:{c:[8869]}}}}}}}}},119:{l:{116:{l:{105:{l:{101:{l:{59:{c:[8904]}}}}}}}}},120:{l:{68:{l:{76:{l:{59:{c:[9559]}}},82:{l:{59:{c:[9556]}}},108:{l:{59:{c:[9558]}}},114:{l:{59:{c:[9555]}}}}},72:{l:{59:{c:[9552]},68:{l:{59:{c:[9574]}}},85:{l:{59:{c:[9577]}}},100:{l:{59:{c:[9572]}}},117:{l:{59:{c:[9575]}}}}},85:{l:{76:{l:{59:{c:[9565]}}},82:{l:{59:{c:[9562]}}},108:{l:{59:{c:[9564]}}},114:{l:{59:{c:[9561]}}}}},86:{l:{59:{c:[9553]},72:{l:{59:{c:[9580]}}},76:{l:{59:{c:[9571]}}},82:{l:{59:{c:[9568]}}},104:{l:{59:{c:[9579]}}},108:{l:{59:{c:[9570]}}},114:{l:{59:{c:[9567]}}}}},98:{l:{111:{l:{120:{l:{59:{c:[10697]}}}}}}},100:{l:{76:{l:{59:{c:[9557]}}},82:{l:{59:{c:[9554]}}},108:{l:{59:{c:[9488]}}},114:{l:{59:{c:[9484]}}}}},104:{l:{59:{c:[9472]},68:{l:{59:{c:[9573]}}},85:{l:{59:{c:[9576]}}},100:{l:{59:{c:[9516]}}},117:{l:{59:{c:[9524]}}}}},109:{l:{105:{l:{110:{l:{117:{l:{115:{l:{59:{c:[8863]}}}}}}}}}}},112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[8862]}}}}}}}}},116:{l:{105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[8864]}}}}}}}}}}},117:{l:{76:{l:{59:{c:[9563]}}},82:{l:{59:{c:[9560]}}},108:{l:{59:{c:[9496]}}},114:{l:{59:{c:[9492]}}}}},118:{l:{59:{c:[9474]},72:{l:{59:{c:[9578]}}},76:{l:{59:{c:[9569]}}},82:{l:{59:{c:[9566]}}},104:{l:{59:{c:[9532]}}},108:{l:{59:{c:[9508]}}},114:{l:{59:{c:[9500]}}}}}}}}},112:{l:{114:{l:{105:{l:{109:{l:{101:{l:{59:{c:[8245]}}}}}}}}}}},114:{l:{101:{l:{118:{l:{101:{l:{59:{c:[728]}}}}}}},118:{l:{98:{l:{97:{l:{114:{l:{59:{c:[166]}},c:[166]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119991]}}}}},101:{l:{109:{l:{105:{l:{59:{c:[8271]}}}}}}},105:{l:{109:{l:{59:{c:[8765]},101:{l:{59:{c:[8909]}}}}}}},111:{l:{108:{l:{59:{c:[92]},98:{l:{59:{c:[10693]}}},104:{l:{115:{l:{117:{l:{98:{l:{59:{c:[10184]}}}}}}}}}}}}}}},117:{l:{108:{l:{108:{l:{59:{c:[8226]},101:{l:{116:{l:{59:{c:[8226]}}}}}}}}},109:{l:{112:{l:{59:{c:[8782]},69:{l:{59:{c:[10926]}}},101:{l:{59:{c:[8783]},113:{l:{59:{c:[8783]}}}}}}}}}}}}},99:{l:{97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[263]}}}}}}}}},112:{l:{59:{c:[8745]},97:{l:{110:{l:{100:{l:{59:{c:[10820]}}}}}}},98:{l:{114:{l:{99:{l:{117:{l:{112:{l:{59:{c:[10825]}}}}}}}}}}},99:{l:{97:{l:{112:{l:{59:{c:[10827]}}}}},117:{l:{112:{l:{59:{c:[10823]}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[10816]}}}}}}},115:{l:{59:{c:[8745,65024]}}}}},114:{l:{101:{l:{116:{l:{59:{c:[8257]}}}}},111:{l:{110:{l:{59:{c:[711]}}}}}}}}},99:{l:{97:{l:{112:{l:{115:{l:{59:{c:[10829]}}}}},114:{l:{111:{l:{110:{l:{59:{c:[269]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[231]}},c:[231]}}}}}}},105:{l:{114:{l:{99:{l:{59:{c:[265]}}}}}}},117:{l:{112:{l:{115:{l:{59:{c:[10828]},115:{l:{109:{l:{59:{c:[10832]}}}}}}}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[267]}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[184]}},c:[184]}}}}},109:{l:{112:{l:{116:{l:{121:{l:{118:{l:{59:{c:[10674]}}}}}}}}}}},110:{l:{116:{l:{59:{c:[162]},101:{l:{114:{l:{100:{l:{111:{l:{116:{l:{59:{c:[183]}}}}}}}}}}}},c:[162]}}}}},102:{l:{114:{l:{59:{c:[120096]}}}}},104:{l:{99:{l:{121:{l:{59:{c:[1095]}}}}},101:{l:{99:{l:{107:{l:{59:{c:[10003]},109:{l:{97:{l:{114:{l:{107:{l:{59:{c:[10003]}}}}}}}}}}}}}}},105:{l:{59:{c:[967]}}}}},105:{l:{114:{l:{59:{c:[9675]},69:{l:{59:{c:[10691]}}},99:{l:{59:{c:[710]},101:{l:{113:{l:{59:{c:[8791]}}}}},108:{l:{101:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[8634]}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{59:{c:[8635]}}}}}}}}}}}}}}}}}}}}},100:{l:{82:{l:{59:{c:[174]}}},83:{l:{59:{c:[9416]}}},97:{l:{115:{l:{116:{l:{59:{c:[8859]}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[8858]}}}}}}}}},100:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8861]}}}}}}}}}}}}}}}}},101:{l:{59:{c:[8791]}}},102:{l:{110:{l:{105:{l:{110:{l:{116:{l:{59:{c:[10768]}}}}}}}}}}},109:{l:{105:{l:{100:{l:{59:{c:[10991]}}}}}}},115:{l:{99:{l:{105:{l:{114:{l:{59:{c:[10690]}}}}}}}}}}}}},108:{l:{117:{l:{98:{l:{115:{l:{59:{c:[9827]},117:{l:{105:{l:{116:{l:{59:{c:[9827]}}}}}}}}}}}}}}},111:{l:{108:{l:{111:{l:{110:{l:{59:{c:[58]},101:{l:{59:{c:[8788]},113:{l:{59:{c:[8788]}}}}}}}}}}},109:{l:{109:{l:{97:{l:{59:{c:[44]},116:{l:{59:{c:[64]}}}}}}},112:{l:{59:{c:[8705]},102:{l:{110:{l:{59:{c:[8728]}}}}},108:{l:{101:{l:{109:{l:{101:{l:{110:{l:{116:{l:{59:{c:[8705]}}}}}}}}},120:{l:{101:{l:{115:{l:{59:{c:[8450]}}}}}}}}}}}}}}},110:{l:{103:{l:{59:{c:[8773]},100:{l:{111:{l:{116:{l:{59:{c:[10861]}}}}}}}}},105:{l:{110:{l:{116:{l:{59:{c:[8750]}}}}}}}}},112:{l:{102:{l:{59:{c:[120148]}}},114:{l:{111:{l:{100:{l:{59:{c:[8720]}}}}}}},121:{l:{59:{c:[169]},115:{l:{114:{l:{59:{c:[8471]}}}}}},c:[169]}}}}},114:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8629]}}}}}}},111:{l:{115:{l:{115:{l:{59:{c:[10007]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119992]}}}}},117:{l:{98:{l:{59:{c:[10959]},101:{l:{59:{c:[10961]}}}}},112:{l:{59:{c:[10960]},101:{l:{59:{c:[10962]}}}}}}}}},116:{l:{100:{l:{111:{l:{116:{l:{59:{c:[8943]}}}}}}}}},117:{l:{100:{l:{97:{l:{114:{l:{114:{l:{108:{l:{59:{c:[10552]}}},114:{l:{59:{c:[10549]}}}}}}}}}}},101:{l:{112:{l:{114:{l:{59:{c:[8926]}}}}},115:{l:{99:{l:{59:{c:[8927]}}}}}}},108:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8630]},112:{l:{59:{c:[10557]}}}}}}}}}}},112:{l:{59:{c:[8746]},98:{l:{114:{l:{99:{l:{97:{l:{112:{l:{59:{c:[10824]}}}}}}}}}}},99:{l:{97:{l:{112:{l:{59:{c:[10822]}}}}},117:{l:{112:{l:{59:{c:[10826]}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[8845]}}}}}}},111:{l:{114:{l:{59:{c:[10821]}}}}},115:{l:{59:{c:[8746,65024]}}}}},114:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8631]},109:{l:{59:{c:[10556]}}}}}}}}},108:{l:{121:{l:{101:{l:{113:{l:{112:{l:{114:{l:{101:{l:{99:{l:{59:{c:[8926]}}}}}}}}},115:{l:{117:{l:{99:{l:{99:{l:{59:{c:[8927]}}}}}}}}}}}}},118:{l:{101:{l:{101:{l:{59:{c:[8910]}}}}}}},119:{l:{101:{l:{100:{l:{103:{l:{101:{l:{59:{c:[8911]}}}}}}}}}}}}}}},114:{l:{101:{l:{110:{l:{59:{c:[164]}},c:[164]}}}}},118:{l:{101:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[8630]}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{59:{c:[8631]}}}}}}}}}}}}}}}}}}}}}}}}}}},118:{l:{101:{l:{101:{l:{59:{c:[8910]}}}}}}},119:{l:{101:{l:{100:{l:{59:{c:[8911]}}}}}}}}},119:{l:{99:{l:{111:{l:{110:{l:{105:{l:{110:{l:{116:{l:{59:{c:[8754]}}}}}}}}}}}}},105:{l:{110:{l:{116:{l:{59:{c:[8753]}}}}}}}}},121:{l:{108:{l:{99:{l:{116:{l:{121:{l:{59:{c:[9005]}}}}}}}}}}}}},100:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8659]}}}}}}},72:{l:{97:{l:{114:{l:{59:{c:[10597]}}}}}}},97:{l:{103:{l:{103:{l:{101:{l:{114:{l:{59:{c:[8224]}}}}}}}}},108:{l:{101:{l:{116:{l:{104:{l:{59:{c:[8504]}}}}}}}}},114:{l:{114:{l:{59:{c:[8595]}}}}},115:{l:{104:{l:{59:{c:[8208]},118:{l:{59:{c:[8867]}}}}}}}}},98:{l:{107:{l:{97:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10511]}}}}}}}}}}},108:{l:{97:{l:{99:{l:{59:{c:[733]}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[271]}}}}}}}}},121:{l:{59:{c:[1076]}}}}},100:{l:{59:{c:[8518]},97:{l:{103:{l:{103:{l:{101:{l:{114:{l:{59:{c:[8225]}}}}}}}}},114:{l:{114:{l:{59:{c:[8650]}}}}}}},111:{l:{116:{l:{115:{l:{101:{l:{113:{l:{59:{c:[10871]}}}}}}}}}}}}},101:{l:{103:{l:{59:{c:[176]}},c:[176]},108:{l:{116:{l:{97:{l:{59:{c:[948]}}}}}}},109:{l:{112:{l:{116:{l:{121:{l:{118:{l:{59:{c:[10673]}}}}}}}}}}}}},102:{l:{105:{l:{115:{l:{104:{l:{116:{l:{59:{c:[10623]}}}}}}}}},114:{l:{59:{c:[120097]}}}}},104:{l:{97:{l:{114:{l:{108:{l:{59:{c:[8643]}}},114:{l:{59:{c:[8642]}}}}}}}}},105:{l:{97:{l:{109:{l:{59:{c:[8900]},111:{l:{110:{l:{100:{l:{59:{c:[8900]},115:{l:{117:{l:{105:{l:{116:{l:{59:{c:[9830]}}}}}}}}}}}}}}},115:{l:{59:{c:[9830]}}}}}}},101:{l:{59:{c:[168]}}},103:{l:{97:{l:{109:{l:{109:{l:{97:{l:{59:{c:[989]}}}}}}}}}}},115:{l:{105:{l:{110:{l:{59:{c:[8946]}}}}}}},118:{l:{59:{c:[247]},105:{l:{100:{l:{101:{l:{59:{c:[247]},111:{l:{110:{l:{116:{l:{105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[8903]}}}}}}}}}}}}}}}},c:[247]}}}}},111:{l:{110:{l:{120:{l:{59:{c:[8903]}}}}}}}}}}},106:{l:{99:{l:{121:{l:{59:{c:[1106]}}}}}}},108:{l:{99:{l:{111:{l:{114:{l:{110:{l:{59:{c:[8990]}}}}}}},114:{l:{111:{l:{112:{l:{59:{c:[8973]}}}}}}}}}}},111:{l:{108:{l:{108:{l:{97:{l:{114:{l:{59:{c:[36]}}}}}}}}},112:{l:{102:{l:{59:{c:[120149]}}}}},116:{l:{59:{c:[729]},101:{l:{113:{l:{59:{c:[8784]},100:{l:{111:{l:{116:{l:{59:{c:[8785]}}}}}}}}}}},109:{l:{105:{l:{110:{l:{117:{l:{115:{l:{59:{c:[8760]}}}}}}}}}}},112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[8724]}}}}}}}}},115:{l:{113:{l:{117:{l:{97:{l:{114:{l:{101:{l:{59:{c:[8865]}}}}}}}}}}}}}}},117:{l:{98:{l:{108:{l:{101:{l:{98:{l:{97:{l:{114:{l:{119:{l:{101:{l:{100:{l:{103:{l:{101:{l:{59:{c:[8966]}}}}}}}}}}}}}}}}}}}}}}}}},119:{l:{110:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8595]}}}}}}}}}}},100:{l:{111:{l:{119:{l:{110:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{115:{l:{59:{c:[8650]}}}}}}}}}}}}}}}}}}}}},104:{l:{97:{l:{114:{l:{112:{l:{111:{l:{111:{l:{110:{l:{108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[8643]}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{59:{c:[8642]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},114:{l:{98:{l:{107:{l:{97:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10512]}}}}}}}}}}}}},99:{l:{111:{l:{114:{l:{110:{l:{59:{c:[8991]}}}}}}},114:{l:{111:{l:{112:{l:{59:{c:[8972]}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119993]}}},121:{l:{59:{c:[1109]}}}}},111:{l:{108:{l:{59:{c:[10742]}}}}},116:{l:{114:{l:{111:{l:{107:{l:{59:{c:[273]}}}}}}}}}}},116:{l:{100:{l:{111:{l:{116:{l:{59:{c:[8945]}}}}}}},114:{l:{105:{l:{59:{c:[9663]},102:{l:{59:{c:[9662]}}}}}}}}},117:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8693]}}}}}}},104:{l:{97:{l:{114:{l:{59:{c:[10607]}}}}}}}}},119:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{59:{c:[10662]}}}}}}}}}}}}},122:{l:{99:{l:{121:{l:{59:{c:[1119]}}}}},105:{l:{103:{l:{114:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10239]}}}}}}}}}}}}}}}}},101:{l:{68:{l:{68:{l:{111:{l:{116:{l:{59:{c:[10871]}}}}}}},111:{l:{116:{l:{59:{c:[8785]}}}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[233]}},c:[233]}}}}}}},115:{l:{116:{l:{101:{l:{114:{l:{59:{c:[10862]}}}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[283]}}}}}}}}},105:{l:{114:{l:{59:{c:[8790]},99:{l:{59:{c:[234]}},c:[234]}}}}},111:{l:{108:{l:{111:{l:{110:{l:{59:{c:[8789]}}}}}}}}},121:{l:{59:{c:[1101]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[279]}}}}}}},101:{l:{59:{c:[8519]}}},102:{l:{68:{l:{111:{l:{116:{l:{59:{c:[8786]}}}}}}},114:{l:{59:{c:[120098]}}}}},103:{l:{59:{c:[10906]},114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[232]}},c:[232]}}}}}}},115:{l:{59:{c:[10902]},100:{l:{111:{l:{116:{l:{59:{c:[10904]}}}}}}}}}}},108:{l:{59:{c:[10905]},105:{l:{110:{l:{116:{l:{101:{l:{114:{l:{115:{l:{59:{c:[9191]}}}}}}}}}}}}},108:{l:{59:{c:[8467]}}},115:{l:{59:{c:[10901]},100:{l:{111:{l:{116:{l:{59:{c:[10903]}}}}}}}}}}},109:{l:{97:{l:{99:{l:{114:{l:{59:{c:[275]}}}}}}},112:{l:{116:{l:{121:{l:{59:{c:[8709]},115:{l:{101:{l:{116:{l:{59:{c:[8709]}}}}}}},118:{l:{59:{c:[8709]}}}}}}}}},115:{l:{112:{l:{49:{l:{51:{l:{59:{c:[8196]}}},52:{l:{59:{c:[8197]}}}}},59:{c:[8195]}}}}}}},110:{l:{103:{l:{59:{c:[331]}}},115:{l:{112:{l:{59:{c:[8194]}}}}}}},111:{l:{103:{l:{111:{l:{110:{l:{59:{c:[281]}}}}}}},112:{l:{102:{l:{59:{c:[120150]}}}}}}},112:{l:{97:{l:{114:{l:{59:{c:[8917]},115:{l:{108:{l:{59:{c:[10723]}}}}}}}}},108:{l:{117:{l:{115:{l:{59:{c:[10865]}}}}}}},115:{l:{105:{l:{59:{c:[949]},108:{l:{111:{l:{110:{l:{59:{c:[949]}}}}}}},118:{l:{59:{c:[1013]}}}}}}}}},113:{l:{99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[8790]}}}}}}},111:{l:{108:{l:{111:{l:{110:{l:{59:{c:[8789]}}}}}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8770]}}}}},108:{l:{97:{l:{110:{l:{116:{l:{103:{l:{116:{l:{114:{l:{59:{c:[10902]}}}}}}},108:{l:{101:{l:{115:{l:{115:{l:{59:{c:[10901]}}}}}}}}}}}}}}}}}}},117:{l:{97:{l:{108:{l:{115:{l:{59:{c:[61]}}}}}}},101:{l:{115:{l:{116:{l:{59:{c:[8799]}}}}}}},105:{l:{118:{l:{59:{c:[8801]},68:{l:{68:{l:{59:{c:[10872]}}}}}}}}}}},118:{l:{112:{l:{97:{l:{114:{l:{115:{l:{108:{l:{59:{c:[10725]}}}}}}}}}}}}}}},114:{l:{68:{l:{111:{l:{116:{l:{59:{c:[8787]}}}}}}},97:{l:{114:{l:{114:{l:{59:{c:[10609]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8495]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[8784]}}}}}}},105:{l:{109:{l:{59:{c:[8770]}}}}}}},116:{l:{97:{l:{59:{c:[951]}}},104:{l:{59:{c:[240]}},c:[240]}}},117:{l:{109:{l:{108:{l:{59:{c:[235]}},c:[235]}}},114:{l:{111:{l:{59:{c:[8364]}}}}}}},120:{l:{99:{l:{108:{l:{59:{c:[33]}}}}},105:{l:{115:{l:{116:{l:{59:{c:[8707]}}}}}}},112:{l:{101:{l:{99:{l:{116:{l:{97:{l:{116:{l:{105:{l:{111:{l:{110:{l:{59:{c:[8496]}}}}}}}}}}}}}}}}},111:{l:{110:{l:{101:{l:{110:{l:{116:{l:{105:{l:{97:{l:{108:{l:{101:{l:{59:{c:[8519]}}}}}}}}}}}}}}}}}}}}}}}}},102:{l:{97:{l:{108:{l:{108:{l:{105:{l:{110:{l:{103:{l:{100:{l:{111:{l:{116:{l:{115:{l:{101:{l:{113:{l:{59:{c:[8786]}}}}}}}}}}}}}}}}}}}}}}}}},99:{l:{121:{l:{59:{c:[1092]}}}}},101:{l:{109:{l:{97:{l:{108:{l:{101:{l:{59:{c:[9792]}}}}}}}}}}},102:{l:{105:{l:{108:{l:{105:{l:{103:{l:{59:{c:[64259]}}}}}}}}},108:{l:{105:{l:{103:{l:{59:{c:[64256]}}}}},108:{l:{105:{l:{103:{l:{59:{c:[64260]}}}}}}}}},114:{l:{59:{c:[120099]}}}}},105:{l:{108:{l:{105:{l:{103:{l:{59:{c:[64257]}}}}}}}}},106:{l:{108:{l:{105:{l:{103:{l:{59:{c:[102,106]}}}}}}}}},108:{l:{97:{l:{116:{l:{59:{c:[9837]}}}}},108:{l:{105:{l:{103:{l:{59:{c:[64258]}}}}}}},116:{l:{110:{l:{115:{l:{59:{c:[9649]}}}}}}}}},110:{l:{111:{l:{102:{l:{59:{c:[402]}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120151]}}}}},114:{l:{97:{l:{108:{l:{108:{l:{59:{c:[8704]}}}}}}},107:{l:{59:{c:[8916]},118:{l:{59:{c:[10969]}}}}}}}}},112:{l:{97:{l:{114:{l:{116:{l:{105:{l:{110:{l:{116:{l:{59:{c:[10765]}}}}}}}}}}}}}}},114:{l:{97:{l:{99:{l:{49:{l:{50:{l:{59:{c:[189]}},c:[189]},51:{l:{59:{c:[8531]}}},52:{l:{59:{c:[188]}},c:[188]},53:{l:{59:{c:[8533]}}},54:{l:{59:{c:[8537]}}},56:{l:{59:{c:[8539]}}}}},50:{l:{51:{l:{59:{c:[8532]}}},53:{l:{59:{c:[8534]}}}}},51:{l:{52:{l:{59:{c:[190]}},c:[190]},53:{l:{59:{c:[8535]}}},56:{l:{59:{c:[8540]}}}}},52:{l:{53:{l:{59:{c:[8536]}}}}},53:{l:{54:{l:{59:{c:[8538]}}},56:{l:{59:{c:[8541]}}}}},55:{l:{56:{l:{59:{c:[8542]}}}}}}},115:{l:{108:{l:{59:{c:[8260]}}}}}}},111:{l:{119:{l:{110:{l:{59:{c:[8994]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119995]}}}}}}}}},103:{l:{69:{l:{59:{c:[8807]},108:{l:{59:{c:[10892]}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[501]}}}}}}}}},109:{l:{109:{l:{97:{l:{59:{c:[947]},100:{l:{59:{c:[989]}}}}}}}}},112:{l:{59:{c:[10886]}}}}},98:{l:{114:{l:{101:{l:{118:{l:{101:{l:{59:{c:[287]}}}}}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[285]}}}}}}},121:{l:{59:{c:[1075]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[289]}}}}}}},101:{l:{59:{c:[8805]},108:{l:{59:{c:[8923]}}},113:{l:{59:{c:[8805]},113:{l:{59:{c:[8807]}}},115:{l:{108:{l:{97:{l:{110:{l:{116:{l:{59:{c:[10878]}}}}}}}}}}}}},115:{l:{59:{c:[10878]},99:{l:{99:{l:{59:{c:[10921]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[10880]},111:{l:{59:{c:[10882]},108:{l:{59:{c:[10884]}}}}}}}}}}},108:{l:{59:{c:[8923,65024]},101:{l:{115:{l:{59:{c:[10900]}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120100]}}}}},103:{l:{59:{c:[8811]},103:{l:{59:{c:[8921]}}}}},105:{l:{109:{l:{101:{l:{108:{l:{59:{c:[8503]}}}}}}}}},106:{l:{99:{l:{121:{l:{59:{c:[1107]}}}}}}},108:{l:{59:{c:[8823]},69:{l:{59:{c:[10898]}}},97:{l:{59:{c:[10917]}}},106:{l:{59:{c:[10916]}}}}},110:{l:{69:{l:{59:{c:[8809]}}},97:{l:{112:{l:{59:{c:[10890]},112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[10890]}}}}}}}}}}}}},101:{l:{59:{c:[10888]},113:{l:{59:{c:[10888]},113:{l:{59:{c:[8809]}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8935]}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120152]}}}}}}},114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[96]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8458]}}}}},105:{l:{109:{l:{59:{c:[8819]},101:{l:{59:{c:[10894]}}},108:{l:{59:{c:[10896]}}}}}}}}},116:{l:{59:{c:[62]},99:{l:{99:{l:{59:{c:[10919]}}},105:{l:{114:{l:{59:{c:[10874]}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[8919]}}}}}}},108:{l:{80:{l:{97:{l:{114:{l:{59:{c:[10645]}}}}}}}}},113:{l:{117:{l:{101:{l:{115:{l:{116:{l:{59:{c:[10876]}}}}}}}}}}},114:{l:{97:{l:{112:{l:{112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[10886]}}}}}}}}}}},114:{l:{114:{l:{59:{c:[10616]}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[8919]}}}}}}},101:{l:{113:{l:{108:{l:{101:{l:{115:{l:{115:{l:{59:{c:[8923]}}}}}}}}},113:{l:{108:{l:{101:{l:{115:{l:{115:{l:{59:{c:[10892]}}}}}}}}}}}}}}},108:{l:{101:{l:{115:{l:{115:{l:{59:{c:[8823]}}}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8819]}}}}}}}}}},c:[62]},118:{l:{101:{l:{114:{l:{116:{l:{110:{l:{101:{l:{113:{l:{113:{l:{59:{c:[8809,65024]}}}}}}}}}}}}}}},110:{l:{69:{l:{59:{c:[8809,65024]}}}}}}}}},104:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8660]}}}}}}},97:{l:{105:{l:{114:{l:{115:{l:{112:{l:{59:{c:[8202]}}}}}}}}},108:{l:{102:{l:{59:{c:[189]}}}}},109:{l:{105:{l:{108:{l:{116:{l:{59:{c:[8459]}}}}}}}}},114:{l:{100:{l:{99:{l:{121:{l:{59:{c:[1098]}}}}}}},114:{l:{59:{c:[8596]},99:{l:{105:{l:{114:{l:{59:{c:[10568]}}}}}}},119:{l:{59:{c:[8621]}}}}}}}}},98:{l:{97:{l:{114:{l:{59:{c:[8463]}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[293]}}}}}}}}},101:{l:{97:{l:{114:{l:{116:{l:{115:{l:{59:{c:[9829]},117:{l:{105:{l:{116:{l:{59:{c:[9829]}}}}}}}}}}}}}}},108:{l:{108:{l:{105:{l:{112:{l:{59:{c:[8230]}}}}}}}}},114:{l:{99:{l:{111:{l:{110:{l:{59:{c:[8889]}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120101]}}}}},107:{l:{115:{l:{101:{l:{97:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10533]}}}}}}}}}}},119:{l:{97:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10534]}}}}}}}}}}}}}}},111:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8703]}}}}}}},109:{l:{116:{l:{104:{l:{116:{l:{59:{c:[8763]}}}}}}}}},111:{l:{107:{l:{108:{l:{101:{l:{102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8617]}}}}}}}}}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8618]}}}}}}}}}}}}}}}}}}}}}}}}},112:{l:{102:{l:{59:{c:[120153]}}}}},114:{l:{98:{l:{97:{l:{114:{l:{59:{c:[8213]}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119997]}}}}},108:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8463]}}}}}}}}},116:{l:{114:{l:{111:{l:{107:{l:{59:{c:[295]}}}}}}}}}}},121:{l:{98:{l:{117:{l:{108:{l:{108:{l:{59:{c:[8259]}}}}}}}}},112:{l:{104:{l:{101:{l:{110:{l:{59:{c:[8208]}}}}}}}}}}}}},105:{l:{97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[237]}},c:[237]}}}}}}}}},99:{l:{59:{c:[8291]},105:{l:{114:{l:{99:{l:{59:{c:[238]}},c:[238]}}}}},121:{l:{59:{c:[1080]}}}}},101:{l:{99:{l:{121:{l:{59:{c:[1077]}}}}},120:{l:{99:{l:{108:{l:{59:{c:[161]}},c:[161]}}}}}}},102:{l:{102:{l:{59:{c:[8660]}}},114:{l:{59:{c:[120102]}}}}},103:{l:{114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[236]}},c:[236]}}}}}}}}},105:{l:{59:{c:[8520]},105:{l:{105:{l:{110:{l:{116:{l:{59:{c:[10764]}}}}}}},110:{l:{116:{l:{59:{c:[8749]}}}}}}},110:{l:{102:{l:{105:{l:{110:{l:{59:{c:[10716]}}}}}}}}},111:{l:{116:{l:{97:{l:{59:{c:[8489]}}}}}}}}},106:{l:{108:{l:{105:{l:{103:{l:{59:{c:[307]}}}}}}}}},109:{l:{97:{l:{99:{l:{114:{l:{59:{c:[299]}}}}},103:{l:{101:{l:{59:{c:[8465]}}},108:{l:{105:{l:{110:{l:{101:{l:{59:{c:[8464]}}}}}}}}},112:{l:{97:{l:{114:{l:{116:{l:{59:{c:[8465]}}}}}}}}}}},116:{l:{104:{l:{59:{c:[305]}}}}}}},111:{l:{102:{l:{59:{c:[8887]}}}}},112:{l:{101:{l:{100:{l:{59:{c:[437]}}}}}}}}},110:{l:{59:{c:[8712]},99:{l:{97:{l:{114:{l:{101:{l:{59:{c:[8453]}}}}}}}}},102:{l:{105:{l:{110:{l:{59:{c:[8734]},116:{l:{105:{l:{101:{l:{59:{c:[10717]}}}}}}}}}}}}},111:{l:{100:{l:{111:{l:{116:{l:{59:{c:[305]}}}}}}}}},116:{l:{59:{c:[8747]},99:{l:{97:{l:{108:{l:{59:{c:[8890]}}}}}}},101:{l:{103:{l:{101:{l:{114:{l:{115:{l:{59:{c:[8484]}}}}}}}}},114:{l:{99:{l:{97:{l:{108:{l:{59:{c:[8890]}}}}}}}}}}},108:{l:{97:{l:{114:{l:{104:{l:{107:{l:{59:{c:[10775]}}}}}}}}}}},112:{l:{114:{l:{111:{l:{100:{l:{59:{c:[10812]}}}}}}}}}}}}},111:{l:{99:{l:{121:{l:{59:{c:[1105]}}}}},103:{l:{111:{l:{110:{l:{59:{c:[303]}}}}}}},112:{l:{102:{l:{59:{c:[120154]}}}}},116:{l:{97:{l:{59:{c:[953]}}}}}}},112:{l:{114:{l:{111:{l:{100:{l:{59:{c:[10812]}}}}}}}}},113:{l:{117:{l:{101:{l:{115:{l:{116:{l:{59:{c:[191]}},c:[191]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119998]}}}}},105:{l:{110:{l:{59:{c:[8712]},69:{l:{59:{c:[8953]}}},100:{l:{111:{l:{116:{l:{59:{c:[8949]}}}}}}},115:{l:{59:{c:[8948]},118:{l:{59:{c:[8947]}}}}},118:{l:{59:{c:[8712]}}}}}}}}},116:{l:{59:{c:[8290]},105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[297]}}}}}}}}}}},117:{l:{107:{l:{99:{l:{121:{l:{59:{c:[1110]}}}}}}},109:{l:{108:{l:{59:{c:[239]}},c:[239]}}}}}}},106:{l:{99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[309]}}}}}}},121:{l:{59:{c:[1081]}}}}},102:{l:{114:{l:{59:{c:[120103]}}}}},109:{l:{97:{l:{116:{l:{104:{l:{59:{c:[567]}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120155]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119999]}}}}},101:{l:{114:{l:{99:{l:{121:{l:{59:{c:[1112]}}}}}}}}}}},117:{l:{107:{l:{99:{l:{121:{l:{59:{c:[1108]}}}}}}}}}}},107:{l:{97:{l:{112:{l:{112:{l:{97:{l:{59:{c:[954]},118:{l:{59:{c:[1008]}}}}}}}}}}},99:{l:{101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[311]}}}}}}}}},121:{l:{59:{c:[1082]}}}}},102:{l:{114:{l:{59:{c:[120104]}}}}},103:{l:{114:{l:{101:{l:{101:{l:{110:{l:{59:{c:[312]}}}}}}}}}}},104:{l:{99:{l:{121:{l:{59:{c:[1093]}}}}}}},106:{l:{99:{l:{121:{l:{59:{c:[1116]}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120156]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120000]}}}}}}}}},108:{l:{65:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8666]}}}}}}},114:{l:{114:{l:{59:{c:[8656]}}}}},116:{l:{97:{l:{105:{l:{108:{l:{59:{c:[10523]}}}}}}}}}}},66:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10510]}}}}}}}}},69:{l:{59:{c:[8806]},103:{l:{59:{c:[10891]}}}}},72:{l:{97:{l:{114:{l:{59:{c:[10594]}}}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[314]}}}}}}}}},101:{l:{109:{l:{112:{l:{116:{l:{121:{l:{118:{l:{59:{c:[10676]}}}}}}}}}}}}},103:{l:{114:{l:{97:{l:{110:{l:{59:{c:[8466]}}}}}}}}},109:{l:{98:{l:{100:{l:{97:{l:{59:{c:[955]}}}}}}}}},110:{l:{103:{l:{59:{c:[10216]},100:{l:{59:{c:[10641]}}},108:{l:{101:{l:{59:{c:[10216]}}}}}}}}},112:{l:{59:{c:[10885]}}},113:{l:{117:{l:{111:{l:{59:{c:[171]}},c:[171]}}}}},114:{l:{114:{l:{59:{c:[8592]},98:{l:{59:{c:[8676]},102:{l:{115:{l:{59:{c:[10527]}}}}}}},102:{l:{115:{l:{59:{c:[10525]}}}}},104:{l:{107:{l:{59:{c:[8617]}}}}},108:{l:{112:{l:{59:{c:[8619]}}}}},112:{l:{108:{l:{59:{c:[10553]}}}}},115:{l:{105:{l:{109:{l:{59:{c:[10611]}}}}}}},116:{l:{108:{l:{59:{c:[8610]}}}}}}}}},116:{l:{59:{c:[10923]},97:{l:{105:{l:{108:{l:{59:{c:[10521]}}}}}}},101:{l:{59:{c:[10925]},115:{l:{59:{c:[10925,65024]}}}}}}}}},98:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10508]}}}}}}},98:{l:{114:{l:{107:{l:{59:{c:[10098]}}}}}}},114:{l:{97:{l:{99:{l:{101:{l:{59:{c:[123]}}},107:{l:{59:{c:[91]}}}}}}},107:{l:{101:{l:{59:{c:[10635]}}},115:{l:{108:{l:{100:{l:{59:{c:[10639]}}},117:{l:{59:{c:[10637]}}}}}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[318]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[316]}}}}}}},105:{l:{108:{l:{59:{c:[8968]}}}}}}},117:{l:{98:{l:{59:{c:[123]}}}}},121:{l:{59:{c:[1083]}}}}},100:{l:{99:{l:{97:{l:{59:{c:[10550]}}}}},113:{l:{117:{l:{111:{l:{59:{c:[8220]},114:{l:{59:{c:[8222]}}}}}}}}},114:{l:{100:{l:{104:{l:{97:{l:{114:{l:{59:{c:[10599]}}}}}}}}},117:{l:{115:{l:{104:{l:{97:{l:{114:{l:{59:{c:[10571]}}}}}}}}}}}}},115:{l:{104:{l:{59:{c:[8626]}}}}}}},101:{l:{59:{c:[8804]},102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8592]},116:{l:{97:{l:{105:{l:{108:{l:{59:{c:[8610]}}}}}}}}}}}}}}}}}}},104:{l:{97:{l:{114:{l:{112:{l:{111:{l:{111:{l:{110:{l:{100:{l:{111:{l:{119:{l:{110:{l:{59:{c:[8637]}}}}}}}}},117:{l:{112:{l:{59:{c:[8636]}}}}}}}}}}}}}}}}}}},108:{l:{101:{l:{102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{115:{l:{59:{c:[8647]}}}}}}}}}}}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8596]},115:{l:{59:{c:[8646]}}}}}}}}}}}}},104:{l:{97:{l:{114:{l:{112:{l:{111:{l:{111:{l:{110:{l:{115:{l:{59:{c:[8651]}}}}}}}}}}}}}}}}},115:{l:{113:{l:{117:{l:{105:{l:{103:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8621]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},116:{l:{104:{l:{114:{l:{101:{l:{101:{l:{116:{l:{105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[8907]}}}}}}}}}}}}}}}}}}}}}}}}},103:{l:{59:{c:[8922]}}},113:{l:{59:{c:[8804]},113:{l:{59:{c:[8806]}}},115:{l:{108:{l:{97:{l:{110:{l:{116:{l:{59:{c:[10877]}}}}}}}}}}}}},115:{l:{59:{c:[10877]},99:{l:{99:{l:{59:{c:[10920]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[10879]},111:{l:{59:{c:[10881]},114:{l:{59:{c:[10883]}}}}}}}}}}},103:{l:{59:{c:[8922,65024]},101:{l:{115:{l:{59:{c:[10899]}}}}}}},115:{l:{97:{l:{112:{l:{112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[10885]}}}}}}}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[8918]}}}}}}},101:{l:{113:{l:{103:{l:{116:{l:{114:{l:{59:{c:[8922]}}}}}}},113:{l:{103:{l:{116:{l:{114:{l:{59:{c:[10891]}}}}}}}}}}}}},103:{l:{116:{l:{114:{l:{59:{c:[8822]}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8818]}}}}}}}}}}}}},102:{l:{105:{l:{115:{l:{104:{l:{116:{l:{59:{c:[10620]}}}}}}}}},108:{l:{111:{l:{111:{l:{114:{l:{59:{c:[8970]}}}}}}}}},114:{l:{59:{c:[120105]}}}}},103:{l:{59:{c:[8822]},69:{l:{59:{c:[10897]}}}}},104:{l:{97:{l:{114:{l:{100:{l:{59:{c:[8637]}}},117:{l:{59:{c:[8636]},108:{l:{59:{c:[10602]}}}}}}}}},98:{l:{108:{l:{107:{l:{59:{c:[9604]}}}}}}}}},106:{l:{99:{l:{121:{l:{59:{c:[1113]}}}}}}},108:{l:{59:{c:[8810]},97:{l:{114:{l:{114:{l:{59:{c:[8647]}}}}}}},99:{l:{111:{l:{114:{l:{110:{l:{101:{l:{114:{l:{59:{c:[8990]}}}}}}}}}}}}},104:{l:{97:{l:{114:{l:{100:{l:{59:{c:[10603]}}}}}}}}},116:{l:{114:{l:{105:{l:{59:{c:[9722]}}}}}}}}},109:{l:{105:{l:{100:{l:{111:{l:{116:{l:{59:{c:[320]}}}}}}}}},111:{l:{117:{l:{115:{l:{116:{l:{59:{c:[9136]},97:{l:{99:{l:{104:{l:{101:{l:{59:{c:[9136]}}}}}}}}}}}}}}}}}}},110:{l:{69:{l:{59:{c:[8808]}}},97:{l:{112:{l:{59:{c:[10889]},112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[10889]}}}}}}}}}}}}},101:{l:{59:{c:[10887]},113:{l:{59:{c:[10887]},113:{l:{59:{c:[8808]}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8934]}}}}}}}}},111:{l:{97:{l:{110:{l:{103:{l:{59:{c:[10220]}}}}},114:{l:{114:{l:{59:{c:[8701]}}}}}}},98:{l:{114:{l:{107:{l:{59:{c:[10214]}}}}}}},110:{l:{103:{l:{108:{l:{101:{l:{102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10229]}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10231]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},109:{l:{97:{l:{112:{l:{115:{l:{116:{l:{111:{l:{59:{c:[10236]}}}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10230]}}}}}}}}}}}}}}}}}}}}}}}}},111:{l:{112:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[8619]}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{59:{c:[8620]}}}}}}}}}}}}}}}}}}}}}}}}},112:{l:{97:{l:{114:{l:{59:{c:[10629]}}}}},102:{l:{59:{c:[120157]}}},108:{l:{117:{l:{115:{l:{59:{c:[10797]}}}}}}}}},116:{l:{105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[10804]}}}}}}}}}}},119:{l:{97:{l:{115:{l:{116:{l:{59:{c:[8727]}}}}}}},98:{l:{97:{l:{114:{l:{59:{c:[95]}}}}}}}}},122:{l:{59:{c:[9674]},101:{l:{110:{l:{103:{l:{101:{l:{59:{c:[9674]}}}}}}}}},102:{l:{59:{c:[10731]}}}}}}},112:{l:{97:{l:{114:{l:{59:{c:[40]},108:{l:{116:{l:{59:{c:[10643]}}}}}}}}}}},114:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8646]}}}}}}},99:{l:{111:{l:{114:{l:{110:{l:{101:{l:{114:{l:{59:{c:[8991]}}}}}}}}}}}}},104:{l:{97:{l:{114:{l:{59:{c:[8651]},100:{l:{59:{c:[10605]}}}}}}}}},109:{l:{59:{c:[8206]}}},116:{l:{114:{l:{105:{l:{59:{c:[8895]}}}}}}}}},115:{l:{97:{l:{113:{l:{117:{l:{111:{l:{59:{c:[8249]}}}}}}}}},99:{l:{114:{l:{59:{c:[120001]}}}}},104:{l:{59:{c:[8624]}}},105:{l:{109:{l:{59:{c:[8818]},101:{l:{59:{c:[10893]}}},103:{l:{59:{c:[10895]}}}}}}},113:{l:{98:{l:{59:{c:[91]}}},117:{l:{111:{l:{59:{c:[8216]},114:{l:{59:{c:[8218]}}}}}}}}},116:{l:{114:{l:{111:{l:{107:{l:{59:{c:[322]}}}}}}}}}}},116:{l:{59:{c:[60]},99:{l:{99:{l:{59:{c:[10918]}}},105:{l:{114:{l:{59:{c:[10873]}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[8918]}}}}}}},104:{l:{114:{l:{101:{l:{101:{l:{59:{c:[8907]}}}}}}}}},105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[8905]}}}}}}}}},108:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10614]}}}}}}}}},113:{l:{117:{l:{101:{l:{115:{l:{116:{l:{59:{c:[10875]}}}}}}}}}}},114:{l:{80:{l:{97:{l:{114:{l:{59:{c:[10646]}}}}}}},105:{l:{59:{c:[9667]},101:{l:{59:{c:[8884]}}},102:{l:{59:{c:[9666]}}}}}}}},c:[60]},117:{l:{114:{l:{100:{l:{115:{l:{104:{l:{97:{l:{114:{l:{59:{c:[10570]}}}}}}}}}}},117:{l:{104:{l:{97:{l:{114:{l:{59:{c:[10598]}}}}}}}}}}}}},118:{l:{101:{l:{114:{l:{116:{l:{110:{l:{101:{l:{113:{l:{113:{l:{59:{c:[8808,65024]}}}}}}}}}}}}}}},110:{l:{69:{l:{59:{c:[8808,65024]}}}}}}}}},109:{l:{68:{l:{68:{l:{111:{l:{116:{l:{59:{c:[8762]}}}}}}}}},97:{l:{99:{l:{114:{l:{59:{c:[175]}},c:[175]}}},108:{l:{101:{l:{59:{c:[9794]}}},116:{l:{59:{c:[10016]},101:{l:{115:{l:{101:{l:{59:{c:[10016]}}}}}}}}}}},112:{l:{59:{c:[8614]},115:{l:{116:{l:{111:{l:{59:{c:[8614]},100:{l:{111:{l:{119:{l:{110:{l:{59:{c:[8615]}}}}}}}}},108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[8612]}}}}}}}}},117:{l:{112:{l:{59:{c:[8613]}}}}}}}}}}}}},114:{l:{107:{l:{101:{l:{114:{l:{59:{c:[9646]}}}}}}}}}}},99:{l:{111:{l:{109:{l:{109:{l:{97:{l:{59:{c:[10793]}}}}}}}}},121:{l:{59:{c:[1084]}}}}},100:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8212]}}}}}}}}},101:{l:{97:{l:{115:{l:{117:{l:{114:{l:{101:{l:{100:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{59:{c:[8737]}}}}}}}}}}}}}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120106]}}}}},104:{l:{111:{l:{59:{c:[8487]}}}}},105:{l:{99:{l:{114:{l:{111:{l:{59:{c:[181]}},c:[181]}}}}},100:{l:{59:{c:[8739]},97:{l:{115:{l:{116:{l:{59:{c:[42]}}}}}}},99:{l:{105:{l:{114:{l:{59:{c:[10992]}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[183]}},c:[183]}}}}}}},110:{l:{117:{l:{115:{l:{59:{c:[8722]},98:{l:{59:{c:[8863]}}},100:{l:{59:{c:[8760]},117:{l:{59:{c:[10794]}}}}}}}}}}}}},108:{l:{99:{l:{112:{l:{59:{c:[10971]}}}}},100:{l:{114:{l:{59:{c:[8230]}}}}}}},110:{l:{112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[8723]}}}}}}}}}}},111:{l:{100:{l:{101:{l:{108:{l:{115:{l:{59:{c:[8871]}}}}}}}}},112:{l:{102:{l:{59:{c:[120158]}}}}}}},112:{l:{59:{c:[8723]}}},115:{l:{99:{l:{114:{l:{59:{c:[120002]}}}}},116:{l:{112:{l:{111:{l:{115:{l:{59:{c:[8766]}}}}}}}}}}},117:{l:{59:{c:[956]},108:{l:{116:{l:{105:{l:{109:{l:{97:{l:{112:{l:{59:{c:[8888]}}}}}}}}}}}}},109:{l:{97:{l:{112:{l:{59:{c:[8888]}}}}}}}}}}},110:{l:{71:{l:{103:{l:{59:{c:[8921,824]}}},116:{l:{59:{c:[8811,8402]},118:{l:{59:{c:[8811,824]}}}}}}},76:{l:{101:{l:{102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8653]}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8654]}}}}}}}}}}}}}}}}}}}}}}}}}}},108:{l:{59:{c:[8920,824]}}},116:{l:{59:{c:[8810,8402]},118:{l:{59:{c:[8810,824]}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8655]}}}}}}}}}}}}}}}}}}}}},86:{l:{68:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8879]}}}}}}}}},100:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8878]}}}}}}}}}}},97:{l:{98:{l:{108:{l:{97:{l:{59:{c:[8711]}}}}}}},99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[324]}}}}}}}}},110:{l:{103:{l:{59:{c:[8736,8402]}}}}},112:{l:{59:{c:[8777]},69:{l:{59:{c:[10864,824]}}},105:{l:{100:{l:{59:{c:[8779,824]}}}}},111:{l:{115:{l:{59:{c:[329]}}}}},112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[8777]}}}}}}}}}}},116:{l:{117:{l:{114:{l:{59:{c:[9838]},97:{l:{108:{l:{59:{c:[9838]},115:{l:{59:{c:[8469]}}}}}}}}}}}}}}},98:{l:{115:{l:{112:{l:{59:{c:[160]}},c:[160]}}},117:{l:{109:{l:{112:{l:{59:{c:[8782,824]},101:{l:{59:{c:[8783,824]}}}}}}}}}}},99:{l:{97:{l:{112:{l:{59:{c:[10819]}}},114:{l:{111:{l:{110:{l:{59:{c:[328]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[326]}}}}}}}}},111:{l:{110:{l:{103:{l:{59:{c:[8775]},100:{l:{111:{l:{116:{l:{59:{c:[10861,824]}}}}}}}}}}}}},117:{l:{112:{l:{59:{c:[10818]}}}}},121:{l:{59:{c:[1085]}}}}},100:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8211]}}}}}}}}},101:{l:{59:{c:[8800]},65:{l:{114:{l:{114:{l:{59:{c:[8663]}}}}}}},97:{l:{114:{l:{104:{l:{107:{l:{59:{c:[10532]}}}}},114:{l:{59:{c:[8599]},111:{l:{119:{l:{59:{c:[8599]}}}}}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[8784,824]}}}}}}},113:{l:{117:{l:{105:{l:{118:{l:{59:{c:[8802]}}}}}}}}},115:{l:{101:{l:{97:{l:{114:{l:{59:{c:[10536]}}}}}}},105:{l:{109:{l:{59:{c:[8770,824]}}}}}}},120:{l:{105:{l:{115:{l:{116:{l:{59:{c:[8708]},115:{l:{59:{c:[8708]}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120107]}}}}},103:{l:{69:{l:{59:{c:[8807,824]}}},101:{l:{59:{c:[8817]},113:{l:{59:{c:[8817]},113:{l:{59:{c:[8807,824]}}},115:{l:{108:{l:{97:{l:{110:{l:{116:{l:{59:{c:[10878,824]}}}}}}}}}}}}},115:{l:{59:{c:[10878,824]}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8821]}}}}}}},116:{l:{59:{c:[8815]},114:{l:{59:{c:[8815]}}}}}}},104:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8654]}}}}}}},97:{l:{114:{l:{114:{l:{59:{c:[8622]}}}}}}},112:{l:{97:{l:{114:{l:{59:{c:[10994]}}}}}}}}},105:{l:{59:{c:[8715]},115:{l:{59:{c:[8956]},100:{l:{59:{c:[8954]}}}}},118:{l:{59:{c:[8715]}}}}},106:{l:{99:{l:{121:{l:{59:{c:[1114]}}}}}}},108:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8653]}}}}}}},69:{l:{59:{c:[8806,824]}}},97:{l:{114:{l:{114:{l:{59:{c:[8602]}}}}}}},100:{l:{114:{l:{59:{c:[8229]}}}}},101:{l:{59:{c:[8816]},102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8602]}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8622]}}}}}}}}}}}}}}}}}}}}}}}}},113:{l:{59:{c:[8816]},113:{l:{59:{c:[8806,824]}}},115:{l:{108:{l:{97:{l:{110:{l:{116:{l:{59:{c:[10877,824]}}}}}}}}}}}}},115:{l:{59:{c:[10877,824]},115:{l:{59:{c:[8814]}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8820]}}}}}}},116:{l:{59:{c:[8814]},114:{l:{105:{l:{59:{c:[8938]},101:{l:{59:{c:[8940]}}}}}}}}}}},109:{l:{105:{l:{100:{l:{59:{c:[8740]}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120159]}}}}},116:{l:{59:{c:[172]},105:{l:{110:{l:{59:{c:[8713]},69:{l:{59:{c:[8953,824]}}},100:{l:{111:{l:{116:{l:{59:{c:[8949,824]}}}}}}},118:{l:{97:{l:{59:{c:[8713]}}},98:{l:{59:{c:[8951]}}},99:{l:{59:{c:[8950]}}}}}}}}},110:{l:{105:{l:{59:{c:[8716]},118:{l:{97:{l:{59:{c:[8716]}}},98:{l:{59:{c:[8958]}}},99:{l:{59:{c:[8957]}}}}}}}}}},c:[172]}}},112:{l:{97:{l:{114:{l:{59:{c:[8742]},97:{l:{108:{l:{108:{l:{101:{l:{108:{l:{59:{c:[8742]}}}}}}}}}}},115:{l:{108:{l:{59:{c:[11005,8421]}}}}},116:{l:{59:{c:[8706,824]}}}}}}},111:{l:{108:{l:{105:{l:{110:{l:{116:{l:{59:{c:[10772]}}}}}}}}}}},114:{l:{59:{c:[8832]},99:{l:{117:{l:{101:{l:{59:{c:[8928]}}}}}}},101:{l:{59:{c:[10927,824]},99:{l:{59:{c:[8832]},101:{l:{113:{l:{59:{c:[10927,824]}}}}}}}}}}}}},114:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8655]}}}}}}},97:{l:{114:{l:{114:{l:{59:{c:[8603]},99:{l:{59:{c:[10547,824]}}},119:{l:{59:{c:[8605,824]}}}}}}}}},105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8603]}}}}}}}}}}}}}}}}}}},116:{l:{114:{l:{105:{l:{59:{c:[8939]},101:{l:{59:{c:[8941]}}}}}}}}}}},115:{l:{99:{l:{59:{c:[8833]},99:{l:{117:{l:{101:{l:{59:{c:[8929]}}}}}}},101:{l:{59:{c:[10928,824]}}},114:{l:{59:{c:[120003]}}}}},104:{l:{111:{l:{114:{l:{116:{l:{109:{l:{105:{l:{100:{l:{59:{c:[8740]}}}}}}},112:{l:{97:{l:{114:{l:{97:{l:{108:{l:{108:{l:{101:{l:{108:{l:{59:{c:[8742]}}}}}}}}}}}}}}}}}}}}}}}}},105:{l:{109:{l:{59:{c:[8769]},101:{l:{59:{c:[8772]},113:{l:{59:{c:[8772]}}}}}}}}},109:{l:{105:{l:{100:{l:{59:{c:[8740]}}}}}}},112:{l:{97:{l:{114:{l:{59:{c:[8742]}}}}}}},113:{l:{115:{l:{117:{l:{98:{l:{101:{l:{59:{c:[8930]}}}}},112:{l:{101:{l:{59:{c:[8931]}}}}}}}}}}},117:{l:{98:{l:{59:{c:[8836]},69:{l:{59:{c:[10949,824]}}},101:{l:{59:{c:[8840]}}},115:{l:{101:{l:{116:{l:{59:{c:[8834,8402]},101:{l:{113:{l:{59:{c:[8840]},113:{l:{59:{c:[10949,824]}}}}}}}}}}}}}}},99:{l:{99:{l:{59:{c:[8833]},101:{l:{113:{l:{59:{c:[10928,824]}}}}}}}}},112:{l:{59:{c:[8837]},69:{l:{59:{c:[10950,824]}}},101:{l:{59:{c:[8841]}}},115:{l:{101:{l:{116:{l:{59:{c:[8835,8402]},101:{l:{113:{l:{59:{c:[8841]},113:{l:{59:{c:[10950,824]}}}}}}}}}}}}}}}}}}},116:{l:{103:{l:{108:{l:{59:{c:[8825]}}}}},105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[241]}},c:[241]}}}}}}},108:{l:{103:{l:{59:{c:[8824]}}}}},114:{l:{105:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[8938]},101:{l:{113:{l:{59:{c:[8940]}}}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{59:{c:[8939]},101:{l:{113:{l:{59:{c:[8941]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},117:{l:{59:{c:[957]},109:{l:{59:{c:[35]},101:{l:{114:{l:{111:{l:{59:{c:[8470]}}}}}}},115:{l:{112:{l:{59:{c:[8199]}}}}}}}}},118:{l:{68:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8877]}}}}}}}}},72:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10500]}}}}}}}}},97:{l:{112:{l:{59:{c:[8781,8402]}}}}},100:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8876]}}}}}}}}},103:{l:{101:{l:{59:{c:[8805,8402]}}},116:{l:{59:{c:[62,8402]}}}}},105:{l:{110:{l:{102:{l:{105:{l:{110:{l:{59:{c:[10718]}}}}}}}}}}},108:{l:{65:{l:{114:{l:{114:{l:{59:{c:[10498]}}}}}}},101:{l:{59:{c:[8804,8402]}}},116:{l:{59:{c:[60,8402]},114:{l:{105:{l:{101:{l:{59:{c:[8884,8402]}}}}}}}}}}},114:{l:{65:{l:{114:{l:{114:{l:{59:{c:[10499]}}}}}}},116:{l:{114:{l:{105:{l:{101:{l:{59:{c:[8885,8402]}}}}}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8764,8402]}}}}}}}}},119:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8662]}}}}}}},97:{l:{114:{l:{104:{l:{107:{l:{59:{c:[10531]}}}}},114:{l:{59:{c:[8598]},111:{l:{119:{l:{59:{c:[8598]}}}}}}}}}}},110:{l:{101:{l:{97:{l:{114:{l:{59:{c:[10535]}}}}}}}}}}}}},111:{l:{83:{l:{59:{c:[9416]}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[243]}},c:[243]}}}}}}},115:{l:{116:{l:{59:{c:[8859]}}}}}}},99:{l:{105:{l:{114:{l:{59:{c:[8858]},99:{l:{59:{c:[244]}},c:[244]}}}}},121:{l:{59:{c:[1086]}}}}},100:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8861]}}}}}}},98:{l:{108:{l:{97:{l:{99:{l:{59:{c:[337]}}}}}}}}},105:{l:{118:{l:{59:{c:[10808]}}}}},111:{l:{116:{l:{59:{c:[8857]}}}}},115:{l:{111:{l:{108:{l:{100:{l:{59:{c:[10684]}}}}}}}}}}},101:{l:{108:{l:{105:{l:{103:{l:{59:{c:[339]}}}}}}}}},102:{l:{99:{l:{105:{l:{114:{l:{59:{c:[10687]}}}}}}},114:{l:{59:{c:[120108]}}}}},103:{l:{111:{l:{110:{l:{59:{c:[731]}}}}},114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[242]}},c:[242]}}}}}}},116:{l:{59:{c:[10689]}}}}},104:{l:{98:{l:{97:{l:{114:{l:{59:{c:[10677]}}}}}}},109:{l:{59:{c:[937]}}}}},105:{l:{110:{l:{116:{l:{59:{c:[8750]}}}}}}},108:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8634]}}}}}}},99:{l:{105:{l:{114:{l:{59:{c:[10686]}}}}},114:{l:{111:{l:{115:{l:{115:{l:{59:{c:[10683]}}}}}}}}}}},105:{l:{110:{l:{101:{l:{59:{c:[8254]}}}}}}},116:{l:{59:{c:[10688]}}}}},109:{l:{97:{l:{99:{l:{114:{l:{59:{c:[333]}}}}}}},101:{l:{103:{l:{97:{l:{59:{c:[969]}}}}}}},105:{l:{99:{l:{114:{l:{111:{l:{110:{l:{59:{c:[959]}}}}}}}}},100:{l:{59:{c:[10678]}}},110:{l:{117:{l:{115:{l:{59:{c:[8854]}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120160]}}}}}}},112:{l:{97:{l:{114:{l:{59:{c:[10679]}}}}},101:{l:{114:{l:{112:{l:{59:{c:[10681]}}}}}}},108:{l:{117:{l:{115:{l:{59:{c:[8853]}}}}}}}}},114:{l:{59:{c:[8744]},97:{l:{114:{l:{114:{l:{59:{c:[8635]}}}}}}},100:{l:{59:{c:[10845]},101:{l:{114:{l:{59:{c:[8500]},111:{l:{102:{l:{59:{c:[8500]}}}}}}}}},102:{l:{59:{c:[170]}},c:[170]},109:{l:{59:{c:[186]}},c:[186]}}},105:{l:{103:{l:{111:{l:{102:{l:{59:{c:[8886]}}}}}}}}},111:{l:{114:{l:{59:{c:[10838]}}}}},115:{l:{108:{l:{111:{l:{112:{l:{101:{l:{59:{c:[10839]}}}}}}}}}}},118:{l:{59:{c:[10843]}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8500]}}}}},108:{l:{97:{l:{115:{l:{104:{l:{59:{c:[248]}},c:[248]}}}}}}},111:{l:{108:{l:{59:{c:[8856]}}}}}}},116:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[245]}},c:[245]}}}}},109:{l:{101:{l:{115:{l:{59:{c:[8855]},97:{l:{115:{l:{59:{c:[10806]}}}}}}}}}}}}}}},117:{l:{109:{l:{108:{l:{59:{c:[246]}},c:[246]}}}}},118:{l:{98:{l:{97:{l:{114:{l:{59:{c:[9021]}}}}}}}}}}},112:{l:{97:{l:{114:{l:{59:{c:[8741]},97:{l:{59:{c:[182]},108:{l:{108:{l:{101:{l:{108:{l:{59:{c:[8741]}}}}}}}}}},c:[182]},115:{l:{105:{l:{109:{l:{59:{c:[10995]}}}}},108:{l:{59:{c:[11005]}}}}},116:{l:{59:{c:[8706]}}}}}}},99:{l:{121:{l:{59:{c:[1087]}}}}},101:{l:{114:{l:{99:{l:{110:{l:{116:{l:{59:{c:[37]}}}}}}},105:{l:{111:{l:{100:{l:{59:{c:[46]}}}}}}},109:{l:{105:{l:{108:{l:{59:{c:[8240]}}}}}}},112:{l:{59:{c:[8869]}}},116:{l:{101:{l:{110:{l:{107:{l:{59:{c:[8241]}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120109]}}}}},104:{l:{105:{l:{59:{c:[966]},118:{l:{59:{c:[981]}}}}},109:{l:{109:{l:{97:{l:{116:{l:{59:{c:[8499]}}}}}}}}},111:{l:{110:{l:{101:{l:{59:{c:[9742]}}}}}}}}},105:{l:{59:{c:[960]},116:{l:{99:{l:{104:{l:{102:{l:{111:{l:{114:{l:{107:{l:{59:{c:[8916]}}}}}}}}}}}}}}},118:{l:{59:{c:[982]}}}}},108:{l:{97:{l:{110:{l:{99:{l:{107:{l:{59:{c:[8463]},104:{l:{59:{c:[8462]}}}}}}},107:{l:{118:{l:{59:{c:[8463]}}}}}}}}},117:{l:{115:{l:{59:{c:[43]},97:{l:{99:{l:{105:{l:{114:{l:{59:{c:[10787]}}}}}}}}},98:{l:{59:{c:[8862]}}},99:{l:{105:{l:{114:{l:{59:{c:[10786]}}}}}}},100:{l:{111:{l:{59:{c:[8724]}}},117:{l:{59:{c:[10789]}}}}},101:{l:{59:{c:[10866]}}},109:{l:{110:{l:{59:{c:[177]}},c:[177]}}},115:{l:{105:{l:{109:{l:{59:{c:[10790]}}}}}}},116:{l:{119:{l:{111:{l:{59:{c:[10791]}}}}}}}}}}}}},109:{l:{59:{c:[177]}}},111:{l:{105:{l:{110:{l:{116:{l:{105:{l:{110:{l:{116:{l:{59:{c:[10773]}}}}}}}}}}}}},112:{l:{102:{l:{59:{c:[120161]}}}}},117:{l:{110:{l:{100:{l:{59:{c:[163]}},c:[163]}}}}}}},114:{l:{59:{c:[8826]},69:{l:{59:{c:[10931]}}},97:{l:{112:{l:{59:{c:[10935]}}}}},99:{l:{117:{l:{101:{l:{59:{c:[8828]}}}}}}},101:{l:{59:{c:[10927]},99:{l:{59:{c:[8826]},97:{l:{112:{l:{112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[10935]}}}}}}}}}}}}},99:{l:{117:{l:{114:{l:{108:{l:{121:{l:{101:{l:{113:{l:{59:{c:[8828]}}}}}}}}}}}}}}},101:{l:{113:{l:{59:{c:[10927]}}}}},110:{l:{97:{l:{112:{l:{112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[10937]}}}}}}}}}}}}},101:{l:{113:{l:{113:{l:{59:{c:[10933]}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8936]}}}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8830]}}}}}}}}}}},105:{l:{109:{l:{101:{l:{59:{c:[8242]},115:{l:{59:{c:[8473]}}}}}}}}},110:{l:{69:{l:{59:{c:[10933]}}},97:{l:{112:{l:{59:{c:[10937]}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8936]}}}}}}}}},111:{l:{100:{l:{59:{c:[8719]}}},102:{l:{97:{l:{108:{l:{97:{l:{114:{l:{59:{c:[9006]}}}}}}}}},108:{l:{105:{l:{110:{l:{101:{l:{59:{c:[8978]}}}}}}}}},115:{l:{117:{l:{114:{l:{102:{l:{59:{c:[8979]}}}}}}}}}}},112:{l:{59:{c:[8733]},116:{l:{111:{l:{59:{c:[8733]}}}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8830]}}}}}}},117:{l:{114:{l:{101:{l:{108:{l:{59:{c:[8880]}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120005]}}}}},105:{l:{59:{c:[968]}}}}},117:{l:{110:{l:{99:{l:{115:{l:{112:{l:{59:{c:[8200]}}}}}}}}}}}}},113:{l:{102:{l:{114:{l:{59:{c:[120110]}}}}},105:{l:{110:{l:{116:{l:{59:{c:[10764]}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120162]}}}}}}},112:{l:{114:{l:{105:{l:{109:{l:{101:{l:{59:{c:[8279]}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120006]}}}}}}},117:{l:{97:{l:{116:{l:{101:{l:{114:{l:{110:{l:{105:{l:{111:{l:{110:{l:{115:{l:{59:{c:[8461]}}}}}}}}}}}}}}},105:{l:{110:{l:{116:{l:{59:{c:[10774]}}}}}}}}}}},101:{l:{115:{l:{116:{l:{59:{c:[63]},101:{l:{113:{l:{59:{c:[8799]}}}}}}}}}}},111:{l:{116:{l:{59:{c:[34]}},c:[34]}}}}}}},114:{l:{65:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8667]}}}}}}},114:{l:{114:{l:{59:{c:[8658]}}}}},116:{l:{97:{l:{105:{l:{108:{l:{59:{c:[10524]}}}}}}}}}}},66:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10511]}}}}}}}}},72:{l:{97:{l:{114:{l:{59:{c:[10596]}}}}}}},97:{l:{99:{l:{101:{l:{59:{c:[8765,817]}}},117:{l:{116:{l:{101:{l:{59:{c:[341]}}}}}}}}},100:{l:{105:{l:{99:{l:{59:{c:[8730]}}}}}}},101:{l:{109:{l:{112:{l:{116:{l:{121:{l:{118:{l:{59:{c:[10675]}}}}}}}}}}}}},110:{l:{103:{l:{59:{c:[10217]},100:{l:{59:{c:[10642]}}},101:{l:{59:{c:[10661]}}},108:{l:{101:{l:{59:{c:[10217]}}}}}}}}},113:{l:{117:{l:{111:{l:{59:{c:[187]}},c:[187]}}}}},114:{l:{114:{l:{59:{c:[8594]},97:{l:{112:{l:{59:{c:[10613]}}}}},98:{l:{59:{c:[8677]},102:{l:{115:{l:{59:{c:[10528]}}}}}}},99:{l:{59:{c:[10547]}}},102:{l:{115:{l:{59:{c:[10526]}}}}},104:{l:{107:{l:{59:{c:[8618]}}}}},108:{l:{112:{l:{59:{c:[8620]}}}}},112:{l:{108:{l:{59:{c:[10565]}}}}},115:{l:{105:{l:{109:{l:{59:{c:[10612]}}}}}}},116:{l:{108:{l:{59:{c:[8611]}}}}},119:{l:{59:{c:[8605]}}}}}}},116:{l:{97:{l:{105:{l:{108:{l:{59:{c:[10522]}}}}}}},105:{l:{111:{l:{59:{c:[8758]},110:{l:{97:{l:{108:{l:{115:{l:{59:{c:[8474]}}}}}}}}}}}}}}}}},98:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10509]}}}}}}},98:{l:{114:{l:{107:{l:{59:{c:[10099]}}}}}}},114:{l:{97:{l:{99:{l:{101:{l:{59:{c:[125]}}},107:{l:{59:{c:[93]}}}}}}},107:{l:{101:{l:{59:{c:[10636]}}},115:{l:{108:{l:{100:{l:{59:{c:[10638]}}},117:{l:{59:{c:[10640]}}}}}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[345]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[343]}}}}}}},105:{l:{108:{l:{59:{c:[8969]}}}}}}},117:{l:{98:{l:{59:{c:[125]}}}}},121:{l:{59:{c:[1088]}}}}},100:{l:{99:{l:{97:{l:{59:{c:[10551]}}}}},108:{l:{100:{l:{104:{l:{97:{l:{114:{l:{59:{c:[10601]}}}}}}}}}}},113:{l:{117:{l:{111:{l:{59:{c:[8221]},114:{l:{59:{c:[8221]}}}}}}}}},115:{l:{104:{l:{59:{c:[8627]}}}}}}},101:{l:{97:{l:{108:{l:{59:{c:[8476]},105:{l:{110:{l:{101:{l:{59:{c:[8475]}}}}}}},112:{l:{97:{l:{114:{l:{116:{l:{59:{c:[8476]}}}}}}}}},115:{l:{59:{c:[8477]}}}}}}},99:{l:{116:{l:{59:{c:[9645]}}}}},103:{l:{59:{c:[174]}},c:[174]}}},102:{l:{105:{l:{115:{l:{104:{l:{116:{l:{59:{c:[10621]}}}}}}}}},108:{l:{111:{l:{111:{l:{114:{l:{59:{c:[8971]}}}}}}}}},114:{l:{59:{c:[120111]}}}}},104:{l:{97:{l:{114:{l:{100:{l:{59:{c:[8641]}}},117:{l:{59:{c:[8640]},108:{l:{59:{c:[10604]}}}}}}}}},111:{l:{59:{c:[961]},118:{l:{59:{c:[1009]}}}}}}},105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8594]},116:{l:{97:{l:{105:{l:{108:{l:{59:{c:[8611]}}}}}}}}}}}}}}}}}}},104:{l:{97:{l:{114:{l:{112:{l:{111:{l:{111:{l:{110:{l:{100:{l:{111:{l:{119:{l:{110:{l:{59:{c:[8641]}}}}}}}}},117:{l:{112:{l:{59:{c:[8640]}}}}}}}}}}}}}}}}}}},108:{l:{101:{l:{102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{115:{l:{59:{c:[8644]}}}}}}}}}}}}},104:{l:{97:{l:{114:{l:{112:{l:{111:{l:{111:{l:{110:{l:{115:{l:{59:{c:[8652]}}}}}}}}}}}}}}}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{115:{l:{59:{c:[8649]}}}}}}}}}}}}}}}}}}}}}}},115:{l:{113:{l:{117:{l:{105:{l:{103:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8605]}}}}}}}}}}}}}}}}}}}}},116:{l:{104:{l:{114:{l:{101:{l:{101:{l:{116:{l:{105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[8908]}}}}}}}}}}}}}}}}}}}}}}}}}}},110:{l:{103:{l:{59:{c:[730]}}}}},115:{l:{105:{l:{110:{l:{103:{l:{100:{l:{111:{l:{116:{l:{115:{l:{101:{l:{113:{l:{59:{c:[8787]}}}}}}}}}}}}}}}}}}}}}}},108:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8644]}}}}}}},104:{l:{97:{l:{114:{l:{59:{c:[8652]}}}}}}},109:{l:{59:{c:[8207]}}}}},109:{l:{111:{l:{117:{l:{115:{l:{116:{l:{59:{c:[9137]},97:{l:{99:{l:{104:{l:{101:{l:{59:{c:[9137]}}}}}}}}}}}}}}}}}}},110:{l:{109:{l:{105:{l:{100:{l:{59:{c:[10990]}}}}}}}}},111:{l:{97:{l:{110:{l:{103:{l:{59:{c:[10221]}}}}},114:{l:{114:{l:{59:{c:[8702]}}}}}}},98:{l:{114:{l:{107:{l:{59:{c:[10215]}}}}}}},112:{l:{97:{l:{114:{l:{59:{c:[10630]}}}}},102:{l:{59:{c:[120163]}}},108:{l:{117:{l:{115:{l:{59:{c:[10798]}}}}}}}}},116:{l:{105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[10805]}}}}}}}}}}}}},112:{l:{97:{l:{114:{l:{59:{c:[41]},103:{l:{116:{l:{59:{c:[10644]}}}}}}}}},112:{l:{111:{l:{108:{l:{105:{l:{110:{l:{116:{l:{59:{c:[10770]}}}}}}}}}}}}}}},114:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8649]}}}}}}}}},115:{l:{97:{l:{113:{l:{117:{l:{111:{l:{59:{c:[8250]}}}}}}}}},99:{l:{114:{l:{59:{c:[120007]}}}}},104:{l:{59:{c:[8625]}}},113:{l:{98:{l:{59:{c:[93]}}},117:{l:{111:{l:{59:{c:[8217]},114:{l:{59:{c:[8217]}}}}}}}}}}},116:{l:{104:{l:{114:{l:{101:{l:{101:{l:{59:{c:[8908]}}}}}}}}},105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[8906]}}}}}}}}},114:{l:{105:{l:{59:{c:[9657]},101:{l:{59:{c:[8885]}}},102:{l:{59:{c:[9656]}}},108:{l:{116:{l:{114:{l:{105:{l:{59:{c:[10702]}}}}}}}}}}}}}}},117:{l:{108:{l:{117:{l:{104:{l:{97:{l:{114:{l:{59:{c:[10600]}}}}}}}}}}}}},120:{l:{59:{c:[8478]}}}}},115:{l:{97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[347]}}}}}}}}}}},98:{l:{113:{l:{117:{l:{111:{l:{59:{c:[8218]}}}}}}}}},99:{l:{59:{c:[8827]},69:{l:{59:{c:[10932]}}},97:{l:{112:{l:{59:{c:[10936]}}},114:{l:{111:{l:{110:{l:{59:{c:[353]}}}}}}}}},99:{l:{117:{l:{101:{l:{59:{c:[8829]}}}}}}},101:{l:{59:{c:[10928]},100:{l:{105:{l:{108:{l:{59:{c:[351]}}}}}}}}},105:{l:{114:{l:{99:{l:{59:{c:[349]}}}}}}},110:{l:{69:{l:{59:{c:[10934]}}},97:{l:{112:{l:{59:{c:[10938]}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8937]}}}}}}}}},112:{l:{111:{l:{108:{l:{105:{l:{110:{l:{116:{l:{59:{c:[10771]}}}}}}}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8831]}}}}}}},121:{l:{59:{c:[1089]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[8901]},98:{l:{59:{c:[8865]}}},101:{l:{59:{c:[10854]}}}}}}}}},101:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8664]}}}}}}},97:{l:{114:{l:{104:{l:{107:{l:{59:{c:[10533]}}}}},114:{l:{59:{c:[8600]},111:{l:{119:{l:{59:{c:[8600]}}}}}}}}}}},99:{l:{116:{l:{59:{c:[167]}},c:[167]}}},109:{l:{105:{l:{59:{c:[59]}}}}},115:{l:{119:{l:{97:{l:{114:{l:{59:{c:[10537]}}}}}}}}},116:{l:{109:{l:{105:{l:{110:{l:{117:{l:{115:{l:{59:{c:[8726]}}}}}}}}},110:{l:{59:{c:[8726]}}}}}}},120:{l:{116:{l:{59:{c:[10038]}}}}}}},102:{l:{114:{l:{59:{c:[120112]},111:{l:{119:{l:{110:{l:{59:{c:[8994]}}}}}}}}}}},104:{l:{97:{l:{114:{l:{112:{l:{59:{c:[9839]}}}}}}},99:{l:{104:{l:{99:{l:{121:{l:{59:{c:[1097]}}}}}}},121:{l:{59:{c:[1096]}}}}},111:{l:{114:{l:{116:{l:{109:{l:{105:{l:{100:{l:{59:{c:[8739]}}}}}}},112:{l:{97:{l:{114:{l:{97:{l:{108:{l:{108:{l:{101:{l:{108:{l:{59:{c:[8741]}}}}}}}}}}}}}}}}}}}}}}},121:{l:{59:{c:[173]}},c:[173]}}},105:{l:{103:{l:{109:{l:{97:{l:{59:{c:[963]},102:{l:{59:{c:[962]}}},118:{l:{59:{c:[962]}}}}}}}}},109:{l:{59:{c:[8764]},100:{l:{111:{l:{116:{l:{59:{c:[10858]}}}}}}},101:{l:{59:{c:[8771]},113:{l:{59:{c:[8771]}}}}},103:{l:{59:{c:[10910]},69:{l:{59:{c:[10912]}}}}},108:{l:{59:{c:[10909]},69:{l:{59:{c:[10911]}}}}},110:{l:{101:{l:{59:{c:[8774]}}}}},112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[10788]}}}}}}}}},114:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10610]}}}}}}}}}}}}},108:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8592]}}}}}}}}},109:{l:{97:{l:{108:{l:{108:{l:{115:{l:{101:{l:{116:{l:{109:{l:{105:{l:{110:{l:{117:{l:{115:{l:{59:{c:[8726]}}}}}}}}}}}}}}}}}}}}},115:{l:{104:{l:{112:{l:{59:{c:[10803]}}}}}}}}},101:{l:{112:{l:{97:{l:{114:{l:{115:{l:{108:{l:{59:{c:[10724]}}}}}}}}}}}}},105:{l:{100:{l:{59:{c:[8739]}}},108:{l:{101:{l:{59:{c:[8995]}}}}}}},116:{l:{59:{c:[10922]},101:{l:{59:{c:[10924]},115:{l:{59:{c:[10924,65024]}}}}}}}}},111:{l:{102:{l:{116:{l:{99:{l:{121:{l:{59:{c:[1100]}}}}}}}}},108:{l:{59:{c:[47]},98:{l:{59:{c:[10692]},97:{l:{114:{l:{59:{c:[9023]}}}}}}}}},112:{l:{102:{l:{59:{c:[120164]}}}}}}},112:{l:{97:{l:{100:{l:{101:{l:{115:{l:{59:{c:[9824]},117:{l:{105:{l:{116:{l:{59:{c:[9824]}}}}}}}}}}}}},114:{l:{59:{c:[8741]}}}}}}},113:{l:{99:{l:{97:{l:{112:{l:{59:{c:[8851]},115:{l:{59:{c:[8851,65024]}}}}}}},117:{l:{112:{l:{59:{c:[8852]},115:{l:{59:{c:[8852,65024]}}}}}}}}},115:{l:{117:{l:{98:{l:{59:{c:[8847]},101:{l:{59:{c:[8849]}}},115:{l:{101:{l:{116:{l:{59:{c:[8847]},101:{l:{113:{l:{59:{c:[8849]}}}}}}}}}}}}},112:{l:{59:{c:[8848]},101:{l:{59:{c:[8850]}}},115:{l:{101:{l:{116:{l:{59:{c:[8848]},101:{l:{113:{l:{59:{c:[8850]}}}}}}}}}}}}}}}}},117:{l:{59:{c:[9633]},97:{l:{114:{l:{101:{l:{59:{c:[9633]}}},102:{l:{59:{c:[9642]}}}}}}},102:{l:{59:{c:[9642]}}}}}}},114:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8594]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120008]}}}}},101:{l:{116:{l:{109:{l:{110:{l:{59:{c:[8726]}}}}}}}}},109:{l:{105:{l:{108:{l:{101:{l:{59:{c:[8995]}}}}}}}}},116:{l:{97:{l:{114:{l:{102:{l:{59:{c:[8902]}}}}}}}}}}},116:{l:{97:{l:{114:{l:{59:{c:[9734]},102:{l:{59:{c:[9733]}}}}}}},114:{l:{97:{l:{105:{l:{103:{l:{104:{l:{116:{l:{101:{l:{112:{l:{115:{l:{105:{l:{108:{l:{111:{l:{110:{l:{59:{c:[1013]}}}}}}}}}}}}}}},112:{l:{104:{l:{105:{l:{59:{c:[981]}}}}}}}}}}}}}}}}},110:{l:{115:{l:{59:{c:[175]}}}}}}}}},117:{l:{98:{l:{59:{c:[8834]},69:{l:{59:{c:[10949]}}},100:{l:{111:{l:{116:{l:{59:{c:[10941]}}}}}}},101:{l:{59:{c:[8838]},100:{l:{111:{l:{116:{l:{59:{c:[10947]}}}}}}}}},109:{l:{117:{l:{108:{l:{116:{l:{59:{c:[10945]}}}}}}}}},110:{l:{69:{l:{59:{c:[10955]}}},101:{l:{59:{c:[8842]}}}}},112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[10943]}}}}}}}}},114:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10617]}}}}}}}}},115:{l:{101:{l:{116:{l:{59:{c:[8834]},101:{l:{113:{l:{59:{c:[8838]},113:{l:{59:{c:[10949]}}}}}}},110:{l:{101:{l:{113:{l:{59:{c:[8842]},113:{l:{59:{c:[10955]}}}}}}}}}}}}},105:{l:{109:{l:{59:{c:[10951]}}}}},117:{l:{98:{l:{59:{c:[10965]}}},112:{l:{59:{c:[10963]}}}}}}}}},99:{l:{99:{l:{59:{c:[8827]},97:{l:{112:{l:{112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[10936]}}}}}}}}}}}}},99:{l:{117:{l:{114:{l:{108:{l:{121:{l:{101:{l:{113:{l:{59:{c:[8829]}}}}}}}}}}}}}}},101:{l:{113:{l:{59:{c:[10928]}}}}},110:{l:{97:{l:{112:{l:{112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[10938]}}}}}}}}}}}}},101:{l:{113:{l:{113:{l:{59:{c:[10934]}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8937]}}}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8831]}}}}}}}}}}},109:{l:{59:{c:[8721]}}},110:{l:{103:{l:{59:{c:[9834]}}}}},112:{l:{49:{l:{59:{c:[185]}},c:[185]},50:{l:{59:{c:[178]}},c:[178]},51:{l:{59:{c:[179]}},c:[179]},59:{c:[8835]},69:{l:{59:{c:[10950]}}},100:{l:{111:{l:{116:{l:{59:{c:[10942]}}}}},115:{l:{117:{l:{98:{l:{59:{c:[10968]}}}}}}}}},101:{l:{59:{c:[8839]},100:{l:{111:{l:{116:{l:{59:{c:[10948]}}}}}}}}},104:{l:{115:{l:{111:{l:{108:{l:{59:{c:[10185]}}}}},117:{l:{98:{l:{59:{c:[10967]}}}}}}}}},108:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10619]}}}}}}}}},109:{l:{117:{l:{108:{l:{116:{l:{59:{c:[10946]}}}}}}}}},110:{l:{69:{l:{59:{c:[10956]}}},101:{l:{59:{c:[8843]}}}}},112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[10944]}}}}}}}}},115:{l:{101:{l:{116:{l:{59:{c:[8835]},101:{l:{113:{l:{59:{c:[8839]},113:{l:{59:{c:[10950]}}}}}}},110:{l:{101:{l:{113:{l:{59:{c:[8843]},113:{l:{59:{c:[10956]}}}}}}}}}}}}},105:{l:{109:{l:{59:{c:[10952]}}}}},117:{l:{98:{l:{59:{c:[10964]}}},112:{l:{59:{c:[10966]}}}}}}}}}}},119:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8665]}}}}}}},97:{l:{114:{l:{104:{l:{107:{l:{59:{c:[10534]}}}}},114:{l:{59:{c:[8601]},111:{l:{119:{l:{59:{c:[8601]}}}}}}}}}}},110:{l:{119:{l:{97:{l:{114:{l:{59:{c:[10538]}}}}}}}}}}},122:{l:{108:{l:{105:{l:{103:{l:{59:{c:[223]}},c:[223]}}}}}}}}},116:{l:{97:{l:{114:{l:{103:{l:{101:{l:{116:{l:{59:{c:[8982]}}}}}}}}},117:{l:{59:{c:[964]}}}}},98:{l:{114:{l:{107:{l:{59:{c:[9140]}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[357]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[355]}}}}}}}}},121:{l:{59:{c:[1090]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[8411]}}}}}}},101:{l:{108:{l:{114:{l:{101:{l:{99:{l:{59:{c:[8981]}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120113]}}}}},104:{l:{101:{l:{114:{l:{101:{l:{52:{l:{59:{c:[8756]}}},102:{l:{111:{l:{114:{l:{101:{l:{59:{c:[8756]}}}}}}}}}}}}},116:{l:{97:{l:{59:{c:[952]},115:{l:{121:{l:{109:{l:{59:{c:[977]}}}}}}},118:{l:{59:{c:[977]}}}}}}}}},105:{l:{99:{l:{107:{l:{97:{l:{112:{l:{112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[8776]}}}}}}}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8764]}}}}}}}}}}},110:{l:{115:{l:{112:{l:{59:{c:[8201]}}}}}}}}},107:{l:{97:{l:{112:{l:{59:{c:[8776]}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8764]}}}}}}}}},111:{l:{114:{l:{110:{l:{59:{c:[254]}},c:[254]}}}}}}},105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[732]}}}}}}},109:{l:{101:{l:{115:{l:{59:{c:[215]},98:{l:{59:{c:[8864]},97:{l:{114:{l:{59:{c:[10801]}}}}}}},100:{l:{59:{c:[10800]}}}},c:[215]}}}}},110:{l:{116:{l:{59:{c:[8749]}}}}}}},111:{l:{101:{l:{97:{l:{59:{c:[10536]}}}}},112:{l:{59:{c:[8868]},98:{l:{111:{l:{116:{l:{59:{c:[9014]}}}}}}},99:{l:{105:{l:{114:{l:{59:{c:[10993]}}}}}}},102:{l:{59:{c:[120165]},111:{l:{114:{l:{107:{l:{59:{c:[10970]}}}}}}}}}}},115:{l:{97:{l:{59:{c:[10537]}}}}}}},112:{l:{114:{l:{105:{l:{109:{l:{101:{l:{59:{c:[8244]}}}}}}}}}}},114:{l:{97:{l:{100:{l:{101:{l:{59:{c:[8482]}}}}}}},105:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{59:{c:[9653]},100:{l:{111:{l:{119:{l:{110:{l:{59:{c:[9663]}}}}}}}}},108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[9667]},101:{l:{113:{l:{59:{c:[8884]}}}}}}}}}}}}},113:{l:{59:{c:[8796]}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{59:{c:[9657]},101:{l:{113:{l:{59:{c:[8885]}}}}}}}}}}}}}}}}}}}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[9708]}}}}}}},101:{l:{59:{c:[8796]}}},109:{l:{105:{l:{110:{l:{117:{l:{115:{l:{59:{c:[10810]}}}}}}}}}}},112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[10809]}}}}}}}}},115:{l:{98:{l:{59:{c:[10701]}}}}},116:{l:{105:{l:{109:{l:{101:{l:{59:{c:[10811]}}}}}}}}}}},112:{l:{101:{l:{122:{l:{105:{l:{117:{l:{109:{l:{59:{c:[9186]}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120009]}}},121:{l:{59:{c:[1094]}}}}},104:{l:{99:{l:{121:{l:{59:{c:[1115]}}}}}}},116:{l:{114:{l:{111:{l:{107:{l:{59:{c:[359]}}}}}}}}}}},119:{l:{105:{l:{120:{l:{116:{l:{59:{c:[8812]}}}}}}},111:{l:{104:{l:{101:{l:{97:{l:{100:{l:{108:{l:{101:{l:{102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8606]}}}}}}}}}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8608]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},117:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8657]}}}}}}},72:{l:{97:{l:{114:{l:{59:{c:[10595]}}}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[250]}},c:[250]}}}}}}},114:{l:{114:{l:{59:{c:[8593]}}}}}}},98:{l:{114:{l:{99:{l:{121:{l:{59:{c:[1118]}}}}},101:{l:{118:{l:{101:{l:{59:{c:[365]}}}}}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[251]}},c:[251]}}}}},121:{l:{59:{c:[1091]}}}}},100:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8645]}}}}}}},98:{l:{108:{l:{97:{l:{99:{l:{59:{c:[369]}}}}}}}}},104:{l:{97:{l:{114:{l:{59:{c:[10606]}}}}}}}}},102:{l:{105:{l:{115:{l:{104:{l:{116:{l:{59:{c:[10622]}}}}}}}}},114:{l:{59:{c:[120114]}}}}},103:{l:{114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[249]}},c:[249]}}}}}}}}},104:{l:{97:{l:{114:{l:{108:{l:{59:{c:[8639]}}},114:{l:{59:{c:[8638]}}}}}}},98:{l:{108:{l:{107:{l:{59:{c:[9600]}}}}}}}}},108:{l:{99:{l:{111:{l:{114:{l:{110:{l:{59:{c:[8988]},101:{l:{114:{l:{59:{c:[8988]}}}}}}}}}}},114:{l:{111:{l:{112:{l:{59:{c:[8975]}}}}}}}}},116:{l:{114:{l:{105:{l:{59:{c:[9720]}}}}}}}}},109:{l:{97:{l:{99:{l:{114:{l:{59:{c:[363]}}}}}}},108:{l:{59:{c:[168]}},c:[168]}}},111:{l:{103:{l:{111:{l:{110:{l:{59:{c:[371]}}}}}}},112:{l:{102:{l:{59:{c:[120166]}}}}}}},112:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8593]}}}}}}}}}}},100:{l:{111:{l:{119:{l:{110:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8597]}}}}}}}}}}}}}}}}}}},104:{l:{97:{l:{114:{l:{112:{l:{111:{l:{111:{l:{110:{l:{108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[8639]}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{59:{c:[8638]}}}}}}}}}}}}}}}}}}}}}}}}},108:{l:{117:{l:{115:{l:{59:{c:[8846]}}}}}}},115:{l:{105:{l:{59:{c:[965]},104:{l:{59:{c:[978]}}},108:{l:{111:{l:{110:{l:{59:{c:[965]}}}}}}}}}}},117:{l:{112:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{115:{l:{59:{c:[8648]}}}}}}}}}}}}}}}}}}},114:{l:{99:{l:{111:{l:{114:{l:{110:{l:{59:{c:[8989]},101:{l:{114:{l:{59:{c:[8989]}}}}}}}}}}},114:{l:{111:{l:{112:{l:{59:{c:[8974]}}}}}}}}},105:{l:{110:{l:{103:{l:{59:{c:[367]}}}}}}},116:{l:{114:{l:{105:{l:{59:{c:[9721]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120010]}}}}}}},116:{l:{100:{l:{111:{l:{116:{l:{59:{c:[8944]}}}}}}},105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[361]}}}}}}}}},114:{l:{105:{l:{59:{c:[9653]},102:{l:{59:{c:[9652]}}}}}}}}},117:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8648]}}}}}}},109:{l:{108:{l:{59:{c:[252]}},c:[252]}}}}},119:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{59:{c:[10663]}}}}}}}}}}}}}}},118:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8661]}}}}}}},66:{l:{97:{l:{114:{l:{59:{c:[10984]},118:{l:{59:{c:[10985]}}}}}}}}},68:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8872]}}}}}}}}},97:{l:{110:{l:{103:{l:{114:{l:{116:{l:{59:{c:[10652]}}}}}}}}},114:{l:{101:{l:{112:{l:{115:{l:{105:{l:{108:{l:{111:{l:{110:{l:{59:{c:[1013]}}}}}}}}}}}}}}},107:{l:{97:{l:{112:{l:{112:{l:{97:{l:{59:{c:[1008]}}}}}}}}}}},110:{l:{111:{l:{116:{l:{104:{l:{105:{l:{110:{l:{103:{l:{59:{c:[8709]}}}}}}}}}}}}}}},112:{l:{104:{l:{105:{l:{59:{c:[981]}}}}},105:{l:{59:{c:[982]}}},114:{l:{111:{l:{112:{l:{116:{l:{111:{l:{59:{c:[8733]}}}}}}}}}}}}},114:{l:{59:{c:[8597]},104:{l:{111:{l:{59:{c:[1009]}}}}}}},115:{l:{105:{l:{103:{l:{109:{l:{97:{l:{59:{c:[962]}}}}}}}}},117:{l:{98:{l:{115:{l:{101:{l:{116:{l:{110:{l:{101:{l:{113:{l:{59:{c:[8842,65024]},113:{l:{59:{c:[10955,65024]}}}}}}}}}}}}}}}}},112:{l:{115:{l:{101:{l:{116:{l:{110:{l:{101:{l:{113:{l:{59:{c:[8843,65024]},113:{l:{59:{c:[10956,65024]}}}}}}}}}}}}}}}}}}}}},116:{l:{104:{l:{101:{l:{116:{l:{97:{l:{59:{c:[977]}}}}}}}}},114:{l:{105:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[8882]}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{59:{c:[8883]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},99:{l:{121:{l:{59:{c:[1074]}}}}},100:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8866]}}}}}}}}},101:{l:{101:{l:{59:{c:[8744]},98:{l:{97:{l:{114:{l:{59:{c:[8891]}}}}}}},101:{l:{113:{l:{59:{c:[8794]}}}}}}},108:{l:{108:{l:{105:{l:{112:{l:{59:{c:[8942]}}}}}}}}},114:{l:{98:{l:{97:{l:{114:{l:{59:{c:[124]}}}}}}},116:{l:{59:{c:[124]}}}}}}},102:{l:{114:{l:{59:{c:[120115]}}}}},108:{l:{116:{l:{114:{l:{105:{l:{59:{c:[8882]}}}}}}}}},110:{l:{115:{l:{117:{l:{98:{l:{59:{c:[8834,8402]}}},112:{l:{59:{c:[8835,8402]}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120167]}}}}}}},112:{l:{114:{l:{111:{l:{112:{l:{59:{c:[8733]}}}}}}}}},114:{l:{116:{l:{114:{l:{105:{l:{59:{c:[8883]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120011]}}}}},117:{l:{98:{l:{110:{l:{69:{l:{59:{c:[10955,65024]}}},101:{l:{59:{c:[8842,65024]}}}}}}},112:{l:{110:{l:{69:{l:{59:{c:[10956,65024]}}},101:{l:{59:{c:[8843,65024]}}}}}}}}}}},122:{l:{105:{l:{103:{l:{122:{l:{97:{l:{103:{l:{59:{c:[10650]}}}}}}}}}}}}}}},119:{l:{99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[373]}}}}}}}}},101:{l:{100:{l:{98:{l:{97:{l:{114:{l:{59:{c:[10847]}}}}}}},103:{l:{101:{l:{59:{c:[8743]},113:{l:{59:{c:[8793]}}}}}}}}},105:{l:{101:{l:{114:{l:{112:{l:{59:{c:[8472]}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120116]}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120168]}}}}}}},112:{l:{59:{c:[8472]}}},114:{l:{59:{c:[8768]},101:{l:{97:{l:{116:{l:{104:{l:{59:{c:[8768]}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120012]}}}}}}}}},120:{l:{99:{l:{97:{l:{112:{l:{59:{c:[8898]}}}}},105:{l:{114:{l:{99:{l:{59:{c:[9711]}}}}}}},117:{l:{112:{l:{59:{c:[8899]}}}}}}},100:{l:{116:{l:{114:{l:{105:{l:{59:{c:[9661]}}}}}}}}},102:{l:{114:{l:{59:{c:[120117]}}}}},104:{l:{65:{l:{114:{l:{114:{l:{59:{c:[10234]}}}}}}},97:{l:{114:{l:{114:{l:{59:{c:[10231]}}}}}}}}},105:{l:{59:{c:[958]}}},108:{l:{65:{l:{114:{l:{114:{l:{59:{c:[10232]}}}}}}},97:{l:{114:{l:{114:{l:{59:{c:[10229]}}}}}}}}},109:{l:{97:{l:{112:{l:{59:{c:[10236]}}}}}}},110:{l:{105:{l:{115:{l:{59:{c:[8955]}}}}}}},111:{l:{100:{l:{111:{l:{116:{l:{59:{c:[10752]}}}}}}},112:{l:{102:{l:{59:{c:[120169]}}},108:{l:{117:{l:{115:{l:{59:{c:[10753]}}}}}}}}},116:{l:{105:{l:{109:{l:{101:{l:{59:{c:[10754]}}}}}}}}}}},114:{l:{65:{l:{114:{l:{114:{l:{59:{c:[10233]}}}}}}},97:{l:{114:{l:{114:{l:{59:{c:[10230]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120013]}}}}},113:{l:{99:{l:{117:{l:{112:{l:{59:{c:[10758]}}}}}}}}}}},117:{l:{112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[10756]}}}}}}}}},116:{l:{114:{l:{105:{l:{59:{c:[9651]}}}}}}}}},118:{l:{101:{l:{101:{l:{59:{c:[8897]}}}}}}},119:{l:{101:{l:{100:{l:{103:{l:{101:{l:{59:{c:[8896]}}}}}}}}}}}}},121:{l:{97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[253]}},c:[253]}}}}},121:{l:{59:{c:[1103]}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[375]}}}}}}},121:{l:{59:{c:[1099]}}}}},101:{l:{110:{l:{59:{c:[165]}},c:[165]}}},102:{l:{114:{l:{59:{c:[120118]}}}}},105:{l:{99:{l:{121:{l:{59:{c:[1111]}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120170]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120014]}}}}}}},117:{l:{99:{l:{121:{l:{59:{c:[1102]}}}}},109:{l:{108:{l:{59:{c:[255]}},c:[255]}}}}}}},122:{l:{97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[378]}}}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[382]}}}}}}}}},121:{l:{59:{c:[1079]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[380]}}}}}}},101:{l:{101:{l:{116:{l:{114:{l:{102:{l:{59:{c:[8488]}}}}}}}}},116:{l:{97:{l:{59:{c:[950]}}}}}}},102:{l:{114:{l:{59:{c:[120119]}}}}},104:{l:{99:{l:{121:{l:{59:{c:[1078]}}}}}}},105:{l:{103:{l:{114:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8669]}}}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120171]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120015]}}}}}}},119:{l:{106:{l:{59:{c:[8205]}}},110:{l:{106:{l:{59:{c:[8204]}}}}}}}}}};


/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var HTML = __webpack_require__(307);
	
	//Aliases
	var $ = HTML.TAG_NAMES,
	    NS = HTML.NAMESPACES;
	
	//Element utils
	
	//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
	//It's faster than using dictionary.
	function isImpliedEndTagRequired(tn) {
	    switch (tn.length) {
	        case 1:
	            return tn === $.P;
	
	        case 2:
	            return tn === $.RB || tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI;
	
	        case 3:
	            return tn === $.RTC;
	
	        case 6:
	            return tn === $.OPTION;
	
	        case 8:
	            return tn === $.OPTGROUP || tn === $.MENUITEM;
	    }
	
	    return false;
	}
	
	function isScopingElement(tn, ns) {
	    switch (tn.length) {
	        case 2:
	            if (tn === $.TD || tn === $.TH)
	                return ns === NS.HTML;
	
	            else if (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS)
	                return ns === NS.MATHML;
	
	            break;
	
	        case 4:
	            if (tn === $.HTML)
	                return ns === NS.HTML;
	
	            else if (tn === $.DESC)
	                return ns === NS.SVG;
	
	            break;
	
	        case 5:
	            if (tn === $.TABLE)
	                return ns === NS.HTML;
	
	            else if (tn === $.MTEXT)
	                return ns === NS.MATHML;
	
	            else if (tn === $.TITLE)
	                return ns === NS.SVG;
	
	            break;
	
	        case 6:
	            return (tn === $.APPLET || tn === $.OBJECT) && ns === NS.HTML;
	
	        case 7:
	            return (tn === $.CAPTION || tn === $.MARQUEE) && ns === NS.HTML;
	
	        case 8:
	            return tn === $.TEMPLATE && ns === NS.HTML;
	
	        case 13:
	            return tn === $.FOREIGN_OBJECT && ns === NS.SVG;
	
	        case 14:
	            return tn === $.ANNOTATION_XML && ns === NS.MATHML;
	    }
	
	    return false;
	}
	
	//Stack of open elements
	var OpenElementStack = module.exports = function (document, treeAdapter) {
	    this.stackTop = -1;
	    this.items = [];
	    this.current = document;
	    this.currentTagName = null;
	    this.currentTmplContent = null;
	    this.tmplCount = 0;
	    this.treeAdapter = treeAdapter;
	};
	
	//Index of element
	OpenElementStack.prototype._indexOf = function (element) {
	    var idx = -1;
	
	    for (var i = this.stackTop; i >= 0; i--) {
	        if (this.items[i] === element) {
	            idx = i;
	            break;
	        }
	    }
	    return idx;
	};
	
	//Update current element
	OpenElementStack.prototype._isInTemplate = function () {
	    return this.currentTagName === $.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
	};
	
	OpenElementStack.prototype._updateCurrentElement = function () {
	    this.current = this.items[this.stackTop];
	    this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);
	
	    this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : null;
	};
	
	//Mutations
	OpenElementStack.prototype.push = function (element) {
	    this.items[++this.stackTop] = element;
	    this._updateCurrentElement();
	
	    if (this._isInTemplate())
	        this.tmplCount++;
	
	};
	
	OpenElementStack.prototype.pop = function () {
	    this.stackTop--;
	
	    if (this.tmplCount > 0 && this._isInTemplate())
	        this.tmplCount--;
	
	    this._updateCurrentElement();
	};
	
	OpenElementStack.prototype.replace = function (oldElement, newElement) {
	    var idx = this._indexOf(oldElement);
	
	    this.items[idx] = newElement;
	
	    if (idx === this.stackTop)
	        this._updateCurrentElement();
	};
	
	OpenElementStack.prototype.insertAfter = function (referenceElement, newElement) {
	    var insertionIdx = this._indexOf(referenceElement) + 1;
	
	    this.items.splice(insertionIdx, 0, newElement);
	
	    if (insertionIdx === ++this.stackTop)
	        this._updateCurrentElement();
	};
	
	OpenElementStack.prototype.popUntilTagNamePopped = function (tagName) {
	    while (this.stackTop > -1) {
	        var tn = this.currentTagName,
	            ns = this.treeAdapter.getNamespaceURI(this.current);
	
	        this.pop();
	
	        if (tn === tagName && ns === NS.HTML)
	            break;
	    }
	};
	
	OpenElementStack.prototype.popUntilElementPopped = function (element) {
	    while (this.stackTop > -1) {
	        var poppedElement = this.current;
	
	        this.pop();
	
	        if (poppedElement === element)
	            break;
	    }
	};
	
	OpenElementStack.prototype.popUntilNumberedHeaderPopped = function () {
	    while (this.stackTop > -1) {
	        var tn = this.currentTagName,
	            ns = this.treeAdapter.getNamespaceURI(this.current);
	
	        this.pop();
	
	        if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6 && ns === NS.HTML)
	            break;
	    }
	};
	
	OpenElementStack.prototype.popUntilTableCellPopped = function () {
	    while (this.stackTop > -1) {
	        var tn = this.currentTagName,
	            ns = this.treeAdapter.getNamespaceURI(this.current);
	
	        this.pop();
	
	        if (tn === $.TD || tn === $.TH && ns === NS.HTML)
	            break;
	    }
	};
	
	OpenElementStack.prototype.popAllUpToHtmlElement = function () {
	    //NOTE: here we assume that root <html> element is always first in the open element stack, so
	    //we perform this fast stack clean up.
	    this.stackTop = 0;
	    this._updateCurrentElement();
	};
	
	OpenElementStack.prototype.clearBackToTableContext = function () {
	    while (this.currentTagName !== $.TABLE &&
	           this.currentTagName !== $.TEMPLATE &&
	           this.currentTagName !== $.HTML ||
	           this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML)
	        this.pop();
	};
	
	OpenElementStack.prototype.clearBackToTableBodyContext = function () {
	    while (this.currentTagName !== $.TBODY &&
	           this.currentTagName !== $.TFOOT &&
	           this.currentTagName !== $.THEAD &&
	           this.currentTagName !== $.TEMPLATE &&
	           this.currentTagName !== $.HTML ||
	           this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML)
	        this.pop();
	};
	
	OpenElementStack.prototype.clearBackToTableRowContext = function () {
	    while (this.currentTagName !== $.TR &&
	           this.currentTagName !== $.TEMPLATE &&
	           this.currentTagName !== $.HTML ||
	           this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML)
	        this.pop();
	};
	
	OpenElementStack.prototype.remove = function (element) {
	    for (var i = this.stackTop; i >= 0; i--) {
	        if (this.items[i] === element) {
	            this.items.splice(i, 1);
	            this.stackTop--;
	            this._updateCurrentElement();
	            break;
	        }
	    }
	};
	
	//Search
	OpenElementStack.prototype.tryPeekProperlyNestedBodyElement = function () {
	    //Properly nested <body> element (should be second element in stack).
	    var element = this.items[1];
	
	    return element && this.treeAdapter.getTagName(element) === $.BODY ? element : null;
	};
	
	OpenElementStack.prototype.contains = function (element) {
	    return this._indexOf(element) > -1;
	};
	
	OpenElementStack.prototype.getCommonAncestor = function (element) {
	    var elementIdx = this._indexOf(element);
	
	    return --elementIdx >= 0 ? this.items[elementIdx] : null;
	};
	
	OpenElementStack.prototype.isRootHtmlElementCurrent = function () {
	    return this.stackTop === 0 && this.currentTagName === $.HTML;
	};
	
	//Element in scope
	OpenElementStack.prototype.hasInScope = function (tagName) {
	    for (var i = this.stackTop; i >= 0; i--) {
	        var tn = this.treeAdapter.getTagName(this.items[i]),
	            ns = this.treeAdapter.getNamespaceURI(this.items[i]);
	
	        if (tn === tagName && ns === NS.HTML)
	            return true;
	
	        if (isScopingElement(tn, ns))
	            return false;
	    }
	
	    return true;
	};
	
	OpenElementStack.prototype.hasNumberedHeaderInScope = function () {
	    for (var i = this.stackTop; i >= 0; i--) {
	        var tn = this.treeAdapter.getTagName(this.items[i]),
	            ns = this.treeAdapter.getNamespaceURI(this.items[i]);
	
	        if ((tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) && ns === NS.HTML)
	            return true;
	
	        if (isScopingElement(tn, ns))
	            return false;
	    }
	
	    return true;
	};
	
	OpenElementStack.prototype.hasInListItemScope = function (tagName) {
	    for (var i = this.stackTop; i >= 0; i--) {
	        var tn = this.treeAdapter.getTagName(this.items[i]),
	            ns = this.treeAdapter.getNamespaceURI(this.items[i]);
	
	        if (tn === tagName && ns === NS.HTML)
	            return true;
	
	        if ((tn === $.UL || tn === $.OL) && ns === NS.HTML || isScopingElement(tn, ns))
	            return false;
	    }
	
	    return true;
	};
	
	OpenElementStack.prototype.hasInButtonScope = function (tagName) {
	    for (var i = this.stackTop; i >= 0; i--) {
	        var tn = this.treeAdapter.getTagName(this.items[i]),
	            ns = this.treeAdapter.getNamespaceURI(this.items[i]);
	
	        if (tn === tagName && ns === NS.HTML)
	            return true;
	
	        if (tn === $.BUTTON && ns === NS.HTML || isScopingElement(tn, ns))
	            return false;
	    }
	
	    return true;
	};
	
	OpenElementStack.prototype.hasInTableScope = function (tagName) {
	    for (var i = this.stackTop; i >= 0; i--) {
	        var tn = this.treeAdapter.getTagName(this.items[i]),
	            ns = this.treeAdapter.getNamespaceURI(this.items[i]);
	
	        if (ns !== NS.HTML)
	            continue;
	
	        if (tn === tagName)
	            return true;
	
	        if (tn === $.TABLE || tn === $.TEMPLATE || tn === $.HTML)
	            return false;
	    }
	
	    return true;
	};
	
	OpenElementStack.prototype.hasTableBodyContextInTableScope = function () {
	    for (var i = this.stackTop; i >= 0; i--) {
	        var tn = this.treeAdapter.getTagName(this.items[i]),
	            ns = this.treeAdapter.getNamespaceURI(this.items[i]);
	
	        if (ns !== NS.HTML)
	            continue;
	
	        if (tn === $.TBODY || tn === $.THEAD || tn === $.TFOOT)
	            return true;
	
	        if (tn === $.TABLE || tn === $.HTML)
	            return false;
	    }
	
	    return true;
	};
	
	OpenElementStack.prototype.hasInSelectScope = function (tagName) {
	    for (var i = this.stackTop; i >= 0; i--) {
	        var tn = this.treeAdapter.getTagName(this.items[i]),
	            ns = this.treeAdapter.getNamespaceURI(this.items[i]);
	
	        if (ns !== NS.HTML)
	            continue;
	
	        if (tn === tagName)
	            return true;
	
	        if (tn !== $.OPTION && tn !== $.OPTGROUP)
	            return false;
	    }
	
	    return true;
	};
	
	//Implied end tags
	OpenElementStack.prototype.generateImpliedEndTags = function () {
	    while (isImpliedEndTagRequired(this.currentTagName))
	        this.pop();
	};
	
	OpenElementStack.prototype.generateImpliedEndTagsWithExclusion = function (exclusionTagName) {
	    while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName)
	        this.pop();
	};


/***/ },
/* 307 */
/***/ function(module, exports) {

	'use strict';
	
	var NS = exports.NAMESPACES = {
	    HTML: 'http://www.w3.org/1999/xhtml',
	    MATHML: 'http://www.w3.org/1998/Math/MathML',
	    SVG: 'http://www.w3.org/2000/svg',
	    XLINK: 'http://www.w3.org/1999/xlink',
	    XML: 'http://www.w3.org/XML/1998/namespace',
	    XMLNS: 'http://www.w3.org/2000/xmlns/'
	};
	
	exports.ATTRS = {
	    TYPE: 'type',
	    ACTION: 'action',
	    ENCODING: 'encoding',
	    PROMPT: 'prompt',
	    NAME: 'name',
	    COLOR: 'color',
	    FACE: 'face',
	    SIZE: 'size'
	};
	
	var $ = exports.TAG_NAMES = {
	    A: 'a',
	    ADDRESS: 'address',
	    ANNOTATION_XML: 'annotation-xml',
	    APPLET: 'applet',
	    AREA: 'area',
	    ARTICLE: 'article',
	    ASIDE: 'aside',
	
	    B: 'b',
	    BASE: 'base',
	    BASEFONT: 'basefont',
	    BGSOUND: 'bgsound',
	    BIG: 'big',
	    BLOCKQUOTE: 'blockquote',
	    BODY: 'body',
	    BR: 'br',
	    BUTTON: 'button',
	
	    CAPTION: 'caption',
	    CENTER: 'center',
	    CODE: 'code',
	    COL: 'col',
	    COLGROUP: 'colgroup',
	
	    DD: 'dd',
	    DESC: 'desc',
	    DETAILS: 'details',
	    DIALOG: 'dialog',
	    DIR: 'dir',
	    DIV: 'div',
	    DL: 'dl',
	    DT: 'dt',
	
	    EM: 'em',
	    EMBED: 'embed',
	
	    FIELDSET: 'fieldset',
	    FIGCAPTION: 'figcaption',
	    FIGURE: 'figure',
	    FONT: 'font',
	    FOOTER: 'footer',
	    FOREIGN_OBJECT: 'foreignObject',
	    FORM: 'form',
	    FRAME: 'frame',
	    FRAMESET: 'frameset',
	
	    H1: 'h1',
	    H2: 'h2',
	    H3: 'h3',
	    H4: 'h4',
	    H5: 'h5',
	    H6: 'h6',
	    HEAD: 'head',
	    HEADER: 'header',
	    HGROUP: 'hgroup',
	    HR: 'hr',
	    HTML: 'html',
	
	    I: 'i',
	    IMG: 'img',
	    IMAGE: 'image',
	    INPUT: 'input',
	    IFRAME: 'iframe',
	
	    KEYGEN: 'keygen',
	
	    LABEL: 'label',
	    LI: 'li',
	    LINK: 'link',
	    LISTING: 'listing',
	
	    MAIN: 'main',
	    MALIGNMARK: 'malignmark',
	    MARQUEE: 'marquee',
	    MATH: 'math',
	    MENU: 'menu',
	    MENUITEM: 'menuitem',
	    META: 'meta',
	    MGLYPH: 'mglyph',
	    MI: 'mi',
	    MO: 'mo',
	    MN: 'mn',
	    MS: 'ms',
	    MTEXT: 'mtext',
	
	    NAV: 'nav',
	    NOBR: 'nobr',
	    NOFRAMES: 'noframes',
	    NOEMBED: 'noembed',
	    NOSCRIPT: 'noscript',
	
	    OBJECT: 'object',
	    OL: 'ol',
	    OPTGROUP: 'optgroup',
	    OPTION: 'option',
	
	    P: 'p',
	    PARAM: 'param',
	    PLAINTEXT: 'plaintext',
	    PRE: 'pre',
	
	    RB: 'rb',
	    RP: 'rp',
	    RT: 'rt',
	    RTC: 'rtc',
	    RUBY: 'ruby',
	
	    S: 's',
	    SCRIPT: 'script',
	    SECTION: 'section',
	    SELECT: 'select',
	    SOURCE: 'source',
	    SMALL: 'small',
	    SPAN: 'span',
	    STRIKE: 'strike',
	    STRONG: 'strong',
	    STYLE: 'style',
	    SUB: 'sub',
	    SUMMARY: 'summary',
	    SUP: 'sup',
	
	    TABLE: 'table',
	    TBODY: 'tbody',
	    TEMPLATE: 'template',
	    TEXTAREA: 'textarea',
	    TFOOT: 'tfoot',
	    TD: 'td',
	    TH: 'th',
	    THEAD: 'thead',
	    TITLE: 'title',
	    TR: 'tr',
	    TRACK: 'track',
	    TT: 'tt',
	
	    U: 'u',
	    UL: 'ul',
	
	    SVG: 'svg',
	
	    VAR: 'var',
	
	    WBR: 'wbr',
	
	    XMP: 'xmp'
	};
	
	var SPECIAL_ELEMENTS = exports.SPECIAL_ELEMENTS = {};
	
	SPECIAL_ELEMENTS[NS.HTML] = {};
	SPECIAL_ELEMENTS[NS.HTML][$.ADDRESS] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.APPLET] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.AREA] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.ARTICLE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.ASIDE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.BASE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.BASEFONT] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.BGSOUND] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.BLOCKQUOTE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.BODY] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.BR] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.BUTTON] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.CAPTION] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.CENTER] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.COL] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.COLGROUP] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.DD] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.DETAILS] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.DIR] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.DIV] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.DL] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.DT] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.EMBED] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.FIELDSET] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.FIGCAPTION] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.FIGURE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.FOOTER] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.FORM] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.FRAME] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.FRAMESET] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.H1] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.H2] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.H3] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.H4] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.H5] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.H6] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.HEAD] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.HEADER] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.HGROUP] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.HR] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.HTML] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.IFRAME] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.IMG] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.INPUT] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.LI] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.LINK] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.LISTING] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.MAIN] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.MARQUEE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.MENU] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.META] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.NAV] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.NOEMBED] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.NOFRAMES] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.NOSCRIPT] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.OBJECT] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.OL] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.P] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.PARAM] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.PLAINTEXT] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.PRE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.SCRIPT] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.SECTION] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.SELECT] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.SOURCE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.STYLE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.SUMMARY] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TABLE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TBODY] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TD] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TEMPLATE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TEXTAREA] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TFOOT] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TH] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.THEAD] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TITLE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TR] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TRACK] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.UL] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.WBR] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.XMP] = true;
	
	SPECIAL_ELEMENTS[NS.MATHML] = {};
	SPECIAL_ELEMENTS[NS.MATHML][$.MI] = true;
	SPECIAL_ELEMENTS[NS.MATHML][$.MO] = true;
	SPECIAL_ELEMENTS[NS.MATHML][$.MN] = true;
	SPECIAL_ELEMENTS[NS.MATHML][$.MS] = true;
	SPECIAL_ELEMENTS[NS.MATHML][$.MTEXT] = true;
	SPECIAL_ELEMENTS[NS.MATHML][$.ANNOTATION_XML] = true;
	
	SPECIAL_ELEMENTS[NS.SVG] = {};
	SPECIAL_ELEMENTS[NS.SVG][$.TITLE] = true;
	SPECIAL_ELEMENTS[NS.SVG][$.FOREIGN_OBJECT] = true;
	SPECIAL_ELEMENTS[NS.SVG][$.DESC] = true;


/***/ },
/* 308 */
/***/ function(module, exports) {

	'use strict';
	
	//Const
	var NOAH_ARK_CAPACITY = 3;
	
	//List of formatting elements
	var FormattingElementList = module.exports = function (treeAdapter) {
	    this.length = 0;
	    this.entries = [];
	    this.treeAdapter = treeAdapter;
	    this.bookmark = null;
	};
	
	//Entry types
	FormattingElementList.MARKER_ENTRY = 'MARKER_ENTRY';
	FormattingElementList.ELEMENT_ENTRY = 'ELEMENT_ENTRY';
	
	//Noah Ark's condition
	//OPTIMIZATION: at first we try to find possible candidates for exclusion using
	//lightweight heuristics without thorough attributes check.
	FormattingElementList.prototype._getNoahArkConditionCandidates = function (newElement) {
	    var candidates = [];
	
	    if (this.length >= NOAH_ARK_CAPACITY) {
	        var neAttrsLength = this.treeAdapter.getAttrList(newElement).length,
	            neTagName = this.treeAdapter.getTagName(newElement),
	            neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);
	
	        for (var i = this.length - 1; i >= 0; i--) {
	            var entry = this.entries[i];
	
	            if (entry.type === FormattingElementList.MARKER_ENTRY)
	                break;
	
	            var element = entry.element,
	                elementAttrs = this.treeAdapter.getAttrList(element),
	                isCandidate = this.treeAdapter.getTagName(element) === neTagName &&
	                              this.treeAdapter.getNamespaceURI(element) === neNamespaceURI &&
	                              elementAttrs.length === neAttrsLength;
	
	            if (isCandidate)
	                candidates.push({idx: i, attrs: elementAttrs});
	        }
	    }
	
	    return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;
	};
	
	FormattingElementList.prototype._ensureNoahArkCondition = function (newElement) {
	    var candidates = this._getNoahArkConditionCandidates(newElement),
	        cLength = candidates.length;
	
	    if (cLength) {
	        var neAttrs = this.treeAdapter.getAttrList(newElement),
	            neAttrsLength = neAttrs.length,
	            neAttrsMap = {};
	
	        //NOTE: build attrs map for the new element so we can perform fast lookups
	        for (var i = 0; i < neAttrsLength; i++) {
	            var neAttr = neAttrs[i];
	
	            neAttrsMap[neAttr.name] = neAttr.value;
	        }
	
	        for (i = 0; i < neAttrsLength; i++) {
	            for (var j = 0; j < cLength; j++) {
	                var cAttr = candidates[j].attrs[i];
	
	                if (neAttrsMap[cAttr.name] !== cAttr.value) {
	                    candidates.splice(j, 1);
	                    cLength--;
	                }
	
	                if (candidates.length < NOAH_ARK_CAPACITY)
	                    return;
	            }
	        }
	
	        //NOTE: remove bottommost candidates until Noah's Ark condition will not be met
	        for (i = cLength - 1; i >= NOAH_ARK_CAPACITY - 1; i--) {
	            this.entries.splice(candidates[i].idx, 1);
	            this.length--;
	        }
	    }
	};
	
	//Mutations
	FormattingElementList.prototype.insertMarker = function () {
	    this.entries.push({type: FormattingElementList.MARKER_ENTRY});
	    this.length++;
	};
	
	FormattingElementList.prototype.pushElement = function (element, token) {
	    this._ensureNoahArkCondition(element);
	
	    this.entries.push({
	        type: FormattingElementList.ELEMENT_ENTRY,
	        element: element,
	        token: token
	    });
	
	    this.length++;
	};
	
	FormattingElementList.prototype.insertElementAfterBookmark = function (element, token) {
	    var bookmarkIdx = this.length - 1;
	
	    for (; bookmarkIdx >= 0; bookmarkIdx--) {
	        if (this.entries[bookmarkIdx] === this.bookmark)
	            break;
	    }
	
	    this.entries.splice(bookmarkIdx + 1, 0, {
	        type: FormattingElementList.ELEMENT_ENTRY,
	        element: element,
	        token: token
	    });
	
	    this.length++;
	};
	
	FormattingElementList.prototype.removeEntry = function (entry) {
	    for (var i = this.length - 1; i >= 0; i--) {
	        if (this.entries[i] === entry) {
	            this.entries.splice(i, 1);
	            this.length--;
	            break;
	        }
	    }
	};
	
	FormattingElementList.prototype.clearToLastMarker = function () {
	    while (this.length) {
	        var entry = this.entries.pop();
	
	        this.length--;
	
	        if (entry.type === FormattingElementList.MARKER_ENTRY)
	            break;
	    }
	};
	
	//Search
	FormattingElementList.prototype.getElementEntryInScopeWithTagName = function (tagName) {
	    for (var i = this.length - 1; i >= 0; i--) {
	        var entry = this.entries[i];
	
	        if (entry.type === FormattingElementList.MARKER_ENTRY)
	            return null;
	
	        if (this.treeAdapter.getTagName(entry.element) === tagName)
	            return entry;
	    }
	
	    return null;
	};
	
	FormattingElementList.prototype.getElementEntry = function (element) {
	    for (var i = this.length - 1; i >= 0; i--) {
	        var entry = this.entries[i];
	
	        if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element === element)
	            return entry;
	    }
	
	    return null;
	};


/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var OpenElementStack = __webpack_require__(306),
	    Tokenizer = __webpack_require__(301),
	    HTML = __webpack_require__(307);
	
	
	//Aliases
	var $ = HTML.TAG_NAMES;
	
	
	function setEndLocation(element, closingToken, treeAdapter) {
	    var loc = element.__location;
	
	    if (!loc)
	        return;
	
	    /**
	     * @typedef {Object} ElementLocationInfo
	     * @extends StartTagLocationInfo
	     *
	     * @property {StartTagLocationInfo} startTag - Element's start tag location info.
	     * @property {LocationInfo} endTag - Element's end tag location info.
	     */
	    if (!loc.startTag) {
	        loc.startTag = {
	            line: loc.line,
	            col: loc.col,
	            startOffset: loc.startOffset,
	            endOffset: loc.endOffset
	        };
	        if (loc.attrs)
	            loc.startTag.attrs = loc.attrs;
	    }
	
	    if (closingToken.location) {
	        var ctLocation = closingToken.location,
	            tn = treeAdapter.getTagName(element),
	        // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing tag and
	        // for cases like <td> <p> </td> - 'p' closes without a closing tag
	            isClosingEndTag = closingToken.type === Tokenizer.END_TAG_TOKEN &&
	                              tn === closingToken.tagName;
	
	        if (isClosingEndTag) {
	            loc.endTag = {
	                line: ctLocation.line,
	                col: ctLocation.col,
	                startOffset: ctLocation.startOffset,
	                endOffset: ctLocation.endOffset
	            };
	        }
	
	        if (isClosingEndTag)
	            loc.endOffset = ctLocation.endOffset;
	        else
	            loc.endOffset = ctLocation.startOffset;
	    }
	}
	
	
	exports.assign = function (parser) {
	    //NOTE: obtain Parser proto this way to avoid module circular references
	    var parserProto = Object.getPrototypeOf(parser),
	        treeAdapter = parser.treeAdapter,
	        attachableElementLocation = null,
	        lastFosterParentingLocation = null,
	        currentToken = null;
	
	
	    //NOTE: patch _bootstrap method
	    parser._bootstrap = function (document, fragmentContext) {
	        parserProto._bootstrap.call(this, document, fragmentContext);
	
	        attachableElementLocation = null;
	        lastFosterParentingLocation = null;
	        currentToken = null;
	
	        //OpenElementStack
	        parser.openElements.pop = function () {
	            setEndLocation(this.current, currentToken, treeAdapter);
	            OpenElementStack.prototype.pop.call(this);
	        };
	
	        parser.openElements.popAllUpToHtmlElement = function () {
	            for (var i = this.stackTop; i > 0; i--)
	                setEndLocation(this.items[i], currentToken, treeAdapter);
	
	            OpenElementStack.prototype.popAllUpToHtmlElement.call(this);
	        };
	
	        parser.openElements.remove = function (element) {
	            setEndLocation(element, currentToken, treeAdapter);
	            OpenElementStack.prototype.remove.call(this, element);
	        };
	    };
	
	
	    //Token processing
	    parser._processTokenInForeignContent = function (token) {
	        currentToken = token;
	        parserProto._processTokenInForeignContent.call(this, token);
	    };
	
	    parser._processToken = function (token) {
	        currentToken = token;
	        parserProto._processToken.call(this, token);
	
	        //NOTE: <body> and <html> are never popped from the stack, so we need to updated
	        //their end location explicitly.
	        if (token.type === Tokenizer.END_TAG_TOKEN &&
	            (token.tagName === $.HTML ||
	             token.tagName === $.BODY && this.openElements.hasInScope($.BODY))) {
	            for (var i = this.openElements.stackTop; i >= 0; i--) {
	                var element = this.openElements.items[i];
	
	                if (this.treeAdapter.getTagName(element) === token.tagName) {
	                    setEndLocation(element, token, treeAdapter);
	                    break;
	                }
	            }
	        }
	    };
	
	
	    //Doctype
	    parser._setDocumentType = function (token) {
	        parserProto._setDocumentType.call(this, token);
	
	        var documentChildren = this.treeAdapter.getChildNodes(this.document),
	            cnLength = documentChildren.length;
	
	        for (var i = 0; i < cnLength; i++) {
	            var node = documentChildren[i];
	
	            if (this.treeAdapter.isDocumentTypeNode(node)) {
	                node.__location = token.location;
	                break;
	            }
	        }
	    };
	
	
	    //Elements
	    parser._attachElementToTree = function (element) {
	        //NOTE: _attachElementToTree is called from _appendElement, _insertElement and _insertTemplate methods.
	        //So we will use token location stored in this methods for the element.
	        element.__location = attachableElementLocation || null;
	        attachableElementLocation = null;
	        parserProto._attachElementToTree.call(this, element);
	    };
	
	    parser._appendElement = function (token, namespaceURI) {
	        attachableElementLocation = token.location;
	        parserProto._appendElement.call(this, token, namespaceURI);
	    };
	
	    parser._insertElement = function (token, namespaceURI) {
	        attachableElementLocation = token.location;
	        parserProto._insertElement.call(this, token, namespaceURI);
	    };
	
	    parser._insertTemplate = function (token) {
	        attachableElementLocation = token.location;
	        parserProto._insertTemplate.call(this, token);
	
	        var tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);
	
	        tmplContent.__location = null;
	    };
	
	    parser._insertFakeRootElement = function () {
	        parserProto._insertFakeRootElement.call(this);
	        this.openElements.current.__location = null;
	    };
	
	
	    //Comments
	    parser._appendCommentNode = function (token, parent) {
	        parserProto._appendCommentNode.call(this, token, parent);
	
	        var children = this.treeAdapter.getChildNodes(parent),
	            commentNode = children[children.length - 1];
	
	        commentNode.__location = token.location;
	    };
	
	
	    //Text
	    parser._findFosterParentingLocation = function () {
	        //NOTE: store last foster parenting location, so we will be able to find inserted text
	        //in case of foster parenting
	        lastFosterParentingLocation = parserProto._findFosterParentingLocation.call(this);
	        return lastFosterParentingLocation;
	    };
	
	    parser._insertCharacters = function (token) {
	        parserProto._insertCharacters.call(this, token);
	
	        var hasFosterParent = this._shouldFosterParentOnInsertion(),
	            parent = hasFosterParent && lastFosterParentingLocation.parent ||
	                     this.openElements.currentTmplContent ||
	                     this.openElements.current,
	            siblings = this.treeAdapter.getChildNodes(parent),
	            textNodeIdx = hasFosterParent && lastFosterParentingLocation.beforeElement ?
	            siblings.indexOf(lastFosterParentingLocation.beforeElement) - 1 :
	            siblings.length - 1,
	            textNode = siblings[textNodeIdx];
	
	        //NOTE: if we have location assigned by another token, then just update end position
	        if (textNode.__location)
	            textNode.__location.endOffset = token.location.endOffset;
	
	        else
	            textNode.__location = token.location;
	    };
	};
	


/***/ },
/* 310 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * @typedef {Object} TreeAdapter
	 */
	
	//Node construction
	
	/**
	 * Creates a document node.
	 *
	 * @function createDocument
	 * @memberof TreeAdapter
	 *
	 * @returns {ASTNode<Document>} document
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L19|default implementation.}
	 */
	exports.createDocument = function () {
	    return {
	        nodeName: '#document',
	        quirksMode: false,
	        childNodes: []
	    };
	};
	
	/**
	 * Creates a document fragment node.
	 *
	 * @function createDocumentFragment
	 * @memberof TreeAdapter
	 *
	 * @returns {ASTNode<DocumentFragment>} fragment
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L37|default implementation.}
	 */
	exports.createDocumentFragment = function () {
	    return {
	        nodeName: '#document-fragment',
	        quirksMode: false,
	        childNodes: []
	    };
	};
	
	
	/**
	 * Creates an element node.
	 *
	 * @function createElement
	 * @memberof TreeAdapter
	 *
	 * @param {String} tagName - Tag name of the element.
	 * @param {String} namespaceURI - Namespace of the element.
	 * @param {Array}  attrs - Attribute name-value pair array.
	 *                         Foreign attributes may contain `namespace` and `prefix` fields as well.
	 *
	 * @returns {ASTNode<Element>} element
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L61|default implementation.}
	 */
	exports.createElement = function (tagName, namespaceURI, attrs) {
	    return {
	        nodeName: tagName,
	        tagName: tagName,
	        attrs: attrs,
	        namespaceURI: namespaceURI,
	        childNodes: [],
	        parentNode: null
	    };
	};
	
	
	/**
	 * Creates a comment node.
	 *
	 * @function createCommentNode
	 * @memberof TreeAdapter
	 *
	 * @param {String} data - Comment text.
	 *
	 * @returns {ASTNode<CommentNode>} comment
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L85|default implementation.}
	 */
	exports.createCommentNode = function (data) {
	    return {
	        nodeName: '#comment',
	        data: data,
	        parentNode: null
	    };
	};
	
	var createTextNode = function (value) {
	    return {
	        nodeName: '#text',
	        value: value,
	        parentNode: null
	    };
	};
	
	
	//Tree mutation
	/**
	 * Appends a child node to the given parent node.
	 *
	 * @function appendChild
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode} parentNode - Parent node.
	 * @param {ASTNode} newNode -  Child node.
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L114|default implementation.}
	 */
	var appendChild = exports.appendChild = function (parentNode, newNode) {
	    parentNode.childNodes.push(newNode);
	    newNode.parentNode = parentNode;
	};
	
	/**
	 * Inserts a child node to the given parent node before the given reference node.
	 *
	 * @function insertBefore
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode} parentNode - Parent node.
	 * @param {ASTNode} newNode -  Child node.
	 * @param {ASTNode} referenceNode -  Reference node.
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L131|default implementation.}
	 */
	var insertBefore = exports.insertBefore = function (parentNode, newNode, referenceNode) {
	    var insertionIdx = parentNode.childNodes.indexOf(referenceNode);
	
	    parentNode.childNodes.splice(insertionIdx, 0, newNode);
	    newNode.parentNode = parentNode;
	};
	
	/**
	 * Sets the `<template>` element content element.
	 *
	 * @function setTemplateContent
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode<TemplateElement>} templateElement - `<template>` element.
	 * @param {ASTNode<DocumentFragment>} contentTemplate -  Content element.
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L149|default implementation.}
	 */
	exports.setTemplateContent = function (templateElement, contentElement) {
	    templateElement.content = contentElement;
	};
	
	
	/**
	 * Returns the `<template>` element content element.
	 *
	 * @function getTemplateContent
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode<TemplateElement>} templateElement - `<template>` element.
	
	 * @returns {ASTNode<DocumentFragment>}
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L166|default implementation.}
	 */
	exports.getTemplateContent = function (templateElement) {
	    return templateElement.content;
	};
	
	/**
	 * Sets the document type. If the `document` already contains a document type node, the `name`, `publicId` and `systemId`
	 * properties of this node will be updated with the provided values. Otherwise, creates a new document type node
	 * with the given properties and inserts it into the `document`.
	 *
	 * @function setDocumentType
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode<Document>} document - Document node.
	 * @param {String} name -  Document type name.
	 * @param {String} publicId - Document type public identifier.
	 * @param {String} systemId - Document type system identifier.
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L185|default implementation.}
	 */
	exports.setDocumentType = function (document, name, publicId, systemId) {
	    var doctypeNode = null;
	
	    for (var i = 0; i < document.childNodes.length; i++) {
	        if (document.childNodes[i].nodeName === '#documentType') {
	            doctypeNode = document.childNodes[i];
	            break;
	        }
	    }
	
	    if (doctypeNode) {
	        doctypeNode.name = name;
	        doctypeNode.publicId = publicId;
	        doctypeNode.systemId = systemId;
	    }
	
	    else {
	        appendChild(document, {
	            nodeName: '#documentType',
	            name: name,
	            publicId: publicId,
	            systemId: systemId
	        });
	    }
	};
	
	/**
	 * Sets the document's quirks mode flag.
	 *
	 * @function setQuirksMode
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode<Document>} document - Document node.
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L221|default implementation.}
	 */
	exports.setQuirksMode = function (document) {
	    document.quirksMode = true;
	};
	
	/**
	 * Determines if the document's quirks mode flag is set.
	 *
	 * @function isQuirksMode
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode<Document>} document - Document node.
	
	 * @returns {Boolean}
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L237|default implementation.}
	 */
	exports.isQuirksMode = function (document) {
	    return document.quirksMode;
	};
	
	/**
	 * Removes a node from its parent.
	 *
	 * @function detachNode
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode} node - Node.
	
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L251|default implementation.}
	 */
	exports.detachNode = function (node) {
	    if (node.parentNode) {
	        var idx = node.parentNode.childNodes.indexOf(node);
	
	        node.parentNode.childNodes.splice(idx, 1);
	        node.parentNode = null;
	    }
	};
	
	/**
	 * Inserts text into a node. If the last child of the node is a text node, the provided text will be appended to the
	 * text node content. Otherwise, inserts a new text node with the given text.
	 *
	 *
	 * @function insertText
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode} parentNode - Node to insert text into.
	 * @param {String} text - Text to insert.
	
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L273|default implementation.}
	 */
	exports.insertText = function (parentNode, text) {
	    if (parentNode.childNodes.length) {
	        var prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];
	
	        if (prevNode.nodeName === '#text') {
	            prevNode.value += text;
	            return;
	        }
	    }
	
	    appendChild(parentNode, createTextNode(text));
	};
	
	/**
	 * Inserts text into a sibling node that goes before the reference node. If this sibling node is the text node,
	 * the provided text will be appended to the text node content. Otherwise, inserts a new sibling text node with
	 * the given text before the reference node.
	 *
	 *
	 * @function insertTextBefore
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode} parentNode - Node to insert text into.
	 * @param {String} text - Text to insert.
	 * @param {ASTNode} referenceNode - Node to insert text before.
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L301|default implementation.}
	 */
	exports.insertTextBefore = function (parentNode, text, referenceNode) {
	    var prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
	
	    if (prevNode && prevNode.nodeName === '#text')
	        prevNode.value += text;
	    else
	        insertBefore(parentNode, createTextNode(text), referenceNode);
	};
	
	/**
	 * Copies attributes to the given node. Only attributes that are not yet present in the node are copied.
	 *
	 * @function adoptAttributes
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode} recipientNode - Node to copy attributes into.
	 * @param {Array} attrs - Attributes to copy.
	
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L321|default implementation.}
	 */
	exports.adoptAttributes = function (recipientNode, attrs) {
	    var recipientAttrsMap = [];
	
	    for (var i = 0; i < recipientNode.attrs.length; i++)
	        recipientAttrsMap.push(recipientNode.attrs[i].name);
	
	    for (var j = 0; j < attrs.length; j++) {
	        if (recipientAttrsMap.indexOf(attrs[j].name) === -1)
	            recipientNode.attrs.push(attrs[j]);
	    }
	};
	
	
	//Tree traversing
	
	/**
	 * Returns the first child of the given node.
	 *
	 * @function getFirstChild
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode} node - Node.
	 *
	 * @returns {ASTNode} firstChild
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L348|default implementation.}
	 */
	exports.getFirstChild = function (node) {
	    return node.childNodes[0];
	};
	
	/**
	 * Returns the given node's children in an array.
	 *
	 * @function getChildNodes
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode} node - Node.
	 *
	 * @returns {Array} children
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L364|default implementation.}
	 */
	exports.getChildNodes = function (node) {
	    return node.childNodes;
	};
	
	/**
	 * Returns the given node's parent.
	 *
	 * @function getParentNode
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode} node - Node.
	 *
	 * @returns {ASTNode} parent
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L380|default implementation.}
	 */
	exports.getParentNode = function (node) {
	    return node.parentNode;
	};
	
	/**
	 * Returns the given node's attributes in an array, in the form of name-value pairs.
	 * Foreign attributes may contain `namespace` and `prefix` fields as well.
	 *
	 * @function getAttrList
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode} node - Node.
	 *
	 * @returns {Array} attributes
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L397|default implementation.}
	 */
	exports.getAttrList = function (node) {
	    return node.attrs;
	};
	
	//Node data
	
	/**
	 * Returns the given element's tag name.
	 *
	 * @function getTagName
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode<Element>} element - Element.
	 *
	 * @returns {String} tagName
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L415|default implementation.}
	 */
	exports.getTagName = function (element) {
	    return element.tagName;
	};
	
	/**
	 * Returns the given element's namespace.
	 *
	 * @function getNamespaceURI
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode<Element>} element - Element.
	 *
	 * @returns {String} namespaceURI
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L431|default implementation.}
	 */
	exports.getNamespaceURI = function (element) {
	    return element.namespaceURI;
	};
	
	/**
	 * Returns the given text node's content.
	 *
	 * @function getTextNodeContent
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode<Text>} textNode - Text node.
	 *
	 * @returns {String} text
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L447|default implementation.}
	 */
	exports.getTextNodeContent = function (textNode) {
	    return textNode.value;
	};
	
	/**
	 * Returns the given comment node's content.
	 *
	 * @function getCommentNodeContent
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode<Comment>} commentNode - Comment node.
	 *
	 * @returns {String} commentText
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L463|default implementation.}
	 */
	exports.getCommentNodeContent = function (commentNode) {
	    return commentNode.data;
	};
	
	/**
	 * Returns the given document type node's name.
	 *
	 * @function getDocumentTypeNodeName
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode<DocumentType>} doctypeNode - Document type node.
	 *
	 * @returns {String} name
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L479|default implementation.}
	 */
	exports.getDocumentTypeNodeName = function (doctypeNode) {
	    return doctypeNode.name;
	};
	
	/**
	 * Returns the given document type node's public identifier.
	 *
	 * @function getDocumentTypeNodePublicId
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode<DocumentType>} doctypeNode - Document type node.
	 *
	 * @returns {String} publicId
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L495|default implementation.}
	 */
	exports.getDocumentTypeNodePublicId = function (doctypeNode) {
	    return doctypeNode.publicId;
	};
	
	/**
	 * Returns the given document type node's system identifier.
	 *
	 * @function getDocumentTypeNodeSystemId
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode<DocumentType>} doctypeNode - Document type node.
	 *
	 * @returns {String} systemId
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L511|default implementation.}
	 */
	exports.getDocumentTypeNodeSystemId = function (doctypeNode) {
	    return doctypeNode.systemId;
	};
	
	//Node types
	/**
	 * Determines if the given node is a text node.
	 *
	 * @function isTextNode
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode} node - Node.
	 *
	 * @returns {Boolean}
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L526|default implementation.}
	 */
	exports.isTextNode = function (node) {
	    return node.nodeName === '#text';
	};
	
	/**
	 * Determines if the given node is a comment node.
	 *
	 * @function isCommentNode
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode} node - Node.
	 *
	 * @returns {Boolean}
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L544|default implementation.}
	 */
	exports.isCommentNode = function (node) {
	    return node.nodeName === '#comment';
	};
	
	/**
	 * Determines if the given node is a document type node.
	 *
	 * @function isDocumentTypeNode
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode} node - Node.
	 *
	 * @returns {Boolean}
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L560|default implementation.}
	 */
	exports.isDocumentTypeNode = function (node) {
	    return node.nodeName === '#documentType';
	};
	
	/**
	 * Determines if the given node is an element.
	 *
	 * @function isElementNode
	 * @memberof TreeAdapter
	 *
	 * @param {ASTNode} node - Node.
	 *
	 * @returns {Boolean}
	 *
	 * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L576|default implementation.}
	 */
	exports.isElementNode = function (node) {
	    return !!node.tagName;
	};


/***/ },
/* 311 */
/***/ function(module, exports) {

	'use strict';
	
	//Const
	var VALID_DOCTYPE_NAME = 'html',
	    QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd',
	    QUIRKS_MODE_PUBLIC_ID_PREFIXES = [
	        '+//silmaril//dtd html pro v0r11 19970101//en',
	        '-//advasoft ltd//dtd html 3.0 aswedit + extensions//en',
	        '-//as//dtd html 3.0 aswedit + extensions//en',
	        '-//ietf//dtd html 2.0 level 1//en',
	        '-//ietf//dtd html 2.0 level 2//en',
	        '-//ietf//dtd html 2.0 strict level 1//en',
	        '-//ietf//dtd html 2.0 strict level 2//en',
	        '-//ietf//dtd html 2.0 strict//en',
	        '-//ietf//dtd html 2.0//en',
	        '-//ietf//dtd html 2.1e//en',
	        '-//ietf//dtd html 3.0//en',
	        '-//ietf//dtd html 3.0//en//',
	        '-//ietf//dtd html 3.2 final//en',
	        '-//ietf//dtd html 3.2//en',
	        '-//ietf//dtd html 3//en',
	        '-//ietf//dtd html level 0//en',
	        '-//ietf//dtd html level 0//en//2.0',
	        '-//ietf//dtd html level 1//en',
	        '-//ietf//dtd html level 1//en//2.0',
	        '-//ietf//dtd html level 2//en',
	        '-//ietf//dtd html level 2//en//2.0',
	        '-//ietf//dtd html level 3//en',
	        '-//ietf//dtd html level 3//en//3.0',
	        '-//ietf//dtd html strict level 0//en',
	        '-//ietf//dtd html strict level 0//en//2.0',
	        '-//ietf//dtd html strict level 1//en',
	        '-//ietf//dtd html strict level 1//en//2.0',
	        '-//ietf//dtd html strict level 2//en',
	        '-//ietf//dtd html strict level 2//en//2.0',
	        '-//ietf//dtd html strict level 3//en',
	        '-//ietf//dtd html strict level 3//en//3.0',
	        '-//ietf//dtd html strict//en',
	        '-//ietf//dtd html strict//en//2.0',
	        '-//ietf//dtd html strict//en//3.0',
	        '-//ietf//dtd html//en',
	        '-//ietf//dtd html//en//2.0',
	        '-//ietf//dtd html//en//3.0',
	        '-//metrius//dtd metrius presentational//en',
	        '-//microsoft//dtd internet explorer 2.0 html strict//en',
	        '-//microsoft//dtd internet explorer 2.0 html//en',
	        '-//microsoft//dtd internet explorer 2.0 tables//en',
	        '-//microsoft//dtd internet explorer 3.0 html strict//en',
	        '-//microsoft//dtd internet explorer 3.0 html//en',
	        '-//microsoft//dtd internet explorer 3.0 tables//en',
	        '-//netscape comm. corp.//dtd html//en',
	        '-//netscape comm. corp.//dtd strict html//en',
	        '-//o\'reilly and associates//dtd html 2.0//en',
	        '-//o\'reilly and associates//dtd html extended 1.0//en',
	        '-//spyglass//dtd html 2.0 extended//en',
	        '-//sq//dtd html 2.0 hotmetal + extensions//en',
	        '-//sun microsystems corp.//dtd hotjava html//en',
	        '-//sun microsystems corp.//dtd hotjava strict html//en',
	        '-//w3c//dtd html 3 1995-03-24//en',
	        '-//w3c//dtd html 3.2 draft//en',
	        '-//w3c//dtd html 3.2 final//en',
	        '-//w3c//dtd html 3.2//en',
	        '-//w3c//dtd html 3.2s draft//en',
	        '-//w3c//dtd html 4.0 frameset//en',
	        '-//w3c//dtd html 4.0 transitional//en',
	        '-//w3c//dtd html experimental 19960712//en',
	        '-//w3c//dtd html experimental 970421//en',
	        '-//w3c//dtd w3 html//en',
	        '-//w3o//dtd w3 html 3.0//en',
	        '-//w3o//dtd w3 html 3.0//en//',
	        '-//webtechs//dtd mozilla html 2.0//en',
	        '-//webtechs//dtd mozilla html//en'
	    ],
	    QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [
	        '-//w3c//dtd html 4.01 frameset//',
	        '-//w3c//dtd html 4.01 transitional//'
	    ],
	    QUIRKS_MODE_PUBLIC_IDS = [
	        '-//w3o//dtd w3 html strict 3.0//en//',
	        '-/w3c/dtd html 4.0 transitional/en',
	        'html'
	    ];
	
	
	//Utils
	function enquoteDoctypeId(id) {
	    var quote = id.indexOf('"') !== -1 ? '\'' : '"';
	
	    return quote + id + quote;
	}
	
	
	//API
	exports.isQuirks = function (name, publicId, systemId) {
	    if (name !== VALID_DOCTYPE_NAME)
	        return true;
	
	    if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID)
	        return true;
	
	    if (publicId !== null) {
	        publicId = publicId.toLowerCase();
	
	        if (QUIRKS_MODE_PUBLIC_IDS.indexOf(publicId) > -1)
	            return true;
	
	        var prefixes = QUIRKS_MODE_PUBLIC_ID_PREFIXES;
	
	        if (systemId === null)
	            prefixes = prefixes.concat(QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES);
	
	        for (var i = 0; i < prefixes.length; i++) {
	            if (publicId.indexOf(prefixes[i]) === 0)
	                return true;
	        }
	    }
	
	    return false;
	};
	
	exports.serializeContent = function (name, publicId, systemId) {
	    var str = '!DOCTYPE ';
	
	    if (name)
	        str += name;
	
	    if (publicId !== null)
	        str += ' PUBLIC ' + enquoteDoctypeId(publicId);
	
	    else if (systemId !== null)
	        str += ' SYSTEM';
	
	    if (systemId !== null)
	        str += ' ' + enquoteDoctypeId(systemId);
	
	    return str;
	};


/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Tokenizer = __webpack_require__(301),
	    HTML = __webpack_require__(307);
	
	//Aliases
	var $ = HTML.TAG_NAMES,
	    NS = HTML.NAMESPACES,
	    ATTRS = HTML.ATTRS;
	
	
	//MIME types
	var MIME_TYPES = {
	    TEXT_HTML: 'text/html',
	    APPLICATION_XML: 'application/xhtml+xml'
	};
	
	//Attributes
	var DEFINITION_URL_ATTR = 'definitionurl',
	    ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL',
	    SVG_ATTRS_ADJUSTMENT_MAP = {
	        'attributename': 'attributeName',
	        'attributetype': 'attributeType',
	        'basefrequency': 'baseFrequency',
	        'baseprofile': 'baseProfile',
	        'calcmode': 'calcMode',
	        'clippathunits': 'clipPathUnits',
	        'diffuseconstant': 'diffuseConstant',
	        'edgemode': 'edgeMode',
	        'filterunits': 'filterUnits',
	        'glyphref': 'glyphRef',
	        'gradienttransform': 'gradientTransform',
	        'gradientunits': 'gradientUnits',
	        'kernelmatrix': 'kernelMatrix',
	        'kernelunitlength': 'kernelUnitLength',
	        'keypoints': 'keyPoints',
	        'keysplines': 'keySplines',
	        'keytimes': 'keyTimes',
	        'lengthadjust': 'lengthAdjust',
	        'limitingconeangle': 'limitingConeAngle',
	        'markerheight': 'markerHeight',
	        'markerunits': 'markerUnits',
	        'markerwidth': 'markerWidth',
	        'maskcontentunits': 'maskContentUnits',
	        'maskunits': 'maskUnits',
	        'numoctaves': 'numOctaves',
	        'pathlength': 'pathLength',
	        'patterncontentunits': 'patternContentUnits',
	        'patterntransform': 'patternTransform',
	        'patternunits': 'patternUnits',
	        'pointsatx': 'pointsAtX',
	        'pointsaty': 'pointsAtY',
	        'pointsatz': 'pointsAtZ',
	        'preservealpha': 'preserveAlpha',
	        'preserveaspectratio': 'preserveAspectRatio',
	        'primitiveunits': 'primitiveUnits',
	        'refx': 'refX',
	        'refy': 'refY',
	        'repeatcount': 'repeatCount',
	        'repeatdur': 'repeatDur',
	        'requiredextensions': 'requiredExtensions',
	        'requiredfeatures': 'requiredFeatures',
	        'specularconstant': 'specularConstant',
	        'specularexponent': 'specularExponent',
	        'spreadmethod': 'spreadMethod',
	        'startoffset': 'startOffset',
	        'stddeviation': 'stdDeviation',
	        'stitchtiles': 'stitchTiles',
	        'surfacescale': 'surfaceScale',
	        'systemlanguage': 'systemLanguage',
	        'tablevalues': 'tableValues',
	        'targetx': 'targetX',
	        'targety': 'targetY',
	        'textlength': 'textLength',
	        'viewbox': 'viewBox',
	        'viewtarget': 'viewTarget',
	        'xchannelselector': 'xChannelSelector',
	        'ychannelselector': 'yChannelSelector',
	        'zoomandpan': 'zoomAndPan'
	    },
	    XML_ATTRS_ADJUSTMENT_MAP = {
	        'xlink:actuate': {prefix: 'xlink', name: 'actuate', namespace: NS.XLINK},
	        'xlink:arcrole': {prefix: 'xlink', name: 'arcrole', namespace: NS.XLINK},
	        'xlink:href': {prefix: 'xlink', name: 'href', namespace: NS.XLINK},
	        'xlink:role': {prefix: 'xlink', name: 'role', namespace: NS.XLINK},
	        'xlink:show': {prefix: 'xlink', name: 'show', namespace: NS.XLINK},
	        'xlink:title': {prefix: 'xlink', name: 'title', namespace: NS.XLINK},
	        'xlink:type': {prefix: 'xlink', name: 'type', namespace: NS.XLINK},
	        'xml:base': {prefix: 'xml', name: 'base', namespace: NS.XML},
	        'xml:lang': {prefix: 'xml', name: 'lang', namespace: NS.XML},
	        'xml:space': {prefix: 'xml', name: 'space', namespace: NS.XML},
	        'xmlns': {prefix: '', name: 'xmlns', namespace: NS.XMLNS},
	        'xmlns:xlink': {prefix: 'xmlns', name: 'xlink', namespace: NS.XMLNS}
	
	    };
	
	//SVG tag names adjustment map
	var SVG_TAG_NAMES_ADJUSTMENT_MAP = exports.SVG_TAG_NAMES_ADJUSTMENT_MAP = {
	    'altglyph': 'altGlyph',
	    'altglyphdef': 'altGlyphDef',
	    'altglyphitem': 'altGlyphItem',
	    'animatecolor': 'animateColor',
	    'animatemotion': 'animateMotion',
	    'animatetransform': 'animateTransform',
	    'clippath': 'clipPath',
	    'feblend': 'feBlend',
	    'fecolormatrix': 'feColorMatrix',
	    'fecomponenttransfer': 'feComponentTransfer',
	    'fecomposite': 'feComposite',
	    'feconvolvematrix': 'feConvolveMatrix',
	    'fediffuselighting': 'feDiffuseLighting',
	    'fedisplacementmap': 'feDisplacementMap',
	    'fedistantlight': 'feDistantLight',
	    'feflood': 'feFlood',
	    'fefunca': 'feFuncA',
	    'fefuncb': 'feFuncB',
	    'fefuncg': 'feFuncG',
	    'fefuncr': 'feFuncR',
	    'fegaussianblur': 'feGaussianBlur',
	    'feimage': 'feImage',
	    'femerge': 'feMerge',
	    'femergenode': 'feMergeNode',
	    'femorphology': 'feMorphology',
	    'feoffset': 'feOffset',
	    'fepointlight': 'fePointLight',
	    'fespecularlighting': 'feSpecularLighting',
	    'fespotlight': 'feSpotLight',
	    'fetile': 'feTile',
	    'feturbulence': 'feTurbulence',
	    'foreignobject': 'foreignObject',
	    'glyphref': 'glyphRef',
	    'lineargradient': 'linearGradient',
	    'radialgradient': 'radialGradient',
	    'textpath': 'textPath'
	};
	
	//Tags that causes exit from foreign content
	var EXITS_FOREIGN_CONTENT = {};
	
	EXITS_FOREIGN_CONTENT[$.B] = true;
	EXITS_FOREIGN_CONTENT[$.BIG] = true;
	EXITS_FOREIGN_CONTENT[$.BLOCKQUOTE] = true;
	EXITS_FOREIGN_CONTENT[$.BODY] = true;
	EXITS_FOREIGN_CONTENT[$.BR] = true;
	EXITS_FOREIGN_CONTENT[$.CENTER] = true;
	EXITS_FOREIGN_CONTENT[$.CODE] = true;
	EXITS_FOREIGN_CONTENT[$.DD] = true;
	EXITS_FOREIGN_CONTENT[$.DIV] = true;
	EXITS_FOREIGN_CONTENT[$.DL] = true;
	EXITS_FOREIGN_CONTENT[$.DT] = true;
	EXITS_FOREIGN_CONTENT[$.EM] = true;
	EXITS_FOREIGN_CONTENT[$.EMBED] = true;
	EXITS_FOREIGN_CONTENT[$.H1] = true;
	EXITS_FOREIGN_CONTENT[$.H2] = true;
	EXITS_FOREIGN_CONTENT[$.H3] = true;
	EXITS_FOREIGN_CONTENT[$.H4] = true;
	EXITS_FOREIGN_CONTENT[$.H5] = true;
	EXITS_FOREIGN_CONTENT[$.H6] = true;
	EXITS_FOREIGN_CONTENT[$.HEAD] = true;
	EXITS_FOREIGN_CONTENT[$.HR] = true;
	EXITS_FOREIGN_CONTENT[$.I] = true;
	EXITS_FOREIGN_CONTENT[$.IMG] = true;
	EXITS_FOREIGN_CONTENT[$.LI] = true;
	EXITS_FOREIGN_CONTENT[$.LISTING] = true;
	EXITS_FOREIGN_CONTENT[$.MENU] = true;
	EXITS_FOREIGN_CONTENT[$.META] = true;
	EXITS_FOREIGN_CONTENT[$.NOBR] = true;
	EXITS_FOREIGN_CONTENT[$.OL] = true;
	EXITS_FOREIGN_CONTENT[$.P] = true;
	EXITS_FOREIGN_CONTENT[$.PRE] = true;
	EXITS_FOREIGN_CONTENT[$.RUBY] = true;
	EXITS_FOREIGN_CONTENT[$.S] = true;
	EXITS_FOREIGN_CONTENT[$.SMALL] = true;
	EXITS_FOREIGN_CONTENT[$.SPAN] = true;
	EXITS_FOREIGN_CONTENT[$.STRONG] = true;
	EXITS_FOREIGN_CONTENT[$.STRIKE] = true;
	EXITS_FOREIGN_CONTENT[$.SUB] = true;
	EXITS_FOREIGN_CONTENT[$.SUP] = true;
	EXITS_FOREIGN_CONTENT[$.TABLE] = true;
	EXITS_FOREIGN_CONTENT[$.TT] = true;
	EXITS_FOREIGN_CONTENT[$.U] = true;
	EXITS_FOREIGN_CONTENT[$.UL] = true;
	EXITS_FOREIGN_CONTENT[$.VAR] = true;
	
	//Check exit from foreign content
	exports.causesExit = function (startTagToken) {
	    var tn = startTagToken.tagName;
	    var isFontWithAttrs = tn === $.FONT && (Tokenizer.getTokenAttr(startTagToken, ATTRS.COLOR) !== null ||
	                                            Tokenizer.getTokenAttr(startTagToken, ATTRS.SIZE) !== null ||
	                                            Tokenizer.getTokenAttr(startTagToken, ATTRS.FACE) !== null);
	
	    return isFontWithAttrs ? true : EXITS_FOREIGN_CONTENT[tn];
	};
	
	//Token adjustments
	exports.adjustTokenMathMLAttrs = function (token) {
	    for (var i = 0; i < token.attrs.length; i++) {
	        if (token.attrs[i].name === DEFINITION_URL_ATTR) {
	            token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
	            break;
	        }
	    }
	};
	
	exports.adjustTokenSVGAttrs = function (token) {
	    for (var i = 0; i < token.attrs.length; i++) {
	        var adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];
	
	        if (adjustedAttrName)
	            token.attrs[i].name = adjustedAttrName;
	    }
	};
	
	exports.adjustTokenXMLAttrs = function (token) {
	    for (var i = 0; i < token.attrs.length; i++) {
	        var adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];
	
	        if (adjustedAttrEntry) {
	            token.attrs[i].prefix = adjustedAttrEntry.prefix;
	            token.attrs[i].name = adjustedAttrEntry.name;
	            token.attrs[i].namespace = adjustedAttrEntry.namespace;
	        }
	    }
	};
	
	exports.adjustTokenSVGTagName = function (token) {
	    var adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token.tagName];
	
	    if (adjustedTagName)
	        token.tagName = adjustedTagName;
	};
	
	//Integration points
	function isMathMLTextIntegrationPoint(tn, ns) {
	    return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);
	}
	
	function isHtmlIntegrationPoint(tn, ns, attrs) {
	    if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {
	        for (var i = 0; i < attrs.length; i++) {
	            if (attrs[i].name === ATTRS.ENCODING) {
	                var value = attrs[i].value.toLowerCase();
	
	                return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
	            }
	        }
	    }
	
	    return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);
	}
	
	exports.isIntegrationPoint = function (tn, ns, attrs, foreignNS) {
	    if ((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs))
	        return true;
	
	    if ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns))
	        return true;
	
	    return false;
	};


/***/ },
/* 313 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function mergeOptions(defaults, options) {
	    options = options || {};
	
	    return [defaults, options].reduce(function (merged, optObj) {
	        Object.keys(optObj).forEach(function (key) {
	            merged[key] = optObj[key];
	        });
	
	        return merged;
	    }, {});
	};


/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var defaultTreeAdapter = __webpack_require__(310),
	    doctype = __webpack_require__(311),
	    mergeOptions = __webpack_require__(313),
	    HTML = __webpack_require__(307);
	
	//Aliases
	var $ = HTML.TAG_NAMES,
	    NS = HTML.NAMESPACES;
	
	//Default serializer options
	/**
	 * @typedef {Object} SerializerOptions
	 *
	 * @property {TreeAdapter} [treeAdapter=parse5.treeAdapters.default] - Specifies input tree format.
	 */
	var DEFAULT_OPTIONS = {
	    treeAdapter: defaultTreeAdapter
	};
	
	//Escaping regexes
	var AMP_REGEX = /&/g,
	    NBSP_REGEX = /\u00a0/g,
	    DOUBLE_QUOTE_REGEX = /"/g,
	    LT_REGEX = /</g,
	    GT_REGEX = />/g;
	
	//Serializer
	var Serializer = module.exports = function (node, options) {
	    this.options = mergeOptions(DEFAULT_OPTIONS, options);
	    this.treeAdapter = this.options.treeAdapter;
	
	    this.html = '';
	    this.startNode = node;
	};
	
	// NOTE: exported as static method for the testing purposes
	Serializer.escapeString = function (str, attrMode) {
	    str = str
	        .replace(AMP_REGEX, '&amp;')
	        .replace(NBSP_REGEX, '&nbsp;');
	
	    if (attrMode)
	        str = str.replace(DOUBLE_QUOTE_REGEX, '&quot;');
	
	    else {
	        str = str
	            .replace(LT_REGEX, '&lt;')
	            .replace(GT_REGEX, '&gt;');
	    }
	
	    return str;
	};
	
	
	//API
	Serializer.prototype.serialize = function () {
	    this._serializeChildNodes(this.startNode);
	
	    return this.html;
	};
	
	
	//Internals
	Serializer.prototype._serializeChildNodes = function (parentNode) {
	    var childNodes = this.treeAdapter.getChildNodes(parentNode);
	
	    if (childNodes) {
	        for (var i = 0, cnLength = childNodes.length; i < cnLength; i++) {
	            var currentNode = childNodes[i];
	
	            if (this.treeAdapter.isElementNode(currentNode))
	                this._serializeElement(currentNode);
	
	            else if (this.treeAdapter.isTextNode(currentNode))
	                this._serializeTextNode(currentNode);
	
	            else if (this.treeAdapter.isCommentNode(currentNode))
	                this._serializeCommentNode(currentNode);
	
	            else if (this.treeAdapter.isDocumentTypeNode(currentNode))
	                this._serializeDocumentTypeNode(currentNode);
	        }
	    }
	};
	
	Serializer.prototype._serializeElement = function (node) {
	    var tn = this.treeAdapter.getTagName(node),
	        ns = this.treeAdapter.getNamespaceURI(node);
	
	    this.html += '<' + tn;
	    this._serializeAttributes(node);
	    this.html += '>';
	
	    if (tn !== $.AREA && tn !== $.BASE && tn !== $.BASEFONT && tn !== $.BGSOUND && tn !== $.BR && tn !== $.BR &&
	        tn !== $.COL && tn !== $.EMBED && tn !== $.FRAME && tn !== $.HR && tn !== $.IMG && tn !== $.INPUT &&
	        tn !== $.KEYGEN && tn !== $.LINK && tn !== $.MENUITEM && tn !== $.META && tn !== $.PARAM && tn !== $.SOURCE &&
	        tn !== $.TRACK && tn !== $.WBR) {
	
	        if (tn === $.PRE || tn === $.TEXTAREA || tn === $.LISTING) {
	            var firstChild = this.treeAdapter.getFirstChild(node);
	
	            if (firstChild && this.treeAdapter.isTextNode(firstChild)) {
	                var content = this.treeAdapter.getTextNodeContent(firstChild);
	
	                if (content[0] === '\n')
	                    this.html += '\n';
	            }
	        }
	
	        var childNodesHolder = tn === $.TEMPLATE && ns === NS.HTML ?
	            this.treeAdapter.getTemplateContent(node) :
	            node;
	
	        this._serializeChildNodes(childNodesHolder);
	        this.html += '</' + tn + '>';
	    }
	};
	
	Serializer.prototype._serializeAttributes = function (node) {
	    var attrs = this.treeAdapter.getAttrList(node);
	
	    for (var i = 0, attrsLength = attrs.length; i < attrsLength; i++) {
	        var attr = attrs[i],
	            value = Serializer.escapeString(attr.value, true);
	
	        this.html += ' ';
	
	        if (!attr.namespace)
	            this.html += attr.name;
	
	        else if (attr.namespace === NS.XML)
	            this.html += 'xml:' + attr.name;
	
	        else if (attr.namespace === NS.XMLNS) {
	            if (attr.name !== 'xmlns')
	                this.html += 'xmlns:';
	
	            this.html += attr.name;
	        }
	
	        else if (attr.namespace === NS.XLINK)
	            this.html += 'xlink:' + attr.name;
	
	        else
	            this.html += attr.namespace + ':' + attr.name;
	
	        this.html += '="' + value + '"';
	    }
	};
	
	Serializer.prototype._serializeTextNode = function (node) {
	    var content = this.treeAdapter.getTextNodeContent(node),
	        parent = this.treeAdapter.getParentNode(node),
	        parentTn = void 0;
	
	    if (parent && this.treeAdapter.isElementNode(parent))
	        parentTn = this.treeAdapter.getTagName(parent);
	
	    if (parentTn === $.STYLE || parentTn === $.SCRIPT || parentTn === $.XMP || parentTn === $.IFRAME ||
	        parentTn === $.NOEMBED || parentTn === $.NOFRAMES || parentTn === $.PLAINTEXT || parentTn === $.NOSCRIPT)
	
	        this.html += content;
	
	    else
	        this.html += Serializer.escapeString(content, false);
	};
	
	Serializer.prototype._serializeCommentNode = function (node) {
	    this.html += '<!--' + this.treeAdapter.getCommentNodeContent(node) + '-->';
	};
	
	Serializer.prototype._serializeDocumentTypeNode = function (node) {
	    var name = this.treeAdapter.getDocumentTypeNodeName(node),
	        publicId = this.treeAdapter.getDocumentTypeNodePublicId(node),
	        systemId = this.treeAdapter.getDocumentTypeNodeSystemId(node);
	
	    this.html += '<' + doctype.serializeContent(name, publicId, systemId) + '>';
	};


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var doctype = __webpack_require__(311);
	
	//Conversion tables for DOM Level1 structure emulation
	var nodeTypes = {
	    element: 1,
	    text: 3,
	    cdata: 4,
	    comment: 8
	};
	
	var nodePropertyShorthands = {
	    tagName: 'name',
	    childNodes: 'children',
	    parentNode: 'parent',
	    previousSibling: 'prev',
	    nextSibling: 'next',
	    nodeValue: 'data'
	};
	
	//Node
	var Node = function (props) {
	    for (var key in props) {
	        if (props.hasOwnProperty(key))
	            this[key] = props[key];
	    }
	};
	
	Node.prototype = {
	    get firstChild() {
	        var children = this.children;
	
	        return children && children[0] || null;
	    },
	
	    get lastChild() {
	        var children = this.children;
	
	        return children && children[children.length - 1] || null;
	    },
	
	    get nodeType() {
	        return nodeTypes[this.type] || nodeTypes.element;
	    }
	};
	
	Object.keys(nodePropertyShorthands).forEach(function (key) {
	    var shorthand = nodePropertyShorthands[key];
	
	    Object.defineProperty(Node.prototype, key, {
	        get: function () {
	            return this[shorthand] || null;
	        },
	        set: function (val) {
	            this[shorthand] = val;
	            return val;
	        }
	    });
	});
	
	
	//Node construction
	exports.createDocument =
	    exports.createDocumentFragment = function () {
	        return new Node({
	            type: 'root',
	            name: 'root',
	            parent: null,
	            prev: null,
	            next: null,
	            children: []
	        });
	    };
	
	exports.createElement = function (tagName, namespaceURI, attrs) {
	    var attribs = {},
	        attribsNamespace = {},
	        attribsPrefix = {};
	
	    for (var i = 0; i < attrs.length; i++) {
	        var attrName = attrs[i].name;
	
	        attribs[attrName] = attrs[i].value;
	        attribsNamespace[attrName] = attrs[i].namespace;
	        attribsPrefix[attrName] = attrs[i].prefix;
	    }
	
	    return new Node({
	        type: tagName === 'script' || tagName === 'style' ? tagName : 'tag',
	        name: tagName,
	        namespace: namespaceURI,
	        attribs: attribs,
	        'x-attribsNamespace': attribsNamespace,
	        'x-attribsPrefix': attribsPrefix,
	        children: [],
	        parent: null,
	        prev: null,
	        next: null
	    });
	};
	
	exports.createCommentNode = function (data) {
	    return new Node({
	        type: 'comment',
	        data: data,
	        parent: null,
	        prev: null,
	        next: null
	    });
	};
	
	var createTextNode = function (value) {
	    return new Node({
	        type: 'text',
	        data: value,
	        parent: null,
	        prev: null,
	        next: null
	    });
	};
	
	
	//Tree mutation
	var appendChild = exports.appendChild = function (parentNode, newNode) {
	    var prev = parentNode.children[parentNode.children.length - 1];
	
	    if (prev) {
	        prev.next = newNode;
	        newNode.prev = prev;
	    }
	
	    parentNode.children.push(newNode);
	    newNode.parent = parentNode;
	};
	
	var insertBefore = exports.insertBefore = function (parentNode, newNode, referenceNode) {
	    var insertionIdx = parentNode.children.indexOf(referenceNode),
	        prev = referenceNode.prev;
	
	    if (prev) {
	        prev.next = newNode;
	        newNode.prev = prev;
	    }
	
	    referenceNode.prev = newNode;
	    newNode.next = referenceNode;
	
	    parentNode.children.splice(insertionIdx, 0, newNode);
	    newNode.parent = parentNode;
	};
	
	exports.setTemplateContent = function (templateElement, contentElement) {
	    appendChild(templateElement, contentElement);
	};
	
	exports.getTemplateContent = function (templateElement) {
	    return templateElement.children[0];
	};
	
	exports.setDocumentType = function (document, name, publicId, systemId) {
	    var data = doctype.serializeContent(name, publicId, systemId),
	        doctypeNode = null;
	
	    for (var i = 0; i < document.children.length; i++) {
	        if (document.children[i].type === 'directive' && document.children[i].name === '!doctype') {
	            doctypeNode = document.children[i];
	            break;
	        }
	    }
	
	    if (doctypeNode) {
	        doctypeNode.data = data;
	        doctypeNode['x-name'] = name;
	        doctypeNode['x-publicId'] = publicId;
	        doctypeNode['x-systemId'] = systemId;
	    }
	
	    else {
	        appendChild(document, new Node({
	            type: 'directive',
	            name: '!doctype',
	            data: data,
	            'x-name': name,
	            'x-publicId': publicId,
	            'x-systemId': systemId
	        }));
	    }
	
	};
	
	exports.setQuirksMode = function (document) {
	    document.quirksMode = true;
	};
	
	exports.isQuirksMode = function (document) {
	    return document.quirksMode;
	};
	
	exports.detachNode = function (node) {
	    if (node.parent) {
	        var idx = node.parent.children.indexOf(node),
	            prev = node.prev,
	            next = node.next;
	
	        node.prev = null;
	        node.next = null;
	
	        if (prev)
	            prev.next = next;
	
	        if (next)
	            next.prev = prev;
	
	        node.parent.children.splice(idx, 1);
	        node.parent = null;
	    }
	};
	
	exports.insertText = function (parentNode, text) {
	    var lastChild = parentNode.children[parentNode.children.length - 1];
	
	    if (lastChild && lastChild.type === 'text')
	        lastChild.data += text;
	    else
	        appendChild(parentNode, createTextNode(text));
	};
	
	exports.insertTextBefore = function (parentNode, text, referenceNode) {
	    var prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];
	
	    if (prevNode && prevNode.type === 'text')
	        prevNode.data += text;
	    else
	        insertBefore(parentNode, createTextNode(text), referenceNode);
	};
	
	exports.adoptAttributes = function (recipientNode, attrs) {
	    for (var i = 0; i < attrs.length; i++) {
	        var attrName = attrs[i].name;
	
	        if (typeof recipientNode.attribs[attrName] === 'undefined') {
	            recipientNode.attribs[attrName] = attrs[i].value;
	            recipientNode['x-attribsNamespace'][attrName] = attrs[i].namespace;
	            recipientNode['x-attribsPrefix'][attrName] = attrs[i].prefix;
	        }
	    }
	};
	
	
	//Tree traversing
	exports.getFirstChild = function (node) {
	    return node.children[0];
	};
	
	exports.getChildNodes = function (node) {
	    return node.children;
	};
	
	exports.getParentNode = function (node) {
	    return node.parent;
	};
	
	exports.getAttrList = function (node) {
	    var attrList = [];
	
	    for (var name in node.attribs) {
	        if (node.attribs.hasOwnProperty(name)) {
	            attrList.push({
	                name: name,
	                value: node.attribs[name],
	                namespace: node['x-attribsNamespace'][name],
	                prefix: node['x-attribsPrefix'][name]
	            });
	        }
	    }
	
	    return attrList;
	};
	
	
	//Node data
	exports.getTagName = function (element) {
	    return element.name;
	};
	
	exports.getNamespaceURI = function (element) {
	    return element.namespace;
	};
	
	exports.getTextNodeContent = function (textNode) {
	    return textNode.data;
	};
	
	exports.getCommentNodeContent = function (commentNode) {
	    return commentNode.data;
	};
	
	exports.getDocumentTypeNodeName = function (doctypeNode) {
	    return doctypeNode['x-name'];
	};
	
	exports.getDocumentTypeNodePublicId = function (doctypeNode) {
	    return doctypeNode['x-publicId'];
	};
	
	exports.getDocumentTypeNodeSystemId = function (doctypeNode) {
	    return doctypeNode['x-systemId'];
	};
	
	
	//Node types
	exports.isTextNode = function (node) {
	    return node.type === 'text';
	};
	
	exports.isCommentNode = function (node) {
	    return node.type === 'comment';
	};
	
	exports.isDocumentTypeNode = function (node) {
	    return node.type === 'directive' && node.name === '!doctype';
	};
	
	exports.isElementNode = function (node) {
	    return !!node.attribs;
	};


/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var WritableStream = __webpack_require__(317).Writable,
	    inherits = __webpack_require__(318).inherits,
	    Parser = __webpack_require__(300);
	
	/**
	 * Streaming HTML parser with scripting support.
	 * A [writable stream]{@link https://nodejs.org/api/stream.html#stream_class_stream_writable}.
	 * @class ParserStream
	 * @memberof parse5
	 * @instance
	 * @extends stream.Writable
	 * @param {ParserOptions} options - Parsing options.
	 * @example
	 * var parse5 = require('parse5');
	 * var http = require('http');
	 *
	 * // Fetch the google.com content and obtain it's <body> node
	 * http.get('http://google.com', function(res) {
	 *  var parser = new parse5.ParserStream();
	 *
	 *  parser.on('finish', function() {
	 *      var body = parser.document.childNodes[0].childNodes[1];
	 *  });
	 *
	 *  res.pipe(parser);
	 * });
	 */
	var ParserStream = module.exports = function (options) {
	    WritableStream.call(this);
	
	    this.parser = new Parser(options);
	
	    this.lastChunkWritten = false;
	    this.writeCallback = null;
	    this.pausedByScript = false;
	
	    /**
	     * The resulting document node.
	     * @member {ASTNode<document>} document
	     * @memberof parse5#ParserStream
	     * @instance
	     */
	    this.document = this.parser.treeAdapter.createDocument();
	
	    this.pendingHtmlInsertions = [];
	
	    this._resume = this._resume.bind(this);
	    this._documentWrite = this._documentWrite.bind(this);
	    this._scriptHandler = this._scriptHandler.bind(this);
	
	    this.parser._bootstrap(this.document, null);
	};
	
	inherits(ParserStream, WritableStream);
	
	//WritableStream implementation
	ParserStream.prototype._write = function (chunk, encoding, callback) {
	    this.writeCallback = callback;
	    this.parser.tokenizer.write(chunk.toString('utf8'), this.lastChunkWritten);
	    this._runParsingLoop();
	};
	
	ParserStream.prototype.end = function (chunk, encoding, callback) {
	    this.lastChunkWritten = true;
	    WritableStream.prototype.end.call(this, chunk, encoding, callback);
	};
	
	//Scriptable parser implementation
	ParserStream.prototype._runParsingLoop = function () {
	    this.parser._runParsingLoop(this.writeCallback, this._scriptHandler);
	};
	
	ParserStream.prototype._resume = function () {
	    if (!this.pausedByScript)
	        throw new Error('Parser was already resumed');
	
	    while (this.pendingHtmlInsertions.length) {
	        var html = this.pendingHtmlInsertions.pop();
	
	        this.parser.tokenizer.insertHtmlAtCurrentPos(html);
	    }
	
	    this.pausedByScript = false;
	
	    //NOTE: keep parsing if we don't wait for the next input chunk
	    if (this.parser.tokenizer.active)
	        this._runParsingLoop();
	};
	
	ParserStream.prototype._documentWrite = function (html) {
	    if (!this.parser.stopped)
	        this.pendingHtmlInsertions.push(html);
	};
	
	ParserStream.prototype._scriptHandler = function (scriptElement) {
	    if (this.listeners('script').length) {
	        this.pausedByScript = true;
	
	        /**
	         * Raised then parser encounters a `<script>` element.
	         * If this event has listeners, parsing will be suspended once it is emitted.
	         * So, if `<script>` has the `src` attribute, you can fetch it, execute and then resume parsing just like browsers do.
	         * @event script
	         * @memberof parse5#ParserStream
	         * @instance
	         * @type {Function}
	         * @param {ASTNode} scriptElement - The script element that caused the event.
	         * @param {Function} documentWrite(html) - Write additional `html` at the current parsing position.
	         *  Suitable for implementing the DOM `document.write` and `document.writeln` methods.
	         * @param {Function} resume - Resumes parsing.
	         * @example
	         * var parse = require('parse5');
	         * var http = require('http');
	         *
	         * var parser = new parse5.ParserStream();
	         *
	         * parser.on('script', function(scriptElement, documentWrite, resume) {
	         *   var src = parse5.treeAdapters.default.getAttrList(scriptElement)[0].value;
	         *
	         *   http.get(src, function(res) {
	         *      // Fetch the script content, execute it with DOM built around `parser.document` and
	         *      // `document.write` implemented using `documentWrite`.
	         *      ...
	         *      // Then resume parsing.
	         *      resume();
	         *   });
	         * });
	         *
	         * parser.end('<script src="example.com/script.js"></script>');
	         */
	
	
	        this.emit('script', scriptElement, this._documentWrite, this._resume);
	    }
	    else
	        this._runParsingLoop();
	};
	


/***/ },
/* 317 */
/***/ function(module, exports) {

	module.exports = require("stream");

/***/ },
/* 318 */
/***/ function(module, exports) {

	module.exports = require("util");

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var ReadableStream = __webpack_require__(317).Readable,
	    inherits = __webpack_require__(318).inherits,
	    Serializer = __webpack_require__(314);
	
	/**
	 * Streaming AST node to an HTML serializer.
	 * A [readable stream]{@link https://nodejs.org/api/stream.html#stream_class_stream_readable}.
	 * @class SerializerStream
	 * @memberof parse5
	 * @instance
	 * @extends stream.Readable
	 * @param {ASTNode} node - Node to serialize.
	 * @param {SerializerOptions} [options] - Serialization options.
	 * @example
	 * var parse5 = require('parse5');
	 * var fs = require('fs');
	 *
	 * var file = fs.createWriteStream('/home/index.html');
	 *
	 * // Serializes the parsed document to HTML and writes it to the file.
	 * var document = parse5.parse('<body>Who is John Galt?</body>');
	 * var serializer = new parse5.SerializerStream(document);
	 *
	 * serializer.pipe(file);
	 */
	var SerializerStream = module.exports = function (node, options) {
	    ReadableStream.call(this);
	
	    this.serializer = new Serializer(node, options);
	
	    Object.defineProperty(this.serializer, 'html', {
	        //NOTE: To make `+=` concat operator work properly we define
	        //getter which always returns empty string
	        get: function () {
	            return '';
	        },
	        set: this.push.bind(this)
	    });
	};
	
	inherits(SerializerStream, ReadableStream);
	
	//Readable stream implementation
	SerializerStream.prototype._read = function () {
	    this.serializer.serialize();
	    this.push(null);
	};


/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var TransformStream = __webpack_require__(317).Transform,
	    DevNullStream = __webpack_require__(321),
	    inherits = __webpack_require__(318).inherits,
	    Tokenizer = __webpack_require__(301),
	    ParserFeedbackSimulator = __webpack_require__(322),
	    mergeOptions = __webpack_require__(313);
	
	/**
	 * @typedef {Object} SAXParserOptions
	 *
	 * @property {Boolean} [locationInfo=false] - Enables source code location information for the tokens.
	 * When enabled, each token event handler will receive {@link LocationInfo} (or {@link StartTagLocationInfo})
	 * object as its last argument.
	 */
	var DEFAULT_OPTIONS = {
	    locationInfo: false
	};
	
	/**
	 * Streaming [SAX]{@link https://en.wikipedia.org/wiki/Simple_API_for_XML}-style HTML parser.
	 * A [transform stream](https://nodejs.org/api/stream.html#stream_class_stream_transform)
	 * (which means you can pipe *through* it, see example).
	 * @class SAXParser
	 * @memberof parse5
	 * @instance
	 * @extends stream.Transform
	 * @param {SAXParserOptions} options - Parsing options.
	 * @example
	 * var parse5 = require('parse5');
	 * var http = require('http');
	 * var fs = require('fs');
	 *
	 * var file = fs.createWriteStream('/home/google.com.html');
	 * var parser = new parse5.SAXParser();
	 *
	 * parser.on('text', function(text) {
	 *  // Handle page text content
	 *  ...
	 * });
	 *
	 * http.get('http://google.com', function(res) {
	 *  // SAXParser is the Transform stream, which means you can pipe
	 *  // through it. So, you can analyze page content and, e.g., save it
	 *  // to the file at the same time:
	 *  res.pipe(parser).pipe(file);
	 * });
	 */
	var SAXParser = module.exports = function (options) {
	    TransformStream.call(this);
	
	    this.options = mergeOptions(DEFAULT_OPTIONS, options);
	
	    this.tokenizer = new Tokenizer(options);
	    this.parserFeedbackSimulator = new ParserFeedbackSimulator(this.tokenizer);
	
	    this.pendingText = null;
	    this.currentTokenLocation = void 0;
	
	    this.lastChunkWritten = false;
	    this.stopped = false;
	
	    // NOTE: always pipe stream to the /dev/null stream to avoid
	    // `highWaterMark` hit even if we don't have consumers.
	    // (see: https://github.com/inikulin/parse5/issues/97#issuecomment-171940774)
	    this.pipe(new DevNullStream());
	};
	
	inherits(SAXParser, TransformStream);
	
	//TransformStream implementation
	SAXParser.prototype._transform = function (chunk, encoding, callback) {
	    if (!this.stopped) {
	        this.tokenizer.write(chunk.toString('utf8'), this.lastChunkWritten);
	        this._runParsingLoop();
	    }
	
	    this.push(chunk);
	
	    callback();
	};
	
	SAXParser.prototype._flush = function (callback) {
	    callback();
	};
	
	SAXParser.prototype.end = function (chunk, encoding, callback) {
	    this.lastChunkWritten = true;
	    TransformStream.prototype.end.call(this, chunk, encoding, callback);
	};
	
	/**
	 * Stops parsing. Useful if you want the parser to stop consuming CPU time once you've obtained the desired info
	 * from the input stream. Doesn't prevent piping, so that data will flow through the parser as usual.
	 *
	 * @function stop
	 * @memberof parse5#SAXParser
	 * @instance
	 * @example
	 * var parse5 = require('parse5');
	 * var http = require('http');
	 * var fs = require('fs');
	 *
	 * var file = fs.createWriteStream('/home/google.com.html');
	 * var parser = new parse5.SAXParser();
	 *
	 * parser.on('doctype', function(name, publicId, systemId) {
	 *  // Process doctype info ans stop parsing
	 *  ...
	 *  parser.stop();
	 * });
	 *
	 * http.get('http://google.com', function(res) {
	 *  // Despite the fact that parser.stop() was called whole
	 *  // content of the page will be written to the file
	 *  res.pipe(parser).pipe(file);
	 * });
	 */
	SAXParser.prototype.stop = function () {
	    this.stopped = true;
	};
	
	//Internals
	SAXParser.prototype._runParsingLoop = function () {
	    do {
	        var token = this.parserFeedbackSimulator.getNextToken();
	
	        if (token.type === Tokenizer.HIBERNATION_TOKEN)
	            break;
	
	        if (token.type === Tokenizer.CHARACTER_TOKEN ||
	            token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN ||
	            token.type === Tokenizer.NULL_CHARACTER_TOKEN) {
	
	            if (this.options.locationInfo) {
	                if (this.pendingText === null)
	                    this.currentTokenLocation = token.location;
	
	                else
	                    this.currentTokenLocation.endOffset = token.location.endOffset;
	            }
	
	            this.pendingText = (this.pendingText || '') + token.chars;
	        }
	
	        else {
	            this._emitPendingText();
	            this._handleToken(token);
	        }
	    } while (!this.stopped && token.type !== Tokenizer.EOF_TOKEN);
	};
	
	SAXParser.prototype._handleToken = function (token) {
	    if (this.options.locationInfo)
	        this.currentTokenLocation = token.location;
	
	    if (token.type === Tokenizer.START_TAG_TOKEN)
	        /**
	         * Raised when the parser encounters a start tag.
	         * @event startTag
	         * @memberof parse5#SAXParser
	         * @instance
	         * @type {Function}
	         * @param {String} name - Tag name.
	         * @param {Array} attrs - List of attributes in the `{ name: String, value: String, prefix?: String }` form.
	         * @param {Boolean} selfClosing - Indicates if the tag is self-closing.
	         * @param {StartTagLocationInfo} [location] - Start tag source code location info.
	         * Available if location info is enabled in {@link SAXParserOptions}.
	         */
	        this.emit('startTag', token.tagName, token.attrs, token.selfClosing, this.currentTokenLocation);
	
	    else if (token.type === Tokenizer.END_TAG_TOKEN)
	        /**
	         * Raised then parser encounters an end tag.
	         * @event endTag
	         * @memberof parse5#SAXParser
	         * @instance
	         * @type {Function}
	         * @param {String} name - Tag name.
	         * @param {LocationInfo} [location] - End tag source code location info.
	         * Available if location info is enabled in {@link SAXParserOptions}.
	         */
	        this.emit('endTag', token.tagName, this.currentTokenLocation);
	
	    else if (token.type === Tokenizer.COMMENT_TOKEN)
	        /**
	         * Raised then parser encounters a comment.
	         * @event comment
	         * @memberof parse5#SAXParser
	         * @instance
	         * @type {Function}
	         * @param {String} text - Comment text.
	         * @param {LocationInfo} [location] - Comment source code location info.
	         * Available if location info is enabled in {@link SAXParserOptions}.
	         */
	        this.emit('comment', token.data, this.currentTokenLocation);
	
	    else if (token.type === Tokenizer.DOCTYPE_TOKEN)
	        /**
	         * Raised then parser encounters a [document type declaration]{@link https://en.wikipedia.org/wiki/Document_type_declaration}.
	         * @event doctype
	         * @memberof parse5#SAXParser
	         * @instance
	         * @type {Function}
	         * @param {String} name - Document type name.
	         * @param {String} publicId - Document type public identifier.
	         * @param {String} systemId - Document type system identifier.
	         * @param {LocationInfo} [location] - Document type declaration source code location info.
	         * Available if location info is enabled in {@link SAXParserOptions}.
	         */
	        this.emit('doctype', token.name, token.publicId, token.systemId, this.currentTokenLocation);
	};
	
	SAXParser.prototype._emitPendingText = function () {
	    if (this.pendingText !== null) {
	        /**
	         * Raised then parser encounters text content.
	         * @event text
	         * @memberof parse5#SAXParser
	         * @instance
	         * @type {Function}
	         * @param {String} text - Text content.
	         * @param {LocationInfo} [location] - Text content code location info.
	         * Available if location info is enabled in {@link SAXParserOptions}.
	         */
	        this.emit('text', this.pendingText, this.currentTokenLocation);
	        this.pendingText = null;
	    }
	};


/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var WritableStream = __webpack_require__(317).Writable,
	    util = __webpack_require__(318);
	
	var DevNullStream = module.exports = function () {
	    WritableStream.call(this);
	};
	
	util.inherits(DevNullStream, WritableStream);
	
	DevNullStream.prototype._write = function (chunk, encoding, cb) {
	    cb();
	};


/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Tokenizer = __webpack_require__(301),
	    foreignContent = __webpack_require__(312),
	    UNICODE = __webpack_require__(303),
	    HTML = __webpack_require__(307);
	
	
	//Aliases
	var $ = HTML.TAG_NAMES,
	    NS = HTML.NAMESPACES;
	
	
	//ParserFeedbackSimulator
	//Simulates adjustment of the Tokenizer which performed by standard parser during tree construction.
	var ParserFeedbackSimulator = module.exports = function (tokenizer) {
	    this.tokenizer = tokenizer;
	
	    this.namespaceStack = [];
	    this.namespaceStackTop = -1;
	    this._enterNamespace(NS.HTML);
	};
	
	ParserFeedbackSimulator.prototype.getNextToken = function () {
	    var token = this.tokenizer.getNextToken();
	
	    if (token.type === Tokenizer.START_TAG_TOKEN)
	        this._handleStartTagToken(token);
	
	    else if (token.type === Tokenizer.END_TAG_TOKEN)
	        this._handleEndTagToken(token);
	
	    else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN && this.inForeignContent) {
	        token.type = Tokenizer.CHARACTER_TOKEN;
	        token.chars = UNICODE.REPLACEMENT_CHARACTER;
	    }
	
	    else if (this.skipNextNewLine) {
	        if (token.type !== Tokenizer.HIBERNATION_TOKEN)
	            this.skipNextNewLine = false;
	
	        if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === '\n') {
	            if (token.chars.length === 1)
	                return this.getNextToken();
	
	            token.chars = token.chars.substr(1);
	        }
	    }
	
	    return token;
	};
	
	//Namespace stack mutations
	ParserFeedbackSimulator.prototype._enterNamespace = function (namespace) {
	    this.namespaceStackTop++;
	    this.namespaceStack.push(namespace);
	
	    this.inForeignContent = namespace !== NS.HTML;
	    this.currentNamespace = namespace;
	    this.tokenizer.allowCDATA = this.inForeignContent;
	};
	
	ParserFeedbackSimulator.prototype._leaveCurrentNamespace = function () {
	    this.namespaceStackTop--;
	    this.namespaceStack.pop();
	
	    this.currentNamespace = this.namespaceStack[this.namespaceStackTop];
	    this.inForeignContent = this.currentNamespace !== NS.HTML;
	    this.tokenizer.allowCDATA = this.inForeignContent;
	};
	
	//Token handlers
	ParserFeedbackSimulator.prototype._ensureTokenizerMode = function (tn) {
	    if (tn === $.TEXTAREA || tn === $.TITLE)
	        this.tokenizer.state = Tokenizer.MODE.RCDATA;
	
	    else if (tn === $.PLAINTEXT)
	        this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
	
	    else if (tn === $.SCRIPT)
	        this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;
	
	    else if (tn === $.STYLE || tn === $.IFRAME || tn === $.XMP ||
	             tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT)
	        this.tokenizer.state = Tokenizer.MODE.RAWTEXT;
	};
	
	ParserFeedbackSimulator.prototype._handleStartTagToken = function (token) {
	    var tn = token.tagName;
	
	    if (tn === $.SVG)
	        this._enterNamespace(NS.SVG);
	
	    else if (tn === $.MATH)
	        this._enterNamespace(NS.MATHML);
	
	    if (this.inForeignContent) {
	        if (foreignContent.causesExit(token)) {
	            this._leaveCurrentNamespace();
	            return;
	        }
	
	        var currentNs = this.currentNamespace;
	
	        if (currentNs === NS.MATHML)
	            foreignContent.adjustTokenMathMLAttrs(token);
	
	        else if (currentNs === NS.SVG) {
	            foreignContent.adjustTokenSVGTagName(token);
	            foreignContent.adjustTokenSVGAttrs(token);
	        }
	
	        foreignContent.adjustTokenXMLAttrs(token);
	
	        tn = token.tagName;
	
	        if (!token.selfClosing && foreignContent.isIntegrationPoint(tn, currentNs, token.attrs))
	            this._enterNamespace(NS.HTML);
	    }
	
	    else {
	        if (tn === $.PRE || tn === $.TEXTAREA || tn === $.LISTING)
	            this.skipNextNewLine = true;
	
	        else if (tn === $.IMAGE)
	            token.tagName = $.IMG;
	
	        this._ensureTokenizerMode(tn);
	    }
	};
	
	ParserFeedbackSimulator.prototype._handleEndTagToken = function (token) {
	    var tn = token.tagName;
	
	    if (!this.inForeignContent) {
	        var previousNs = this.namespaceStack[this.namespaceStackTop - 1];
	
	        if (previousNs === NS.SVG && foreignContent.SVG_TAG_NAMES_ADJUSTMENT_MAP[tn])
	            tn = foreignContent.SVG_TAG_NAMES_ADJUSTMENT_MAP[tn];
	
	        //NOTE: check for exit from integration point
	        if (foreignContent.isIntegrationPoint(tn, previousNs, token.attrs))
	            this._leaveCurrentNamespace();
	    }
	
	    else if (tn === $.SVG && this.currentNamespace === NS.SVG ||
	             tn === $.MATH && this.currentNamespace === NS.MATHML)
	        this._leaveCurrentNamespace();
	
	    // NOTE: adjust end tag name as well for consistency
	    if (this.currentNamespace === NS.SVG)
	        foreignContent.adjustTokenSVGTagName(token);
	};


/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
	The following batches are equivalent:
	
	var beautify_js = require('js-beautify');
	var beautify_js = require('js-beautify').js;
	var beautify_js = require('js-beautify').js_beautify;
	
	var beautify_css = require('js-beautify').css;
	var beautify_css = require('js-beautify').css_beautify;
	
	var beautify_html = require('js-beautify').html;
	var beautify_html = require('js-beautify').html_beautify;
	
	All methods returned accept two arguments, the source string and an options object.
	**/
	
	function get_beautify(js_beautify, css_beautify, html_beautify) {
	    // the default is js
	    var beautify = function(src, config) {
	        return js_beautify.js_beautify(src, config);
	    };
	
	    // short aliases
	    beautify.js = js_beautify.js_beautify;
	    beautify.css = css_beautify.css_beautify;
	    beautify.html = html_beautify.html_beautify;
	
	    // legacy aliases
	    beautify.js_beautify = js_beautify.js_beautify;
	    beautify.css_beautify = css_beautify.css_beautify;
	    beautify.html_beautify = html_beautify.html_beautify;
	
	    return beautify;
	}
	
	if (true) {
	    // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(324),
	        __webpack_require__(325),
	        __webpack_require__(326)
	    ], __WEBPACK_AMD_DEFINE_RESULT__ = function(js_beautify, css_beautify, html_beautify) {
	        return get_beautify(js_beautify, css_beautify, html_beautify);
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
	    (function(mod) {
	        var js_beautify = require('./lib/beautify');
	        var css_beautify = require('./lib/beautify-css');
	        var html_beautify = require('./lib/beautify-html');
	
	        mod.exports = get_beautify(js_beautify, css_beautify, html_beautify);
	
	    })(module);
	}

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */
	/*
	
	  The MIT License (MIT)
	
	  Copyright (c) 2007-2013 Einar Lielmanis and contributors.
	
	  Permission is hereby granted, free of charge, to any person
	  obtaining a copy of this software and associated documentation files
	  (the "Software"), to deal in the Software without restriction,
	  including without limitation the rights to use, copy, modify, merge,
	  publish, distribute, sublicense, and/or sell copies of the Software,
	  and to permit persons to whom the Software is furnished to do so,
	  subject to the following conditions:
	
	  The above copyright notice and this permission notice shall be
	  included in all copies or substantial portions of the Software.
	
	  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
	  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	  SOFTWARE.
	
	 JS Beautifier
	---------------
	
	
	  Written by Einar Lielmanis, <einar@jsbeautifier.org>
	      http://jsbeautifier.org/
	
	  Originally converted to javascript by Vital, <vital76@gmail.com>
	  "End braces on own line" added by Chris J. Shull, <chrisjshull@gmail.com>
	  Parsing improvements for brace-less statements by Liam Newman <bitwiseman@gmail.com>
	
	
	  Usage:
	    js_beautify(js_source_text);
	    js_beautify(js_source_text, options);
	
	  The options are:
	    indent_size (default 4)          - indentation size,
	    indent_char (default space)      - character to indent with,
	    preserve_newlines (default true) - whether existing line breaks should be preserved,
	    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk,
	
	    jslint_happy (default false) - if true, then jslint-stricter mode is enforced.
	
	            jslint_happy        !jslint_happy
	            ---------------------------------
	            function ()         function()
	
	            switch () {         switch() {
	            case 1:               case 1:
	              break;                break;
	            }                   }
	
	    space_after_anon_function (default false) - should the space before an anonymous function's parens be added, "function()" vs "function ()",
	          NOTE: This option is overriden by jslint_happy (i.e. if jslint_happy is true, space_after_anon_function is true by design)
	
	    brace_style (default "collapse") - "collapse-preserve-inline" | "collapse" | "expand" | "end-expand" | "none"
	            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.
	
	    space_before_conditional (default true) - should the space before conditional statement be added, "if(true)" vs "if (true)",
	
	    unescape_strings (default false) - should printable characters in strings encoded in \xNN notation be unescaped, "example" vs "\x65\x78\x61\x6d\x70\x6c\x65"
	
	    wrap_line_length (default unlimited) - lines should wrap at next opportunity after this number of characters.
	          NOTE: This is not a hard limit. Lines will continue until a point where a newline would
	                be preserved if it were present.
	
	    end_with_newline (default false)  - end output with a newline
	
	
	    e.g
	
	    js_beautify(js_source_text, {
	      'indent_size': 1,
	      'indent_char': '\t'
	    });
	
	*/
	
	// Object.values polyfill found here:
	// http://tokenposts.blogspot.com.au/2012/04/javascript-objectkeys-browser.html
	if (!Object.values) {
	    Object.values = function(o) {
	        if (o !== Object(o)) {
	            throw new TypeError('Object.values called on a non-object');
	        }
	        var k = [],
	            p;
	        for (p in o) {
	            if (Object.prototype.hasOwnProperty.call(o, p)) {
	                k.push(o[p]);
	            }
	        }
	        return k;
	    };
	}
	
	(function() {
	
	    function js_beautify(js_source_text, options) {
	
	        var acorn = {};
	        (function(exports) {
	            /* jshint curly: false */
	            // This section of code is taken from acorn.
	            //
	            // Acorn was written by Marijn Haverbeke and released under an MIT
	            // license. The Unicode regexps (for identifiers and whitespace) were
	            // taken from [Esprima](http://esprima.org) by Ariya Hidayat.
	            //
	            // Git repositories for Acorn are available at
	            //
	            //     http://marijnhaverbeke.nl/git/acorn
	            //     https://github.com/marijnh/acorn.git
	
	            // ## Character categories
	
	            // Big ugly regular expressions that match characters in the
	            // whitespace, identifier, and identifier-start categories. These
	            // are only applied when a character is found to actually have a
	            // code point above 128.
	
	            var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/; // jshint ignore:line
	            var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
	            var nonASCIIidentifierChars = "\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u0620-\u0649\u0672-\u06d3\u06e7-\u06e8\u06fb-\u06fc\u0730-\u074a\u0800-\u0814\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0840-\u0857\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962-\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09d7\u09df-\u09e0\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5f-\u0b60\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2-\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d46-\u0d48\u0d57\u0d62-\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e34-\u0e3a\u0e40-\u0e45\u0e50-\u0e59\u0eb4-\u0eb9\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f41-\u0f47\u0f71-\u0f84\u0f86-\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1029\u1040-\u1049\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u170e-\u1710\u1720-\u1730\u1740-\u1750\u1772\u1773\u1780-\u17b2\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1920-\u192b\u1930-\u193b\u1951-\u196d\u19b0-\u19c0\u19c8-\u19c9\u19d0-\u19d9\u1a00-\u1a15\u1a20-\u1a53\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b46-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1bb0-\u1bb9\u1be6-\u1bf3\u1c00-\u1c22\u1c40-\u1c49\u1c5b-\u1c7d\u1cd0-\u1cd2\u1d00-\u1dbe\u1e01-\u1f15\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2d81-\u2d96\u2de0-\u2dff\u3021-\u3028\u3099\u309a\ua640-\ua66d\ua674-\ua67d\ua69f\ua6f0-\ua6f1\ua7f8-\ua800\ua806\ua80b\ua823-\ua827\ua880-\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8f3-\ua8f7\ua900-\ua909\ua926-\ua92d\ua930-\ua945\ua980-\ua983\ua9b3-\ua9c0\uaa00-\uaa27\uaa40-\uaa41\uaa4c-\uaa4d\uaa50-\uaa59\uaa7b\uaae0-\uaae9\uaaf2-\uaaf3\uabc0-\uabe1\uabec\uabed\uabf0-\uabf9\ufb20-\ufb28\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
	            var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
	            var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
	
	            // Whether a single character denotes a newline.
	
	            exports.newline = /[\n\r\u2028\u2029]/;
	
	            // Matches a whole line break (where CRLF is considered a single
	            // line break). Used to count lines.
	
	            // in javascript, these two differ
	            // in python they are the same, different methods are called on them
	            exports.lineBreak = new RegExp('\r\n|' + exports.newline.source);
	            exports.allLineBreaks = new RegExp(exports.lineBreak.source, 'g');
	
	
	            // Test whether a given character code starts an identifier.
	
	            exports.isIdentifierStart = function(code) {
	                // permit $ (36) and @ (64). @ is used in ES7 decorators.
	                if (code < 65) return code === 36 || code === 64;
	                // 65 through 91 are uppercase letters.
	                if (code < 91) return true;
	                // permit _ (95).
	                if (code < 97) return code === 95;
	                // 97 through 123 are lowercase letters.
	                if (code < 123) return true;
	                return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
	            };
	
	            // Test whether a given character is part of an identifier.
	
	            exports.isIdentifierChar = function(code) {
	                if (code < 48) return code === 36;
	                if (code < 58) return true;
	                if (code < 65) return false;
	                if (code < 91) return true;
	                if (code < 97) return code === 95;
	                if (code < 123) return true;
	                return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
	            };
	        })(acorn);
	        /* jshint curly: true */
	
	        function in_array(what, arr) {
	            for (var i = 0; i < arr.length; i += 1) {
	                if (arr[i] === what) {
	                    return true;
	                }
	            }
	            return false;
	        }
	
	        function trim(s) {
	            return s.replace(/^\s+|\s+$/g, '');
	        }
	
	        function ltrim(s) {
	            return s.replace(/^\s+/g, '');
	        }
	
	        // function rtrim(s) {
	        //     return s.replace(/\s+$/g, '');
	        // }
	
	        function sanitizeOperatorPosition(opPosition) {
	            opPosition = opPosition || OPERATOR_POSITION.before_newline;
	
	            var validPositionValues = Object.values(OPERATOR_POSITION);
	
	            if (!in_array(opPosition, validPositionValues)) {
	                throw new Error("Invalid Option Value: The option 'operator_position' must be one of the following values\n" +
	                    validPositionValues +
	                    "\nYou passed in: '" + opPosition + "'");
	            }
	
	            return opPosition;
	        }
	
	        var OPERATOR_POSITION = {
	            before_newline: 'before-newline',
	            after_newline: 'after-newline',
	            preserve_newline: 'preserve-newline',
	        };
	
	        var OPERATOR_POSITION_BEFORE_OR_PRESERVE = [OPERATOR_POSITION.before_newline, OPERATOR_POSITION.preserve_newline];
	
	        var MODE = {
	            BlockStatement: 'BlockStatement', // 'BLOCK'
	            Statement: 'Statement', // 'STATEMENT'
	            ObjectLiteral: 'ObjectLiteral', // 'OBJECT',
	            ArrayLiteral: 'ArrayLiteral', //'[EXPRESSION]',
	            ForInitializer: 'ForInitializer', //'(FOR-EXPRESSION)',
	            Conditional: 'Conditional', //'(COND-EXPRESSION)',
	            Expression: 'Expression' //'(EXPRESSION)'
	        };
	
	        function Beautifier(js_source_text, options) {
	            "use strict";
	            var output;
	            var tokens = [],
	                token_pos;
	            var Tokenizer;
	            var current_token;
	            var last_type, last_last_text, indent_string;
	            var flags, previous_flags, flag_store;
	            var prefix;
	
	            var handlers, opt;
	            var baseIndentString = '';
	
	            handlers = {
	                'TK_START_EXPR': handle_start_expr,
	                'TK_END_EXPR': handle_end_expr,
	                'TK_START_BLOCK': handle_start_block,
	                'TK_END_BLOCK': handle_end_block,
	                'TK_WORD': handle_word,
	                'TK_RESERVED': handle_word,
	                'TK_SEMICOLON': handle_semicolon,
	                'TK_STRING': handle_string,
	                'TK_EQUALS': handle_equals,
	                'TK_OPERATOR': handle_operator,
	                'TK_COMMA': handle_comma,
	                'TK_BLOCK_COMMENT': handle_block_comment,
	                'TK_COMMENT': handle_comment,
	                'TK_DOT': handle_dot,
	                'TK_UNKNOWN': handle_unknown,
	                'TK_EOF': handle_eof
	            };
	
	            function create_flags(flags_base, mode) {
	                var next_indent_level = 0;
	                if (flags_base) {
	                    next_indent_level = flags_base.indentation_level;
	                    if (!output.just_added_newline() &&
	                        flags_base.line_indent_level > next_indent_level) {
	                        next_indent_level = flags_base.line_indent_level;
	                    }
	                }
	
	                var next_flags = {
	                    mode: mode,
	                    parent: flags_base,
	                    last_text: flags_base ? flags_base.last_text : '', // last token text
	                    last_word: flags_base ? flags_base.last_word : '', // last 'TK_WORD' passed
	                    declaration_statement: false,
	                    declaration_assignment: false,
	                    multiline_frame: false,
	                    inline_frame: false,
	                    if_block: false,
	                    else_block: false,
	                    do_block: false,
	                    do_while: false,
	                    import_block: false,
	                    in_case_statement: false, // switch(..){ INSIDE HERE }
	                    in_case: false, // we're on the exact line with "case 0:"
	                    case_body: false, // the indented case-action block
	                    indentation_level: next_indent_level,
	                    line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,
	                    start_line_index: output.get_line_number(),
	                    ternary_depth: 0
	                };
	                return next_flags;
	            }
	
	            // Some interpreters have unexpected results with foo = baz || bar;
	            options = options ? options : {};
	            opt = {};
	
	            // compatibility
	            if (options.braces_on_own_line !== undefined) { //graceful handling of deprecated option
	                opt.brace_style = options.braces_on_own_line ? "expand" : "collapse";
	            }
	            opt.brace_style = options.brace_style ? options.brace_style : (opt.brace_style ? opt.brace_style : "collapse");
	
	            // graceful handling of deprecated option
	            if (opt.brace_style === "expand-strict") {
	                opt.brace_style = "expand";
	            }
	
	            opt.indent_size = options.indent_size ? parseInt(options.indent_size, 10) : 4;
	            opt.indent_char = options.indent_char ? options.indent_char : ' ';
	            opt.eol = options.eol ? options.eol : 'auto';
	            opt.preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;
	            opt.break_chained_methods = (options.break_chained_methods === undefined) ? false : options.break_chained_methods;
	            opt.max_preserve_newlines = (options.max_preserve_newlines === undefined) ? 0 : parseInt(options.max_preserve_newlines, 10);
	            opt.space_in_paren = (options.space_in_paren === undefined) ? false : options.space_in_paren;
	            opt.space_in_empty_paren = (options.space_in_empty_paren === undefined) ? false : options.space_in_empty_paren;
	            opt.jslint_happy = (options.jslint_happy === undefined) ? false : options.jslint_happy;
	            opt.space_after_anon_function = (options.space_after_anon_function === undefined) ? false : options.space_after_anon_function;
	            opt.keep_array_indentation = (options.keep_array_indentation === undefined) ? false : options.keep_array_indentation;
	            opt.space_before_conditional = (options.space_before_conditional === undefined) ? true : options.space_before_conditional;
	            opt.unescape_strings = (options.unescape_strings === undefined) ? false : options.unescape_strings;
	            opt.wrap_line_length = (options.wrap_line_length === undefined) ? 0 : parseInt(options.wrap_line_length, 10);
	            opt.e4x = (options.e4x === undefined) ? false : options.e4x;
	            opt.end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;
	            opt.comma_first = (options.comma_first === undefined) ? false : options.comma_first;
	            opt.operator_position = sanitizeOperatorPosition(options.operator_position);
	
	            // For testing of beautify ignore:start directive
	            opt.test_output_raw = (options.test_output_raw === undefined) ? false : options.test_output_raw;
	
	            // force opt.space_after_anon_function to true if opt.jslint_happy
	            if (opt.jslint_happy) {
	                opt.space_after_anon_function = true;
	            }
	
	            if (options.indent_with_tabs) {
	                opt.indent_char = '\t';
	                opt.indent_size = 1;
	            }
	
	            if (opt.eol === 'auto') {
	                opt.eol = '\n';
	                if (js_source_text && acorn.lineBreak.test(js_source_text || '')) {
	                    opt.eol = js_source_text.match(acorn.lineBreak)[0];
	                }
	            }
	
	            opt.eol = opt.eol.replace(/\\r/, '\r').replace(/\\n/, '\n');
	
	            //----------------------------------
	            indent_string = '';
	            while (opt.indent_size > 0) {
	                indent_string += opt.indent_char;
	                opt.indent_size -= 1;
	            }
	
	            var preindent_index = 0;
	            if (js_source_text && js_source_text.length) {
	                while ((js_source_text.charAt(preindent_index) === ' ' ||
	                        js_source_text.charAt(preindent_index) === '\t')) {
	                    baseIndentString += js_source_text.charAt(preindent_index);
	                    preindent_index += 1;
	                }
	                js_source_text = js_source_text.substring(preindent_index);
	            }
	
	            last_type = 'TK_START_BLOCK'; // last token type
	            last_last_text = ''; // pre-last token text
	            output = new Output(indent_string, baseIndentString);
	
	            // If testing the ignore directive, start with output disable set to true
	            output.raw = opt.test_output_raw;
	
	
	            // Stack of parsing/formatting states, including MODE.
	            // We tokenize, parse, and output in an almost purely a forward-only stream of token input
	            // and formatted output.  This makes the beautifier less accurate than full parsers
	            // but also far more tolerant of syntax errors.
	            //
	            // For example, the default mode is MODE.BlockStatement. If we see a '{' we push a new frame of type
	            // MODE.BlockStatement on the the stack, even though it could be object literal.  If we later
	            // encounter a ":", we'll switch to to MODE.ObjectLiteral.  If we then see a ";",
	            // most full parsers would die, but the beautifier gracefully falls back to
	            // MODE.BlockStatement and continues on.
	            flag_store = [];
	            set_mode(MODE.BlockStatement);
	
	            this.beautify = function() {
	
	                /*jshint onevar:true */
	                var local_token, sweet_code;
	                Tokenizer = new tokenizer(js_source_text, opt, indent_string);
	                tokens = Tokenizer.tokenize();
	                token_pos = 0;
	
	                function get_local_token() {
	                    local_token = get_token();
	                    return local_token;
	                }
	
	                while (get_local_token()) {
	                    for (var i = 0; i < local_token.comments_before.length; i++) {
	                        // The cleanest handling of inline comments is to treat them as though they aren't there.
	                        // Just continue formatting and the behavior should be logical.
	                        // Also ignore unknown tokens.  Again, this should result in better behavior.
	                        handle_token(local_token.comments_before[i]);
	                    }
	                    handle_token(local_token);
	
	                    last_last_text = flags.last_text;
	                    last_type = local_token.type;
	                    flags.last_text = local_token.text;
	
	                    token_pos += 1;
	                }
	
	                sweet_code = output.get_code();
	                if (opt.end_with_newline) {
	                    sweet_code += '\n';
	                }
	
	                if (opt.eol !== '\n') {
	                    sweet_code = sweet_code.replace(/[\n]/g, opt.eol);
	                }
	
	                return sweet_code;
	            };
	
	            function handle_token(local_token) {
	                var newlines = local_token.newlines;
	                var keep_whitespace = opt.keep_array_indentation && is_array(flags.mode);
	
	                if (keep_whitespace) {
	                    for (var i = 0; i < newlines; i += 1) {
	                        print_newline(i > 0);
	                    }
	                } else {
	                    if (opt.max_preserve_newlines && newlines > opt.max_preserve_newlines) {
	                        newlines = opt.max_preserve_newlines;
	                    }
	
	                    if (opt.preserve_newlines) {
	                        if (local_token.newlines > 1) {
	                            print_newline();
	                            for (var j = 1; j < newlines; j += 1) {
	                                print_newline(true);
	                            }
	                        }
	                    }
	                }
	
	                current_token = local_token;
	                handlers[current_token.type]();
	            }
	
	            // we could use just string.split, but
	            // IE doesn't like returning empty strings
	            function split_linebreaks(s) {
	                //return s.split(/\x0d\x0a|\x0a/);
	
	                s = s.replace(acorn.allLineBreaks, '\n');
	                var out = [],
	                    idx = s.indexOf("\n");
	                while (idx !== -1) {
	                    out.push(s.substring(0, idx));
	                    s = s.substring(idx + 1);
	                    idx = s.indexOf("\n");
	                }
	                if (s.length) {
	                    out.push(s);
	                }
	                return out;
	            }
	
	            var newline_restricted_tokens = ['break', 'continue', 'return', 'throw'];
	
	            function allow_wrap_or_preserved_newline(force_linewrap) {
	                force_linewrap = (force_linewrap === undefined) ? false : force_linewrap;
	
	                // Never wrap the first token on a line
	                if (output.just_added_newline()) {
	                    return;
	                }
	
	                var shouldPreserveOrForce = (opt.preserve_newlines && current_token.wanted_newline) || force_linewrap;
	                var operatorLogicApplies = in_array(flags.last_text, Tokenizer.positionable_operators) || in_array(current_token.text, Tokenizer.positionable_operators);
	
	                if (operatorLogicApplies) {
	                    var shouldPrintOperatorNewline = (
	                            in_array(flags.last_text, Tokenizer.positionable_operators) &&
	                            in_array(opt.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)
	                        ) ||
	                        in_array(current_token.text, Tokenizer.positionable_operators);
	                    shouldPreserveOrForce = shouldPreserveOrForce && shouldPrintOperatorNewline;
	                }
	
	                if (shouldPreserveOrForce) {
	                    print_newline(false, true);
	                } else if (opt.wrap_line_length) {
	                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, newline_restricted_tokens)) {
	                        // These tokens should never have a newline inserted
	                        // between them and the following expression.
	                        return;
	                    }
	                    var proposed_line_length = output.current_line.get_character_count() + current_token.text.length +
	                        (output.space_before_token ? 1 : 0);
	                    if (proposed_line_length >= opt.wrap_line_length) {
	                        print_newline(false, true);
	                    }
	                }
	            }
	
	            function print_newline(force_newline, preserve_statement_flags) {
	                if (!preserve_statement_flags) {
	                    if (flags.last_text !== ';' && flags.last_text !== ',' && flags.last_text !== '=' && last_type !== 'TK_OPERATOR') {
	                        while (flags.mode === MODE.Statement && !flags.if_block && !flags.do_block) {
	                            restore_mode();
	                        }
	                    }
	                }
	
	                if (output.add_new_line(force_newline)) {
	                    flags.multiline_frame = true;
	                }
	            }
	
	            function print_token_line_indentation() {
	                if (output.just_added_newline()) {
	                    if (opt.keep_array_indentation && is_array(flags.mode) && current_token.wanted_newline) {
	                        output.current_line.push(current_token.whitespace_before);
	                        output.space_before_token = false;
	                    } else if (output.set_indent(flags.indentation_level)) {
	                        flags.line_indent_level = flags.indentation_level;
	                    }
	                }
	            }
	
	            function print_token(printable_token) {
	                if (output.raw) {
	                    output.add_raw_token(current_token);
	                    return;
	                }
	
	                if (opt.comma_first && last_type === 'TK_COMMA' &&
	                    output.just_added_newline()) {
	                    if (output.previous_line.last() === ',') {
	                        var popped = output.previous_line.pop();
	                        // if the comma was already at the start of the line,
	                        // pull back onto that line and reprint the indentation
	                        if (output.previous_line.is_empty()) {
	                            output.previous_line.push(popped);
	                            output.trim(true);
	                            output.current_line.pop();
	                            output.trim();
	                        }
	
	                        // add the comma in front of the next token
	                        print_token_line_indentation();
	                        output.add_token(',');
	                        output.space_before_token = true;
	                    }
	                }
	
	                printable_token = printable_token || current_token.text;
	                print_token_line_indentation();
	                output.add_token(printable_token);
	            }
	
	            function indent() {
	                flags.indentation_level += 1;
	            }
	
	            function deindent() {
	                if (flags.indentation_level > 0 &&
	                    ((!flags.parent) || flags.indentation_level > flags.parent.indentation_level)) {
	                    flags.indentation_level -= 1;
	
	                }
	            }
	
	            function set_mode(mode) {
	                if (flags) {
	                    flag_store.push(flags);
	                    previous_flags = flags;
	                } else {
	                    previous_flags = create_flags(null, mode);
	                }
	
	                flags = create_flags(previous_flags, mode);
	            }
	
	            function is_array(mode) {
	                return mode === MODE.ArrayLiteral;
	            }
	
	            function is_expression(mode) {
	                return in_array(mode, [MODE.Expression, MODE.ForInitializer, MODE.Conditional]);
	            }
	
	            function restore_mode() {
	                if (flag_store.length > 0) {
	                    previous_flags = flags;
	                    flags = flag_store.pop();
	                    if (previous_flags.mode === MODE.Statement) {
	                        output.remove_redundant_indentation(previous_flags);
	                    }
	                }
	            }
	
	            function start_of_object_property() {
	                return flags.parent.mode === MODE.ObjectLiteral && flags.mode === MODE.Statement && (
	                    (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set'])));
	            }
	
	            function start_of_statement() {
	                if (
	                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') ||
	                    (last_type === 'TK_RESERVED' && flags.last_text === 'do') ||
	                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['return', 'throw']) && !current_token.wanted_newline) ||
	                    (last_type === 'TK_RESERVED' && flags.last_text === 'else' && !(current_token.type === 'TK_RESERVED' && current_token.text === 'if')) ||
	                    (last_type === 'TK_END_EXPR' && (previous_flags.mode === MODE.ForInitializer || previous_flags.mode === MODE.Conditional)) ||
	                    (last_type === 'TK_WORD' && flags.mode === MODE.BlockStatement &&
	                        !flags.in_case &&
	                        !(current_token.text === '--' || current_token.text === '++') &&
	                        last_last_text !== 'function' &&
	                        current_token.type !== 'TK_WORD' && current_token.type !== 'TK_RESERVED') ||
	                    (flags.mode === MODE.ObjectLiteral && (
	                        (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set']))))
	                ) {
	
	                    set_mode(MODE.Statement);
	                    indent();
	
	                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') {
	                        flags.declaration_statement = true;
	                    }
	
	                    // Issue #276:
	                    // If starting a new statement with [if, for, while, do], push to a new line.
	                    // if (a) if (b) if(c) d(); else e(); else f();
	                    if (!start_of_object_property()) {
	                        allow_wrap_or_preserved_newline(
	                            current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['do', 'for', 'if', 'while']));
	                    }
	
	                    return true;
	                }
	                return false;
	            }
	
	            function all_lines_start_with(lines, c) {
	                for (var i = 0; i < lines.length; i++) {
	                    var line = trim(lines[i]);
	                    if (line.charAt(0) !== c) {
	                        return false;
	                    }
	                }
	                return true;
	            }
	
	            function each_line_matches_indent(lines, indent) {
	                var i = 0,
	                    len = lines.length,
	                    line;
	                for (; i < len; i++) {
	                    line = lines[i];
	                    // allow empty lines to pass through
	                    if (line && line.indexOf(indent) !== 0) {
	                        return false;
	                    }
	                }
	                return true;
	            }
	
	            function is_special_word(word) {
	                return in_array(word, ['case', 'return', 'do', 'if', 'throw', 'else']);
	            }
	
	            function get_token(offset) {
	                var index = token_pos + (offset || 0);
	                return (index < 0 || index >= tokens.length) ? null : tokens[index];
	            }
	
	            function handle_start_expr() {
	                if (start_of_statement()) {
	                    // The conditional starts the statement if appropriate.
	                }
	
	                var next_mode = MODE.Expression;
	                if (current_token.text === '[') {
	
	                    if (last_type === 'TK_WORD' || flags.last_text === ')') {
	                        // this is array index specifier, break immediately
	                        // a[x], fn()[x]
	                        if (last_type === 'TK_RESERVED' && in_array(flags.last_text, Tokenizer.line_starters)) {
	                            output.space_before_token = true;
	                        }
	                        set_mode(next_mode);
	                        print_token();
	                        indent();
	                        if (opt.space_in_paren) {
	                            output.space_before_token = true;
	                        }
	                        return;
	                    }
	
	                    next_mode = MODE.ArrayLiteral;
	                    if (is_array(flags.mode)) {
	                        if (flags.last_text === '[' ||
	                            (flags.last_text === ',' && (last_last_text === ']' || last_last_text === '}'))) {
	                            // ], [ goes to new line
	                            // }, [ goes to new line
	                            if (!opt.keep_array_indentation) {
	                                print_newline();
	                            }
	                        }
	                    }
	
	                } else {
	                    if (last_type === 'TK_RESERVED' && flags.last_text === 'for') {
	                        next_mode = MODE.ForInitializer;
	                    } else if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['if', 'while'])) {
	                        next_mode = MODE.Conditional;
	                    } else {
	                        // next_mode = MODE.Expression;
	                    }
	                }
	
	                if (flags.last_text === ';' || last_type === 'TK_START_BLOCK') {
	                    print_newline();
	                } else if (last_type === 'TK_END_EXPR' || last_type === 'TK_START_EXPR' || last_type === 'TK_END_BLOCK' || flags.last_text === '.') {
	                    // TODO: Consider whether forcing this is required.  Review failing tests when removed.
	                    allow_wrap_or_preserved_newline(current_token.wanted_newline);
	                    // do nothing on (( and )( and ][ and ]( and .(
	                } else if (!(last_type === 'TK_RESERVED' && current_token.text === '(') && last_type !== 'TK_WORD' && last_type !== 'TK_OPERATOR') {
	                    output.space_before_token = true;
	                } else if ((last_type === 'TK_RESERVED' && (flags.last_word === 'function' || flags.last_word === 'typeof')) ||
	                    (flags.last_text === '*' &&
	                        (in_array(last_last_text, ['function', 'yield']) ||
	                            (flags.mode === MODE.ObjectLiteral && in_array(last_last_text, ['{', ',']))))) {
	                    // function() vs function ()
	                    // yield*() vs yield* ()
	                    // function*() vs function* ()
	                    if (opt.space_after_anon_function) {
	                        output.space_before_token = true;
	                    }
	                } else if (last_type === 'TK_RESERVED' && (in_array(flags.last_text, Tokenizer.line_starters) || flags.last_text === 'catch')) {
	                    if (opt.space_before_conditional) {
	                        output.space_before_token = true;
	                    }
	                }
	
	                // Should be a space between await and an IIFE
	                if (current_token.text === '(' && last_type === 'TK_RESERVED' && flags.last_word === 'await') {
	                    output.space_before_token = true;
	                }
	
	                // Support of this kind of newline preservation.
	                // a = (b &&
	                //     (c || d));
	                if (current_token.text === '(') {
	                    if (last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {
	                        if (!start_of_object_property()) {
	                            allow_wrap_or_preserved_newline();
	                        }
	                    }
	                }
	
	                // Support preserving wrapped arrow function expressions
	                // a.b('c',
	                //     () => d.e
	                // )
	                if (current_token.text === '(' && last_type !== 'TK_WORD' && last_type !== 'TK_RESERVED') {
	                    allow_wrap_or_preserved_newline();
	                }
	
	                set_mode(next_mode);
	                print_token();
	                if (opt.space_in_paren) {
	                    output.space_before_token = true;
	                }
	
	                // In all cases, if we newline while inside an expression it should be indented.
	                indent();
	            }
	
	            function handle_end_expr() {
	                // statements inside expressions are not valid syntax, but...
	                // statements must all be closed when their container closes
	                while (flags.mode === MODE.Statement) {
	                    restore_mode();
	                }
	
	                if (flags.multiline_frame) {
	                    allow_wrap_or_preserved_newline(current_token.text === ']' && is_array(flags.mode) && !opt.keep_array_indentation);
	                }
	
	                if (opt.space_in_paren) {
	                    if (last_type === 'TK_START_EXPR' && !opt.space_in_empty_paren) {
	                        // () [] no inner space in empty parens like these, ever, ref #320
	                        output.trim();
	                        output.space_before_token = false;
	                    } else {
	                        output.space_before_token = true;
	                    }
	                }
	                if (current_token.text === ']' && opt.keep_array_indentation) {
	                    print_token();
	                    restore_mode();
	                } else {
	                    restore_mode();
	                    print_token();
	                }
	                output.remove_redundant_indentation(previous_flags);
	
	                // do {} while () // no statement required after
	                if (flags.do_while && previous_flags.mode === MODE.Conditional) {
	                    previous_flags.mode = MODE.Expression;
	                    flags.do_block = false;
	                    flags.do_while = false;
	
	                }
	            }
	
	            function handle_start_block() {
	                // Check if this is should be treated as a ObjectLiteral
	                var next_token = get_token(1);
	                var second_token = get_token(2);
	                if (second_token && (
	                        (in_array(second_token.text, [':', ',']) && in_array(next_token.type, ['TK_STRING', 'TK_WORD', 'TK_RESERVED'])) ||
	                        (in_array(next_token.text, ['get', 'set']) && in_array(second_token.type, ['TK_WORD', 'TK_RESERVED']))
	                    )) {
	                    // We don't support TypeScript,but we didn't break it for a very long time.
	                    // We'll try to keep not breaking it.
	                    if (!in_array(last_last_text, ['class', 'interface'])) {
	                        set_mode(MODE.ObjectLiteral);
	                    } else {
	                        set_mode(MODE.BlockStatement);
	                    }
	                } else if (last_type === 'TK_OPERATOR' && flags.last_text === '=>') {
	                    // arrow function: (param1, paramN) => { statements }
	                    set_mode(MODE.BlockStatement);
	                } else if (in_array(last_type, ['TK_EQUALS', 'TK_START_EXPR', 'TK_COMMA', 'TK_OPERATOR']) ||
	                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['return', 'throw', 'import', 'default']))
	                ) {
	                    // Detecting shorthand function syntax is difficult by scanning forward,
	                    //     so check the surrounding context.
	                    // If the block is being returned, imported, export default, passed as arg,
	                    //     assigned with = or assigned in a nested object, treat as an ObjectLiteral.
	                    set_mode(MODE.ObjectLiteral);
	                } else {
	                    set_mode(MODE.BlockStatement);
	                }
	
	                var empty_braces = !next_token.comments_before.length && next_token.text === '}';
	                var empty_anonymous_function = empty_braces && flags.last_word === 'function' &&
	                    last_type === 'TK_END_EXPR';
	
	
	                if (opt.brace_style === "expand" ||
	                    (opt.brace_style === "none" && current_token.wanted_newline)) {
	                    if (last_type !== 'TK_OPERATOR' &&
	                        (empty_anonymous_function ||
	                            last_type === 'TK_EQUALS' ||
	                            (last_type === 'TK_RESERVED' && is_special_word(flags.last_text) && flags.last_text !== 'else'))) {
	                        output.space_before_token = true;
	                    } else {
	                        print_newline(false, true);
	                    }
	                } else { // collapse
	                    if (opt.brace_style === 'collapse-preserve-inline') {
	                        // search forward for a newline wanted inside this block
	                        var index = 0;
	                        var check_token = null;
	                        flags.inline_frame = true;
	                        do {
	                            index += 1;
	                            check_token = get_token(index);
	                            if (check_token.wanted_newline) {
	                                flags.inline_frame = false;
	                                break;
	                            }
	                        } while (check_token.type !== 'TK_EOF' &&
	                            !(check_token.type === 'TK_END_BLOCK' && check_token.opened === current_token));
	                    }
	
	                    if (is_array(previous_flags.mode) && (last_type === 'TK_START_EXPR' || last_type === 'TK_COMMA')) {
	                        // if we're preserving inline,
	                        // allow newline between comma and next brace.
	                        if (last_type === 'TK_COMMA' || opt.space_in_paren) {
	                            output.space_before_token = true;
	                        }
	
	                        if (opt.brace_style === 'collapse-preserve-inline' &&
	                            (last_type === 'TK_COMMA' || (last_type === 'TK_START_EXPR' && flags.inline_frame))) {
	                            allow_wrap_or_preserved_newline();
	                            previous_flags.multiline_frame = previous_flags.multiline_frame || flags.multiline_frame;
	                            flags.multiline_frame = false;
	                        }
	                    } else if (last_type !== 'TK_OPERATOR' && last_type !== 'TK_START_EXPR') {
	                        if (last_type === 'TK_START_BLOCK') {
	                            print_newline();
	                        } else {
	                            output.space_before_token = true;
	                        }
	                    }
	                }
	                print_token();
	                indent();
	            }
	
	            function handle_end_block() {
	                // statements must all be closed when their container closes
	                while (flags.mode === MODE.Statement) {
	                    restore_mode();
	                }
	                var empty_braces = last_type === 'TK_START_BLOCK';
	
	                if (opt.brace_style === "expand") {
	                    if (!empty_braces) {
	                        print_newline();
	                    }
	                } else {
	                    // skip {}
	                    if (!empty_braces) {
	                        if (flags.inline_frame) {
	                            output.space_before_token = true;
	                        } else if (is_array(flags.mode) && opt.keep_array_indentation) {
	                            // we REALLY need a newline here, but newliner would skip that
	                            opt.keep_array_indentation = false;
	                            print_newline();
	                            opt.keep_array_indentation = true;
	
	                        } else {
	                            print_newline();
	                        }
	                    }
	                }
	                restore_mode();
	                print_token();
	            }
	
	            function handle_word() {
	                if (current_token.type === 'TK_RESERVED') {
	                    if (in_array(current_token.text, ['set', 'get']) && flags.mode !== MODE.ObjectLiteral) {
	                        current_token.type = 'TK_WORD';
	                    } else if (in_array(current_token.text, ['as', 'from']) && !flags.import_block) {
	                        current_token.type = 'TK_WORD';
	                    } else if (flags.mode === MODE.ObjectLiteral) {
	                        var next_token = get_token(1);
	                        if (next_token.text === ':') {
	                            current_token.type = 'TK_WORD';
	                        }
	                    }
	                }
	
	                if (start_of_statement()) {
	                    // The conditional starts the statement if appropriate.
	                } else if (current_token.wanted_newline && !is_expression(flags.mode) &&
	                    (last_type !== 'TK_OPERATOR' || (flags.last_text === '--' || flags.last_text === '++')) &&
	                    last_type !== 'TK_EQUALS' &&
	                    (opt.preserve_newlines || !(last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const', 'set', 'get'])))) {
	
	                    print_newline();
	                }
	
	                if (flags.do_block && !flags.do_while) {
	                    if (current_token.type === 'TK_RESERVED' && current_token.text === 'while') {
	                        // do {} ## while ()
	                        output.space_before_token = true;
	                        print_token();
	                        output.space_before_token = true;
	                        flags.do_while = true;
	                        return;
	                    } else {
	                        // do {} should always have while as the next word.
	                        // if we don't see the expected while, recover
	                        print_newline();
	                        flags.do_block = false;
	                    }
	                }
	
	                // if may be followed by else, or not
	                // Bare/inline ifs are tricky
	                // Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();
	                if (flags.if_block) {
	                    if (!flags.else_block && (current_token.type === 'TK_RESERVED' && current_token.text === 'else')) {
	                        flags.else_block = true;
	                    } else {
	                        while (flags.mode === MODE.Statement) {
	                            restore_mode();
	                        }
	                        flags.if_block = false;
	                        flags.else_block = false;
	                    }
	                }
	
	                if (current_token.type === 'TK_RESERVED' && (current_token.text === 'case' || (current_token.text === 'default' && flags.in_case_statement))) {
	                    print_newline();
	                    if (flags.case_body || opt.jslint_happy) {
	                        // switch cases following one another
	                        deindent();
	                        flags.case_body = false;
	                    }
	                    print_token();
	                    flags.in_case = true;
	                    flags.in_case_statement = true;
	                    return;
	                }
	
	                if (current_token.type === 'TK_RESERVED' && current_token.text === 'function') {
	                    if (in_array(flags.last_text, ['}', ';']) || (output.just_added_newline() && !in_array(flags.last_text, ['[', '{', ':', '=', ',']))) {
	                        // make sure there is a nice clean space of at least one blank line
	                        // before a new function definition
	                        if (!output.just_added_blankline() && !current_token.comments_before.length) {
	                            print_newline();
	                            print_newline(true);
	                        }
	                    }
	                    if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD') {
	                        if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set', 'new', 'return', 'export', 'async'])) {
	                            output.space_before_token = true;
	                        } else if (last_type === 'TK_RESERVED' && flags.last_text === 'default' && last_last_text === 'export') {
	                            output.space_before_token = true;
	                        } else {
	                            print_newline();
	                        }
	                    } else if (last_type === 'TK_OPERATOR' || flags.last_text === '=') {
	                        // foo = function
	                        output.space_before_token = true;
	                    } else if (!flags.multiline_frame && (is_expression(flags.mode) || is_array(flags.mode))) {
	                        // (function
	                    } else {
	                        print_newline();
	                    }
	                }
	
	                if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {
	                    if (!start_of_object_property()) {
	                        allow_wrap_or_preserved_newline();
	                    }
	                }
	
	                if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['function', 'get', 'set'])) {
	                    print_token();
	                    flags.last_word = current_token.text;
	                    return;
	                }
	
	                prefix = 'NONE';
	
	                if (last_type === 'TK_END_BLOCK') {
	
	                    if (!(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally', 'from']))) {
	                        prefix = 'NEWLINE';
	                    } else {
	                        if (opt.brace_style === "expand" ||
	                            opt.brace_style === "end-expand" ||
	                            (opt.brace_style === "none" && current_token.wanted_newline)) {
	                            prefix = 'NEWLINE';
	                        } else {
	                            prefix = 'SPACE';
	                            output.space_before_token = true;
	                        }
	                    }
	                } else if (last_type === 'TK_SEMICOLON' && flags.mode === MODE.BlockStatement) {
	                    // TODO: Should this be for STATEMENT as well?
	                    prefix = 'NEWLINE';
	                } else if (last_type === 'TK_SEMICOLON' && is_expression(flags.mode)) {
	                    prefix = 'SPACE';
	                } else if (last_type === 'TK_STRING') {
	                    prefix = 'NEWLINE';
	                } else if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' ||
	                    (flags.last_text === '*' &&
	                        (in_array(last_last_text, ['function', 'yield']) ||
	                            (flags.mode === MODE.ObjectLiteral && in_array(last_last_text, ['{', ',']))))) {
	                    prefix = 'SPACE';
	                } else if (last_type === 'TK_START_BLOCK') {
	                    if (flags.inline_frame) {
	                        prefix = 'SPACE';
	                    } else {
	                        prefix = 'NEWLINE';
	                    }
	                } else if (last_type === 'TK_END_EXPR') {
	                    output.space_before_token = true;
	                    prefix = 'NEWLINE';
	                }
	
	                if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {
	                    if (flags.inline_frame || flags.last_text === 'else' || flags.last_text === 'export') {
	                        prefix = 'SPACE';
	                    } else {
	                        prefix = 'NEWLINE';
	                    }
	
	                }
	
	                if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally'])) {
	                    if (!(last_type === 'TK_END_BLOCK' && previous_flags.mode === MODE.BlockStatement) ||
	                        opt.brace_style === "expand" ||
	                        opt.brace_style === "end-expand" ||
	                        (opt.brace_style === "none" && current_token.wanted_newline)) {
	                        print_newline();
	                    } else {
	                        output.trim(true);
	                        var line = output.current_line;
	                        // If we trimmed and there's something other than a close block before us
	                        // put a newline back in.  Handles '} // comment' scenario.
	                        if (line.last() !== '}') {
	                            print_newline();
	                        }
	                        output.space_before_token = true;
	                    }
	                } else if (prefix === 'NEWLINE') {
	                    if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {
	                        // no newline between 'return nnn'
	                        output.space_before_token = true;
	                    } else if (last_type !== 'TK_END_EXPR') {
	                        if ((last_type !== 'TK_START_EXPR' || !(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['var', 'let', 'const']))) && flags.last_text !== ':') {
	                            // no need to force newline on 'var': for (var x = 0...)
	                            if (current_token.type === 'TK_RESERVED' && current_token.text === 'if' && flags.last_text === 'else') {
	                                // no newline for } else if {
	                                output.space_before_token = true;
	                            } else {
	                                print_newline();
	                            }
	                        }
	                    } else if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {
	                        print_newline();
	                    }
	                } else if (flags.multiline_frame && is_array(flags.mode) && flags.last_text === ',' && last_last_text === '}') {
	                    print_newline(); // }, in lists get a newline treatment
	                } else if (prefix === 'SPACE') {
	                    output.space_before_token = true;
	                }
	                print_token();
	                flags.last_word = current_token.text;
	
	                if (current_token.type === 'TK_RESERVED') {
	                    if (current_token.text === 'do') {
	                        flags.do_block = true;
	                    } else if (current_token.text === 'if') {
	                        flags.if_block = true;
	                    } else if (current_token.text === 'import') {
	                        flags.import_block = true;
	                    } else if (flags.import_block && current_token.type === 'TK_RESERVED' && current_token.text === 'from') {
	                        flags.import_block = false;
	                    }
	                }
	            }
	
	            function handle_semicolon() {
	                if (start_of_statement()) {
	                    // The conditional starts the statement if appropriate.
	                    // Semicolon can be the start (and end) of a statement
	                    output.space_before_token = false;
	                }
	                while (flags.mode === MODE.Statement && !flags.if_block && !flags.do_block) {
	                    restore_mode();
	                }
	
	                // hacky but effective for the moment
	                if (flags.import_block) {
	                    flags.import_block = false;
	                }
	                print_token();
	            }
	
	            function handle_string() {
	                if (start_of_statement()) {
	                    // The conditional starts the statement if appropriate.
	                    // One difference - strings want at least a space before
	                    output.space_before_token = true;
	                } else if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' || flags.inline_frame) {
	                    output.space_before_token = true;
	                } else if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {
	                    if (!start_of_object_property()) {
	                        allow_wrap_or_preserved_newline();
	                    }
	                } else {
	                    print_newline();
	                }
	                print_token();
	            }
	
	            function handle_equals() {
	                if (start_of_statement()) {
	                    // The conditional starts the statement if appropriate.
	                }
	
	                if (flags.declaration_statement) {
	                    // just got an '=' in a var-line, different formatting/line-breaking, etc will now be done
	                    flags.declaration_assignment = true;
	                }
	                output.space_before_token = true;
	                print_token();
	                output.space_before_token = true;
	            }
	
	            function handle_comma() {
	                print_token();
	                output.space_before_token = true;
	                if (flags.declaration_statement) {
	                    if (is_expression(flags.parent.mode)) {
	                        // do not break on comma, for(var a = 1, b = 2)
	                        flags.declaration_assignment = false;
	                    }
	
	                    if (flags.declaration_assignment) {
	                        flags.declaration_assignment = false;
	                        print_newline(false, true);
	                    } else if (opt.comma_first) {
	                        // for comma-first, we want to allow a newline before the comma
	                        // to turn into a newline after the comma, which we will fixup later
	                        allow_wrap_or_preserved_newline();
	                    }
	                } else if (flags.mode === MODE.ObjectLiteral ||
	                    (flags.mode === MODE.Statement && flags.parent.mode === MODE.ObjectLiteral)) {
	                    if (flags.mode === MODE.Statement) {
	                        restore_mode();
	                    }
	
	                    if (!flags.inline_frame) {
	                        print_newline();
	                    }
	                } else if (opt.comma_first) {
	                    // EXPR or DO_BLOCK
	                    // for comma-first, we want to allow a newline before the comma
	                    // to turn into a newline after the comma, which we will fixup later
	                    allow_wrap_or_preserved_newline();
	                }
	            }
	
	            function handle_operator() {
	                if (start_of_statement()) {
	                    // The conditional starts the statement if appropriate.
	                }
	
	                if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {
	                    // "return" had a special handling in TK_WORD. Now we need to return the favor
	                    output.space_before_token = true;
	                    print_token();
	                    return;
	                }
	
	                // hack for actionscript's import .*;
	                if (current_token.text === '*' && last_type === 'TK_DOT') {
	                    print_token();
	                    return;
	                }
	
	                if (current_token.text === '::') {
	                    // no spaces around exotic namespacing syntax operator
	                    print_token();
	                    return;
	                }
	
	                // Allow line wrapping between operators when operator_position is
	                //   set to before or preserve
	                if (last_type === 'TK_OPERATOR' && in_array(opt.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)) {
	                    allow_wrap_or_preserved_newline();
	                }
	
	                if (current_token.text === ':' && flags.in_case) {
	                    flags.case_body = true;
	                    indent();
	                    print_token();
	                    print_newline();
	                    flags.in_case = false;
	                    return;
	                }
	
	                var space_before = true;
	                var space_after = true;
	                var in_ternary = false;
	                var isGeneratorAsterisk = current_token.text === '*' &&
	                    ((last_type === 'TK_RESERVED' && in_array(flags.last_text, ['function', 'yield'])) ||
	                        (flags.mode === MODE.ObjectLiteral && in_array(last_type, ['TK_START_BLOCK', 'TK_COMMA'])));
	                var isUnary = in_array(current_token.text, ['-', '+']) && (
	                    in_array(last_type, ['TK_START_BLOCK', 'TK_START_EXPR', 'TK_EQUALS', 'TK_OPERATOR']) ||
	                    in_array(flags.last_text, Tokenizer.line_starters) ||
	                    flags.last_text === ','
	                );
	
	                if (current_token.text === ':') {
	                    if (flags.ternary_depth === 0) {
	                        // Colon is invalid javascript outside of ternary and object, but do our best to guess what was meant.
	                        space_before = false;
	                    } else {
	                        flags.ternary_depth -= 1;
	                        in_ternary = true;
	                    }
	                } else if (current_token.text === '?') {
	                    flags.ternary_depth += 1;
	                }
	
	                // let's handle the operator_position option prior to any conflicting logic
	                if (!isUnary && !isGeneratorAsterisk && opt.preserve_newlines && in_array(current_token.text, Tokenizer.positionable_operators)) {
	                    var isColon = current_token.text === ':';
	                    var isTernaryColon = (isColon && in_ternary);
	                    var isOtherColon = (isColon && !in_ternary);
	
	                    switch (opt.operator_position) {
	                        case OPERATOR_POSITION.before_newline:
	                            // if the current token is : and it's not a ternary statement then we set space_before to false
	                            output.space_before_token = !isOtherColon;
	
	                            print_token();
	
	                            if (!isColon || isTernaryColon) {
	                                allow_wrap_or_preserved_newline();
	                            }
	
	                            output.space_before_token = true;
	                            return;
	
	                        case OPERATOR_POSITION.after_newline:
	                            // if the current token is anything but colon, or (via deduction) it's a colon and in a ternary statement,
	                            //   then print a newline.
	
	                            output.space_before_token = true;
	
	                            if (!isColon || isTernaryColon) {
	                                if (get_token(1).wanted_newline) {
	                                    print_newline(false, true);
	                                } else {
	                                    allow_wrap_or_preserved_newline();
	                                }
	                            } else {
	                                output.space_before_token = false;
	                            }
	
	                            print_token();
	
	                            output.space_before_token = true;
	                            return;
	
	                        case OPERATOR_POSITION.preserve_newline:
	                            if (!isOtherColon) {
	                                allow_wrap_or_preserved_newline();
	                            }
	
	                            // if we just added a newline, or the current token is : and it's not a ternary statement,
	                            //   then we set space_before to false
	                            space_before = !(output.just_added_newline() || isOtherColon);
	
	                            output.space_before_token = space_before;
	                            print_token();
	                            output.space_before_token = true;
	                            return;
	                    }
	                }
	
	                if (in_array(current_token.text, ['--', '++', '!', '~']) || isUnary) {
	                    // unary operators (and binary +/- pretending to be unary) special cases
	
	                    space_before = false;
	                    space_after = false;
	
	                    // http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1
	                    // if there is a newline between -- or ++ and anything else we should preserve it.
	                    if (current_token.wanted_newline && (current_token.text === '--' || current_token.text === '++')) {
	                        print_newline(false, true);
	                    }
	
	                    if (flags.last_text === ';' && is_expression(flags.mode)) {
	                        // for (;; ++i)
	                        //        ^^^
	                        space_before = true;
	                    }
	
	                    if (last_type === 'TK_RESERVED') {
	                        space_before = true;
	                    } else if (last_type === 'TK_END_EXPR') {
	                        space_before = !(flags.last_text === ']' && (current_token.text === '--' || current_token.text === '++'));
	                    } else if (last_type === 'TK_OPERATOR') {
	                        // a++ + ++b;
	                        // a - -b
	                        space_before = in_array(current_token.text, ['--', '-', '++', '+']) && in_array(flags.last_text, ['--', '-', '++', '+']);
	                        // + and - are not unary when preceeded by -- or ++ operator
	                        // a-- + b
	                        // a * +b
	                        // a - -b
	                        if (in_array(current_token.text, ['+', '-']) && in_array(flags.last_text, ['--', '++'])) {
	                            space_after = true;
	                        }
	                    }
	
	
	                    if (((flags.mode === MODE.BlockStatement && !flags.inline_frame) || flags.mode === MODE.Statement) &&
	                        (flags.last_text === '{' || flags.last_text === ';')) {
	                        // { foo; --i }
	                        // foo(); --bar;
	                        print_newline();
	                    }
	                } else if (isGeneratorAsterisk) {
	                    allow_wrap_or_preserved_newline();
	                    space_before = false;
	                    space_after = false;
	                }
	                output.space_before_token = output.space_before_token || space_before;
	                print_token();
	                output.space_before_token = space_after;
	            }
	
	            function handle_block_comment() {
	                if (output.raw) {
	                    output.add_raw_token(current_token);
	                    if (current_token.directives && current_token.directives.preserve === 'end') {
	                        // If we're testing the raw output behavior, do not allow a directive to turn it off.
	                        output.raw = opt.test_output_raw;
	                    }
	                    return;
	                }
	
	                if (current_token.directives) {
	                    print_newline(false, true);
	                    print_token();
	                    if (current_token.directives.preserve === 'start') {
	                        output.raw = true;
	                    }
	                    print_newline(false, true);
	                    return;
	                }
	
	                // inline block
	                if (!acorn.newline.test(current_token.text) && !current_token.wanted_newline) {
	                    output.space_before_token = true;
	                    print_token();
	                    output.space_before_token = true;
	                    return;
	                }
	
	                var lines = split_linebreaks(current_token.text);
	                var j; // iterator for this case
	                var javadoc = false;
	                var starless = false;
	                var lastIndent = current_token.whitespace_before;
	                var lastIndentLength = lastIndent.length;
	
	                // block comment starts with a new line
	                print_newline(false, true);
	                if (lines.length > 1) {
	                    javadoc = all_lines_start_with(lines.slice(1), '*');
	                    starless = each_line_matches_indent(lines.slice(1), lastIndent);
	                }
	
	                // first line always indented
	                print_token(lines[0]);
	                for (j = 1; j < lines.length; j++) {
	                    print_newline(false, true);
	                    if (javadoc) {
	                        // javadoc: reformat and re-indent
	                        print_token(' ' + ltrim(lines[j]));
	                    } else if (starless && lines[j].length > lastIndentLength) {
	                        // starless: re-indent non-empty content, avoiding trim
	                        print_token(lines[j].substring(lastIndentLength));
	                    } else {
	                        // normal comments output raw
	                        output.add_token(lines[j]);
	                    }
	                }
	
	                // for comments of more than one line, make sure there's a new line after
	                print_newline(false, true);
	            }
	
	            function handle_comment() {
	                if (current_token.wanted_newline) {
	                    print_newline(false, true);
	                } else {
	                    output.trim(true);
	                }
	
	                output.space_before_token = true;
	                print_token();
	                print_newline(false, true);
	            }
	
	            function handle_dot() {
	                if (start_of_statement()) {
	                    // The conditional starts the statement if appropriate.
	                }
	
	                if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {
	                    output.space_before_token = true;
	                } else {
	                    // allow preserved newlines before dots in general
	                    // force newlines on dots after close paren when break_chained - for bar().baz()
	                    allow_wrap_or_preserved_newline(flags.last_text === ')' && opt.break_chained_methods);
	                }
	
	                print_token();
	            }
	
	            function handle_unknown() {
	                print_token();
	
	                if (current_token.text[current_token.text.length - 1] === '\n') {
	                    print_newline();
	                }
	            }
	
	            function handle_eof() {
	                // Unwind any open statements
	                while (flags.mode === MODE.Statement) {
	                    restore_mode();
	                }
	            }
	        }
	
	
	        function OutputLine(parent) {
	            var _character_count = 0;
	            // use indent_count as a marker for lines that have preserved indentation
	            var _indent_count = -1;
	
	            var _items = [];
	            var _empty = true;
	
	            this.set_indent = function(level) {
	                _character_count = parent.baseIndentLength + level * parent.indent_length;
	                _indent_count = level;
	            };
	
	            this.get_character_count = function() {
	                return _character_count;
	            };
	
	            this.is_empty = function() {
	                return _empty;
	            };
	
	            this.last = function() {
	                if (!this._empty) {
	                    return _items[_items.length - 1];
	                } else {
	                    return null;
	                }
	            };
	
	            this.push = function(input) {
	                _items.push(input);
	                _character_count += input.length;
	                _empty = false;
	            };
	
	            this.pop = function() {
	                var item = null;
	                if (!_empty) {
	                    item = _items.pop();
	                    _character_count -= item.length;
	                    _empty = _items.length === 0;
	                }
	                return item;
	            };
	
	            this.remove_indent = function() {
	                if (_indent_count > 0) {
	                    _indent_count -= 1;
	                    _character_count -= parent.indent_length;
	                }
	            };
	
	            this.trim = function() {
	                while (this.last() === ' ') {
	                    _items.pop();
	                    _character_count -= 1;
	                }
	                _empty = _items.length === 0;
	            };
	
	            this.toString = function() {
	                var result = '';
	                if (!this._empty) {
	                    if (_indent_count >= 0) {
	                        result = parent.indent_cache[_indent_count];
	                    }
	                    result += _items.join('');
	                }
	                return result;
	            };
	        }
	
	        function Output(indent_string, baseIndentString) {
	            baseIndentString = baseIndentString || '';
	            this.indent_cache = [baseIndentString];
	            this.baseIndentLength = baseIndentString.length;
	            this.indent_length = indent_string.length;
	            this.raw = false;
	
	            var lines = [];
	            this.baseIndentString = baseIndentString;
	            this.indent_string = indent_string;
	            this.previous_line = null;
	            this.current_line = null;
	            this.space_before_token = false;
	
	            this.add_outputline = function() {
	                this.previous_line = this.current_line;
	                this.current_line = new OutputLine(this);
	                lines.push(this.current_line);
	            };
	
	            // initialize
	            this.add_outputline();
	
	
	            this.get_line_number = function() {
	                return lines.length;
	            };
	
	            // Using object instead of string to allow for later expansion of info about each line
	            this.add_new_line = function(force_newline) {
	                if (this.get_line_number() === 1 && this.just_added_newline()) {
	                    return false; // no newline on start of file
	                }
	
	                if (force_newline || !this.just_added_newline()) {
	                    if (!this.raw) {
	                        this.add_outputline();
	                    }
	                    return true;
	                }
	
	                return false;
	            };
	
	            this.get_code = function() {
	                var sweet_code = lines.join('\n').replace(/[\r\n\t ]+$/, '');
	                return sweet_code;
	            };
	
	            this.set_indent = function(level) {
	                // Never indent your first output indent at the start of the file
	                if (lines.length > 1) {
	                    while (level >= this.indent_cache.length) {
	                        this.indent_cache.push(this.indent_cache[this.indent_cache.length - 1] + this.indent_string);
	                    }
	
	                    this.current_line.set_indent(level);
	                    return true;
	                }
	                this.current_line.set_indent(0);
	                return false;
	            };
	
	            this.add_raw_token = function(token) {
	                for (var x = 0; x < token.newlines; x++) {
	                    this.add_outputline();
	                }
	                this.current_line.push(token.whitespace_before);
	                this.current_line.push(token.text);
	                this.space_before_token = false;
	            };
	
	            this.add_token = function(printable_token) {
	                this.add_space_before_token();
	                this.current_line.push(printable_token);
	            };
	
	            this.add_space_before_token = function() {
	                if (this.space_before_token && !this.just_added_newline()) {
	                    this.current_line.push(' ');
	                }
	                this.space_before_token = false;
	            };
	
	            this.remove_redundant_indentation = function(frame) {
	                // This implementation is effective but has some issues:
	                //     - can cause line wrap to happen too soon due to indent removal
	                //           after wrap points are calculated
	                // These issues are minor compared to ugly indentation.
	
	                if (frame.multiline_frame ||
	                    frame.mode === MODE.ForInitializer ||
	                    frame.mode === MODE.Conditional) {
	                    return;
	                }
	
	                // remove one indent from each line inside this section
	                var index = frame.start_line_index;
	
	                var output_length = lines.length;
	                while (index < output_length) {
	                    lines[index].remove_indent();
	                    index++;
	                }
	            };
	
	            this.trim = function(eat_newlines) {
	                eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;
	
	                this.current_line.trim(indent_string, baseIndentString);
	
	                while (eat_newlines && lines.length > 1 &&
	                    this.current_line.is_empty()) {
	                    lines.pop();
	                    this.current_line = lines[lines.length - 1];
	                    this.current_line.trim();
	                }
	
	                this.previous_line = lines.length > 1 ? lines[lines.length - 2] : null;
	            };
	
	            this.just_added_newline = function() {
	                return this.current_line.is_empty();
	            };
	
	            this.just_added_blankline = function() {
	                if (this.just_added_newline()) {
	                    if (lines.length === 1) {
	                        return true; // start of the file and newline = blank
	                    }
	
	                    var line = lines[lines.length - 2];
	                    return line.is_empty();
	                }
	                return false;
	            };
	        }
	
	        var InputScanner = function(input) {
	            var _input = input;
	            var _input_length = _input.length;
	            var _position = 0;
	
	            this.back = function() {
	                _position -= 1;
	            };
	
	            this.hasNext = function() {
	                return _position < _input_length;
	            };
	
	            this.next = function() {
	                var val = null;
	                if (this.hasNext()) {
	                    val = _input.charAt(_position);
	                    _position += 1;
	                }
	                return val;
	            };
	
	            this.peek = function(index) {
	                var val = null;
	                index = index || 0;
	                index += _position;
	                if (index >= 0 && index < _input_length) {
	                    val = _input.charAt(index);
	                }
	                return val;
	            };
	
	            this.peekCharCode = function(index) {
	                var val = 0;
	                index = index || 0;
	                index += _position;
	                if (index >= 0 && index < _input_length) {
	                    val = _input.charCodeAt(index);
	                }
	                return val;
	            };
	
	            this.test = function(pattern, index) {
	                index = index || 0;
	                pattern.lastIndex = _position + index;
	                return pattern.test(_input);
	            };
	
	            this.testChar = function(pattern, index) {
	                var val = this.peek(index);
	                return val !== null && pattern.test(val);
	            };
	
	            this.match = function(pattern) {
	                pattern.lastIndex = _position;
	                var pattern_match = pattern.exec(_input);
	                if (pattern_match && pattern_match.index === _position) {
	                    _position += pattern_match[0].length;
	                } else {
	                    pattern_match = null;
	                }
	                return pattern_match;
	            };
	        };
	
	        var Token = function(type, text, newlines, whitespace_before, parent) {
	            this.type = type;
	            this.text = text;
	            this.comments_before = [];
	            this.newlines = newlines || 0;
	            this.wanted_newline = newlines > 0;
	            this.whitespace_before = whitespace_before || '';
	            this.parent = parent || null;
	            this.opened = null;
	            this.directives = null;
	        };
	
	        function tokenizer(input_string, opts) {
	
	            var whitespace = "\n\r\t ".split('');
	            var digit = /[0-9]/;
	            var digit_bin = /[01]/;
	            var digit_oct = /[01234567]/;
	            var digit_hex = /[0123456789abcdefABCDEF]/;
	
	            this.positionable_operators = '!= !== % & && * ** + - / : < << <= == === > >= >> >>> ? ^ | ||'.split(' ');
	            var punct = this.positionable_operators.concat(
	                // non-positionable operators - these do not follow operator position settings
	                '! %= &= *= **= ++ += , -- -= /= :: <<= = => >>= >>>= ^= |= ~'.split(' '));
	
	            // words which should always start on new line.
	            this.line_starters = 'continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export'.split(',');
	            var reserved_words = this.line_starters.concat(['do', 'in', 'else', 'get', 'set', 'new', 'catch', 'finally', 'typeof', 'yield', 'async', 'await', 'from', 'as']);
	
	            //  /* ... */ comment ends with nearest */ or end of file
	            var block_comment_pattern = /([\s\S]*?)((?:\*\/)|$)/g;
	
	            // comment ends just before nearest linefeed or end of file
	            var comment_pattern = /([^\n\r\u2028\u2029]*)/g;
	
	            var directives_block_pattern = /\/\* beautify( \w+[:]\w+)+ \*\//g;
	            var directive_pattern = / (\w+)[:](\w+)/g;
	            var directives_end_ignore_pattern = /([\s\S]*?)((?:\/\*\sbeautify\signore:end\s\*\/)|$)/g;
	
	            var template_pattern = /((<\?php|<\?=)[\s\S]*?\?>)|(<%[\s\S]*?%>)/g;
	
	            var n_newlines, whitespace_before_token, in_html_comment, tokens;
	            var input;
	
	            this.tokenize = function() {
	                input = new InputScanner(input_string);
	                in_html_comment = false;
	                tokens = [];
	
	                var next, last;
	                var token_values;
	                var open = null;
	                var open_stack = [];
	                var comments = [];
	
	                while (!(last && last.type === 'TK_EOF')) {
	                    token_values = tokenize_next();
	                    next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);
	                    while (next.type === 'TK_COMMENT' || next.type === 'TK_BLOCK_COMMENT' || next.type === 'TK_UNKNOWN') {
	                        if (next.type === 'TK_BLOCK_COMMENT') {
	                            next.directives = token_values[2];
	                        }
	                        comments.push(next);
	                        token_values = tokenize_next();
	                        next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);
	                    }
	
	                    if (comments.length) {
	                        next.comments_before = comments;
	                        comments = [];
	                    }
	
	                    if (next.type === 'TK_START_BLOCK' || next.type === 'TK_START_EXPR') {
	                        next.parent = last;
	                        open_stack.push(open);
	                        open = next;
	                    } else if ((next.type === 'TK_END_BLOCK' || next.type === 'TK_END_EXPR') &&
	                        (open && (
	                            (next.text === ']' && open.text === '[') ||
	                            (next.text === ')' && open.text === '(') ||
	                            (next.text === '}' && open.text === '{')))) {
	                        next.parent = open.parent;
	                        next.opened = open;
	
	                        open = open_stack.pop();
	                    }
	
	                    tokens.push(next);
	                    last = next;
	                }
	
	                return tokens;
	            };
	
	            function get_directives(text) {
	                if (!text.match(directives_block_pattern)) {
	                    return null;
	                }
	
	                var directives = {};
	                directive_pattern.lastIndex = 0;
	                var directive_match = directive_pattern.exec(text);
	
	                while (directive_match) {
	                    directives[directive_match[1]] = directive_match[2];
	                    directive_match = directive_pattern.exec(text);
	                }
	
	                return directives;
	            }
	
	            function tokenize_next() {
	                var resulting_string;
	                var whitespace_on_this_line = [];
	
	                n_newlines = 0;
	                whitespace_before_token = '';
	
	                var c = input.next();
	
	                if (c === null) {
	                    return ['', 'TK_EOF'];
	                }
	
	                var last_token;
	                if (tokens.length) {
	                    last_token = tokens[tokens.length - 1];
	                } else {
	                    // For the sake of tokenizing we can pretend that there was on open brace to start
	                    last_token = new Token('TK_START_BLOCK', '{');
	                }
	
	                while (in_array(c, whitespace)) {
	
	                    if (acorn.newline.test(c)) {
	                        if (!(c === '\n' && input.peek(-2) === '\r')) {
	                            n_newlines += 1;
	                            whitespace_on_this_line = [];
	                        }
	                    } else {
	                        whitespace_on_this_line.push(c);
	                    }
	
	                    c = input.next();
	
	                    if (c === null) {
	                        return ['', 'TK_EOF'];
	                    }
	                }
	
	                if (whitespace_on_this_line.length) {
	                    whitespace_before_token = whitespace_on_this_line.join('');
	                }
	
	                if (digit.test(c) || (c === '.' && input.testChar(digit))) {
	                    var allow_decimal = true;
	                    var allow_e = true;
	                    var local_digit = digit;
	
	                    if (c === '0' && input.testChar(/[XxOoBb]/)) {
	                        // switch to hex/oct/bin number, no decimal or e, just hex/oct/bin digits
	                        allow_decimal = false;
	                        allow_e = false;
	                        if (input.testChar(/[Bb]/)) {
	                            local_digit = digit_bin;
	                        } else if (input.testChar(/[Oo]/)) {
	                            local_digit = digit_oct;
	                        } else {
	                            local_digit = digit_hex;
	                        }
	                        c += input.next();
	                    } else if (c === '.') {
	                        // Already have a decimal for this literal, don't allow another
	                        allow_decimal = false;
	                    } else {
	                        // we know this first loop will run.  It keeps the logic simpler.
	                        c = '';
	                        input.back();
	                    }
	
	                    // Add the digits
	                    while (input.testChar(local_digit)) {
	                        c += input.next();
	
	                        if (allow_decimal && input.peek() === '.') {
	                            c += input.next();
	                            allow_decimal = false;
	                        } else if (allow_e && input.testChar(/[Ee]/)) {
	                            c += input.next();
	
	                            if (input.testChar(/[+-]/)) {
	                                c += input.next();
	                            }
	
	                            allow_e = false;
	                            allow_decimal = false;
	                        }
	                    }
	
	                    return [c, 'TK_WORD'];
	                }
	
	                if (acorn.isIdentifierStart(input.peekCharCode(-1))) {
	                    if (input.hasNext()) {
	                        while (acorn.isIdentifierChar(input.peekCharCode())) {
	                            c += input.next();
	                            if (!input.hasNext()) {
	                                break;
	                            }
	                        }
	                    }
	
	                    if (!(last_token.type === 'TK_DOT' ||
	                            (last_token.type === 'TK_RESERVED' && in_array(last_token.text, ['set', 'get']))) &&
	                        in_array(c, reserved_words)) {
	                        if (c === 'in') { // hack for 'in' operator
	                            return [c, 'TK_OPERATOR'];
	                        }
	                        return [c, 'TK_RESERVED'];
	                    }
	
	                    return [c, 'TK_WORD'];
	                }
	
	                if (c === '(' || c === '[') {
	                    return [c, 'TK_START_EXPR'];
	                }
	
	                if (c === ')' || c === ']') {
	                    return [c, 'TK_END_EXPR'];
	                }
	
	                if (c === '{') {
	                    return [c, 'TK_START_BLOCK'];
	                }
	
	                if (c === '}') {
	                    return [c, 'TK_END_BLOCK'];
	                }
	
	                if (c === ';') {
	                    return [c, 'TK_SEMICOLON'];
	                }
	
	                if (c === '/') {
	                    var comment = '';
	                    var comment_match;
	                    // peek for comment /* ... */
	                    if (input.peek() === '*') {
	                        input.next();
	                        comment_match = input.match(block_comment_pattern);
	                        comment = '/*' + comment_match[0];
	                        var directives = get_directives(comment);
	                        if (directives && directives.ignore === 'start') {
	                            comment_match = input.match(directives_end_ignore_pattern);
	                            comment += comment_match[0];
	                        }
	                        comment = comment.replace(acorn.allLineBreaks, '\n');
	                        return [comment, 'TK_BLOCK_COMMENT', directives];
	                    }
	                    // peek for comment // ...
	                    if (input.peek() === '/') {
	                        input.next();
	                        comment_match = input.match(comment_pattern);
	                        comment = '//' + comment_match[0];
	                        return [comment, 'TK_COMMENT'];
	                    }
	
	                }
	
	                var startXmlRegExp = /<()([-a-zA-Z:0-9_.]+|{[\s\S]+?}|!\[CDATA\[[\s\S]*?\]\])(\s+{[\s\S]+?}|\s+[-a-zA-Z:0-9_.]+|\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{[\s\S]+?}))*\s*(\/?)\s*>/g;
	
	                if (c === '`' || c === "'" || c === '"' || // string
	                    (
	                        (c === '/') || // regexp
	                        (opts.e4x && c === "<" && input.test(startXmlRegExp, -1)) // xml
	                    ) && ( // regex and xml can only appear in specific locations during parsing
	                        (last_token.type === 'TK_RESERVED' && in_array(last_token.text, ['return', 'case', 'throw', 'else', 'do', 'typeof', 'yield'])) ||
	                        (last_token.type === 'TK_END_EXPR' && last_token.text === ')' &&
	                            last_token.parent && last_token.parent.type === 'TK_RESERVED' && in_array(last_token.parent.text, ['if', 'while', 'for'])) ||
	                        (in_array(last_token.type, ['TK_COMMENT', 'TK_START_EXPR', 'TK_START_BLOCK',
	                            'TK_END_BLOCK', 'TK_OPERATOR', 'TK_EQUALS', 'TK_EOF', 'TK_SEMICOLON', 'TK_COMMA'
	                        ]))
	                    )) {
	
	                    var sep = c,
	                        esc = false,
	                        has_char_escapes = false;
	
	                    resulting_string = c;
	
	                    if (sep === '/') {
	                        //
	                        // handle regexp
	                        //
	                        var in_char_class = false;
	                        while (input.hasNext() &&
	                            ((esc || in_char_class || input.peek() !== sep) &&
	                                !input.testChar(acorn.newline))) {
	                            resulting_string += input.peek();
	                            if (!esc) {
	                                esc = input.peek() === '\\';
	                                if (input.peek() === '[') {
	                                    in_char_class = true;
	                                } else if (input.peek() === ']') {
	                                    in_char_class = false;
	                                }
	                            } else {
	                                esc = false;
	                            }
	                            input.next();
	                        }
	                    } else if (opts.e4x && sep === '<') {
	                        //
	                        // handle e4x xml literals
	                        //
	
	                        var xmlRegExp = /[\s\S]*?<(\/?)([-a-zA-Z:0-9_.]+|{[\s\S]+?}|!\[CDATA\[[\s\S]*?\]\])(\s+{[\s\S]+?}|\s+[-a-zA-Z:0-9_.]+|\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{[\s\S]+?}))*\s*(\/?)\s*>/g;
	                        input.back();
	                        var xmlStr = '';
	                        var match = input.match(startXmlRegExp);
	                        if (match) {
	                            // Trim root tag to attempt to
	                            var rootTag = match[2].replace(/^{\s+/, '{').replace(/\s+}$/, '}');
	                            var isCurlyRoot = rootTag.indexOf('{') === 0;
	                            var depth = 0;
	                            while (match) {
	                                var isEndTag = !!match[1];
	                                var tagName = match[2];
	                                var isSingletonTag = (!!match[match.length - 1]) || (tagName.slice(0, 8) === "![CDATA[");
	                                if (!isSingletonTag &&
	                                    (tagName === rootTag || (isCurlyRoot && tagName.replace(/^{\s+/, '{').replace(/\s+}$/, '}')))) {
	                                    if (isEndTag) {
	                                        --depth;
	                                    } else {
	                                        ++depth;
	                                    }
	                                }
	                                xmlStr += match[0];
	                                if (depth <= 0) {
	                                    break;
	                                }
	                                match = input.match(xmlRegExp);
	                            }
	                            // if we didn't close correctly, keep unformatted.
	                            if (!match) {
	                                xmlStr += input.match(/[\s\S]*/g)[0];
	                            }
	                            xmlStr = xmlStr.replace(acorn.allLineBreaks, '\n');
	                            return [xmlStr, "TK_STRING"];
	                        }
	                    } else {
	                        //
	                        // handle string
	                        //
	                        var parse_string = function(delimiter, allow_unescaped_newlines, start_sub) {
	                            // Template strings can travers lines without escape characters.
	                            // Other strings cannot
	                            var current_char;
	                            while (input.hasNext()) {
	                                current_char = input.peek();
	                                if (!(esc || (current_char !== delimiter &&
	                                        (allow_unescaped_newlines || !acorn.newline.test(current_char))))) {
	                                    break;
	                                }
	
	                                // Handle \r\n linebreaks after escapes or in template strings
	                                if ((esc || allow_unescaped_newlines) && acorn.newline.test(current_char)) {
	                                    if (current_char === '\r' && input.peek(1) === '\n') {
	                                        input.next();
	                                        current_char = input.peek();
	                                    }
	                                    resulting_string += '\n';
	                                } else {
	                                    resulting_string += current_char;
	                                }
	
	                                if (esc) {
	                                    if (current_char === 'x' || current_char === 'u') {
	                                        has_char_escapes = true;
	                                    }
	                                    esc = false;
	                                } else {
	                                    esc = current_char === '\\';
	                                }
	
	                                input.next();
	
	                                if (start_sub && resulting_string.indexOf(start_sub, resulting_string.length - start_sub.length) !== -1) {
	                                    if (delimiter === '`') {
	                                        parse_string('}', allow_unescaped_newlines, '`');
	                                    } else {
	                                        parse_string('`', allow_unescaped_newlines, '${');
	                                    }
	                                }
	                            }
	                        };
	
	                        if (sep === '`') {
	                            parse_string('`', true, '${');
	                        } else {
	                            parse_string(sep);
	                        }
	                    }
	
	                    if (has_char_escapes && opts.unescape_strings) {
	                        resulting_string = unescape_string(resulting_string);
	                    }
	
	                    if (input.peek() === sep) {
	                        resulting_string += sep;
	                        input.next();
	
	                        if (sep === '/') {
	                            // regexps may have modifiers /regexp/MOD , so fetch those, too
	                            // Only [gim] are valid, but if the user puts in garbage, do what we can to take it.
	                            while (input.hasNext() && acorn.isIdentifierStart(input.peekCharCode())) {
	                                resulting_string += input.next();
	                            }
	                        }
	                    }
	                    return [resulting_string, 'TK_STRING'];
	                }
	
	                if (c === '#') {
	
	                    if (tokens.length === 0 && input.peek() === '!') {
	                        // shebang
	                        resulting_string = c;
	                        while (input.hasNext() && c !== '\n') {
	                            c = input.next();
	                            resulting_string += c;
	                        }
	                        return [trim(resulting_string) + '\n', 'TK_UNKNOWN'];
	                    }
	
	
	
	                    // Spidermonkey-specific sharp variables for circular references
	                    // https://developer.mozilla.org/En/Sharp_variables_in_JavaScript
	                    // http://mxr.mozilla.org/mozilla-central/source/js/src/jsscan.cpp around line 1935
	                    var sharp = '#';
	                    if (input.hasNext() && input.testChar(digit)) {
	                        do {
	                            c = input.next();
	                            sharp += c;
	                        } while (input.hasNext() && c !== '#' && c !== '=');
	                        if (c === '#') {
	                            //
	                        } else if (input.peek() === '[' && input.peek(1) === ']') {
	                            sharp += '[]';
	                            input.next();
	                            input.next();
	                        } else if (input.peek() === '{' && input.peek(1) === '}') {
	                            sharp += '{}';
	                            input.next();
	                            input.next();
	                        }
	                        return [sharp, 'TK_WORD'];
	                    }
	                }
	
	                if (c === '<' && (input.peek() === '?' || input.peek() === '%')) {
	                    input.back();
	                    var template_match = input.match(template_pattern);
	                    if (template_match) {
	                        c = template_match[0];
	                        c = c.replace(acorn.allLineBreaks, '\n');
	                        return [c, 'TK_STRING'];
	                    }
	                }
	
	                if (c === '<' && input.match(/\!--/g)) {
	                    c = '<!--';
	                    while (input.hasNext() && !input.testChar(acorn.newline)) {
	                        c += input.next();
	                    }
	                    in_html_comment = true;
	                    return [c, 'TK_COMMENT'];
	                }
	
	                if (c === '-' && in_html_comment && input.match(/->/g)) {
	                    in_html_comment = false;
	                    return ['-->', 'TK_COMMENT'];
	                }
	
	                if (c === '.') {
	                    return [c, 'TK_DOT'];
	                }
	
	                if (in_array(c, punct)) {
	                    while (input.hasNext() && in_array(c + input.peek(), punct)) {
	                        c += input.next();
	                        if (!input.hasNext()) {
	                            break;
	                        }
	                    }
	
	                    if (c === ',') {
	                        return [c, 'TK_COMMA'];
	                    } else if (c === '=') {
	                        return [c, 'TK_EQUALS'];
	                    } else {
	                        return [c, 'TK_OPERATOR'];
	                    }
	                }
	
	                return [c, 'TK_UNKNOWN'];
	            }
	
	
	            function unescape_string(s) {
	                // You think that a regex would work for this
	                // return s.replace(/\\x([0-9a-f]{2})/gi, function(match, val) {
	                //         return String.fromCharCode(parseInt(val, 16));
	                //     })
	                // However, dealing with '\xff', '\\xff', '\\\xff' makes this more fun.
	                var out = '',
	                    escaped = 0;
	
	                var input_scan = new InputScanner(s);
	                var matched = null;
	
	                while (input_scan.hasNext()) {
	                    // Keep any whitespace, non-slash characters
	                    // also keep slash pairs.
	                    matched = input_scan.match(/([\s]|[^\\]|\\\\)+/g);
	
	                    if (matched) {
	                        out += matched[0];
	                    }
	
	                    if (input_scan.peek() === '\\') {
	                        input_scan.next();
	                        if (input_scan.peek() === 'x') {
	                            matched = input_scan.match(/x([0-9A-Fa-f]{2})/g);
	                        } else if (input_scan.peek() === 'u') {
	                            matched = input_scan.match(/u([0-9A-Fa-f]{4})/g);
	                        } else {
	                            out += '\\';
	                            if (input_scan.hasNext()) {
	                                out += input_scan.next();
	                            }
	                            continue;
	                        }
	
	                        // If there's some error decoding, return the original string
	                        if (!matched) {
	                            return s;
	                        }
	
	                        escaped = parseInt(matched[1], 16);
	
	                        if (escaped > 0x7e && escaped <= 0xff && matched[0].indexOf('x') === 0) {
	                            // we bail out on \x7f..\xff,
	                            // leaving whole string escaped,
	                            // as it's probably completely binary
	                            return s;
	                        } else if (escaped >= 0x00 && escaped < 0x20) {
	                            // leave 0x00...0x1f escaped
	                            out += '\\' + matched[0];
	                            continue;
	                        } else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {
	                            // single-quote, apostrophe, backslash - escape these
	                            out += '\\' + String.fromCharCode(escaped);
	                        } else {
	                            out += String.fromCharCode(escaped);
	                        }
	                    }
	                }
	
	                return out;
	            }
	        }
	
	        var beautifier = new Beautifier(js_source_text, options);
	        return beautifier.beautify();
	
	    }
	
	    if (true) {
	        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	            return { js_beautify: js_beautify };
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        // Add support for CommonJS. Just put this file somewhere on your require.paths
	        // and you will be able to `var js_beautify = require("beautify").js_beautify`.
	        exports.js_beautify = js_beautify;
	    } else if (typeof window !== "undefined") {
	        // If we're running a web page and don't have either of the above, add our one global
	        window.js_beautify = js_beautify;
	    } else if (typeof global !== "undefined") {
	        // If we don't even have window, try global.
	        global.js_beautify = js_beautify;
	    }
	
	}());

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */
	/*
	
	  The MIT License (MIT)
	
	  Copyright (c) 2007-2013 Einar Lielmanis and contributors.
	
	  Permission is hereby granted, free of charge, to any person
	  obtaining a copy of this software and associated documentation files
	  (the "Software"), to deal in the Software without restriction,
	  including without limitation the rights to use, copy, modify, merge,
	  publish, distribute, sublicense, and/or sell copies of the Software,
	  and to permit persons to whom the Software is furnished to do so,
	  subject to the following conditions:
	
	  The above copyright notice and this permission notice shall be
	  included in all copies or substantial portions of the Software.
	
	  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
	  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	  SOFTWARE.
	
	
	 CSS Beautifier
	---------------
	
	    Written by Harutyun Amirjanyan, (amirjanyan@gmail.com)
	
	    Based on code initially developed by: Einar Lielmanis, <einar@jsbeautifier.org>
	        http://jsbeautifier.org/
	
	    Usage:
	        css_beautify(source_text);
	        css_beautify(source_text, options);
	
	    The options are (default in brackets):
	        indent_size (4)                         — indentation size,
	        indent_char (space)                     — character to indent with,
	        selector_separator_newline (true)       - separate selectors with newline or
	                                                  not (e.g. "a,\nbr" or "a, br")
	        end_with_newline (false)                - end with a newline
	        newline_between_rules (true)            - add a new line after every css rule
	        space_around_selector_separator (false) - ensure space around selector separators:
	                                                  '>', '+', '~' (e.g. "a>b" -> "a > b")
	    e.g
	
	    css_beautify(css_source_text, {
	      'indent_size': 1,
	      'indent_char': '\t',
	      'selector_separator': ' ',
	      'end_with_newline': false,
	      'newline_between_rules': true,
	      'space_around_selector_separator': true
	    });
	*/
	
	// http://www.w3.org/TR/CSS21/syndata.html#tokenization
	// http://www.w3.org/TR/css3-syntax/
	
	(function() {
	    function css_beautify(source_text, options) {
	        options = options || {};
	        source_text = source_text || '';
	        // HACK: newline parsing inconsistent. This brute force normalizes the input.
	        source_text = source_text.replace(/\r\n|[\r\u2028\u2029]/g, '\n');
	
	        var indentSize = options.indent_size || 4;
	        var indentCharacter = options.indent_char || ' ';
	        var selectorSeparatorNewline = (options.selector_separator_newline === undefined) ? true : options.selector_separator_newline;
	        var end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;
	        var newline_between_rules = (options.newline_between_rules === undefined) ? true : options.newline_between_rules;
	        var space_around_combinator = (options.space_around_combinator === undefined) ? false : options.space_around_combinator;
	        space_around_combinator = space_around_combinator || ((options.space_around_selector_separator === undefined) ? false : options.space_around_selector_separator);
	        var eol = options.eol ? options.eol : '\n';
	
	        // compatibility
	        if (typeof indentSize === "string") {
	            indentSize = parseInt(indentSize, 10);
	        }
	
	        if (options.indent_with_tabs) {
	            indentCharacter = '\t';
	            indentSize = 1;
	        }
	
	        eol = eol.replace(/\\r/, '\r').replace(/\\n/, '\n');
	
	
	        // tokenizer
	        var whiteRe = /^\s+$/;
	
	        var pos = -1,
	            ch;
	        var parenLevel = 0;
	
	        function next() {
	            ch = source_text.charAt(++pos);
	            return ch || '';
	        }
	
	        function peek(skipWhitespace) {
	            var result = '';
	            var prev_pos = pos;
	            if (skipWhitespace) {
	                eatWhitespace();
	            }
	            result = source_text.charAt(pos + 1) || '';
	            pos = prev_pos - 1;
	            next();
	            return result;
	        }
	
	        function eatString(endChars) {
	            var start = pos;
	            while (next()) {
	                if (ch === "\\") {
	                    next();
	                } else if (endChars.indexOf(ch) !== -1) {
	                    break;
	                } else if (ch === "\n") {
	                    break;
	                }
	            }
	            return source_text.substring(start, pos + 1);
	        }
	
	        function peekString(endChar) {
	            var prev_pos = pos;
	            var str = eatString(endChar);
	            pos = prev_pos - 1;
	            next();
	            return str;
	        }
	
	        function eatWhitespace() {
	            var result = '';
	            while (whiteRe.test(peek())) {
	                next();
	                result += ch;
	            }
	            return result;
	        }
	
	        function skipWhitespace() {
	            var result = '';
	            if (ch && whiteRe.test(ch)) {
	                result = ch;
	            }
	            while (whiteRe.test(next())) {
	                result += ch;
	            }
	            return result;
	        }
	
	        function eatComment(singleLine) {
	            var start = pos;
	            singleLine = peek() === "/";
	            next();
	            while (next()) {
	                if (!singleLine && ch === "*" && peek() === "/") {
	                    next();
	                    break;
	                } else if (singleLine && ch === "\n") {
	                    return source_text.substring(start, pos);
	                }
	            }
	
	            return source_text.substring(start, pos) + ch;
	        }
	
	
	        function lookBack(str) {
	            return source_text.substring(pos - str.length, pos).toLowerCase() ===
	                str;
	        }
	
	        // Nested pseudo-class if we are insideRule
	        // and the next special character found opens
	        // a new block
	        function foundNestedPseudoClass() {
	            var openParen = 0;
	            for (var i = pos + 1; i < source_text.length; i++) {
	                var ch = source_text.charAt(i);
	                if (ch === "{") {
	                    return true;
	                } else if (ch === '(') {
	                    // pseudoclasses can contain ()
	                    openParen += 1;
	                } else if (ch === ')') {
	                    if (openParen === 0) {
	                        return false;
	                    }
	                    openParen -= 1;
	                } else if (ch === ";" || ch === "}") {
	                    return false;
	                }
	            }
	            return false;
	        }
	
	        // printer
	        var basebaseIndentString = source_text.match(/^[\t ]*/)[0];
	        var singleIndent = new Array(indentSize + 1).join(indentCharacter);
	        var indentLevel = 0;
	        var nestedLevel = 0;
	
	        function indent() {
	            indentLevel++;
	            basebaseIndentString += singleIndent;
	        }
	
	        function outdent() {
	            indentLevel--;
	            basebaseIndentString = basebaseIndentString.slice(0, -indentSize);
	        }
	
	        var print = {};
	        print["{"] = function(ch) {
	            print.singleSpace();
	            output.push(ch);
	            print.newLine();
	        };
	        print["}"] = function(ch) {
	            print.newLine();
	            output.push(ch);
	            print.newLine();
	        };
	
	        print._lastCharWhitespace = function() {
	            return whiteRe.test(output[output.length - 1]);
	        };
	
	        print.newLine = function(keepWhitespace) {
	            if (output.length) {
	                if (!keepWhitespace && output[output.length - 1] !== '\n') {
	                    print.trim();
	                }
	
	                output.push('\n');
	
	                if (basebaseIndentString) {
	                    output.push(basebaseIndentString);
	                }
	            }
	        };
	        print.singleSpace = function() {
	            if (output.length && !print._lastCharWhitespace()) {
	                output.push(' ');
	            }
	        };
	
	        print.preserveSingleSpace = function() {
	            if (isAfterSpace) {
	                print.singleSpace();
	            }
	        };
	
	        print.trim = function() {
	            while (print._lastCharWhitespace()) {
	                output.pop();
	            }
	        };
	
	
	        var output = [];
	        /*_____________________--------------------_____________________*/
	
	        var insideRule = false;
	        var insidePropertyValue = false;
	        var enteringConditionalGroup = false;
	        var top_ch = '';
	        var last_top_ch = '';
	
	        while (true) {
	            var whitespace = skipWhitespace();
	            var isAfterSpace = whitespace !== '';
	            var isAfterNewline = whitespace.indexOf('\n') !== -1;
	            last_top_ch = top_ch;
	            top_ch = ch;
	
	            if (!ch) {
	                break;
	            } else if (ch === '/' && peek() === '*') { /* css comment */
	                var header = indentLevel === 0;
	
	                if (isAfterNewline || header) {
	                    print.newLine();
	                }
	
	                output.push(eatComment());
	                print.newLine();
	                if (header) {
	                    print.newLine(true);
	                }
	            } else if (ch === '/' && peek() === '/') { // single line comment
	                if (!isAfterNewline && last_top_ch !== '{') {
	                    print.trim();
	                }
	                print.singleSpace();
	                output.push(eatComment());
	                print.newLine();
	            } else if (ch === '@') {
	                print.preserveSingleSpace();
	
	                // deal with less propery mixins @{...}
	                if (peek() === '{') {
	                    output.push(eatString('}'));
	                } else {
	                    output.push(ch);
	
	                    // strip trailing space, if present, for hash property checks
	                    var variableOrRule = peekString(": ,;{}()[]/='\"");
	
	                    if (variableOrRule.match(/[ :]$/)) {
	                        // we have a variable or pseudo-class, add it and insert one space before continuing
	                        next();
	                        variableOrRule = eatString(": ").replace(/\s$/, '');
	                        output.push(variableOrRule);
	                        print.singleSpace();
	                    }
	
	                    variableOrRule = variableOrRule.replace(/\s$/, '');
	
	                    // might be a nesting at-rule
	                    if (variableOrRule in css_beautify.NESTED_AT_RULE) {
	                        nestedLevel += 1;
	                        if (variableOrRule in css_beautify.CONDITIONAL_GROUP_RULE) {
	                            enteringConditionalGroup = true;
	                        }
	                    }
	                }
	            } else if (ch === '#' && peek() === '{') {
	                print.preserveSingleSpace();
	                output.push(eatString('}'));
	            } else if (ch === '{') {
	                if (peek(true) === '}') {
	                    eatWhitespace();
	                    next();
	                    print.singleSpace();
	                    output.push("{}");
	                    print.newLine();
	                    if (newline_between_rules && indentLevel === 0) {
	                        print.newLine(true);
	                    }
	                } else {
	                    indent();
	                    print["{"](ch);
	                    // when entering conditional groups, only rulesets are allowed
	                    if (enteringConditionalGroup) {
	                        enteringConditionalGroup = false;
	                        insideRule = (indentLevel > nestedLevel);
	                    } else {
	                        // otherwise, declarations are also allowed
	                        insideRule = (indentLevel >= nestedLevel);
	                    }
	                }
	            } else if (ch === '}') {
	                outdent();
	                print["}"](ch);
	                insideRule = false;
	                insidePropertyValue = false;
	                if (nestedLevel) {
	                    nestedLevel--;
	                }
	                if (newline_between_rules && indentLevel === 0) {
	                    print.newLine(true);
	                }
	            } else if (ch === ":") {
	                eatWhitespace();
	                if ((insideRule || enteringConditionalGroup) &&
	                    !(lookBack("&") || foundNestedPseudoClass()) &&
	                    !lookBack("(")) {
	                    // 'property: value' delimiter
	                    // which could be in a conditional group query
	                    insidePropertyValue = true;
	                    output.push(':');
	                    print.singleSpace();
	                } else {
	                    // sass/less parent reference don't use a space
	                    // sass nested pseudo-class don't use a space
	
	                    // preserve space before pseudoclasses/pseudoelements, as it means "in any child"
	                    if (lookBack(" ") && output[output.length - 1] !== " ") {
	                        output.push(" ");
	                    }
	                    if (peek() === ":") {
	                        // pseudo-element
	                        next();
	                        output.push("::");
	                    } else {
	                        // pseudo-class
	                        output.push(':');
	                    }
	                }
	            } else if (ch === '"' || ch === '\'') {
	                print.preserveSingleSpace();
	                output.push(eatString(ch));
	            } else if (ch === ';') {
	                insidePropertyValue = false;
	                output.push(ch);
	                print.newLine();
	            } else if (ch === '(') { // may be a url
	                if (lookBack("url")) {
	                    output.push(ch);
	                    eatWhitespace();
	                    if (next()) {
	                        if (ch !== ')' && ch !== '"' && ch !== '\'') {
	                            output.push(eatString(')'));
	                        } else {
	                            pos--;
	                        }
	                    }
	                } else {
	                    parenLevel++;
	                    print.preserveSingleSpace();
	                    output.push(ch);
	                    eatWhitespace();
	                }
	            } else if (ch === ')') {
	                output.push(ch);
	                parenLevel--;
	            } else if (ch === ',') {
	                output.push(ch);
	                eatWhitespace();
	                if (selectorSeparatorNewline && !insidePropertyValue && parenLevel < 1) {
	                    print.newLine();
	                } else {
	                    print.singleSpace();
	                }
	            } else if ((ch === '>' || ch === '+' || ch === '~') &&
	                !insidePropertyValue && parenLevel < 1) {
	                //handle combinator spacing
	                if (space_around_combinator) {
	                    print.singleSpace();
	                    output.push(ch);
	                    print.singleSpace();
	                } else {
	                    output.push(ch);
	                    eatWhitespace();
	                    // squash extra whitespace
	                    if (ch && whiteRe.test(ch)) {
	                        ch = '';
	                    }
	                }
	            } else if (ch === ']') {
	                output.push(ch);
	            } else if (ch === '[') {
	                print.preserveSingleSpace();
	                output.push(ch);
	            } else if (ch === '=') { // no whitespace before or after
	                eatWhitespace();
	                ch = '=';
	                output.push(ch);
	            } else {
	                print.preserveSingleSpace();
	                output.push(ch);
	            }
	        }
	
	
	        var sweetCode = '';
	        if (basebaseIndentString) {
	            sweetCode += basebaseIndentString;
	        }
	
	        sweetCode += output.join('').replace(/[\r\n\t ]+$/, '');
	
	        // establish end_with_newline
	        if (end_with_newline) {
	            sweetCode += '\n';
	        }
	
	        if (eol !== '\n') {
	            sweetCode = sweetCode.replace(/[\n]/g, eol);
	        }
	
	        return sweetCode;
	    }
	
	    // https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule
	    css_beautify.NESTED_AT_RULE = {
	        "@page": true,
	        "@font-face": true,
	        "@keyframes": true,
	        // also in CONDITIONAL_GROUP_RULE below
	        "@media": true,
	        "@supports": true,
	        "@document": true
	    };
	    css_beautify.CONDITIONAL_GROUP_RULE = {
	        "@media": true,
	        "@supports": true,
	        "@document": true
	    };
	
	    /*global define */
	    if (true) {
	        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	            return {
	                css_beautify: css_beautify
	            };
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        // Add support for CommonJS. Just put this file somewhere on your require.paths
	        // and you will be able to `var html_beautify = require("beautify").html_beautify`.
	        exports.css_beautify = css_beautify;
	    } else if (typeof window !== "undefined") {
	        // If we're running a web page and don't have either of the above, add our one global
	        window.css_beautify = css_beautify;
	    } else if (typeof global !== "undefined") {
	        // If we don't even have window, try global.
	        global.css_beautify = css_beautify;
	    }
	
	}());

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */
	/*
	
	  The MIT License (MIT)
	
	  Copyright (c) 2007-2013 Einar Lielmanis and contributors.
	
	  Permission is hereby granted, free of charge, to any person
	  obtaining a copy of this software and associated documentation files
	  (the "Software"), to deal in the Software without restriction,
	  including without limitation the rights to use, copy, modify, merge,
	  publish, distribute, sublicense, and/or sell copies of the Software,
	  and to permit persons to whom the Software is furnished to do so,
	  subject to the following conditions:
	
	  The above copyright notice and this permission notice shall be
	  included in all copies or substantial portions of the Software.
	
	  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
	  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	  SOFTWARE.
	
	
	 Style HTML
	---------------
	
	  Written by Nochum Sossonko, (nsossonko@hotmail.com)
	
	  Based on code initially developed by: Einar Lielmanis, <einar@jsbeautifier.org>
	    http://jsbeautifier.org/
	
	  Usage:
	    style_html(html_source);
	
	    style_html(html_source, options);
	
	  The options are:
	    indent_inner_html (default false)  — indent <head> and <body> sections,
	    indent_size (default 4)          — indentation size,
	    indent_char (default space)      — character to indent with,
	    wrap_line_length (default 250)            -  maximum amount of characters per line (0 = disable)
	    brace_style (default "collapse") - "collapse" | "expand" | "end-expand" | "none"
	            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.
	    unformatted (defaults to inline tags) - list of tags, that shouldn't be reformatted
	    indent_scripts (default normal)  - "keep"|"separate"|"normal"
	    preserve_newlines (default true) - whether existing line breaks before elements should be preserved
	                                        Only works before elements, not inside tags or for text.
	    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk
	    indent_handlebars (default false) - format and indent {{#foo}} and {{/foo}}
	    end_with_newline (false)          - end with a newline
	    extra_liners (default [head,body,/html]) -List of tags that should have an extra newline before them.
	
	    e.g.
	
	    style_html(html_source, {
	      'indent_inner_html': false,
	      'indent_size': 2,
	      'indent_char': ' ',
	      'wrap_line_length': 78,
	      'brace_style': 'expand',
	      'preserve_newlines': true,
	      'max_preserve_newlines': 5,
	      'indent_handlebars': false,
	      'extra_liners': ['/html']
	    });
	*/
	
	(function() {
	
	    // function trim(s) {
	    //     return s.replace(/^\s+|\s+$/g, '');
	    // }
	
	    function ltrim(s) {
	        return s.replace(/^\s+/g, '');
	    }
	
	    function rtrim(s) {
	        return s.replace(/\s+$/g, '');
	    }
	
	    function style_html(html_source, options, js_beautify, css_beautify) {
	        //Wrapper function to invoke all the necessary constructors and deal with the output.
	
	        var multi_parser,
	            indent_inner_html,
	            indent_body_inner_html,
	            indent_head_inner_html,
	            indent_size,
	            indent_character,
	            wrap_line_length,
	            brace_style,
	            unformatted,
	            preserve_newlines,
	            max_preserve_newlines,
	            indent_handlebars,
	            wrap_attributes,
	            wrap_attributes_indent_size,
	            end_with_newline,
	            extra_liners,
	            eol;
	
	        options = options || {};
	
	        // backwards compatibility to 1.3.4
	        if ((options.wrap_line_length === undefined || parseInt(options.wrap_line_length, 10) === 0) &&
	            (options.max_char !== undefined && parseInt(options.max_char, 10) !== 0)) {
	            options.wrap_line_length = options.max_char;
	        }
	
	        indent_inner_html = (options.indent_inner_html === undefined) ? false : options.indent_inner_html;
	        indent_body_inner_html = (options.indent_body_inner_html === undefined) ? true : options.indent_body_inner_html;
	        indent_head_inner_html = (options.indent_head_inner_html === undefined) ? true : options.indent_head_inner_html;
	        indent_size = (options.indent_size === undefined) ? 4 : parseInt(options.indent_size, 10);
	        indent_character = (options.indent_char === undefined) ? ' ' : options.indent_char;
	        brace_style = (options.brace_style === undefined) ? 'collapse' : options.brace_style;
	        wrap_line_length = parseInt(options.wrap_line_length, 10) === 0 ? 32786 : parseInt(options.wrap_line_length || 250, 10);
	        unformatted = options.unformatted || [
	            // https://www.w3.org/TR/html5/dom.html#phrasing-content
	            'a', 'abbr', 'area', 'audio', 'b', 'bdi', 'bdo', 'br', 'button', 'canvas', 'cite',
	            'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img',
	            'input', 'ins', 'kbd', 'keygen', 'label', 'map', 'mark', 'math', 'meter', 'noscript',
	            'object', 'output', 'progress', 'q', 'ruby', 's', 'samp', /* 'script', */ 'select', 'small',
	            'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'var',
	            'video', 'wbr', 'text',
	            // prexisting - not sure of full effect of removing, leaving in
	            'acronym', 'address', 'big', 'dt', 'ins', 'small', 'strike', 'tt',
	            'pre',
	        ];
	        preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;
	        max_preserve_newlines = preserve_newlines ?
	            (isNaN(parseInt(options.max_preserve_newlines, 10)) ? 32786 : parseInt(options.max_preserve_newlines, 10)) :
	            0;
	        indent_handlebars = (options.indent_handlebars === undefined) ? false : options.indent_handlebars;
	        wrap_attributes = (options.wrap_attributes === undefined) ? 'auto' : options.wrap_attributes;
	        wrap_attributes_indent_size = (isNaN(parseInt(options.wrap_attributes_indent_size, 10))) ? indent_size : parseInt(options.wrap_attributes_indent_size, 10);
	        end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;
	        extra_liners = (typeof options.extra_liners === 'object') && options.extra_liners ?
	            options.extra_liners.concat() : (typeof options.extra_liners === 'string') ?
	            options.extra_liners.split(',') : 'head,body,/html'.split(',');
	        eol = options.eol ? options.eol : '\n';
	
	        if (options.indent_with_tabs) {
	            indent_character = '\t';
	            indent_size = 1;
	        }
	
	        eol = eol.replace(/\\r/, '\r').replace(/\\n/, '\n');
	
	        function Parser() {
	
	            this.pos = 0; //Parser position
	            this.token = '';
	            this.current_mode = 'CONTENT'; //reflects the current Parser mode: TAG/CONTENT
	            this.tags = { //An object to hold tags, their position, and their parent-tags, initiated with default values
	                parent: 'parent1',
	                parentcount: 1,
	                parent1: ''
	            };
	            this.tag_type = '';
	            this.token_text = this.last_token = this.last_text = this.token_type = '';
	            this.newlines = 0;
	            this.indent_content = indent_inner_html;
	            this.indent_body_inner_html = indent_body_inner_html;
	            this.indent_head_inner_html = indent_head_inner_html;
	
	            this.Utils = { //Uilities made available to the various functions
	                whitespace: "\n\r\t ".split(''),
	
	                single_token: [
	                    // HTLM void elements - aka self-closing tags - aka singletons
	                    // https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements
	                    'area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',
	                    'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr',
	                    // NOTE: Optional tags - are not understood.
	                    // https://www.w3.org/TR/html5/syntax.html#optional-tags
	                    // The rules for optional tags are too complex for a simple list
	                    // Also, the content of these tags should still be indented in many cases.
	                    // 'li' is a good exmple.
	
	                    // Doctype and xml elements
	                    '!doctype', '?xml',
	                    // ?php tag
	                    '?php',
	                    // other tags that were in this list, keeping just in case
	                    'basefont', 'isindex'
	                ],
	                extra_liners: extra_liners, //for tags that need a line of whitespace before them
	                in_array: function(what, arr) {
	                    for (var i = 0; i < arr.length; i++) {
	                        if (what === arr[i]) {
	                            return true;
	                        }
	                    }
	                    return false;
	                }
	            };
	
	            // Return true if the given text is composed entirely of whitespace.
	            this.is_whitespace = function(text) {
	                for (var n = 0; n < text.length; n++) {
	                    if (!this.Utils.in_array(text.charAt(n), this.Utils.whitespace)) {
	                        return false;
	                    }
	                }
	                return true;
	            };
	
	            this.traverse_whitespace = function() {
	                var input_char = '';
	
	                input_char = this.input.charAt(this.pos);
	                if (this.Utils.in_array(input_char, this.Utils.whitespace)) {
	                    this.newlines = 0;
	                    while (this.Utils.in_array(input_char, this.Utils.whitespace)) {
	                        if (preserve_newlines && input_char === '\n' && this.newlines <= max_preserve_newlines) {
	                            this.newlines += 1;
	                        }
	
	                        this.pos++;
	                        input_char = this.input.charAt(this.pos);
	                    }
	                    return true;
	                }
	                return false;
	            };
	
	            // Append a space to the given content (string array) or, if we are
	            // at the wrap_line_length, append a newline/indentation.
	            // return true if a newline was added, false if a space was added
	            this.space_or_wrap = function(content) {
	                if (this.line_char_count >= this.wrap_line_length) { //insert a line when the wrap_line_length is reached
	                    this.print_newline(false, content);
	                    this.print_indentation(content);
	                    return true;
	                } else {
	                    this.line_char_count++;
	                    content.push(' ');
	                    return false;
	                }
	            };
	
	            this.get_content = function() { //function to capture regular content between tags
	                var input_char = '',
	                    content = [];
	
	                while (this.input.charAt(this.pos) !== '<') {
	                    if (this.pos >= this.input.length) {
	                        return content.length ? content.join('') : ['', 'TK_EOF'];
	                    }
	
	                    if (this.traverse_whitespace()) {
	                        this.space_or_wrap(content);
	                        continue;
	                    }
	
	                    if (indent_handlebars) {
	                        // Handlebars parsing is complicated.
	                        // {{#foo}} and {{/foo}} are formatted tags.
	                        // {{something}} should get treated as content, except:
	                        // {{else}} specifically behaves like {{#if}} and {{/if}}
	                        var peek3 = this.input.substr(this.pos, 3);
	                        if (peek3 === '{{#' || peek3 === '{{/') {
	                            // These are tags and not content.
	                            break;
	                        } else if (peek3 === '{{!') {
	                            return [this.get_tag(), 'TK_TAG_HANDLEBARS_COMMENT'];
	                        } else if (this.input.substr(this.pos, 2) === '{{') {
	                            if (this.get_tag(true) === '{{else}}') {
	                                break;
	                            }
	                        }
	                    }
	
	                    input_char = this.input.charAt(this.pos);
	                    this.pos++;
	                    this.line_char_count++;
	                    content.push(input_char); //letter at-a-time (or string) inserted to an array
	                }
	                return content.length ? content.join('') : '';
	            };
	
	            this.get_contents_to = function(name) { //get the full content of a script or style to pass to js_beautify
	                if (this.pos === this.input.length) {
	                    return ['', 'TK_EOF'];
	                }
	                var content = '';
	                var reg_match = new RegExp('</' + name + '\\s*>', 'igm');
	                reg_match.lastIndex = this.pos;
	                var reg_array = reg_match.exec(this.input);
	                var end_script = reg_array ? reg_array.index : this.input.length; //absolute end of script
	                if (this.pos < end_script) { //get everything in between the script tags
	                    content = this.input.substring(this.pos, end_script);
	                    this.pos = end_script;
	                }
	                return content;
	            };
	
	            this.record_tag = function(tag) { //function to record a tag and its parent in this.tags Object
	                if (this.tags[tag + 'count']) { //check for the existence of this tag type
	                    this.tags[tag + 'count']++;
	                    this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level
	                } else { //otherwise initialize this tag type
	                    this.tags[tag + 'count'] = 1;
	                    this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level
	                }
	                this.tags[tag + this.tags[tag + 'count'] + 'parent'] = this.tags.parent; //set the parent (i.e. in the case of a div this.tags.div1parent)
	                this.tags.parent = tag + this.tags[tag + 'count']; //and make this the current parent (i.e. in the case of a div 'div1')
	            };
	
	            this.retrieve_tag = function(tag) { //function to retrieve the opening tag to the corresponding closer
	                if (this.tags[tag + 'count']) { //if the openener is not in the Object we ignore it
	                    var temp_parent = this.tags.parent; //check to see if it's a closable tag.
	                    while (temp_parent) { //till we reach '' (the initial value);
	                        if (tag + this.tags[tag + 'count'] === temp_parent) { //if this is it use it
	                            break;
	                        }
	                        temp_parent = this.tags[temp_parent + 'parent']; //otherwise keep on climbing up the DOM Tree
	                    }
	                    if (temp_parent) { //if we caught something
	                        this.indent_level = this.tags[tag + this.tags[tag + 'count']]; //set the indent_level accordingly
	                        this.tags.parent = this.tags[temp_parent + 'parent']; //and set the current parent
	                    }
	                    delete this.tags[tag + this.tags[tag + 'count'] + 'parent']; //delete the closed tags parent reference...
	                    delete this.tags[tag + this.tags[tag + 'count']]; //...and the tag itself
	                    if (this.tags[tag + 'count'] === 1) {
	                        delete this.tags[tag + 'count'];
	                    } else {
	                        this.tags[tag + 'count']--;
	                    }
	                }
	            };
	
	            this.indent_to_tag = function(tag) {
	                // Match the indentation level to the last use of this tag, but don't remove it.
	                if (!this.tags[tag + 'count']) {
	                    return;
	                }
	                var temp_parent = this.tags.parent;
	                while (temp_parent) {
	                    if (tag + this.tags[tag + 'count'] === temp_parent) {
	                        break;
	                    }
	                    temp_parent = this.tags[temp_parent + 'parent'];
	                }
	                if (temp_parent) {
	                    this.indent_level = this.tags[tag + this.tags[tag + 'count']];
	                }
	            };
	
	            this.get_tag = function(peek) { //function to get a full tag and parse its type
	                var input_char = '',
	                    content = [],
	                    comment = '',
	                    space = false,
	                    first_attr = true,
	                    tag_start, tag_end,
	                    tag_start_char,
	                    orig_pos = this.pos,
	                    orig_line_char_count = this.line_char_count;
	
	                peek = peek !== undefined ? peek : false;
	
	                do {
	                    if (this.pos >= this.input.length) {
	                        if (peek) {
	                            this.pos = orig_pos;
	                            this.line_char_count = orig_line_char_count;
	                        }
	                        return content.length ? content.join('') : ['', 'TK_EOF'];
	                    }
	
	                    input_char = this.input.charAt(this.pos);
	                    this.pos++;
	
	                    if (this.Utils.in_array(input_char, this.Utils.whitespace)) { //don't want to insert unnecessary space
	                        space = true;
	                        continue;
	                    }
	
	                    if (input_char === "'" || input_char === '"') {
	                        input_char += this.get_unformatted(input_char);
	                        space = true;
	
	                    }
	
	                    if (input_char === '=') { //no space before =
	                        space = false;
	                    }
	
	                    if (content.length && content[content.length - 1] !== '=' && input_char !== '>' && space) {
	                        //no space after = or before >
	                        var wrapped = this.space_or_wrap(content);
	                        var indentAttrs = wrapped && input_char !== '/' && wrap_attributes !== 'force';
	                        space = false;
	                        if (!first_attr && wrap_attributes === 'force' && input_char !== '/') {
	                            this.print_newline(false, content);
	                            this.print_indentation(content);
	                            indentAttrs = true;
	                        }
	                        if (indentAttrs) {
	                            //indent attributes an auto or forced line-wrap
	                            for (var count = 0; count < wrap_attributes_indent_size; count++) {
	                                content.push(indent_character);
	                            }
	                        }
	                        for (var i = 0; i < content.length; i++) {
	                            if (content[i] === ' ') {
	                                first_attr = false;
	                                break;
	                            }
	                        }
	                    }
	
	                    if (indent_handlebars && tag_start_char === '<') {
	                        // When inside an angle-bracket tag, put spaces around
	                        // handlebars not inside of strings.
	                        if ((input_char + this.input.charAt(this.pos)) === '{{') {
	                            input_char += this.get_unformatted('}}');
	                            if (content.length && content[content.length - 1] !== ' ' && content[content.length - 1] !== '<') {
	                                input_char = ' ' + input_char;
	                            }
	                            space = true;
	                        }
	                    }
	
	                    if (input_char === '<' && !tag_start_char) {
	                        tag_start = this.pos - 1;
	                        tag_start_char = '<';
	                    }
	
	                    if (indent_handlebars && !tag_start_char) {
	                        if (content.length >= 2 && content[content.length - 1] === '{' && content[content.length - 2] === '{') {
	                            if (input_char === '#' || input_char === '/' || input_char === '!') {
	                                tag_start = this.pos - 3;
	                            } else {
	                                tag_start = this.pos - 2;
	                            }
	                            tag_start_char = '{';
	                        }
	                    }
	
	                    this.line_char_count++;
	                    content.push(input_char); //inserts character at-a-time (or string)
	
	                    if (content[1] && (content[1] === '!' || content[1] === '?' || content[1] === '%')) { //if we're in a comment, do something special
	                        // We treat all comments as literals, even more than preformatted tags
	                        // we just look for the appropriate close tag
	                        content = [this.get_comment(tag_start)];
	                        break;
	                    }
	
	                    if (indent_handlebars && content[1] && content[1] === '{' && content[2] && content[2] === '!') { //if we're in a comment, do something special
	                        // We treat all comments as literals, even more than preformatted tags
	                        // we just look for the appropriate close tag
	                        content = [this.get_comment(tag_start)];
	                        break;
	                    }
	
	                    if (indent_handlebars && tag_start_char === '{' && content.length > 2 && content[content.length - 2] === '}' && content[content.length - 1] === '}') {
	                        break;
	                    }
	                } while (input_char !== '>');
	
	                var tag_complete = content.join('');
	                var tag_index;
	                var tag_offset;
	
	                if (tag_complete.indexOf(' ') !== -1) { //if there's whitespace, thats where the tag name ends
	                    tag_index = tag_complete.indexOf(' ');
	                } else if (tag_complete.charAt(0) === '{') {
	                    tag_index = tag_complete.indexOf('}');
	                } else { //otherwise go with the tag ending
	                    tag_index = tag_complete.indexOf('>');
	                }
	                if (tag_complete.charAt(0) === '<' || !indent_handlebars) {
	                    tag_offset = 1;
	                } else {
	                    tag_offset = tag_complete.charAt(2) === '#' ? 3 : 2;
	                }
	                var tag_check = tag_complete.substring(tag_offset, tag_index).toLowerCase();
	                if (tag_complete.charAt(tag_complete.length - 2) === '/' ||
	                    this.Utils.in_array(tag_check, this.Utils.single_token)) { //if this tag name is a single tag type (either in the list or has a closing /)
	                    if (!peek) {
	                        this.tag_type = 'SINGLE';
	                    }
	                } else if (indent_handlebars && tag_complete.charAt(0) === '{' && tag_check === 'else') {
	                    if (!peek) {
	                        this.indent_to_tag('if');
	                        this.tag_type = 'HANDLEBARS_ELSE';
	                        this.indent_content = true;
	                        this.traverse_whitespace();
	                    }
	                } else if (this.is_unformatted(tag_check, unformatted)) { // do not reformat the "unformatted" tags
	                    comment = this.get_unformatted('</' + tag_check + '>', tag_complete); //...delegate to get_unformatted function
	                    content.push(comment);
	                    tag_end = this.pos - 1;
	                    this.tag_type = 'SINGLE';
	                } else if (tag_check === 'script' &&
	                    (tag_complete.search('type') === -1 ||
	                        (tag_complete.search('type') > -1 &&
	                            tag_complete.search(/\b(text|application|dojo)\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\+)?json|method|aspect)/) > -1))) {
	                    if (!peek) {
	                        this.record_tag(tag_check);
	                        this.tag_type = 'SCRIPT';
	                    }
	                } else if (tag_check === 'style' &&
	                    (tag_complete.search('type') === -1 ||
	                        (tag_complete.search('type') > -1 && tag_complete.search('text/css') > -1))) {
	                    if (!peek) {
	                        this.record_tag(tag_check);
	                        this.tag_type = 'STYLE';
	                    }
	                } else if (tag_check.charAt(0) === '!') { //peek for <! comment
	                    // for comments content is already correct.
	                    if (!peek) {
	                        this.tag_type = 'SINGLE';
	                        this.traverse_whitespace();
	                    }
	                } else if (!peek) {
	                    if (tag_check.charAt(0) === '/') { //this tag is a double tag so check for tag-ending
	                        this.retrieve_tag(tag_check.substring(1)); //remove it and all ancestors
	                        this.tag_type = 'END';
	                    } else { //otherwise it's a start-tag
	                        this.record_tag(tag_check); //push it on the tag stack
	                        if (tag_check.toLowerCase() !== 'html') {
	                            this.indent_content = true;
	                        }
	                        this.tag_type = 'START';
	                    }
	
	                    // Allow preserving of newlines after a start or end tag
	                    if (this.traverse_whitespace()) {
	                        this.space_or_wrap(content);
	                    }
	
	                    if (this.Utils.in_array(tag_check, this.Utils.extra_liners)) { //check if this double needs an extra line
	                        this.print_newline(false, this.output);
	                        if (this.output.length && this.output[this.output.length - 2] !== '\n') {
	                            this.print_newline(true, this.output);
	                        }
	                    }
	                }
	
	                if (peek) {
	                    this.pos = orig_pos;
	                    this.line_char_count = orig_line_char_count;
	                }
	
	                return content.join(''); //returns fully formatted tag
	            };
	
	            this.get_comment = function(start_pos) { //function to return comment content in its entirety
	                // this is will have very poor perf, but will work for now.
	                var comment = '',
	                    delimiter = '>',
	                    matched = false;
	
	                this.pos = start_pos;
	                var input_char = this.input.charAt(this.pos);
	                this.pos++;
	
	                while (this.pos <= this.input.length) {
	                    comment += input_char;
	
	                    // only need to check for the delimiter if the last chars match
	                    if (comment.charAt(comment.length - 1) === delimiter.charAt(delimiter.length - 1) &&
	                        comment.indexOf(delimiter) !== -1) {
	                        break;
	                    }
	
	                    // only need to search for custom delimiter for the first few characters
	                    if (!matched && comment.length < 10) {
	                        if (comment.indexOf('<![if') === 0) { //peek for <![if conditional comment
	                            delimiter = '<![endif]>';
	                            matched = true;
	                        } else if (comment.indexOf('<![cdata[') === 0) { //if it's a <[cdata[ comment...
	                            delimiter = ']]>';
	                            matched = true;
	                        } else if (comment.indexOf('<![') === 0) { // some other ![ comment? ...
	                            delimiter = ']>';
	                            matched = true;
	                        } else if (comment.indexOf('<!--') === 0) { // <!-- comment ...
	                            delimiter = '-->';
	                            matched = true;
	                        } else if (comment.indexOf('{{!') === 0) { // {{! handlebars comment
	                            delimiter = '}}';
	                            matched = true;
	                        } else if (comment.indexOf('<?') === 0) { // {{! handlebars comment
	                            delimiter = '?>';
	                            matched = true;
	                        } else if (comment.indexOf('<%') === 0) { // {{! handlebars comment
	                            delimiter = '%>';
	                            matched = true;
	                        }
	                    }
	
	                    input_char = this.input.charAt(this.pos);
	                    this.pos++;
	                }
	
	                return comment;
	            };
	
	            function tokenMatcher(delimiter) {
	                var token = '';
	
	                var add = function(str) {
	                    var newToken = token + str.toLowerCase();
	                    token = newToken.length <= delimiter.length ? newToken : newToken.substr(newToken.length - delimiter.length, delimiter.length);
	                };
	
	                var doesNotMatch = function() {
	                    return token.indexOf(delimiter) === -1;
	                };
	
	                return {
	                    add: add,
	                    doesNotMatch: doesNotMatch
	                };
	            }
	
	            this.get_unformatted = function(delimiter, orig_tag) { //function to return unformatted content in its entirety
	                if (orig_tag && orig_tag.toLowerCase().indexOf(delimiter) !== -1) {
	                    return '';
	                }
	                var input_char = '';
	                var content = '';
	                var space = true;
	
	                var delimiterMatcher = tokenMatcher(delimiter);
	
	                do {
	
	                    if (this.pos >= this.input.length) {
	                        return content;
	                    }
	
	                    input_char = this.input.charAt(this.pos);
	                    this.pos++;
	
	                    if (this.Utils.in_array(input_char, this.Utils.whitespace)) {
	                        if (!space) {
	                            this.line_char_count--;
	                            continue;
	                        }
	                        if (input_char === '\n' || input_char === '\r') {
	                            content += '\n';
	                            /*  Don't change tab indention for unformatted blocks.  If using code for html editing, this will greatly affect <pre> tags if they are specified in the 'unformatted array'
	                for (var i=0; i<this.indent_level; i++) {
	                  content += this.indent_string;
	                }
	                space = false; //...and make sure other indentation is erased
	                */
	                            this.line_char_count = 0;
	                            continue;
	                        }
	                    }
	                    content += input_char;
	                    delimiterMatcher.add(input_char);
	                    this.line_char_count++;
	                    space = true;
	
	                    if (indent_handlebars && input_char === '{' && content.length && content.charAt(content.length - 2) === '{') {
	                        // Handlebars expressions in strings should also be unformatted.
	                        content += this.get_unformatted('}}');
	                        // Don't consider when stopping for delimiters.
	                    }
	                } while (delimiterMatcher.doesNotMatch());
	
	                return content;
	            };
	
	            this.get_token = function() { //initial handler for token-retrieval
	                var token;
	
	                if (this.last_token === 'TK_TAG_SCRIPT' || this.last_token === 'TK_TAG_STYLE') { //check if we need to format javascript
	                    var type = this.last_token.substr(7);
	                    token = this.get_contents_to(type);
	                    if (typeof token !== 'string') {
	                        return token;
	                    }
	                    return [token, 'TK_' + type];
	                }
	                if (this.current_mode === 'CONTENT') {
	                    token = this.get_content();
	                    if (typeof token !== 'string') {
	                        return token;
	                    } else {
	                        return [token, 'TK_CONTENT'];
	                    }
	                }
	
	                if (this.current_mode === 'TAG') {
	                    token = this.get_tag();
	                    if (typeof token !== 'string') {
	                        return token;
	                    } else {
	                        var tag_name_type = 'TK_TAG_' + this.tag_type;
	                        return [token, tag_name_type];
	                    }
	                }
	            };
	
	            this.get_full_indent = function(level) {
	                level = this.indent_level + level || 0;
	                if (level < 1) {
	                    return '';
	                }
	
	                return Array(level + 1).join(this.indent_string);
	            };
	
	            this.is_unformatted = function(tag_check, unformatted) {
	                //is this an HTML5 block-level link?
	                if (!this.Utils.in_array(tag_check, unformatted)) {
	                    return false;
	                }
	
	                if (tag_check.toLowerCase() !== 'a' || !this.Utils.in_array('a', unformatted)) {
	                    return true;
	                }
	
	                //at this point we have an  tag; is its first child something we want to remain
	                //unformatted?
	                var next_tag = this.get_tag(true /* peek. */ );
	
	                // test next_tag to see if it is just html tag (no external content)
	                var tag = (next_tag || "").match(/^\s*<\s*\/?([a-z]*)\s*[^>]*>\s*$/);
	
	                // if next_tag comes back but is not an isolated tag, then
	                // let's treat the 'a' tag as having content
	                // and respect the unformatted option
	                if (!tag || this.Utils.in_array(tag, unformatted)) {
	                    return true;
	                } else {
	                    return false;
	                }
	            };
	
	            this.printer = function(js_source, indent_character, indent_size, wrap_line_length, brace_style) { //handles input/output and some other printing functions
	
	                this.input = js_source || ''; //gets the input for the Parser
	
	                // HACK: newline parsing inconsistent. This brute force normalizes the input.
	                this.input = this.input.replace(/\r\n|[\r\u2028\u2029]/g, '\n');
	
	                this.output = [];
	                this.indent_character = indent_character;
	                this.indent_string = '';
	                this.indent_size = indent_size;
	                this.brace_style = brace_style;
	                this.indent_level = 0;
	                this.wrap_line_length = wrap_line_length;
	                this.line_char_count = 0; //count to see if wrap_line_length was exceeded
	
	                for (var i = 0; i < this.indent_size; i++) {
	                    this.indent_string += this.indent_character;
	                }
	
	                this.print_newline = function(force, arr) {
	                    this.line_char_count = 0;
	                    if (!arr || !arr.length) {
	                        return;
	                    }
	                    if (force || (arr[arr.length - 1] !== '\n')) { //we might want the extra line
	                        if ((arr[arr.length - 1] !== '\n')) {
	                            arr[arr.length - 1] = rtrim(arr[arr.length - 1]);
	                        }
	                        arr.push('\n');
	                    }
	                };
	
	                this.print_indentation = function(arr) {
	                    for (var i = 0; i < this.indent_level; i++) {
	                        arr.push(this.indent_string);
	                        this.line_char_count += this.indent_string.length;
	                    }
	                };
	
	                this.print_token = function(text) {
	                    // Avoid printing initial whitespace.
	                    if (this.is_whitespace(text) && !this.output.length) {
	                        return;
	                    }
	                    if (text || text !== '') {
	                        if (this.output.length && this.output[this.output.length - 1] === '\n') {
	                            this.print_indentation(this.output);
	                            text = ltrim(text);
	                        }
	                    }
	                    this.print_token_raw(text);
	                };
	
	                this.print_token_raw = function(text) {
	                    // If we are going to print newlines, truncate trailing
	                    // whitespace, as the newlines will represent the space.
	                    if (this.newlines > 0) {
	                        text = rtrim(text);
	                    }
	
	                    if (text && text !== '') {
	                        if (text.length > 1 && text.charAt(text.length - 1) === '\n') {
	                            // unformatted tags can grab newlines as their last character
	                            this.output.push(text.slice(0, -1));
	                            this.print_newline(false, this.output);
	                        } else {
	                            this.output.push(text);
	                        }
	                    }
	
	                    for (var n = 0; n < this.newlines; n++) {
	                        this.print_newline(n > 0, this.output);
	                    }
	                    this.newlines = 0;
	                };
	
	                this.indent = function() {
	                    this.indent_level++;
	                };
	
	                this.unindent = function() {
	                    if (this.indent_level > 0) {
	                        this.indent_level--;
	                    }
	                };
	            };
	            return this;
	        }
	
	        /*_____________________--------------------_____________________*/
	
	        multi_parser = new Parser(); //wrapping functions Parser
	        multi_parser.printer(html_source, indent_character, indent_size, wrap_line_length, brace_style); //initialize starting values
	
	        while (true) {
	            var t = multi_parser.get_token();
	            multi_parser.token_text = t[0];
	            multi_parser.token_type = t[1];
	
	            if (multi_parser.token_type === 'TK_EOF') {
	                break;
	            }
	
	            switch (multi_parser.token_type) {
	                case 'TK_TAG_START':
	                    multi_parser.print_newline(false, multi_parser.output);
	                    multi_parser.print_token(multi_parser.token_text);
	                    if (multi_parser.indent_content) {
	                        if ((multi_parser.indent_body_inner_html || !multi_parser.token_text.match(/<body(?:.*)>/)) &&
	                            (multi_parser.indent_head_inner_html || !multi_parser.token_text.match(/<head(?:.*)>/))) {
	
	                            multi_parser.indent();
	                        }
	
	                        multi_parser.indent_content = false;
	                    }
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_STYLE':
	                case 'TK_TAG_SCRIPT':
	                    multi_parser.print_newline(false, multi_parser.output);
	                    multi_parser.print_token(multi_parser.token_text);
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_END':
	                    //Print new line only if the tag has no content and has child
	                    if (multi_parser.last_token === 'TK_CONTENT' && multi_parser.last_text === '') {
	                        var tag_name = (multi_parser.token_text.match(/\w+/) || [])[0];
	                        var tag_extracted_from_last_output = null;
	                        if (multi_parser.output.length) {
	                            tag_extracted_from_last_output = multi_parser.output[multi_parser.output.length - 1].match(/(?:<|{{#)\s*(\w+)/);
	                        }
	                        if (tag_extracted_from_last_output === null ||
	                            (tag_extracted_from_last_output[1] !== tag_name && !multi_parser.Utils.in_array(tag_extracted_from_last_output[1], unformatted))) {
	                            multi_parser.print_newline(false, multi_parser.output);
	                        }
	                    }
	                    multi_parser.print_token(multi_parser.token_text);
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_SINGLE':
	                    // Don't add a newline before elements that should remain unformatted.
	                    var tag_check = multi_parser.token_text.match(/^\s*<([a-z-]+)/i);
	                    if (!tag_check || !multi_parser.Utils.in_array(tag_check[1], unformatted)) {
	                        multi_parser.print_newline(false, multi_parser.output);
	                    }
	                    multi_parser.print_token(multi_parser.token_text);
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_HANDLEBARS_ELSE':
	                    // Don't add a newline if opening {{#if}} tag is on the current line
	                    var foundIfOnCurrentLine = false;
	                    for (var lastCheckedOutput = multi_parser.output.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {
	                        if (multi_parser.output[lastCheckedOutput] === '\n') {
	                            break;
	                        } else {
	                            if (multi_parser.output[lastCheckedOutput].match(/{{#if/)) {
	                                foundIfOnCurrentLine = true;
	                                break;
	                            }
	                        }
	                    }
	                    if (!foundIfOnCurrentLine) {
	                        multi_parser.print_newline(false, multi_parser.output);
	                    }
	                    multi_parser.print_token(multi_parser.token_text);
	                    if (multi_parser.indent_content) {
	                        multi_parser.indent();
	                        multi_parser.indent_content = false;
	                    }
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_HANDLEBARS_COMMENT':
	                    multi_parser.print_token(multi_parser.token_text);
	                    multi_parser.current_mode = 'TAG';
	                    break;
	                case 'TK_CONTENT':
	                    multi_parser.print_token(multi_parser.token_text);
	                    multi_parser.current_mode = 'TAG';
	                    break;
	                case 'TK_STYLE':
	                case 'TK_SCRIPT':
	                    if (multi_parser.token_text !== '') {
	                        multi_parser.print_newline(false, multi_parser.output);
	                        var text = multi_parser.token_text,
	                            _beautifier,
	                            script_indent_level = 1;
	                        if (multi_parser.token_type === 'TK_SCRIPT') {
	                            _beautifier = typeof js_beautify === 'function' && js_beautify;
	                        } else if (multi_parser.token_type === 'TK_STYLE') {
	                            _beautifier = typeof css_beautify === 'function' && css_beautify;
	                        }
	
	                        if (options.indent_scripts === "keep") {
	                            script_indent_level = 0;
	                        } else if (options.indent_scripts === "separate") {
	                            script_indent_level = -multi_parser.indent_level;
	                        }
	
	                        var indentation = multi_parser.get_full_indent(script_indent_level);
	                        if (_beautifier) {
	
	                            // call the Beautifier if avaliable
	                            var Child_options = function() {
	                                this.eol = '\n';
	                            };
	                            Child_options.prototype = options;
	                            var child_options = new Child_options();
	                            text = _beautifier(text.replace(/^\s*/, indentation), child_options);
	                        } else {
	                            // simply indent the string otherwise
	                            var white = text.match(/^\s*/)[0];
	                            var _level = white.match(/[^\n\r]*$/)[0].split(multi_parser.indent_string).length - 1;
	                            var reindent = multi_parser.get_full_indent(script_indent_level - _level);
	                            text = text.replace(/^\s*/, indentation)
	                                .replace(/\r\n|\r|\n/g, '\n' + reindent)
	                                .replace(/\s+$/, '');
	                        }
	                        if (text) {
	                            multi_parser.print_token_raw(text);
	                            multi_parser.print_newline(true, multi_parser.output);
	                        }
	                    }
	                    multi_parser.current_mode = 'TAG';
	                    break;
	                default:
	                    // We should not be getting here but we don't want to drop input on the floor
	                    // Just output the text and move on
	                    if (multi_parser.token_text !== '') {
	                        multi_parser.print_token(multi_parser.token_text);
	                    }
	                    break;
	            }
	            multi_parser.last_token = multi_parser.token_type;
	            multi_parser.last_text = multi_parser.token_text;
	        }
	        var sweet_code = multi_parser.output.join('').replace(/[\r\n\t ]+$/, '');
	
	        // establish end_with_newline
	        if (end_with_newline) {
	            sweet_code += '\n';
	        }
	
	        if (eol !== '\n') {
	            sweet_code = sweet_code.replace(/[\n]/g, eol);
	        }
	
	        return sweet_code;
	    }
	
	    if (true) {
	        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, __webpack_require__(324), __webpack_require__(325)], __WEBPACK_AMD_DEFINE_RESULT__ = function(requireamd) {
	            var js_beautify = __webpack_require__(324);
	            var css_beautify = __webpack_require__(325);
	
	            return {
	                html_beautify: function(html_source, options) {
	                    return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);
	                }
	            };
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        // Add support for CommonJS. Just put this file somewhere on your require.paths
	        // and you will be able to `var html_beautify = require("beautify").html_beautify`.
	        var js_beautify = require('./beautify.js');
	        var css_beautify = require('./beautify-css.js');
	
	        exports.html_beautify = function(html_source, options) {
	            return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);
	        };
	    } else if (typeof window !== "undefined") {
	        // If we're running a web page and don't have either of the above, add our one global
	        window.html_beautify = function(html_source, options) {
	            return style_html(html_source, options, window.js_beautify, window.css_beautify);
	        };
	    } else if (typeof global !== "undefined") {
	        // If we don't even have window, try global.
	        global.html_beautify = function(html_source, options) {
	            return style_html(html_source, options, global.js_beautify, global.css_beautify);
	        };
	    }
	
	}());

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var core_1 = __webpack_require__(268);
	var http_1 = __webpack_require__(328);
	var Observable_1 = __webpack_require__(270);
	__webpack_require__(329);
	var http = __webpack_require__(331);
	var https = __webpack_require__(332);
	var url = __webpack_require__(333);
	var tokens_1 = __webpack_require__(334);
	var helper_1 = __webpack_require__(297);
	var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';
	var PreloadHttp = (function (_super) {
	    __extends(PreloadHttp, _super);
	    function PreloadHttp(_backend, _defaultOptions) {
	        _super.call(this, _backend, _defaultOptions);
	        this._backend = _backend;
	        this._defaultOptions = _defaultOptions;
	        this._async = 0;
	    }
	    PreloadHttp.prototype.preload = function (_url, factory) {
	        var _this = this;
	        var obs = new core_1.EventEmitter(false);
	        this._async += 1;
	        var request = factory();
	        request
	            .subscribe({
	            next: function (response) {
	                obs.next(response);
	            },
	            error: function (e) {
	                obs.error(e);
	                _this._async -= 1;
	            },
	            complete: function () {
	                obs.complete();
	                _this._async -= 1;
	            }
	        });
	        return obs;
	    };
	    PreloadHttp.prototype.request = function (url, options) {
	        var _this = this;
	        return this.preload(url, function () { return _super.prototype.request.call(_this, url, options); });
	    };
	    PreloadHttp.prototype.get = function (url, options) {
	        var _this = this;
	        return this.preload(url, function () { return _super.prototype.get.call(_this, url, options); });
	    };
	    PreloadHttp.prototype.post = function (url, body, options) {
	        var _this = this;
	        return this.preload(url, function () { return _super.prototype.post.call(_this, url, body, options); });
	    };
	    PreloadHttp.prototype.put = function (url, body, options) {
	        var _this = this;
	        return this.preload(url, function () { return _super.prototype.put.call(_this, url, body, options); });
	    };
	    PreloadHttp.prototype.delete = function (url, options) {
	        var _this = this;
	        return this.preload(url, function () { return _super.prototype.delete.call(_this, url, options); });
	    };
	    PreloadHttp.prototype.patch = function (url, body, options) {
	        var _this = this;
	        return this.preload(url, function () { return _super.prototype.patch.call(_this, url, body, options); });
	    };
	    PreloadHttp.prototype.head = function (url, options) {
	        var _this = this;
	        return this.preload(url, function () { return _super.prototype.head.call(_this, url, options); });
	    };
	    return PreloadHttp;
	}(http_1.Http));
	exports.PreloadHttp = PreloadHttp;
	var NodeConnection = (function () {
	    function NodeConnection(req, baseResponseOptions, originUrl, baseUrl) {
	        if (originUrl === void 0) { originUrl = ''; }
	        this.setDetectedContentType = http_1.XHRConnection.prototype.setDetectedContentType;
	        this.request = req;
	        baseUrl = baseUrl || '/';
	        if (originUrl === null) {
	            throw new Error('ERROR: Please move ORIGIN_URL to platformProviders');
	        }
	        var _reqInfo = url.parse(url.resolve(url.resolve(originUrl, baseUrl), req.url));
	        _reqInfo.method = http_1.RequestMethod[req.method].toUpperCase();
	        if (helper_1.isPresent(req.headers)) {
	            _reqInfo.headers = {};
	            req.headers.forEach(function (values, name) { return _reqInfo.headers[name] = values.join(','); });
	        }
	        _reqInfo.headers = _reqInfo.headers || {};
	        _reqInfo.headers['user-agent'] = _reqInfo.headers['user-agent'] || 'Angular 2 Universal';
	        this.response = new Observable_1.Observable(function (responseObserver) {
	            var nodeReq;
	            var xhrHttp = http;
	            if (_reqInfo.protocol === 'https:') {
	                xhrHttp = https;
	            }
	            nodeReq = xhrHttp.request(_reqInfo, function (res) {
	                var body = '';
	                res.on('data', function (chunk) { return body += chunk; });
	                var status = res.statusCode;
	                var headers = new http_1.Headers(res.headers);
	                var url = res.url;
	                res.on('end', function () {
	                    var responseOptions = new http_1.ResponseOptions({ body: body, status: status, headers: headers, url: url });
	                    var response = new http_1.Response(responseOptions);
	                    if (helper_1.isSuccess(status)) {
	                        responseObserver.next(response);
	                        responseObserver.complete();
	                        return;
	                    }
	                    responseObserver.error(response);
	                });
	            });
	            var onError = function (err) {
	                var responseOptions = new http_1.ResponseOptions({ body: err, type: http_1.ResponseType.Error });
	                if (helper_1.isPresent(baseResponseOptions)) {
	                    responseOptions = baseResponseOptions.merge(responseOptions);
	                }
	                responseObserver.error(new http_1.Response(responseOptions));
	            };
	            nodeReq.on('error', onError);
	            nodeReq.write(req.text());
	            nodeReq.end();
	            return function () {
	                nodeReq.removeListener('error', onError);
	                nodeReq.abort();
	            };
	        });
	    }
	    NodeConnection.decorators = [
	        { type: core_1.Injectable },
	    ];
	    NodeConnection.ctorParameters = [
	        { type: http_1.Request, },
	        { type: http_1.ResponseOptions, },
	        { type: undefined, decorators: [{ type: core_1.Inject, args: [tokens_1.ORIGIN_URL,] },] },
	        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [tokens_1.APP_BASE_HREF,] },] },
	    ];
	    return NodeConnection;
	}());
	exports.NodeConnection = NodeConnection;
	var NodeBackend = (function (_super) {
	    __extends(NodeBackend, _super);
	    function NodeBackend(baseResponseOptions, _browserXHR, _xsrfStrategy, _ngZone, _baseUrl, _originUrl) {
	        _super.call(this, _browserXHR, baseResponseOptions, _xsrfStrategy);
	        this.baseResponseOptions = baseResponseOptions;
	        this._baseUrl = _baseUrl;
	        this._originUrl = _originUrl;
	    }
	    NodeBackend.prototype.createConnection = function (request) {
	        return new NodeConnection(request, this.baseResponseOptions, this._baseUrl, this._originUrl);
	    };
	    NodeBackend.decorators = [
	        { type: core_1.Injectable },
	    ];
	    NodeBackend.ctorParameters = [
	        { type: http_1.ResponseOptions, },
	        { type: http_1.BrowserXhr, },
	        { type: http_1.XSRFStrategy, },
	        { type: core_1.NgZone, },
	        { type: undefined, decorators: [{ type: core_1.Inject, args: [tokens_1.APP_BASE_HREF,] },] },
	        { type: undefined, decorators: [{ type: core_1.Inject, args: [tokens_1.ORIGIN_URL,] },] },
	    ];
	    return NodeBackend;
	}(http_1.XHRBackend));
	exports.NodeBackend = NodeBackend;
	var NodeJSONPConnection = (function () {
	    function NodeJSONPConnection(req, baseResponseOptions, ngZone, originUrl, baseUrl) {
	        if (originUrl === void 0) { originUrl = ''; }
	        if (req.method !== http_1.RequestMethod.Get) {
	            throw new TypeError(JSONP_ERR_WRONG_METHOD);
	        }
	        this.request = req;
	        baseUrl = baseUrl || '/';
	        if (originUrl === null) {
	            throw new Error('ERROR: Please move ORIGIN_URL to platformProviders');
	        }
	        var _reqInfo = url.parse(url.resolve(url.resolve(originUrl, baseUrl), req.url));
	        _reqInfo.method = http_1.RequestMethod[req.method].toUpperCase();
	        if (helper_1.isPresent(req.headers)) {
	            _reqInfo.headers = {};
	            req.headers.forEach(function (values, name) { return _reqInfo.headers[name] = values.join(','); });
	        }
	        _reqInfo.headers = _reqInfo.headers || {};
	        _reqInfo.headers['user-agent'] = _reqInfo.headers['user-agent'] || 'Angular 2 Universal';
	        this.response = new Observable_1.Observable(function (responseObserver) {
	            var nodeReq;
	            var xhrHttp = http;
	            function DONE(response) {
	                responseObserver.next(response);
	                responseObserver.complete();
	            }
	            var __done = Zone.current.wrap(DONE, 'jsonp');
	            if (_reqInfo.protocol === 'https:') {
	                xhrHttp = https;
	            }
	            nodeReq = xhrHttp.request(_reqInfo, function (res) {
	                var body = '';
	                res.on('data', function (chunk) { return body += chunk; });
	                var status = res.statusCode;
	                var headers = new http_1.Headers(res.headers);
	                var url = res.url;
	                res.on('end', function () {
	                    var responseJson;
	                    try {
	                        if (body.indexOf('JSONP_CALLBACK') === -1) {
	                            throw new Error('Http request ' + req.url + ' did not return the response with JSONP_CALLBACK()');
	                        }
	                        var responseFactory = new Function('JSONP_CALLBACK', body);
	                        responseFactory(function (json) {
	                            responseJson = json;
	                        });
	                    }
	                    catch (e) {
	                        console.log('JSONP Error:', e);
	                        return onError(e);
	                    }
	                    var responseOptions = new http_1.ResponseOptions({ body: responseJson, status: status, headers: headers, url: url });
	                    var response = new http_1.Response(responseOptions);
	                    if (helper_1.isSuccess(status)) {
	                        __done(response);
	                        return;
	                    }
	                    ngZone.run(function () {
	                        responseObserver.error(response);
	                    });
	                });
	            });
	            function onError(err) {
	                var responseOptions = new http_1.ResponseOptions({ body: err, type: http_1.ResponseType.Error });
	                if (helper_1.isPresent(baseResponseOptions)) {
	                    responseOptions = baseResponseOptions.merge(responseOptions);
	                }
	                responseObserver.error(new http_1.Response(responseOptions));
	            }
	            ;
	            nodeReq.on('error', onError);
	            nodeReq.end();
	            return function () {
	                nodeReq.removeListener('error', onError);
	                nodeReq.abort();
	            };
	        });
	    }
	    NodeJSONPConnection.ctorParameters = [
	        { type: http_1.Request, },
	        { type: http_1.ResponseOptions, },
	        { type: core_1.NgZone, },
	        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [tokens_1.ORIGIN_URL,] },] },
	        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [tokens_1.APP_BASE_HREF,] },] },
	    ];
	    return NodeJSONPConnection;
	}());
	exports.NodeJSONPConnection = NodeJSONPConnection;
	var NodeJsonpBackend = (function (_super) {
	    __extends(NodeJsonpBackend, _super);
	    function NodeJsonpBackend() {
	        _super.apply(this, arguments);
	    }
	    return NodeJsonpBackend;
	}(http_1.ConnectionBackend));
	exports.NodeJsonpBackend = NodeJsonpBackend;
	var NodeJsonpBackend_ = (function (_super) {
	    __extends(NodeJsonpBackend_, _super);
	    function NodeJsonpBackend_(_baseResponseOptions, _ngZone, _baseUrl, _originUrl) {
	        _super.call(this);
	        this._baseResponseOptions = _baseResponseOptions;
	        this._ngZone = _ngZone;
	        this._baseUrl = _baseUrl;
	        this._originUrl = _originUrl;
	    }
	    NodeJsonpBackend_.prototype.createConnection = function (request) {
	        return new NodeJSONPConnection(request, this._baseResponseOptions, this._ngZone, this._baseUrl, this._originUrl);
	    };
	    NodeJsonpBackend_.decorators = [
	        { type: core_1.Injectable },
	    ];
	    NodeJsonpBackend_.ctorParameters = [
	        { type: http_1.ResponseOptions, },
	        { type: core_1.NgZone, },
	        { type: undefined, decorators: [{ type: core_1.Inject, args: [tokens_1.APP_BASE_HREF,] },] },
	        { type: undefined, decorators: [{ type: core_1.Inject, args: [tokens_1.ORIGIN_URL,] },] },
	    ];
	    return NodeJsonpBackend_;
	}(NodeJsonpBackend));
	exports.NodeJsonpBackend_ = NodeJsonpBackend_;
	function _noop() {
	}
	exports._noop = _noop;
	exports.NODE_HTTP_PROVIDERS_COMMON = [
	    { provide: http_1.XSRFStrategy, useValue: _noop },
	    { provide: http_1.BrowserXhr, useValue: _noop },
	    { provide: http_1.RequestOptions, useClass: http_1.BaseRequestOptions },
	    { provide: http_1.ResponseOptions, useClass: http_1.BaseResponseOptions }
	];
	exports.NODE_HTTP_PROVIDERS = exports.NODE_HTTP_PROVIDERS_COMMON.concat([
	    { provide: http_1.Http, useFactory: httpFactory, deps: [http_1.XHRBackend, http_1.RequestOptions] },
	    { provide: http_1.XHRBackend, useClass: NodeBackend },
	]);
	exports.NODE_JSONP_PROVIDERS = exports.NODE_HTTP_PROVIDERS_COMMON.concat([
	    { provide: http_1.Jsonp, useFactory: jsonpFactory, deps: [http_1.JSONPBackend, http_1.RequestOptions] },
	    { provide: http_1.JSONPBackend, useClass: NodeJsonpBackend_ },
	]);
	function httpFactory(xhrBackend, requestOptions) {
	    return new PreloadHttp(xhrBackend, requestOptions);
	}
	exports.httpFactory = httpFactory;
	function jsonpFactory(jsonpBackend, requestOptions) {
	    return new PreloadHttp(jsonpBackend, requestOptions);
	}
	exports.jsonpFactory = jsonpFactory;
	var NodeHttpModule = (function () {
	    function NodeHttpModule() {
	    }
	    NodeHttpModule.forRoot = function (config) {
	        if (config === void 0) { config = {}; }
	        return NodeHttpModule.withConfig(config);
	    };
	    NodeHttpModule.withConfig = function (config) {
	        if (config === void 0) { config = {}; }
	        var providers = [];
	        if (config.baseUrl) {
	            providers.push({ provide: tokens_1.APP_BASE_HREF, useValue: config.baseUrl });
	        }
	        if (config.requestUrl) {
	            providers.push({ provide: tokens_1.REQUEST_URL, useValue: config.requestUrl });
	        }
	        if (config.originUrl) {
	            providers.push({ provide: tokens_1.ORIGIN_URL, useValue: config.originUrl });
	        }
	        return {
	            ngModule: NodeHttpModule,
	            providers: providers
	        };
	    };
	    NodeHttpModule.decorators = [
	        { type: core_1.NgModule, args: [{
	                    providers: exports.NODE_HTTP_PROVIDERS
	                },] },
	    ];
	    NodeHttpModule.ctorParameters = [];
	    return NodeHttpModule;
	}());
	exports.NodeHttpModule = NodeHttpModule;
	var NodeJsonpModule = (function () {
	    function NodeJsonpModule() {
	    }
	    NodeJsonpModule.forRoot = function (config) {
	        if (config === void 0) { config = {}; }
	        return NodeJsonpModule.withConfig(config);
	    };
	    NodeJsonpModule.withConfig = function (config) {
	        if (config === void 0) { config = {}; }
	        var providers = [];
	        if (config.baseUrl) {
	            providers.push({ provide: tokens_1.APP_BASE_HREF, useValue: config.baseUrl });
	        }
	        if (config.requestUrl) {
	            providers.push({ provide: tokens_1.REQUEST_URL, useValue: config.requestUrl });
	        }
	        if (config.originUrl) {
	            providers.push({ provide: tokens_1.ORIGIN_URL, useValue: config.originUrl });
	        }
	        return {
	            ngModule: NodeJsonpModule,
	            providers: providers
	        };
	    };
	    NodeJsonpModule.decorators = [
	        { type: core_1.NgModule, args: [{
	                    providers: exports.NODE_JSONP_PROVIDERS
	                },] },
	    ];
	    NodeJsonpModule.ctorParameters = [];
	    return NodeJsonpModule;
	}());
	exports.NodeJsonpModule = NodeJsonpModule;
	//# sourceMappingURL=node-http.js.map

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v2.3.1
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(268), __webpack_require__(270), __webpack_require__(286)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/Observable', '@angular/platform-browser'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.http = global.ng.http || {}),global.ng.core,global.Rx,global.ng.platformBrowser));
	}(this, function (exports,_angular_core,rxjs_Observable,_angular_platformBrowser) { 'use strict';
	
	    /**
	     *  A backend for http that uses the `XMLHttpRequest` browser API.
	      * *
	      * Take care not to evaluate this in non-browser contexts.
	      * *
	     */
	    var BrowserXhr = (function () {
	        function BrowserXhr() {
	        }
	        /**
	         * @return {?}
	         */
	        BrowserXhr.prototype.build = function () { return ((new XMLHttpRequest())); };
	        BrowserXhr.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        BrowserXhr.ctorParameters = function () { return []; };
	        return BrowserXhr;
	    }());
	
	    var RequestMethod = {};
	    RequestMethod.Get = 0;
	    RequestMethod.Post = 1;
	    RequestMethod.Put = 2;
	    RequestMethod.Delete = 3;
	    RequestMethod.Options = 4;
	    RequestMethod.Head = 5;
	    RequestMethod.Patch = 6;
	    RequestMethod[RequestMethod.Get] = "Get";
	    RequestMethod[RequestMethod.Post] = "Post";
	    RequestMethod[RequestMethod.Put] = "Put";
	    RequestMethod[RequestMethod.Delete] = "Delete";
	    RequestMethod[RequestMethod.Options] = "Options";
	    RequestMethod[RequestMethod.Head] = "Head";
	    RequestMethod[RequestMethod.Patch] = "Patch";
	    var ReadyState = {};
	    ReadyState.Unsent = 0;
	    ReadyState.Open = 1;
	    ReadyState.HeadersReceived = 2;
	    ReadyState.Loading = 3;
	    ReadyState.Done = 4;
	    ReadyState.Cancelled = 5;
	    ReadyState[ReadyState.Unsent] = "Unsent";
	    ReadyState[ReadyState.Open] = "Open";
	    ReadyState[ReadyState.HeadersReceived] = "HeadersReceived";
	    ReadyState[ReadyState.Loading] = "Loading";
	    ReadyState[ReadyState.Done] = "Done";
	    ReadyState[ReadyState.Cancelled] = "Cancelled";
	    var ResponseType = {};
	    ResponseType.Basic = 0;
	    ResponseType.Cors = 1;
	    ResponseType.Default = 2;
	    ResponseType.Error = 3;
	    ResponseType.Opaque = 4;
	    ResponseType[ResponseType.Basic] = "Basic";
	    ResponseType[ResponseType.Cors] = "Cors";
	    ResponseType[ResponseType.Default] = "Default";
	    ResponseType[ResponseType.Error] = "Error";
	    ResponseType[ResponseType.Opaque] = "Opaque";
	    var ContentType = {};
	    ContentType.NONE = 0;
	    ContentType.JSON = 1;
	    ContentType.FORM = 2;
	    ContentType.FORM_DATA = 3;
	    ContentType.TEXT = 4;
	    ContentType.BLOB = 5;
	    ContentType.ARRAY_BUFFER = 6;
	    ContentType[ContentType.NONE] = "NONE";
	    ContentType[ContentType.JSON] = "JSON";
	    ContentType[ContentType.FORM] = "FORM";
	    ContentType[ContentType.FORM_DATA] = "FORM_DATA";
	    ContentType[ContentType.TEXT] = "TEXT";
	    ContentType[ContentType.BLOB] = "BLOB";
	    ContentType[ContentType.ARRAY_BUFFER] = "ARRAY_BUFFER";
	    var ResponseContentType = {};
	    ResponseContentType.Text = 0;
	    ResponseContentType.Json = 1;
	    ResponseContentType.ArrayBuffer = 2;
	    ResponseContentType.Blob = 3;
	    ResponseContentType[ResponseContentType.Text] = "Text";
	    ResponseContentType[ResponseContentType.Json] = "Json";
	    ResponseContentType[ResponseContentType.ArrayBuffer] = "ArrayBuffer";
	    ResponseContentType[ResponseContentType.Blob] = "Blob";
	
	    /**
	     *  Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as
	      * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).
	      * *
	      * The only known difference between this `Headers` implementation and the spec is the
	      * lack of an `entries` method.
	      * *
	      * ### Example
	      * *
	      * ```
	      * import {Headers} from '@angular/http';
	      * *
	      * var firstHeaders = new Headers();
	      * firstHeaders.append('Content-Type', 'image/jpeg');
	      * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'
	      * *
	      * // Create headers from Plain Old JavaScript Object
	      * var secondHeaders = new Headers({
	      * 'X-My-Custom-Header': 'Angular'
	      * });
	      * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'
	      * *
	      * var thirdHeaders = new Headers(secondHeaders);
	      * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'
	      * ```
	      * *
	     */
	    var Headers = (function () {
	        /**
	         * @param {?=} headers
	         */
	        function Headers(headers) {
	            var _this = this;
	            /** @internal header names are lower case */
	            this._headers = new Map();
	            /** @internal map lower case names to actual names */
	            this._normalizedNames = new Map();
	            if (!headers) {
	                return;
	            }
	            if (headers instanceof Headers) {
	                headers.forEach(function (values, name) {
	                    values.forEach(function (value) { return _this.append(name, value); });
	                });
	                return;
	            }
	            Object.keys(headers).forEach(function (name) {
	                var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];
	                _this.delete(name);
	                values.forEach(function (value) { return _this.append(name, value); });
	            });
	        }
	        /**
	         *  Returns a new Headers instance from the given DOMString of Response Headers
	         * @param {?} headersString
	         * @return {?}
	         */
	        Headers.fromResponseHeaderString = function (headersString) {
	            var /** @type {?} */ headers = new Headers();
	            headersString.split('\n').forEach(function (line) {
	                var /** @type {?} */ index = line.indexOf(':');
	                if (index > 0) {
	                    var /** @type {?} */ name_1 = line.slice(0, index);
	                    var /** @type {?} */ value = line.slice(index + 1).trim();
	                    headers.set(name_1, value);
	                }
	            });
	            return headers;
	        };
	        /**
	         *  Appends a header to existing list of header values for a given header name.
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        Headers.prototype.append = function (name, value) {
	            var /** @type {?} */ values = this.getAll(name);
	            if (values === null) {
	                this.set(name, value);
	            }
	            else {
	                values.push(value);
	            }
	        };
	        /**
	         *  Deletes all header values for the given name.
	         * @param {?} name
	         * @return {?}
	         */
	        Headers.prototype.delete = function (name) {
	            var /** @type {?} */ lcName = name.toLowerCase();
	            this._normalizedNames.delete(lcName);
	            this._headers.delete(lcName);
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        Headers.prototype.forEach = function (fn) {
	            var _this = this;
	            this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });
	        };
	        /**
	         *  Returns first header that matches given name.
	         * @param {?} name
	         * @return {?}
	         */
	        Headers.prototype.get = function (name) {
	            var /** @type {?} */ values = this.getAll(name);
	            if (values === null) {
	                return null;
	            }
	            return values.length > 0 ? values[0] : null;
	        };
	        /**
	         *  Checks for existence of header by given name.
	         * @param {?} name
	         * @return {?}
	         */
	        Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };
	        /**
	         *  Returns the names of the headers
	         * @return {?}
	         */
	        Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };
	        /**
	         *  Sets or overrides header value for given name.
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        Headers.prototype.set = function (name, value) {
	            if (Array.isArray(value)) {
	                if (value.length) {
	                    this._headers.set(name.toLowerCase(), [value.join(',')]);
	                }
	            }
	            else {
	                this._headers.set(name.toLowerCase(), [value]);
	            }
	            this.mayBeSetNormalizedName(name);
	        };
	        /**
	         *  Returns values of all headers.
	         * @return {?}
	         */
	        Headers.prototype.values = function () { return Array.from(this._headers.values()); };
	        /**
	         * @return {?}
	         */
	        Headers.prototype.toJSON = function () {
	            var _this = this;
	            var /** @type {?} */ serialized = {};
	            this._headers.forEach(function (values, name) {
	                var /** @type {?} */ split = [];
	                values.forEach(function (v) { return split.push.apply(split, v.split(',')); });
	                serialized[_this._normalizedNames.get(name)] = split;
	            });
	            return serialized;
	        };
	        /**
	         *  Returns list of header values for a given name.
	         * @param {?} name
	         * @return {?}
	         */
	        Headers.prototype.getAll = function (name) {
	            return this.has(name) ? this._headers.get(name.toLowerCase()) : null;
	        };
	        /**
	         *  This method is not implemented.
	         * @return {?}
	         */
	        Headers.prototype.entries = function () { throw new Error('"entries" method is not implemented on Headers class'); };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        Headers.prototype.mayBeSetNormalizedName = function (name) {
	            var /** @type {?} */ lcName = name.toLowerCase();
	            if (!this._normalizedNames.has(lcName)) {
	                this._normalizedNames.set(lcName, name);
	            }
	        };
	        return Headers;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     *  Creates a response options object to be optionally provided when instantiating a
	      * {@link Response}.
	      * *
	      * This class is based on the `ResponseInit` description in the [Fetch
	      * Spec](https://fetch.spec.whatwg.org/#responseinit).
	      * *
	      * All values are null by default. Typical defaults can be found in the
	      * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.
	      * *
	      * This class may be used in tests to build {@link Response Responses} for
	      * mock responses (see {@link MockBackend}).
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))
	      * *
	      * ```typescript
	      * import {ResponseOptions, Response} from '@angular/http';
	      * *
	      * var options = new ResponseOptions({
	      * body: '{"name":"Jeff"}'
	      * });
	      * var res = new Response(options);
	      * *
	      * console.log('res.json():', res.json()); // Object {name: "Jeff"}
	      * ```
	      * *
	     */
	    var ResponseOptions = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function ResponseOptions(_a) {
	            var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;
	            this.body = body != null ? body : null;
	            this.status = status != null ? status : null;
	            this.headers = headers != null ? headers : null;
	            this.statusText = statusText != null ? statusText : null;
	            this.type = type != null ? type : null;
	            this.url = url != null ? url : null;
	        }
	        /**
	         *  Creates a copy of the `ResponseOptions` instance, using the optional input as values to
	          * override
	          * existing values. This method will not change the values of the instance on which it is being
	          * called.
	          * *
	          * This may be useful when sharing a base `ResponseOptions` object inside tests,
	          * where certain properties may change from test to test.
	          * *
	          * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))
	          * *
	          * ```typescript
	          * import {ResponseOptions, Response} from '@angular/http';
	          * *
	          * var options = new ResponseOptions({
	          * body: {name: 'Jeff'}
	          * });
	          * var res = new Response(options.merge({
	          * url: 'https://google.com'
	          * }));
	          * console.log('options.url:', options.url); // null
	          * console.log('res.json():', res.json()); // Object {name: "Jeff"}
	          * console.log('res.url:', res.url); // https://google.com
	          * ```
	         * @param {?=} options
	         * @return {?}
	         */
	        ResponseOptions.prototype.merge = function (options) {
	            return new ResponseOptions({
	                body: options && options.body != null ? options.body : this.body,
	                status: options && options.status != null ? options.status : this.status,
	                headers: options && options.headers != null ? options.headers : this.headers,
	                statusText: options && options.statusText != null ? options.statusText : this.statusText,
	                type: options && options.type != null ? options.type : this.type,
	                url: options && options.url != null ? options.url : this.url,
	            });
	        };
	        return ResponseOptions;
	    }());
	    /**
	     *  Subclass of {@link ResponseOptions}, with default values.
	      * *
	      * Default values:
	      * * status: 200
	      * * headers: empty {@link Headers} object
	      * *
	      * This class could be extended and bound to the {@link ResponseOptions} class
	      * when configuring an {@link Injector}, in order to override the default options
	      * used by {@link Http} to create {@link Response Responses}.
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))
	      * *
	      * ```typescript
	      * import {provide} from '@angular/core';
	      * import {bootstrap} from '@angular/platform-browser/browser';
	      * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from
	      * '@angular/http';
	      * import {App} from './myapp';
	      * *
	      * class MyOptions extends BaseResponseOptions {
	      * headers:Headers = new Headers({network: 'github'});
	      * }
	      * *
	      * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);
	      * ```
	      * *
	      * The options could also be extended when manually creating a {@link Response}
	      * object.
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))
	      * *
	      * ```
	      * import {BaseResponseOptions, Response} from '@angular/http';
	      * *
	      * var options = new BaseResponseOptions();
	      * var res = new Response(options.merge({
	      * body: 'Angular',
	      * headers: new Headers({framework: 'angular'})
	      * }));
	      * console.log('res.headers.get("framework"):', res.headers.get('framework')); // angular
	      * console.log('res.text():', res.text()); // Angular;
	      * ```
	      * *
	     */
	    var BaseResponseOptions = (function (_super) {
	        __extends$1(BaseResponseOptions, _super);
	        function BaseResponseOptions() {
	            _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() });
	        }
	        BaseResponseOptions.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        BaseResponseOptions.ctorParameters = function () { return []; };
	        return BaseResponseOptions;
	    }(ResponseOptions));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     *  Abstract class from which real backends are derived.
	      * *
	      * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given
	      * {@link Request}.
	      * *
	     * @abstract
	     */
	    var ConnectionBackend = (function () {
	        function ConnectionBackend() {
	        }
	        /**
	         * @abstract
	         * @param {?} request
	         * @return {?}
	         */
	        ConnectionBackend.prototype.createConnection = function (request) { };
	        return ConnectionBackend;
	    }());
	    /**
	     *  Abstract class from which real connections are derived.
	      * *
	     * @abstract
	     */
	    var Connection = (function () {
	        function Connection() {
	        }
	        return Connection;
	    }());
	    /**
	     *  An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.
	      * *
	     * @abstract
	     */
	    var XSRFStrategy = (function () {
	        function XSRFStrategy() {
	        }
	        /**
	         * @abstract
	         * @param {?} req
	         * @return {?}
	         */
	        XSRFStrategy.prototype.configureRequest = function (req) { };
	        return XSRFStrategy;
	    }());
	
	    /**
	     * @param {?} method
	     * @return {?}
	     */
	    function normalizeMethodName(method) {
	        if (typeof method !== 'string')
	            return method;
	        switch (method.toUpperCase()) {
	            case 'GET':
	                return RequestMethod.Get;
	            case 'POST':
	                return RequestMethod.Post;
	            case 'PUT':
	                return RequestMethod.Put;
	            case 'DELETE':
	                return RequestMethod.Delete;
	            case 'OPTIONS':
	                return RequestMethod.Options;
	            case 'HEAD':
	                return RequestMethod.Head;
	            case 'PATCH':
	                return RequestMethod.Patch;
	        }
	        throw new Error("Invalid request method. The method \"" + method + "\" is not supported.");
	    }
	    var /** @type {?} */ isSuccess = function (status) { return (status >= 200 && status < 300); };
	    /**
	     * @param {?} xhr
	     * @return {?}
	     */
	    function getResponseURL(xhr) {
	        if ('responseURL' in xhr) {
	            return xhr.responseURL;
	        }
	        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
	            return xhr.getResponseHeader('X-Request-URL');
	        }
	        return;
	    }
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    function stringToArrayBuffer(input) {
	        var /** @type {?} */ view = new Uint16Array(input.length);
	        for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {
	            view[i] = input.charCodeAt(i);
	        }
	        return view.buffer;
	    }
	
	    /**
	     * @license undefined
	      * Copyright Google Inc. All Rights Reserved.
	      * *
	      * Use of this source code is governed by an MIT-style license that can be
	      * found in the LICENSE file at https://angular.io/license
	     * @param {?=} rawParams
	     * @return {?}
	     */
	    function paramParser(rawParams) {
	        if (rawParams === void 0) { rawParams = ''; }
	        var /** @type {?} */ map = new Map();
	        if (rawParams.length > 0) {
	            var /** @type {?} */ params = rawParams.split('&');
	            params.forEach(function (param) {
	                var /** @type {?} */ eqIdx = param.indexOf('=');
	                var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];
	                var /** @type {?} */ list = map.get(key) || [];
	                list.push(val);
	                map.set(key, list);
	            });
	        }
	        return map;
	    }
	    /**
	     *  *
	     */
	    var QueryEncoder = (function () {
	        function QueryEncoder() {
	        }
	        /**
	         * @param {?} k
	         * @return {?}
	         */
	        QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };
	        /**
	         * @param {?} v
	         * @return {?}
	         */
	        QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };
	        return QueryEncoder;
	    }());
	    /**
	     * @param {?} v
	     * @return {?}
	     */
	    function standardEncoding(v) {
	        return encodeURIComponent(v)
	            .replace(/%40/gi, '@')
	            .replace(/%3A/gi, ':')
	            .replace(/%24/gi, '$')
	            .replace(/%2C/gi, ',')
	            .replace(/%3B/gi, ';')
	            .replace(/%2B/gi, '+')
	            .replace(/%3D/gi, '=')
	            .replace(/%3F/gi, '?')
	            .replace(/%2F/gi, '/');
	    }
	    /**
	     *  Map-like representation of url search parameters, based on
	      * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,
	      * with several extensions for merging URLSearchParams objects:
	      * - setAll()
	      * - appendAll()
	      * - replaceAll()
	      * *
	      * This class accepts an optional second parameter of ${@link QueryEncoder},
	      * which is used to serialize parameters before making a request. By default,
	      * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,
	      * and then un-encodes certain characters that are allowed to be part of the query
	      * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.
	      * *
	      * These are the characters that are not encoded: `! $ \' ( ) * + , ; A 9 - . _ ~ ? /`
	      * *
	      * If the set of allowed query characters is not acceptable for a particular backend,
	      * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.
	      * *
	      * ```
	      * import {URLSearchParams, QueryEncoder} from '@angular/http';
	      * class MyQueryEncoder extends QueryEncoder {
	      * encodeKey(k: string): string {
	      * return myEncodingFunction(k);
	      * }
	      * *
	      * encodeValue(v: string): string {
	      * return myEncodingFunction(v);
	      * }
	      * }
	      * *
	      * let params = new URLSearchParams('', new MyQueryEncoder());
	      * ```
	     */
	    var URLSearchParams = (function () {
	        /**
	         * @param {?=} rawParams
	         * @param {?=} queryEncoder
	         */
	        function URLSearchParams(rawParams, queryEncoder) {
	            if (rawParams === void 0) { rawParams = ''; }
	            if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }
	            this.rawParams = rawParams;
	            this.queryEncoder = queryEncoder;
	            this.paramsMap = paramParser(rawParams);
	        }
	        /**
	         * @return {?}
	         */
	        URLSearchParams.prototype.clone = function () {
	            var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);
	            clone.appendAll(this);
	            return clone;
	        };
	        /**
	         * @param {?} param
	         * @return {?}
	         */
	        URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };
	        /**
	         * @param {?} param
	         * @return {?}
	         */
	        URLSearchParams.prototype.get = function (param) {
	            var /** @type {?} */ storedParam = this.paramsMap.get(param);
	            return Array.isArray(storedParam) ? storedParam[0] : null;
	        };
	        /**
	         * @param {?} param
	         * @return {?}
	         */
	        URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };
	        /**
	         * @param {?} param
	         * @param {?} val
	         * @return {?}
	         */
	        URLSearchParams.prototype.set = function (param, val) {
	            if (val === void 0 || val === null) {
	                this.delete(param);
	                return;
	            }
	            var /** @type {?} */ list = this.paramsMap.get(param) || [];
	            list.length = 0;
	            list.push(val);
	            this.paramsMap.set(param, list);
	        };
	        /**
	         * @param {?} searchParams
	         * @return {?}
	         */
	        URLSearchParams.prototype.setAll = function (searchParams) {
	            var _this = this;
	            searchParams.paramsMap.forEach(function (value, param) {
	                var /** @type {?} */ list = _this.paramsMap.get(param) || [];
	                list.length = 0;
	                list.push(value[0]);
	                _this.paramsMap.set(param, list);
	            });
	        };
	        /**
	         * @param {?} param
	         * @param {?} val
	         * @return {?}
	         */
	        URLSearchParams.prototype.append = function (param, val) {
	            if (val === void 0 || val === null)
	                return;
	            var /** @type {?} */ list = this.paramsMap.get(param) || [];
	            list.push(val);
	            this.paramsMap.set(param, list);
	        };
	        /**
	         * @param {?} searchParams
	         * @return {?}
	         */
	        URLSearchParams.prototype.appendAll = function (searchParams) {
	            var _this = this;
	            searchParams.paramsMap.forEach(function (value, param) {
	                var /** @type {?} */ list = _this.paramsMap.get(param) || [];
	                for (var /** @type {?} */ i = 0; i < value.length; ++i) {
	                    list.push(value[i]);
	                }
	                _this.paramsMap.set(param, list);
	            });
	        };
	        /**
	         * @param {?} searchParams
	         * @return {?}
	         */
	        URLSearchParams.prototype.replaceAll = function (searchParams) {
	            var _this = this;
	            searchParams.paramsMap.forEach(function (value, param) {
	                var /** @type {?} */ list = _this.paramsMap.get(param) || [];
	                list.length = 0;
	                for (var /** @type {?} */ i = 0; i < value.length; ++i) {
	                    list.push(value[i]);
	                }
	                _this.paramsMap.set(param, list);
	            });
	        };
	        /**
	         * @return {?}
	         */
	        URLSearchParams.prototype.toString = function () {
	            var _this = this;
	            var /** @type {?} */ paramsList = [];
	            this.paramsMap.forEach(function (values, k) {
	                values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });
	            });
	            return paramsList.join('&');
	        };
	        /**
	         * @param {?} param
	         * @return {?}
	         */
	        URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };
	        return URLSearchParams;
	    }());
	
	    /**
	     *  HTTP request body used by both {@link Request} and {@link Response}
	      * https://fetch.spec.whatwg.org/#body
	     * @abstract
	     */
	    var Body = (function () {
	        function Body() {
	        }
	        /**
	         *  Attempts to return body as parsed `JSON` object, or raises an exception.
	         * @return {?}
	         */
	        Body.prototype.json = function () {
	            if (typeof this._body === 'string') {
	                return JSON.parse(/** @type {?} */ (this._body));
	            }
	            if (this._body instanceof ArrayBuffer) {
	                return JSON.parse(this.text());
	            }
	            return this._body;
	        };
	        /**
	         *  Returns the body as a string, presuming `toString()` can be called on the response body.
	         * @return {?}
	         */
	        Body.prototype.text = function () {
	            if (this._body instanceof URLSearchParams) {
	                return this._body.toString();
	            }
	            if (this._body instanceof ArrayBuffer) {
	                return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));
	            }
	            if (this._body == null) {
	                return '';
	            }
	            if (typeof this._body === 'object') {
	                return JSON.stringify(this._body, null, 2);
	            }
	            return this._body.toString();
	        };
	        /**
	         *  Return the body as an ArrayBuffer
	         * @return {?}
	         */
	        Body.prototype.arrayBuffer = function () {
	            if (this._body instanceof ArrayBuffer) {
	                return (this._body);
	            }
	            return stringToArrayBuffer(this.text());
	        };
	        /**
	         *  Returns the request's body as a Blob, assuming that body exists.
	         * @return {?}
	         */
	        Body.prototype.blob = function () {
	            if (this._body instanceof Blob) {
	                return (this._body);
	            }
	            if (this._body instanceof ArrayBuffer) {
	                return new Blob([this._body]);
	            }
	            throw new Error('The request body isn\'t either a blob or an array buffer');
	        };
	        return Body;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     *  Creates `Response` instances from provided values.
	      * *
	      * Though this object isn't
	      * usually instantiated by end-users, it is the primary object interacted with when it comes time to
	      * add data to a view.
	      * *
	      * ### Example
	      * *
	      * ```
	      * http.request('my-friends.txt').subscribe(response => this.friends = response.text());
	      * ```
	      * *
	      * The Response's interface is inspired by the Response constructor defined in the [Fetch
	      * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body
	      * can be accessed many times. There are other differences in the implementation, but this is the
	      * most significant.
	      * *
	     */
	    var Response = (function (_super) {
	        __extends$2(Response, _super);
	        /**
	         * @param {?} responseOptions
	         */
	        function Response(responseOptions) {
	            _super.call(this);
	            this._body = responseOptions.body;
	            this.status = responseOptions.status;
	            this.ok = (this.status >= 200 && this.status <= 299);
	            this.statusText = responseOptions.statusText;
	            this.headers = responseOptions.headers;
	            this.type = responseOptions.type;
	            this.url = responseOptions.url;
	        }
	        /**
	         * @return {?}
	         */
	        Response.prototype.toString = function () {
	            return "Response with status: " + this.status + " " + this.statusText + " for URL: " + this.url;
	        };
	        return Response;
	    }(Body));
	
	    var /** @type {?} */ _nextRequestId = 0;
	    var /** @type {?} */ JSONP_HOME = '__ng_jsonp__';
	    var /** @type {?} */ _jsonpConnections = null;
	    /**
	     * @return {?}
	     */
	    function _getJsonpConnections() {
	        var /** @type {?} */ w = typeof window == 'object' ? window : {};
	        if (_jsonpConnections === null) {
	            _jsonpConnections = w[JSONP_HOME] = {};
	        }
	        return _jsonpConnections;
	    }
	    // Make sure not to evaluate this in a non-browser environment!
	    var BrowserJsonp = (function () {
	        function BrowserJsonp() {
	        }
	        /**
	         * @param {?} url
	         * @return {?}
	         */
	        BrowserJsonp.prototype.build = function (url) {
	            var /** @type {?} */ node = document.createElement('script');
	            node.src = url;
	            return node;
	        };
	        /**
	         * @return {?}
	         */
	        BrowserJsonp.prototype.nextRequestID = function () { return "__req" + _nextRequestId++; };
	        /**
	         * @param {?} id
	         * @return {?}
	         */
	        BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + "." + id + ".finished"; };
	        /**
	         * @param {?} id
	         * @param {?} connection
	         * @return {?}
	         */
	        BrowserJsonp.prototype.exposeConnection = function (id, connection) {
	            var /** @type {?} */ connections = _getJsonpConnections();
	            connections[id] = connection;
	        };
	        /**
	         * @param {?} id
	         * @return {?}
	         */
	        BrowserJsonp.prototype.removeConnection = function (id) {
	            var /** @type {?} */ connections = _getJsonpConnections();
	            connections[id] = null;
	        };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserJsonp.prototype.send = function (node) { document.body.appendChild(/** @type {?} */ ((node))); };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserJsonp.prototype.cleanup = function (node) {
	            if (node.parentNode) {
	                node.parentNode.removeChild(/** @type {?} */ ((node)));
	            }
	        };
	        BrowserJsonp.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        BrowserJsonp.ctorParameters = function () { return []; };
	        return BrowserJsonp;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
	    var /** @type {?} */ JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';
	    /**
	     *  Abstract base class for an in-flight JSONP request.
	      * *
	     * @abstract
	     */
	    var JSONPConnection = (function () {
	        function JSONPConnection() {
	        }
	        /**
	         *  Callback called when the JSONP request completes, to notify the application
	          * of the new data.
	         * @abstract
	         * @param {?=} data
	         * @return {?}
	         */
	        JSONPConnection.prototype.finished = function (data) { };
	        return JSONPConnection;
	    }());
	    var JSONPConnection_ = (function (_super) {
	        __extends(JSONPConnection_, _super);
	        /**
	         * @param {?} req
	         * @param {?} _dom
	         * @param {?=} baseResponseOptions
	         */
	        function JSONPConnection_(req, _dom, baseResponseOptions) {
	            var _this = this;
	            _super.call(this);
	            this._dom = _dom;
	            this.baseResponseOptions = baseResponseOptions;
	            this._finished = false;
	            if (req.method !== RequestMethod.Get) {
	                throw new TypeError(JSONP_ERR_WRONG_METHOD);
	            }
	            this.request = req;
	            this.response = new rxjs_Observable.Observable(function (responseObserver) {
	                _this.readyState = ReadyState.Loading;
	                var id = _this._id = _dom.nextRequestID();
	                _dom.exposeConnection(id, _this);
	                // Workaround Dart
	                // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);
	                var callback = _dom.requestCallback(_this._id);
	                var url = req.url;
	                if (url.indexOf('=JSONP_CALLBACK&') > -1) {
	                    url = url.replace('=JSONP_CALLBACK&', "=" + callback + "&");
	                }
	                else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {
	                    url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + ("=" + callback);
	                }
	                var script = _this._script = _dom.build(url);
	                var onLoad = function (event) {
	                    if (_this.readyState === ReadyState.Cancelled)
	                        return;
	                    _this.readyState = ReadyState.Done;
	                    _dom.cleanup(script);
	                    if (!_this._finished) {
	                        var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });
	                        if (baseResponseOptions) {
	                            responseOptions_1 = baseResponseOptions.merge(responseOptions_1);
	                        }
	                        responseObserver.error(new Response(responseOptions_1));
	                        return;
	                    }
	                    var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });
	                    if (_this.baseResponseOptions) {
	                        responseOptions = _this.baseResponseOptions.merge(responseOptions);
	                    }
	                    responseObserver.next(new Response(responseOptions));
	                    responseObserver.complete();
	                };
	                var onError = function (error) {
	                    if (_this.readyState === ReadyState.Cancelled)
	                        return;
	                    _this.readyState = ReadyState.Done;
	                    _dom.cleanup(script);
	                    var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });
	                    if (baseResponseOptions) {
	                        responseOptions = baseResponseOptions.merge(responseOptions);
	                    }
	                    responseObserver.error(new Response(responseOptions));
	                };
	                script.addEventListener('load', onLoad);
	                script.addEventListener('error', onError);
	                _dom.send(script);
	                return function () {
	                    _this.readyState = ReadyState.Cancelled;
	                    script.removeEventListener('load', onLoad);
	                    script.removeEventListener('error', onError);
	                    _this._dom.cleanup(script);
	                };
	            });
	        }
	        /**
	         * @param {?=} data
	         * @return {?}
	         */
	        JSONPConnection_.prototype.finished = function (data) {
	            // Don't leak connections
	            this._finished = true;
	            this._dom.removeConnection(this._id);
	            if (this.readyState === ReadyState.Cancelled)
	                return;
	            this._responseData = data;
	        };
	        return JSONPConnection_;
	    }(JSONPConnection));
	    /**
	     *  A {@link ConnectionBackend} that uses the JSONP strategy of making requests.
	      * *
	     * @abstract
	     */
	    var JSONPBackend = (function (_super) {
	        __extends(JSONPBackend, _super);
	        function JSONPBackend() {
	            _super.apply(this, arguments);
	        }
	        return JSONPBackend;
	    }(ConnectionBackend));
	    var JSONPBackend_ = (function (_super) {
	        __extends(JSONPBackend_, _super);
	        /**
	         * @param {?} _browserJSONP
	         * @param {?} _baseResponseOptions
	         */
	        function JSONPBackend_(_browserJSONP, _baseResponseOptions) {
	            _super.call(this);
	            this._browserJSONP = _browserJSONP;
	            this._baseResponseOptions = _baseResponseOptions;
	        }
	        /**
	         * @param {?} request
	         * @return {?}
	         */
	        JSONPBackend_.prototype.createConnection = function (request) {
	            return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);
	        };
	        JSONPBackend_.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        JSONPBackend_.ctorParameters = function () { return [
	            { type: BrowserJsonp, },
	            { type: ResponseOptions, },
	        ]; };
	        return JSONPBackend_;
	    }(JSONPBackend));
	
	    var /** @type {?} */ XSSI_PREFIX = /^\)\]\}',?\n/;
	    /**
	     *  Creates connections using `XMLHttpRequest`. Given a fully-qualified
	      * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the
	      * request.
	      * *
	      * This class would typically not be created or interacted with directly inside applications, though
	      * the {@link MockConnection} may be interacted with in tests.
	      * *
	     */
	    var XHRConnection = (function () {
	        /**
	         * @param {?} req
	         * @param {?} browserXHR
	         * @param {?=} baseResponseOptions
	         */
	        function XHRConnection(req, browserXHR, baseResponseOptions) {
	            var _this = this;
	            this.request = req;
	            this.response = new rxjs_Observable.Observable(function (responseObserver) {
	                var _xhr = browserXHR.build();
	                _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);
	                if (req.withCredentials != null) {
	                    _xhr.withCredentials = req.withCredentials;
	                }
	                // load event handler
	                var onLoad = function () {
	                    // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	                    var status = _xhr.status === 1223 ? 204 : _xhr.status;
	                    var body = null;
	                    // HTTP 204 means no content
	                    if (status !== 204) {
	                        // responseText is the old-school way of retrieving response (supported by IE8 & 9)
	                        // response/responseType properties were introduced in ResourceLoader Level2 spec
	                        // (supported by IE10)
	                        body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;
	                        // Implicitly strip a potential XSSI prefix.
	                        if (typeof body === 'string') {
	                            body = body.replace(XSSI_PREFIX, '');
	                        }
	                    }
	                    // fix status code when it is 0 (0 status is undocumented).
	                    // Occurs when accessing file resources or on Android 4.1 stock browser
	                    // while retrieving files from application cache.
	                    if (status === 0) {
	                        status = body ? 200 : 0;
	                    }
	                    var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());
	                    // IE 9 does not provide the way to get URL of response
	                    var url = getResponseURL(_xhr) || req.url;
	                    var statusText = _xhr.statusText || 'OK';
	                    var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });
	                    if (baseResponseOptions != null) {
	                        responseOptions = baseResponseOptions.merge(responseOptions);
	                    }
	                    var response = new Response(responseOptions);
	                    response.ok = isSuccess(status);
	                    if (response.ok) {
	                        responseObserver.next(response);
	                        // TODO(gdi2290): defer complete if array buffer until done
	                        responseObserver.complete();
	                        return;
	                    }
	                    responseObserver.error(response);
	                };
	                // error event handler
	                var onError = function (err) {
	                    var responseOptions = new ResponseOptions({
	                        body: err,
	                        type: ResponseType.Error,
	                        status: _xhr.status,
	                        statusText: _xhr.statusText,
	                    });
	                    if (baseResponseOptions != null) {
	                        responseOptions = baseResponseOptions.merge(responseOptions);
	                    }
	                    responseObserver.error(new Response(responseOptions));
	                };
	                _this.setDetectedContentType(req, _xhr);
	                if (req.headers == null) {
	                    req.headers = new Headers();
	                }
	                if (!req.headers.has('Accept')) {
	                    req.headers.append('Accept', 'application/json, text/plain, */*');
	                }
	                req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });
	                // Select the correct buffer type to store the response
	                if (req.responseType != null && _xhr.responseType != null) {
	                    switch (req.responseType) {
	                        case ResponseContentType.ArrayBuffer:
	                            _xhr.responseType = 'arraybuffer';
	                            break;
	                        case ResponseContentType.Json:
	                            _xhr.responseType = 'json';
	                            break;
	                        case ResponseContentType.Text:
	                            _xhr.responseType = 'text';
	                            break;
	                        case ResponseContentType.Blob:
	                            _xhr.responseType = 'blob';
	                            break;
	                        default:
	                            throw new Error('The selected responseType is not supported');
	                    }
	                }
	                _xhr.addEventListener('load', onLoad);
	                _xhr.addEventListener('error', onError);
	                _xhr.send(_this.request.getBody());
	                return function () {
	                    _xhr.removeEventListener('load', onLoad);
	                    _xhr.removeEventListener('error', onError);
	                    _xhr.abort();
	                };
	            });
	        }
	        /**
	         * @param {?} req
	         * @param {?} _xhr
	         * @return {?}
	         */
	        XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {
	            // Skip if a custom Content-Type header is provided
	            if (req.headers != null && req.headers.get('Content-Type') != null) {
	                return;
	            }
	            // Set the detected content type
	            switch (req.contentType) {
	                case ContentType.NONE:
	                    break;
	                case ContentType.JSON:
	                    _xhr.setRequestHeader('content-type', 'application/json');
	                    break;
	                case ContentType.FORM:
	                    _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	                    break;
	                case ContentType.TEXT:
	                    _xhr.setRequestHeader('content-type', 'text/plain');
	                    break;
	                case ContentType.BLOB:
	                    var /** @type {?} */ blob = req.blob();
	                    if (blob.type) {
	                        _xhr.setRequestHeader('content-type', blob.type);
	                    }
	                    break;
	            }
	        };
	        return XHRConnection;
	    }());
	    /**
	     *  `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application
	      * using a cookie. See {@link https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)}
	      * for more information on XSRF.
	      * *
	      * Applications can configure custom cookie and header names by binding an instance of this class
	      * with different `cookieName` and `headerName` values. See the main HTTP documentation for more
	      * details.
	      * *
	     */
	    var CookieXSRFStrategy = (function () {
	        /**
	         * @param {?=} _cookieName
	         * @param {?=} _headerName
	         */
	        function CookieXSRFStrategy(_cookieName, _headerName) {
	            if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }
	            if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }
	            this._cookieName = _cookieName;
	            this._headerName = _headerName;
	        }
	        /**
	         * @param {?} req
	         * @return {?}
	         */
	        CookieXSRFStrategy.prototype.configureRequest = function (req) {
	            var /** @type {?} */ xsrfToken = _angular_platformBrowser.__platform_browser_private__.getDOM().getCookie(this._cookieName);
	            if (xsrfToken) {
	                req.headers.set(this._headerName, xsrfToken);
	            }
	        };
	        return CookieXSRFStrategy;
	    }());
	    /**
	     *  Creates {@link XHRConnection} instances.
	      * *
	      * This class would typically not be used by end users, but could be
	      * overridden if a different backend implementation should be used,
	      * such as in a node backend.
	      * *
	      * ### Example
	      * *
	      * ```
	      * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';
	      * viewProviders: [
	      * HTTP_PROVIDERS,
	      * {provide: Http, useFactory: (backend, options) => {
	      * return new Http(backend, options);
	      * }, deps: [MyNodeBackend, BaseRequestOptions]}]
	      * })
	      * class MyComponent {
	      * constructor(http:Http) {
	      * http.request('people.json').subscribe(res => this.people = res.json());
	      * }
	      * }
	      * ```
	     */
	    var XHRBackend = (function () {
	        /**
	         * @param {?} _browserXHR
	         * @param {?} _baseResponseOptions
	         * @param {?} _xsrfStrategy
	         */
	        function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {
	            this._browserXHR = _browserXHR;
	            this._baseResponseOptions = _baseResponseOptions;
	            this._xsrfStrategy = _xsrfStrategy;
	        }
	        /**
	         * @param {?} request
	         * @return {?}
	         */
	        XHRBackend.prototype.createConnection = function (request) {
	            this._xsrfStrategy.configureRequest(request);
	            return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
	        };
	        XHRBackend.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        XHRBackend.ctorParameters = function () { return [
	            { type: BrowserXhr, },
	            { type: ResponseOptions, },
	            { type: XSRFStrategy, },
	        ]; };
	        return XHRBackend;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     *  Creates a request options object to be optionally provided when instantiating a
	      * {@link Request}.
	      * *
	      * This class is based on the `RequestInit` description in the [Fetch
	      * Spec](https://fetch.spec.whatwg.org/#requestinit).
	      * *
	      * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}
	      * class, which sub-classes `RequestOptions`.
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))
	      * *
	      * ```typescript
	      * import {RequestOptions, Request, RequestMethod} from '@angular/http';
	      * *
	      * var options = new RequestOptions({
	      * method: RequestMethod.Post,
	      * url: 'https://google.com'
	      * });
	      * var req = new Request(options);
	      * console.log('req.method:', RequestMethod[req.method]); // Post
	      * console.log('options.url:', options.url); // https://google.com
	      * ```
	      * *
	     */
	    var RequestOptions = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function RequestOptions(_a) {
	            var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search, withCredentials = _b.withCredentials, responseType = _b.responseType;
	            this.method = method != null ? normalizeMethodName(method) : null;
	            this.headers = headers != null ? headers : null;
	            this.body = body != null ? body : null;
	            this.url = url != null ? url : null;
	            this.search =
	                search != null ? (typeof search === 'string' ? new URLSearchParams(search) : search) : null;
	            this.withCredentials = withCredentials != null ? withCredentials : null;
	            this.responseType = responseType != null ? responseType : null;
	        }
	        /**
	         *  Creates a copy of the `RequestOptions` instance, using the optional input as values to override
	          * existing values. This method will not change the values of the instance on which it is being
	          * called.
	          * *
	          * Note that `headers` and `search` will override existing values completely if present in
	          * the `options` object. If these values should be merged, it should be done prior to calling
	          * `merge` on the `RequestOptions` instance.
	          * *
	          * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))
	          * *
	          * ```typescript
	          * import {RequestOptions, Request, RequestMethod} from '@angular/http';
	          * *
	          * var options = new RequestOptions({
	          * method: RequestMethod.Post
	          * });
	          * var req = new Request(options.merge({
	          * url: 'https://google.com'
	          * }));
	          * console.log('req.method:', RequestMethod[req.method]); // Post
	          * console.log('options.url:', options.url); // null
	          * console.log('req.url:', req.url); // https://google.com
	          * ```
	         * @param {?=} options
	         * @return {?}
	         */
	        RequestOptions.prototype.merge = function (options) {
	            return new RequestOptions({
	                method: options && options.method != null ? options.method : this.method,
	                headers: options && options.headers != null ? options.headers : new Headers(this.headers),
	                body: options && options.body != null ? options.body : this.body,
	                url: options && options.url != null ? options.url : this.url,
	                search: options && options.search != null ?
	                    (typeof options.search === 'string' ? new URLSearchParams(options.search) :
	                        options.search.clone()) :
	                    this.search,
	                withCredentials: options && options.withCredentials != null ? options.withCredentials :
	                    this.withCredentials,
	                responseType: options && options.responseType != null ? options.responseType :
	                    this.responseType
	            });
	        };
	        return RequestOptions;
	    }());
	    /**
	     *  Subclass of {@link RequestOptions}, with default values.
	      * *
	      * Default values:
	      * * method: {@link RequestMethod RequestMethod.Get}
	      * * headers: empty {@link Headers} object
	      * *
	      * This class could be extended and bound to the {@link RequestOptions} class
	      * when configuring an {@link Injector}, in order to override the default options
	      * used by {@link Http} to create and send {@link Request Requests}.
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))
	      * *
	      * ```typescript
	      * import {provide} from '@angular/core';
	      * import {bootstrap} from '@angular/platform-browser/browser';
	      * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from '@angular/http';
	      * import {App} from './myapp';
	      * *
	      * class MyOptions extends BaseRequestOptions {
	      * search: string = 'coreTeam=true';
	      * }
	      * *
	      * bootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}]);
	      * ```
	      * *
	      * The options could also be extended when manually creating a {@link Request}
	      * object.
	      * *
	      * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))
	      * *
	      * ```
	      * import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';
	      * *
	      * var options = new BaseRequestOptions();
	      * var req = new Request(options.merge({
	      * method: RequestMethod.Post,
	      * url: 'https://google.com'
	      * }));
	      * console.log('req.method:', RequestMethod[req.method]); // Post
	      * console.log('options.url:', options.url); // null
	      * console.log('req.url:', req.url); // https://google.com
	      * ```
	      * *
	     */
	    var BaseRequestOptions = (function (_super) {
	        __extends$3(BaseRequestOptions, _super);
	        function BaseRequestOptions() {
	            _super.call(this, { method: RequestMethod.Get, headers: new Headers() });
	        }
	        BaseRequestOptions.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        BaseRequestOptions.ctorParameters = function () { return []; };
	        return BaseRequestOptions;
	    }(RequestOptions));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$5 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     *  Creates `Request` instances from provided values.
	      * *
	      * The Request's interface is inspired by the Request constructor defined in the [Fetch
	      * Spec](https://fetch.spec.whatwg.org/#request-class),
	      * but is considered a static value whose body can be accessed many times. There are other
	      * differences in the implementation, but this is the most significant.
	      * *
	      * `Request` instances are typically created by higher-level classes, like {@link Http} and
	      * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.
	      * One such example is when creating services that wrap higher-level services, like {@link Http},
	      * where it may be useful to generate a `Request` with arbitrary headers and search params.
	      * *
	      * ```typescript
	      * import {Injectable, Injector} from '@angular/core';
	      * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';
	      * *
	      * class AutoAuthenticator {
	      * constructor(public http:Http) {}
	      * request(url:string) {
	      * return this.http.request(new Request({
	      * method: RequestMethod.Get,
	      * url: url,
	      * search: 'password=123'
	      * }));
	      * }
	      * }
	      * *
	      * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);
	      * var authenticator = injector.get(AutoAuthenticator);
	      * authenticator.request('people.json').subscribe(res => {
	      * //URL should have included '?password=123'
	      * console.log('people', res.json());
	      * });
	      * ```
	      * *
	     */
	    var Request = (function (_super) {
	        __extends$5(Request, _super);
	        /**
	         * @param {?} requestOptions
	         */
	        function Request(requestOptions) {
	            _super.call(this);
	            // TODO: assert that url is present
	            var url = requestOptions.url;
	            this.url = requestOptions.url;
	            if (requestOptions.search) {
	                var search = requestOptions.search.toString();
	                if (search.length > 0) {
	                    var prefix = '?';
	                    if (this.url.indexOf('?') != -1) {
	                        prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';
	                    }
	                    // TODO: just delete search-query-looking string in url?
	                    this.url = url + prefix + search;
	                }
	            }
	            this._body = requestOptions.body;
	            this.method = normalizeMethodName(requestOptions.method);
	            // TODO(jeffbcross): implement behavior
	            // Defaults to 'omit', consistent with browser
	            this.headers = new Headers(requestOptions.headers);
	            this.contentType = this.detectContentType();
	            this.withCredentials = requestOptions.withCredentials;
	            this.responseType = requestOptions.responseType;
	        }
	        /**
	         *  Returns the content type enum based on header options.
	         * @return {?}
	         */
	        Request.prototype.detectContentType = function () {
	            switch (this.headers.get('content-type')) {
	                case 'application/json':
	                    return ContentType.JSON;
	                case 'application/x-www-form-urlencoded':
	                    return ContentType.FORM;
	                case 'multipart/form-data':
	                    return ContentType.FORM_DATA;
	                case 'text/plain':
	                case 'text/html':
	                    return ContentType.TEXT;
	                case 'application/octet-stream':
	                    return ContentType.BLOB;
	                default:
	                    return this.detectContentTypeFromBody();
	            }
	        };
	        /**
	         *  Returns the content type of request's body based on its type.
	         * @return {?}
	         */
	        Request.prototype.detectContentTypeFromBody = function () {
	            if (this._body == null) {
	                return ContentType.NONE;
	            }
	            else if (this._body instanceof URLSearchParams) {
	                return ContentType.FORM;
	            }
	            else if (this._body instanceof FormData) {
	                return ContentType.FORM_DATA;
	            }
	            else if (this._body instanceof Blob$1) {
	                return ContentType.BLOB;
	            }
	            else if (this._body instanceof ArrayBuffer$1) {
	                return ContentType.ARRAY_BUFFER;
	            }
	            else if (this._body && typeof this._body == 'object') {
	                return ContentType.JSON;
	            }
	            else {
	                return ContentType.TEXT;
	            }
	        };
	        /**
	         *  Returns the request's body according to its type. If body is undefined, return
	          * null.
	         * @return {?}
	         */
	        Request.prototype.getBody = function () {
	            switch (this.contentType) {
	                case ContentType.JSON:
	                    return this.text();
	                case ContentType.FORM:
	                    return this.text();
	                case ContentType.FORM_DATA:
	                    return this._body;
	                case ContentType.TEXT:
	                    return this.text();
	                case ContentType.BLOB:
	                    return this.blob();
	                case ContentType.ARRAY_BUFFER:
	                    return this.arrayBuffer();
	                default:
	                    return null;
	            }
	        };
	        return Request;
	    }(Body));
	    var /** @type {?} */ noop = function () { };
	    var /** @type {?} */ w = typeof window == 'object' ? window : noop;
	    var /** @type {?} */ FormData = ((w) /** TODO #9100 */)['FormData'] || noop;
	    var /** @type {?} */ Blob$1 = ((w) /** TODO #9100 */)['Blob'] || noop;
	    var /** @type {?} */ ArrayBuffer$1 = ((w) /** TODO #9100 */)['ArrayBuffer'] || noop;
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @param {?} backend
	     * @param {?} request
	     * @return {?}
	     */
	    function httpRequest(backend, request) {
	        return backend.createConnection(request).response;
	    }
	    /**
	     * @param {?} defaultOpts
	     * @param {?} providedOpts
	     * @param {?} method
	     * @param {?} url
	     * @return {?}
	     */
	    function mergeOptions(defaultOpts, providedOpts, method, url) {
	        var /** @type {?} */ newOptions = defaultOpts;
	        if (providedOpts) {
	            // Hack so Dart can used named parameters
	            return newOptions.merge(new RequestOptions({
	                method: providedOpts.method || method,
	                url: providedOpts.url || url,
	                search: providedOpts.search,
	                headers: providedOpts.headers,
	                body: providedOpts.body,
	                withCredentials: providedOpts.withCredentials,
	                responseType: providedOpts.responseType
	            }));
	        }
	        return newOptions.merge(new RequestOptions({ method: method, url: url }));
	    }
	    /**
	     *  Performs http requests using `XMLHttpRequest` as the default backend.
	      * *
	      * `Http` is available as an injectable class, with methods to perform http requests. Calling
	      * `request` returns an `Observable` which will emit a single {@link Response} when a
	      * response is received.
	      * *
	      * ### Example
	      * *
	      * ```typescript
	      * import {Http, HTTP_PROVIDERS} from '@angular/http';
	      * import 'rxjs/add/operator/map'
	      * selector: 'http-app',
	      * viewProviders: [HTTP_PROVIDERS],
	      * templateUrl: 'people.html'
	      * })
	      * class PeopleComponent {
	      * constructor(http: Http) {
	      * http.get('people.json')
	      * // Call map on the response observable to get the parsed people object
	      * .map(res => res.json())
	      * // Subscribe to the observable to get the parsed people object and attach it to the
	      * // component
	      * .subscribe(people => this.people = people);
	      * }
	      * }
	      * ```
	      * *
	      * *
	      * ### Example
	      * *
	      * ```
	      * http.get('people.json').subscribe((res:Response) => this.people = res.json());
	      * ```
	      * *
	      * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a "Backend" (
	      * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing
	      * the {@link XHRBackend} provider, as in the following example:
	      * *
	      * ### Example
	      * *
	      * ```typescript
	      * import {BaseRequestOptions, Http} from '@angular/http';
	      * import {MockBackend} from '@angular/http/testing';
	      * var injector = Injector.resolveAndCreate([
	      * BaseRequestOptions,
	      * MockBackend,
	      * {provide: Http, useFactory:
	      * function(backend, defaultOptions) {
	      * return new Http(backend, defaultOptions);
	      * },
	      * deps: [MockBackend, BaseRequestOptions]}
	      * ]);
	      * var http = injector.get(Http);
	      * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));
	      * ```
	      * *
	     */
	    var Http = (function () {
	        /**
	         * @param {?} _backend
	         * @param {?} _defaultOptions
	         */
	        function Http(_backend, _defaultOptions) {
	            this._backend = _backend;
	            this._defaultOptions = _defaultOptions;
	        }
	        /**
	         *  Performs any type of http request. First argument is required, and can either be a url or
	          * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}
	          * object can be provided as the 2nd argument. The options object will be merged with the values
	          * of {@link BaseRequestOptions} before performing the request.
	         * @param {?} url
	         * @param {?=} options
	         * @return {?}
	         */
	        Http.prototype.request = function (url, options) {
	            var /** @type {?} */ responseObservable;
	            if (typeof url === 'string') {
	                responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));
	            }
	            else if (url instanceof Request) {
	                responseObservable = httpRequest(this._backend, url);
	            }
	            else {
	                throw new Error('First argument must be a url string or Request instance.');
	            }
	            return responseObservable;
	        };
	        /**
	         *  Performs a request with `get` http method.
	         * @param {?} url
	         * @param {?=} options
	         * @return {?}
	         */
	        Http.prototype.get = function (url, options) {
	            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));
	        };
	        /**
	         *  Performs a request with `post` http method.
	         * @param {?} url
	         * @param {?} body
	         * @param {?=} options
	         * @return {?}
	         */
	        Http.prototype.post = function (url, body, options) {
	            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));
	        };
	        /**
	         *  Performs a request with `put` http method.
	         * @param {?} url
	         * @param {?} body
	         * @param {?=} options
	         * @return {?}
	         */
	        Http.prototype.put = function (url, body, options) {
	            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));
	        };
	        /**
	         *  Performs a request with `delete` http method.
	         * @param {?} url
	         * @param {?=} options
	         * @return {?}
	         */
	        Http.prototype.delete = function (url, options) {
	            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));
	        };
	        /**
	         *  Performs a request with `patch` http method.
	         * @param {?} url
	         * @param {?} body
	         * @param {?=} options
	         * @return {?}
	         */
	        Http.prototype.patch = function (url, body, options) {
	            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));
	        };
	        /**
	         *  Performs a request with `head` http method.
	         * @param {?} url
	         * @param {?=} options
	         * @return {?}
	         */
	        Http.prototype.head = function (url, options) {
	            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));
	        };
	        /**
	         *  Performs a request with `options` http method.
	         * @param {?} url
	         * @param {?=} options
	         * @return {?}
	         */
	        Http.prototype.options = function (url, options) {
	            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));
	        };
	        Http.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        Http.ctorParameters = function () { return [
	            { type: ConnectionBackend, },
	            { type: RequestOptions, },
	        ]; };
	        return Http;
	    }());
	    /**
	     * @experimental
	     */
	    var Jsonp = (function (_super) {
	        __extends$4(Jsonp, _super);
	        /**
	         * @param {?} backend
	         * @param {?} defaultOptions
	         */
	        function Jsonp(backend, defaultOptions) {
	            _super.call(this, backend, defaultOptions);
	        }
	        /**
	         *  Performs any type of http request. First argument is required, and can either be a url or
	          * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}
	          * object can be provided as the 2nd argument. The options object will be merged with the values
	          * of {@link BaseRequestOptions} before performing the request.
	          * *
	          * supported by all current browsers. Because JSONP creates a `<script>` element with
	          * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted
	          * source could expose your application to XSS risks. Data exposed by JSONP may also be
	          * readable by malicious third-party websites. In addition, JSONP introduces potential risk for
	          * future security issues (e.g. content sniffing).  For more detail, see the
	          * [Security Guide](http://g.co/ng/security).
	         * @param {?} url
	         * @param {?=} options
	         * @return {?}
	         */
	        Jsonp.prototype.request = function (url, options) {
	            var /** @type {?} */ responseObservable;
	            if (typeof url === 'string') {
	                url =
	                    new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));
	            }
	            if (url instanceof Request) {
	                if (url.method !== RequestMethod.Get) {
	                    throw new Error('JSONP requests must use GET request method.');
	                }
	                responseObservable = httpRequest(this._backend, url);
	            }
	            else {
	                throw new Error('First argument must be a url string or Request instance.');
	            }
	            return responseObservable;
	        };
	        Jsonp.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        Jsonp.ctorParameters = function () { return [
	            { type: ConnectionBackend, },
	            { type: RequestOptions, },
	        ]; };
	        return Jsonp;
	    }(Http));
	
	    /**
	     * @return {?}
	     */
	    function _createDefaultCookieXSRFStrategy() {
	        return new CookieXSRFStrategy();
	    }
	    /**
	     * @param {?} xhrBackend
	     * @param {?} requestOptions
	     * @return {?}
	     */
	    function httpFactory(xhrBackend, requestOptions) {
	        return new Http(xhrBackend, requestOptions);
	    }
	    /**
	     * @param {?} jsonpBackend
	     * @param {?} requestOptions
	     * @return {?}
	     */
	    function jsonpFactory(jsonpBackend, requestOptions) {
	        return new Jsonp(jsonpBackend, requestOptions);
	    }
	    /**
	     *  The module that includes http's providers
	      * *
	     */
	    var HttpModule = (function () {
	        function HttpModule() {
	        }
	        HttpModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        providers: [
	                            // TODO(pascal): use factory type annotations once supported in DI
	                            // issue: https://github.com/angular/angular/issues/3183
	                            { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },
	                            BrowserXhr,
	                            { provide: RequestOptions, useClass: BaseRequestOptions },
	                            { provide: ResponseOptions, useClass: BaseResponseOptions },
	                            XHRBackend,
	                            { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },
	                        ],
	                    },] },
	        ];
	        /** @nocollapse */
	        HttpModule.ctorParameters = function () { return []; };
	        return HttpModule;
	    }());
	    /**
	     *  The module that includes jsonp's providers
	      * *
	     */
	    var JsonpModule = (function () {
	        function JsonpModule() {
	        }
	        JsonpModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        providers: [
	                            // TODO(pascal): use factory type annotations once supported in DI
	                            // issue: https://github.com/angular/angular/issues/3183
	                            { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },
	                            BrowserJsonp,
	                            { provide: RequestOptions, useClass: BaseRequestOptions },
	                            { provide: ResponseOptions, useClass: BaseResponseOptions },
	                            { provide: JSONPBackend, useClass: JSONPBackend_ },
	                        ],
	                    },] },
	        ];
	        /** @nocollapse */
	        JsonpModule.ctorParameters = function () { return []; };
	        return JsonpModule;
	    }());
	
	    /**
	     * @stable
	     */
	    var /** @type {?} */ VERSION = new _angular_core.Version('2.3.1');
	
	    exports.BrowserXhr = BrowserXhr;
	    exports.JSONPBackend = JSONPBackend;
	    exports.JSONPConnection = JSONPConnection;
	    exports.CookieXSRFStrategy = CookieXSRFStrategy;
	    exports.XHRBackend = XHRBackend;
	    exports.XHRConnection = XHRConnection;
	    exports.BaseRequestOptions = BaseRequestOptions;
	    exports.RequestOptions = RequestOptions;
	    exports.BaseResponseOptions = BaseResponseOptions;
	    exports.ResponseOptions = ResponseOptions;
	    exports.ReadyState = ReadyState;
	    exports.RequestMethod = RequestMethod;
	    exports.ResponseContentType = ResponseContentType;
	    exports.ResponseType = ResponseType;
	    exports.Headers = Headers;
	    exports.Http = Http;
	    exports.Jsonp = Jsonp;
	    exports.HttpModule = HttpModule;
	    exports.JsonpModule = JsonpModule;
	    exports.Connection = Connection;
	    exports.ConnectionBackend = ConnectionBackend;
	    exports.XSRFStrategy = XSRFStrategy;
	    exports.Request = Request;
	    exports.Response = Response;
	    exports.QueryEncoder = QueryEncoder;
	    exports.URLSearchParams = URLSearchParams;
	    exports.VERSION = VERSION;
	
	}));

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(270);
	var map_1 = __webpack_require__(330);
	Observable_1.Observable.prototype.map = map_1.map;
	//# sourceMappingURL=map.js.map

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(273);
	/**
	 * Applies a given `project` function to each value emitted by the source
	 * Observable, and emits the resulting values as an Observable.
	 *
	 * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
	 * it passes each source value through a transformation function to get
	 * corresponding output values.</span>
	 *
	 * <img src="./img/map.png" width="100%">
	 *
	 * Similar to the well known `Array.prototype.map` function, this operator
	 * applies a projection to each value and emits that projection in the output
	 * Observable.
	 *
	 * @example <caption>Map every every click to the clientX position of that click</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var positions = clicks.map(ev => ev.clientX);
	 * positions.subscribe(x => console.log(x));
	 *
	 * @see {@link mapTo}
	 * @see {@link pluck}
	 *
	 * @param {function(value: T, index: number): R} project The function to apply
	 * to each `value` emitted by the source Observable. The `index` parameter is
	 * the number `i` for the i-th emission that has happened since the
	 * subscription, starting from the number `0`.
	 * @param {any} [thisArg] An optional argument to define what `this` is in the
	 * `project` function.
	 * @return {Observable<R>} An Observable that emits the values from the source
	 * Observable transformed by the given `project` function.
	 * @method map
	 * @owner Observable
	 */
	function map(project, thisArg) {
	    if (typeof project !== 'function') {
	        throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
	    }
	    return this.lift(new MapOperator(project, thisArg));
	}
	exports.map = map;
	var MapOperator = (function () {
	    function MapOperator(project, thisArg) {
	        this.project = project;
	        this.thisArg = thisArg;
	    }
	    MapOperator.prototype.call = function (subscriber, source) {
	        return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
	    };
	    return MapOperator;
	}());
	exports.MapOperator = MapOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var MapSubscriber = (function (_super) {
	    __extends(MapSubscriber, _super);
	    function MapSubscriber(destination, project, thisArg) {
	        _super.call(this, destination);
	        this.project = project;
	        this.count = 0;
	        this.thisArg = thisArg || this;
	    }
	    // NOTE: This looks unoptimized, but it's actually purposefully NOT
	    // using try/catch optimizations.
	    MapSubscriber.prototype._next = function (value) {
	        var result;
	        try {
	            result = this.project.call(this.thisArg, value, this.count++);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return MapSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=map.js.map

/***/ },
/* 331 */
/***/ function(module, exports) {

	module.exports = require("http");

/***/ },
/* 332 */
/***/ function(module, exports) {

	module.exports = require("https");

/***/ },
/* 333 */
/***/ function(module, exports) {

	module.exports = require("url");

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(268);
	var common_1 = __webpack_require__(287);
	var common_2 = __webpack_require__(287);
	exports.APP_BASE_HREF = common_2.APP_BASE_HREF;
	exports.ORIGIN_URL = new core_1.OpaqueToken('ORIGIN_URL');
	exports.REQUEST_URL = new core_1.OpaqueToken('REQUEST_URL');
	exports.PRIME_CACHE = new core_1.OpaqueToken('PRIME_CACHE');
	exports.COOKIE_KEY = new core_1.OpaqueToken('COOKIE_KEY');
	exports.NODE_APP_ID = new core_1.OpaqueToken('NODE_APP_ID');
	function getUrlConfig() {
	    return [
	        { provide: common_1.APP_BASE_HREF, useValue: 'baseUrl' },
	        { provide: exports.REQUEST_URL, useValue: 'requestUrl' },
	        { provide: exports.ORIGIN_URL, useValue: 'originUrl' }
	    ];
	}
	exports.getUrlConfig = getUrlConfig;
	function createUrlProviders(config) {
	    return getUrlConfig()
	        .filter(function (provider) { return (provider.useValue in config); })
	        .map(function (provider) {
	        var key = provider.useValue;
	        provider.useValue = config[key];
	        return provider;
	    });
	}
	exports.createUrlProviders = createUrlProviders;
	//# sourceMappingURL=tokens.js.map

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var get_dom_1 = __webpack_require__(296);
	var core_1 = __webpack_require__(268);
	var platform_browser_1 = __webpack_require__(286);
	var helper_1 = __webpack_require__(297);
	var node_shared_styles_host_1 = __webpack_require__(336);
	var NAMESPACE_URIS = {
	    'xlink': 'http://www.w3.org/1999/xlink',
	    'svg': 'http://www.w3.org/2000/svg',
	    'xhtml': 'http://www.w3.org/1999/xhtml'
	};
	var TEMPLATE_COMMENT_TEXT = 'template bindings={}';
	var TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/;
	var NodeDomRootRenderer = (function () {
	    function NodeDomRootRenderer(document, eventManager, sharedStylesHost, _animationDriver) {
	        this.document = document;
	        this.eventManager = eventManager;
	        this.sharedStylesHost = sharedStylesHost;
	        this._animationDriver = _animationDriver;
	        this.registeredComponents = new Map();
	    }
	    NodeDomRootRenderer.prototype.renderComponent = function (componentProto) {
	        var renderer = this.registeredComponents.get(componentProto.id);
	        if (helper_1.isBlank(renderer)) {
	            renderer = new NodeDomRenderer(this, componentProto, this._animationDriver);
	            this.registeredComponents.set(componentProto.id, renderer);
	        }
	        return renderer;
	    };
	    NodeDomRootRenderer.decorators = [
	        { type: core_1.Injectable },
	    ];
	    NodeDomRootRenderer.ctorParameters = [
	        { type: undefined, decorators: [{ type: core_1.Inject, args: [platform_browser_1.DOCUMENT,] },] },
	        { type: platform_browser_1.EventManager, },
	        { type: node_shared_styles_host_1.NodeSharedStylesHost, },
	        { type: platform_browser_1.AnimationDriver, },
	    ];
	    return NodeDomRootRenderer;
	}());
	exports.NodeDomRootRenderer = NodeDomRootRenderer;
	exports.ATTRIBUTES = {
	    textarea: [
	        'autocapitalize',
	        'autocomplete',
	        'autofocus',
	        'cols',
	        'disabled',
	        'form',
	        'maxlength',
	        'minlength',
	        'name',
	        'placeholder',
	        'readonly',
	        'required',
	        'rows',
	        'selectionDirection',
	        'selectionEnd',
	        'selectionStart',
	        'spellcheck',
	        'wrap'
	    ],
	    script: [
	        'async',
	        'integrity',
	        'src',
	        'type',
	        'text',
	        'defer',
	        'crossorigin'
	    ],
	    button: [
	        'autofocus',
	        'autocomplete',
	        'disabled',
	        'form',
	        'formaction',
	        'formenctype',
	        'formmethod',
	        'formnovalidate',
	        'formtarget',
	        'name',
	        'type',
	        'value'
	    ],
	    fieldset: [
	        'disabled',
	        'form',
	        'name'
	    ],
	    a: [
	        'download',
	        'href',
	        'hreflang',
	        'ping',
	        'referrerpolicy',
	        'rel',
	        'target',
	        'type'
	    ],
	    img: [
	        'alt',
	        'crossorigin',
	        'height',
	        'ismap',
	        'longdesc',
	        'referrerpolicy',
	        'sizesHTML5',
	        'src',
	        'srcsetHTML5',
	        'width',
	        'usemap'
	    ],
	    input: [
	        'id',
	        'type',
	        'accept',
	        'mozactionhint',
	        'autocapitalize',
	        'autocomplete',
	        'autocorrect',
	        'autofocus',
	        'autosave',
	        'checked',
	        'disabled',
	        'form',
	        'formaction',
	        'formenctype',
	        'formmethod',
	        'formnovalidate',
	        'formtarget',
	        'height',
	        'incremental',
	        'inputmode',
	        'list',
	        'max',
	        'maxlength',
	        'min',
	        'minlength',
	        'multiple',
	        'name',
	        'pattern',
	        'placeholder',
	        'readonly',
	        'required',
	        'results',
	        'selectionDirection',
	        'size',
	        'spellcheck',
	        'src',
	        'step',
	        'tabindex',
	        'value',
	        'width',
	        'x-moz-errormessage'
	    ],
	    output: [
	        'for',
	        'form',
	        'name'
	    ],
	    progress: [
	        'max',
	        'value'
	    ],
	    label: [
	        'accesskey',
	        'for',
	        'form'
	    ],
	    option: [
	        'disabled',
	        'label',
	        'selected',
	        'value'
	    ],
	    select: [
	        'autofocus',
	        'disabled',
	        'multiple',
	        'form',
	        'multiple',
	        'name',
	        'required',
	        'size'
	    ],
	    optgroup: [
	        'disabled',
	        'label'
	    ],
	    form: [
	        'accept-charset',
	        'action',
	        'autocapitalize',
	        'autocomplete',
	        'enctype',
	        'method',
	        'name',
	        'novalidate',
	        'target'
	    ]
	};
	exports.IGNORE_ATTRIBUTES = {
	    'innerHTML': true,
	    'hidden': true
	};
	var DomRenderer = (function () {
	    function DomRenderer(_rootRenderer, componentProto, _animationDriver) {
	        this._rootRenderer = _rootRenderer;
	        this.componentProto = componentProto;
	        this._animationDriver = _animationDriver;
	        this._styles = _flattenStyles(componentProto.id, componentProto.styles, []);
	        if (componentProto.encapsulation !== core_1.ViewEncapsulation.Native) {
	            this._rootRenderer.sharedStylesHost.addStyles(this._styles);
	        }
	        if (this.componentProto.encapsulation === core_1.ViewEncapsulation.Emulated) {
	            this._contentAttr = _shimContentAttribute(componentProto.id);
	            this._hostAttr = _shimHostAttribute(componentProto.id);
	        }
	        else {
	            this._contentAttr = null;
	            this._hostAttr = null;
	        }
	    }
	    DomRenderer.prototype.selectRootElement = function (_selectorOrNode, _debugInfo) {
	    };
	    DomRenderer.prototype.createElement = function (parent, name, _debugInfo) {
	        var nsAndName = splitNamespace(name);
	        var el = helper_1.isPresent(nsAndName[0]) ?
	            get_dom_1.getDOM().createElementNS(NAMESPACE_URIS[nsAndName[0]], nsAndName[1]) :
	            get_dom_1.getDOM().createElement(nsAndName[1]);
	        if (helper_1.isPresent(this._contentAttr)) {
	            get_dom_1.getDOM().setAttribute(el, this._contentAttr, '');
	        }
	        if (helper_1.isPresent(parent)) {
	            get_dom_1.getDOM().appendChild(parent, el);
	        }
	        return el;
	    };
	    DomRenderer.prototype.createViewRoot = function (hostElement) {
	        var nodesParent;
	        if (this.componentProto.encapsulation === core_1.ViewEncapsulation.Native) {
	            nodesParent = get_dom_1.getDOM().createShadowRoot(hostElement);
	            this._rootRenderer.sharedStylesHost.addHost(nodesParent);
	            for (var i = 0; i < this._styles.length; i++) {
	                get_dom_1.getDOM().appendChild(nodesParent, get_dom_1.getDOM().createStyleElement(this._styles[i]));
	            }
	        }
	        else {
	            if (helper_1.isPresent(this._hostAttr)) {
	                get_dom_1.getDOM().setAttribute(hostElement, this._hostAttr, '');
	            }
	            nodesParent = hostElement;
	        }
	        return nodesParent;
	    };
	    DomRenderer.prototype.createTemplateAnchor = function (parentElement, _debugInfo) {
	        var comment = get_dom_1.getDOM().createComment(TEMPLATE_COMMENT_TEXT);
	        if (helper_1.isPresent(parentElement)) {
	            get_dom_1.getDOM().appendChild(parentElement, comment);
	        }
	        return comment;
	    };
	    DomRenderer.prototype.createText = function (parentElement, value, _debugInfo) {
	        var node = get_dom_1.getDOM().createTextNode(value);
	        if (helper_1.isPresent(parentElement)) {
	            get_dom_1.getDOM().appendChild(parentElement, node);
	        }
	        return node;
	    };
	    DomRenderer.prototype.projectNodes = function (parentElement, nodes) {
	        if (helper_1.isBlank(parentElement)) {
	            return;
	        }
	        appendNodes(parentElement, nodes);
	    };
	    DomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {
	        moveNodesAfterSibling(node, viewRootNodes);
	    };
	    DomRenderer.prototype.detachView = function (viewRootNodes) {
	        for (var i = 0; i < viewRootNodes.length; i++) {
	            get_dom_1.getDOM().remove(viewRootNodes[i]);
	        }
	    };
	    DomRenderer.prototype.destroyView = function (hostElement, _viewAllNodes) {
	        if (this.componentProto.encapsulation === core_1.ViewEncapsulation.Native && helper_1.isPresent(hostElement)) {
	            this._rootRenderer.sharedStylesHost.removeHost(get_dom_1.getDOM().getShadowRoot(hostElement));
	        }
	    };
	    DomRenderer.prototype.listen = function (renderElement, name, callback) {
	        return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
	    };
	    DomRenderer.prototype.listenGlobal = function (target, name, callback) {
	        return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
	    };
	    DomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
	        get_dom_1.getDOM().setProperty(renderElement, propertyName, propertyValue);
	    };
	    DomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
	        var attrNs;
	        var nsAndName = splitNamespace(attributeName);
	        if (helper_1.isPresent(nsAndName[0])) {
	            attributeName = nsAndName[0] + ':' + nsAndName[1];
	            attrNs = NAMESPACE_URIS[nsAndName[0]];
	        }
	        if (helper_1.isPresent(attributeValue)) {
	            if (helper_1.isPresent(attrNs)) {
	                get_dom_1.getDOM().setAttributeNS(renderElement, attrNs, attributeName, attributeValue);
	            }
	            else {
	                get_dom_1.getDOM().setAttribute(renderElement, attributeName, attributeValue);
	            }
	        }
	        else {
	            if (helper_1.isPresent(attrNs)) {
	                get_dom_1.getDOM().removeAttributeNS(renderElement, attrNs, nsAndName[1]);
	            }
	            else {
	                get_dom_1.getDOM().removeAttribute(renderElement, attributeName);
	            }
	        }
	    };
	    DomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
	        var dashCasedPropertyName = helper_1.camelCaseToDashCase(propertyName);
	        if (get_dom_1.getDOM().isCommentNode(renderElement)) {
	            var existingBindings = get_dom_1.getDOM().getText(renderElement)
	                .replace(/\n/g, '')
	                .match(TEMPLATE_BINDINGS_EXP);
	            var parsedBindings = JSON.parse(existingBindings[1]);
	            parsedBindings[dashCasedPropertyName] = propertyValue;
	            get_dom_1.getDOM().setText(renderElement, TEMPLATE_COMMENT_TEXT.replace('{}', JSON.stringify(parsedBindings)));
	        }
	        else {
	            this.setElementAttribute(renderElement, propertyName, propertyValue);
	        }
	    };
	    DomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
	        if (isAdd) {
	            get_dom_1.getDOM().addClass(renderElement, className);
	        }
	        else {
	            get_dom_1.getDOM().removeClass(renderElement, className);
	        }
	    };
	    DomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
	        if (helper_1.isPresent(styleValue)) {
	            get_dom_1.getDOM().setStyle(renderElement, styleName, helper_1.stringify(styleValue));
	        }
	        else {
	            get_dom_1.getDOM().removeStyle(renderElement, styleName);
	        }
	    };
	    DomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
	        get_dom_1.getDOM().invoke(renderElement, methodName, args);
	    };
	    DomRenderer.prototype.setText = function (renderNode, text) {
	        get_dom_1.getDOM().setText(renderNode, text);
	    };
	    DomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing) {
	        return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing);
	    };
	    return DomRenderer;
	}());
	exports.DomRenderer = DomRenderer;
	var NodeDomRenderer = (function (_super) {
	    __extends(NodeDomRenderer, _super);
	    function NodeDomRenderer(_rootRenderer, _componentProto, _animationDriver) {
	        if (_componentProto.encapsulation === core_1.ViewEncapsulation.Native) {
	            _componentProto.encapsulation = core_1.ViewEncapsulation.Emulated;
	        }
	        _super.call(this, _rootRenderer, _componentProto, _animationDriver);
	        this.__rootRenderer = _rootRenderer;
	    }
	    NodeDomRenderer.prototype.selectRootElement = function (selectorOrNode, _debugInfo) {
	        var el;
	        if (typeof selectorOrNode === 'string') {
	            el = get_dom_1.getDOM().querySelector(this.__rootRenderer.document, selectorOrNode);
	            if (helper_1.isBlank(el)) {
	                throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
	            }
	        }
	        else {
	            el = selectorOrNode;
	        }
	        get_dom_1.getDOM().clearNodes(el);
	        return el;
	    };
	    NodeDomRenderer.prototype._isObject = function (val) {
	        if (val === null) {
	            return false;
	        }
	        return ((typeof val === 'function') || (typeof val === 'object'));
	    };
	    NodeDomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
	        if (this._isObject(propertyValue)) {
	            propertyValue = JSON.stringify(propertyValue);
	        }
	        else if (typeof propertyValue === 'number') {
	            propertyValue.toString();
	        }
	        if (propertyValue === null || propertyValue === undefined) {
	            propertyValue = false;
	            if (propertyName === 'innerHTML') {
	                propertyValue = '';
	            }
	        }
	        if (propertyName === 'innerHTML') {
	            return _super.prototype.setElementProperty.call(this, renderElement, propertyName, propertyValue);
	        }
	        if ((propertyName === 'autofocus' || propertyName === 'spellcheck') && propertyValue === false) {
	            return;
	        }
	        var setProp = _super.prototype.setElementProperty.call(this, renderElement, propertyName, propertyValue);
	        if (exports.IGNORE_ATTRIBUTES[propertyName]) {
	            return setProp;
	        }
	        var el = get_dom_1.getDOM().nodeName(renderElement);
	        var attrList = exports.ATTRIBUTES[el];
	        if (attrList) {
	            var booleanAttr = helper_1.listContains(attrList, propertyName);
	            if (booleanAttr) {
	                if (propertyName === 'autocomplete') {
	                    return this._setOnOffAttribute(renderElement, propertyName, propertyValue);
	                }
	                else if (propertyName === 'checked') {
	                    return this._setCheckedAttribute(renderElement, propertyName, propertyValue);
	                }
	                else if (propertyName === 'disabled') {
	                    return this._setDisabledAttribute(renderElement, propertyName, propertyValue);
	                }
	                else {
	                    return this._setBooleanAttribute(renderElement, propertyName, propertyValue);
	                }
	            }
	        }
	        if (typeof propertyValue === 'string') {
	            return _super.prototype.setElementAttribute.call(this, renderElement, propertyName, propertyValue);
	        }
	    };
	    NodeDomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
	        var styleNameCased = helper_1.cssHyphenate(styleName);
	        return _super.prototype.setElementStyle.call(this, renderElement, styleNameCased, styleValue);
	    };
	    NodeDomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
	        if (methodName === 'focus') {
	            if (get_dom_1.getDOM().nodeName(renderElement) === 'input') {
	                return _super.prototype.setElementAttribute.call(this, renderElement, 'autofocus', '');
	            }
	        }
	        return _super.prototype.invokeElementMethod.call(this, location, methodName, args);
	    };
	    NodeDomRenderer.prototype._setDisabledAttribute = function (renderElement, _propertyName, propertyValue) {
	        if (helper_1.isPresent(propertyValue)) {
	            if (propertyValue === true || propertyValue.toString() !== 'false') {
	                return _super.prototype.setElementAttribute.call(this, renderElement, 'disabled', 'disabled');
	            }
	        }
	    };
	    NodeDomRenderer.prototype._setCheckedAttribute = function (renderElement, _propertyName, propertyValue) {
	        if (helper_1.isPresent(propertyValue)) {
	            if (propertyValue === true) {
	                return _super.prototype.setElementAttribute.call(this, renderElement, propertyValue, 'checked');
	            }
	            else if (propertyValue === false) {
	                return _super.prototype.setElementAttribute.call(this, renderElement, propertyValue, '');
	            }
	        }
	    };
	    NodeDomRenderer.prototype._setOnOffAttribute = function (renderElement, propertyName, propertyValue) {
	        if (helper_1.isPresent(propertyValue)) {
	            if (propertyValue === true) {
	                return _super.prototype.setElementAttribute.call(this, renderElement, propertyValue, 'on');
	            }
	            else if (propertyValue === false) {
	                return _super.prototype.setElementAttribute.call(this, renderElement, propertyValue, 'off');
	            }
	        }
	        return _super.prototype.setElementAttribute.call(this, renderElement, propertyName, String(propertyValue));
	    };
	    NodeDomRenderer.prototype._setBooleanAttribute = function (renderElement, propertyName, propertyValue) {
	        if (helper_1.isPresent(propertyValue) && propertyValue !== false) {
	            if (propertyValue === true) {
	                return _super.prototype.setElementAttribute.call(this, renderElement, propertyName, '');
	            }
	            else {
	                return _super.prototype.setElementAttribute.call(this, renderElement, propertyName, String(propertyValue));
	            }
	        }
	        return _super.prototype.setElementAttribute.call(this, renderElement, propertyName, String(propertyValue));
	    };
	    return NodeDomRenderer;
	}(DomRenderer));
	exports.NodeDomRenderer = NodeDomRenderer;
	function moveNodesAfterSibling(sibling, nodes) {
	    var parent = get_dom_1.getDOM().parentElement(sibling);
	    if (nodes.length > 0 && helper_1.isPresent(parent)) {
	        var nextSibling = get_dom_1.getDOM().nextSibling(sibling);
	        if (helper_1.isPresent(nextSibling)) {
	            for (var i = 0; i < nodes.length; i++) {
	                get_dom_1.getDOM().insertBefore(nextSibling, nodes[i]);
	            }
	        }
	        else {
	            for (var i = 0; i < nodes.length; i++) {
	                get_dom_1.getDOM().appendChild(parent, nodes[i]);
	            }
	        }
	    }
	}
	function appendNodes(parent, nodes) {
	    for (var i = 0; i < nodes.length; i++) {
	        get_dom_1.getDOM().appendChild(parent, nodes[i]);
	    }
	}
	function decoratePreventDefault(eventHandler) {
	    return function (event) {
	        var allowDefaultBehavior = eventHandler(event);
	        if (allowDefaultBehavior === false) {
	            get_dom_1.getDOM().preventDefault(event);
	        }
	    };
	}
	var COMPONENT_REGEX = /%COMP%/g;
	exports.COMPONENT_VARIABLE = '%COMP%';
	exports.HOST_ATTR = "_nghost-" + exports.COMPONENT_VARIABLE;
	exports.CONTENT_ATTR = "_ngcontent-" + exports.COMPONENT_VARIABLE;
	function _shimContentAttribute(componentShortId) {
	    return exports.CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
	}
	function _shimHostAttribute(componentShortId) {
	    return exports.HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
	}
	function _flattenStyles(compId, styles, target) {
	    for (var i = 0; i < styles.length; i++) {
	        var style = styles[i];
	        if (Array.isArray(style)) {
	            _flattenStyles(compId, style, target);
	        }
	        else {
	            style = style.replace(COMPONENT_REGEX, compId);
	            target.push(style);
	        }
	    }
	    return target;
	}
	var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
	function splitNamespace(name) {
	    if (name[0] !== ':') {
	        return [null, name];
	    }
	    var match = name.match(NS_PREFIX_RE);
	    return [match[1], match[2]];
	}
	//# sourceMappingURL=node-renderer.js.map

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var get_dom_1 = __webpack_require__(296);
	var core_1 = __webpack_require__(268);
	var SharedStylesHost = (function () {
	    function SharedStylesHost() {
	        this._styles = [];
	        this._stylesSet = new Set();
	    }
	    SharedStylesHost.prototype.addStyles = function (styles) {
	        var _this = this;
	        var additions = [];
	        styles.forEach(function (style) {
	            if (!_this._stylesSet.has(style)) {
	                _this._stylesSet.add(style);
	                _this._styles.push(style);
	                additions.push(style);
	            }
	        });
	        this.onStylesAdded(additions);
	    };
	    SharedStylesHost.prototype.onStylesAdded = function (_additions) { };
	    SharedStylesHost.prototype.getAllStyles = function () { return this._styles; };
	    SharedStylesHost.decorators = [
	        { type: core_1.Injectable },
	    ];
	    SharedStylesHost.ctorParameters = [];
	    return SharedStylesHost;
	}());
	exports.SharedStylesHost = SharedStylesHost;
	var NodeSharedStylesHost = (function (_super) {
	    __extends(NodeSharedStylesHost, _super);
	    function NodeSharedStylesHost() {
	        _super.call(this);
	        this._hostNodes = new Set();
	    }
	    NodeSharedStylesHost.prototype.addHost = function (hostNode) {
	        this._addStylesToHost(this._styles, hostNode);
	        this._hostNodes.add(hostNode);
	    };
	    NodeSharedStylesHost.prototype.removeHost = function (hostNode) {
	        this._hostNodes.delete(hostNode);
	    };
	    NodeSharedStylesHost.prototype.onStylesAdded = function (additions) {
	        var _this = this;
	        this._hostNodes.forEach(function (hostNode) {
	            _this._addStylesToHost(additions, hostNode);
	        });
	    };
	    NodeSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
	        for (var i = 0; i < styles.length; i++) {
	            var style = styles[i];
	            get_dom_1.getDOM().appendChild(host, get_dom_1.getDOM().createStyleElement(style));
	        }
	    };
	    NodeSharedStylesHost.decorators = [
	        { type: core_1.Injectable },
	    ];
	    NodeSharedStylesHost.ctorParameters = [];
	    return NodeSharedStylesHost;
	}(SharedStylesHost));
	exports.NodeSharedStylesHost = NodeSharedStylesHost;
	//# sourceMappingURL=node-shared-styles-host.js.map

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var core_1 = __webpack_require__(268);
	var common_1 = __webpack_require__(287);
	var tokens_1 = __webpack_require__(334);
	var nodeUrl = __webpack_require__(333);
	var NodeLocation = (function () {
	    function NodeLocation(config) {
	        this.assign(config);
	    }
	    Object.defineProperty(NodeLocation.prototype, "origin", {
	        get: function () {
	            return this.protocol + '//' + this.hostname + ':' + this.port;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NodeLocation.prototype.parse = function (url) {
	        return nodeUrl.parse(url);
	    };
	    NodeLocation.prototype.format = function (obj) {
	        return nodeUrl.format(obj);
	    };
	    NodeLocation.prototype.assign = function (parsed) {
	        this.pathname = parsed.pathname || '';
	        this.search = parsed.search || '';
	        this.hash = parsed.hash || '';
	        this.host = parsed.host;
	        this.hostname = parsed.hostname;
	        this.href = parsed.href;
	        this.port = parsed.port;
	        this.protocol = parsed.protocol;
	        return this;
	    };
	    NodeLocation.prototype.toJSON = function () {
	        var config = {
	            hash: this.hash,
	            host: this.host,
	            hostname: this.hostname,
	            href: this.href,
	            pathname: this.pathname,
	            port: this.port,
	            protocol: this.protocol,
	            search: this.search
	        };
	        return config;
	    };
	    return NodeLocation;
	}());
	exports.NodeLocation = NodeLocation;
	var State = (function () {
	    function State(state, title, url) {
	        this.state = state;
	        this.title = title;
	        this.url = url;
	    }
	    State.prototype.toJSON = function () {
	        return {
	            state: this.state,
	            title: this.title,
	            url: this.url
	        };
	    };
	    return State;
	}());
	exports.State = State;
	var PopStateEvent = (function () {
	    function PopStateEvent(state) {
	        this.state = state;
	        this.type = 'popstate';
	    }
	    PopStateEvent.prototype.toJSON = function () {
	        return {
	            state: this.state
	        };
	    };
	    return PopStateEvent;
	}());
	exports.PopStateEvent = PopStateEvent;
	var NodePlatformLocation = (function (_super) {
	    __extends(NodePlatformLocation, _super);
	    function NodePlatformLocation(originUrl, requestUrl, baseUrl) {
	        _super.call(this);
	        this._stack = [];
	        this._stackIndex = -1;
	        this._popStateListeners = [];
	        this._baseUrl = '/';
	        this._originUrl = originUrl;
	        this._baseUrl = baseUrl || '/';
	        this.pushState(null, null, requestUrl);
	    }
	    NodePlatformLocation.prototype.updateUrl = function (originUrl, baseUrl) {
	        if (baseUrl === void 0) { baseUrl = '/'; }
	        this._originUrl = originUrl;
	        this._baseUrl = baseUrl || '/';
	    };
	    Object.defineProperty(NodePlatformLocation.prototype, "search", {
	        get: function () { return this._loc.search; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NodePlatformLocation.prototype, "hash", {
	        get: function () { return this._loc.hash; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NodePlatformLocation.prototype, "pathname", {
	        get: function () { return this._loc.pathname; },
	        set: function (newPathname) { this._loc.pathname = newPathname; },
	        enumerable: true,
	        configurable: true
	    });
	    NodePlatformLocation.prototype.getBaseHrefFromDOM = function () {
	        throw new Error("\n      Attempt to get base href from DOM on the server.\n      You have to provide a value for the APP_BASE_HREF token through DI.\n    ");
	    };
	    NodePlatformLocation.prototype.getBaseHref = function () { return this._baseUrl; };
	    NodePlatformLocation.prototype.path = function () { return this._loc.pathname; };
	    NodePlatformLocation.prototype.pushState = function (state, title, url) {
	        this._stack.push(new State(state, title, url));
	        this._stackIndex++;
	        this._updateLocation();
	    };
	    NodePlatformLocation.prototype.replaceState = function (state, title, url) {
	        this._stack[this._stackIndex] = new State(state, title, url);
	        this._updateLocation();
	    };
	    NodePlatformLocation.prototype.onPopState = function (fn) { this._popStateListeners.push(fn); };
	    NodePlatformLocation.prototype.onHashChange = function (_fn) { };
	    NodePlatformLocation.prototype.back = function () {
	        if (this._stackIndex === 0) {
	            return;
	        }
	        this._stackIndex--;
	        this._updateLocation();
	        this._callPopStateListeners();
	    };
	    NodePlatformLocation.prototype.forward = function () {
	        if (this._stackIndex === this._stack.length - 1) {
	            return;
	        }
	        this._stackIndex++;
	        this._updateLocation();
	        this._callPopStateListeners();
	    };
	    NodePlatformLocation.prototype.prepareExternalUrl = function (internal) {
	        return joinWithSlash(this._baseUrl, internal);
	    };
	    NodePlatformLocation.prototype.toJSON = function () {
	        return {
	            location: this._loc,
	            stack: this._stack,
	            stackIndex: this._stackIndex,
	            popStateListeners: this._popStateListeners,
	            baseHref: this._baseUrl
	        };
	    };
	    NodePlatformLocation.prototype._updateLocation = function () {
	        var state = this._stack[this._stackIndex];
	        var url = state.url;
	        this._setLocationByUrl(url);
	    };
	    NodePlatformLocation.prototype._setLocationByUrl = function (url) {
	        var resolvedOriginBase = nodeUrl.resolve(this._originUrl, this._baseUrl);
	        var resolvedWithUrl = nodeUrl.resolve(resolvedOriginBase, url);
	        var nodeLocation = nodeUrl.parse(resolvedWithUrl);
	        this._loc = new NodeLocation(nodeLocation);
	    };
	    NodePlatformLocation.prototype._callPopStateListeners = function () {
	        var state = this._stack[this._stackIndex].state;
	        var event = new PopStateEvent(state);
	        this._popStateListeners.forEach(function (listener) { return listener(event); });
	    };
	    NodePlatformLocation.decorators = [
	        { type: core_1.Injectable },
	    ];
	    NodePlatformLocation.ctorParameters = [
	        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [tokens_1.ORIGIN_URL,] },] },
	        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [tokens_1.REQUEST_URL,] },] },
	        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [common_1.APP_BASE_HREF,] },] },
	    ];
	    return NodePlatformLocation;
	}(common_1.PlatformLocation));
	exports.NodePlatformLocation = NodePlatformLocation;
	function joinWithSlash(start, end) {
	    if (start.length === 0) {
	        return end;
	    }
	    if (end.length === 0) {
	        return start;
	    }
	    var slashes = 0;
	    if (start.endsWith('/')) {
	        slashes++;
	    }
	    if (end.startsWith('/')) {
	        slashes++;
	    }
	    if (slashes === 2) {
	        return start + end.substring(1);
	    }
	    if (slashes === 1) {
	        return start + end;
	    }
	    return start + '/' + end;
	}
	exports.joinWithSlash = joinWithSlash;
	exports.NODE_LOCATION_PROVIDERS = [
	    { provide: common_1.PlatformLocation, useClass: NodePlatformLocation }
	];
	//# sourceMappingURL=node-location.js.map

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var get_dom_1 = __webpack_require__(296);
	var platform_browser_1 = __webpack_require__(286);
	var __private_imports__1 = __webpack_require__(288);
	var core_1 = __webpack_require__(268);
	var common_1 = __webpack_require__(287);
	var compiler_1 = __webpack_require__(267);
	var http_1 = __webpack_require__(328);
	var preboot_1 = __webpack_require__(339);
	var node_location_1 = __webpack_require__(337);
	var node_document_1 = __webpack_require__(298);
	var node_renderer_1 = __webpack_require__(335);
	var node_shared_styles_host_1 = __webpack_require__(336);
	var parse5_adapter_1 = __webpack_require__(343);
	var tokens_1 = __webpack_require__(334);
	function _errorHandler() {
	    return new core_1.ErrorHandler();
	}
	exports._errorHandler = _errorHandler;
	var _documentDeps = [node_shared_styles_host_1.NodeSharedStylesHost, core_1.NgZone];
	function _document(domSharedStylesHost, _zone) {
	    var document = Zone.current.get('document');
	    if (!document) {
	        throw new Error('Please provide a document in the universal config');
	    }
	    if (typeof document === 'string') {
	        document = node_document_1.parseDocument(document);
	    }
	    domSharedStylesHost.addHost(document.head);
	    return document;
	}
	exports._document = _document;
	function _resolveDefaultAnimationDriver() {
	    if (get_dom_1.getDOM().supportsWebAnimation()) {
	        return platform_browser_1.AnimationDriver.NOOP;
	    }
	    return platform_browser_1.AnimationDriver.NOOP;
	}
	exports._resolveDefaultAnimationDriver = _resolveDefaultAnimationDriver;
	exports.__PLATFORM_REF = null;
	function removePlatformRef() {
	    exports.__PLATFORM_REF = null;
	}
	exports.removePlatformRef = removePlatformRef;
	function getPlatformRef() {
	    return exports.__PLATFORM_REF;
	}
	exports.getPlatformRef = getPlatformRef;
	function setPlatformRef(platformRef) {
	    exports.__PLATFORM_REF = platformRef;
	}
	exports.setPlatformRef = setPlatformRef;
	function s4() {
	    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
	}
	var NodePlatform = (function () {
	    function NodePlatform(_platformRef) {
	        this._platformRef = _platformRef;
	    }
	    Object.defineProperty(NodePlatform.prototype, "platformRef", {
	        get: function () {
	            return this._platformRef;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NodePlatform.prototype.cacheModuleFactory = function (moduleType, compilerOptions) {
	        if (NodePlatform._cache.has(moduleType)) {
	            return Promise.resolve(NodePlatform._cache.get(moduleType));
	        }
	        var compilerFactory = this._platformRef.injector.get(core_1.CompilerFactory);
	        var compiler;
	        if (compilerOptions) {
	            compiler = compilerFactory.createCompiler(compilerOptions instanceof Array ? compilerOptions : [compilerOptions]);
	        }
	        else {
	            compiler = compilerFactory.createCompiler();
	        }
	        return compiler.compileModuleAsync(moduleType)
	            .then(function (moduleFactory) {
	            NodePlatform._cache.set(moduleType, moduleFactory);
	            return moduleFactory;
	        });
	    };
	    NodePlatform.prototype.serializeModule = function (ModuleType, config) {
	        var _this = this;
	        if (config === void 0) { config = {}; }
	        if (config && !config.id) {
	            config.id = s4();
	        }
	        config.time && console.time('id: ' + config.id + ' bootstrapModule: ');
	        config.time && console.time('id: ' + config.id + ' ngApp: ');
	        return (config.compilerOptions ?
	            this.bootstrapModule(ModuleType, config.compilerOptions)
	            :
	                this.bootstrapModule(ModuleType))
	            .then(function (moduleRef) {
	            config.time && console.timeEnd('id: ' + config.id + ' bootstrapModule: ');
	            return _this.serialize(moduleRef, config);
	        })
	            .then(function (html) {
	            config.time && console.timeEnd('id: ' + config.id + ' ngApp: ');
	            return html;
	        })
	            .catch(function (e) {
	            throw e;
	        });
	    };
	    NodePlatform.prototype.serializeModuleFactory = function (ModuleType, config) {
	        var _this = this;
	        if (config === void 0) { config = {}; }
	        if (config && !config.id) {
	            config.id = s4();
	        }
	        config.time && console.time('id: ' + config.id + ' bootstrapModuleFactory: ');
	        config.time && console.time('id: ' + config.id + ' ngApp: ');
	        return this.bootstrapModuleFactory(ModuleType)
	            .then(function (moduleRef) {
	            config.time && console.timeEnd('id: ' + config.id + ' bootstrapModuleFactory: ');
	            return _this.serialize(moduleRef, config);
	        })
	            .then(function (html) {
	            config.time && console.timeEnd('id: ' + config.id + ' ngApp: ');
	            return html;
	        })
	            .catch(function (e) {
	            throw e;
	        });
	    };
	    NodePlatform.prototype.serialize = function (moduleRef, config) {
	        if (config === void 0) { config = {}; }
	        var cancelHandler = function () { return false; };
	        if (config && ('cancelHandler' in config)) {
	            cancelHandler = config.cancelHandler;
	        }
	        var _map = new Map();
	        var _store = {
	            set: function (key, value, defaultValue) {
	                _map.set(key, (value !== undefined) ? value : defaultValue);
	            },
	            get: function (key, defaultValue) {
	                return _map.has(key) ? _map.get(key) : defaultValue;
	            },
	            clear: function () {
	                _map.clear();
	                _store = null;
	                _map = null;
	            }
	        };
	        function errorHandler(_err, store, modRef, _currentIndex, _currentArray) {
	            var document = '';
	            try {
	                document = store.get('DOCUMENT');
	                if (typeof document !== 'string') {
	                    document = Zone.current.get('document');
	                }
	                if (typeof document !== 'string') {
	                    document = Zone.current.get('DOCUMENT');
	                }
	                var appRef = store.get('ApplicationRef');
	                if (appRef && appRef.ngOnDestroy) {
	                    appRef.ngOnDestroy();
	                }
	                if (modRef && modRef.destroy) {
	                    modRef.destroy();
	                }
	                _store && _store.clear();
	            }
	            catch (e) { }
	            return document;
	        }
	        return asyncPromiseSeries(_store, moduleRef, errorHandler, cancelHandler, config, [
	            function createDiStore(store, moduleRef) {
	                var modInjector = moduleRef.injector;
	                var instance = moduleRef.instance;
	                store.set('universalOnInit', instance.universalOnInit, NodePlatform._noop);
	                store.set('universalDoCheck', instance.universalDoCheck, NodePlatform._noop);
	                store.set('universalOnStable', instance.universalOnStable, NodePlatform._noop);
	                store.set('universalDoDehydrate', instance.universalDoDehydrate, NodePlatform._noop);
	                store.set('universalAfterDehydrate', instance.universalAfterDehydrate, NodePlatform._noop);
	                store.set('universalOnRendered', instance.universalOnRendered, NodePlatform._noop);
	                store.set('ApplicationRef', modInjector.get(core_1.ApplicationRef));
	                store.set('NgZone', modInjector.get(core_1.NgZone));
	                store.set('preboot', config.preboot, false);
	                store.set('APP_ID', modInjector.get(core_1.APP_ID, null));
	                store.set('NODE_APP_ID', s4());
	                store.set('DOCUMENT', modInjector.get(platform_browser_1.DOCUMENT));
	                store.set('DOM', get_dom_1.getDOM());
	                store.set('UNIVERSAL_CACHE', {});
	                return moduleRef;
	            },
	            function checkStable(store, moduleRef) {
	                config.time && console.time('id: ' + config.id + ' stable: ');
	                var universalDoCheck = store.get('universalDoCheck');
	                var universalOnInit = store.get('universalOnInit');
	                var universalOnStable = store.get('universalOnStable');
	                var rootNgZone = store.get('NgZone');
	                var appRef = store.get('ApplicationRef');
	                var components = appRef.components;
	                universalOnInit(moduleRef);
	                function outsideNg(compRef, ngZone, http, jsonp) {
	                    function checkStable(done, ref) {
	                        ngZone.runOutsideAngular(function () {
	                            setTimeout(function stable() {
	                                if (cancelHandler()) {
	                                    return done(ref);
	                                }
	                                if (ngZone.hasPendingMicrotasks === true) {
	                                    return checkStable(done, ref);
	                                }
	                                if (ngZone.hasPendingMacrotasks === true) {
	                                    return checkStable(done, ref);
	                                }
	                                if (http && http._async > 0) {
	                                    return checkStable(done, ref);
	                                }
	                                if (jsonp && jsonp._async > 0) {
	                                    return checkStable(done, ref);
	                                }
	                                if (ngZone.isStable === true) {
	                                    var isStable = universalDoCheck(ref, ngZone);
	                                    if (universalDoCheck !== NodePlatform._noop) {
	                                        if (typeof isStable !== 'boolean') {
	                                            console.warn('\nWARNING: universalDoCheck must return a boolean value of either true or false\n');
	                                        }
	                                        else if (isStable !== true) {
	                                            return checkStable(done, ref);
	                                        }
	                                    }
	                                }
	                                if (ngZone.isStable === true) {
	                                    return done(ref);
	                                }
	                                return checkStable(done, ref);
	                            }, 0);
	                        });
	                    }
	                    return ngZone.runOutsideAngular(function () {
	                        return new Promise(function (resolve) {
	                            checkStable(resolve, compRef);
	                        });
	                    });
	                }
	                var stableComponents = components.map(function (compRef) {
	                    var cmpInjector = compRef.injector;
	                    var ngZone = cmpInjector.get(core_1.NgZone);
	                    var http = cmpInjector.get(http_1.Http, null);
	                    var jsonp = cmpInjector.get(http_1.Jsonp, null);
	                    return rootNgZone.runOutsideAngular(outsideNg.bind(null, compRef, ngZone, http, jsonp));
	                });
	                return rootNgZone.runOutsideAngular(function () {
	                    return Promise.all(stableComponents);
	                })
	                    .then(function () {
	                    config.time && console.timeEnd('id: ' + config.id + ' stable: ');
	                    universalOnStable(moduleRef);
	                    return moduleRef;
	                });
	            },
	            function injectPreboot(store, moduleRef) {
	                var preboot = store.get('preboot');
	                if (typeof preboot === 'boolean') {
	                    if (!preboot) {
	                        return moduleRef;
	                    }
	                    else {
	                        preboot = {};
	                    }
	                }
	                config.time && console.time('id: ' + config.id + ' preboot: ');
	                var DOM = store.get('DOM');
	                var DOCUMENT = store.get('DOCUMENT');
	                var appRef = store.get('ApplicationRef');
	                var selectorsList = moduleRef.bootstrapFactories.map(function (factory) { return factory.selector; });
	                var bodyList = DOCUMENT.body.children.filter(function (el) { return Boolean(el.tagName); }).map(function (el) { return el.tagName.toLowerCase(); }).join(',');
	                var components = appRef.components;
	                var prebootCode = null;
	                var prebootConfig = null;
	                var key = (typeof preboot === 'object') && preboot || null;
	                var prebootEl = null;
	                var el = null;
	                var lastRef = null;
	                try {
	                    if (key && NodePlatform._cache.has(key)) {
	                        prebootEl = NodePlatform._cache.get(key).prebootEl;
	                    }
	                    else if (key && !prebootEl) {
	                        try {
	                            prebootConfig = JSON.parse(key);
	                        }
	                        catch (e) {
	                            prebootConfig = preboot;
	                        }
	                        if (!prebootConfig.appRoot) {
	                            prebootConfig.appRoot = selectorsList;
	                        }
	                        if (!selectorsList) {
	                            selectorsList = moduleRef.bootstrapFactories.map(function (factory) { return factory.selector; });
	                        }
	                        config.time && console.time('id: ' + config.id + ' preboot insert dom: ');
	                        prebootCode = node_document_1.parseFragment('' +
	                            '<script>\n' +
	                            ' ' + preboot_1.getInlineCode(prebootConfig) +
	                            '</script>' +
	                            '');
	                        prebootEl = DOM.createElement('div');
	                        DOM.appendChild(prebootEl, prebootCode.childNodes[0]);
	                        NodePlatform._cache.set(key, { prebootCode: prebootCode, prebootEl: prebootEl });
	                        config.time && console.timeEnd('id: ' + config.id + ' preboot insert dom: ');
	                    }
	                    lastRef = { cmp: null, strIndex: -1, index: -1 };
	                    selectorsList.forEach(function (select, i) {
	                        var lastValue = bodyList.indexOf(select);
	                        if (lastValue >= lastRef.strIndex) {
	                            lastRef.strIndex = lastValue;
	                            lastRef.cmp = components[i];
	                        }
	                    });
	                    el = lastRef.cmp.location.nativeElement;
	                    lastRef = null;
	                    DOM.insertAfter(el, prebootEl);
	                }
	                catch (e) {
	                    console.log(e);
	                    config.time && console.timeEnd('id: ' + config.id + ' preboot: ');
	                    return moduleRef;
	                }
	                config.time && console.timeEnd('id: ' + config.id + ' preboot: ');
	                return moduleRef;
	            },
	            function dehydrateCache(store, moduleRef) {
	                config.time && console.time('id: ' + config.id + ' universal cache: ');
	                var appId = store.get('NODE_APP_ID', null);
	                var UNIVERSAL_CACHE = store.get('UNIVERSAL_CACHE');
	                var universalDoDehydrate = store.get('universalDoDehydrate');
	                var cache = {};
	                UNIVERSAL_CACHE['APP_ID'] = appId;
	                Object.assign(cache, UNIVERSAL_CACHE);
	                universalDoDehydrate(cache);
	                Object.assign(UNIVERSAL_CACHE, cache);
	                cache = null;
	                config.time && console.timeEnd('id: ' + config.id + ' universal cache: ');
	                return moduleRef;
	            },
	            function injectCacheInDocument(store, moduleRef) {
	                config.time && console.time('id: ' + config.id + ' dehydrate: ');
	                var universalAfterDehydrate = store.get('universalAfterDehydrate');
	                var DOM = store.get('DOM');
	                var UNIVERSAL_CACHE = store.get('UNIVERSAL_CACHE');
	                var document = store.get('DOCUMENT');
	                var script = null;
	                var el = null;
	                try {
	                    config.time && console.time('id: ' + config.id + ' dehydrate insert dom: ');
	                    el = DOM.createElement('universal-script');
	                    script = node_document_1.parseFragment('' +
	                        '<script>\n' +
	                        ' try {' +
	                        'window.UNIVERSAL_CACHE = (' + JSON.stringify(UNIVERSAL_CACHE) + ') || {};' +
	                        '} catch(e) {' +
	                        '  console.warn("Angular Universal: There was a problem parsing data from the server")' +
	                        '}\n' +
	                        '</script>' +
	                        '');
	                    DOM.appendChild(el, script.childNodes[0]);
	                    DOM.appendChild(document.body, el);
	                    el = null;
	                    universalAfterDehydrate();
	                    config.time && console.timeEnd('id: ' + config.id + ' dehydrate insert dom: ');
	                }
	                catch (e) {
	                    config.time && console.timeEnd('id: ' + config.id + ' dehydrate: ');
	                    return moduleRef;
	                }
	                config.time && console.timeEnd('id: ' + config.id + ' dehydrate: ');
	                return moduleRef;
	            },
	            function destroyAppAndSerializeDocument(store, moduleRef) {
	                config.time && console.time('id: ' + config.id + ' serialize: ');
	                var universalOnRendered = store.get('universalOnRendered');
	                var document = store.get('DOCUMENT');
	                var appId = store.get('NODE_APP_ID');
	                var appRef = store.get('ApplicationRef');
	                var html = null;
	                var destroyApp = null;
	                var destroyModule = null;
	                html = node_document_1.serializeDocument(document).replace(/%cmp%/g, appId);
	                universalOnRendered(html);
	                document = null;
	                store.clear();
	                destroyApp = function () {
	                    appRef.ngOnDestroy();
	                    appRef = null;
	                    destroyApp = null;
	                };
	                destroyModule = function () {
	                    moduleRef.destroy();
	                    moduleRef = null;
	                    destroyModule = null;
	                };
	                if (config.asyncDestroy) {
	                    setTimeout(function () { return destroyApp() && setTimeout(destroyModule, 1); }, 1);
	                }
	                else {
	                    destroyApp() && destroyModule();
	                }
	                config.time && console.timeEnd('id: ' + config.id + ' serialize: ');
	                return html;
	            },
	        ]);
	    };
	    Object.defineProperty(NodePlatform.prototype, "injector", {
	        get: function () {
	            return this.platformRef.injector;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NodePlatform.prototype.bootstrapModule = function (moduleType, compilerOptions) {
	        var _this = this;
	        if (NodePlatform._cache.has(moduleType)) {
	            return this.platformRef.bootstrapModuleFactory(NodePlatform._cache.get(moduleType));
	        }
	        var compilerFactory = this._platformRef.injector.get(core_1.CompilerFactory);
	        var compiler;
	        if (compilerOptions) {
	            compiler = compilerFactory.createCompiler(compilerOptions instanceof Array ? compilerOptions : [compilerOptions]);
	        }
	        else {
	            compiler = compilerFactory.createCompiler();
	        }
	        return compiler.compileModuleAsync(moduleType)
	            .then(function (moduleFactory) {
	            NodePlatform._cache.set(moduleType, moduleFactory);
	            return _this.platformRef.bootstrapModuleFactory(moduleFactory);
	        });
	    };
	    NodePlatform.prototype.bootstrapModuleFactory = function (moduleFactory) {
	        return this.platformRef.bootstrapModuleFactory(moduleFactory);
	    };
	    Object.defineProperty(NodePlatform.prototype, "disposed", {
	        get: function () { return this.platformRef.destroyed; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NodePlatform.prototype, "destroyed", {
	        get: function () { return this.platformRef.destroyed; },
	        enumerable: true,
	        configurable: true
	    });
	    NodePlatform.prototype.destroy = function () { return this.platformRef.destroy(); };
	    NodePlatform.prototype.dispose = function () { return this.destroy(); };
	    NodePlatform.prototype.registerDisposeListener = function (dispose) {
	        return this.platformRef.onDestroy(dispose);
	    };
	    NodePlatform.prototype.onDestroy = function (callback) {
	        this._platformRef = null;
	        return this.platformRef.onDestroy(callback);
	    };
	    NodePlatform._noop = function () { };
	    NodePlatform._cache = new WeakMap();
	    return NodePlatform;
	}());
	exports.NodePlatform = NodePlatform;
	function asyncPromiseSeries(store, modRef, errorHandler, cancelHandler, config, middleware, _timer) {
	    if (_timer === void 0) { _timer = 1; }
	    var errorCalled = false;
	    config.time && console.time('id: ' + config.id + ' asyncPromiseSeries: ');
	    return middleware.reduce(function reduceAsyncPromiseSeries(promise, cb, currentIndex, currentArray) {
	        if (errorCalled || cancelHandler()) {
	            return promise;
	        }
	        return promise.then(function reduceAsyncPromiseSeriesChain(ref) {
	            if (errorCalled || cancelHandler()) {
	                return ref;
	            }
	            return new Promise(function reduceAsyncPromiseSeriesPromiseChain(resolve, reject) {
	                setTimeout(function () {
	                    if (errorCalled || cancelHandler()) {
	                        return resolve(ref);
	                    }
	                    try {
	                        resolve(cb(store, ref));
	                    }
	                    catch (e) {
	                        reject(e);
	                    }
	                }, 0);
	            });
	        }).catch(function (err) {
	            errorCalled = true;
	            return errorHandler(err, store, modRef, currentIndex, currentArray);
	        });
	    }, Promise.resolve(modRef)).then(function (val) {
	        config.time && console.timeEnd('id: ' + config.id + ' asyncPromiseSeries: ');
	        if (cancelHandler()) {
	            return errorHandler(null, store, modRef, null, null);
	        }
	        return val;
	    });
	}
	var NodeEventManager = (function () {
	    function NodeEventManager(plugins, _document, _zone) {
	        var _this = this;
	        this._document = _document;
	        this._zone = _zone;
	        plugins.forEach(function (p) { return p.manager = _this; });
	        this._plugins = plugins.slice().reverse();
	    }
	    NodeEventManager.prototype.getWindow = function () { return this._document._window; };
	    NodeEventManager.prototype.getDocument = function () { return this._document; };
	    NodeEventManager.prototype.getZone = function () { return this._zone; };
	    NodeEventManager.prototype.addEventListener = function (element, eventName, handler) {
	        var plugin = this._findPluginFor(eventName);
	        return plugin.addEventListener(element, eventName, handler);
	    };
	    NodeEventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
	        var plugin = this._findPluginFor(eventName);
	        return plugin.addGlobalEventListener(target, eventName, handler);
	    };
	    NodeEventManager.prototype._findPluginFor = function (eventName) {
	        var plugins = this._plugins;
	        for (var i = 0; i < plugins.length; i++) {
	            var plugin = plugins[i];
	            if (plugin.supports(eventName)) {
	                return plugin;
	            }
	        }
	        throw new Error("No event manager plugin found for event " + eventName);
	    };
	    NodeEventManager.decorators = [
	        { type: core_1.Injectable },
	    ];
	    NodeEventManager.ctorParameters = [
	        { type: Array, decorators: [{ type: core_1.Inject, args: [platform_browser_1.EVENT_MANAGER_PLUGINS,] },] },
	        { type: undefined, decorators: [{ type: core_1.Inject, args: [platform_browser_1.DOCUMENT,] },] },
	        { type: core_1.NgZone, },
	    ];
	    return NodeEventManager;
	}());
	exports.NodeEventManager = NodeEventManager;
	var NodeDomEventsPlugin = (function () {
	    function NodeDomEventsPlugin() {
	    }
	    NodeDomEventsPlugin.prototype.supports = function (_eventName) { return true; };
	    NodeDomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        var zone = this.manager.getZone();
	        var outsideHandler = function (event) { return zone.runGuarded(function () { return handler(event); }); };
	        return this.manager.getZone().runOutsideAngular(function () {
	            return get_dom_1.getDOM().onAndCancel(element, eventName, outsideHandler);
	        });
	    };
	    NodeDomEventsPlugin.prototype.addGlobalEventListener = function (target, eventName, handler) {
	        var document = this.manager.getDocument();
	        var zone = this.manager.getZone();
	        var element;
	        switch (target) {
	            case 'window':
	                element = document._window;
	                break;
	            case 'document':
	                element = document;
	                break;
	            case 'body':
	                element = document.body;
	                break;
	        }
	        var outsideHandler = function (event) { return zone.runGuarded(function () { return handler(event); }); };
	        return this.manager.getZone().runOutsideAngular(function () {
	            return get_dom_1.getDOM().onAndCancel(element, eventName, outsideHandler);
	        });
	    };
	    NodeDomEventsPlugin.decorators = [
	        { type: core_1.Injectable },
	    ];
	    NodeDomEventsPlugin.ctorParameters = [];
	    return NodeDomEventsPlugin;
	}());
	exports.NodeDomEventsPlugin = NodeDomEventsPlugin;
	function _APP_BASE_HREF(_zone) {
	    return Zone.current.get('baseUrl');
	}
	exports._APP_BASE_HREF = _APP_BASE_HREF;
	function _REQUEST_URL(_zone) {
	    return Zone.current.get('requestUrl');
	}
	exports._REQUEST_URL = _REQUEST_URL;
	function _ORIGIN_URL(_zone) {
	    return Zone.current.get('originUrl');
	}
	exports._ORIGIN_URL = _ORIGIN_URL;
	var MockTestabilityRegistry = (function (_super) {
	    __extends(MockTestabilityRegistry, _super);
	    function MockTestabilityRegistry() {
	        _super.apply(this, arguments);
	    }
	    MockTestabilityRegistry.prototype.registerApplication = function () {
	        return null;
	    };
	    return MockTestabilityRegistry;
	}(core_1.TestabilityRegistry));
	exports.MockTestabilityRegistry = MockTestabilityRegistry;
	var NodeModule = (function () {
	    function NodeModule(parentModule) {
	        if (parentModule) {
	            throw new Error("NodeModule has already been loaded.");
	        }
	    }
	    NodeModule.forRoot = function (document, config) {
	        if (config === void 0) { config = {}; }
	        var _config = Object.assign({}, { document: document }, config);
	        return NodeModule.withConfig(_config);
	    };
	    NodeModule.withConfig = function (config) {
	        if (config === void 0) { config = {}; }
	        var providers = tokens_1.createUrlProviders(config);
	        return {
	            ngModule: NodeModule,
	            providers: providers.slice()
	        };
	    };
	    NodeModule.decorators = [
	        { type: core_1.NgModule, args: [{
	                    providers: [
	                        { provide: common_1.PlatformLocation, useClass: node_location_1.NodePlatformLocation },
	                        __private_imports__1.BROWSER_SANITIZATION_PROVIDERS,
	                        { provide: core_1.ErrorHandler, useFactory: _errorHandler, deps: [] },
	                        { provide: platform_browser_1.DOCUMENT, useFactory: _document, deps: _documentDeps },
	                        NodeDomEventsPlugin,
	                        { provide: __private_imports__1.DomEventsPlugin, useExisting: NodeDomEventsPlugin, multi: true },
	                        { provide: platform_browser_1.EVENT_MANAGER_PLUGINS, useExisting: NodeDomEventsPlugin, multi: true },
	                        { provide: platform_browser_1.EVENT_MANAGER_PLUGINS, useClass: __private_imports__1.KeyEventsPlugin, multi: true },
	                        { provide: platform_browser_1.EVENT_MANAGER_PLUGINS, useClass: __private_imports__1.HammerGesturesPlugin, multi: true },
	                        { provide: platform_browser_1.HAMMER_GESTURE_CONFIG, useClass: platform_browser_1.HammerGestureConfig },
	                        NodeEventManager,
	                        { provide: platform_browser_1.EventManager, useExisting: NodeEventManager },
	                        { provide: platform_browser_1.AnimationDriver, useFactory: _resolveDefaultAnimationDriver, deps: [] },
	                        core_1.Testability,
	                        node_renderer_1.NodeDomRootRenderer,
	                        { provide: __private_imports__1.DomRootRenderer, useExisting: node_renderer_1.NodeDomRootRenderer },
	                        { provide: core_1.RootRenderer, useExisting: __private_imports__1.DomRootRenderer },
	                        node_shared_styles_host_1.NodeSharedStylesHost,
	                        { provide: __private_imports__1.SharedStylesHost, useExisting: node_shared_styles_host_1.NodeSharedStylesHost },
	                        { provide: __private_imports__1.DomSharedStylesHost, useExisting: node_shared_styles_host_1.NodeSharedStylesHost },
	                        { provide: common_1.APP_BASE_HREF, useFactory: _APP_BASE_HREF, deps: [core_1.NgZone] },
	                        { provide: tokens_1.REQUEST_URL, useFactory: _REQUEST_URL, deps: [core_1.NgZone] },
	                        { provide: tokens_1.ORIGIN_URL, useFactory: _ORIGIN_URL, deps: [core_1.NgZone] },
	                        { provide: core_1.APP_ID, useValue: '%cmp%' },
	                        { provide: core_1.TestabilityRegistry, useClass: MockTestabilityRegistry }
	                    ],
	                    exports: [common_1.CommonModule, core_1.ApplicationModule]
	                },] },
	    ];
	    NodeModule.ctorParameters = [
	        { type: NodeModule, decorators: [{ type: core_1.Optional }, { type: core_1.SkipSelf },] },
	    ];
	    return NodeModule;
	}());
	exports.NodeModule = NodeModule;
	function initParse5Adapter() {
	    parse5_adapter_1.Parse5DomAdapter.makeCurrent();
	}
	exports.INTERNAL_NODE_PLATFORM_PROVIDERS = [
	    { provide: core_1.PLATFORM_INITIALIZER, useValue: initParse5Adapter, multi: true },
	];
	exports.platformNodeDynamic = function (extraProviders, platform) {
	    if (!platform) {
	        if (!getPlatformRef()) {
	            platform = core_1.createPlatformFactory(compiler_1.platformCoreDynamic, 'nodeDynamic', exports.INTERNAL_NODE_PLATFORM_PROVIDERS)(extraProviders);
	            setPlatformRef(platform);
	        }
	        else {
	            platform = getPlatformRef();
	        }
	    }
	    return new NodePlatform(platform);
	};
	//# sourceMappingURL=node-platform.js.map

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {"use strict";
	var preboot_inline_1 = __webpack_require__(340);
	var preboot_browser_1 = __webpack_require__(341);
	var fs = __webpack_require__(261);
	var path = __webpack_require__(342);
	var inlineCodeCache = {};
	// exporting default options in case developer wants to use these + custom on top
	exports.defaultOptions = {
	    buffer: true,
	    // these are the default events are are listening for an transfering from server view to client view
	    eventSelectors: [
	        // for recording changes in form elements
	        { selector: 'input,textarea', events: ['keypress', 'keyup', 'keydown', 'input', 'change'] },
	        { selector: 'select,option', events: ['change'] },
	        // when user hits return button in an input box
	        { selector: 'input', events: ['keyup'], preventDefault: true, keyCodes: [13], freeze: true },
	        // for tracking focus (no need to replay)
	        { selector: 'input,textarea', events: ['focusin', 'focusout', 'mousedown', 'mouseup'], noReplay: true },
	        // user clicks on a button
	        { selector: 'input[type="submit"],button', events: ['click'], preventDefault: true, freeze: true }
	    ]
	};
	/**
	 * Deprecated function just used for backward compatibility.
	 * note that certian older options for preboot like listen, replay, freeze, etc. are no longer available
	 *
	 * @param legacyOptions Object that contains legacy preboot options
	 */
	function getBrowserCode(legacyOptions) {
	    legacyOptions = legacyOptions || {};
	    // we will remove this function with the next version
	    console.warn('getBrowserCode() deprecated and many custom options no longer available. ' +
	        'Please switch to getInlineCode().');
	    var inlineCode = getInlineCode({
	        appRoot: legacyOptions.appRoot || 'app',
	        uglify: legacyOptions.uglify,
	        buffer: legacyOptions.buffer,
	        noInlineCache: legacyOptions.noInlineCache,
	        eventSelectors: legacyOptions.eventSelectors,
	        serverClientRoot: legacyOptions.serverClientRoot
	    });
	    // two different possibilities depending on how client is calling preboot_node
	    var minCodePath = path.normalize(__dirname + '/../../../__dist/preboot_browser.min.js');
	    var browserCode = (legacyOptions.uglify && fs.existsSync(minCodePath)) ?
	        fs.readFileSync(minCodePath).toString() :
	        (preboot_browser_1.prebootClient.toString() + '\nvar preboot = prebootClient();');
	    var deprecatedCode = inlineCode + '\n' + browserCode;
	    return Promise.resolve(deprecatedCode);
	}
	exports.getBrowserCode = getBrowserCode;
	/**
	 * Main entry point for the server side version of preboot. The main purpose
	 * is to generate inline code that can be inserted into the server view.
	 *
	 * @param customOptions PrebootOptions that override the defaults
	 * @returns {string} Generated inline preboot code is returned
	 */
	function getInlineCode(customOptions) {
	    var opts = assign({}, exports.defaultOptions, customOptions);
	    // safety check to make sure options passed in are valid
	    validateOptions(opts);
	    // as long as we inline code caching isn't disabled and exists in cache, use the cache
	    var optsKey = JSON.stringify(opts);
	    if (!opts.noInlineCache && inlineCodeCache[optsKey]) {
	        return inlineCodeCache[optsKey];
	    }
	    // two different possibilities depending on how client is calling preboot_node
	    var minCodePath = path.normalize(__dirname + '/../../../__dist/preboot_inline.min.js');
	    var inlineCode = (opts.uglify && fs.existsSync(minCodePath)) ?
	        fs.readFileSync(minCodePath).toString() :
	        preboot_inline_1.prebootstrap.toString();
	    // generate the inline JavaScript from prebootstrap
	    inlineCode += '\n ' + 'prebootstrap().init(' + stringifyWithFunctions(opts) + ');';
	    // cache results as long as caching not disabled
	    if (!opts.noInlineCache) {
	        inlineCodeCache[optsKey] = inlineCode;
	    }
	    return inlineCode;
	}
	exports.getInlineCode = getInlineCode;
	/**
	 * Throw an error if issues with any options
	 * @param opts
	 */
	function validateOptions(opts) {
	    if ((!opts.appRoot || !opts.appRoot.length) &&
	        (!opts.serverClientRoot || !opts.serverClientRoot.length)) {
	        throw new Error('The appRoot is missing from preboot options. ' +
	            'This is needed to find the root of your application. ' +
	            'Set this value in the preboot options to be a selector for the root element of your app.');
	    }
	}
	/**
	 * For some reason, Object.assign() is not fully supporting in TypeScript, so
	 * this is just a simple implementation of it
	 *
	 * @param target The target object
	 * @param optionSets Any number of addition objects that are added on top of the target
	 * @returns {Object} A new object that contains all the merged values
	 */
	function assign(target) {
	    var optionSets = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        optionSets[_i - 1] = arguments[_i];
	    }
	    if (target === undefined || target === null) {
	        throw new TypeError('Cannot convert undefined or null to object');
	    }
	    var output = Object(target);
	    for (var index = 0; index < optionSets.length; index++) {
	        var source = optionSets[index];
	        if (source !== undefined && source !== null) {
	            for (var nextKey in source) {
	                if (source.hasOwnProperty(nextKey)) {
	                    output[nextKey] = source[nextKey];
	                }
	            }
	        }
	    }
	    return output;
	}
	exports.assign = assign;
	/**
	 * Stringify an object and include functions. This is needed since we are letting
	 * users pass in options that include custom functions for things like the
	 * freeze handler or action when an event occurs
	 *
	 * @param obj This is the object you want to stringify that includes some functions
	 * @returns {string} The stringified version of an object
	 */
	function stringifyWithFunctions(obj) {
	    var FUNC_START = 'START_FUNCTION_HERE';
	    var FUNC_STOP = 'STOP_FUNCTION_HERE';
	    // first stringify except mark off functions with markers
	    var str = JSON.stringify(obj, function (key, value) {
	        // if the value is a function, we want to wrap it with markers
	        if (!!(value && value.constructor && value.call && value.apply)) {
	            return FUNC_START + value.toString() + FUNC_STOP;
	        }
	        else {
	            return value;
	        }
	    });
	    // now we use the markers to replace function strings with actual functions
	    var startFuncIdx = str.indexOf(FUNC_START);
	    var stopFuncIdx, fn;
	    while (startFuncIdx >= 0) {
	        stopFuncIdx = str.indexOf(FUNC_STOP);
	        // pull string out
	        fn = str.substring(startFuncIdx + FUNC_START.length, stopFuncIdx);
	        fn = fn.replace(/\\n/g, '\n');
	        str = str.substring(0, startFuncIdx - 1) + fn + str.substring(stopFuncIdx + FUNC_STOP.length + 1);
	        startFuncIdx = str.indexOf(FUNC_START);
	    }
	    return str;
	}
	exports.stringifyWithFunctions = stringifyWithFunctions;
	
	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 340 */
/***/ function(module, exports) {

	/**
	 * This is the entire inline JavaScript used for preboot. The way it works is that
	 * the server side library for preboot calls toString() on the prebootstrap() function
	 * and then injects the resulting JavaScript directly into the server view.
	 *
	 * As a result, all the code must be within the one prebootstrap() function and it
	 * can't use any external dependencies other than interfaces.
	 *
	 * The final result of this code is to have a global object called prebootData which
	 * hangs off the window and can be accessed by the preboot client code to replay
	 * events, switch buffers and facilitate the switch from server view to client view.
	 */
	"use strict";
	/**
	 * The purpose of this wrapper function is simply to have an easy way for the preboot node
	 * library to generate the inline code without any downstream deps (like webpack). Basically,
	 * the node library get this JavaScript by calling prebootstrap.toString() then it adds
	 *
	 * prebootstrap().init(opts);
	 */
	function prebootstrap() {
	    var CARET_EVENTS = ['keyup', 'keydown', 'focusin', 'mouseup', 'mousedown'];
	    var CARET_NODES = ['INPUT', 'TEXTAREA'];
	    var prebootStarted = false;
	    /**
	     * Called right away to initialize preboot
	     *
	     * @param opts All the preboot options
	     */
	    function init(opts) {
	        // we allow for window to be passed in so we can unit test on the server side
	        var theWindow = (opts.window || window);
	        // add the preboot options to the preboot data and then add the data to
	        // the window so it can be used later by the client
	        var data = theWindow.prebootData = {
	            opts: opts,
	            listening: true,
	            apps: [],
	            listeners: []
	        };
	        // start up preboot listening as soon as the DOM is ready
	        waitUntilReady(data);
	    }
	    /**
	     * We want to attach event handlers as soon as possible. Unfortunately this means before
	     * DOMContentLoaded fires, so we need to look for document.body to exist instead.
	     * @param data
	     */
	    function waitUntilReady(data) {
	        var theWindow = (data.opts.window || window);
	        var document = (theWindow.document || {});
	        if (document.body) {
	            start(document, data);
	        }
	        else {
	            setTimeout(function () {
	                waitUntilReady(data);
	            }, 10);
	        }
	        // in most cases we wait until DOMContentLoaded, but if the document is ready, start NOW!
	        // if (document.readyState === 'interactive') {
	        //   start(document, data);
	        // } else {
	        //   document.addEventListener('DOMContentLoaded', () => start(document, data));
	        // }
	    }
	    /**
	     * Start up preboot by going through each app and assigning the appropriate handlers.
	     * Normally this wouldn't be called directly, but we have set it up so that it can
	     * for older versions of Universal.
	     *
	     * @param document Global document object passed in for testing purposes
	     * @param prebootData Global preboot data object that contains options and will have events
	     */
	    function start(document, prebootData) {
	        // only start once
	        if (prebootStarted) {
	            return;
	        }
	        else {
	            prebootStarted = true;
	        }
	        // hack to tslint; otherwise typescript complains about window.prebootData
	        /* tslint:disable: no-string-literal */
	        prebootData = (prebootData || window['prebootData']);
	        document = (document || window.document);
	        var opts = prebootData.opts || {};
	        var eventSelectors = opts.eventSelectors || [];
	        // create an overlay that can be used later if a freeze event occurs
	        prebootData.overlay = createOverlay(document);
	        // get an array of all the root info
	        var appRoots = getAppRoots(document, prebootData.opts);
	        // for each app root
	        appRoots.forEach(function (root) {
	            // we track all events for each app in the prebootData object which is on the global scope
	            var appData = { root: root, events: [] };
	            prebootData.apps.push(appData);
	            // loop through all the eventSelectors and create event handlers
	            eventSelectors.forEach(function (eventSelector) { return handleEvents(prebootData, appData, eventSelector); });
	        });
	    }
	    /**
	     * Create an overlay div and add it to the DOM so it can be used
	     * if a freeze event occurs
	     *
	     * @param document The global document object (passed in for testing purposes)
	     * @returns Element The overlay node is returned
	     */
	    function createOverlay(document) {
	        var overlay = document.createElement('div');
	        overlay.setAttribute('id', 'prebootOverlay');
	        overlay.setAttribute('style', 'display:none;position:absolute;left:0;' +
	            'top:0;width:100%;height:100%;z-index:999999;background:black;opacity:.3');
	        document.body.appendChild(overlay);
	        return overlay;
	    }
	    /**
	     * Get references to all app root nodes based on input options. Users can initialize preboot
	     * either by specifying appRoot which is just one or more selectors for apps, or if you want
	     * to get more complex they can pass in the serverClientRoot option which contains selectors
	     * for both the client and the server. This section option is useful for people that are
	     * doing their own buffering (i.e. they have their own client and server view)
	     *
	     * @param document The global document object passed in for testing purposes
	     * @param opts Options passed in by the user to init()
	     * @returns ServerClientRoot[] An array of root info for each app
	     */
	    function getAppRoots(document, opts) {
	        var roots = (opts.serverClientRoot || []);
	        // loop through any appRoot selectors to add them to the list of roots
	        if (opts.appRoot && opts.appRoot.length) {
	            var appRootSelectors = [].concat(opts.appRoot);
	            appRootSelectors.forEach(function (selector) { return roots.push({ serverSelector: selector }); });
	        }
	        // now loop through the roots to get the nodes for each root
	        roots.forEach(function (root) {
	            root.serverNode = document.querySelector(root.serverSelector);
	            root.clientSelector = root.clientSelector || root.serverSelector;
	            if (root.clientSelector !== root.serverSelector) {
	                // if diff selectors, then just get the client node
	                root.clientNode = document.querySelector(root.clientSelector);
	            }
	            else if (opts.buffer) {
	                // if we are doing buffering, we need to create the buffer for the client
	                root.clientNode = createBuffer(root);
	            }
	            else {
	                // else the client root is the same as the server
	                root.clientNode = root.serverNode;
	            }
	            // if no server node found, log error
	            if (!root.serverNode) {
	                console.log('No server node found for selector: ' + root.serverSelector);
	            }
	        });
	        return roots;
	    }
	    /**
	     * Under given server root, for given selector, record events
	     *
	     * @param prebootData
	     * @param appData
	     * @param eventSelector
	     */
	    function handleEvents(prebootData, appData, eventSelector) {
	        var serverRoot = appData.root.serverNode;
	        // don't do anything if no server root
	        if (!serverRoot) {
	            return;
	        }
	        // get all nodes under the server root that match the given selector
	        var nodes = serverRoot.querySelectorAll(eventSelector.selector);
	        // don't do anything if no nodes found
	        if (!nodes) {
	            return;
	        }
	        // we want to add an event listener for each node and each event
	        var _loop_1 = function(node) {
	            eventSelector.events.forEach(function (eventName) {
	                // get the appropriate handler and add it as an event listener
	                var handler = createListenHandler(prebootData, eventSelector, appData, node);
	                node.addEventListener(eventName, handler);
	                // need to keep track of listeners so we can do node.removeEventListener() when preboot done
	                prebootData.listeners.push({
	                    node: node,
	                    eventName: eventName,
	                    handler: handler
	                });
	            });
	        };
	        for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
	            var node = nodes_1[_i];
	            _loop_1(node);
	        }
	    }
	    /**
	     * Create handler for events that we will record
	     */
	    function createListenHandler(prebootData, eventSelector, appData, node) {
	        return function (event) {
	            var root = appData.root;
	            var eventName = event.type;
	            // if no node or no event name or not listening, just return
	            if (!node || !eventName) {
	                return;
	            }
	            // if key codes set for eventSelector, then don't do anything if event doesn't include key
	            var keyCodes = eventSelector.keyCodes;
	            if (keyCodes && keyCodes.length) {
	                var matchingKeyCodes = keyCodes.filter(function (keyCode) { return event.which === keyCode; });
	                // if there are not matches (i.e. key entered NOT one of the key codes) then don't do anything
	                if (!matchingKeyCodes.length) {
	                    return;
	                }
	            }
	            // if for a given set of events we are preventing default, do that
	            if (eventSelector.preventDefault) {
	                event.preventDefault();
	            }
	            // if an action handler passed in, use that
	            if (eventSelector.action) {
	                eventSelector.action(node, event);
	            }
	            // get the node key for a given node
	            var nodeKey = getNodeKey({ root: root, node: node });
	            // if event on input or text area, record active node
	            if (CARET_EVENTS.indexOf(eventName) >= 0 && CARET_NODES.indexOf(node.tagName) >= 0) {
	                prebootData.activeNode = {
	                    root: root,
	                    node: node,
	                    nodeKey: nodeKey,
	                    selection: getSelection(node)
	                };
	            }
	            else if (eventName !== 'change' && eventName !== 'focusout') {
	                ;
	                prebootData.activeNode = null;
	            }
	            // if we are freezing the UI
	            if (eventSelector.freeze) {
	                var overlay_1 = prebootData.overlay;
	                // show the overlay
	                overlay_1.style.display = 'block';
	                // hide the overlay after 10 seconds just in case preboot.complete() never called
	                setTimeout(function () {
	                    overlay_1.style.display = 'none';
	                }, 10000);
	            }
	            // we will record events for later replay unless explicitly marked as doNotReplay
	            if (!eventSelector.noReplay) {
	                appData.events.push({
	                    node: node,
	                    nodeKey: nodeKey,
	                    event: event,
	                    name: eventName
	                });
	            }
	        };
	    }
	    /**
	     * Attempt to generate key from node position in the DOM
	     *
	     * NOTE: this function is duplicated in preboot_browser.ts and must be
	     * kept in sync. It is duplicated for right now since we are trying
	     * to keep all inline code separated and distinct (i.e. without imports)
	     */
	    function getNodeKey(nodeContext) {
	        var ancestors = [];
	        var root = nodeContext.root;
	        var node = nodeContext.node;
	        var temp = node;
	        // walk up the tree from the target node up to the root
	        while (temp && temp !== root.serverNode && temp !== root.clientNode) {
	            ancestors.push(temp);
	            temp = temp.parentNode;
	        }
	        // note: if temp doesn't exist here it means root node wasn't found
	        if (temp) {
	            ancestors.push(temp);
	        }
	        // now go backwards starting from the root, appending the appName to unique identify the node later..
	        var name = node.nodeName || 'unknown';
	        var key = name + '_' + root.serverSelector;
	        var len = ancestors.length;
	        for (var i = (len - 1); i >= 0; i--) {
	            temp = ancestors[i];
	            if (temp.childNodes && i > 0) {
	                for (var j = 0; j < temp.childNodes.length; j++) {
	                    if (temp.childNodes[j] === ancestors[i - 1]) {
	                        key += '_s' + (j + 1);
	                        break;
	                    }
	                }
	            }
	        }
	        return key;
	    }
	    /**
	     * Get the selection data that is later used to set the cursor after client view is active
	     */
	    function getSelection(node) {
	        node = node || {};
	        var nodeValue = node.value || '';
	        var selection = {
	            start: nodeValue.length,
	            end: nodeValue.length,
	            direction: 'forward'
	        };
	        // if browser support selectionStart on node (Chrome, FireFox, IE9+)
	        try {
	            if (node.selectionStart || node.selectionStart === 0) {
	                selection.start = node.selectionStart;
	                selection.end = node.selectionEnd;
	                selection.direction = node.selectionDirection;
	            }
	        }
	        catch (ex) { }
	        return selection;
	    }
	    /**
	     * Create buffer for a given node
	     *
	     * @param root All the data related to a particular app
	     * @returns {Element} Returns the root client node.
	     */
	    function createBuffer(root) {
	        var serverNode = root.serverNode;
	        // if no rootServerNode OR the selector is on the entire html doc or the body OR no parentNode, don't buffer
	        if (!serverNode || !serverNode.parentNode ||
	            root.serverSelector === 'html' || root.serverSelector === 'body') {
	            return serverNode;
	        }
	        // create shallow clone of server root
	        var rootClientNode = serverNode.cloneNode(false);
	        if (rootClientNode) {
	            // we want the client to write to a hidden div until the time for switching the buffers
	            rootClientNode.style.display = 'none';
	            // insert the client node before the server and return it
	            serverNode.parentNode.insertBefore(rootClientNode, serverNode);
	        }
	        // return the rootClientNode
	        return rootClientNode;
	    }
	    // return object with all the functions for testing purposes
	    return {
	        init: init,
	        start: start,
	        createOverlay: createOverlay,
	        getAppRoots: getAppRoots,
	        handleEvents: handleEvents,
	        createListenHandler: createListenHandler,
	        getNodeKey: getNodeKey,
	        getSelection: getSelection,
	        createBuffer: createBuffer
	    };
	}
	exports.prebootstrap = prebootstrap;


/***/ },
/* 341 */
/***/ function(module, exports) {

	/**
	 * This is the entry point for the client side preboot library. At a high level, this library
	 * is used to facilitate the switch from the server view to the client view. Specifically that
	 * means:
	 *
	 *    1. Replay stored server view events on client view
	 *    2. Switch buffer from server view to client view
	 *    3. Reset focus on client view
	 */
	"use strict";
	// the idea here is that preboot is a global value on the window that is used by the client
	var preboot = prebootClient();
	// wrapper function used to contain all the preboot client functionality
	function prebootClient() {
	    // used to cache map from server node key to associated client node
	    var clientNodeCache = {};
	    /**
	     * External code call this to kick off the switch from server to client
	     */
	    function complete(opts) {
	        opts = opts || {};
	        var theWindow = (opts.window || window);
	        var prebootData = theWindow.prebootData || {};
	        var apps = prebootData.apps || [];
	        // loop through each of the preboot apps
	        apps.forEach(function (appData) { return completeApp(opts, appData); });
	        // once all events have been replayed and buffers switched, then we cleanup preboot
	        if (!opts.noCleanup) {
	            cleanup(theWindow, prebootData);
	        }
	    }
	    /**
	     * Complete a particular app
	     * @param opts
	     * @param appData
	     */
	    function completeApp(opts, appData) {
	        opts = opts || {};
	        appData = (appData || {});
	        var theWindow = (opts.window || window);
	        var root = (appData.root || {});
	        var events = appData.events || [];
	        // if a specific app root set and it doesn't equal the server selector, then don't do anything
	        if (opts.appRoot && opts.appRoot !== root.serverSelector) {
	            return;
	        }
	        // some client side frameworks (like Angular 1 w UI Router) will replace
	        // elements, so we need to re-get client root just to be safe
	        root.clientNode = theWindow.document.querySelector(root.clientSelector);
	        // replay all the events from the server view onto the client view
	        events.forEach(function (event) { return replayEvent(appData, event); });
	        // if we are buffering, switch the buffers
	        switchBuffer(theWindow, appData);
	    }
	    /**
	     * Replay a particular event. The trick here is finding the appropriate client
	     * node where the event is to be dispatched that matches up with the server node
	     * where the event came from originally.
	     */
	    function replayEvent(appData, prebootEvent) {
	        appData = (appData || {});
	        prebootEvent = (prebootEvent || {});
	        var event = prebootEvent.event;
	        var serverNode = prebootEvent.node || {};
	        var nodeKey = prebootEvent.nodeKey;
	        var clientNode = findClientNode({
	            root: appData.root,
	            node: serverNode,
	            nodeKey: nodeKey
	        });
	        // if client node can't be found, log a warning
	        if (!clientNode) {
	            console.warn('Trying to dispatch event ' + event.type +
	                ' to node ' + nodeKey + ' but could not find client node. ' +
	                'Server node is: ');
	            console.log(serverNode);
	            return;
	        }
	        // now dispatch events and whatnot to the client node
	        clientNode.checked = serverNode.checked ? true : undefined;
	        clientNode.selected = serverNode.selected ? true : undefined;
	        clientNode.value = serverNode.value;
	        clientNode.dispatchEvent(event);
	    }
	    /**
	     * Hide the server buffer and show the client buffer
	     */
	    function switchBuffer(window, appData) {
	        appData = (appData || {});
	        var root = (appData.root || {});
	        var serverView = root.serverNode;
	        var clientView = root.clientNode;
	        // if no client view or the server view is the body or client
	        // and server view are the same, then don't do anything and return
	        if (!clientView || !serverView || serverView === clientView || serverView.nodeName === 'BODY') {
	            return;
	        }
	        // do a try-catch for case where serverView is an object but NOT of type Element
	        try {
	            // get the server view display mode
	            var display = window
	                .getComputedStyle(serverView)
	                .getPropertyValue('display') || 'block';
	            // first remove the server view
	            serverView.remove ?
	                serverView.remove() :
	                serverView.style.display = 'none';
	            // now add the client view
	            clientView.style.display = display;
	        }
	        catch (ex) {
	            console.error(ex);
	        }
	    }
	    /**
	     * This function does three things to cleanup preboot:
	     *    1. Set focus (and selection if a text box/text area) within a form element
	     *    2. Remove existing event listeners
	     *    3. Delete data from memory
	     */
	    function cleanup(window, prebootData) {
	        prebootData = prebootData || {};
	        var listeners = prebootData.listeners || [];
	        // set focus on the active node AFTER a small delay to ensure buffer switched
	        setTimeout(function () {
	            setFocus(prebootData.activeNode);
	        }, 1);
	        // remove all event listeners
	        for (var _i = 0, listeners_1 = listeners; _i < listeners_1.length; _i++) {
	            var listener = listeners_1[_i];
	            listener.node.removeEventListener(listener.eventName, listener.handler);
	        }
	        // remove the freeze overlay if it exists
	        removeOverlay(window);
	        // finally clear out the data stored for each app
	        prebootData.apps = [];
	        clientNodeCache = {};
	    }
	    /**
	     * Remove the overlay if it exists
	     */
	    function removeOverlay(window) {
	        var prebootOverlay = window.document.body.querySelector('#prebootOverlay');
	        if (prebootOverlay) {
	            prebootOverlay.style.display = 'none';
	        }
	    }
	    /**
	     * Set focus on a given active node element
	     */
	    function setFocus(activeNode) {
	        // only do something if there is an active node
	        if (!activeNode || !activeNode.node || !activeNode.nodeKey) {
	            return;
	        }
	        // find the client node in the new client view
	        var clientNode = findClientNode(activeNode);
	        if (clientNode) {
	            // set focus on the client node
	            clientNode.focus();
	            // set selection if a modern browser (i.e. IE9+, etc.)
	            var selection = activeNode.selection;
	            if (clientNode.setSelectionRange && selection) {
	                clientNode.setSelectionRange(selection.start, selection.end, selection.direction);
	            }
	        }
	    }
	    /**
	     * Given a node from the server rendered view, find the equivalent
	     * node in the client rendered view. We do this by the following approach:
	     *      1. take the name of the server node tag (ex. div or h1 or input)
	     *      2. add either id (ex. div#myid) or class names (ex. div.class1.class2)
	     *      3. use that value as a selector to get all the matching client nodes
	     *      4. loop through all client nodes found and for each generate a key value
	     *      5. compare the client key to the server key; once there is a match, we have our client node
	     *
	     * NOTE: this only works when the client view is almost exactly the same as the server
	     * view. we will need an improvement here in the future to account for situations
	     * where the client view is different in structure from the server view
	     */
	    function findClientNode(serverNodeContext) {
	        serverNodeContext = (serverNodeContext || {});
	        var serverNode = serverNodeContext.node;
	        var root = serverNodeContext.root;
	        // if no server or client root, don't do anything
	        if (!root || !root.serverNode || !root.clientNode) {
	            return null;
	        }
	        // we use the string of the node to compare to the client node & as key in cache
	        var serverNodeKey = serverNodeContext.nodeKey || getNodeKey(serverNodeContext);
	        // if client node already in cache, return it
	        if (clientNodeCache[serverNodeKey]) {
	            return clientNodeCache[serverNodeKey];
	        }
	        // get the selector for client nodes
	        var className = (serverNode.className || '').replace('ng-binding', '').trim();
	        var selector = serverNode.tagName;
	        if (serverNode.id) {
	            selector += '#' + serverNode.id;
	        }
	        else if (className) {
	            selector += '.' + className.replace(/ /g, '.');
	        }
	        // select all possible client nodes and look through them to try and find a match
	        var rootClientNode = root.clientNode;
	        var clientNodes = rootClientNode.querySelectorAll(selector) || [];
	        // if nothing found, then just try the tag name as a final option
	        if (!clientNodes.length) {
	            clientNodes = rootClientNode.querySelectorAll(serverNode.tagName) || [];
	        }
	        for (var _i = 0, clientNodes_1 = clientNodes; _i < clientNodes_1.length; _i++) {
	            var clientNode = clientNodes_1[_i];
	            // get the key for the client node
	            var clientNodeKey = getNodeKey({ root: root, node: clientNode });
	            // if the client node key is exact match for the server node key, then we found the client node
	            if (clientNodeKey === serverNodeKey) {
	                clientNodeCache[serverNodeKey] = clientNode;
	                return clientNode;
	            }
	        }
	        // if we get here and there is one clientNode, use it as a fallback
	        if (clientNodes.length === 1) {
	            clientNodeCache[serverNodeKey] = clientNodes[0];
	            return clientNodes[0];
	        }
	        // if we get here it means we couldn't find the client node so give the user a warning
	        console.warn('No matching client node found for ' + serverNodeKey +
	            '. You can fix this by assigning this element a unique id attribute.');
	        return null;
	    }
	    /**
	     * Attempt to generate key from node position in the DOM
	     *
	     * NOTE: this function is duplicated in preboot_inline.ts and must be
	     * kept in sync. It is duplicated for right now since we are trying
	     * to keep all inline code separated and distinct (i.e. without imports)
	     */
	    function getNodeKey(nodeContext) {
	        var ancestors = [];
	        var root = nodeContext.root;
	        var node = nodeContext.node;
	        var temp = node;
	        // walk up the tree from the target node up to the root
	        while (temp && temp !== root.serverNode && temp !== root.clientNode) {
	            ancestors.push(temp);
	            temp = temp.parentNode;
	        }
	        // note: if temp doesn't exist here it means root node wasn't found
	        if (temp) {
	            ancestors.push(temp);
	        }
	        // now go backwards starting from the root, appending the appName to unique identify the node later..
	        var name = node.nodeName || 'unknown';
	        var key = name + '_' + root.serverSelector;
	        var len = ancestors.length;
	        for (var i = (len - 1); i >= 0; i--) {
	            temp = ancestors[i];
	            if (temp.childNodes && i > 0) {
	                for (var j = 0; j < temp.childNodes.length; j++) {
	                    if (temp.childNodes[j] === ancestors[i - 1]) {
	                        key += '_s' + (j + 1);
	                        break;
	                    }
	                }
	            }
	        }
	        return key;
	    }
	    return {
	        complete: complete,
	        completeApp: completeApp,
	        replayEvent: replayEvent,
	        switchBuffer: switchBuffer,
	        removeOverlay: removeOverlay,
	        cleanup: cleanup,
	        setFocus: setFocus,
	        findClientNode: findClientNode,
	        getNodeKey: getNodeKey
	    };
	}
	exports.prebootClient = prebootClient;


/***/ },
/* 342 */
/***/ function(module, exports) {

	module.exports = require("path");

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __private_imports__1 = __webpack_require__(288);
	var parse5 = __webpack_require__(299);
	var helper_1 = __webpack_require__(297);
	var treeAdapter = null;
	var _attrToPropMap = {
	    'class': 'className',
	    'innerHtml': 'innerHTML',
	    'readonly': 'readOnly',
	    'tabindex': 'tabIndex',
	};
	var mapProps = ['attribs', 'x-attribsNamespace', 'x-attribsPrefix'];
	function _notImplemented(methodName) {
	    return new Error('This method is not implemented in Parse5DomAdapter: ' + methodName);
	}
	var Parse5DomAdapter = (function (_super) {
	    __extends(Parse5DomAdapter, _super);
	    function Parse5DomAdapter() {
	        _super.apply(this, arguments);
	    }
	    Parse5DomAdapter.makeCurrent = function () {
	        treeAdapter = parse5.treeAdapters.htmlparser2;
	        __private_imports__1.setRootDomAdapter(new Parse5DomAdapter());
	    };
	    Parse5DomAdapter.prototype.parse = function (_templateHtml) { throw _notImplemented('parse'); };
	    Parse5DomAdapter.prototype.hasProperty = function (_element, name) {
	        return _HTMLElementPropertyList.indexOf(name) > -1;
	    };
	    Parse5DomAdapter.prototype.setProperty = function (el, name, value) {
	        if (name === 'innerHTML') {
	            this.setInnerHTML(el, value);
	        }
	        else if (name === 'className') {
	            el.attribs['class'] = el.className = value;
	        }
	        else {
	            el[name] = value;
	        }
	    };
	    Parse5DomAdapter.prototype.getProperty = function (el, name) { return el[name]; };
	    Parse5DomAdapter.prototype.invoke = function (_el, _methodName, _args) {
	        switch (_methodName) {
	            case 'createElement': return this.createElement(_args[0]);
	            case 'query': return this.query(_args[0]);
	            case 'querySelector': return this.querySelector(_el, _args[0]);
	            case 'querySelectorAll': return this.querySelectorAll(_el, _args[0]);
	            default:
	                throw _notImplemented('invoke');
	        }
	    };
	    Parse5DomAdapter.prototype.logError = function (error) { console.error(error); };
	    Parse5DomAdapter.prototype.log = function (error) { console.log(error); };
	    Parse5DomAdapter.prototype.logGroup = function (error) { console.error(error); };
	    Parse5DomAdapter.prototype.logGroupEnd = function () { };
	    Object.defineProperty(Parse5DomAdapter.prototype, "attrToPropMap", {
	        get: function () { return _attrToPropMap; },
	        enumerable: true,
	        configurable: true
	    });
	    Parse5DomAdapter.prototype.query = function (_selector) {
	        var document = Zone.current.get('document');
	        if (document) {
	            return this.querySelector(document, _selector);
	        }
	        throw _notImplemented('query');
	    };
	    Parse5DomAdapter.prototype.querySelector = function (el, selector) { return this.querySelectorAll(el, selector)[0]; };
	    Parse5DomAdapter.prototype.querySelectorAll = function (el, selector) {
	        var _this = this;
	        var res = [];
	        var _recursive = function (result, node, selector, matcher) {
	            var cNodes = node.childNodes;
	            if (cNodes && cNodes.length > 0) {
	                for (var i = 0; i < cNodes.length; i++) {
	                    var childNode = cNodes[i];
	                    if (_this.elementMatches(childNode, selector, matcher)) {
	                        result.push(childNode);
	                    }
	                    _recursive(result, childNode, selector, matcher);
	                }
	            }
	        };
	        var matcher = new __private_imports__1.SelectorMatcher();
	        matcher.addSelectables(__private_imports__1.CssSelector.parse(selector));
	        _recursive(res, el, selector, matcher);
	        return res;
	    };
	    Parse5DomAdapter.prototype.elementMatches = function (node, selector, matcher) {
	        if (matcher === void 0) { matcher = null; }
	        if (this.isElementNode(node) && selector === '*') {
	            return true;
	        }
	        var result = false;
	        if (selector && selector.charAt(0) == '#') {
	            result = this.getAttribute(node, 'id') == selector.substring(1);
	        }
	        else if (selector) {
	            if (!matcher) {
	                matcher = new __private_imports__1.SelectorMatcher();
	                matcher.addSelectables(__private_imports__1.CssSelector.parse(selector));
	            }
	            var cssSelector = new __private_imports__1.CssSelector();
	            cssSelector.setElement(this.tagName(node));
	            if (node.attribs) {
	                for (var attrName in node.attribs) {
	                    if (node.attribs.hasOwnProperty(attrName)) {
	                        cssSelector.addAttribute(attrName, node.attribs[attrName]);
	                    }
	                }
	            }
	            var classList = this.classList(node);
	            for (var i = 0; i < classList.length; i++) {
	                cssSelector.addClassName(classList[i]);
	            }
	            matcher.match(cssSelector, function (_selector, _cb) { result = true; });
	        }
	        return result;
	    };
	    Parse5DomAdapter.prototype.on = function (el, evt, listener) {
	        var listenersMap = el._eventListenersMap;
	        if (!listenersMap) {
	            listenersMap = {};
	            el._eventListenersMap = listenersMap;
	        }
	        var listeners = listenersMap[evt] || [];
	        listenersMap[evt] = listeners.concat([listener]);
	    };
	    Parse5DomAdapter.prototype.onAndCancel = function (el, evt, listener) {
	        this.on(el, evt, listener);
	        return function () { helper_1.ListWrapper.remove((el._eventListenersMap[evt]), listener); };
	    };
	    Parse5DomAdapter.prototype.dispatchEvent = function (el, evt) {
	        if (!evt.target) {
	            evt.target = el;
	        }
	        if (el._eventListenersMap) {
	            var listeners = el._eventListenersMap[evt.type];
	            if (listeners) {
	                for (var i = 0; i < listeners.length; i++) {
	                    listeners[i](evt);
	                }
	            }
	        }
	        if (el.parent) {
	            this.dispatchEvent(el.parent, evt);
	        }
	        if (el._window) {
	            this.dispatchEvent(el._window, evt);
	        }
	    };
	    Parse5DomAdapter.prototype.createMouseEvent = function (eventType) { return this.createEvent(eventType); };
	    Parse5DomAdapter.prototype.createEvent = function (eventType) {
	        var event = {
	            type: eventType,
	            defaultPrevented: false,
	            preventDefault: function () { event.defaultPrevented = true; }
	        };
	        return event;
	    };
	    Parse5DomAdapter.prototype.preventDefault = function (event) { event.returnValue = false; };
	    Parse5DomAdapter.prototype.isPrevented = function (event) { return helper_1.isPresent(event.returnValue) && !event.returnValue; };
	    Parse5DomAdapter.prototype.getInnerHTML = function (el) {
	        return parse5.serialize(this.templateAwareRoot(el), { treeAdapter: treeAdapter });
	    };
	    Parse5DomAdapter.prototype.getTemplateContent = function (_el) { return null; };
	    Parse5DomAdapter.prototype.getOuterHTML = function (el) {
	        var fragment = treeAdapter.createDocumentFragment();
	        this.appendChild(fragment, el);
	        return parse5.serialize(fragment, { treeAdapter: treeAdapter });
	    };
	    Parse5DomAdapter.prototype.nodeName = function (node) { return node.tagName; };
	    Parse5DomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
	    Parse5DomAdapter.prototype.type = function (_node) { throw _notImplemented('type'); };
	    Parse5DomAdapter.prototype.content = function (node) { return node.childNodes[0]; };
	    Parse5DomAdapter.prototype.firstChild = function (el) { return el.firstChild; };
	    Parse5DomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };
	    Parse5DomAdapter.prototype.parentElement = function (el) { return el.parent; };
	    Parse5DomAdapter.prototype.childNodes = function (el) { return el.childNodes; };
	    Parse5DomAdapter.prototype.childNodesAsList = function (el) {
	        var childNodes = el.childNodes;
	        var res = new Array(childNodes.length);
	        for (var i = 0; i < childNodes.length; i++) {
	            res[i] = childNodes[i];
	        }
	        return res;
	    };
	    Parse5DomAdapter.prototype.clearNodes = function (el) {
	        while (el.childNodes.length > 0) {
	            this.remove(el.childNodes[0]);
	        }
	    };
	    Parse5DomAdapter.prototype.appendChild = function (el, node) {
	        this.remove(node);
	        treeAdapter.appendChild(this.templateAwareRoot(el), node);
	    };
	    Parse5DomAdapter.prototype.removeChild = function (el, node) {
	        if (el.childNodes.indexOf(node) > -1) {
	            this.remove(node);
	        }
	    };
	    Parse5DomAdapter.prototype.replaceChild = function (_el, _newNode, _oldNode) { throw _notImplemented('replaceChild'); };
	    Parse5DomAdapter.prototype.remove = function (el) {
	        var parent = el.parent;
	        if (parent) {
	            var index = parent.childNodes.indexOf(el);
	            parent.childNodes.splice(index, 1);
	        }
	        var prev = el.previousSibling;
	        var next = el.nextSibling;
	        if (prev) {
	            prev.next = next;
	        }
	        if (next) {
	            next.prev = prev;
	        }
	        el.prev = null;
	        el.next = null;
	        el.parent = null;
	        return el;
	    };
	    Parse5DomAdapter.prototype.insertBefore = function (el, node) {
	        this.remove(node);
	        treeAdapter.insertBefore(el.parent, node, el);
	    };
	    Parse5DomAdapter.prototype.insertAllBefore = function (el, nodes) {
	        var _this = this;
	        nodes.forEach(function (n) { return _this.insertBefore(el, n); });
	    };
	    Parse5DomAdapter.prototype.insertAfter = function (el, node) {
	        if (el.nextSibling) {
	            this.insertBefore(el.nextSibling, node);
	        }
	        else {
	            this.appendChild(el.parent, node);
	        }
	    };
	    Parse5DomAdapter.prototype.setInnerHTML = function (el, value) {
	        this.clearNodes(el);
	        var content = parse5.parseFragment(value, { treeAdapter: treeAdapter });
	        for (var i = 0; i < content.childNodes.length; i++) {
	            treeAdapter.appendChild(el, content.childNodes[i]);
	        }
	    };
	    Parse5DomAdapter.prototype.getText = function (el, isRecursive) {
	        if (this.isTextNode(el)) {
	            return el.data;
	        }
	        if (this.isCommentNode(el)) {
	            return isRecursive ? '' : el.data;
	        }
	        if (!el.childNodes || el.childNodes.length == 0) {
	            return '';
	        }
	        var textContent = '';
	        for (var i = 0; i < el.childNodes.length; i++) {
	            textContent += this.getText(el.childNodes[i], true);
	        }
	        return textContent;
	    };
	    Parse5DomAdapter.prototype.setText = function (el, value) {
	        if (this.isTextNode(el) || this.isCommentNode(el)) {
	            el.data = value;
	        }
	        else {
	            this.clearNodes(el);
	            if (value !== '') {
	                treeAdapter.insertText(el, value);
	            }
	        }
	    };
	    Parse5DomAdapter.prototype.getValue = function (el) { return el.value; };
	    Parse5DomAdapter.prototype.setValue = function (el, value) { el.value = value; };
	    Parse5DomAdapter.prototype.getChecked = function (el) { return el.checked; };
	    Parse5DomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };
	    Parse5DomAdapter.prototype.createComment = function (text) { return treeAdapter.createCommentNode(text); };
	    Parse5DomAdapter.prototype.createTemplate = function (html) {
	        var template = treeAdapter.createElement('template', 'http://www.w3.org/1999/xhtml', []);
	        var content = parse5.parseFragment(html, { treeAdapter: treeAdapter });
	        treeAdapter.setTemplateContent(template, content);
	        return template;
	    };
	    Parse5DomAdapter.prototype.createElement = function (tagName) {
	        return treeAdapter.createElement(tagName, 'http://www.w3.org/1999/xhtml', []);
	    };
	    Parse5DomAdapter.prototype.createElementNS = function (ns, tagName) {
	        return treeAdapter.createElement(tagName, ns, []);
	    };
	    Parse5DomAdapter.prototype.createTextNode = function (text) {
	        var t = this.createComment(text);
	        t.type = 'text';
	        return t;
	    };
	    Parse5DomAdapter.prototype.createScriptTag = function (attrName, attrValue) {
	        return treeAdapter.createElement('script', 'http://www.w3.org/1999/xhtml', [{ name: attrName, value: attrValue }]);
	    };
	    Parse5DomAdapter.prototype.createStyleElement = function (css) {
	        var style = this.createElement('style');
	        this.setText(style, css);
	        return style;
	    };
	    Parse5DomAdapter.prototype.createShadowRoot = function (el) {
	        el.shadowRoot = treeAdapter.createDocumentFragment();
	        el.shadowRoot.parent = el;
	        return el.shadowRoot;
	    };
	    Parse5DomAdapter.prototype.getShadowRoot = function (el) { return el.shadowRoot; };
	    Parse5DomAdapter.prototype.getHost = function (el) { return el.host; };
	    Parse5DomAdapter.prototype.getDistributedNodes = function (_el) { throw _notImplemented('getDistributedNodes'); };
	    Parse5DomAdapter.prototype.clone = function (node) {
	        var _recursive = function (node) {
	            var nodeClone = Object.create(Object.getPrototypeOf(node));
	            for (var prop in node) {
	                if (node.hasOwnProperty(prop)) {
	                    var desc = Object.getOwnPropertyDescriptor(node, prop);
	                    if (desc && 'value' in desc && typeof desc.value !== 'object') {
	                        nodeClone[prop] = node[prop];
	                    }
	                }
	            }
	            nodeClone.parent = null;
	            nodeClone.prev = null;
	            nodeClone.next = null;
	            nodeClone.children = null;
	            mapProps.forEach(function (mapName) {
	                if (helper_1.isPresent(node[mapName])) {
	                    nodeClone[mapName] = {};
	                    for (var prop in node[mapName]) {
	                        if (node[mapName].hasOwnProperty(prop)) {
	                            nodeClone[mapName][prop] = node[mapName][prop];
	                        }
	                    }
	                }
	            });
	            var cNodes = node.children;
	            if (cNodes) {
	                var cNodesClone = new Array(cNodes.length);
	                for (var i = 0; i < cNodes.length; i++) {
	                    var childNode = cNodes[i];
	                    var childNodeClone = _recursive(childNode);
	                    cNodesClone[i] = childNodeClone;
	                    if (i > 0) {
	                        childNodeClone.prev = cNodesClone[i - 1];
	                        cNodesClone[i - 1].next = childNodeClone;
	                    }
	                    childNodeClone.parent = nodeClone;
	                }
	                nodeClone.children = cNodesClone;
	            }
	            return nodeClone;
	        };
	        return _recursive(node);
	    };
	    Parse5DomAdapter.prototype.getElementsByClassName = function (element, name) {
	        return this.querySelectorAll(element, '.' + name);
	    };
	    Parse5DomAdapter.prototype.getElementsByTagName = function (_element, _name) {
	        throw _notImplemented('getElementsByTagName');
	    };
	    Parse5DomAdapter.prototype.classList = function (element) {
	        var classAttrValue = null;
	        var attributes = element.attribs;
	        if (attributes && attributes.hasOwnProperty('class')) {
	            classAttrValue = attributes['class'];
	        }
	        return classAttrValue ? classAttrValue.trim().split(/\s+/g) : [];
	    };
	    Parse5DomAdapter.prototype.addClass = function (element, className) {
	        var classList = this.classList(element);
	        var index = classList.indexOf(className);
	        if (index == -1) {
	            classList.push(className);
	            element.attribs['class'] = element.className = classList.join(' ');
	        }
	    };
	    Parse5DomAdapter.prototype.removeClass = function (element, className) {
	        var classList = this.classList(element);
	        var index = classList.indexOf(className);
	        if (index > -1) {
	            classList.splice(index, 1);
	            element.attribs['class'] = element.className = classList.join(' ');
	        }
	    };
	    Parse5DomAdapter.prototype.hasClass = function (element, className) {
	        return helper_1.ListWrapper.contains(this.classList(element), className);
	    };
	    Parse5DomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {
	        if (styleValue === void 0) { styleValue = null; }
	        var value = this.getStyle(element, styleName) || '';
	        return styleValue ? value == styleValue : value.length > 0;
	    };
	    Parse5DomAdapter.prototype._readStyleAttribute = function (element) {
	        var styleMap = {};
	        var attributes = element.attribs;
	        if (attributes && attributes.hasOwnProperty('style')) {
	            var styleAttrValue = attributes['style'];
	            var styleList = styleAttrValue.split(/;+/g);
	            for (var i = 0; i < styleList.length; i++) {
	                if (styleList[i].length > 0) {
	                    var elems = styleList[i].split(/:+/g);
	                    styleMap[elems[0].trim()] = elems[1].trim();
	                }
	            }
	        }
	        return styleMap;
	    };
	    Parse5DomAdapter.prototype._writeStyleAttribute = function (element, styleMap) {
	        var styleAttrValue = '';
	        for (var key in styleMap) {
	            if (styleMap.hasOwnProperty(key)) {
	                var newValue = styleMap[key];
	                if (newValue) {
	                    styleAttrValue += key + ':' + styleMap[key] + ';';
	                }
	            }
	        }
	        element.attribs['style'] = styleAttrValue;
	    };
	    Parse5DomAdapter.prototype.setStyle = function (element, styleName, styleValue) {
	        var styleMap = this._readStyleAttribute(element);
	        styleMap[styleName] = styleValue;
	        this._writeStyleAttribute(element, styleMap);
	    };
	    Parse5DomAdapter.prototype.removeStyle = function (element, styleName) { this.setStyle(element, styleName, null); };
	    Parse5DomAdapter.prototype.getStyle = function (element, styleName) {
	        var styleMap = this._readStyleAttribute(element);
	        return styleMap.hasOwnProperty(styleName) ? styleMap[styleName] : '';
	    };
	    Parse5DomAdapter.prototype.tagName = function (element) { return element.tagName == 'style' ? 'STYLE' : element.tagName; };
	    Parse5DomAdapter.prototype.attributeMap = function (element) {
	        var res = new Map();
	        var elAttrs = treeAdapter.getAttrList(element);
	        for (var i = 0; i < elAttrs.length; i++) {
	            var attrib = elAttrs[i];
	            res.set(attrib.name, attrib.value);
	        }
	        return res;
	    };
	    Parse5DomAdapter.prototype.hasAttribute = function (element, attribute) {
	        return element.attribs && element.attribs.hasOwnProperty(attribute);
	    };
	    Parse5DomAdapter.prototype.hasAttributeNS = function (_element, _ns, _attribute) { throw _notImplemented('hasAttributeNS'); };
	    Parse5DomAdapter.prototype.getAttribute = function (element, attribute) {
	        return element.attribs && element.attribs.hasOwnProperty(attribute) ?
	            element.attribs[attribute] :
	            null;
	    };
	    Parse5DomAdapter.prototype.getAttributeNS = function (_element, _ns, _attribute) { throw _notImplemented('getAttributeNS'); };
	    Parse5DomAdapter.prototype.setAttribute = function (element, attribute, value) {
	        if (attribute) {
	            element.attribs[attribute] = value;
	            if (attribute === 'class') {
	                element.className = value;
	            }
	        }
	    };
	    Parse5DomAdapter.prototype.setAttributeNS = function (_element, _ns, _attribute, _value) {
	        throw _notImplemented('setAttributeNS');
	    };
	    Parse5DomAdapter.prototype.removeAttribute = function (element, attribute) {
	        if (attribute) {
	            delete element.attribs[attribute];
	        }
	    };
	    Parse5DomAdapter.prototype.removeAttributeNS = function (_element, _ns, _name) { throw _notImplemented('removeAttributeNS'); };
	    Parse5DomAdapter.prototype.templateAwareRoot = function (el) {
	        return this.isTemplateElement(el) ? treeAdapter.getTemplateContent(el) : el;
	    };
	    Parse5DomAdapter.prototype.createHtmlDocument = function () {
	        var newDoc = treeAdapter.createDocument();
	        newDoc.title = 'fake title';
	        var head = treeAdapter.createElement('head', null, []);
	        var body = treeAdapter.createElement('body', 'http://www.w3.org/1999/xhtml', []);
	        this.appendChild(newDoc, head);
	        this.appendChild(newDoc, body);
	        newDoc['head'] = head;
	        newDoc['body'] = body;
	        newDoc['_window'] = {};
	        return newDoc;
	    };
	    Parse5DomAdapter.prototype.defaultDoc = function () {
	        var document = Zone.current.get('document');
	        if (document) {
	            return document;
	        }
	        return { documentMode: false };
	    };
	    Parse5DomAdapter.prototype.getBoundingClientRect = function (_el) { return { left: 0, top: 0, width: 0, height: 0 }; };
	    Parse5DomAdapter.prototype.getTitle = function () {
	        var document = Zone.current.get('document');
	        if (document && document.title) {
	            return document.title;
	        }
	        throw _notImplemented('getTitle');
	    };
	    Parse5DomAdapter.prototype.setTitle = function (newTitle) { this.defaultDoc().title = newTitle; };
	    Parse5DomAdapter.prototype.isTemplateElement = function (el) {
	        return this.isElementNode(el) && this.tagName(el) === 'template';
	    };
	    Parse5DomAdapter.prototype.isTextNode = function (node) { return treeAdapter.isTextNode(node); };
	    Parse5DomAdapter.prototype.isCommentNode = function (node) { return treeAdapter.isCommentNode(node); };
	    Parse5DomAdapter.prototype.isElementNode = function (node) { return node ? treeAdapter.isElementNode(node) : false; };
	    Parse5DomAdapter.prototype.hasShadowRoot = function (node) { return helper_1.isPresent(node.shadowRoot); };
	    Parse5DomAdapter.prototype.isShadowRoot = function (node) { return this.getShadowRoot(node) == node; };
	    Parse5DomAdapter.prototype.importIntoDoc = function (node) { return this.clone(node); };
	    Parse5DomAdapter.prototype.adoptNode = function (node) { return node; };
	    Parse5DomAdapter.prototype.getHref = function (el) { return el.href || this.getAttribute(el, 'href'); };
	    Parse5DomAdapter.prototype.getEventKey = function (_event) { throw _notImplemented('getEventKey'); };
	    Parse5DomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
	        if (href == null) {
	            el.href = baseUrl;
	        }
	        else {
	            el.href = baseUrl + '/../' + href;
	        }
	    };
	    Parse5DomAdapter.prototype._buildRules = function (parsedRules, css) {
	        var rules = [];
	        for (var i = 0; i < parsedRules.length; i++) {
	            var parsedRule = parsedRules[i];
	            var rule = {};
	            rule['cssText'] = css;
	            rule['style'] = { content: '', cssText: '' };
	            if (parsedRule.type == 'rule') {
	                rule['type'] = 1;
	                rule['selectorText'] =
	                    parsedRule.selectors.join(', '.replace(/\s{2,}/g, ' ')
	                        .replace(/\s*~\s*/g, ' ~ ')
	                        .replace(/\s*\+\s*/g, ' + ')
	                        .replace(/\s*>\s*/g, ' > ')
	                        .replace(/\[(\w+)=(\w+)\]/g, '[$1="$2"]'));
	                if (helper_1.isBlank(parsedRule.declarations)) {
	                    continue;
	                }
	                for (var j = 0; j < parsedRule.declarations.length; j++) {
	                    var declaration = parsedRule.declarations[j];
	                    rule['style'] = declaration.property[declaration.value];
	                    rule['style'].cssText += declaration.property + ': ' + declaration.value + ';';
	                }
	            }
	            else if (parsedRule.type == 'media') {
	                rule['type'] = 4;
	                rule['media'] = { mediaText: parsedRule.media };
	                if (parsedRule.rules) {
	                    rule['cssRules'] = this._buildRules(parsedRule.rules);
	                }
	            }
	            rules.push(rule);
	        }
	        return rules;
	    };
	    Parse5DomAdapter.prototype.supportsDOMEvents = function () { return false; };
	    Parse5DomAdapter.prototype.supportsNativeShadowDOM = function () { return false; };
	    Parse5DomAdapter.prototype.getGlobalEventTarget = function (target) {
	        if (target == 'window') {
	            return this.defaultDoc()._window;
	        }
	        else if (target == 'document') {
	            return this.defaultDoc();
	        }
	        else if (target == 'body') {
	            return this.defaultDoc().body;
	        }
	    };
	    Parse5DomAdapter.prototype.getBaseHref = function () {
	        var document = Zone.current.get('document');
	        if (document) {
	            var base = this.querySelector(document, 'base');
	            if (base) {
	                var href = this.getHref(base);
	                if (href) {
	                    return href;
	                }
	            }
	        }
	        throw _notImplemented('getBaseHref');
	    };
	    Parse5DomAdapter.prototype.resetBaseElement = function () { throw _notImplemented('resetBaseElement'); };
	    Parse5DomAdapter.prototype.getHistory = function () {
	        var history = Zone.current.get('history');
	        if (history) {
	            return history;
	        }
	        throw _notImplemented('getHistory');
	    };
	    Parse5DomAdapter.prototype.getLocation = function () {
	        var location = Zone.current.get('location');
	        if (location) {
	            return location;
	        }
	        throw _notImplemented('getLocation');
	    };
	    Parse5DomAdapter.prototype.getUserAgent = function () {
	        var navigator = Zone.current.get('navigator');
	        if (navigator && navigator.userAgent) {
	            return navigator.userAgent;
	        }
	        throw _notImplemented('getUserAgent');
	    };
	    Parse5DomAdapter.prototype.getData = function (el, name) { return this.getAttribute(el, 'data-' + name); };
	    Parse5DomAdapter.prototype.getComputedStyle = function (_el) { throw _notImplemented('getComputedStyle'); };
	    Parse5DomAdapter.prototype.setData = function (el, name, value) { this.setAttribute(el, 'data-' + name, value); };
	    Parse5DomAdapter.prototype.setGlobalVar = function (path, value) { helper_1.setValueOnPath(global, path, value); };
	    Parse5DomAdapter.prototype.supportsWebAnimation = function () { return false; };
	    Parse5DomAdapter.prototype.performanceNow = function () { return Date.now(); };
	    Parse5DomAdapter.prototype.getAnimationPrefix = function () { return ''; };
	    Parse5DomAdapter.prototype.getTransitionEnd = function () { return 'transitionend'; };
	    Parse5DomAdapter.prototype.supportsAnimation = function () { return true; };
	    Parse5DomAdapter.prototype.supportsCookies = function () { return false; };
	    Parse5DomAdapter.prototype.getCookie = function (_name) { throw _notImplemented('getCookie'); };
	    Parse5DomAdapter.prototype.setCookie = function (_name, _value) { throw _notImplemented('setCookie'); };
	    Parse5DomAdapter.prototype.animate = function (_element, _keyframes, _options) { throw _notImplemented('animate'); };
	    return Parse5DomAdapter;
	}(__private_imports__1.DomAdapter));
	exports.Parse5DomAdapter = Parse5DomAdapter;
	var _HTMLElementPropertyList = [
	    'webkitEntries',
	    'incremental',
	    'webkitdirectory',
	    'selectionDirection',
	    'selectionEnd',
	    'selectionStart',
	    'labels',
	    'validationMessage',
	    'validity',
	    'willValidate',
	    'width',
	    'valueAsNumber',
	    'valueAsDate',
	    'value',
	    'useMap',
	    'defaultValue',
	    'type',
	    'step',
	    'src',
	    'size',
	    'required',
	    'readOnly',
	    'placeholder',
	    'pattern',
	    'name',
	    'multiple',
	    'min',
	    'minLength',
	    'maxLength',
	    'max',
	    'list',
	    'indeterminate',
	    'height',
	    'formTarget',
	    'formNoValidate',
	    'formMethod',
	    'formEnctype',
	    'formAction',
	    'files',
	    'form',
	    'disabled',
	    'dirName',
	    'checked',
	    'defaultChecked',
	    'autofocus',
	    'autocomplete',
	    'alt',
	    'align',
	    'accept',
	    'onautocompleteerror',
	    'onautocomplete',
	    'onwaiting',
	    'onvolumechange',
	    'ontoggle',
	    'ontimeupdate',
	    'onsuspend',
	    'onsubmit',
	    'onstalled',
	    'onshow',
	    'onselect',
	    'onseeking',
	    'onseeked',
	    'onscroll',
	    'onresize',
	    'onreset',
	    'onratechange',
	    'onprogress',
	    'onplaying',
	    'onplay',
	    'onpause',
	    'onmousewheel',
	    'onmouseup',
	    'onmouseover',
	    'onmouseout',
	    'onmousemove',
	    'onmouseleave',
	    'onmouseenter',
	    'onmousedown',
	    'onloadstart',
	    'onloadedmetadata',
	    'onloadeddata',
	    'onload',
	    'onkeyup',
	    'onkeypress',
	    'onkeydown',
	    'oninvalid',
	    'oninput',
	    'onfocus',
	    'onerror',
	    'onended',
	    'onemptied',
	    'ondurationchange',
	    'ondrop',
	    'ondragstart',
	    'ondragover',
	    'ondragleave',
	    'ondragenter',
	    'ondragend',
	    'ondrag',
	    'ondblclick',
	    'oncuechange',
	    'oncontextmenu',
	    'onclose',
	    'onclick',
	    'onchange',
	    'oncanplaythrough',
	    'oncanplay',
	    'oncancel',
	    'onblur',
	    'onabort',
	    'spellcheck',
	    'isContentEditable',
	    'contentEditable',
	    'outerText',
	    'innerText',
	    'accessKey',
	    'hidden',
	    'webkitdropzone',
	    'draggable',
	    'tabIndex',
	    'dir',
	    'translate',
	    'lang',
	    'title',
	    'childElementCount',
	    'lastElementChild',
	    'firstElementChild',
	    'children',
	    'onwebkitfullscreenerror',
	    'onwebkitfullscreenchange',
	    'nextElementSibling',
	    'previousElementSibling',
	    'onwheel',
	    'onselectstart',
	    'onsearch',
	    'onpaste',
	    'oncut',
	    'oncopy',
	    'onbeforepaste',
	    'onbeforecut',
	    'onbeforecopy',
	    'shadowRoot',
	    'dataset',
	    'classList',
	    'className',
	    'outerHTML',
	    'innerHTML',
	    'scrollHeight',
	    'scrollWidth',
	    'scrollTop',
	    'scrollLeft',
	    'clientHeight',
	    'clientWidth',
	    'clientTop',
	    'clientLeft',
	    'offsetParent',
	    'offsetHeight',
	    'offsetWidth',
	    'offsetTop',
	    'offsetLeft',
	    'localName',
	    'prefix',
	    'namespaceURI',
	    'id',
	    'style',
	    'attributes',
	    'tagName',
	    'parentElement',
	    'textContent',
	    'baseURI',
	    'ownerDocument',
	    'nextSibling',
	    'previousSibling',
	    'lastChild',
	    'firstChild',
	    'childNodes',
	    'parentNode',
	    'nodeType',
	    'nodeValue',
	    'nodeName',
	    'closure_lm_714617',
	    '__jsaction',
	];
	//# sourceMappingURL=parse5-adapter.js.map

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var lib_1 = __webpack_require__(294);
	var ProxyElement = (function () {
	    function ProxyElement(__zone) {
	        this.__zone = __zone;
	    }
	    Object.defineProperty(ProxyElement.prototype, "_zone", {
	        get: function () { return this.__zone || Zone.current; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProxyElement.prototype, "querySelector", {
	        get: function () {
	            var parentElement = this._zone.get('parentElement');
	            var _zone = this._zone.fork({
	                name: 'ProxyElement.querySelector',
	                properties: { parentElement: parentElement }
	            });
	            return _zone.wrap(querySelector, 'ProxyElement.querySelector');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProxyElement.prototype, "querySelectorAll", {
	        get: function () {
	            var parentElement = this._zone.get('parentElement');
	            var _zone = this._zone.fork({
	                name: 'ProxyElement.querySelectorAll',
	                properties: { parentElement: parentElement }
	            });
	            return _zone.wrap(querySelectorAll, 'ProxyElement.querySelector');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProxyElement.prototype, "tagName", {
	        get: function () {
	            var el = this._zone.get('element');
	            return el.tagName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProxyElement.prototype, "value", {
	        get: function () {
	            var el = this._zone.get('element');
	            return el.value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProxyElement.prototype, "nodeName", {
	        get: function () {
	            var el = this._zone.get('element');
	            return el.tagName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProxyElement.prototype, "nodeValue", {
	        get: function () {
	            var el = this._zone.get('element');
	            return el.nodeValue;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProxyElement.prototype, "firstChild", {
	        get: function () {
	            var DOM = lib_1.getDOM();
	            var parentElement = this._zone.get('element');
	            var _zone = this._zone.fork({
	                name: 'ProxyElement.querySelector',
	                properties: { parentElement: parentElement }
	            });
	            return _zone.run(function () { return DOM.firstChild(parentElement); });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProxyElement.prototype, "nextSibling", {
	        get: function () {
	            var el = this._zone.get('element');
	            return el.nextSibling;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProxyElement.prototype, "parentElement", {
	        get: function () {
	            var el = this._zone.get('element');
	            return el.parent;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProxyElement.prototype, "childNodes", {
	        get: function () {
	            var DOM = lib_1.getDOM();
	            var parentElement = this._zone.get('element');
	            var _zone = this._zone.fork({
	                name: 'ProxyElement.querySelector',
	                properties: { parentElement: parentElement }
	            });
	            return _zone.run(function () { return DOM.childNodes(parentElement); });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ProxyElement.prototype.createElement = function (tagName) {
	        var DOM = lib_1.getDOM();
	        return DOM.createElement(tagName);
	    };
	    return ProxyElement;
	}());
	exports.ProxyElement = ProxyElement;
	var ProxyDocument = (function () {
	    function ProxyDocument(__zone) {
	        this.__zone = __zone;
	    }
	    Object.defineProperty(ProxyDocument.prototype, "_zone", {
	        get: function () { return this.__zone || Zone.current; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProxyDocument.prototype, "querySelector", {
	        get: function () {
	            var document = this._zone.get('document');
	            var zone = this._zone.fork({
	                name: 'ProxyDocument.querySelector',
	                properties: {
	                    parentElement: document
	                }
	            });
	            return zone.wrap(querySelector, 'ProxyDocument.querySelector');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProxyDocument.prototype, "querySelectorAll", {
	        get: function () {
	            var document = this._zone.get('document');
	            var _zone = this._zone.fork({
	                name: 'ProxyDocument.querySelectorAll',
	                properties: {
	                    parentElement: document
	                }
	            });
	            return _zone.wrap(querySelectorAll, 'ProxyDocument.querySelector');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProxyDocument.prototype, "tagName", {
	        get: function () {
	            var el = this._zone.get('document');
	            return el.tagName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProxyDocument.prototype, "cookie", {
	        get: function () {
	            var el = this._zone.get('cookie');
	            return el.cookie;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ProxyDocument.prototype.createElement = function (tagName) {
	        var DOM = lib_1.getDOM();
	        return DOM.createElement(tagName);
	    };
	    return ProxyDocument;
	}());
	exports.ProxyDocument = ProxyDocument;
	function createDocumentProxy() {
	    return new ProxyDocument();
	}
	exports.createDocumentProxy = createDocumentProxy;
	function createGlobalProxy() {
	    var originalDocumentRef = global.document;
	    if (originalDocumentRef instanceof ProxyDocument) {
	        return originalDocumentRef;
	    }
	    var document = createDocumentProxy();
	    Object.defineProperty(global, 'document', {
	        enumerable: false,
	        configurable: false,
	        get: function () {
	            var doc = Zone.current.get('document');
	            if (doc) {
	                return document;
	            }
	            return originalDocumentRef;
	        },
	        set: function (_newValue) {
	        }
	    });
	    return document;
	}
	exports.createGlobalProxy = createGlobalProxy;
	function querySelector(query) {
	    var DOM = lib_1.getDOM();
	    var parentElement = Zone.current.get('parentElement');
	    var element = DOM.querySelector(parentElement, query);
	    var zone = Zone.current.fork({
	        name: 'querySelector',
	        properties: { parentElement: parentElement, element: element }
	    });
	    return new ProxyElement(zone);
	}
	function querySelectorAll(query) {
	    var DOM = lib_1.getDOM();
	    var parentElement = Zone.current.get('parentElement');
	    var element = DOM.querySelectorAll(parentElement, query);
	    var zone = Zone.current.fork({
	        name: 'querySelector',
	        properties: { parentElement: parentElement, element: element }
	    });
	    return new ProxyElement(zone);
	}
	//# sourceMappingURL=proxy-document.js.map

/***/ },
/* 345 */
/***/ function(module, exports) {

	"use strict";
	exports.zoneProps = new WeakMap();
	var ZoneStore = (function () {
	    function ZoneStore(props) {
	        if (props === void 0) { props = Object.create(null); }
	        var store = new Map();
	        try {
	            Object.keys(props).forEach(function (prop) {
	                store.set(prop, props[prop]);
	            });
	        }
	        catch (e) {
	            console.log('e', e);
	        }
	        exports.zoneProps.set(this, store);
	        this.zone = Zone.current.fork({
	            name: 'ZoneStore',
	            properties: { 'ZoneStore': this }
	        });
	    }
	    ZoneStore.prototype.clear = function () {
	        exports.zoneProps.get(this).clear();
	    };
	    ZoneStore.prototype.setMap = function (obj) {
	        var props = exports.zoneProps.get(this);
	        for (var _i = 0, obj_1 = obj; _i < obj_1.length; _i++) {
	            var prop = obj_1[_i];
	            props.set(prop, obj);
	        }
	    };
	    ZoneStore.prototype.get = function (key) {
	        var props = exports.zoneProps.get(this);
	        if (this.has(key)) {
	            return props.get(key);
	        }
	        return null;
	    };
	    ZoneStore.prototype.set = function (key, value) {
	        var props = exports.zoneProps.get(this);
	        if (this.has(key)) {
	            props.set(key, value);
	            return this;
	        }
	        return null;
	    };
	    ZoneStore.prototype.has = function (key) {
	        var props = exports.zoneProps.get(this);
	        return props.has && props.has(key);
	    };
	    return ZoneStore;
	}());
	exports.ZoneStore = ZoneStore;
	//# sourceMappingURL=index.js.map

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var fs = __webpack_require__(347);
	var node_1 = __webpack_require__(289);
	function s4() {
	    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
	}
	function createEngine(options) {
	    options = options || {};
	    var cache = {};
	    var _options = {
	        precompile: true,
	        time: false,
	        asyncDestroy: true,
	        id: function () { return s4(); },
	        platform: function (providers) { return node_1.platformUniversalDynamic(providers); },
	        providers: [],
	        ngModule: null
	    };
	    _options.precompile = ('precompile' in options) ? options.precompile : _options.precompile;
	    _options.time = ('time' in options) ? options.time : _options.time;
	    _options.asyncDestroy = ('asyncDestroy' in options) ? options.asyncDestroy : _options.asyncDestroy;
	    _options.id = options.id || _options.id;
	    _options.ngModule = options.ngModule || _options.ngModule;
	    var __platform = options.platform || _options.platform;
	    var __providers = options.providers || _options.providers;
	    delete _options.providers;
	    delete _options.platform;
	    var platformRef = __platform(__providers);
	    var prom;
	    if (_options.ngModule && _options.precompile) {
	        prom = platformRef.cacheModuleFactory(_options.ngModule);
	    }
	    return function expressEngine(filePath, data, done) {
	        if (data === void 0) { data = { ngModule: _options.ngModule }; }
	        var ngModule = data.ngModule || _options.ngModule;
	        if (!ngModule) {
	            throw new Error('Please provide your main module as ngModule for example res.render("index", {ngModule: MainModule}) or in the engine as createEngine({ ngModule: MainModule })');
	        }
	        if (!data.req || !data.res) {
	            throw new Error('Please provide the req, res arguments (request and response objects from express) in res.render("index", { req, res })');
	        }
	        var cancel = false;
	        if (data.req) {
	            data.req.on('close', function () { return cancel = true; });
	        }
	        var _data = Object.assign({
	            get cancel() { return cancel; },
	            set cancel(val) { cancel = val; },
	            get requestUrl() { return data.requestUrl || data.req.originalUrl; },
	            set requestUrl(_val) { },
	            get originUrl() { return data.originUrl || data.req.hostname; },
	            set originUrl(_val) { },
	            get baseUrl() { return data.baseUrl || '/'; },
	            set baseUrl(_val) { },
	            get cookie() { return data.cookie || data.req.headers.cookie; },
	            set cookie(_val) { },
	        }, data);
	        function readContent(content) {
	            var DOCUMENT = content.toString();
	            _data.document = DOCUMENT;
	            _data.DOCUMENT = DOCUMENT;
	            _data.cancelHandler = function () { return Zone.current.get('cancel'); };
	            var zone = Zone.current.fork({
	                name: 'UNIVERSAL request',
	                properties: _data
	            });
	            return zone.run(function () { return (_options.precompile ?
	                platformRef.serializeModule(ngModule, _data) :
	                platformRef.serializeModuleFactory(ngModule, _data))
	                .then(function (html) {
	                if (typeof html !== 'string' || cancel) {
	                    return done(null, DOCUMENT);
	                }
	                done(null, html);
	            })
	                .catch(function (e) {
	                console.log(e.stack);
	                done(null, DOCUMENT);
	            }); });
	        }
	        try {
	            if (cache[filePath]) {
	                return readContent(cache[filePath]);
	            }
	            fs.readFile(filePath, function (err, content) {
	                if (err) {
	                    cancel = true;
	                    return done(err);
	                }
	                cache[filePath] = content;
	                return readContent(content);
	            });
	        }
	        catch (e) {
	            cancel = true;
	            done(e);
	        }
	    };
	}
	exports.createEngine = createEngine;
	//# sourceMappingURL=index.js.map

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	var fs = __webpack_require__(261)
	var polyfills = __webpack_require__(348)
	var legacy = __webpack_require__(351)
	var queue = []
	
	var util = __webpack_require__(318)
	
	function noop () {}
	
	var debug = noop
	if (util.debuglog)
	  debug = util.debuglog('gfs4')
	else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ''))
	  debug = function() {
	    var m = util.format.apply(util, arguments)
	    m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ')
	    console.error(m)
	  }
	
	if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
	  process.on('exit', function() {
	    debug(queue)
	    __webpack_require__(352).equal(queue.length, 0)
	  })
	}
	
	module.exports = patch(__webpack_require__(349))
	if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH) {
	  module.exports = patch(fs)
	}
	
	// Always patch fs.close/closeSync, because we want to
	// retry() whenever a close happens *anywhere* in the program.
	// This is essential when multiple graceful-fs instances are
	// in play at the same time.
	module.exports.close =
	fs.close = (function (fs$close) { return function (fd, cb) {
	  return fs$close.call(fs, fd, function (err) {
	    if (!err)
	      retry()
	
	    if (typeof cb === 'function')
	      cb.apply(this, arguments)
	  })
	}})(fs.close)
	
	module.exports.closeSync =
	fs.closeSync = (function (fs$closeSync) { return function (fd) {
	  // Note that graceful-fs also retries when fs.closeSync() fails.
	  // Looks like a bug to me, although it's probably a harmless one.
	  var rval = fs$closeSync.apply(fs, arguments)
	  retry()
	  return rval
	}})(fs.closeSync)
	
	function patch (fs) {
	  // Everything that references the open() function needs to be in here
	  polyfills(fs)
	  fs.gracefulify = patch
	  fs.FileReadStream = ReadStream;  // Legacy name.
	  fs.FileWriteStream = WriteStream;  // Legacy name.
	  fs.createReadStream = createReadStream
	  fs.createWriteStream = createWriteStream
	  var fs$readFile = fs.readFile
	  fs.readFile = readFile
	  function readFile (path, options, cb) {
	    if (typeof options === 'function')
	      cb = options, options = null
	
	    return go$readFile(path, options, cb)
	
	    function go$readFile (path, options, cb) {
	      return fs$readFile(path, options, function (err) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$readFile, [path, options, cb]])
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments)
	          retry()
	        }
	      })
	    }
	  }
	
	  var fs$writeFile = fs.writeFile
	  fs.writeFile = writeFile
	  function writeFile (path, data, options, cb) {
	    if (typeof options === 'function')
	      cb = options, options = null
	
	    return go$writeFile(path, data, options, cb)
	
	    function go$writeFile (path, data, options, cb) {
	      return fs$writeFile(path, data, options, function (err) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$writeFile, [path, data, options, cb]])
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments)
	          retry()
	        }
	      })
	    }
	  }
	
	  var fs$appendFile = fs.appendFile
	  if (fs$appendFile)
	    fs.appendFile = appendFile
	  function appendFile (path, data, options, cb) {
	    if (typeof options === 'function')
	      cb = options, options = null
	
	    return go$appendFile(path, data, options, cb)
	
	    function go$appendFile (path, data, options, cb) {
	      return fs$appendFile(path, data, options, function (err) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$appendFile, [path, data, options, cb]])
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments)
	          retry()
	        }
	      })
	    }
	  }
	
	  var fs$readdir = fs.readdir
	  fs.readdir = readdir
	  function readdir (path, options, cb) {
	    var args = [path]
	    if (typeof options !== 'function') {
	      args.push(options)
	    } else {
	      cb = options
	    }
	    args.push(go$readdir$cb)
	
	    return go$readdir(args)
	
	    function go$readdir$cb (err, files) {
	      if (files && files.sort)
	        files.sort()
	
	      if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	        enqueue([go$readdir, [args]])
	      else {
	        if (typeof cb === 'function')
	          cb.apply(this, arguments)
	        retry()
	      }
	    }
	  }
	
	  function go$readdir (args) {
	    return fs$readdir.apply(fs, args)
	  }
	
	  if (process.version.substr(0, 4) === 'v0.8') {
	    var legStreams = legacy(fs)
	    ReadStream = legStreams.ReadStream
	    WriteStream = legStreams.WriteStream
	  }
	
	  var fs$ReadStream = fs.ReadStream
	  ReadStream.prototype = Object.create(fs$ReadStream.prototype)
	  ReadStream.prototype.open = ReadStream$open
	
	  var fs$WriteStream = fs.WriteStream
	  WriteStream.prototype = Object.create(fs$WriteStream.prototype)
	  WriteStream.prototype.open = WriteStream$open
	
	  fs.ReadStream = ReadStream
	  fs.WriteStream = WriteStream
	
	  function ReadStream (path, options) {
	    if (this instanceof ReadStream)
	      return fs$ReadStream.apply(this, arguments), this
	    else
	      return ReadStream.apply(Object.create(ReadStream.prototype), arguments)
	  }
	
	  function ReadStream$open () {
	    var that = this
	    open(that.path, that.flags, that.mode, function (err, fd) {
	      if (err) {
	        if (that.autoClose)
	          that.destroy()
	
	        that.emit('error', err)
	      } else {
	        that.fd = fd
	        that.emit('open', fd)
	        that.read()
	      }
	    })
	  }
	
	  function WriteStream (path, options) {
	    if (this instanceof WriteStream)
	      return fs$WriteStream.apply(this, arguments), this
	    else
	      return WriteStream.apply(Object.create(WriteStream.prototype), arguments)
	  }
	
	  function WriteStream$open () {
	    var that = this
	    open(that.path, that.flags, that.mode, function (err, fd) {
	      if (err) {
	        that.destroy()
	        that.emit('error', err)
	      } else {
	        that.fd = fd
	        that.emit('open', fd)
	      }
	    })
	  }
	
	  function createReadStream (path, options) {
	    return new ReadStream(path, options)
	  }
	
	  function createWriteStream (path, options) {
	    return new WriteStream(path, options)
	  }
	
	  var fs$open = fs.open
	  fs.open = open
	  function open (path, flags, mode, cb) {
	    if (typeof mode === 'function')
	      cb = mode, mode = null
	
	    return go$open(path, flags, mode, cb)
	
	    function go$open (path, flags, mode, cb) {
	      return fs$open(path, flags, mode, function (err, fd) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$open, [path, flags, mode, cb]])
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments)
	          retry()
	        }
	      })
	    }
	  }
	
	  return fs
	}
	
	function enqueue (elem) {
	  debug('ENQUEUE', elem[0].name, elem[1])
	  queue.push(elem)
	}
	
	function retry () {
	  var elem = queue.shift()
	  if (elem) {
	    debug('RETRY', elem[0].name, elem[1])
	    elem[0].apply(null, elem[1])
	  }
	}


/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	var fs = __webpack_require__(349)
	var constants = __webpack_require__(350)
	
	var origCwd = process.cwd
	var cwd = null
	
	var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform
	
	process.cwd = function() {
	  if (!cwd)
	    cwd = origCwd.call(process)
	  return cwd
	}
	try {
	  process.cwd()
	} catch (er) {}
	
	var chdir = process.chdir
	process.chdir = function(d) {
	  cwd = null
	  chdir.call(process, d)
	}
	
	module.exports = patch
	
	function patch (fs) {
	  // (re-)implement some things that are known busted or missing.
	
	  // lchmod, broken prior to 0.6.2
	  // back-port the fix here.
	  if (constants.hasOwnProperty('O_SYMLINK') &&
	      process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
	    patchLchmod(fs)
	  }
	
	  // lutimes implementation, or no-op
	  if (!fs.lutimes) {
	    patchLutimes(fs)
	  }
	
	  // https://github.com/isaacs/node-graceful-fs/issues/4
	  // Chown should not fail on einval or eperm if non-root.
	  // It should not fail on enosys ever, as this just indicates
	  // that a fs doesn't support the intended operation.
	
	  fs.chown = chownFix(fs.chown)
	  fs.fchown = chownFix(fs.fchown)
	  fs.lchown = chownFix(fs.lchown)
	
	  fs.chmod = chmodFix(fs.chmod)
	  fs.fchmod = chmodFix(fs.fchmod)
	  fs.lchmod = chmodFix(fs.lchmod)
	
	  fs.chownSync = chownFixSync(fs.chownSync)
	  fs.fchownSync = chownFixSync(fs.fchownSync)
	  fs.lchownSync = chownFixSync(fs.lchownSync)
	
	  fs.chmodSync = chmodFixSync(fs.chmodSync)
	  fs.fchmodSync = chmodFixSync(fs.fchmodSync)
	  fs.lchmodSync = chmodFixSync(fs.lchmodSync)
	
	  fs.stat = statFix(fs.stat)
	  fs.fstat = statFix(fs.fstat)
	  fs.lstat = statFix(fs.lstat)
	
	  fs.statSync = statFixSync(fs.statSync)
	  fs.fstatSync = statFixSync(fs.fstatSync)
	  fs.lstatSync = statFixSync(fs.lstatSync)
	
	  // if lchmod/lchown do not exist, then make them no-ops
	  if (!fs.lchmod) {
	    fs.lchmod = function (path, mode, cb) {
	      if (cb) process.nextTick(cb)
	    }
	    fs.lchmodSync = function () {}
	  }
	  if (!fs.lchown) {
	    fs.lchown = function (path, uid, gid, cb) {
	      if (cb) process.nextTick(cb)
	    }
	    fs.lchownSync = function () {}
	  }
	
	  // on Windows, A/V software can lock the directory, causing this
	  // to fail with an EACCES or EPERM if the directory contains newly
	  // created files.  Try again on failure, for up to 60 seconds.
	
	  // Set the timeout this long because some Windows Anti-Virus, such as Parity
	  // bit9, may lock files for up to a minute, causing npm package install
	  // failures. Also, take care to yield the scheduler. Windows scheduling gives
	  // CPU to a busy looping process, which can cause the program causing the lock
	  // contention to be starved of CPU by node, so the contention doesn't resolve.
	  if (platform === "win32") {
	    fs.rename = (function (fs$rename) { return function (from, to, cb) {
	      var start = Date.now()
	      var backoff = 0;
	      fs$rename(from, to, function CB (er) {
	        if (er
	            && (er.code === "EACCES" || er.code === "EPERM")
	            && Date.now() - start < 60000) {
	          setTimeout(function() {
	            fs.stat(to, function (stater, st) {
	              if (stater && stater.code === "ENOENT")
	                fs$rename(from, to, CB);
	              else
	                cb(er)
	            })
	          }, backoff)
	          if (backoff < 100)
	            backoff += 10;
	          return;
	        }
	        if (cb) cb(er)
	      })
	    }})(fs.rename)
	  }
	
	  // if read() returns EAGAIN, then just try it again.
	  fs.read = (function (fs$read) { return function (fd, buffer, offset, length, position, callback_) {
	    var callback
	    if (callback_ && typeof callback_ === 'function') {
	      var eagCounter = 0
	      callback = function (er, _, __) {
	        if (er && er.code === 'EAGAIN' && eagCounter < 10) {
	          eagCounter ++
	          return fs$read.call(fs, fd, buffer, offset, length, position, callback)
	        }
	        callback_.apply(this, arguments)
	      }
	    }
	    return fs$read.call(fs, fd, buffer, offset, length, position, callback)
	  }})(fs.read)
	
	  fs.readSync = (function (fs$readSync) { return function (fd, buffer, offset, length, position) {
	    var eagCounter = 0
	    while (true) {
	      try {
	        return fs$readSync.call(fs, fd, buffer, offset, length, position)
	      } catch (er) {
	        if (er.code === 'EAGAIN' && eagCounter < 10) {
	          eagCounter ++
	          continue
	        }
	        throw er
	      }
	    }
	  }})(fs.readSync)
	}
	
	function patchLchmod (fs) {
	  fs.lchmod = function (path, mode, callback) {
	    fs.open( path
	           , constants.O_WRONLY | constants.O_SYMLINK
	           , mode
	           , function (err, fd) {
	      if (err) {
	        if (callback) callback(err)
	        return
	      }
	      // prefer to return the chmod error, if one occurs,
	      // but still try to close, and report closing errors if they occur.
	      fs.fchmod(fd, mode, function (err) {
	        fs.close(fd, function(err2) {
	          if (callback) callback(err || err2)
	        })
	      })
	    })
	  }
	
	  fs.lchmodSync = function (path, mode) {
	    var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode)
	
	    // prefer to return the chmod error, if one occurs,
	    // but still try to close, and report closing errors if they occur.
	    var threw = true
	    var ret
	    try {
	      ret = fs.fchmodSync(fd, mode)
	      threw = false
	    } finally {
	      if (threw) {
	        try {
	          fs.closeSync(fd)
	        } catch (er) {}
	      } else {
	        fs.closeSync(fd)
	      }
	    }
	    return ret
	  }
	}
	
	function patchLutimes (fs) {
	  if (constants.hasOwnProperty("O_SYMLINK")) {
	    fs.lutimes = function (path, at, mt, cb) {
	      fs.open(path, constants.O_SYMLINK, function (er, fd) {
	        if (er) {
	          if (cb) cb(er)
	          return
	        }
	        fs.futimes(fd, at, mt, function (er) {
	          fs.close(fd, function (er2) {
	            if (cb) cb(er || er2)
	          })
	        })
	      })
	    }
	
	    fs.lutimesSync = function (path, at, mt) {
	      var fd = fs.openSync(path, constants.O_SYMLINK)
	      var ret
	      var threw = true
	      try {
	        ret = fs.futimesSync(fd, at, mt)
	        threw = false
	      } finally {
	        if (threw) {
	          try {
	            fs.closeSync(fd)
	          } catch (er) {}
	        } else {
	          fs.closeSync(fd)
	        }
	      }
	      return ret
	    }
	
	  } else {
	    fs.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb) }
	    fs.lutimesSync = function () {}
	  }
	}
	
	function chmodFix (orig) {
	  if (!orig) return orig
	  return function (target, mode, cb) {
	    return orig.call(fs, target, mode, function (er) {
	      if (chownErOk(er)) er = null
	      if (cb) cb.apply(this, arguments)
	    })
	  }
	}
	
	function chmodFixSync (orig) {
	  if (!orig) return orig
	  return function (target, mode) {
	    try {
	      return orig.call(fs, target, mode)
	    } catch (er) {
	      if (!chownErOk(er)) throw er
	    }
	  }
	}
	
	
	function chownFix (orig) {
	  if (!orig) return orig
	  return function (target, uid, gid, cb) {
	    return orig.call(fs, target, uid, gid, function (er) {
	      if (chownErOk(er)) er = null
	      if (cb) cb.apply(this, arguments)
	    })
	  }
	}
	
	function chownFixSync (orig) {
	  if (!orig) return orig
	  return function (target, uid, gid) {
	    try {
	      return orig.call(fs, target, uid, gid)
	    } catch (er) {
	      if (!chownErOk(er)) throw er
	    }
	  }
	}
	
	
	function statFix (orig) {
	  if (!orig) return orig
	  // Older versions of Node erroneously returned signed integers for
	  // uid + gid.
	  return function (target, cb) {
	    return orig.call(fs, target, function (er, stats) {
	      if (!stats) return cb.apply(this, arguments)
	      if (stats.uid < 0) stats.uid += 0x100000000
	      if (stats.gid < 0) stats.gid += 0x100000000
	      if (cb) cb.apply(this, arguments)
	    })
	  }
	}
	
	function statFixSync (orig) {
	  if (!orig) return orig
	  // Older versions of Node erroneously returned signed integers for
	  // uid + gid.
	  return function (target) {
	    var stats = orig.call(fs, target)
	    if (stats.uid < 0) stats.uid += 0x100000000
	    if (stats.gid < 0) stats.gid += 0x100000000
	    return stats;
	  }
	}
	
	// ENOSYS means that the fs doesn't support the op. Just ignore
	// that, because it doesn't matter.
	//
	// if there's no getuid, or if getuid() is something other
	// than 0, and the error is EINVAL or EPERM, then just ignore
	// it.
	//
	// This specific case is a silent failure in cp, install, tar,
	// and most other unix tools that manage permissions.
	//
	// When running as root, or if other types of errors are
	// encountered, then it's strict.
	function chownErOk (er) {
	  if (!er)
	    return true
	
	  if (er.code === "ENOSYS")
	    return true
	
	  var nonroot = !process.getuid || process.getuid() !== 0
	  if (nonroot) {
	    if (er.code === "EINVAL" || er.code === "EPERM")
	      return true
	  }
	
	  return false
	}


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	
	var fs = __webpack_require__(261)
	
	module.exports = clone(fs)
	
	function clone (obj) {
	  if (obj === null || typeof obj !== 'object')
	    return obj
	
	  if (obj instanceof Object)
	    var copy = { __proto__: obj.__proto__ }
	  else
	    var copy = Object.create(null)
	
	  Object.getOwnPropertyNames(obj).forEach(function (key) {
	    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key))
	  })
	
	  return copy
	}


/***/ },
/* 350 */
/***/ function(module, exports) {

	module.exports = require("constants");

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(317).Stream
	
	module.exports = legacy
	
	function legacy (fs) {
	  return {
	    ReadStream: ReadStream,
	    WriteStream: WriteStream
	  }
	
	  function ReadStream (path, options) {
	    if (!(this instanceof ReadStream)) return new ReadStream(path, options);
	
	    Stream.call(this);
	
	    var self = this;
	
	    this.path = path;
	    this.fd = null;
	    this.readable = true;
	    this.paused = false;
	
	    this.flags = 'r';
	    this.mode = 438; /*=0666*/
	    this.bufferSize = 64 * 1024;
	
	    options = options || {};
	
	    // Mixin options into this
	    var keys = Object.keys(options);
	    for (var index = 0, length = keys.length; index < length; index++) {
	      var key = keys[index];
	      this[key] = options[key];
	    }
	
	    if (this.encoding) this.setEncoding(this.encoding);
	
	    if (this.start !== undefined) {
	      if ('number' !== typeof this.start) {
	        throw TypeError('start must be a Number');
	      }
	      if (this.end === undefined) {
	        this.end = Infinity;
	      } else if ('number' !== typeof this.end) {
	        throw TypeError('end must be a Number');
	      }
	
	      if (this.start > this.end) {
	        throw new Error('start must be <= end');
	      }
	
	      this.pos = this.start;
	    }
	
	    if (this.fd !== null) {
	      process.nextTick(function() {
	        self._read();
	      });
	      return;
	    }
	
	    fs.open(this.path, this.flags, this.mode, function (err, fd) {
	      if (err) {
	        self.emit('error', err);
	        self.readable = false;
	        return;
	      }
	
	      self.fd = fd;
	      self.emit('open', fd);
	      self._read();
	    })
	  }
	
	  function WriteStream (path, options) {
	    if (!(this instanceof WriteStream)) return new WriteStream(path, options);
	
	    Stream.call(this);
	
	    this.path = path;
	    this.fd = null;
	    this.writable = true;
	
	    this.flags = 'w';
	    this.encoding = 'binary';
	    this.mode = 438; /*=0666*/
	    this.bytesWritten = 0;
	
	    options = options || {};
	
	    // Mixin options into this
	    var keys = Object.keys(options);
	    for (var index = 0, length = keys.length; index < length; index++) {
	      var key = keys[index];
	      this[key] = options[key];
	    }
	
	    if (this.start !== undefined) {
	      if ('number' !== typeof this.start) {
	        throw TypeError('start must be a Number');
	      }
	      if (this.start < 0) {
	        throw new Error('start must be >= zero');
	      }
	
	      this.pos = this.start;
	    }
	
	    this.busy = false;
	    this._queue = [];
	
	    if (this.fd === null) {
	      this._open = fs.open;
	      this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);
	      this.flush();
	    }
	  }
	}


/***/ },
/* 352 */
/***/ function(module, exports) {

	module.exports = require("assert");

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by Gábor on 2016. 11. 20..
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(268);
	var platform_browser_1 = __webpack_require__(286);
	var main_component_1 = __webpack_require__(354);
	var angular2_universal_1 = __webpack_require__(290);
	var MainModule = (function () {
	    function MainModule() {
	    }
	    MainModule = __decorate([
	        core_1.NgModule({
	            imports: [platform_browser_1.BrowserModule, angular2_universal_1.UniversalModule],
	            declarations: [main_component_1.MainComponent],
	            bootstrap: [main_component_1.MainComponent]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], MainModule);
	    return MainModule;
	}());
	exports.MainModule = MainModule;


/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by Gábor on 2016. 12. 11..
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(268);
	var MainComponent = (function () {
	    function MainComponent() {
	        this.name = 'Angular2';
	    }
	    MainComponent = __decorate([
	        core_1.Component({
	            selector: 'app',
	            template: __webpack_require__(355)
	        }), 
	        __metadata('design:paramtypes', [])
	    ], MainComponent);
	    return MainComponent;
	}());
	exports.MainComponent = MainComponent;


/***/ },
/* 355 */
/***/ function(module, exports) {

	module.exports = "<h1>Hello, {{name}}!</h1>";

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	module.exports = __webpack_require__(357);


/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Module dependencies.
	 */
	
	var EventEmitter = __webpack_require__(260).EventEmitter;
	var mixin = __webpack_require__(358);
	var proto = __webpack_require__(359);
	var Route = __webpack_require__(373);
	var Router = __webpack_require__(372);
	var req = __webpack_require__(414);
	var res = __webpack_require__(426);
	
	/**
	 * Expose `createApplication()`.
	 */
	
	exports = module.exports = createApplication;
	
	/**
	 * Create an express application.
	 *
	 * @return {Function}
	 * @api public
	 */
	
	function createApplication() {
	  var app = function(req, res, next) {
	    app.handle(req, res, next);
	  };
	
	  mixin(app, EventEmitter.prototype, false);
	  mixin(app, proto, false);
	
	  app.request = { __proto__: req, app: app };
	  app.response = { __proto__: res, app: app };
	  app.init();
	  return app;
	}
	
	/**
	 * Expose the prototypes.
	 */
	
	exports.application = proto;
	exports.request = req;
	exports.response = res;
	
	/**
	 * Expose constructors.
	 */
	
	exports.Route = Route;
	exports.Router = Router;
	
	/**
	 * Expose middleware
	 */
	
	exports.query = __webpack_require__(387);
	exports.static = __webpack_require__(430);
	
	/**
	 * Replace removed middleware with an appropriate error message.
	 */
	
	[
	  'json',
	  'urlencoded',
	  'bodyParser',
	  'compress',
	  'cookieSession',
	  'session',
	  'logger',
	  'cookieParser',
	  'favicon',
	  'responseTime',
	  'errorHandler',
	  'timeout',
	  'methodOverride',
	  'vhost',
	  'csrf',
	  'directory',
	  'limit',
	  'multipart',
	  'staticCache',
	].forEach(function (name) {
	  Object.defineProperty(exports, name, {
	    get: function () {
	      throw new Error('Most middleware (like ' + name + ') is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.');
	    },
	    configurable: true
	  });
	});


/***/ },
/* 358 */
/***/ function(module, exports) {

	/*!
	 * merge-descriptors
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = merge
	
	/**
	 * Module variables.
	 * @private
	 */
	
	var hasOwnProperty = Object.prototype.hasOwnProperty
	
	/**
	 * Merge the property descriptors of `src` into `dest`
	 *
	 * @param {object} dest Object to add descriptors to
	 * @param {object} src Object to clone descriptors from
	 * @param {boolean} [redefine=true] Redefine `dest` properties with `src` properties
	 * @returns {object} Reference to dest
	 * @public
	 */
	
	function merge(dest, src, redefine) {
	  if (!dest) {
	    throw new TypeError('argument dest is required')
	  }
	
	  if (!src) {
	    throw new TypeError('argument src is required')
	  }
	
	  if (redefine === undefined) {
	    // Default to true
	    redefine = true
	  }
	
	  Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName(name) {
	    if (!redefine && hasOwnProperty.call(dest, name)) {
	      // Skip desriptor
	      return
	    }
	
	    // Copy descriptor
	    var descriptor = Object.getOwnPropertyDescriptor(src, name)
	    Object.defineProperty(dest, name, descriptor)
	  })
	
	  return dest
	}


/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var finalhandler = __webpack_require__(360);
	var Router = __webpack_require__(372);
	var methods = __webpack_require__(377);
	var middleware = __webpack_require__(386);
	var query = __webpack_require__(387);
	var debug = __webpack_require__(361)('express:application');
	var View = __webpack_require__(392);
	var http = __webpack_require__(331);
	var compileETag = __webpack_require__(393).compileETag;
	var compileQueryParser = __webpack_require__(393).compileQueryParser;
	var compileTrust = __webpack_require__(393).compileTrust;
	var deprecate = __webpack_require__(379)('express');
	var flatten = __webpack_require__(374);
	var merge = __webpack_require__(378);
	var resolve = __webpack_require__(342).resolve;
	var slice = Array.prototype.slice;
	
	/**
	 * Application prototype.
	 */
	
	var app = exports = module.exports = {};
	
	/**
	 * Variable for trust proxy inheritance back-compat
	 * @private
	 */
	
	var trustProxyDefaultSymbol = '@@symbol:trust_proxy_default';
	
	/**
	 * Initialize the server.
	 *
	 *   - setup default configuration
	 *   - setup default middleware
	 *   - setup route reflection methods
	 *
	 * @private
	 */
	
	app.init = function init() {
	  this.cache = {};
	  this.engines = {};
	  this.settings = {};
	
	  this.defaultConfiguration();
	};
	
	/**
	 * Initialize application configuration.
	 * @private
	 */
	
	app.defaultConfiguration = function defaultConfiguration() {
	  var env = process.env.NODE_ENV || 'development';
	
	  // default settings
	  this.enable('x-powered-by');
	  this.set('etag', 'weak');
	  this.set('env', env);
	  this.set('query parser', 'extended');
	  this.set('subdomain offset', 2);
	  this.set('trust proxy', false);
	
	  // trust proxy inherit back-compat
	  Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
	    configurable: true,
	    value: true
	  });
	
	  debug('booting in %s mode', env);
	
	  this.on('mount', function onmount(parent) {
	    // inherit trust proxy
	    if (this.settings[trustProxyDefaultSymbol] === true
	      && typeof parent.settings['trust proxy fn'] === 'function') {
	      delete this.settings['trust proxy'];
	      delete this.settings['trust proxy fn'];
	    }
	
	    // inherit protos
	    this.request.__proto__ = parent.request;
	    this.response.__proto__ = parent.response;
	    this.engines.__proto__ = parent.engines;
	    this.settings.__proto__ = parent.settings;
	  });
	
	  // setup locals
	  this.locals = Object.create(null);
	
	  // top-most app is mounted at /
	  this.mountpath = '/';
	
	  // default locals
	  this.locals.settings = this.settings;
	
	  // default configuration
	  this.set('view', View);
	  this.set('views', resolve('views'));
	  this.set('jsonp callback name', 'callback');
	
	  if (env === 'production') {
	    this.enable('view cache');
	  }
	
	  Object.defineProperty(this, 'router', {
	    get: function() {
	      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
	    }
	  });
	};
	
	/**
	 * lazily adds the base router if it has not yet been added.
	 *
	 * We cannot add the base router in the defaultConfiguration because
	 * it reads app settings which might be set after that has run.
	 *
	 * @private
	 */
	app.lazyrouter = function lazyrouter() {
	  if (!this._router) {
	    this._router = new Router({
	      caseSensitive: this.enabled('case sensitive routing'),
	      strict: this.enabled('strict routing')
	    });
	
	    this._router.use(query(this.get('query parser fn')));
	    this._router.use(middleware.init(this));
	  }
	};
	
	/**
	 * Dispatch a req, res pair into the application. Starts pipeline processing.
	 *
	 * If no callback is provided, then default error handlers will respond
	 * in the event of an error bubbling through the stack.
	 *
	 * @private
	 */
	
	app.handle = function handle(req, res, callback) {
	  var router = this._router;
	
	  // final handler
	  var done = callback || finalhandler(req, res, {
	    env: this.get('env'),
	    onerror: logerror.bind(this)
	  });
	
	  // no routes
	  if (!router) {
	    debug('no routes defined on app');
	    done();
	    return;
	  }
	
	  router.handle(req, res, done);
	};
	
	/**
	 * Proxy `Router#use()` to add middleware to the app router.
	 * See Router#use() documentation for details.
	 *
	 * If the _fn_ parameter is an express app, then it will be
	 * mounted at the _route_ specified.
	 *
	 * @public
	 */
	
	app.use = function use(fn) {
	  var offset = 0;
	  var path = '/';
	
	  // default path to '/'
	  // disambiguate app.use([fn])
	  if (typeof fn !== 'function') {
	    var arg = fn;
	
	    while (Array.isArray(arg) && arg.length !== 0) {
	      arg = arg[0];
	    }
	
	    // first arg is the path
	    if (typeof arg !== 'function') {
	      offset = 1;
	      path = fn;
	    }
	  }
	
	  var fns = flatten(slice.call(arguments, offset));
	
	  if (fns.length === 0) {
	    throw new TypeError('app.use() requires middleware functions');
	  }
	
	  // setup router
	  this.lazyrouter();
	  var router = this._router;
	
	  fns.forEach(function (fn) {
	    // non-express app
	    if (!fn || !fn.handle || !fn.set) {
	      return router.use(path, fn);
	    }
	
	    debug('.use app under %s', path);
	    fn.mountpath = path;
	    fn.parent = this;
	
	    // restore .app property on req and res
	    router.use(path, function mounted_app(req, res, next) {
	      var orig = req.app;
	      fn.handle(req, res, function (err) {
	        req.__proto__ = orig.request;
	        res.__proto__ = orig.response;
	        next(err);
	      });
	    });
	
	    // mounted an app
	    fn.emit('mount', this);
	  }, this);
	
	  return this;
	};
	
	/**
	 * Proxy to the app `Router#route()`
	 * Returns a new `Route` instance for the _path_.
	 *
	 * Routes are isolated middleware stacks for specific paths.
	 * See the Route api docs for details.
	 *
	 * @public
	 */
	
	app.route = function route(path) {
	  this.lazyrouter();
	  return this._router.route(path);
	};
	
	/**
	 * Register the given template engine callback `fn`
	 * as `ext`.
	 *
	 * By default will `require()` the engine based on the
	 * file extension. For example if you try to render
	 * a "foo.jade" file Express will invoke the following internally:
	 *
	 *     app.engine('jade', require('jade').__express);
	 *
	 * For engines that do not provide `.__express` out of the box,
	 * or if you wish to "map" a different extension to the template engine
	 * you may use this method. For example mapping the EJS template engine to
	 * ".html" files:
	 *
	 *     app.engine('html', require('ejs').renderFile);
	 *
	 * In this case EJS provides a `.renderFile()` method with
	 * the same signature that Express expects: `(path, options, callback)`,
	 * though note that it aliases this method as `ejs.__express` internally
	 * so if you're using ".ejs" extensions you dont need to do anything.
	 *
	 * Some template engines do not follow this convention, the
	 * [Consolidate.js](https://github.com/tj/consolidate.js)
	 * library was created to map all of node's popular template
	 * engines to follow this convention, thus allowing them to
	 * work seamlessly within Express.
	 *
	 * @param {String} ext
	 * @param {Function} fn
	 * @return {app} for chaining
	 * @public
	 */
	
	app.engine = function engine(ext, fn) {
	  if (typeof fn !== 'function') {
	    throw new Error('callback function required');
	  }
	
	  // get file extension
	  var extension = ext[0] !== '.'
	    ? '.' + ext
	    : ext;
	
	  // store engine
	  this.engines[extension] = fn;
	
	  return this;
	};
	
	/**
	 * Proxy to `Router#param()` with one added api feature. The _name_ parameter
	 * can be an array of names.
	 *
	 * See the Router#param() docs for more details.
	 *
	 * @param {String|Array} name
	 * @param {Function} fn
	 * @return {app} for chaining
	 * @public
	 */
	
	app.param = function param(name, fn) {
	  this.lazyrouter();
	
	  if (Array.isArray(name)) {
	    for (var i = 0; i < name.length; i++) {
	      this.param(name[i], fn);
	    }
	
	    return this;
	  }
	
	  this._router.param(name, fn);
	
	  return this;
	};
	
	/**
	 * Assign `setting` to `val`, or return `setting`'s value.
	 *
	 *    app.set('foo', 'bar');
	 *    app.get('foo');
	 *    // => "bar"
	 *
	 * Mounted servers inherit their parent server's settings.
	 *
	 * @param {String} setting
	 * @param {*} [val]
	 * @return {Server} for chaining
	 * @public
	 */
	
	app.set = function set(setting, val) {
	  if (arguments.length === 1) {
	    // app.get(setting)
	    return this.settings[setting];
	  }
	
	  debug('set "%s" to %o', setting, val);
	
	  // set value
	  this.settings[setting] = val;
	
	  // trigger matched settings
	  switch (setting) {
	    case 'etag':
	      this.set('etag fn', compileETag(val));
	      break;
	    case 'query parser':
	      this.set('query parser fn', compileQueryParser(val));
	      break;
	    case 'trust proxy':
	      this.set('trust proxy fn', compileTrust(val));
	
	      // trust proxy inherit back-compat
	      Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
	        configurable: true,
	        value: false
	      });
	
	      break;
	  }
	
	  return this;
	};
	
	/**
	 * Return the app's absolute pathname
	 * based on the parent(s) that have
	 * mounted it.
	 *
	 * For example if the application was
	 * mounted as "/admin", which itself
	 * was mounted as "/blog" then the
	 * return value would be "/blog/admin".
	 *
	 * @return {String}
	 * @private
	 */
	
	app.path = function path() {
	  return this.parent
	    ? this.parent.path() + this.mountpath
	    : '';
	};
	
	/**
	 * Check if `setting` is enabled (truthy).
	 *
	 *    app.enabled('foo')
	 *    // => false
	 *
	 *    app.enable('foo')
	 *    app.enabled('foo')
	 *    // => true
	 *
	 * @param {String} setting
	 * @return {Boolean}
	 * @public
	 */
	
	app.enabled = function enabled(setting) {
	  return Boolean(this.set(setting));
	};
	
	/**
	 * Check if `setting` is disabled.
	 *
	 *    app.disabled('foo')
	 *    // => true
	 *
	 *    app.enable('foo')
	 *    app.disabled('foo')
	 *    // => false
	 *
	 * @param {String} setting
	 * @return {Boolean}
	 * @public
	 */
	
	app.disabled = function disabled(setting) {
	  return !this.set(setting);
	};
	
	/**
	 * Enable `setting`.
	 *
	 * @param {String} setting
	 * @return {app} for chaining
	 * @public
	 */
	
	app.enable = function enable(setting) {
	  return this.set(setting, true);
	};
	
	/**
	 * Disable `setting`.
	 *
	 * @param {String} setting
	 * @return {app} for chaining
	 * @public
	 */
	
	app.disable = function disable(setting) {
	  return this.set(setting, false);
	};
	
	/**
	 * Delegate `.VERB(...)` calls to `router.VERB(...)`.
	 */
	
	methods.forEach(function(method){
	  app[method] = function(path){
	    if (method === 'get' && arguments.length === 1) {
	      // app.get(setting)
	      return this.set(path);
	    }
	
	    this.lazyrouter();
	
	    var route = this._router.route(path);
	    route[method].apply(route, slice.call(arguments, 1));
	    return this;
	  };
	});
	
	/**
	 * Special-cased "all" method, applying the given route `path`,
	 * middleware, and callback to _every_ HTTP method.
	 *
	 * @param {String} path
	 * @param {Function} ...
	 * @return {app} for chaining
	 * @public
	 */
	
	app.all = function all(path) {
	  this.lazyrouter();
	
	  var route = this._router.route(path);
	  var args = slice.call(arguments, 1);
	
	  for (var i = 0; i < methods.length; i++) {
	    route[methods[i]].apply(route, args);
	  }
	
	  return this;
	};
	
	// del -> delete alias
	
	app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');
	
	/**
	 * Render the given view `name` name with `options`
	 * and a callback accepting an error and the
	 * rendered template string.
	 *
	 * Example:
	 *
	 *    app.render('email', { name: 'Tobi' }, function(err, html){
	 *      // ...
	 *    })
	 *
	 * @param {String} name
	 * @param {Object|Function} options or fn
	 * @param {Function} callback
	 * @public
	 */
	
	app.render = function render(name, options, callback) {
	  var cache = this.cache;
	  var done = callback;
	  var engines = this.engines;
	  var opts = options;
	  var renderOptions = {};
	  var view;
	
	  // support callback function as second arg
	  if (typeof options === 'function') {
	    done = options;
	    opts = {};
	  }
	
	  // merge app.locals
	  merge(renderOptions, this.locals);
	
	  // merge options._locals
	  if (opts._locals) {
	    merge(renderOptions, opts._locals);
	  }
	
	  // merge options
	  merge(renderOptions, opts);
	
	  // set .cache unless explicitly provided
	  if (renderOptions.cache == null) {
	    renderOptions.cache = this.enabled('view cache');
	  }
	
	  // primed cache
	  if (renderOptions.cache) {
	    view = cache[name];
	  }
	
	  // view
	  if (!view) {
	    var View = this.get('view');
	
	    view = new View(name, {
	      defaultEngine: this.get('view engine'),
	      root: this.get('views'),
	      engines: engines
	    });
	
	    if (!view.path) {
	      var dirs = Array.isArray(view.root) && view.root.length > 1
	        ? 'directories "' + view.root.slice(0, -1).join('", "') + '" or "' + view.root[view.root.length - 1] + '"'
	        : 'directory "' + view.root + '"'
	      var err = new Error('Failed to lookup view "' + name + '" in views ' + dirs);
	      err.view = view;
	      return done(err);
	    }
	
	    // prime the cache
	    if (renderOptions.cache) {
	      cache[name] = view;
	    }
	  }
	
	  // render
	  tryRender(view, renderOptions, done);
	};
	
	/**
	 * Listen for connections.
	 *
	 * A node `http.Server` is returned, with this
	 * application (which is a `Function`) as its
	 * callback. If you wish to create both an HTTP
	 * and HTTPS server you may do so with the "http"
	 * and "https" modules as shown here:
	 *
	 *    var http = require('http')
	 *      , https = require('https')
	 *      , express = require('express')
	 *      , app = express();
	 *
	 *    http.createServer(app).listen(80);
	 *    https.createServer({ ... }, app).listen(443);
	 *
	 * @return {http.Server}
	 * @public
	 */
	
	app.listen = function listen() {
	  var server = http.createServer(this);
	  return server.listen.apply(server, arguments);
	};
	
	/**
	 * Log error using console.error.
	 *
	 * @param {Error} err
	 * @private
	 */
	
	function logerror(err) {
	  /* istanbul ignore next */
	  if (this.get('env') !== 'test') console.error(err.stack || err.toString());
	}
	
	/**
	 * Try rendering a view.
	 * @private
	 */
	
	function tryRender(view, options, callback) {
	  try {
	    view.render(options, callback);
	  } catch (err) {
	    callback(err);
	  }
	}


/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * finalhandler
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var debug = __webpack_require__(361)('finalhandler')
	var escapeHtml = __webpack_require__(366)
	var onFinished = __webpack_require__(367)
	var statuses = __webpack_require__(369)
	var unpipe = __webpack_require__(371)
	
	/**
	 * Module variables.
	 * @private
	 */
	
	/* istanbul ignore next */
	var defer = typeof setImmediate === 'function'
	  ? setImmediate
	  : function (fn) { process.nextTick(fn.bind.apply(fn, arguments)) }
	var isFinished = onFinished.isFinished
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = finalhandler
	
	/**
	 * Create a function to handle the final response.
	 *
	 * @param {Request} req
	 * @param {Response} res
	 * @param {Object} [options]
	 * @return {Function}
	 * @public
	 */
	
	function finalhandler (req, res, options) {
	  var opts = options || {}
	
	  // get environment
	  var env = opts.env || process.env.NODE_ENV || 'development'
	
	  // get error callback
	  var onerror = opts.onerror
	
	  return function (err) {
	    var headers = Object.create(null)
	    var status
	
	    // ignore 404 on in-flight response
	    if (!err && res._header) {
	      debug('cannot 404 after headers sent')
	      return
	    }
	
	    // unhandled error
	    if (err) {
	      // respect status code from error
	      status = getErrorStatusCode(err) || res.statusCode
	
	      // default status code to 500 if outside valid range
	      if (typeof status !== 'number' || status < 400 || status > 599) {
	        status = 500
	      }
	
	      // respect err.headers
	      if (err.headers && (err.status === status || err.statusCode === status)) {
	        var keys = Object.keys(err.headers)
	        for (var i = 0; i < keys.length; i++) {
	          var key = keys[i]
	          headers[key] = err.headers[key]
	        }
	      }
	
	      // production gets a basic error message
	      var msg = env === 'production'
	        ? statuses[status]
	        : err.stack || err.toString()
	      msg = escapeHtml(msg)
	        .replace(/\n/g, '<br>')
	        .replace(/\x20{2}/g, ' &nbsp;') + '\n'
	    } else {
	      status = 404
	      msg = 'Cannot ' + escapeHtml(req.method) + ' ' + escapeHtml(req.originalUrl || req.url) + '\n'
	    }
	
	    debug('default %s', status)
	
	    // schedule onerror callback
	    if (err && onerror) {
	      defer(onerror, err, req, res)
	    }
	
	    // cannot actually respond
	    if (res._header) {
	      debug('cannot %d after headers sent', status)
	      req.socket.destroy()
	      return
	    }
	
	    // send response
	    send(req, res, status, headers, msg)
	  }
	}
	
	/**
	 * Get status code from Error object.
	 *
	 * @param {Error} err
	 * @return {number}
	 * @private
	 */
	
	function getErrorStatusCode (err) {
	  // check err.status
	  if (typeof err.status === 'number' && err.status >= 400 && err.status < 600) {
	    return err.status
	  }
	
	  // check err.statusCode
	  if (typeof err.statusCode === 'number' && err.statusCode >= 400 && err.statusCode < 600) {
	    return err.statusCode
	  }
	
	  return undefined
	}
	
	/**
	 * Send response.
	 *
	 * @param {IncomingMessage} req
	 * @param {OutgoingMessage} res
	 * @param {number} status
	 * @param {object} headers
	 * @param {string} body
	 * @private
	 */
	
	function send (req, res, status, headers, body) {
	  function write () {
	    // response status
	    res.statusCode = status
	    res.statusMessage = statuses[status]
	
	    // response headers
	    var keys = Object.keys(headers)
	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i]
	      res.setHeader(key, headers[key])
	    }
	
	    // security header for content sniffing
	    res.setHeader('X-Content-Type-Options', 'nosniff')
	
	    // standard headers
	    res.setHeader('Content-Type', 'text/html; charset=utf-8')
	    res.setHeader('Content-Length', Buffer.byteLength(body, 'utf8'))
	
	    if (req.method === 'HEAD') {
	      res.end()
	      return
	    }
	
	    res.end(body, 'utf8')
	  }
	
	  if (isFinished(req)) {
	    write()
	    return
	  }
	
	  // unpipe everything from the request
	  unpipe(req)
	
	  // flush the request
	  onFinished(req, write)
	  req.resume()
	}


/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */
	
	var tty = __webpack_require__(362);
	var util = __webpack_require__(318);
	
	/**
	 * This is the Node.js implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = __webpack_require__(363);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	
	/**
	 * Colors.
	 */
	
	exports.colors = [6, 2, 3, 4, 5, 1];
	
	/**
	 * The file descriptor to write the `debug()` calls to.
	 * Set the `DEBUG_FD` env variable to override with another value. i.e.:
	 *
	 *   $ DEBUG_FD=3 node script.js 3>debug.log
	 */
	
	var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
	var stream = 1 === fd ? process.stdout :
	             2 === fd ? process.stderr :
	             createWritableStdioStream(fd);
	
	/**
	 * Is stdout a TTY? Colored output is enabled when `true`.
	 */
	
	function useColors() {
	  var debugColors = (process.env.DEBUG_COLORS || '').trim().toLowerCase();
	  if (0 === debugColors.length) {
	    return tty.isatty(fd);
	  } else {
	    return '0' !== debugColors
	        && 'no' !== debugColors
	        && 'false' !== debugColors
	        && 'disabled' !== debugColors;
	  }
	}
	
	/**
	 * Map %o to `util.inspect()`, since Node doesn't do that out of the box.
	 */
	
	var inspect = (4 === util.inspect.length ?
	  // node <= 0.8.x
	  function (v, colors) {
	    return util.inspect(v, void 0, void 0, colors);
	  } :
	  // node > 0.8.x
	  function (v, colors) {
	    return util.inspect(v, { colors: colors });
	  }
	);
	
	exports.formatters.o = function(v) {
	  return inspect(v, this.useColors)
	    .replace(/\s*\n\s*/g, ' ');
	};
	
	/**
	 * Adds ANSI color escape codes if enabled.
	 *
	 * @api public
	 */
	
	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;
	  var name = this.namespace;
	
	  if (useColors) {
	    var c = this.color;
	
	    args[0] = '  \u001b[3' + c + ';1m' + name + ' '
	      + '\u001b[0m'
	      + args[0] + '\u001b[3' + c + 'm'
	      + ' +' + exports.humanize(this.diff) + '\u001b[0m';
	  } else {
	    args[0] = new Date().toUTCString()
	      + ' ' + name + ' ' + args[0];
	  }
	  return args;
	}
	
	/**
	 * Invokes `console.error()` with the specified arguments.
	 */
	
	function log() {
	  return stream.write(util.format.apply(this, arguments) + '\n');
	}
	
	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	
	function save(namespaces) {
	  if (null == namespaces) {
	    // If you set a process.env field to null or undefined, it gets cast to the
	    // string 'null' or 'undefined'. Just delete instead.
	    delete process.env.DEBUG;
	  } else {
	    process.env.DEBUG = namespaces;
	  }
	}
	
	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	
	function load() {
	  return process.env.DEBUG;
	}
	
	/**
	 * Copied from `node/src/node.js`.
	 *
	 * XXX: It's lame that node doesn't expose this API out-of-the-box. It also
	 * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.
	 */
	
	function createWritableStdioStream (fd) {
	  var stream;
	  var tty_wrap = process.binding('tty_wrap');
	
	  // Note stream._type is used for test-module-load-list.js
	
	  switch (tty_wrap.guessHandleType(fd)) {
	    case 'TTY':
	      stream = new tty.WriteStream(fd);
	      stream._type = 'tty';
	
	      // Hack to have stream not keep the event loop alive.
	      // See https://github.com/joyent/node/issues/1726
	      if (stream._handle && stream._handle.unref) {
	        stream._handle.unref();
	      }
	      break;
	
	    case 'FILE':
	      var fs = __webpack_require__(261);
	      stream = new fs.SyncWriteStream(fd, { autoClose: false });
	      stream._type = 'fs';
	      break;
	
	    case 'PIPE':
	    case 'TCP':
	      var net = __webpack_require__(365);
	      stream = new net.Socket({
	        fd: fd,
	        readable: false,
	        writable: true
	      });
	
	      // FIXME Should probably have an option in net.Socket to create a
	      // stream from an existing fd which is writable only. But for now
	      // we'll just add this hack and set the `readable` member to false.
	      // Test: ./node test/fixtures/echo.js < /etc/passwd
	      stream.readable = false;
	      stream.read = null;
	      stream._type = 'pipe';
	
	      // FIXME Hack to have stream not keep the event loop alive.
	      // See https://github.com/joyent/node/issues/1726
	      if (stream._handle && stream._handle.unref) {
	        stream._handle.unref();
	      }
	      break;
	
	    default:
	      // Probably an error on in uv_guess_handle()
	      throw new Error('Implement me. Unknown stream file type!');
	  }
	
	  // For supporting legacy API we put the FD here.
	  stream.fd = fd;
	
	  stream._isStdio = true;
	
	  return stream;
	}
	
	/**
	 * Enable namespaces listed in `process.env.DEBUG` initially.
	 */
	
	exports.enable(load());


/***/ },
/* 362 */
/***/ function(module, exports) {

	module.exports = require("tty");

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(364);
	
	/**
	 * The currently active debug mode names, and names to skip.
	 */
	
	exports.names = [];
	exports.skips = [];
	
	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */
	
	exports.formatters = {};
	
	/**
	 * Previously assigned color.
	 */
	
	var prevColor = 0;
	
	/**
	 * Previous log timestamp.
	 */
	
	var prevTime;
	
	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */
	
	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}
	
	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */
	
	function debug(namespace) {
	
	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;
	
	  // define the `enabled` version
	  function enabled() {
	
	    var self = enabled;
	
	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;
	
	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();
	
	    var args = Array.prototype.slice.call(arguments);
	
	    args[0] = exports.coerce(args[0]);
	
	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }
	
	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);
	
	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });
	
	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;
	
	  var fn = exports.enabled(namespace) ? enabled : disabled;
	
	  fn.namespace = namespace;
	
	  return fn;
	}
	
	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */
	
	function enable(namespaces) {
	  exports.save(namespaces);
	
	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;
	
	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}
	
	/**
	 * Disable debug output.
	 *
	 * @api public
	 */
	
	function disable() {
	  exports.enable('');
	}
	
	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */
	
	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */
	
	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 364 */
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */
	
	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;
	
	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */
	
	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};
	
	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */
	
	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}
	
	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}
	
	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}
	
	/**
	 * Pluralization helper.
	 */
	
	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 365 */
/***/ function(module, exports) {

	module.exports = require("net");

/***/ },
/* 366 */
/***/ function(module, exports) {

	/*!
	 * escape-html
	 * Copyright(c) 2012-2013 TJ Holowaychuk
	 * Copyright(c) 2015 Andreas Lubbe
	 * Copyright(c) 2015 Tiancheng "Timothy" Gu
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Module variables.
	 * @private
	 */
	
	var matchHtmlRegExp = /["'&<>]/;
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = escapeHtml;
	
	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */
	
	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);
	
	  if (!match) {
	    return str;
	  }
	
	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;
	
	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34: // "
	        escape = '&quot;';
	        break;
	      case 38: // &
	        escape = '&amp;';
	        break;
	      case 39: // '
	        escape = '&#39;';
	        break;
	      case 60: // <
	        escape = '&lt;';
	        break;
	      case 62: // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }
	
	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }
	
	    lastIndex = index + 1;
	    html += escape;
	  }
	
	  return lastIndex !== index
	    ? html + str.substring(lastIndex, index)
	    : html;
	}


/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * on-finished
	 * Copyright(c) 2013 Jonathan Ong
	 * Copyright(c) 2014 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = onFinished
	module.exports.isFinished = isFinished
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var first = __webpack_require__(368)
	
	/**
	 * Variables.
	 * @private
	 */
	
	/* istanbul ignore next */
	var defer = typeof setImmediate === 'function'
	  ? setImmediate
	  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }
	
	/**
	 * Invoke callback when the response has finished, useful for
	 * cleaning up resources afterwards.
	 *
	 * @param {object} msg
	 * @param {function} listener
	 * @return {object}
	 * @public
	 */
	
	function onFinished(msg, listener) {
	  if (isFinished(msg) !== false) {
	    defer(listener, null, msg)
	    return msg
	  }
	
	  // attach the listener to the message
	  attachListener(msg, listener)
	
	  return msg
	}
	
	/**
	 * Determine if message is already finished.
	 *
	 * @param {object} msg
	 * @return {boolean}
	 * @public
	 */
	
	function isFinished(msg) {
	  var socket = msg.socket
	
	  if (typeof msg.finished === 'boolean') {
	    // OutgoingMessage
	    return Boolean(msg.finished || (socket && !socket.writable))
	  }
	
	  if (typeof msg.complete === 'boolean') {
	    // IncomingMessage
	    return Boolean(msg.upgrade || !socket || !socket.readable || (msg.complete && !msg.readable))
	  }
	
	  // don't know
	  return undefined
	}
	
	/**
	 * Attach a finished listener to the message.
	 *
	 * @param {object} msg
	 * @param {function} callback
	 * @private
	 */
	
	function attachFinishedListener(msg, callback) {
	  var eeMsg
	  var eeSocket
	  var finished = false
	
	  function onFinish(error) {
	    eeMsg.cancel()
	    eeSocket.cancel()
	
	    finished = true
	    callback(error)
	  }
	
	  // finished on first message event
	  eeMsg = eeSocket = first([[msg, 'end', 'finish']], onFinish)
	
	  function onSocket(socket) {
	    // remove listener
	    msg.removeListener('socket', onSocket)
	
	    if (finished) return
	    if (eeMsg !== eeSocket) return
	
	    // finished on first socket event
	    eeSocket = first([[socket, 'error', 'close']], onFinish)
	  }
	
	  if (msg.socket) {
	    // socket already assigned
	    onSocket(msg.socket)
	    return
	  }
	
	  // wait for socket to be assigned
	  msg.on('socket', onSocket)
	
	  if (msg.socket === undefined) {
	    // node.js 0.8 patch
	    patchAssignSocket(msg, onSocket)
	  }
	}
	
	/**
	 * Attach the listener to the message.
	 *
	 * @param {object} msg
	 * @return {function}
	 * @private
	 */
	
	function attachListener(msg, listener) {
	  var attached = msg.__onFinished
	
	  // create a private single listener with queue
	  if (!attached || !attached.queue) {
	    attached = msg.__onFinished = createListener(msg)
	    attachFinishedListener(msg, attached)
	  }
	
	  attached.queue.push(listener)
	}
	
	/**
	 * Create listener on message.
	 *
	 * @param {object} msg
	 * @return {function}
	 * @private
	 */
	
	function createListener(msg) {
	  function listener(err) {
	    if (msg.__onFinished === listener) msg.__onFinished = null
	    if (!listener.queue) return
	
	    var queue = listener.queue
	    listener.queue = null
	
	    for (var i = 0; i < queue.length; i++) {
	      queue[i](err, msg)
	    }
	  }
	
	  listener.queue = []
	
	  return listener
	}
	
	/**
	 * Patch ServerResponse.prototype.assignSocket for node.js 0.8.
	 *
	 * @param {ServerResponse} res
	 * @param {function} callback
	 * @private
	 */
	
	function patchAssignSocket(res, callback) {
	  var assignSocket = res.assignSocket
	
	  if (typeof assignSocket !== 'function') return
	
	  // res.on('socket', callback) is broken in 0.8
	  res.assignSocket = function _assignSocket(socket) {
	    assignSocket.call(this, socket)
	    callback(socket)
	  }
	}


/***/ },
/* 368 */
/***/ function(module, exports) {

	/*!
	 * ee-first
	 * Copyright(c) 2014 Jonathan Ong
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = first
	
	/**
	 * Get the first event in a set of event emitters and event pairs.
	 *
	 * @param {array} stuff
	 * @param {function} done
	 * @public
	 */
	
	function first(stuff, done) {
	  if (!Array.isArray(stuff))
	    throw new TypeError('arg must be an array of [ee, events...] arrays')
	
	  var cleanups = []
	
	  for (var i = 0; i < stuff.length; i++) {
	    var arr = stuff[i]
	
	    if (!Array.isArray(arr) || arr.length < 2)
	      throw new TypeError('each array member must be [ee, events...]')
	
	    var ee = arr[0]
	
	    for (var j = 1; j < arr.length; j++) {
	      var event = arr[j]
	      var fn = listener(event, callback)
	
	      // listen to the event
	      ee.on(event, fn)
	      // push this listener to the list of cleanups
	      cleanups.push({
	        ee: ee,
	        event: event,
	        fn: fn,
	      })
	    }
	  }
	
	  function callback() {
	    cleanup()
	    done.apply(null, arguments)
	  }
	
	  function cleanup() {
	    var x
	    for (var i = 0; i < cleanups.length; i++) {
	      x = cleanups[i]
	      x.ee.removeListener(x.event, x.fn)
	    }
	  }
	
	  function thunk(fn) {
	    done = fn
	  }
	
	  thunk.cancel = cleanup
	
	  return thunk
	}
	
	/**
	 * Create the event listener.
	 * @private
	 */
	
	function listener(event, done) {
	  return function onevent(arg1) {
	    var args = new Array(arguments.length)
	    var ee = this
	    var err = event === 'error'
	      ? arg1
	      : null
	
	    // copy args to prevent arguments escaping scope
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i]
	    }
	
	    done(err, ee, event, args)
	  }
	}


/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * statuses
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2016 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var codes = __webpack_require__(370)
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = status
	
	// array of status codes
	status.codes = populateStatusesMap(status, codes)
	
	// status codes for redirects
	status.redirect = {
	  300: true,
	  301: true,
	  302: true,
	  303: true,
	  305: true,
	  307: true,
	  308: true
	}
	
	// status codes for empty bodies
	status.empty = {
	  204: true,
	  205: true,
	  304: true
	}
	
	// status codes for when you should retry the request
	status.retry = {
	  502: true,
	  503: true,
	  504: true
	}
	
	/**
	 * Populate the statuses map for given codes.
	 * @private
	 */
	
	function populateStatusesMap (statuses, codes) {
	  var arr = []
	
	  Object.keys(codes).forEach(function forEachCode (code) {
	    var message = codes[code]
	    var status = Number(code)
	
	    // Populate properties
	    statuses[status] = message
	    statuses[message] = status
	    statuses[message.toLowerCase()] = status
	
	    // Add to array
	    arr.push(status)
	  })
	
	  return arr
	}
	
	/**
	 * Get the status code.
	 *
	 * Given a number, this will throw if it is not a known status
	 * code, otherwise the code will be returned. Given a string,
	 * the string will be parsed for a number and return the code
	 * if valid, otherwise will lookup the code assuming this is
	 * the status message.
	 *
	 * @param {string|number} code
	 * @returns {number}
	 * @public
	 */
	
	function status (code) {
	  if (typeof code === 'number') {
	    if (!status[code]) throw new Error('invalid status code: ' + code)
	    return code
	  }
	
	  if (typeof code !== 'string') {
	    throw new TypeError('code must be a number or string')
	  }
	
	  // '403'
	  var n = parseInt(code, 10)
	  if (!isNaN(n)) {
	    if (!status[n]) throw new Error('invalid status code: ' + n)
	    return n
	  }
	
	  n = status[code.toLowerCase()]
	  if (!n) throw new Error('invalid status message: "' + code + '"')
	  return n
	}


/***/ },
/* 370 */
/***/ function(module, exports) {

	module.exports = {
		"100": "Continue",
		"101": "Switching Protocols",
		"102": "Processing",
		"200": "OK",
		"201": "Created",
		"202": "Accepted",
		"203": "Non-Authoritative Information",
		"204": "No Content",
		"205": "Reset Content",
		"206": "Partial Content",
		"207": "Multi-Status",
		"208": "Already Reported",
		"226": "IM Used",
		"300": "Multiple Choices",
		"301": "Moved Permanently",
		"302": "Found",
		"303": "See Other",
		"304": "Not Modified",
		"305": "Use Proxy",
		"306": "(Unused)",
		"307": "Temporary Redirect",
		"308": "Permanent Redirect",
		"400": "Bad Request",
		"401": "Unauthorized",
		"402": "Payment Required",
		"403": "Forbidden",
		"404": "Not Found",
		"405": "Method Not Allowed",
		"406": "Not Acceptable",
		"407": "Proxy Authentication Required",
		"408": "Request Timeout",
		"409": "Conflict",
		"410": "Gone",
		"411": "Length Required",
		"412": "Precondition Failed",
		"413": "Payload Too Large",
		"414": "URI Too Long",
		"415": "Unsupported Media Type",
		"416": "Range Not Satisfiable",
		"417": "Expectation Failed",
		"418": "I'm a teapot",
		"421": "Misdirected Request",
		"422": "Unprocessable Entity",
		"423": "Locked",
		"424": "Failed Dependency",
		"425": "Unordered Collection",
		"426": "Upgrade Required",
		"428": "Precondition Required",
		"429": "Too Many Requests",
		"431": "Request Header Fields Too Large",
		"451": "Unavailable For Legal Reasons",
		"500": "Internal Server Error",
		"501": "Not Implemented",
		"502": "Bad Gateway",
		"503": "Service Unavailable",
		"504": "Gateway Timeout",
		"505": "HTTP Version Not Supported",
		"506": "Variant Also Negotiates",
		"507": "Insufficient Storage",
		"508": "Loop Detected",
		"509": "Bandwidth Limit Exceeded",
		"510": "Not Extended",
		"511": "Network Authentication Required"
	};

/***/ },
/* 371 */
/***/ function(module, exports) {

	/*!
	 * unpipe
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = unpipe
	
	/**
	 * Determine if there are Node.js pipe-like data listeners.
	 * @private
	 */
	
	function hasPipeDataListeners(stream) {
	  var listeners = stream.listeners('data')
	
	  for (var i = 0; i < listeners.length; i++) {
	    if (listeners[i].name === 'ondata') {
	      return true
	    }
	  }
	
	  return false
	}
	
	/**
	 * Unpipe a stream from all destinations.
	 *
	 * @param {object} stream
	 * @public
	 */
	
	function unpipe(stream) {
	  if (!stream) {
	    throw new TypeError('argument stream is required')
	  }
	
	  if (typeof stream.unpipe === 'function') {
	    // new-style
	    stream.unpipe()
	    return
	  }
	
	  // Node.js 0.8 hack
	  if (!hasPipeDataListeners(stream)) {
	    return
	  }
	
	  var listener
	  var listeners = stream.listeners('close')
	
	  for (var i = 0; i < listeners.length; i++) {
	    listener = listeners[i]
	
	    if (listener.name !== 'cleanup' && listener.name !== 'onclose') {
	      continue
	    }
	
	    // invoke the listener
	    listener.call(stream)
	  }
	}


/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var Route = __webpack_require__(373);
	var Layer = __webpack_require__(375);
	var methods = __webpack_require__(377);
	var mixin = __webpack_require__(378);
	var debug = __webpack_require__(361)('express:router');
	var deprecate = __webpack_require__(379)('express');
	var flatten = __webpack_require__(374);
	var parseUrl = __webpack_require__(385);
	
	/**
	 * Module variables.
	 * @private
	 */
	
	var objectRegExp = /^\[object (\S+)\]$/;
	var slice = Array.prototype.slice;
	var toString = Object.prototype.toString;
	
	/**
	 * Initialize a new `Router` with the given `options`.
	 *
	 * @param {Object} options
	 * @return {Router} which is an callable function
	 * @public
	 */
	
	var proto = module.exports = function(options) {
	  var opts = options || {};
	
	  function router(req, res, next) {
	    router.handle(req, res, next);
	  }
	
	  // mixin Router class functions
	  router.__proto__ = proto;
	
	  router.params = {};
	  router._params = [];
	  router.caseSensitive = opts.caseSensitive;
	  router.mergeParams = opts.mergeParams;
	  router.strict = opts.strict;
	  router.stack = [];
	
	  return router;
	};
	
	/**
	 * Map the given param placeholder `name`(s) to the given callback.
	 *
	 * Parameter mapping is used to provide pre-conditions to routes
	 * which use normalized placeholders. For example a _:user_id_ parameter
	 * could automatically load a user's information from the database without
	 * any additional code,
	 *
	 * The callback uses the same signature as middleware, the only difference
	 * being that the value of the placeholder is passed, in this case the _id_
	 * of the user. Once the `next()` function is invoked, just like middleware
	 * it will continue on to execute the route, or subsequent parameter functions.
	 *
	 * Just like in middleware, you must either respond to the request or call next
	 * to avoid stalling the request.
	 *
	 *  app.param('user_id', function(req, res, next, id){
	 *    User.find(id, function(err, user){
	 *      if (err) {
	 *        return next(err);
	 *      } else if (!user) {
	 *        return next(new Error('failed to load user'));
	 *      }
	 *      req.user = user;
	 *      next();
	 *    });
	 *  });
	 *
	 * @param {String} name
	 * @param {Function} fn
	 * @return {app} for chaining
	 * @public
	 */
	
	proto.param = function param(name, fn) {
	  // param logic
	  if (typeof name === 'function') {
	    deprecate('router.param(fn): Refactor to use path params');
	    this._params.push(name);
	    return;
	  }
	
	  // apply param functions
	  var params = this._params;
	  var len = params.length;
	  var ret;
	
	  if (name[0] === ':') {
	    deprecate('router.param(' + JSON.stringify(name) + ', fn): Use router.param(' + JSON.stringify(name.substr(1)) + ', fn) instead');
	    name = name.substr(1);
	  }
	
	  for (var i = 0; i < len; ++i) {
	    if (ret = params[i](name, fn)) {
	      fn = ret;
	    }
	  }
	
	  // ensure we end up with a
	  // middleware function
	  if ('function' !== typeof fn) {
	    throw new Error('invalid param() call for ' + name + ', got ' + fn);
	  }
	
	  (this.params[name] = this.params[name] || []).push(fn);
	  return this;
	};
	
	/**
	 * Dispatch a req, res into the router.
	 * @private
	 */
	
	proto.handle = function handle(req, res, out) {
	  var self = this;
	
	  debug('dispatching %s %s', req.method, req.url);
	
	  var search = 1 + req.url.indexOf('?');
	  var pathlength = search ? search - 1 : req.url.length;
	  var fqdn = req.url[0] !== '/' && 1 + req.url.substr(0, pathlength).indexOf('://');
	  var protohost = fqdn ? req.url.substr(0, req.url.indexOf('/', 2 + fqdn)) : '';
	  var idx = 0;
	  var removed = '';
	  var slashAdded = false;
	  var paramcalled = {};
	
	  // store options for OPTIONS request
	  // only used if OPTIONS request
	  var options = [];
	
	  // middleware and routes
	  var stack = self.stack;
	
	  // manage inter-router variables
	  var parentParams = req.params;
	  var parentUrl = req.baseUrl || '';
	  var done = restore(out, req, 'baseUrl', 'next', 'params');
	
	  // setup next layer
	  req.next = next;
	
	  // for options requests, respond with a default if nothing else responds
	  if (req.method === 'OPTIONS') {
	    done = wrap(done, function(old, err) {
	      if (err || options.length === 0) return old(err);
	      sendOptionsResponse(res, options, old);
	    });
	  }
	
	  // setup basic req values
	  req.baseUrl = parentUrl;
	  req.originalUrl = req.originalUrl || req.url;
	
	  next();
	
	  function next(err) {
	    var layerError = err === 'route'
	      ? null
	      : err;
	
	    // remove added slash
	    if (slashAdded) {
	      req.url = req.url.substr(1);
	      slashAdded = false;
	    }
	
	    // restore altered req.url
	    if (removed.length !== 0) {
	      req.baseUrl = parentUrl;
	      req.url = protohost + removed + req.url.substr(protohost.length);
	      removed = '';
	    }
	
	    // no more matching layers
	    if (idx >= stack.length) {
	      setImmediate(done, layerError);
	      return;
	    }
	
	    // get pathname of request
	    var path = getPathname(req);
	
	    if (path == null) {
	      return done(layerError);
	    }
	
	    // find next matching layer
	    var layer;
	    var match;
	    var route;
	
	    while (match !== true && idx < stack.length) {
	      layer = stack[idx++];
	      match = matchLayer(layer, path);
	      route = layer.route;
	
	      if (typeof match !== 'boolean') {
	        // hold on to layerError
	        layerError = layerError || match;
	      }
	
	      if (match !== true) {
	        continue;
	      }
	
	      if (!route) {
	        // process non-route handlers normally
	        continue;
	      }
	
	      if (layerError) {
	        // routes do not match with a pending error
	        match = false;
	        continue;
	      }
	
	      var method = req.method;
	      var has_method = route._handles_method(method);
	
	      // build up automatic options response
	      if (!has_method && method === 'OPTIONS') {
	        appendMethods(options, route._options());
	      }
	
	      // don't even bother matching route
	      if (!has_method && method !== 'HEAD') {
	        match = false;
	        continue;
	      }
	    }
	
	    // no match
	    if (match !== true) {
	      return done(layerError);
	    }
	
	    // store route for dispatch on change
	    if (route) {
	      req.route = route;
	    }
	
	    // Capture one-time layer values
	    req.params = self.mergeParams
	      ? mergeParams(layer.params, parentParams)
	      : layer.params;
	    var layerPath = layer.path;
	
	    // this should be done for the layer
	    self.process_params(layer, paramcalled, req, res, function (err) {
	      if (err) {
	        return next(layerError || err);
	      }
	
	      if (route) {
	        return layer.handle_request(req, res, next);
	      }
	
	      trim_prefix(layer, layerError, layerPath, path);
	    });
	  }
	
	  function trim_prefix(layer, layerError, layerPath, path) {
	    var c = path[layerPath.length];
	    if (c && '/' !== c && '.' !== c) return next(layerError);
	
	     // Trim off the part of the url that matches the route
	     // middleware (.use stuff) needs to have the path stripped
	    if (layerPath.length !== 0) {
	      debug('trim prefix (%s) from url %s', layerPath, req.url);
	      removed = layerPath;
	      req.url = protohost + req.url.substr(protohost.length + removed.length);
	
	      // Ensure leading slash
	      if (!fqdn && req.url[0] !== '/') {
	        req.url = '/' + req.url;
	        slashAdded = true;
	      }
	
	      // Setup base URL (no trailing slash)
	      req.baseUrl = parentUrl + (removed[removed.length - 1] === '/'
	        ? removed.substring(0, removed.length - 1)
	        : removed);
	    }
	
	    debug('%s %s : %s', layer.name, layerPath, req.originalUrl);
	
	    if (layerError) {
	      layer.handle_error(layerError, req, res, next);
	    } else {
	      layer.handle_request(req, res, next);
	    }
	  }
	};
	
	/**
	 * Process any parameters for the layer.
	 * @private
	 */
	
	proto.process_params = function process_params(layer, called, req, res, done) {
	  var params = this.params;
	
	  // captured parameters from the layer, keys and values
	  var keys = layer.keys;
	
	  // fast track
	  if (!keys || keys.length === 0) {
	    return done();
	  }
	
	  var i = 0;
	  var name;
	  var paramIndex = 0;
	  var key;
	  var paramVal;
	  var paramCallbacks;
	  var paramCalled;
	
	  // process params in order
	  // param callbacks can be async
	  function param(err) {
	    if (err) {
	      return done(err);
	    }
	
	    if (i >= keys.length ) {
	      return done();
	    }
	
	    paramIndex = 0;
	    key = keys[i++];
	
	    if (!key) {
	      return done();
	    }
	
	    name = key.name;
	    paramVal = req.params[name];
	    paramCallbacks = params[name];
	    paramCalled = called[name];
	
	    if (paramVal === undefined || !paramCallbacks) {
	      return param();
	    }
	
	    // param previously called with same value or error occurred
	    if (paramCalled && (paramCalled.match === paramVal
	      || (paramCalled.error && paramCalled.error !== 'route'))) {
	      // restore value
	      req.params[name] = paramCalled.value;
	
	      // next param
	      return param(paramCalled.error);
	    }
	
	    called[name] = paramCalled = {
	      error: null,
	      match: paramVal,
	      value: paramVal
	    };
	
	    paramCallback();
	  }
	
	  // single param callbacks
	  function paramCallback(err) {
	    var fn = paramCallbacks[paramIndex++];
	
	    // store updated value
	    paramCalled.value = req.params[key.name];
	
	    if (err) {
	      // store error
	      paramCalled.error = err;
	      param(err);
	      return;
	    }
	
	    if (!fn) return param();
	
	    try {
	      fn(req, res, paramCallback, paramVal, key.name);
	    } catch (e) {
	      paramCallback(e);
	    }
	  }
	
	  param();
	};
	
	/**
	 * Use the given middleware function, with optional path, defaulting to "/".
	 *
	 * Use (like `.all`) will run for any http METHOD, but it will not add
	 * handlers for those methods so OPTIONS requests will not consider `.use`
	 * functions even if they could respond.
	 *
	 * The other difference is that _route_ path is stripped and not visible
	 * to the handler function. The main effect of this feature is that mounted
	 * handlers can operate without any code changes regardless of the "prefix"
	 * pathname.
	 *
	 * @public
	 */
	
	proto.use = function use(fn) {
	  var offset = 0;
	  var path = '/';
	
	  // default path to '/'
	  // disambiguate router.use([fn])
	  if (typeof fn !== 'function') {
	    var arg = fn;
	
	    while (Array.isArray(arg) && arg.length !== 0) {
	      arg = arg[0];
	    }
	
	    // first arg is the path
	    if (typeof arg !== 'function') {
	      offset = 1;
	      path = fn;
	    }
	  }
	
	  var callbacks = flatten(slice.call(arguments, offset));
	
	  if (callbacks.length === 0) {
	    throw new TypeError('Router.use() requires middleware functions');
	  }
	
	  for (var i = 0; i < callbacks.length; i++) {
	    var fn = callbacks[i];
	
	    if (typeof fn !== 'function') {
	      throw new TypeError('Router.use() requires middleware function but got a ' + gettype(fn));
	    }
	
	    // add the middleware
	    debug('use %s %s', path, fn.name || '<anonymous>');
	
	    var layer = new Layer(path, {
	      sensitive: this.caseSensitive,
	      strict: false,
	      end: false
	    }, fn);
	
	    layer.route = undefined;
	
	    this.stack.push(layer);
	  }
	
	  return this;
	};
	
	/**
	 * Create a new Route for the given path.
	 *
	 * Each route contains a separate middleware stack and VERB handlers.
	 *
	 * See the Route api documentation for details on adding handlers
	 * and middleware to routes.
	 *
	 * @param {String} path
	 * @return {Route}
	 * @public
	 */
	
	proto.route = function route(path) {
	  var route = new Route(path);
	
	  var layer = new Layer(path, {
	    sensitive: this.caseSensitive,
	    strict: this.strict,
	    end: true
	  }, route.dispatch.bind(route));
	
	  layer.route = route;
	
	  this.stack.push(layer);
	  return route;
	};
	
	// create Router#VERB functions
	methods.concat('all').forEach(function(method){
	  proto[method] = function(path){
	    var route = this.route(path)
	    route[method].apply(route, slice.call(arguments, 1));
	    return this;
	  };
	});
	
	// append methods to a list of methods
	function appendMethods(list, addition) {
	  for (var i = 0; i < addition.length; i++) {
	    var method = addition[i];
	    if (list.indexOf(method) === -1) {
	      list.push(method);
	    }
	  }
	}
	
	// get pathname of request
	function getPathname(req) {
	  try {
	    return parseUrl(req).pathname;
	  } catch (err) {
	    return undefined;
	  }
	}
	
	// get type for error message
	function gettype(obj) {
	  var type = typeof obj;
	
	  if (type !== 'object') {
	    return type;
	  }
	
	  // inspect [[Class]] for objects
	  return toString.call(obj)
	    .replace(objectRegExp, '$1');
	}
	
	/**
	 * Match path to a layer.
	 *
	 * @param {Layer} layer
	 * @param {string} path
	 * @private
	 */
	
	function matchLayer(layer, path) {
	  try {
	    return layer.match(path);
	  } catch (err) {
	    return err;
	  }
	}
	
	// merge params with parent params
	function mergeParams(params, parent) {
	  if (typeof parent !== 'object' || !parent) {
	    return params;
	  }
	
	  // make copy of parent for base
	  var obj = mixin({}, parent);
	
	  // simple non-numeric merging
	  if (!(0 in params) || !(0 in parent)) {
	    return mixin(obj, params);
	  }
	
	  var i = 0;
	  var o = 0;
	
	  // determine numeric gaps
	  while (i in params) {
	    i++;
	  }
	
	  while (o in parent) {
	    o++;
	  }
	
	  // offset numeric indices in params before merge
	  for (i--; i >= 0; i--) {
	    params[i + o] = params[i];
	
	    // create holes for the merge when necessary
	    if (i < o) {
	      delete params[i];
	    }
	  }
	
	  return mixin(obj, params);
	}
	
	// restore obj props after function
	function restore(fn, obj) {
	  var props = new Array(arguments.length - 2);
	  var vals = new Array(arguments.length - 2);
	
	  for (var i = 0; i < props.length; i++) {
	    props[i] = arguments[i + 2];
	    vals[i] = obj[props[i]];
	  }
	
	  return function(err){
	    // restore vals
	    for (var i = 0; i < props.length; i++) {
	      obj[props[i]] = vals[i];
	    }
	
	    return fn.apply(this, arguments);
	  };
	}
	
	// send an OPTIONS response
	function sendOptionsResponse(res, options, next) {
	  try {
	    var body = options.join(',');
	    res.set('Allow', body);
	    res.send(body);
	  } catch (err) {
	    next(err);
	  }
	}
	
	// wrap a function
	function wrap(old, fn) {
	  return function proxy() {
	    var args = new Array(arguments.length + 1);
	
	    args[0] = old;
	    for (var i = 0, len = arguments.length; i < len; i++) {
	      args[i + 1] = arguments[i];
	    }
	
	    fn.apply(this, args);
	  };
	}


/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var debug = __webpack_require__(361)('express:router:route');
	var flatten = __webpack_require__(374);
	var Layer = __webpack_require__(375);
	var methods = __webpack_require__(377);
	
	/**
	 * Module variables.
	 * @private
	 */
	
	var slice = Array.prototype.slice;
	var toString = Object.prototype.toString;
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = Route;
	
	/**
	 * Initialize `Route` with the given `path`,
	 *
	 * @param {String} path
	 * @public
	 */
	
	function Route(path) {
	  this.path = path;
	  this.stack = [];
	
	  debug('new %s', path);
	
	  // route handlers for various http methods
	  this.methods = {};
	}
	
	/**
	 * Determine if the route handles a given method.
	 * @private
	 */
	
	Route.prototype._handles_method = function _handles_method(method) {
	  if (this.methods._all) {
	    return true;
	  }
	
	  var name = method.toLowerCase();
	
	  if (name === 'head' && !this.methods['head']) {
	    name = 'get';
	  }
	
	  return Boolean(this.methods[name]);
	};
	
	/**
	 * @return {Array} supported HTTP methods
	 * @private
	 */
	
	Route.prototype._options = function _options() {
	  var methods = Object.keys(this.methods);
	
	  // append automatic head
	  if (this.methods.get && !this.methods.head) {
	    methods.push('head');
	  }
	
	  for (var i = 0; i < methods.length; i++) {
	    // make upper case
	    methods[i] = methods[i].toUpperCase();
	  }
	
	  return methods;
	};
	
	/**
	 * dispatch req, res into this route
	 * @private
	 */
	
	Route.prototype.dispatch = function dispatch(req, res, done) {
	  var idx = 0;
	  var stack = this.stack;
	  if (stack.length === 0) {
	    return done();
	  }
	
	  var method = req.method.toLowerCase();
	  if (method === 'head' && !this.methods['head']) {
	    method = 'get';
	  }
	
	  req.route = this;
	
	  next();
	
	  function next(err) {
	    if (err && err === 'route') {
	      return done();
	    }
	
	    var layer = stack[idx++];
	    if (!layer) {
	      return done(err);
	    }
	
	    if (layer.method && layer.method !== method) {
	      return next(err);
	    }
	
	    if (err) {
	      layer.handle_error(err, req, res, next);
	    } else {
	      layer.handle_request(req, res, next);
	    }
	  }
	};
	
	/**
	 * Add a handler for all HTTP verbs to this route.
	 *
	 * Behaves just like middleware and can respond or call `next`
	 * to continue processing.
	 *
	 * You can use multiple `.all` call to add multiple handlers.
	 *
	 *   function check_something(req, res, next){
	 *     next();
	 *   };
	 *
	 *   function validate_user(req, res, next){
	 *     next();
	 *   };
	 *
	 *   route
	 *   .all(validate_user)
	 *   .all(check_something)
	 *   .get(function(req, res, next){
	 *     res.send('hello world');
	 *   });
	 *
	 * @param {function} handler
	 * @return {Route} for chaining
	 * @api public
	 */
	
	Route.prototype.all = function all() {
	  var handles = flatten(slice.call(arguments));
	
	  for (var i = 0; i < handles.length; i++) {
	    var handle = handles[i];
	
	    if (typeof handle !== 'function') {
	      var type = toString.call(handle);
	      var msg = 'Route.all() requires callback functions but got a ' + type;
	      throw new TypeError(msg);
	    }
	
	    var layer = Layer('/', {}, handle);
	    layer.method = undefined;
	
	    this.methods._all = true;
	    this.stack.push(layer);
	  }
	
	  return this;
	};
	
	methods.forEach(function(method){
	  Route.prototype[method] = function(){
	    var handles = flatten(slice.call(arguments));
	
	    for (var i = 0; i < handles.length; i++) {
	      var handle = handles[i];
	
	      if (typeof handle !== 'function') {
	        var type = toString.call(handle);
	        var msg = 'Route.' + method + '() requires callback functions but got a ' + type;
	        throw new Error(msg);
	      }
	
	      debug('%s %s', method, this.path);
	
	      var layer = Layer('/', {}, handle);
	      layer.method = method;
	
	      this.methods[method] = true;
	      this.stack.push(layer);
	    }
	
	    return this;
	  };
	});


/***/ },
/* 374 */
/***/ function(module, exports) {

	'use strict'
	
	/**
	 * Expose `arrayFlatten`.
	 */
	module.exports = arrayFlatten
	
	/**
	 * Recursive flatten function with depth.
	 *
	 * @param  {Array}  array
	 * @param  {Array}  result
	 * @param  {Number} depth
	 * @return {Array}
	 */
	function flattenWithDepth (array, result, depth) {
	  for (var i = 0; i < array.length; i++) {
	    var value = array[i]
	
	    if (depth > 0 && Array.isArray(value)) {
	      flattenWithDepth(value, result, depth - 1)
	    } else {
	      result.push(value)
	    }
	  }
	
	  return result
	}
	
	/**
	 * Recursive flatten function. Omitting depth is slightly faster.
	 *
	 * @param  {Array} array
	 * @param  {Array} result
	 * @return {Array}
	 */
	function flattenForever (array, result) {
	  for (var i = 0; i < array.length; i++) {
	    var value = array[i]
	
	    if (Array.isArray(value)) {
	      flattenForever(value, result)
	    } else {
	      result.push(value)
	    }
	  }
	
	  return result
	}
	
	/**
	 * Flatten an array, with the ability to define a depth.
	 *
	 * @param  {Array}  array
	 * @param  {Number} depth
	 * @return {Array}
	 */
	function arrayFlatten (array, depth) {
	  if (depth == null) {
	    return flattenForever(array, [])
	  }
	
	  return flattenWithDepth(array, [], depth)
	}


/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var pathRegexp = __webpack_require__(376);
	var debug = __webpack_require__(361)('express:router:layer');
	
	/**
	 * Module variables.
	 * @private
	 */
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = Layer;
	
	function Layer(path, options, fn) {
	  if (!(this instanceof Layer)) {
	    return new Layer(path, options, fn);
	  }
	
	  debug('new %s', path);
	  var opts = options || {};
	
	  this.handle = fn;
	  this.name = fn.name || '<anonymous>';
	  this.params = undefined;
	  this.path = undefined;
	  this.regexp = pathRegexp(path, this.keys = [], opts);
	
	  if (path === '/' && opts.end === false) {
	    this.regexp.fast_slash = true;
	  }
	}
	
	/**
	 * Handle the error for the layer.
	 *
	 * @param {Error} error
	 * @param {Request} req
	 * @param {Response} res
	 * @param {function} next
	 * @api private
	 */
	
	Layer.prototype.handle_error = function handle_error(error, req, res, next) {
	  var fn = this.handle;
	
	  if (fn.length !== 4) {
	    // not a standard error handler
	    return next(error);
	  }
	
	  try {
	    fn(error, req, res, next);
	  } catch (err) {
	    next(err);
	  }
	};
	
	/**
	 * Handle the request for the layer.
	 *
	 * @param {Request} req
	 * @param {Response} res
	 * @param {function} next
	 * @api private
	 */
	
	Layer.prototype.handle_request = function handle(req, res, next) {
	  var fn = this.handle;
	
	  if (fn.length > 3) {
	    // not a standard request handler
	    return next();
	  }
	
	  try {
	    fn(req, res, next);
	  } catch (err) {
	    next(err);
	  }
	};
	
	/**
	 * Check if this route matches `path`, if so
	 * populate `.params`.
	 *
	 * @param {String} path
	 * @return {Boolean}
	 * @api private
	 */
	
	Layer.prototype.match = function match(path) {
	  if (path == null) {
	    // no path, nothing matches
	    this.params = undefined;
	    this.path = undefined;
	    return false;
	  }
	
	  if (this.regexp.fast_slash) {
	    // fast path non-ending match for / (everything matches)
	    this.params = {};
	    this.path = '';
	    return true;
	  }
	
	  var m = this.regexp.exec(path);
	
	  if (!m) {
	    this.params = undefined;
	    this.path = undefined;
	    return false;
	  }
	
	  // store values
	  this.params = {};
	  this.path = m[0];
	
	  var keys = this.keys;
	  var params = this.params;
	
	  for (var i = 1; i < m.length; i++) {
	    var key = keys[i - 1];
	    var prop = key.name;
	    var val = decode_param(m[i]);
	
	    if (val !== undefined || !(hasOwnProperty.call(params, prop))) {
	      params[prop] = val;
	    }
	  }
	
	  return true;
	};
	
	/**
	 * Decode param value.
	 *
	 * @param {string} val
	 * @return {string}
	 * @private
	 */
	
	function decode_param(val) {
	  if (typeof val !== 'string' || val.length === 0) {
	    return val;
	  }
	
	  try {
	    return decodeURIComponent(val);
	  } catch (err) {
	    if (err instanceof URIError) {
	      err.message = 'Failed to decode param \'' + val + '\'';
	      err.status = err.statusCode = 400;
	    }
	
	    throw err;
	  }
	}


/***/ },
/* 376 */
/***/ function(module, exports) {

	/**
	 * Expose `pathtoRegexp`.
	 */
	
	module.exports = pathtoRegexp;
	
	/**
	 * Match matching groups in a regular expression.
	 */
	var MATCHING_GROUP_REGEXP = /\((?!\?)/g;
	
	/**
	 * Normalize the given path string,
	 * returning a regular expression.
	 *
	 * An empty array should be passed,
	 * which will contain the placeholder
	 * key names. For example "/user/:id" will
	 * then contain ["id"].
	 *
	 * @param  {String|RegExp|Array} path
	 * @param  {Array} keys
	 * @param  {Object} options
	 * @return {RegExp}
	 * @api private
	 */
	
	function pathtoRegexp(path, keys, options) {
	  options = options || {};
	  keys = keys || [];
	  var strict = options.strict;
	  var end = options.end !== false;
	  var flags = options.sensitive ? '' : 'i';
	  var extraOffset = 0;
	  var keysOffset = keys.length;
	  var i = 0;
	  var name = 0;
	  var m;
	
	  if (path instanceof RegExp) {
	    while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {
	      keys.push({
	        name: name++,
	        optional: false,
	        offset: m.index
	      });
	    }
	
	    return path;
	  }
	
	  if (Array.isArray(path)) {
	    // Map array parts into regexps and return their source. We also pass
	    // the same keys and options instance into every generation to get
	    // consistent matching groups before we join the sources together.
	    path = path.map(function (value) {
	      return pathtoRegexp(value, keys, options).source;
	    });
	
	    return new RegExp('(?:' + path.join('|') + ')', flags);
	  }
	
	  path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?'))
	    .replace(/\/\(/g, '/(?:')
	    .replace(/([\/\.])/g, '\\$1')
	    .replace(/(\\\/)?(\\\.)?:(\w+)(\(.*?\))?(\*)?(\?)?/g, function (match, slash, format, key, capture, star, optional, offset) {
	      slash = slash || '';
	      format = format || '';
	      capture = capture || '([^\\/' + format + ']+?)';
	      optional = optional || '';
	
	      keys.push({
	        name: key,
	        optional: !!optional,
	        offset: offset + extraOffset
	      });
	
	      var result = ''
	        + (optional ? '' : slash)
	        + '(?:'
	        + format + (optional ? slash : '') + capture
	        + (star ? '((?:[\\/' + format + '].+?)?)' : '')
	        + ')'
	        + optional;
	
	      extraOffset += result.length - match.length;
	
	      return result;
	    })
	    .replace(/\*/g, function (star, index) {
	      var len = keys.length
	
	      while (len-- > keysOffset && keys[len].offset > index) {
	        keys[len].offset += 3; // Replacement length minus asterisk length.
	      }
	
	      return '(.*)';
	    });
	
	  // This is a workaround for handling unnamed matching groups.
	  while (m = MATCHING_GROUP_REGEXP.exec(path)) {
	    var escapeCount = 0;
	    var index = m.index;
	
	    while (path.charAt(--index) === '\\') {
	      escapeCount++;
	    }
	
	    // It's possible to escape the bracket.
	    if (escapeCount % 2 === 1) {
	      continue;
	    }
	
	    if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {
	      keys.splice(keysOffset + i, 0, {
	        name: name++, // Unnamed matching groups must be consistently linear.
	        optional: false,
	        offset: m.index
	      });
	    }
	
	    i++;
	  }
	
	  // If the path is non-ending, match until the end or a slash.
	  path += (end ? '$' : (path[path.length - 1] === '/' ? '' : '(?=\\/|$)'));
	
	  return new RegExp(path, flags);
	};


/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * methods
	 * Copyright(c) 2013-2014 TJ Holowaychuk
	 * Copyright(c) 2015-2016 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var http = __webpack_require__(331);
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = getCurrentNodeMethods() || getBasicNodeMethods();
	
	/**
	 * Get the current Node.js methods.
	 * @private
	 */
	
	function getCurrentNodeMethods() {
	  return http.METHODS && http.METHODS.map(function lowerCaseMethod(method) {
	    return method.toLowerCase();
	  });
	}
	
	/**
	 * Get the "basic" Node.js methods, a snapshot from Node.js 0.10.
	 * @private
	 */
	
	function getBasicNodeMethods() {
	  return [
	    'get',
	    'post',
	    'put',
	    'head',
	    'delete',
	    'options',
	    'trace',
	    'copy',
	    'lock',
	    'mkcol',
	    'move',
	    'purge',
	    'propfind',
	    'proppatch',
	    'unlock',
	    'report',
	    'mkactivity',
	    'checkout',
	    'merge',
	    'm-search',
	    'notify',
	    'subscribe',
	    'unsubscribe',
	    'patch',
	    'search',
	    'connect'
	  ];
	}


/***/ },
/* 378 */
/***/ function(module, exports) {

	/**
	 * Merge object b with object a.
	 *
	 *     var a = { foo: 'bar' }
	 *       , b = { bar: 'baz' };
	 *
	 *     merge(a, b);
	 *     // => { foo: 'bar', bar: 'baz' }
	 *
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object}
	 * @api public
	 */
	
	exports = module.exports = function(a, b){
	  if (a && b) {
	    for (var key in b) {
	      a[key] = b[key];
	    }
	  }
	  return a;
	};


/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * depd
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	/**
	 * Module dependencies.
	 */
	
	var callSiteToString = __webpack_require__(380).callSiteToString
	var eventListenerCount = __webpack_require__(380).eventListenerCount
	var relative = __webpack_require__(342).relative
	
	/**
	 * Module exports.
	 */
	
	module.exports = depd
	
	/**
	 * Get the path to base files on.
	 */
	
	var basePath = process.cwd()
	
	/**
	 * Determine if namespace is contained in the string.
	 */
	
	function containsNamespace(str, namespace) {
	  var val = str.split(/[ ,]+/)
	
	  namespace = String(namespace).toLowerCase()
	
	  for (var i = 0 ; i < val.length; i++) {
	    if (!(str = val[i])) continue;
	
	    // namespace contained
	    if (str === '*' || str.toLowerCase() === namespace) {
	      return true
	    }
	  }
	
	  return false
	}
	
	/**
	 * Convert a data descriptor to accessor descriptor.
	 */
	
	function convertDataDescriptorToAccessor(obj, prop, message) {
	  var descriptor = Object.getOwnPropertyDescriptor(obj, prop)
	  var value = descriptor.value
	
	  descriptor.get = function getter() { return value }
	
	  if (descriptor.writable) {
	    descriptor.set = function setter(val) { return value = val }
	  }
	
	  delete descriptor.value
	  delete descriptor.writable
	
	  Object.defineProperty(obj, prop, descriptor)
	
	  return descriptor
	}
	
	/**
	 * Create arguments string to keep arity.
	 */
	
	function createArgumentsString(arity) {
	  var str = ''
	
	  for (var i = 0; i < arity; i++) {
	    str += ', arg' + i
	  }
	
	  return str.substr(2)
	}
	
	/**
	 * Create stack string from stack.
	 */
	
	function createStackString(stack) {
	  var str = this.name + ': ' + this.namespace
	
	  if (this.message) {
	    str += ' deprecated ' + this.message
	  }
	
	  for (var i = 0; i < stack.length; i++) {
	    str += '\n    at ' + callSiteToString(stack[i])
	  }
	
	  return str
	}
	
	/**
	 * Create deprecate for namespace in caller.
	 */
	
	function depd(namespace) {
	  if (!namespace) {
	    throw new TypeError('argument namespace is required')
	  }
	
	  var stack = getStack()
	  var site = callSiteLocation(stack[1])
	  var file = site[0]
	
	  function deprecate(message) {
	    // call to self as log
	    log.call(deprecate, message)
	  }
	
	  deprecate._file = file
	  deprecate._ignored = isignored(namespace)
	  deprecate._namespace = namespace
	  deprecate._traced = istraced(namespace)
	  deprecate._warned = Object.create(null)
	
	  deprecate.function = wrapfunction
	  deprecate.property = wrapproperty
	
	  return deprecate
	}
	
	/**
	 * Determine if namespace is ignored.
	 */
	
	function isignored(namespace) {
	  /* istanbul ignore next: tested in a child processs */
	  if (process.noDeprecation) {
	    // --no-deprecation support
	    return true
	  }
	
	  var str = process.env.NO_DEPRECATION || ''
	
	  // namespace ignored
	  return containsNamespace(str, namespace)
	}
	
	/**
	 * Determine if namespace is traced.
	 */
	
	function istraced(namespace) {
	  /* istanbul ignore next: tested in a child processs */
	  if (process.traceDeprecation) {
	    // --trace-deprecation support
	    return true
	  }
	
	  var str = process.env.TRACE_DEPRECATION || ''
	
	  // namespace traced
	  return containsNamespace(str, namespace)
	}
	
	/**
	 * Display deprecation message.
	 */
	
	function log(message, site) {
	  var haslisteners = eventListenerCount(process, 'deprecation') !== 0
	
	  // abort early if no destination
	  if (!haslisteners && this._ignored) {
	    return
	  }
	
	  var caller
	  var callFile
	  var callSite
	  var i = 0
	  var seen = false
	  var stack = getStack()
	  var file = this._file
	
	  if (site) {
	    // provided site
	    callSite = callSiteLocation(stack[1])
	    callSite.name = site.name
	    file = callSite[0]
	  } else {
	    // get call site
	    i = 2
	    site = callSiteLocation(stack[i])
	    callSite = site
	  }
	
	  // get caller of deprecated thing in relation to file
	  for (; i < stack.length; i++) {
	    caller = callSiteLocation(stack[i])
	    callFile = caller[0]
	
	    if (callFile === file) {
	      seen = true
	    } else if (callFile === this._file) {
	      file = this._file
	    } else if (seen) {
	      break
	    }
	  }
	
	  var key = caller
	    ? site.join(':') + '__' + caller.join(':')
	    : undefined
	
	  if (key !== undefined && key in this._warned) {
	    // already warned
	    return
	  }
	
	  this._warned[key] = true
	
	  // generate automatic message from call site
	  if (!message) {
	    message = callSite === site || !callSite.name
	      ? defaultMessage(site)
	      : defaultMessage(callSite)
	  }
	
	  // emit deprecation if listeners exist
	  if (haslisteners) {
	    var err = DeprecationError(this._namespace, message, stack.slice(i))
	    process.emit('deprecation', err)
	    return
	  }
	
	  // format and write message
	  var format = process.stderr.isTTY
	    ? formatColor
	    : formatPlain
	  var msg = format.call(this, message, caller, stack.slice(i))
	  process.stderr.write(msg + '\n', 'utf8')
	
	  return
	}
	
	/**
	 * Get call site location as array.
	 */
	
	function callSiteLocation(callSite) {
	  var file = callSite.getFileName() || '<anonymous>'
	  var line = callSite.getLineNumber()
	  var colm = callSite.getColumnNumber()
	
	  if (callSite.isEval()) {
	    file = callSite.getEvalOrigin() + ', ' + file
	  }
	
	  var site = [file, line, colm]
	
	  site.callSite = callSite
	  site.name = callSite.getFunctionName()
	
	  return site
	}
	
	/**
	 * Generate a default message from the site.
	 */
	
	function defaultMessage(site) {
	  var callSite = site.callSite
	  var funcName = site.name
	
	  // make useful anonymous name
	  if (!funcName) {
	    funcName = '<anonymous@' + formatLocation(site) + '>'
	  }
	
	  var context = callSite.getThis()
	  var typeName = context && callSite.getTypeName()
	
	  // ignore useless type name
	  if (typeName === 'Object') {
	    typeName = undefined
	  }
	
	  // make useful type name
	  if (typeName === 'Function') {
	    typeName = context.name || typeName
	  }
	
	  return typeName && callSite.getMethodName()
	    ? typeName + '.' + funcName
	    : funcName
	}
	
	/**
	 * Format deprecation message without color.
	 */
	
	function formatPlain(msg, caller, stack) {
	  var timestamp = new Date().toUTCString()
	
	  var formatted = timestamp
	    + ' ' + this._namespace
	    + ' deprecated ' + msg
	
	  // add stack trace
	  if (this._traced) {
	    for (var i = 0; i < stack.length; i++) {
	      formatted += '\n    at ' + callSiteToString(stack[i])
	    }
	
	    return formatted
	  }
	
	  if (caller) {
	    formatted += ' at ' + formatLocation(caller)
	  }
	
	  return formatted
	}
	
	/**
	 * Format deprecation message with color.
	 */
	
	function formatColor(msg, caller, stack) {
	  var formatted = '\x1b[36;1m' + this._namespace + '\x1b[22;39m' // bold cyan
	    + ' \x1b[33;1mdeprecated\x1b[22;39m' // bold yellow
	    + ' \x1b[0m' + msg + '\x1b[39m' // reset
	
	  // add stack trace
	  if (this._traced) {
	    for (var i = 0; i < stack.length; i++) {
	      formatted += '\n    \x1b[36mat ' + callSiteToString(stack[i]) + '\x1b[39m' // cyan
	    }
	
	    return formatted
	  }
	
	  if (caller) {
	    formatted += ' \x1b[36m' + formatLocation(caller) + '\x1b[39m' // cyan
	  }
	
	  return formatted
	}
	
	/**
	 * Format call site location.
	 */
	
	function formatLocation(callSite) {
	  return relative(basePath, callSite[0])
	    + ':' + callSite[1]
	    + ':' + callSite[2]
	}
	
	/**
	 * Get the stack as array of call sites.
	 */
	
	function getStack() {
	  var limit = Error.stackTraceLimit
	  var obj = {}
	  var prep = Error.prepareStackTrace
	
	  Error.prepareStackTrace = prepareObjectStackTrace
	  Error.stackTraceLimit = Math.max(10, limit)
	
	  // capture the stack
	  Error.captureStackTrace(obj)
	
	  // slice this function off the top
	  var stack = obj.stack.slice(1)
	
	  Error.prepareStackTrace = prep
	  Error.stackTraceLimit = limit
	
	  return stack
	}
	
	/**
	 * Capture call site stack from v8.
	 */
	
	function prepareObjectStackTrace(obj, stack) {
	  return stack
	}
	
	/**
	 * Return a wrapped function in a deprecation message.
	 */
	
	function wrapfunction(fn, message) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('argument fn must be a function')
	  }
	
	  var args = createArgumentsString(fn.length)
	  var deprecate = this
	  var stack = getStack()
	  var site = callSiteLocation(stack[1])
	
	  site.name = fn.name
	
	  var deprecatedfn = eval('(function (' + args + ') {\n'
	    + '"use strict"\n'
	    + 'log.call(deprecate, message, site)\n'
	    + 'return fn.apply(this, arguments)\n'
	    + '})')
	
	  return deprecatedfn
	}
	
	/**
	 * Wrap property in a deprecation message.
	 */
	
	function wrapproperty(obj, prop, message) {
	  if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
	    throw new TypeError('argument obj must be object')
	  }
	
	  var descriptor = Object.getOwnPropertyDescriptor(obj, prop)
	
	  if (!descriptor) {
	    throw new TypeError('must call property on owner object')
	  }
	
	  if (!descriptor.configurable) {
	    throw new TypeError('property must be configurable')
	  }
	
	  var deprecate = this
	  var stack = getStack()
	  var site = callSiteLocation(stack[1])
	
	  // set site name
	  site.name = prop
	
	  // convert data descriptor
	  if ('value' in descriptor) {
	    descriptor = convertDataDescriptorToAccessor(obj, prop, message)
	  }
	
	  var get = descriptor.get
	  var set = descriptor.set
	
	  // wrap getter
	  if (typeof get === 'function') {
	    descriptor.get = function getter() {
	      log.call(deprecate, message, site)
	      return get.apply(this, arguments)
	    }
	  }
	
	  // wrap setter
	  if (typeof set === 'function') {
	    descriptor.set = function setter() {
	      log.call(deprecate, message, site)
	      return set.apply(this, arguments)
	    }
	  }
	
	  Object.defineProperty(obj, prop, descriptor)
	}
	
	/**
	 * Create DeprecationError for deprecation
	 */
	
	function DeprecationError(namespace, message, stack) {
	  var error = new Error()
	  var stackString
	
	  Object.defineProperty(error, 'constructor', {
	    value: DeprecationError
	  })
	
	  Object.defineProperty(error, 'message', {
	    configurable: true,
	    enumerable: false,
	    value: message,
	    writable: true
	  })
	
	  Object.defineProperty(error, 'name', {
	    enumerable: false,
	    configurable: true,
	    value: 'DeprecationError',
	    writable: true
	  })
	
	  Object.defineProperty(error, 'namespace', {
	    configurable: true,
	    enumerable: false,
	    value: namespace,
	    writable: true
	  })
	
	  Object.defineProperty(error, 'stack', {
	    configurable: true,
	    enumerable: false,
	    get: function () {
	      if (stackString !== undefined) {
	        return stackString
	      }
	
	      // prepare stack trace
	      return stackString = createStackString.call(this, stack)
	    },
	    set: function setter(val) {
	      stackString = val
	    }
	  })
	
	  return error
	}


/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * depd
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var Buffer = __webpack_require__(381)
	var EventEmitter = __webpack_require__(260).EventEmitter
	
	/**
	 * Module exports.
	 * @public
	 */
	
	lazyProperty(module.exports, 'bufferConcat', function bufferConcat() {
	  return Buffer.concat || __webpack_require__(382)
	})
	
	lazyProperty(module.exports, 'callSiteToString', function callSiteToString() {
	  var limit = Error.stackTraceLimit
	  var obj = {}
	  var prep = Error.prepareStackTrace
	
	  function prepareObjectStackTrace(obj, stack) {
	    return stack
	  }
	
	  Error.prepareStackTrace = prepareObjectStackTrace
	  Error.stackTraceLimit = 2
	
	  // capture the stack
	  Error.captureStackTrace(obj)
	
	  // slice the stack
	  var stack = obj.stack.slice()
	
	  Error.prepareStackTrace = prep
	  Error.stackTraceLimit = limit
	
	  return stack[0].toString ? toString : __webpack_require__(383)
	})
	
	lazyProperty(module.exports, 'eventListenerCount', function eventListenerCount() {
	  return EventEmitter.listenerCount || __webpack_require__(384)
	})
	
	/**
	 * Define a lazy property.
	 */
	
	function lazyProperty(obj, prop, getter) {
	  function get() {
	    var val = getter()
	
	    Object.defineProperty(obj, prop, {
	      configurable: true,
	      enumerable: true,
	      value: val
	    })
	
	    return val
	  }
	
	  Object.defineProperty(obj, prop, {
	    configurable: true,
	    enumerable: true,
	    get: get
	  })
	}
	
	/**
	 * Call toString() on the obj
	 */
	
	function toString(obj) {
	  return obj.toString()
	}


/***/ },
/* 381 */
/***/ function(module, exports) {

	module.exports = require("buffer");

/***/ },
/* 382 */
/***/ function(module, exports) {

	/*!
	 * depd
	 * Copyright(c) 2014 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module exports.
	 */
	
	module.exports = bufferConcat
	
	/**
	 * Concatenate an array of Buffers.
	 */
	
	function bufferConcat(bufs) {
	  var length = 0
	
	  for (var i = 0, len = bufs.length; i < len; i++) {
	    length += bufs[i].length
	  }
	
	  var buf = new Buffer(length)
	  var pos = 0
	
	  for (var i = 0, len = bufs.length; i < len; i++) {
	    bufs[i].copy(buf, pos)
	    pos += bufs[i].length
	  }
	
	  return buf
	}


/***/ },
/* 383 */
/***/ function(module, exports) {

	/*!
	 * depd
	 * Copyright(c) 2014 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module exports.
	 */
	
	module.exports = callSiteToString
	
	/**
	 * Format a CallSite file location to a string.
	 */
	
	function callSiteFileLocation(callSite) {
	  var fileName
	  var fileLocation = ''
	
	  if (callSite.isNative()) {
	    fileLocation = 'native'
	  } else if (callSite.isEval()) {
	    fileName = callSite.getScriptNameOrSourceURL()
	    if (!fileName) {
	      fileLocation = callSite.getEvalOrigin()
	    }
	  } else {
	    fileName = callSite.getFileName()
	  }
	
	  if (fileName) {
	    fileLocation += fileName
	
	    var lineNumber = callSite.getLineNumber()
	    if (lineNumber != null) {
	      fileLocation += ':' + lineNumber
	
	      var columnNumber = callSite.getColumnNumber()
	      if (columnNumber) {
	        fileLocation += ':' + columnNumber
	      }
	    }
	  }
	
	  return fileLocation || 'unknown source'
	}
	
	/**
	 * Format a CallSite to a string.
	 */
	
	function callSiteToString(callSite) {
	  var addSuffix = true
	  var fileLocation = callSiteFileLocation(callSite)
	  var functionName = callSite.getFunctionName()
	  var isConstructor = callSite.isConstructor()
	  var isMethodCall = !(callSite.isToplevel() || isConstructor)
	  var line = ''
	
	  if (isMethodCall) {
	    var methodName = callSite.getMethodName()
	    var typeName = getConstructorName(callSite)
	
	    if (functionName) {
	      if (typeName && functionName.indexOf(typeName) !== 0) {
	        line += typeName + '.'
	      }
	
	      line += functionName
	
	      if (methodName && functionName.lastIndexOf('.' + methodName) !== functionName.length - methodName.length - 1) {
	        line += ' [as ' + methodName + ']'
	      }
	    } else {
	      line += typeName + '.' + (methodName || '<anonymous>')
	    }
	  } else if (isConstructor) {
	    line += 'new ' + (functionName || '<anonymous>')
	  } else if (functionName) {
	    line += functionName
	  } else {
	    addSuffix = false
	    line += fileLocation
	  }
	
	  if (addSuffix) {
	    line += ' (' + fileLocation + ')'
	  }
	
	  return line
	}
	
	/**
	 * Get constructor name of reviver.
	 */
	
	function getConstructorName(obj) {
	  var receiver = obj.receiver
	  return (receiver.constructor && receiver.constructor.name) || null
	}


/***/ },
/* 384 */
/***/ function(module, exports) {

	/*!
	 * depd
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = eventListenerCount
	
	/**
	 * Get the count of listeners on an event emitter of a specific type.
	 */
	
	function eventListenerCount(emitter, type) {
	  return emitter.listeners(type).length
	}


/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * parseurl
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2014 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module dependencies.
	 */
	
	var url = __webpack_require__(333)
	var parse = url.parse
	var Url = url.Url
	
	/**
	 * Pattern for a simple path case.
	 * See: https://github.com/joyent/node/pull/7878
	 */
	
	var simplePathRegExp = /^(\/\/?(?!\/)[^\?#\s]*)(\?[^#\s]*)?$/
	
	/**
	 * Exports.
	 */
	
	module.exports = parseurl
	module.exports.original = originalurl
	
	/**
	 * Parse the `req` url with memoization.
	 *
	 * @param {ServerRequest} req
	 * @return {Object}
	 * @api public
	 */
	
	function parseurl(req) {
	  var url = req.url
	
	  if (url === undefined) {
	    // URL is undefined
	    return undefined
	  }
	
	  var parsed = req._parsedUrl
	
	  if (fresh(url, parsed)) {
	    // Return cached URL parse
	    return parsed
	  }
	
	  // Parse the URL
	  parsed = fastparse(url)
	  parsed._raw = url
	
	  return req._parsedUrl = parsed
	};
	
	/**
	 * Parse the `req` original url with fallback and memoization.
	 *
	 * @param {ServerRequest} req
	 * @return {Object}
	 * @api public
	 */
	
	function originalurl(req) {
	  var url = req.originalUrl
	
	  if (typeof url !== 'string') {
	    // Fallback
	    return parseurl(req)
	  }
	
	  var parsed = req._parsedOriginalUrl
	
	  if (fresh(url, parsed)) {
	    // Return cached URL parse
	    return parsed
	  }
	
	  // Parse the URL
	  parsed = fastparse(url)
	  parsed._raw = url
	
	  return req._parsedOriginalUrl = parsed
	};
	
	/**
	 * Parse the `str` url with fast-path short-cut.
	 *
	 * @param {string} str
	 * @return {Object}
	 * @api private
	 */
	
	function fastparse(str) {
	  // Try fast path regexp
	  // See: https://github.com/joyent/node/pull/7878
	  var simplePath = typeof str === 'string' && simplePathRegExp.exec(str)
	
	  // Construct simple URL
	  if (simplePath) {
	    var pathname = simplePath[1]
	    var search = simplePath[2] || null
	    var url = Url !== undefined
	      ? new Url()
	      : {}
	    url.path = str
	    url.href = str
	    url.pathname = pathname
	    url.search = search
	    url.query = search && search.substr(1)
	
	    return url
	  }
	
	  return parse(str)
	}
	
	/**
	 * Determine if parsed is still fresh for url.
	 *
	 * @param {string} url
	 * @param {object} parsedUrl
	 * @return {boolean}
	 * @api private
	 */
	
	function fresh(url, parsedUrl) {
	  return typeof parsedUrl === 'object'
	    && parsedUrl !== null
	    && (Url === undefined || parsedUrl instanceof Url)
	    && parsedUrl._raw === url
	}


/***/ },
/* 386 */
/***/ function(module, exports) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Initialization middleware, exposing the
	 * request and response to each other, as well
	 * as defaulting the X-Powered-By header field.
	 *
	 * @param {Function} app
	 * @return {Function}
	 * @api private
	 */
	
	exports.init = function(app){
	  return function expressInit(req, res, next){
	    if (app.enabled('x-powered-by')) res.setHeader('X-Powered-By', 'Express');
	    req.res = res;
	    res.req = req;
	    req.next = next;
	
	    req.__proto__ = app.request;
	    res.__proto__ = app.response;
	
	    res.locals = res.locals || Object.create(null);
	
	    next();
	  };
	};
	


/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Module dependencies.
	 */
	
	var parseUrl = __webpack_require__(385);
	var qs = __webpack_require__(388);
	
	/**
	 * @param {Object} options
	 * @return {Function}
	 * @api public
	 */
	
	module.exports = function query(options) {
	  var opts = Object.create(options || null);
	  var queryparse = qs.parse;
	
	  if (typeof options === 'function') {
	    queryparse = options;
	    opts = undefined;
	  }
	
	  if (opts !== undefined && opts.allowPrototypes === undefined) {
	    // back-compat for qs module
	    opts.allowPrototypes = true;
	  }
	
	  return function query(req, res, next){
	    if (!req.query) {
	      var val = parseUrl(req).query;
	      req.query = queryparse(val, opts);
	    }
	
	    next();
	  };
	};


/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Stringify = __webpack_require__(389);
	var Parse = __webpack_require__(391);
	
	module.exports = {
	    stringify: Stringify,
	    parse: Parse
	};


/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Utils = __webpack_require__(390);
	
	var arrayPrefixGenerators = {
	    brackets: function brackets(prefix) {
	        return prefix + '[]';
	    },
	    indices: function indices(prefix, key) {
	        return prefix + '[' + key + ']';
	    },
	    repeat: function repeat(prefix) {
	        return prefix;
	    }
	};
	
	var defaults = {
	    delimiter: '&',
	    strictNullHandling: false,
	    skipNulls: false,
	    encode: true,
	    encoder: Utils.encode
	};
	
	var stringify = function stringify(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots) {
	    var obj = object;
	    if (typeof filter === 'function') {
	        obj = filter(prefix, obj);
	    } else if (obj instanceof Date) {
	        obj = obj.toISOString();
	    } else if (obj === null) {
	        if (strictNullHandling) {
	            return encoder ? encoder(prefix) : prefix;
	        }
	
	        obj = '';
	    }
	
	    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || Utils.isBuffer(obj)) {
	        if (encoder) {
	            return [encoder(prefix) + '=' + encoder(obj)];
	        }
	        return [prefix + '=' + String(obj)];
	    }
	
	    var values = [];
	
	    if (typeof obj === 'undefined') {
	        return values;
	    }
	
	    var objKeys;
	    if (Array.isArray(filter)) {
	        objKeys = filter;
	    } else {
	        var keys = Object.keys(obj);
	        objKeys = sort ? keys.sort(sort) : keys;
	    }
	
	    for (var i = 0; i < objKeys.length; ++i) {
	        var key = objKeys[i];
	
	        if (skipNulls && obj[key] === null) {
	            continue;
	        }
	
	        if (Array.isArray(obj)) {
	            values = values.concat(stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots));
	        } else {
	            values = values.concat(stringify(obj[key], prefix + (allowDots ? '.' + key : '[' + key + ']'), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots));
	        }
	    }
	
	    return values;
	};
	
	module.exports = function (object, opts) {
	    var obj = object;
	    var options = opts || {};
	    var delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;
	    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
	    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;
	    var encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;
	    var encoder = encode ? (typeof options.encoder === 'function' ? options.encoder : defaults.encoder) : null;
	    var sort = typeof options.sort === 'function' ? options.sort : null;
	    var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
	    var objKeys;
	    var filter;
	
	    if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {
	        throw new TypeError('Encoder has to be a function.');
	    }
	
	    if (typeof options.filter === 'function') {
	        filter = options.filter;
	        obj = filter('', obj);
	    } else if (Array.isArray(options.filter)) {
	        objKeys = filter = options.filter;
	    }
	
	    var keys = [];
	
	    if (typeof obj !== 'object' || obj === null) {
	        return '';
	    }
	
	    var arrayFormat;
	    if (options.arrayFormat in arrayPrefixGenerators) {
	        arrayFormat = options.arrayFormat;
	    } else if ('indices' in options) {
	        arrayFormat = options.indices ? 'indices' : 'repeat';
	    } else {
	        arrayFormat = 'indices';
	    }
	
	    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
	
	    if (!objKeys) {
	        objKeys = Object.keys(obj);
	    }
	
	    if (sort) {
	        objKeys.sort(sort);
	    }
	
	    for (var i = 0; i < objKeys.length; ++i) {
	        var key = objKeys[i];
	
	        if (skipNulls && obj[key] === null) {
	            continue;
	        }
	
	        keys = keys.concat(stringify(obj[key], key, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots));
	    }
	
	    return keys.join(delimiter);
	};


/***/ },
/* 390 */
/***/ function(module, exports) {

	'use strict';
	
	var hexTable = (function () {
	    var array = new Array(256);
	    for (var i = 0; i < 256; ++i) {
	        array[i] = '%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase();
	    }
	
	    return array;
	}());
	
	exports.arrayToObject = function (source, options) {
	    var obj = options.plainObjects ? Object.create(null) : {};
	    for (var i = 0; i < source.length; ++i) {
	        if (typeof source[i] !== 'undefined') {
	            obj[i] = source[i];
	        }
	    }
	
	    return obj;
	};
	
	exports.merge = function (target, source, options) {
	    if (!source) {
	        return target;
	    }
	
	    if (typeof source !== 'object') {
	        if (Array.isArray(target)) {
	            target.push(source);
	        } else if (typeof target === 'object') {
	            target[source] = true;
	        } else {
	            return [target, source];
	        }
	
	        return target;
	    }
	
	    if (typeof target !== 'object') {
	        return [target].concat(source);
	    }
	
	    var mergeTarget = target;
	    if (Array.isArray(target) && !Array.isArray(source)) {
	        mergeTarget = exports.arrayToObject(target, options);
	    }
	
	    return Object.keys(source).reduce(function (acc, key) {
	        var value = source[key];
	
	        if (Object.prototype.hasOwnProperty.call(acc, key)) {
	            acc[key] = exports.merge(acc[key], value, options);
	        } else {
	            acc[key] = value;
	        }
	        return acc;
	    }, mergeTarget);
	};
	
	exports.decode = function (str) {
	    try {
	        return decodeURIComponent(str.replace(/\+/g, ' '));
	    } catch (e) {
	        return str;
	    }
	};
	
	exports.encode = function (str) {
	    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
	    // It has been adapted here for stricter adherence to RFC 3986
	    if (str.length === 0) {
	        return str;
	    }
	
	    var string = typeof str === 'string' ? str : String(str);
	
	    var out = '';
	    for (var i = 0; i < string.length; ++i) {
	        var c = string.charCodeAt(i);
	
	        if (
	            c === 0x2D || // -
	            c === 0x2E || // .
	            c === 0x5F || // _
	            c === 0x7E || // ~
	            (c >= 0x30 && c <= 0x39) || // 0-9
	            (c >= 0x41 && c <= 0x5A) || // a-z
	            (c >= 0x61 && c <= 0x7A) // A-Z
	        ) {
	            out += string.charAt(i);
	            continue;
	        }
	
	        if (c < 0x80) {
	            out = out + hexTable[c];
	            continue;
	        }
	
	        if (c < 0x800) {
	            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
	            continue;
	        }
	
	        if (c < 0xD800 || c >= 0xE000) {
	            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
	            continue;
	        }
	
	        i += 1;
	        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
	        out += hexTable[0xF0 | (c >> 18)] + hexTable[0x80 | ((c >> 12) & 0x3F)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)];
	    }
	
	    return out;
	};
	
	exports.compact = function (obj, references) {
	    if (typeof obj !== 'object' || obj === null) {
	        return obj;
	    }
	
	    var refs = references || [];
	    var lookup = refs.indexOf(obj);
	    if (lookup !== -1) {
	        return refs[lookup];
	    }
	
	    refs.push(obj);
	
	    if (Array.isArray(obj)) {
	        var compacted = [];
	
	        for (var i = 0; i < obj.length; ++i) {
	            if (obj[i] && typeof obj[i] === 'object') {
	                compacted.push(exports.compact(obj[i], refs));
	            } else if (typeof obj[i] !== 'undefined') {
	                compacted.push(obj[i]);
	            }
	        }
	
	        return compacted;
	    }
	
	    var keys = Object.keys(obj);
	    for (var j = 0; j < keys.length; ++j) {
	        var key = keys[j];
	        obj[key] = exports.compact(obj[key], refs);
	    }
	
	    return obj;
	};
	
	exports.isRegExp = function (obj) {
	    return Object.prototype.toString.call(obj) === '[object RegExp]';
	};
	
	exports.isBuffer = function (obj) {
	    if (obj === null || typeof obj === 'undefined') {
	        return false;
	    }
	
	    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
	};


/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Utils = __webpack_require__(390);
	
	var defaults = {
	    delimiter: '&',
	    depth: 5,
	    arrayLimit: 20,
	    parameterLimit: 1000,
	    strictNullHandling: false,
	    plainObjects: false,
	    allowPrototypes: false,
	    allowDots: false,
	    decoder: Utils.decode
	};
	
	var parseValues = function parseValues(str, options) {
	    var obj = {};
	    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);
	
	    for (var i = 0; i < parts.length; ++i) {
	        var part = parts[i];
	        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;
	
	        if (pos === -1) {
	            obj[options.decoder(part)] = '';
	
	            if (options.strictNullHandling) {
	                obj[options.decoder(part)] = null;
	            }
	        } else {
	            var key = options.decoder(part.slice(0, pos));
	            var val = options.decoder(part.slice(pos + 1));
	
	            if (Object.prototype.hasOwnProperty.call(obj, key)) {
	                obj[key] = [].concat(obj[key]).concat(val);
	            } else {
	                obj[key] = val;
	            }
	        }
	    }
	
	    return obj;
	};
	
	var parseObject = function parseObject(chain, val, options) {
	    if (!chain.length) {
	        return val;
	    }
	
	    var root = chain.shift();
	
	    var obj;
	    if (root === '[]') {
	        obj = [];
	        obj = obj.concat(parseObject(chain, val, options));
	    } else {
	        obj = options.plainObjects ? Object.create(null) : {};
	        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
	        var index = parseInt(cleanRoot, 10);
	        if (
	            !isNaN(index) &&
	            root !== cleanRoot &&
	            String(index) === cleanRoot &&
	            index >= 0 &&
	            (options.parseArrays && index <= options.arrayLimit)
	        ) {
	            obj = [];
	            obj[index] = parseObject(chain, val, options);
	        } else {
	            obj[cleanRoot] = parseObject(chain, val, options);
	        }
	    }
	
	    return obj;
	};
	
	var parseKeys = function parseKeys(givenKey, val, options) {
	    if (!givenKey) {
	        return;
	    }
	
	    // Transform dot notation to bracket notation
	    var key = options.allowDots ? givenKey.replace(/\.([^\.\[]+)/g, '[$1]') : givenKey;
	
	    // The regex chunks
	
	    var parent = /^([^\[\]]*)/;
	    var child = /(\[[^\[\]]*\])/g;
	
	    // Get the parent
	
	    var segment = parent.exec(key);
	
	    // Stash the parent if it exists
	
	    var keys = [];
	    if (segment[1]) {
	        // If we aren't using plain objects, optionally prefix keys
	        // that would overwrite object prototype properties
	        if (!options.plainObjects && Object.prototype.hasOwnProperty(segment[1])) {
	            if (!options.allowPrototypes) {
	                return;
	            }
	        }
	
	        keys.push(segment[1]);
	    }
	
	    // Loop through children appending to the array until we hit depth
	
	    var i = 0;
	    while ((segment = child.exec(key)) !== null && i < options.depth) {
	        i += 1;
	        if (!options.plainObjects && Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ''))) {
	            if (!options.allowPrototypes) {
	                continue;
	            }
	        }
	        keys.push(segment[1]);
	    }
	
	    // If there's a remainder, just add whatever is left
	
	    if (segment) {
	        keys.push('[' + key.slice(segment.index) + ']');
	    }
	
	    return parseObject(keys, val, options);
	};
	
	module.exports = function (str, opts) {
	    var options = opts || {};
	
	    if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {
	        throw new TypeError('Decoder has to be a function.');
	    }
	
	    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;
	    options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;
	    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;
	    options.parseArrays = options.parseArrays !== false;
	    options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;
	    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults.allowDots;
	    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;
	    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;
	    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;
	    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
	
	    if (str === '' || str === null || typeof str === 'undefined') {
	        return options.plainObjects ? Object.create(null) : {};
	    }
	
	    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
	    var obj = options.plainObjects ? Object.create(null) : {};
	
	    // Iterate over the keys and setup the new object
	
	    var keys = Object.keys(tempObj);
	    for (var i = 0; i < keys.length; ++i) {
	        var key = keys[i];
	        var newObj = parseKeys(key, tempObj[key], options);
	        obj = Utils.merge(obj, newObj, options);
	    }
	
	    return Utils.compact(obj);
	};


/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var debug = __webpack_require__(361)('express:view');
	var path = __webpack_require__(342);
	var fs = __webpack_require__(261);
	var utils = __webpack_require__(393);
	
	/**
	 * Module variables.
	 * @private
	 */
	
	var dirname = path.dirname;
	var basename = path.basename;
	var extname = path.extname;
	var join = path.join;
	var resolve = path.resolve;
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = View;
	
	/**
	 * Initialize a new `View` with the given `name`.
	 *
	 * Options:
	 *
	 *   - `defaultEngine` the default template engine name
	 *   - `engines` template engine require() cache
	 *   - `root` root path for view lookup
	 *
	 * @param {string} name
	 * @param {object} options
	 * @public
	 */
	
	function View(name, options) {
	  var opts = options || {};
	
	  this.defaultEngine = opts.defaultEngine;
	  this.ext = extname(name);
	  this.name = name;
	  this.root = opts.root;
	
	  if (!this.ext && !this.defaultEngine) {
	    throw new Error('No default engine was specified and no extension was provided.');
	  }
	
	  var fileName = name;
	
	  if (!this.ext) {
	    // get extension from default engine name
	    this.ext = this.defaultEngine[0] !== '.'
	      ? '.' + this.defaultEngine
	      : this.defaultEngine;
	
	    fileName += this.ext;
	  }
	
	  if (!opts.engines[this.ext]) {
	    // load engine
	    opts.engines[this.ext] = __webpack_require__(413)(this.ext.substr(1)).__express;
	  }
	
	  // store loaded engine
	  this.engine = opts.engines[this.ext];
	
	  // lookup path
	  this.path = this.lookup(fileName);
	}
	
	/**
	 * Lookup view by the given `name`
	 *
	 * @param {string} name
	 * @private
	 */
	
	View.prototype.lookup = function lookup(name) {
	  var path;
	  var roots = [].concat(this.root);
	
	  debug('lookup "%s"', name);
	
	  for (var i = 0; i < roots.length && !path; i++) {
	    var root = roots[i];
	
	    // resolve the path
	    var loc = resolve(root, name);
	    var dir = dirname(loc);
	    var file = basename(loc);
	
	    // resolve the file
	    path = this.resolve(dir, file);
	  }
	
	  return path;
	};
	
	/**
	 * Render with the given options.
	 *
	 * @param {object} options
	 * @param {function} callback
	 * @private
	 */
	
	View.prototype.render = function render(options, callback) {
	  debug('render "%s"', this.path);
	  this.engine(this.path, options, callback);
	};
	
	/**
	 * Resolve the file within the given directory.
	 *
	 * @param {string} dir
	 * @param {string} file
	 * @private
	 */
	
	View.prototype.resolve = function resolve(dir, file) {
	  var ext = this.ext;
	
	  // <path>.<ext>
	  var path = join(dir, file);
	  var stat = tryStat(path);
	
	  if (stat && stat.isFile()) {
	    return path;
	  }
	
	  // <path>/index.<ext>
	  path = join(dir, basename(file, ext), 'index' + ext);
	  stat = tryStat(path);
	
	  if (stat && stat.isFile()) {
	    return path;
	  }
	};
	
	/**
	 * Return a stat, maybe.
	 *
	 * @param {string} path
	 * @return {fs.Stats}
	 * @private
	 */
	
	function tryStat(path) {
	  debug('stat "%s"', path);
	
	  try {
	    return fs.statSync(path);
	  } catch (e) {
	    return undefined;
	  }
	}


/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Module dependencies.
	 * @api private
	 */
	
	var contentDisposition = __webpack_require__(394);
	var contentType = __webpack_require__(395);
	var deprecate = __webpack_require__(379)('express');
	var flatten = __webpack_require__(374);
	var mime = __webpack_require__(396).mime;
	var basename = __webpack_require__(342).basename;
	var etag = __webpack_require__(403);
	var proxyaddr = __webpack_require__(408);
	var qs = __webpack_require__(388);
	var querystring = __webpack_require__(412);
	
	/**
	 * Return strong ETag for `body`.
	 *
	 * @param {String|Buffer} body
	 * @param {String} [encoding]
	 * @return {String}
	 * @api private
	 */
	
	exports.etag = function (body, encoding) {
	  var buf = !Buffer.isBuffer(body)
	    ? new Buffer(body, encoding)
	    : body;
	
	  return etag(buf, {weak: false});
	};
	
	/**
	 * Return weak ETag for `body`.
	 *
	 * @param {String|Buffer} body
	 * @param {String} [encoding]
	 * @return {String}
	 * @api private
	 */
	
	exports.wetag = function wetag(body, encoding){
	  var buf = !Buffer.isBuffer(body)
	    ? new Buffer(body, encoding)
	    : body;
	
	  return etag(buf, {weak: true});
	};
	
	/**
	 * Check if `path` looks absolute.
	 *
	 * @param {String} path
	 * @return {Boolean}
	 * @api private
	 */
	
	exports.isAbsolute = function(path){
	  if ('/' === path[0]) return true;
	  if (':' === path[1] && ('\\' === path[2] || '/' === path[2])) return true; // Windows device path
	  if ('\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path
	};
	
	/**
	 * Flatten the given `arr`.
	 *
	 * @param {Array} arr
	 * @return {Array}
	 * @api private
	 */
	
	exports.flatten = deprecate.function(flatten,
	  'utils.flatten: use array-flatten npm module instead');
	
	/**
	 * Normalize the given `type`, for example "html" becomes "text/html".
	 *
	 * @param {String} type
	 * @return {Object}
	 * @api private
	 */
	
	exports.normalizeType = function(type){
	  return ~type.indexOf('/')
	    ? acceptParams(type)
	    : { value: mime.lookup(type), params: {} };
	};
	
	/**
	 * Normalize `types`, for example "html" becomes "text/html".
	 *
	 * @param {Array} types
	 * @return {Array}
	 * @api private
	 */
	
	exports.normalizeTypes = function(types){
	  var ret = [];
	
	  for (var i = 0; i < types.length; ++i) {
	    ret.push(exports.normalizeType(types[i]));
	  }
	
	  return ret;
	};
	
	/**
	 * Generate Content-Disposition header appropriate for the filename.
	 * non-ascii filenames are urlencoded and a filename* parameter is added
	 *
	 * @param {String} filename
	 * @return {String}
	 * @api private
	 */
	
	exports.contentDisposition = deprecate.function(contentDisposition,
	  'utils.contentDisposition: use content-disposition npm module instead');
	
	/**
	 * Parse accept params `str` returning an
	 * object with `.value`, `.quality` and `.params`.
	 * also includes `.originalIndex` for stable sorting
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */
	
	function acceptParams(str, index) {
	  var parts = str.split(/ *; */);
	  var ret = { value: parts[0], quality: 1, params: {}, originalIndex: index };
	
	  for (var i = 1; i < parts.length; ++i) {
	    var pms = parts[i].split(/ *= */);
	    if ('q' === pms[0]) {
	      ret.quality = parseFloat(pms[1]);
	    } else {
	      ret.params[pms[0]] = pms[1];
	    }
	  }
	
	  return ret;
	}
	
	/**
	 * Compile "etag" value to function.
	 *
	 * @param  {Boolean|String|Function} val
	 * @return {Function}
	 * @api private
	 */
	
	exports.compileETag = function(val) {
	  var fn;
	
	  if (typeof val === 'function') {
	    return val;
	  }
	
	  switch (val) {
	    case true:
	      fn = exports.wetag;
	      break;
	    case false:
	      break;
	    case 'strong':
	      fn = exports.etag;
	      break;
	    case 'weak':
	      fn = exports.wetag;
	      break;
	    default:
	      throw new TypeError('unknown value for etag function: ' + val);
	  }
	
	  return fn;
	}
	
	/**
	 * Compile "query parser" value to function.
	 *
	 * @param  {String|Function} val
	 * @return {Function}
	 * @api private
	 */
	
	exports.compileQueryParser = function compileQueryParser(val) {
	  var fn;
	
	  if (typeof val === 'function') {
	    return val;
	  }
	
	  switch (val) {
	    case true:
	      fn = querystring.parse;
	      break;
	    case false:
	      fn = newObject;
	      break;
	    case 'extended':
	      fn = parseExtendedQueryString;
	      break;
	    case 'simple':
	      fn = querystring.parse;
	      break;
	    default:
	      throw new TypeError('unknown value for query parser function: ' + val);
	  }
	
	  return fn;
	}
	
	/**
	 * Compile "proxy trust" value to function.
	 *
	 * @param  {Boolean|String|Number|Array|Function} val
	 * @return {Function}
	 * @api private
	 */
	
	exports.compileTrust = function(val) {
	  if (typeof val === 'function') return val;
	
	  if (val === true) {
	    // Support plain true/false
	    return function(){ return true };
	  }
	
	  if (typeof val === 'number') {
	    // Support trusting hop count
	    return function(a, i){ return i < val };
	  }
	
	  if (typeof val === 'string') {
	    // Support comma-separated values
	    val = val.split(/ *, */);
	  }
	
	  return proxyaddr.compile(val || []);
	}
	
	/**
	 * Set the charset in a given Content-Type string.
	 *
	 * @param {String} type
	 * @param {String} charset
	 * @return {String}
	 * @api private
	 */
	
	exports.setCharset = function setCharset(type, charset) {
	  if (!type || !charset) {
	    return type;
	  }
	
	  // parse type
	  var parsed = contentType.parse(type);
	
	  // set charset
	  parsed.parameters.charset = charset;
	
	  // format type
	  return contentType.format(parsed);
	};
	
	/**
	 * Parse an extended query string with qs.
	 *
	 * @return {Object}
	 * @private
	 */
	
	function parseExtendedQueryString(str) {
	  return qs.parse(str, {
	    allowPrototypes: true
	  });
	}
	
	/**
	 * Return new empty object.
	 *
	 * @return {Object}
	 * @api private
	 */
	
	function newObject() {
	  return {};
	}


/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * content-disposition
	 * Copyright(c) 2014 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module exports.
	 */
	
	module.exports = contentDisposition
	module.exports.parse = parse
	
	/**
	 * Module dependencies.
	 */
	
	var basename = __webpack_require__(342).basename
	
	/**
	 * RegExp to match non attr-char, *after* encodeURIComponent (i.e. not including "%")
	 */
	
	var encodeUriAttrCharRegExp = /[\x00-\x20"'\(\)*,\/:;<=>?@\[\\\]\{\}\x7f]/g
	
	/**
	 * RegExp to match percent encoding escape.
	 */
	
	var hexEscapeRegExp = /%[0-9A-Fa-f]{2}/
	var hexEscapeReplaceRegExp = /%([0-9A-Fa-f]{2})/g
	
	/**
	 * RegExp to match non-latin1 characters.
	 */
	
	var nonLatin1RegExp = /[^\x20-\x7e\xa0-\xff]/g
	
	/**
	 * RegExp to match quoted-pair in RFC 2616
	 *
	 * quoted-pair = "\" CHAR
	 * CHAR        = <any US-ASCII character (octets 0 - 127)>
	 */
	
	var qescRegExp = /\\([\u0000-\u007f])/g;
	
	/**
	 * RegExp to match chars that must be quoted-pair in RFC 2616
	 */
	
	var quoteRegExp = /([\\"])/g
	
	/**
	 * RegExp for various RFC 2616 grammar
	 *
	 * parameter     = token "=" ( token | quoted-string )
	 * token         = 1*<any CHAR except CTLs or separators>
	 * separators    = "(" | ")" | "<" | ">" | "@"
	 *               | "," | ";" | ":" | "\" | <">
	 *               | "/" | "[" | "]" | "?" | "="
	 *               | "{" | "}" | SP | HT
	 * quoted-string = ( <"> *(qdtext | quoted-pair ) <"> )
	 * qdtext        = <any TEXT except <">>
	 * quoted-pair   = "\" CHAR
	 * CHAR          = <any US-ASCII character (octets 0 - 127)>
	 * TEXT          = <any OCTET except CTLs, but including LWS>
	 * LWS           = [CRLF] 1*( SP | HT )
	 * CRLF          = CR LF
	 * CR            = <US-ASCII CR, carriage return (13)>
	 * LF            = <US-ASCII LF, linefeed (10)>
	 * SP            = <US-ASCII SP, space (32)>
	 * HT            = <US-ASCII HT, horizontal-tab (9)>
	 * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>
	 * OCTET         = <any 8-bit sequence of data>
	 */
	
	var paramRegExp = /; *([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *= *("(?:[ !\x23-\x5b\x5d-\x7e\x80-\xff]|\\[\x20-\x7e])*"|[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) */g
	var textRegExp = /^[\x20-\x7e\x80-\xff]+$/
	var tokenRegExp = /^[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+$/
	
	/**
	 * RegExp for various RFC 5987 grammar
	 *
	 * ext-value     = charset  "'" [ language ] "'" value-chars
	 * charset       = "UTF-8" / "ISO-8859-1" / mime-charset
	 * mime-charset  = 1*mime-charsetc
	 * mime-charsetc = ALPHA / DIGIT
	 *               / "!" / "#" / "$" / "%" / "&"
	 *               / "+" / "-" / "^" / "_" / "`"
	 *               / "{" / "}" / "~"
	 * language      = ( 2*3ALPHA [ extlang ] )
	 *               / 4ALPHA
	 *               / 5*8ALPHA
	 * extlang       = *3( "-" 3ALPHA )
	 * value-chars   = *( pct-encoded / attr-char )
	 * pct-encoded   = "%" HEXDIG HEXDIG
	 * attr-char     = ALPHA / DIGIT
	 *               / "!" / "#" / "$" / "&" / "+" / "-" / "."
	 *               / "^" / "_" / "`" / "|" / "~"
	 */
	
	var extValueRegExp = /^([A-Za-z0-9!#$%&+\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+\-\.^_`|~])+)$/
	
	/**
	 * RegExp for various RFC 6266 grammar
	 *
	 * disposition-type = "inline" | "attachment" | disp-ext-type
	 * disp-ext-type    = token
	 * disposition-parm = filename-parm | disp-ext-parm
	 * filename-parm    = "filename" "=" value
	 *                  | "filename*" "=" ext-value
	 * disp-ext-parm    = token "=" value
	 *                  | ext-token "=" ext-value
	 * ext-token        = <the characters in token, followed by "*">
	 */
	
	var dispositionTypeRegExp = /^([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *(?:$|;)/
	
	/**
	 * Create an attachment Content-Disposition header.
	 *
	 * @param {string} [filename]
	 * @param {object} [options]
	 * @param {string} [options.type=attachment]
	 * @param {string|boolean} [options.fallback=true]
	 * @return {string}
	 * @api public
	 */
	
	function contentDisposition(filename, options) {
	  var opts = options || {}
	
	  // get type
	  var type = opts.type || 'attachment'
	
	  // get parameters
	  var params = createparams(filename, opts.fallback)
	
	  // format into string
	  return format(new ContentDisposition(type, params))
	}
	
	/**
	 * Create parameters object from filename and fallback.
	 *
	 * @param {string} [filename]
	 * @param {string|boolean} [fallback=true]
	 * @return {object}
	 * @api private
	 */
	
	function createparams(filename, fallback) {
	  if (filename === undefined) {
	    return
	  }
	
	  var params = {}
	
	  if (typeof filename !== 'string') {
	    throw new TypeError('filename must be a string')
	  }
	
	  // fallback defaults to true
	  if (fallback === undefined) {
	    fallback = true
	  }
	
	  if (typeof fallback !== 'string' && typeof fallback !== 'boolean') {
	    throw new TypeError('fallback must be a string or boolean')
	  }
	
	  if (typeof fallback === 'string' && nonLatin1RegExp.test(fallback)) {
	    throw new TypeError('fallback must be ISO-8859-1 string')
	  }
	
	  // restrict to file base name
	  var name = basename(filename)
	
	  // determine if name is suitable for quoted string
	  var isQuotedString = textRegExp.test(name)
	
	  // generate fallback name
	  var fallbackName = typeof fallback !== 'string'
	    ? fallback && getlatin1(name)
	    : basename(fallback)
	  var hasFallback = typeof fallbackName === 'string' && fallbackName !== name
	
	  // set extended filename parameter
	  if (hasFallback || !isQuotedString || hexEscapeRegExp.test(name)) {
	    params['filename*'] = name
	  }
	
	  // set filename parameter
	  if (isQuotedString || hasFallback) {
	    params.filename = hasFallback
	      ? fallbackName
	      : name
	  }
	
	  return params
	}
	
	/**
	 * Format object to Content-Disposition header.
	 *
	 * @param {object} obj
	 * @param {string} obj.type
	 * @param {object} [obj.parameters]
	 * @return {string}
	 * @api private
	 */
	
	function format(obj) {
	  var parameters = obj.parameters
	  var type = obj.type
	
	  if (!type || typeof type !== 'string' || !tokenRegExp.test(type)) {
	    throw new TypeError('invalid type')
	  }
	
	  // start with normalized type
	  var string = String(type).toLowerCase()
	
	  // append parameters
	  if (parameters && typeof parameters === 'object') {
	    var param
	    var params = Object.keys(parameters).sort()
	
	    for (var i = 0; i < params.length; i++) {
	      param = params[i]
	
	      var val = param.substr(-1) === '*'
	        ? ustring(parameters[param])
	        : qstring(parameters[param])
	
	      string += '; ' + param + '=' + val
	    }
	  }
	
	  return string
	}
	
	/**
	 * Decode a RFC 6987 field value (gracefully).
	 *
	 * @param {string} str
	 * @return {string}
	 * @api private
	 */
	
	function decodefield(str) {
	  var match = extValueRegExp.exec(str)
	
	  if (!match) {
	    throw new TypeError('invalid extended field value')
	  }
	
	  var charset = match[1].toLowerCase()
	  var encoded = match[2]
	  var value
	
	  // to binary string
	  var binary = encoded.replace(hexEscapeReplaceRegExp, pdecode)
	
	  switch (charset) {
	    case 'iso-8859-1':
	      value = getlatin1(binary)
	      break
	    case 'utf-8':
	      value = new Buffer(binary, 'binary').toString('utf8')
	      break
	    default:
	      throw new TypeError('unsupported charset in extended field')
	  }
	
	  return value
	}
	
	/**
	 * Get ISO-8859-1 version of string.
	 *
	 * @param {string} val
	 * @return {string}
	 * @api private
	 */
	
	function getlatin1(val) {
	  // simple Unicode -> ISO-8859-1 transformation
	  return String(val).replace(nonLatin1RegExp, '?')
	}
	
	/**
	 * Parse Content-Disposition header string.
	 *
	 * @param {string} string
	 * @return {object}
	 * @api private
	 */
	
	function parse(string) {
	  if (!string || typeof string !== 'string') {
	    throw new TypeError('argument string is required')
	  }
	
	  var match = dispositionTypeRegExp.exec(string)
	
	  if (!match) {
	    throw new TypeError('invalid type format')
	  }
	
	  // normalize type
	  var index = match[0].length
	  var type = match[1].toLowerCase()
	
	  var key
	  var names = []
	  var params = {}
	  var value
	
	  // calculate index to start at
	  index = paramRegExp.lastIndex = match[0].substr(-1) === ';'
	    ? index - 1
	    : index
	
	  // match parameters
	  while (match = paramRegExp.exec(string)) {
	    if (match.index !== index) {
	      throw new TypeError('invalid parameter format')
	    }
	
	    index += match[0].length
	    key = match[1].toLowerCase()
	    value = match[2]
	
	    if (names.indexOf(key) !== -1) {
	      throw new TypeError('invalid duplicate parameter')
	    }
	
	    names.push(key)
	
	    if (key.indexOf('*') + 1 === key.length) {
	      // decode extended value
	      key = key.slice(0, -1)
	      value = decodefield(value)
	
	      // overwrite existing value
	      params[key] = value
	      continue
	    }
	
	    if (typeof params[key] === 'string') {
	      continue
	    }
	
	    if (value[0] === '"') {
	      // remove quotes and escapes
	      value = value
	        .substr(1, value.length - 2)
	        .replace(qescRegExp, '$1')
	    }
	
	    params[key] = value
	  }
	
	  if (index !== -1 && index !== string.length) {
	    throw new TypeError('invalid parameter format')
	  }
	
	  return new ContentDisposition(type, params)
	}
	
	/**
	 * Percent decode a single character.
	 *
	 * @param {string} str
	 * @param {string} hex
	 * @return {string}
	 * @api private
	 */
	
	function pdecode(str, hex) {
	  return String.fromCharCode(parseInt(hex, 16))
	}
	
	/**
	 * Percent encode a single character.
	 *
	 * @param {string} char
	 * @return {string}
	 * @api private
	 */
	
	function pencode(char) {
	  var hex = String(char)
	    .charCodeAt(0)
	    .toString(16)
	    .toUpperCase()
	  return hex.length === 1
	    ? '%0' + hex
	    : '%' + hex
	}
	
	/**
	 * Quote a string for HTTP.
	 *
	 * @param {string} val
	 * @return {string}
	 * @api private
	 */
	
	function qstring(val) {
	  var str = String(val)
	
	  return '"' + str.replace(quoteRegExp, '\\$1') + '"'
	}
	
	/**
	 * Encode a Unicode string for HTTP (RFC 5987).
	 *
	 * @param {string} val
	 * @return {string}
	 * @api private
	 */
	
	function ustring(val) {
	  var str = String(val)
	
	  // percent encode as UTF-8
	  var encoded = encodeURIComponent(str)
	    .replace(encodeUriAttrCharRegExp, pencode)
	
	  return 'UTF-8\'\'' + encoded
	}
	
	/**
	 * Class for parsed Content-Disposition header for v8 optimization
	 */
	
	function ContentDisposition(type, parameters) {
	  this.type = type
	  this.parameters = parameters
	}


/***/ },
/* 395 */
/***/ function(module, exports) {

	/*!
	 * content-type
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * RegExp to match *( ";" parameter ) in RFC 7231 sec 3.1.1.1
	 *
	 * parameter     = token "=" ( token / quoted-string )
	 * token         = 1*tchar
	 * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
	 *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
	 *               / DIGIT / ALPHA
	 *               ; any VCHAR, except delimiters
	 * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE
	 * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text
	 * obs-text      = %x80-FF
	 * quoted-pair   = "\" ( HTAB / SP / VCHAR / obs-text )
	 */
	var paramRegExp = /; *([!#$%&'\*\+\-\.\^_`\|~0-9A-Za-z]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'\*\+\-\.\^_`\|~0-9A-Za-z]+) */g
	var textRegExp = /^[\u000b\u0020-\u007e\u0080-\u00ff]+$/
	var tokenRegExp = /^[!#$%&'\*\+\-\.\^_`\|~0-9A-Za-z]+$/
	
	/**
	 * RegExp to match quoted-pair in RFC 7230 sec 3.2.6
	 *
	 * quoted-pair = "\" ( HTAB / SP / VCHAR / obs-text )
	 * obs-text    = %x80-FF
	 */
	var qescRegExp = /\\([\u000b\u0020-\u00ff])/g
	
	/**
	 * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6
	 */
	var quoteRegExp = /([\\"])/g
	
	/**
	 * RegExp to match type in RFC 6838
	 *
	 * media-type = type "/" subtype
	 * type       = token
	 * subtype    = token
	 */
	var typeRegExp = /^[!#$%&'\*\+\-\.\^_`\|~0-9A-Za-z]+\/[!#$%&'\*\+\-\.\^_`\|~0-9A-Za-z]+$/
	
	/**
	 * Module exports.
	 * @public
	 */
	
	exports.format = format
	exports.parse = parse
	
	/**
	 * Format object to media type.
	 *
	 * @param {object} obj
	 * @return {string}
	 * @public
	 */
	
	function format(obj) {
	  if (!obj || typeof obj !== 'object') {
	    throw new TypeError('argument obj is required')
	  }
	
	  var parameters = obj.parameters
	  var type = obj.type
	
	  if (!type || !typeRegExp.test(type)) {
	    throw new TypeError('invalid type')
	  }
	
	  var string = type
	
	  // append parameters
	  if (parameters && typeof parameters === 'object') {
	    var param
	    var params = Object.keys(parameters).sort()
	
	    for (var i = 0; i < params.length; i++) {
	      param = params[i]
	
	      if (!tokenRegExp.test(param)) {
	        throw new TypeError('invalid parameter name')
	      }
	
	      string += '; ' + param + '=' + qstring(parameters[param])
	    }
	  }
	
	  return string
	}
	
	/**
	 * Parse media type to object.
	 *
	 * @param {string|object} string
	 * @return {Object}
	 * @public
	 */
	
	function parse(string) {
	  if (!string) {
	    throw new TypeError('argument string is required')
	  }
	
	  if (typeof string === 'object') {
	    // support req/res-like objects as argument
	    string = getcontenttype(string)
	
	    if (typeof string !== 'string') {
	      throw new TypeError('content-type header is missing from object');
	    }
	  }
	
	  if (typeof string !== 'string') {
	    throw new TypeError('argument string is required to be a string')
	  }
	
	  var index = string.indexOf(';')
	  var type = index !== -1
	    ? string.substr(0, index).trim()
	    : string.trim()
	
	  if (!typeRegExp.test(type)) {
	    throw new TypeError('invalid media type')
	  }
	
	  var key
	  var match
	  var obj = new ContentType(type.toLowerCase())
	  var value
	
	  paramRegExp.lastIndex = index
	
	  while (match = paramRegExp.exec(string)) {
	    if (match.index !== index) {
	      throw new TypeError('invalid parameter format')
	    }
	
	    index += match[0].length
	    key = match[1].toLowerCase()
	    value = match[2]
	
	    if (value[0] === '"') {
	      // remove quotes and escapes
	      value = value
	        .substr(1, value.length - 2)
	        .replace(qescRegExp, '$1')
	    }
	
	    obj.parameters[key] = value
	  }
	
	  if (index !== -1 && index !== string.length) {
	    throw new TypeError('invalid parameter format')
	  }
	
	  return obj
	}
	
	/**
	 * Get content-type from req/res objects.
	 *
	 * @param {object}
	 * @return {Object}
	 * @private
	 */
	
	function getcontenttype(obj) {
	  if (typeof obj.getHeader === 'function') {
	    // res-like
	    return obj.getHeader('content-type')
	  }
	
	  if (typeof obj.headers === 'object') {
	    // req-like
	    return obj.headers && obj.headers['content-type']
	  }
	}
	
	/**
	 * Quote a string if necessary.
	 *
	 * @param {string} val
	 * @return {string}
	 * @private
	 */
	
	function qstring(val) {
	  var str = String(val)
	
	  // no need to quote tokens
	  if (tokenRegExp.test(str)) {
	    return str
	  }
	
	  if (str.length > 0 && !textRegExp.test(str)) {
	    throw new TypeError('invalid parameter value')
	  }
	
	  return '"' + str.replace(quoteRegExp, '\\$1') + '"'
	}
	
	/**
	 * Class to represent a content type.
	 * @private
	 */
	function ContentType(type) {
	  this.parameters = Object.create(null)
	  this.type = type
	}


/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * send
	 * Copyright(c) 2012 TJ Holowaychuk
	 * Copyright(c) 2014-2016 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var createError = __webpack_require__(397)
	var debug = __webpack_require__(361)('send')
	var deprecate = __webpack_require__(379)('send')
	var destroy = __webpack_require__(401)
	var encodeUrl = __webpack_require__(402)
	var escapeHtml = __webpack_require__(366)
	var etag = __webpack_require__(403)
	var EventEmitter = __webpack_require__(260).EventEmitter
	var fresh = __webpack_require__(404)
	var fs = __webpack_require__(261)
	var mime = __webpack_require__(405)
	var ms = __webpack_require__(364)
	var onFinished = __webpack_require__(367)
	var parseRange = __webpack_require__(407)
	var path = __webpack_require__(342)
	var statuses = __webpack_require__(369)
	var Stream = __webpack_require__(317)
	var util = __webpack_require__(318)
	
	/**
	 * Path function references.
	 * @private
	 */
	
	var extname = path.extname
	var join = path.join
	var normalize = path.normalize
	var resolve = path.resolve
	var sep = path.sep
	
	/**
	 * Regular expression for identifying a bytes Range header.
	 * @private
	 */
	
	var BYTES_RANGE_REGEXP = /^ *bytes=/
	
	/**
	 * Maximum value allowed for the max age.
	 * @private
	 */
	
	var MAX_MAXAGE = 60 * 60 * 24 * 365 * 1000 // 1 year
	
	/**
	 * Regular expression to match a path with a directory up component.
	 * @private
	 */
	
	var UP_PATH_REGEXP = /(?:^|[\\\/])\.\.(?:[\\\/]|$)/
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = send
	module.exports.mime = mime
	
	/**
	 * Shim EventEmitter.listenerCount for node.js < 0.10
	 */
	
	/* istanbul ignore next */
	var listenerCount = EventEmitter.listenerCount ||
	  function (emitter, type) { return emitter.listeners(type).length }
	
	/**
	 * Return a `SendStream` for `req` and `path`.
	 *
	 * @param {object} req
	 * @param {string} path
	 * @param {object} [options]
	 * @return {SendStream}
	 * @public
	 */
	
	function send (req, path, options) {
	  return new SendStream(req, path, options)
	}
	
	/**
	 * Initialize a `SendStream` with the given `path`.
	 *
	 * @param {Request} req
	 * @param {String} path
	 * @param {object} [options]
	 * @private
	 */
	
	function SendStream (req, path, options) {
	  Stream.call(this)
	
	  var opts = options || {}
	
	  this.options = opts
	  this.path = path
	  this.req = req
	
	  this._acceptRanges = opts.acceptRanges !== undefined
	    ? Boolean(opts.acceptRanges)
	    : true
	
	  this._cacheControl = opts.cacheControl !== undefined
	    ? Boolean(opts.cacheControl)
	    : true
	
	  this._etag = opts.etag !== undefined
	    ? Boolean(opts.etag)
	    : true
	
	  this._dotfiles = opts.dotfiles !== undefined
	    ? opts.dotfiles
	    : 'ignore'
	
	  if (this._dotfiles !== 'ignore' && this._dotfiles !== 'allow' && this._dotfiles !== 'deny') {
	    throw new TypeError('dotfiles option must be "allow", "deny", or "ignore"')
	  }
	
	  this._hidden = Boolean(opts.hidden)
	
	  if (opts.hidden !== undefined) {
	    deprecate('hidden: use dotfiles: \'' + (this._hidden ? 'allow' : 'ignore') + '\' instead')
	  }
	
	  // legacy support
	  if (opts.dotfiles === undefined) {
	    this._dotfiles = undefined
	  }
	
	  this._extensions = opts.extensions !== undefined
	    ? normalizeList(opts.extensions, 'extensions option')
	    : []
	
	  this._index = opts.index !== undefined
	    ? normalizeList(opts.index, 'index option')
	    : ['index.html']
	
	  this._lastModified = opts.lastModified !== undefined
	    ? Boolean(opts.lastModified)
	    : true
	
	  this._maxage = opts.maxAge || opts.maxage
	  this._maxage = typeof this._maxage === 'string'
	    ? ms(this._maxage)
	    : Number(this._maxage)
	  this._maxage = !isNaN(this._maxage)
	    ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE)
	    : 0
	
	  this._root = opts.root
	    ? resolve(opts.root)
	    : null
	
	  if (!this._root && opts.from) {
	    this.from(opts.from)
	  }
	}
	
	/**
	 * Inherits from `Stream`.
	 */
	
	util.inherits(SendStream, Stream)
	
	/**
	 * Enable or disable etag generation.
	 *
	 * @param {Boolean} val
	 * @return {SendStream}
	 * @api public
	 */
	
	SendStream.prototype.etag = deprecate.function(function etag (val) {
	  this._etag = Boolean(val)
	  debug('etag %s', this._etag)
	  return this
	}, 'send.etag: pass etag as option')
	
	/**
	 * Enable or disable "hidden" (dot) files.
	 *
	 * @param {Boolean} path
	 * @return {SendStream}
	 * @api public
	 */
	
	SendStream.prototype.hidden = deprecate.function(function hidden (val) {
	  this._hidden = Boolean(val)
	  this._dotfiles = undefined
	  debug('hidden %s', this._hidden)
	  return this
	}, 'send.hidden: use dotfiles option')
	
	/**
	 * Set index `paths`, set to a falsy
	 * value to disable index support.
	 *
	 * @param {String|Boolean|Array} paths
	 * @return {SendStream}
	 * @api public
	 */
	
	SendStream.prototype.index = deprecate.function(function index (paths) {
	  var index = !paths ? [] : normalizeList(paths, 'paths argument')
	  debug('index %o', paths)
	  this._index = index
	  return this
	}, 'send.index: pass index as option')
	
	/**
	 * Set root `path`.
	 *
	 * @param {String} path
	 * @return {SendStream}
	 * @api public
	 */
	
	SendStream.prototype.root = function root (path) {
	  this._root = resolve(String(path))
	  debug('root %s', this._root)
	  return this
	}
	
	SendStream.prototype.from = deprecate.function(SendStream.prototype.root,
	  'send.from: pass root as option')
	
	SendStream.prototype.root = deprecate.function(SendStream.prototype.root,
	  'send.root: pass root as option')
	
	/**
	 * Set max-age to `maxAge`.
	 *
	 * @param {Number} maxAge
	 * @return {SendStream}
	 * @api public
	 */
	
	SendStream.prototype.maxage = deprecate.function(function maxage (maxAge) {
	  this._maxage = typeof maxAge === 'string'
	    ? ms(maxAge)
	    : Number(maxAge)
	  this._maxage = !isNaN(this._maxage)
	    ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE)
	    : 0
	  debug('max-age %d', this._maxage)
	  return this
	}, 'send.maxage: pass maxAge as option')
	
	/**
	 * Emit error with `status`.
	 *
	 * @param {number} status
	 * @param {Error} [error]
	 * @private
	 */
	
	SendStream.prototype.error = function error (status, error) {
	  // emit if listeners instead of responding
	  if (listenerCount(this, 'error') !== 0) {
	    return this.emit('error', createError(error, status, {
	      expose: false
	    }))
	  }
	
	  var res = this.res
	  var msg = statuses[status]
	
	  // clear existing headers
	  clearHeaders(res)
	
	  // add error headers
	  if (error && error.headers) {
	    setHeaders(res, error.headers)
	  }
	
	  // send basic response
	  res.statusCode = status
	  res.setHeader('Content-Type', 'text/plain; charset=UTF-8')
	  res.setHeader('Content-Length', Buffer.byteLength(msg))
	  res.setHeader('X-Content-Type-Options', 'nosniff')
	  res.end(msg)
	}
	
	/**
	 * Check if the pathname ends with "/".
	 *
	 * @return {Boolean}
	 * @api private
	 */
	
	SendStream.prototype.hasTrailingSlash = function hasTrailingSlash () {
	  return this.path[this.path.length - 1] === '/'
	}
	
	/**
	 * Check if this is a conditional GET request.
	 *
	 * @return {Boolean}
	 * @api private
	 */
	
	SendStream.prototype.isConditionalGET = function isConditionalGET () {
	  return this.req.headers['if-none-match'] ||
	    this.req.headers['if-modified-since']
	}
	
	/**
	 * Strip content-* header fields.
	 *
	 * @private
	 */
	
	SendStream.prototype.removeContentHeaderFields = function removeContentHeaderFields () {
	  var res = this.res
	  var headers = Object.keys(res._headers || {})
	
	  for (var i = 0; i < headers.length; i++) {
	    var header = headers[i]
	    if (header.substr(0, 8) === 'content-' && header !== 'content-location') {
	      res.removeHeader(header)
	    }
	  }
	}
	
	/**
	 * Respond with 304 not modified.
	 *
	 * @api private
	 */
	
	SendStream.prototype.notModified = function notModified () {
	  var res = this.res
	  debug('not modified')
	  this.removeContentHeaderFields()
	  res.statusCode = 304
	  res.end()
	}
	
	/**
	 * Raise error that headers already sent.
	 *
	 * @api private
	 */
	
	SendStream.prototype.headersAlreadySent = function headersAlreadySent () {
	  var err = new Error('Can\'t set headers after they are sent.')
	  debug('headers already sent')
	  this.error(500, err)
	}
	
	/**
	 * Check if the request is cacheable, aka
	 * responded with 2xx or 304 (see RFC 2616 section 14.2{5,6}).
	 *
	 * @return {Boolean}
	 * @api private
	 */
	
	SendStream.prototype.isCachable = function isCachable () {
	  var statusCode = this.res.statusCode
	  return (statusCode >= 200 && statusCode < 300) ||
	    statusCode === 304
	}
	
	/**
	 * Handle stat() error.
	 *
	 * @param {Error} error
	 * @private
	 */
	
	SendStream.prototype.onStatError = function onStatError (error) {
	  switch (error.code) {
	    case 'ENAMETOOLONG':
	    case 'ENOENT':
	    case 'ENOTDIR':
	      this.error(404, error)
	      break
	    default:
	      this.error(500, error)
	      break
	  }
	}
	
	/**
	 * Check if the cache is fresh.
	 *
	 * @return {Boolean}
	 * @api private
	 */
	
	SendStream.prototype.isFresh = function isFresh () {
	  return fresh(this.req.headers, this.res._headers)
	}
	
	/**
	 * Check if the range is fresh.
	 *
	 * @return {Boolean}
	 * @api private
	 */
	
	SendStream.prototype.isRangeFresh = function isRangeFresh () {
	  var ifRange = this.req.headers['if-range']
	
	  if (!ifRange) {
	    return true
	  }
	
	  return ~ifRange.indexOf('"')
	    ? ~ifRange.indexOf(this.res._headers['etag'])
	    : Date.parse(this.res._headers['last-modified']) <= Date.parse(ifRange)
	}
	
	/**
	 * Redirect to path.
	 *
	 * @param {string} path
	 * @private
	 */
	
	SendStream.prototype.redirect = function redirect (path) {
	  if (listenerCount(this, 'directory') !== 0) {
	    this.emit('directory')
	    return
	  }
	
	  if (this.hasTrailingSlash()) {
	    this.error(403)
	    return
	  }
	
	  var loc = encodeUrl(collapseLeadingSlashes(path + '/'))
	  var msg = 'Redirecting to <a href="' + escapeHtml(loc) + '">' + escapeHtml(loc) + '</a>\n'
	  var res = this.res
	
	  // redirect
	  res.statusCode = 301
	  res.setHeader('Content-Type', 'text/html; charset=UTF-8')
	  res.setHeader('Content-Length', Buffer.byteLength(msg))
	  res.setHeader('X-Content-Type-Options', 'nosniff')
	  res.setHeader('Location', loc)
	  res.end(msg)
	}
	
	/**
	 * Pipe to `res.
	 *
	 * @param {Stream} res
	 * @return {Stream} res
	 * @api public
	 */
	
	SendStream.prototype.pipe = function pipe (res) {
	  // root path
	  var root = this._root
	
	  // references
	  this.res = res
	
	  // decode the path
	  var path = decode(this.path)
	  if (path === -1) {
	    this.error(400)
	    return res
	  }
	
	  // null byte(s)
	  if (~path.indexOf('\0')) {
	    this.error(400)
	    return res
	  }
	
	  var parts
	  if (root !== null) {
	    // malicious path
	    if (UP_PATH_REGEXP.test(normalize('.' + sep + path))) {
	      debug('malicious path "%s"', path)
	      this.error(403)
	      return res
	    }
	
	    // join / normalize from optional root dir
	    path = normalize(join(root, path))
	    root = normalize(root + sep)
	
	    // explode path parts
	    parts = path.substr(root.length).split(sep)
	  } else {
	    // ".." is malicious without "root"
	    if (UP_PATH_REGEXP.test(path)) {
	      debug('malicious path "%s"', path)
	      this.error(403)
	      return res
	    }
	
	    // explode path parts
	    parts = normalize(path).split(sep)
	
	    // resolve the path
	    path = resolve(path)
	  }
	
	  // dotfile handling
	  if (containsDotFile(parts)) {
	    var access = this._dotfiles
	
	    // legacy support
	    if (access === undefined) {
	      access = parts[parts.length - 1][0] === '.'
	        ? (this._hidden ? 'allow' : 'ignore')
	        : 'allow'
	    }
	
	    debug('%s dotfile "%s"', access, path)
	    switch (access) {
	      case 'allow':
	        break
	      case 'deny':
	        this.error(403)
	        return res
	      case 'ignore':
	      default:
	        this.error(404)
	        return res
	    }
	  }
	
	  // index file support
	  if (this._index.length && this.path[this.path.length - 1] === '/') {
	    this.sendIndex(path)
	    return res
	  }
	
	  this.sendFile(path)
	  return res
	}
	
	/**
	 * Transfer `path`.
	 *
	 * @param {String} path
	 * @api public
	 */
	
	SendStream.prototype.send = function send (path, stat) {
	  var len = stat.size
	  var options = this.options
	  var opts = {}
	  var res = this.res
	  var req = this.req
	  var ranges = req.headers.range
	  var offset = options.start || 0
	
	  if (res._header) {
	    // impossible to send now
	    this.headersAlreadySent()
	    return
	  }
	
	  debug('pipe "%s"', path)
	
	  // set header fields
	  this.setHeader(path, stat)
	
	  // set content-type
	  this.type(path)
	
	  // conditional GET support
	  if (this.isConditionalGET() && this.isCachable() && this.isFresh()) {
	    this.notModified()
	    return
	  }
	
	  // adjust len to start/end options
	  len = Math.max(0, len - offset)
	  if (options.end !== undefined) {
	    var bytes = options.end - offset + 1
	    if (len > bytes) len = bytes
	  }
	
	  // Range support
	  if (this._acceptRanges && BYTES_RANGE_REGEXP.test(ranges)) {
	    // parse
	    ranges = parseRange(len, ranges, {
	      combine: true
	    })
	
	    // If-Range support
	    if (!this.isRangeFresh()) {
	      debug('range stale')
	      ranges = -2
	    }
	
	    // unsatisfiable
	    if (ranges === -1) {
	      debug('range unsatisfiable')
	
	      // Content-Range
	      res.setHeader('Content-Range', contentRange('bytes', len))
	
	      // 416 Requested Range Not Satisfiable
	      return this.error(416, {
	        headers: {'Content-Range': res.getHeader('Content-Range')}
	      })
	    }
	
	    // valid (syntactically invalid/multiple ranges are treated as a regular response)
	    if (ranges !== -2 && ranges.length === 1) {
	      debug('range %j', ranges)
	
	      // Content-Range
	      res.statusCode = 206
	      res.setHeader('Content-Range', contentRange('bytes', len, ranges[0]))
	
	      // adjust for requested range
	      offset += ranges[0].start
	      len = ranges[0].end - ranges[0].start + 1
	    }
	  }
	
	  // clone options
	  for (var prop in options) {
	    opts[prop] = options[prop]
	  }
	
	  // set read options
	  opts.start = offset
	  opts.end = Math.max(offset, offset + len - 1)
	
	  // content-length
	  res.setHeader('Content-Length', len)
	
	  // HEAD support
	  if (req.method === 'HEAD') {
	    res.end()
	    return
	  }
	
	  this.stream(path, opts)
	}
	
	/**
	 * Transfer file for `path`.
	 *
	 * @param {String} path
	 * @api private
	 */
	SendStream.prototype.sendFile = function sendFile (path) {
	  var i = 0
	  var self = this
	
	  debug('stat "%s"', path)
	  fs.stat(path, function onstat (err, stat) {
	    if (err && err.code === 'ENOENT' && !extname(path) && path[path.length - 1] !== sep) {
	      // not found, check extensions
	      return next(err)
	    }
	    if (err) return self.onStatError(err)
	    if (stat.isDirectory()) return self.redirect(self.path)
	    self.emit('file', path, stat)
	    self.send(path, stat)
	  })
	
	  function next (err) {
	    if (self._extensions.length <= i) {
	      return err
	        ? self.onStatError(err)
	        : self.error(404)
	    }
	
	    var p = path + '.' + self._extensions[i++]
	
	    debug('stat "%s"', p)
	    fs.stat(p, function (err, stat) {
	      if (err) return next(err)
	      if (stat.isDirectory()) return next()
	      self.emit('file', p, stat)
	      self.send(p, stat)
	    })
	  }
	}
	
	/**
	 * Transfer index for `path`.
	 *
	 * @param {String} path
	 * @api private
	 */
	SendStream.prototype.sendIndex = function sendIndex (path) {
	  var i = -1
	  var self = this
	
	  function next (err) {
	    if (++i >= self._index.length) {
	      if (err) return self.onStatError(err)
	      return self.error(404)
	    }
	
	    var p = join(path, self._index[i])
	
	    debug('stat "%s"', p)
	    fs.stat(p, function (err, stat) {
	      if (err) return next(err)
	      if (stat.isDirectory()) return next()
	      self.emit('file', p, stat)
	      self.send(p, stat)
	    })
	  }
	
	  next()
	}
	
	/**
	 * Stream `path` to the response.
	 *
	 * @param {String} path
	 * @param {Object} options
	 * @api private
	 */
	
	SendStream.prototype.stream = function stream (path, options) {
	  // TODO: this is all lame, refactor meeee
	  var finished = false
	  var self = this
	  var res = this.res
	
	  // pipe
	  var stream = fs.createReadStream(path, options)
	  this.emit('stream', stream)
	  stream.pipe(res)
	
	  // response finished, done with the fd
	  onFinished(res, function onfinished () {
	    finished = true
	    destroy(stream)
	  })
	
	  // error handling code-smell
	  stream.on('error', function onerror (err) {
	    // request already finished
	    if (finished) return
	
	    // clean up stream
	    finished = true
	    destroy(stream)
	
	    // error
	    self.onStatError(err)
	  })
	
	  // end
	  stream.on('end', function onend () {
	    self.emit('end')
	  })
	}
	
	/**
	 * Set content-type based on `path`
	 * if it hasn't been explicitly set.
	 *
	 * @param {String} path
	 * @api private
	 */
	
	SendStream.prototype.type = function type (path) {
	  var res = this.res
	
	  if (res.getHeader('Content-Type')) return
	
	  var type = mime.lookup(path)
	
	  if (!type) {
	    debug('no content-type')
	    return
	  }
	
	  var charset = mime.charsets.lookup(type)
	
	  debug('content-type %s', type)
	  res.setHeader('Content-Type', type + (charset ? '; charset=' + charset : ''))
	}
	
	/**
	 * Set response header fields, most
	 * fields may be pre-defined.
	 *
	 * @param {String} path
	 * @param {Object} stat
	 * @api private
	 */
	
	SendStream.prototype.setHeader = function setHeader (path, stat) {
	  var res = this.res
	
	  this.emit('headers', res, path, stat)
	
	  if (this._acceptRanges && !res.getHeader('Accept-Ranges')) {
	    debug('accept ranges')
	    res.setHeader('Accept-Ranges', 'bytes')
	  }
	
	  if (this._cacheControl && !res.getHeader('Cache-Control')) {
	    var cacheControl = 'public, max-age=' + Math.floor(this._maxage / 1000)
	    debug('cache-control %s', cacheControl)
	    res.setHeader('Cache-Control', cacheControl)
	  }
	
	  if (this._lastModified && !res.getHeader('Last-Modified')) {
	    var modified = stat.mtime.toUTCString()
	    debug('modified %s', modified)
	    res.setHeader('Last-Modified', modified)
	  }
	
	  if (this._etag && !res.getHeader('ETag')) {
	    var val = etag(stat)
	    debug('etag %s', val)
	    res.setHeader('ETag', val)
	  }
	}
	
	/**
	 * Clear all headers from a response.
	 *
	 * @param {object} res
	 * @private
	 */
	
	function clearHeaders (res) {
	  res._headers = {}
	  res._headerNames = {}
	}
	
	/**
	 * Collapse all leading slashes into a single slash
	 *
	 * @param {string} str
	 * @private
	 */
	function collapseLeadingSlashes (str) {
	  for (var i = 0; i < str.length; i++) {
	    if (str[i] !== '/') {
	      break
	    }
	  }
	
	  return i > 1
	    ? '/' + str.substr(i)
	    : str
	}
	
	/**
	 * Determine if path parts contain a dotfile.
	 *
	 * @api private
	 */
	
	function containsDotFile (parts) {
	  for (var i = 0; i < parts.length; i++) {
	    if (parts[i][0] === '.') {
	      return true
	    }
	  }
	
	  return false
	}
	
	/**
	 * Create a Content-Range header.
	 *
	 * @param {string} type
	 * @param {number} size
	 * @param {array} [range]
	 */
	
	function contentRange (type, size, range) {
	  return type + ' ' + (range ? range.start + '-' + range.end : '*') + '/' + size
	}
	
	/**
	 * decodeURIComponent.
	 *
	 * Allows V8 to only deoptimize this fn instead of all
	 * of send().
	 *
	 * @param {String} path
	 * @api private
	 */
	
	function decode (path) {
	  try {
	    return decodeURIComponent(path)
	  } catch (err) {
	    return -1
	  }
	}
	
	/**
	 * Normalize the index option into an array.
	 *
	 * @param {boolean|string|array} val
	 * @param {string} name
	 * @private
	 */
	
	function normalizeList (val, name) {
	  var list = [].concat(val || [])
	
	  for (var i = 0; i < list.length; i++) {
	    if (typeof list[i] !== 'string') {
	      throw new TypeError(name + ' must be array of strings or false')
	    }
	  }
	
	  return list
	}
	
	/**
	 * Set an object of headers on a response.
	 *
	 * @param {object} res
	 * @param {object} headers
	 * @private
	 */
	
	function setHeaders (res, headers) {
	  var keys = Object.keys(headers)
	
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i]
	    res.setHeader(key, headers[key])
	  }
	}


/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * http-errors
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2016 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var setPrototypeOf = __webpack_require__(398)
	var statuses = __webpack_require__(369)
	var inherits = __webpack_require__(399)
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = createError
	module.exports.HttpError = createHttpErrorConstructor()
	
	// Populate exports for all constructors
	populateConstructorExports(module.exports, statuses.codes, module.exports.HttpError)
	
	/**
	 * Create a new HTTP Error.
	 *
	 * @returns {Error}
	 * @public
	 */
	
	function createError () {
	  // so much arity going on ~_~
	  var err
	  var msg
	  var status = 500
	  var props = {}
	  for (var i = 0; i < arguments.length; i++) {
	    var arg = arguments[i]
	    if (arg instanceof Error) {
	      err = arg
	      status = err.status || err.statusCode || status
	      continue
	    }
	    switch (typeof arg) {
	      case 'string':
	        msg = arg
	        break
	      case 'number':
	        status = arg
	        break
	      case 'object':
	        props = arg
	        break
	    }
	  }
	
	  if (typeof status !== 'number' || !statuses[status]) {
	    status = 500
	  }
	
	  // constructor
	  var HttpError = createError[status]
	
	  if (!err) {
	    // create error
	    err = HttpError
	      ? new HttpError(msg)
	      : new Error(msg || statuses[status])
	    Error.captureStackTrace(err, createError)
	  }
	
	  if (!HttpError || !(err instanceof HttpError)) {
	    // add properties to generic error
	    err.expose = status < 500
	    err.status = err.statusCode = status
	  }
	
	  for (var key in props) {
	    if (key !== 'status' && key !== 'statusCode') {
	      err[key] = props[key]
	    }
	  }
	
	  return err
	}
	
	/**
	 * Create HTTP error abstract base class.
	 * @private
	 */
	
	function createHttpErrorConstructor () {
	  function HttpError () {
	    throw new TypeError('cannot construct abstract class')
	  }
	
	  inherits(HttpError, Error)
	
	  return HttpError
	}
	
	/**
	 * Create a constructor for a client error.
	 * @private
	 */
	
	function createClientErrorConstructor (HttpError, name, code) {
	  var className = name.match(/Error$/) ? name : name + 'Error'
	
	  function ClientError (message) {
	    // create the error object
	    var err = new Error(message != null ? message : statuses[code])
	
	    // capture a stack trace to the construction point
	    Error.captureStackTrace(err, ClientError)
	
	    // adjust the [[Prototype]]
	    setPrototypeOf(err, ClientError.prototype)
	
	    // redefine the error name
	    Object.defineProperty(err, 'name', {
	      enumerable: false,
	      configurable: true,
	      value: className,
	      writable: true
	    })
	
	    return err
	  }
	
	  inherits(ClientError, HttpError)
	
	  ClientError.prototype.status = code
	  ClientError.prototype.statusCode = code
	  ClientError.prototype.expose = true
	
	  return ClientError
	}
	
	/**
	 * Create a constructor for a server error.
	 * @private
	 */
	
	function createServerErrorConstructor (HttpError, name, code) {
	  var className = name.match(/Error$/) ? name : name + 'Error'
	
	  function ServerError (message) {
	    // create the error object
	    var err = new Error(message != null ? message : statuses[code])
	
	    // capture a stack trace to the construction point
	    Error.captureStackTrace(err, ServerError)
	
	    // adjust the [[Prototype]]
	    setPrototypeOf(err, ServerError.prototype)
	
	    // redefine the error name
	    Object.defineProperty(err, 'name', {
	      enumerable: false,
	      configurable: true,
	      value: className,
	      writable: true
	    })
	
	    return err
	  }
	
	  inherits(ServerError, HttpError)
	
	  ServerError.prototype.status = code
	  ServerError.prototype.statusCode = code
	  ServerError.prototype.expose = false
	
	  return ServerError
	}
	
	/**
	 * Populate the exports object with constructors for every error class.
	 * @private
	 */
	
	function populateConstructorExports (exports, codes, HttpError) {
	  codes.forEach(function forEachCode (code) {
	    var CodeError
	    var name = toIdentifier(statuses[code])
	
	    switch (String(code).charAt(0)) {
	      case '4':
	        CodeError = createClientErrorConstructor(HttpError, name, code)
	        break
	      case '5':
	        CodeError = createServerErrorConstructor(HttpError, name, code)
	        break
	    }
	
	    if (CodeError) {
	      // export the constructor
	      exports[code] = CodeError
	      exports[name] = CodeError
	    }
	  })
	
	  // backwards-compatibility
	  exports["I'mateapot"] = exports.ImATeapot
	}
	
	/**
	 * Convert a string of words to a JavaScript identifier.
	 * @private
	 */
	
	function toIdentifier (str) {
	  return str.split(' ').map(function (token) {
	    return token.slice(0, 1).toUpperCase() + token.slice(1)
	  }).join('').replace(/[^ _0-9a-z]/gi, '')
	}


/***/ },
/* 398 */
/***/ function(module, exports) {

	module.exports = Object.setPrototypeOf || ({__proto__:[]} instanceof Array ? setProtoOf : mixinProperties);
	
	function setProtoOf(obj, proto) {
		obj.__proto__ = proto;
		return obj;
	}
	
	function mixinProperties(obj, proto) {
		for (var prop in proto) {
			obj[prop] = proto[prop];
		}
		return obj;
	}


/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	try {
	  var util = __webpack_require__(318);
	  if (typeof util.inherits !== 'function') throw '';
	  module.exports = util.inherits;
	} catch (e) {
	  module.exports = __webpack_require__(400);
	}


/***/ },
/* 400 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * destroy
	 * Copyright(c) 2014 Jonathan Ong
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var ReadStream = __webpack_require__(261).ReadStream
	var Stream = __webpack_require__(317)
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = destroy
	
	/**
	 * Destroy a stream.
	 *
	 * @param {object} stream
	 * @public
	 */
	
	function destroy(stream) {
	  if (stream instanceof ReadStream) {
	    return destroyReadStream(stream)
	  }
	
	  if (!(stream instanceof Stream)) {
	    return stream
	  }
	
	  if (typeof stream.destroy === 'function') {
	    stream.destroy()
	  }
	
	  return stream
	}
	
	/**
	 * Destroy a ReadStream.
	 *
	 * @param {object} stream
	 * @private
	 */
	
	function destroyReadStream(stream) {
	  stream.destroy()
	
	  if (typeof stream.close === 'function') {
	    // node.js core bug work-around
	    stream.on('open', onOpenClose)
	  }
	
	  return stream
	}
	
	/**
	 * On open handler to close stream.
	 * @private
	 */
	
	function onOpenClose() {
	  if (typeof this.fd === 'number') {
	    // actually close down the fd
	    this.close()
	  }
	}


/***/ },
/* 402 */
/***/ function(module, exports) {

	/*!
	 * encodeurl
	 * Copyright(c) 2016 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = encodeUrl
	
	/**
	 * RegExp to match non-URL code points, *after* encoding (i.e. not including "%")
	 * and including invalid escape sequences.
	 * @private
	 */
	
	var ENCODE_CHARS_REGEXP = /(?:[^\x21\x25\x26-\x3B\x3D\x3F-\x5B\x5D\x5F\x61-\x7A\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]))+/g
	
	/**
	 * RegExp to match unmatched surrogate pair.
	 * @private
	 */
	
	var UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\uD800-\uDBFF])[\uDC00-\uDFFF]|[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/g
	
	/**
	 * String to replace unmatched surrogate pair with.
	 * @private
	 */
	
	var UNMATCHED_SURROGATE_PAIR_REPLACE = '$1\uFFFD$2'
	
	/**
	 * Encode a URL to a percent-encoded form, excluding already-encoded sequences.
	 *
	 * This function will take an already-encoded URL and encode all the non-URL
	 * code points. This function will not encode the "%" character unless it is
	 * not part of a valid sequence (`%20` will be left as-is, but `%foo` will
	 * be encoded as `%25foo`).
	 *
	 * This encode is meant to be "safe" and does not throw errors. It will try as
	 * hard as it can to properly encode the given URL, including replacing any raw,
	 * unpaired surrogate pairs with the Unicode replacement character prior to
	 * encoding.
	 *
	 * @param {string} url
	 * @return {string}
	 * @public
	 */
	
	function encodeUrl (url) {
	  return String(url)
	    .replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE)
	    .replace(ENCODE_CHARS_REGEXP, encodeURI)
	}


/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * etag
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = etag
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var crypto = __webpack_require__(263)
	var Stats = __webpack_require__(261).Stats
	
	/**
	 * Module variables.
	 * @private
	 */
	
	var base64PadCharRegExp = /=+$/
	var toString = Object.prototype.toString
	
	/**
	 * Generate an entity tag.
	 *
	 * @param {Buffer|string} entity
	 * @return {string}
	 * @private
	 */
	
	function entitytag(entity) {
	  if (entity.length === 0) {
	    // fast-path empty
	    return '"0-1B2M2Y8AsgTpgAmY7PhCfg"'
	  }
	
	  // compute hash of entity
	  var hash = crypto
	    .createHash('md5')
	    .update(entity, 'utf8')
	    .digest('base64')
	    .replace(base64PadCharRegExp, '')
	
	  // compute length of entity
	  var len = typeof entity === 'string'
	    ? Buffer.byteLength(entity, 'utf8')
	    : entity.length
	
	  return '"' + len.toString(16) + '-' + hash + '"'
	}
	
	/**
	 * Create a simple ETag.
	 *
	 * @param {string|Buffer|Stats} entity
	 * @param {object} [options]
	 * @param {boolean} [options.weak]
	 * @return {String}
	 * @public
	 */
	
	function etag(entity, options) {
	  if (entity == null) {
	    throw new TypeError('argument entity is required')
	  }
	
	  // support fs.Stats object
	  var isStats = isstats(entity)
	  var weak = options && typeof options.weak === 'boolean'
	    ? options.weak
	    : isStats
	
	  // validate argument
	  if (!isStats && typeof entity !== 'string' && !Buffer.isBuffer(entity)) {
	    throw new TypeError('argument entity must be string, Buffer, or fs.Stats')
	  }
	
	  // generate entity tag
	  var tag = isStats
	    ? stattag(entity)
	    : entitytag(entity)
	
	  return weak
	    ? 'W/' + tag
	    : tag
	}
	
	/**
	 * Determine if object is a Stats object.
	 *
	 * @param {object} obj
	 * @return {boolean}
	 * @api private
	 */
	
	function isstats(obj) {
	  // genuine fs.Stats
	  if (typeof Stats === 'function' && obj instanceof Stats) {
	    return true
	  }
	
	  // quack quack
	  return obj && typeof obj === 'object'
	    && 'ctime' in obj && toString.call(obj.ctime) === '[object Date]'
	    && 'mtime' in obj && toString.call(obj.mtime) === '[object Date]'
	    && 'ino' in obj && typeof obj.ino === 'number'
	    && 'size' in obj && typeof obj.size === 'number'
	}
	
	/**
	 * Generate a tag for a stat.
	 *
	 * @param {object} stat
	 * @return {string}
	 * @private
	 */
	
	function stattag(stat) {
	  var mtime = stat.mtime.getTime().toString(16)
	  var size = stat.size.toString(16)
	
	  return '"' + size + '-' + mtime + '"'
	}


/***/ },
/* 404 */
/***/ function(module, exports) {

	
	/**
	 * Expose `fresh()`.
	 */
	
	module.exports = fresh;
	
	/**
	 * Check freshness of `req` and `res` headers.
	 *
	 * When the cache is "fresh" __true__ is returned,
	 * otherwise __false__ is returned to indicate that
	 * the cache is now stale.
	 *
	 * @param {Object} req
	 * @param {Object} res
	 * @return {Boolean}
	 * @api public
	 */
	
	function fresh(req, res) {
	  // defaults
	  var etagMatches = true;
	  var notModified = true;
	
	  // fields
	  var modifiedSince = req['if-modified-since'];
	  var noneMatch = req['if-none-match'];
	  var lastModified = res['last-modified'];
	  var etag = res['etag'];
	  var cc = req['cache-control'];
	
	  // unconditional request
	  if (!modifiedSince && !noneMatch) return false;
	
	  // check for no-cache cache request directive
	  if (cc && cc.indexOf('no-cache') !== -1) return false;  
	
	  // parse if-none-match
	  if (noneMatch) noneMatch = noneMatch.split(/ *, */);
	
	  // if-none-match
	  if (noneMatch) {
	    etagMatches = noneMatch.some(function (match) {
	      return match === '*' || match === etag || match === 'W/' + etag;
	    });
	  }
	
	  // if-modified-since
	  if (modifiedSince) {
	    modifiedSince = new Date(modifiedSince);
	    lastModified = new Date(lastModified);
	    notModified = lastModified <= modifiedSince;
	  }
	
	  return !! (etagMatches && notModified);
	}


/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	var path = __webpack_require__(342);
	var fs = __webpack_require__(261);
	
	function Mime() {
	  // Map of extension -> mime type
	  this.types = Object.create(null);
	
	  // Map of mime type -> extension
	  this.extensions = Object.create(null);
	}
	
	/**
	 * Define mimetype -> extension mappings.  Each key is a mime-type that maps
	 * to an array of extensions associated with the type.  The first extension is
	 * used as the default extension for the type.
	 *
	 * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});
	 *
	 * @param map (Object) type definitions
	 */
	Mime.prototype.define = function (map) {
	  for (var type in map) {
	    var exts = map[type];
	    for (var i = 0; i < exts.length; i++) {
	      if (process.env.DEBUG_MIME && this.types[exts]) {
	        console.warn(this._loading.replace(/.*\//, ''), 'changes "' + exts[i] + '" extension type from ' +
	          this.types[exts] + ' to ' + type);
	      }
	
	      this.types[exts[i]] = type;
	    }
	
	    // Default extension is the first one we encounter
	    if (!this.extensions[type]) {
	      this.extensions[type] = exts[0];
	    }
	  }
	};
	
	/**
	 * Load an Apache2-style ".types" file
	 *
	 * This may be called multiple times (it's expected).  Where files declare
	 * overlapping types/extensions, the last file wins.
	 *
	 * @param file (String) path of file to load.
	 */
	Mime.prototype.load = function(file) {
	  this._loading = file;
	  // Read file and split into lines
	  var map = {},
	      content = fs.readFileSync(file, 'ascii'),
	      lines = content.split(/[\r\n]+/);
	
	  lines.forEach(function(line) {
	    // Clean up whitespace/comments, and split into fields
	    var fields = line.replace(/\s*#.*|^\s*|\s*$/g, '').split(/\s+/);
	    map[fields.shift()] = fields;
	  });
	
	  this.define(map);
	
	  this._loading = null;
	};
	
	/**
	 * Lookup a mime type based on extension
	 */
	Mime.prototype.lookup = function(path, fallback) {
	  var ext = path.replace(/.*[\.\/\\]/, '').toLowerCase();
	
	  return this.types[ext] || fallback || this.default_type;
	};
	
	/**
	 * Return file extension associated with a mime type
	 */
	Mime.prototype.extension = function(mimeType) {
	  var type = mimeType.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();
	  return this.extensions[type];
	};
	
	// Default instance
	var mime = new Mime();
	
	// Define built-in types
	mime.define(__webpack_require__(406));
	
	// Default type
	mime.default_type = mime.lookup('bin');
	
	//
	// Additional API specific to the default instance
	//
	
	mime.Mime = Mime;
	
	/**
	 * Lookup a charset based on mime type.
	 */
	mime.charsets = {
	  lookup: function(mimeType, fallback) {
	    // Assume text types are utf8
	    return (/^text\//).test(mimeType) ? 'UTF-8' : fallback;
	  }
	};
	
	module.exports = mime;


/***/ },
/* 406 */
/***/ function(module, exports) {

	module.exports = {
		"application/andrew-inset": [
			"ez"
		],
		"application/applixware": [
			"aw"
		],
		"application/atom+xml": [
			"atom"
		],
		"application/atomcat+xml": [
			"atomcat"
		],
		"application/atomsvc+xml": [
			"atomsvc"
		],
		"application/ccxml+xml": [
			"ccxml"
		],
		"application/cdmi-capability": [
			"cdmia"
		],
		"application/cdmi-container": [
			"cdmic"
		],
		"application/cdmi-domain": [
			"cdmid"
		],
		"application/cdmi-object": [
			"cdmio"
		],
		"application/cdmi-queue": [
			"cdmiq"
		],
		"application/cu-seeme": [
			"cu"
		],
		"application/dash+xml": [
			"mdp"
		],
		"application/davmount+xml": [
			"davmount"
		],
		"application/docbook+xml": [
			"dbk"
		],
		"application/dssc+der": [
			"dssc"
		],
		"application/dssc+xml": [
			"xdssc"
		],
		"application/ecmascript": [
			"ecma"
		],
		"application/emma+xml": [
			"emma"
		],
		"application/epub+zip": [
			"epub"
		],
		"application/exi": [
			"exi"
		],
		"application/font-tdpfr": [
			"pfr"
		],
		"application/font-woff": [
			"woff"
		],
		"application/font-woff2": [
			"woff2"
		],
		"application/gml+xml": [
			"gml"
		],
		"application/gpx+xml": [
			"gpx"
		],
		"application/gxf": [
			"gxf"
		],
		"application/hyperstudio": [
			"stk"
		],
		"application/inkml+xml": [
			"ink",
			"inkml"
		],
		"application/ipfix": [
			"ipfix"
		],
		"application/java-archive": [
			"jar"
		],
		"application/java-serialized-object": [
			"ser"
		],
		"application/java-vm": [
			"class"
		],
		"application/javascript": [
			"js"
		],
		"application/json": [
			"json",
			"map"
		],
		"application/json5": [
			"json5"
		],
		"application/jsonml+json": [
			"jsonml"
		],
		"application/lost+xml": [
			"lostxml"
		],
		"application/mac-binhex40": [
			"hqx"
		],
		"application/mac-compactpro": [
			"cpt"
		],
		"application/mads+xml": [
			"mads"
		],
		"application/marc": [
			"mrc"
		],
		"application/marcxml+xml": [
			"mrcx"
		],
		"application/mathematica": [
			"ma",
			"nb",
			"mb"
		],
		"application/mathml+xml": [
			"mathml"
		],
		"application/mbox": [
			"mbox"
		],
		"application/mediaservercontrol+xml": [
			"mscml"
		],
		"application/metalink+xml": [
			"metalink"
		],
		"application/metalink4+xml": [
			"meta4"
		],
		"application/mets+xml": [
			"mets"
		],
		"application/mods+xml": [
			"mods"
		],
		"application/mp21": [
			"m21",
			"mp21"
		],
		"application/mp4": [
			"mp4s",
			"m4p"
		],
		"application/msword": [
			"doc",
			"dot"
		],
		"application/mxf": [
			"mxf"
		],
		"application/octet-stream": [
			"bin",
			"dms",
			"lrf",
			"mar",
			"so",
			"dist",
			"distz",
			"pkg",
			"bpk",
			"dump",
			"elc",
			"deploy",
			"buffer"
		],
		"application/oda": [
			"oda"
		],
		"application/oebps-package+xml": [
			"opf"
		],
		"application/ogg": [
			"ogx"
		],
		"application/omdoc+xml": [
			"omdoc"
		],
		"application/onenote": [
			"onetoc",
			"onetoc2",
			"onetmp",
			"onepkg"
		],
		"application/oxps": [
			"oxps"
		],
		"application/patch-ops-error+xml": [
			"xer"
		],
		"application/pdf": [
			"pdf"
		],
		"application/pgp-encrypted": [
			"pgp"
		],
		"application/pgp-signature": [
			"asc",
			"sig"
		],
		"application/pics-rules": [
			"prf"
		],
		"application/pkcs10": [
			"p10"
		],
		"application/pkcs7-mime": [
			"p7m",
			"p7c"
		],
		"application/pkcs7-signature": [
			"p7s"
		],
		"application/pkcs8": [
			"p8"
		],
		"application/pkix-attr-cert": [
			"ac"
		],
		"application/pkix-cert": [
			"cer"
		],
		"application/pkix-crl": [
			"crl"
		],
		"application/pkix-pkipath": [
			"pkipath"
		],
		"application/pkixcmp": [
			"pki"
		],
		"application/pls+xml": [
			"pls"
		],
		"application/postscript": [
			"ai",
			"eps",
			"ps"
		],
		"application/prs.cww": [
			"cww"
		],
		"application/pskc+xml": [
			"pskcxml"
		],
		"application/rdf+xml": [
			"rdf"
		],
		"application/reginfo+xml": [
			"rif"
		],
		"application/relax-ng-compact-syntax": [
			"rnc"
		],
		"application/resource-lists+xml": [
			"rl"
		],
		"application/resource-lists-diff+xml": [
			"rld"
		],
		"application/rls-services+xml": [
			"rs"
		],
		"application/rpki-ghostbusters": [
			"gbr"
		],
		"application/rpki-manifest": [
			"mft"
		],
		"application/rpki-roa": [
			"roa"
		],
		"application/rsd+xml": [
			"rsd"
		],
		"application/rss+xml": [
			"rss"
		],
		"application/rtf": [
			"rtf"
		],
		"application/sbml+xml": [
			"sbml"
		],
		"application/scvp-cv-request": [
			"scq"
		],
		"application/scvp-cv-response": [
			"scs"
		],
		"application/scvp-vp-request": [
			"spq"
		],
		"application/scvp-vp-response": [
			"spp"
		],
		"application/sdp": [
			"sdp"
		],
		"application/set-payment-initiation": [
			"setpay"
		],
		"application/set-registration-initiation": [
			"setreg"
		],
		"application/shf+xml": [
			"shf"
		],
		"application/smil+xml": [
			"smi",
			"smil"
		],
		"application/sparql-query": [
			"rq"
		],
		"application/sparql-results+xml": [
			"srx"
		],
		"application/srgs": [
			"gram"
		],
		"application/srgs+xml": [
			"grxml"
		],
		"application/sru+xml": [
			"sru"
		],
		"application/ssdl+xml": [
			"ssdl"
		],
		"application/ssml+xml": [
			"ssml"
		],
		"application/tei+xml": [
			"tei",
			"teicorpus"
		],
		"application/thraud+xml": [
			"tfi"
		],
		"application/timestamped-data": [
			"tsd"
		],
		"application/vnd.3gpp.pic-bw-large": [
			"plb"
		],
		"application/vnd.3gpp.pic-bw-small": [
			"psb"
		],
		"application/vnd.3gpp.pic-bw-var": [
			"pvb"
		],
		"application/vnd.3gpp2.tcap": [
			"tcap"
		],
		"application/vnd.3m.post-it-notes": [
			"pwn"
		],
		"application/vnd.accpac.simply.aso": [
			"aso"
		],
		"application/vnd.accpac.simply.imp": [
			"imp"
		],
		"application/vnd.acucobol": [
			"acu"
		],
		"application/vnd.acucorp": [
			"atc",
			"acutc"
		],
		"application/vnd.adobe.air-application-installer-package+zip": [
			"air"
		],
		"application/vnd.adobe.formscentral.fcdt": [
			"fcdt"
		],
		"application/vnd.adobe.fxp": [
			"fxp",
			"fxpl"
		],
		"application/vnd.adobe.xdp+xml": [
			"xdp"
		],
		"application/vnd.adobe.xfdf": [
			"xfdf"
		],
		"application/vnd.ahead.space": [
			"ahead"
		],
		"application/vnd.airzip.filesecure.azf": [
			"azf"
		],
		"application/vnd.airzip.filesecure.azs": [
			"azs"
		],
		"application/vnd.amazon.ebook": [
			"azw"
		],
		"application/vnd.americandynamics.acc": [
			"acc"
		],
		"application/vnd.amiga.ami": [
			"ami"
		],
		"application/vnd.android.package-archive": [
			"apk"
		],
		"application/vnd.anser-web-certificate-issue-initiation": [
			"cii"
		],
		"application/vnd.anser-web-funds-transfer-initiation": [
			"fti"
		],
		"application/vnd.antix.game-component": [
			"atx"
		],
		"application/vnd.apple.installer+xml": [
			"mpkg"
		],
		"application/vnd.apple.mpegurl": [
			"m3u8"
		],
		"application/vnd.aristanetworks.swi": [
			"swi"
		],
		"application/vnd.astraea-software.iota": [
			"iota"
		],
		"application/vnd.audiograph": [
			"aep"
		],
		"application/vnd.blueice.multipass": [
			"mpm"
		],
		"application/vnd.bmi": [
			"bmi"
		],
		"application/vnd.businessobjects": [
			"rep"
		],
		"application/vnd.chemdraw+xml": [
			"cdxml"
		],
		"application/vnd.chipnuts.karaoke-mmd": [
			"mmd"
		],
		"application/vnd.cinderella": [
			"cdy"
		],
		"application/vnd.claymore": [
			"cla"
		],
		"application/vnd.cloanto.rp9": [
			"rp9"
		],
		"application/vnd.clonk.c4group": [
			"c4g",
			"c4d",
			"c4f",
			"c4p",
			"c4u"
		],
		"application/vnd.cluetrust.cartomobile-config": [
			"c11amc"
		],
		"application/vnd.cluetrust.cartomobile-config-pkg": [
			"c11amz"
		],
		"application/vnd.commonspace": [
			"csp"
		],
		"application/vnd.contact.cmsg": [
			"cdbcmsg"
		],
		"application/vnd.cosmocaller": [
			"cmc"
		],
		"application/vnd.crick.clicker": [
			"clkx"
		],
		"application/vnd.crick.clicker.keyboard": [
			"clkk"
		],
		"application/vnd.crick.clicker.palette": [
			"clkp"
		],
		"application/vnd.crick.clicker.template": [
			"clkt"
		],
		"application/vnd.crick.clicker.wordbank": [
			"clkw"
		],
		"application/vnd.criticaltools.wbs+xml": [
			"wbs"
		],
		"application/vnd.ctc-posml": [
			"pml"
		],
		"application/vnd.cups-ppd": [
			"ppd"
		],
		"application/vnd.curl.car": [
			"car"
		],
		"application/vnd.curl.pcurl": [
			"pcurl"
		],
		"application/vnd.dart": [
			"dart"
		],
		"application/vnd.data-vision.rdz": [
			"rdz"
		],
		"application/vnd.dece.data": [
			"uvf",
			"uvvf",
			"uvd",
			"uvvd"
		],
		"application/vnd.dece.ttml+xml": [
			"uvt",
			"uvvt"
		],
		"application/vnd.dece.unspecified": [
			"uvx",
			"uvvx"
		],
		"application/vnd.dece.zip": [
			"uvz",
			"uvvz"
		],
		"application/vnd.denovo.fcselayout-link": [
			"fe_launch"
		],
		"application/vnd.dna": [
			"dna"
		],
		"application/vnd.dolby.mlp": [
			"mlp"
		],
		"application/vnd.dpgraph": [
			"dpg"
		],
		"application/vnd.dreamfactory": [
			"dfac"
		],
		"application/vnd.ds-keypoint": [
			"kpxx"
		],
		"application/vnd.dvb.ait": [
			"ait"
		],
		"application/vnd.dvb.service": [
			"svc"
		],
		"application/vnd.dynageo": [
			"geo"
		],
		"application/vnd.ecowin.chart": [
			"mag"
		],
		"application/vnd.enliven": [
			"nml"
		],
		"application/vnd.epson.esf": [
			"esf"
		],
		"application/vnd.epson.msf": [
			"msf"
		],
		"application/vnd.epson.quickanime": [
			"qam"
		],
		"application/vnd.epson.salt": [
			"slt"
		],
		"application/vnd.epson.ssf": [
			"ssf"
		],
		"application/vnd.eszigno3+xml": [
			"es3",
			"et3"
		],
		"application/vnd.ezpix-album": [
			"ez2"
		],
		"application/vnd.ezpix-package": [
			"ez3"
		],
		"application/vnd.fdf": [
			"fdf"
		],
		"application/vnd.fdsn.mseed": [
			"mseed"
		],
		"application/vnd.fdsn.seed": [
			"seed",
			"dataless"
		],
		"application/vnd.flographit": [
			"gph"
		],
		"application/vnd.fluxtime.clip": [
			"ftc"
		],
		"application/vnd.framemaker": [
			"fm",
			"frame",
			"maker",
			"book"
		],
		"application/vnd.frogans.fnc": [
			"fnc"
		],
		"application/vnd.frogans.ltf": [
			"ltf"
		],
		"application/vnd.fsc.weblaunch": [
			"fsc"
		],
		"application/vnd.fujitsu.oasys": [
			"oas"
		],
		"application/vnd.fujitsu.oasys2": [
			"oa2"
		],
		"application/vnd.fujitsu.oasys3": [
			"oa3"
		],
		"application/vnd.fujitsu.oasysgp": [
			"fg5"
		],
		"application/vnd.fujitsu.oasysprs": [
			"bh2"
		],
		"application/vnd.fujixerox.ddd": [
			"ddd"
		],
		"application/vnd.fujixerox.docuworks": [
			"xdw"
		],
		"application/vnd.fujixerox.docuworks.binder": [
			"xbd"
		],
		"application/vnd.fuzzysheet": [
			"fzs"
		],
		"application/vnd.genomatix.tuxedo": [
			"txd"
		],
		"application/vnd.geogebra.file": [
			"ggb"
		],
		"application/vnd.geogebra.tool": [
			"ggt"
		],
		"application/vnd.geometry-explorer": [
			"gex",
			"gre"
		],
		"application/vnd.geonext": [
			"gxt"
		],
		"application/vnd.geoplan": [
			"g2w"
		],
		"application/vnd.geospace": [
			"g3w"
		],
		"application/vnd.gmx": [
			"gmx"
		],
		"application/vnd.google-earth.kml+xml": [
			"kml"
		],
		"application/vnd.google-earth.kmz": [
			"kmz"
		],
		"application/vnd.grafeq": [
			"gqf",
			"gqs"
		],
		"application/vnd.groove-account": [
			"gac"
		],
		"application/vnd.groove-help": [
			"ghf"
		],
		"application/vnd.groove-identity-message": [
			"gim"
		],
		"application/vnd.groove-injector": [
			"grv"
		],
		"application/vnd.groove-tool-message": [
			"gtm"
		],
		"application/vnd.groove-tool-template": [
			"tpl"
		],
		"application/vnd.groove-vcard": [
			"vcg"
		],
		"application/vnd.hal+xml": [
			"hal"
		],
		"application/vnd.handheld-entertainment+xml": [
			"zmm"
		],
		"application/vnd.hbci": [
			"hbci"
		],
		"application/vnd.hhe.lesson-player": [
			"les"
		],
		"application/vnd.hp-hpgl": [
			"hpgl"
		],
		"application/vnd.hp-hpid": [
			"hpid"
		],
		"application/vnd.hp-hps": [
			"hps"
		],
		"application/vnd.hp-jlyt": [
			"jlt"
		],
		"application/vnd.hp-pcl": [
			"pcl"
		],
		"application/vnd.hp-pclxl": [
			"pclxl"
		],
		"application/vnd.ibm.minipay": [
			"mpy"
		],
		"application/vnd.ibm.modcap": [
			"afp",
			"listafp",
			"list3820"
		],
		"application/vnd.ibm.rights-management": [
			"irm"
		],
		"application/vnd.ibm.secure-container": [
			"sc"
		],
		"application/vnd.iccprofile": [
			"icc",
			"icm"
		],
		"application/vnd.igloader": [
			"igl"
		],
		"application/vnd.immervision-ivp": [
			"ivp"
		],
		"application/vnd.immervision-ivu": [
			"ivu"
		],
		"application/vnd.insors.igm": [
			"igm"
		],
		"application/vnd.intercon.formnet": [
			"xpw",
			"xpx"
		],
		"application/vnd.intergeo": [
			"i2g"
		],
		"application/vnd.intu.qbo": [
			"qbo"
		],
		"application/vnd.intu.qfx": [
			"qfx"
		],
		"application/vnd.ipunplugged.rcprofile": [
			"rcprofile"
		],
		"application/vnd.irepository.package+xml": [
			"irp"
		],
		"application/vnd.is-xpr": [
			"xpr"
		],
		"application/vnd.isac.fcs": [
			"fcs"
		],
		"application/vnd.jam": [
			"jam"
		],
		"application/vnd.jcp.javame.midlet-rms": [
			"rms"
		],
		"application/vnd.jisp": [
			"jisp"
		],
		"application/vnd.joost.joda-archive": [
			"joda"
		],
		"application/vnd.kahootz": [
			"ktz",
			"ktr"
		],
		"application/vnd.kde.karbon": [
			"karbon"
		],
		"application/vnd.kde.kchart": [
			"chrt"
		],
		"application/vnd.kde.kformula": [
			"kfo"
		],
		"application/vnd.kde.kivio": [
			"flw"
		],
		"application/vnd.kde.kontour": [
			"kon"
		],
		"application/vnd.kde.kpresenter": [
			"kpr",
			"kpt"
		],
		"application/vnd.kde.kspread": [
			"ksp"
		],
		"application/vnd.kde.kword": [
			"kwd",
			"kwt"
		],
		"application/vnd.kenameaapp": [
			"htke"
		],
		"application/vnd.kidspiration": [
			"kia"
		],
		"application/vnd.kinar": [
			"kne",
			"knp"
		],
		"application/vnd.koan": [
			"skp",
			"skd",
			"skt",
			"skm"
		],
		"application/vnd.kodak-descriptor": [
			"sse"
		],
		"application/vnd.las.las+xml": [
			"lasxml"
		],
		"application/vnd.llamagraphics.life-balance.desktop": [
			"lbd"
		],
		"application/vnd.llamagraphics.life-balance.exchange+xml": [
			"lbe"
		],
		"application/vnd.lotus-1-2-3": [
			"123"
		],
		"application/vnd.lotus-approach": [
			"apr"
		],
		"application/vnd.lotus-freelance": [
			"pre"
		],
		"application/vnd.lotus-notes": [
			"nsf"
		],
		"application/vnd.lotus-organizer": [
			"org"
		],
		"application/vnd.lotus-screencam": [
			"scm"
		],
		"application/vnd.lotus-wordpro": [
			"lwp"
		],
		"application/vnd.macports.portpkg": [
			"portpkg"
		],
		"application/vnd.mcd": [
			"mcd"
		],
		"application/vnd.medcalcdata": [
			"mc1"
		],
		"application/vnd.mediastation.cdkey": [
			"cdkey"
		],
		"application/vnd.mfer": [
			"mwf"
		],
		"application/vnd.mfmp": [
			"mfm"
		],
		"application/vnd.micrografx.flo": [
			"flo"
		],
		"application/vnd.micrografx.igx": [
			"igx"
		],
		"application/vnd.mif": [
			"mif"
		],
		"application/vnd.mobius.daf": [
			"daf"
		],
		"application/vnd.mobius.dis": [
			"dis"
		],
		"application/vnd.mobius.mbk": [
			"mbk"
		],
		"application/vnd.mobius.mqy": [
			"mqy"
		],
		"application/vnd.mobius.msl": [
			"msl"
		],
		"application/vnd.mobius.plc": [
			"plc"
		],
		"application/vnd.mobius.txf": [
			"txf"
		],
		"application/vnd.mophun.application": [
			"mpn"
		],
		"application/vnd.mophun.certificate": [
			"mpc"
		],
		"application/vnd.mozilla.xul+xml": [
			"xul"
		],
		"application/vnd.ms-artgalry": [
			"cil"
		],
		"application/vnd.ms-cab-compressed": [
			"cab"
		],
		"application/vnd.ms-excel": [
			"xls",
			"xlm",
			"xla",
			"xlc",
			"xlt",
			"xlw"
		],
		"application/vnd.ms-excel.addin.macroenabled.12": [
			"xlam"
		],
		"application/vnd.ms-excel.sheet.binary.macroenabled.12": [
			"xlsb"
		],
		"application/vnd.ms-excel.sheet.macroenabled.12": [
			"xlsm"
		],
		"application/vnd.ms-excel.template.macroenabled.12": [
			"xltm"
		],
		"application/vnd.ms-fontobject": [
			"eot"
		],
		"application/vnd.ms-htmlhelp": [
			"chm"
		],
		"application/vnd.ms-ims": [
			"ims"
		],
		"application/vnd.ms-lrm": [
			"lrm"
		],
		"application/vnd.ms-officetheme": [
			"thmx"
		],
		"application/vnd.ms-pki.seccat": [
			"cat"
		],
		"application/vnd.ms-pki.stl": [
			"stl"
		],
		"application/vnd.ms-powerpoint": [
			"ppt",
			"pps",
			"pot"
		],
		"application/vnd.ms-powerpoint.addin.macroenabled.12": [
			"ppam"
		],
		"application/vnd.ms-powerpoint.presentation.macroenabled.12": [
			"pptm"
		],
		"application/vnd.ms-powerpoint.slide.macroenabled.12": [
			"sldm"
		],
		"application/vnd.ms-powerpoint.slideshow.macroenabled.12": [
			"ppsm"
		],
		"application/vnd.ms-powerpoint.template.macroenabled.12": [
			"potm"
		],
		"application/vnd.ms-project": [
			"mpp",
			"mpt"
		],
		"application/vnd.ms-word.document.macroenabled.12": [
			"docm"
		],
		"application/vnd.ms-word.template.macroenabled.12": [
			"dotm"
		],
		"application/vnd.ms-works": [
			"wps",
			"wks",
			"wcm",
			"wdb"
		],
		"application/vnd.ms-wpl": [
			"wpl"
		],
		"application/vnd.ms-xpsdocument": [
			"xps"
		],
		"application/vnd.mseq": [
			"mseq"
		],
		"application/vnd.musician": [
			"mus"
		],
		"application/vnd.muvee.style": [
			"msty"
		],
		"application/vnd.mynfc": [
			"taglet"
		],
		"application/vnd.neurolanguage.nlu": [
			"nlu"
		],
		"application/vnd.nitf": [
			"ntf",
			"nitf"
		],
		"application/vnd.noblenet-directory": [
			"nnd"
		],
		"application/vnd.noblenet-sealer": [
			"nns"
		],
		"application/vnd.noblenet-web": [
			"nnw"
		],
		"application/vnd.nokia.n-gage.data": [
			"ngdat"
		],
		"application/vnd.nokia.radio-preset": [
			"rpst"
		],
		"application/vnd.nokia.radio-presets": [
			"rpss"
		],
		"application/vnd.novadigm.edm": [
			"edm"
		],
		"application/vnd.novadigm.edx": [
			"edx"
		],
		"application/vnd.novadigm.ext": [
			"ext"
		],
		"application/vnd.oasis.opendocument.chart": [
			"odc"
		],
		"application/vnd.oasis.opendocument.chart-template": [
			"otc"
		],
		"application/vnd.oasis.opendocument.database": [
			"odb"
		],
		"application/vnd.oasis.opendocument.formula": [
			"odf"
		],
		"application/vnd.oasis.opendocument.formula-template": [
			"odft"
		],
		"application/vnd.oasis.opendocument.graphics": [
			"odg"
		],
		"application/vnd.oasis.opendocument.graphics-template": [
			"otg"
		],
		"application/vnd.oasis.opendocument.image": [
			"odi"
		],
		"application/vnd.oasis.opendocument.image-template": [
			"oti"
		],
		"application/vnd.oasis.opendocument.presentation": [
			"odp"
		],
		"application/vnd.oasis.opendocument.presentation-template": [
			"otp"
		],
		"application/vnd.oasis.opendocument.spreadsheet": [
			"ods"
		],
		"application/vnd.oasis.opendocument.spreadsheet-template": [
			"ots"
		],
		"application/vnd.oasis.opendocument.text": [
			"odt"
		],
		"application/vnd.oasis.opendocument.text-master": [
			"odm"
		],
		"application/vnd.oasis.opendocument.text-template": [
			"ott"
		],
		"application/vnd.oasis.opendocument.text-web": [
			"oth"
		],
		"application/vnd.olpc-sugar": [
			"xo"
		],
		"application/vnd.oma.dd2+xml": [
			"dd2"
		],
		"application/vnd.openofficeorg.extension": [
			"oxt"
		],
		"application/vnd.openxmlformats-officedocument.presentationml.presentation": [
			"pptx"
		],
		"application/vnd.openxmlformats-officedocument.presentationml.slide": [
			"sldx"
		],
		"application/vnd.openxmlformats-officedocument.presentationml.slideshow": [
			"ppsx"
		],
		"application/vnd.openxmlformats-officedocument.presentationml.template": [
			"potx"
		],
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": [
			"xlsx"
		],
		"application/vnd.openxmlformats-officedocument.spreadsheetml.template": [
			"xltx"
		],
		"application/vnd.openxmlformats-officedocument.wordprocessingml.document": [
			"docx"
		],
		"application/vnd.openxmlformats-officedocument.wordprocessingml.template": [
			"dotx"
		],
		"application/vnd.osgeo.mapguide.package": [
			"mgp"
		],
		"application/vnd.osgi.dp": [
			"dp"
		],
		"application/vnd.osgi.subsystem": [
			"esa"
		],
		"application/vnd.palm": [
			"pdb",
			"pqa",
			"oprc"
		],
		"application/vnd.pawaafile": [
			"paw"
		],
		"application/vnd.pg.format": [
			"str"
		],
		"application/vnd.pg.osasli": [
			"ei6"
		],
		"application/vnd.picsel": [
			"efif"
		],
		"application/vnd.pmi.widget": [
			"wg"
		],
		"application/vnd.pocketlearn": [
			"plf"
		],
		"application/vnd.powerbuilder6": [
			"pbd"
		],
		"application/vnd.previewsystems.box": [
			"box"
		],
		"application/vnd.proteus.magazine": [
			"mgz"
		],
		"application/vnd.publishare-delta-tree": [
			"qps"
		],
		"application/vnd.pvi.ptid1": [
			"ptid"
		],
		"application/vnd.quark.quarkxpress": [
			"qxd",
			"qxt",
			"qwd",
			"qwt",
			"qxl",
			"qxb"
		],
		"application/vnd.realvnc.bed": [
			"bed"
		],
		"application/vnd.recordare.musicxml": [
			"mxl"
		],
		"application/vnd.recordare.musicxml+xml": [
			"musicxml"
		],
		"application/vnd.rig.cryptonote": [
			"cryptonote"
		],
		"application/vnd.rim.cod": [
			"cod"
		],
		"application/vnd.rn-realmedia": [
			"rm"
		],
		"application/vnd.rn-realmedia-vbr": [
			"rmvb"
		],
		"application/vnd.route66.link66+xml": [
			"link66"
		],
		"application/vnd.sailingtracker.track": [
			"st"
		],
		"application/vnd.seemail": [
			"see"
		],
		"application/vnd.sema": [
			"sema"
		],
		"application/vnd.semd": [
			"semd"
		],
		"application/vnd.semf": [
			"semf"
		],
		"application/vnd.shana.informed.formdata": [
			"ifm"
		],
		"application/vnd.shana.informed.formtemplate": [
			"itp"
		],
		"application/vnd.shana.informed.interchange": [
			"iif"
		],
		"application/vnd.shana.informed.package": [
			"ipk"
		],
		"application/vnd.simtech-mindmapper": [
			"twd",
			"twds"
		],
		"application/vnd.smaf": [
			"mmf"
		],
		"application/vnd.smart.teacher": [
			"teacher"
		],
		"application/vnd.solent.sdkm+xml": [
			"sdkm",
			"sdkd"
		],
		"application/vnd.spotfire.dxp": [
			"dxp"
		],
		"application/vnd.spotfire.sfs": [
			"sfs"
		],
		"application/vnd.stardivision.calc": [
			"sdc"
		],
		"application/vnd.stardivision.draw": [
			"sda"
		],
		"application/vnd.stardivision.impress": [
			"sdd"
		],
		"application/vnd.stardivision.math": [
			"smf"
		],
		"application/vnd.stardivision.writer": [
			"sdw",
			"vor"
		],
		"application/vnd.stardivision.writer-global": [
			"sgl"
		],
		"application/vnd.stepmania.package": [
			"smzip"
		],
		"application/vnd.stepmania.stepchart": [
			"sm"
		],
		"application/vnd.sun.xml.calc": [
			"sxc"
		],
		"application/vnd.sun.xml.calc.template": [
			"stc"
		],
		"application/vnd.sun.xml.draw": [
			"sxd"
		],
		"application/vnd.sun.xml.draw.template": [
			"std"
		],
		"application/vnd.sun.xml.impress": [
			"sxi"
		],
		"application/vnd.sun.xml.impress.template": [
			"sti"
		],
		"application/vnd.sun.xml.math": [
			"sxm"
		],
		"application/vnd.sun.xml.writer": [
			"sxw"
		],
		"application/vnd.sun.xml.writer.global": [
			"sxg"
		],
		"application/vnd.sun.xml.writer.template": [
			"stw"
		],
		"application/vnd.sus-calendar": [
			"sus",
			"susp"
		],
		"application/vnd.svd": [
			"svd"
		],
		"application/vnd.symbian.install": [
			"sis",
			"sisx"
		],
		"application/vnd.syncml+xml": [
			"xsm"
		],
		"application/vnd.syncml.dm+wbxml": [
			"bdm"
		],
		"application/vnd.syncml.dm+xml": [
			"xdm"
		],
		"application/vnd.tao.intent-module-archive": [
			"tao"
		],
		"application/vnd.tcpdump.pcap": [
			"pcap",
			"cap",
			"dmp"
		],
		"application/vnd.tmobile-livetv": [
			"tmo"
		],
		"application/vnd.trid.tpt": [
			"tpt"
		],
		"application/vnd.triscape.mxs": [
			"mxs"
		],
		"application/vnd.trueapp": [
			"tra"
		],
		"application/vnd.ufdl": [
			"ufd",
			"ufdl"
		],
		"application/vnd.uiq.theme": [
			"utz"
		],
		"application/vnd.umajin": [
			"umj"
		],
		"application/vnd.unity": [
			"unityweb"
		],
		"application/vnd.uoml+xml": [
			"uoml"
		],
		"application/vnd.vcx": [
			"vcx"
		],
		"application/vnd.visio": [
			"vsd",
			"vst",
			"vss",
			"vsw"
		],
		"application/vnd.visionary": [
			"vis"
		],
		"application/vnd.vsf": [
			"vsf"
		],
		"application/vnd.wap.wbxml": [
			"wbxml"
		],
		"application/vnd.wap.wmlc": [
			"wmlc"
		],
		"application/vnd.wap.wmlscriptc": [
			"wmlsc"
		],
		"application/vnd.webturbo": [
			"wtb"
		],
		"application/vnd.wolfram.player": [
			"nbp"
		],
		"application/vnd.wordperfect": [
			"wpd"
		],
		"application/vnd.wqd": [
			"wqd"
		],
		"application/vnd.wt.stf": [
			"stf"
		],
		"application/vnd.xara": [
			"xar"
		],
		"application/vnd.xfdl": [
			"xfdl"
		],
		"application/vnd.yamaha.hv-dic": [
			"hvd"
		],
		"application/vnd.yamaha.hv-script": [
			"hvs"
		],
		"application/vnd.yamaha.hv-voice": [
			"hvp"
		],
		"application/vnd.yamaha.openscoreformat": [
			"osf"
		],
		"application/vnd.yamaha.openscoreformat.osfpvg+xml": [
			"osfpvg"
		],
		"application/vnd.yamaha.smaf-audio": [
			"saf"
		],
		"application/vnd.yamaha.smaf-phrase": [
			"spf"
		],
		"application/vnd.yellowriver-custom-menu": [
			"cmp"
		],
		"application/vnd.zul": [
			"zir",
			"zirz"
		],
		"application/vnd.zzazz.deck+xml": [
			"zaz"
		],
		"application/voicexml+xml": [
			"vxml"
		],
		"application/widget": [
			"wgt"
		],
		"application/winhlp": [
			"hlp"
		],
		"application/wsdl+xml": [
			"wsdl"
		],
		"application/wspolicy+xml": [
			"wspolicy"
		],
		"application/x-7z-compressed": [
			"7z"
		],
		"application/x-abiword": [
			"abw"
		],
		"application/x-ace-compressed": [
			"ace"
		],
		"application/x-apple-diskimage": [
			"dmg"
		],
		"application/x-authorware-bin": [
			"aab",
			"x32",
			"u32",
			"vox"
		],
		"application/x-authorware-map": [
			"aam"
		],
		"application/x-authorware-seg": [
			"aas"
		],
		"application/x-bcpio": [
			"bcpio"
		],
		"application/x-bittorrent": [
			"torrent"
		],
		"application/x-blorb": [
			"blb",
			"blorb"
		],
		"application/x-bzip": [
			"bz"
		],
		"application/x-bzip2": [
			"bz2",
			"boz"
		],
		"application/x-cbr": [
			"cbr",
			"cba",
			"cbt",
			"cbz",
			"cb7"
		],
		"application/x-cdlink": [
			"vcd"
		],
		"application/x-cfs-compressed": [
			"cfs"
		],
		"application/x-chat": [
			"chat"
		],
		"application/x-chess-pgn": [
			"pgn"
		],
		"application/x-chrome-extension": [
			"crx"
		],
		"application/x-conference": [
			"nsc"
		],
		"application/x-cpio": [
			"cpio"
		],
		"application/x-csh": [
			"csh"
		],
		"application/x-debian-package": [
			"deb",
			"udeb"
		],
		"application/x-dgc-compressed": [
			"dgc"
		],
		"application/x-director": [
			"dir",
			"dcr",
			"dxr",
			"cst",
			"cct",
			"cxt",
			"w3d",
			"fgd",
			"swa"
		],
		"application/x-doom": [
			"wad"
		],
		"application/x-dtbncx+xml": [
			"ncx"
		],
		"application/x-dtbook+xml": [
			"dtb"
		],
		"application/x-dtbresource+xml": [
			"res"
		],
		"application/x-dvi": [
			"dvi"
		],
		"application/x-envoy": [
			"evy"
		],
		"application/x-eva": [
			"eva"
		],
		"application/x-font-bdf": [
			"bdf"
		],
		"application/x-font-ghostscript": [
			"gsf"
		],
		"application/x-font-linux-psf": [
			"psf"
		],
		"application/x-font-otf": [
			"otf"
		],
		"application/x-font-pcf": [
			"pcf"
		],
		"application/x-font-snf": [
			"snf"
		],
		"application/x-font-ttf": [
			"ttf",
			"ttc"
		],
		"application/x-font-type1": [
			"pfa",
			"pfb",
			"pfm",
			"afm"
		],
		"application/x-freearc": [
			"arc"
		],
		"application/x-futuresplash": [
			"spl"
		],
		"application/x-gca-compressed": [
			"gca"
		],
		"application/x-glulx": [
			"ulx"
		],
		"application/x-gnumeric": [
			"gnumeric"
		],
		"application/x-gramps-xml": [
			"gramps"
		],
		"application/x-gtar": [
			"gtar"
		],
		"application/x-hdf": [
			"hdf"
		],
		"application/x-install-instructions": [
			"install"
		],
		"application/x-iso9660-image": [
			"iso"
		],
		"application/x-java-jnlp-file": [
			"jnlp"
		],
		"application/x-latex": [
			"latex"
		],
		"application/x-lua-bytecode": [
			"luac"
		],
		"application/x-lzh-compressed": [
			"lzh",
			"lha"
		],
		"application/x-mie": [
			"mie"
		],
		"application/x-mobipocket-ebook": [
			"prc",
			"mobi"
		],
		"application/x-ms-application": [
			"application"
		],
		"application/x-ms-shortcut": [
			"lnk"
		],
		"application/x-ms-wmd": [
			"wmd"
		],
		"application/x-ms-wmz": [
			"wmz"
		],
		"application/x-ms-xbap": [
			"xbap"
		],
		"application/x-msaccess": [
			"mdb"
		],
		"application/x-msbinder": [
			"obd"
		],
		"application/x-mscardfile": [
			"crd"
		],
		"application/x-msclip": [
			"clp"
		],
		"application/x-msdownload": [
			"exe",
			"dll",
			"com",
			"bat",
			"msi"
		],
		"application/x-msmediaview": [
			"mvb",
			"m13",
			"m14"
		],
		"application/x-msmetafile": [
			"wmf",
			"wmz",
			"emf",
			"emz"
		],
		"application/x-msmoney": [
			"mny"
		],
		"application/x-mspublisher": [
			"pub"
		],
		"application/x-msschedule": [
			"scd"
		],
		"application/x-msterminal": [
			"trm"
		],
		"application/x-mswrite": [
			"wri"
		],
		"application/x-netcdf": [
			"nc",
			"cdf"
		],
		"application/x-nzb": [
			"nzb"
		],
		"application/x-pkcs12": [
			"p12",
			"pfx"
		],
		"application/x-pkcs7-certificates": [
			"p7b",
			"spc"
		],
		"application/x-pkcs7-certreqresp": [
			"p7r"
		],
		"application/x-rar-compressed": [
			"rar"
		],
		"application/x-research-info-systems": [
			"ris"
		],
		"application/x-sh": [
			"sh"
		],
		"application/x-shar": [
			"shar"
		],
		"application/x-shockwave-flash": [
			"swf"
		],
		"application/x-silverlight-app": [
			"xap"
		],
		"application/x-sql": [
			"sql"
		],
		"application/x-stuffit": [
			"sit"
		],
		"application/x-stuffitx": [
			"sitx"
		],
		"application/x-subrip": [
			"srt"
		],
		"application/x-sv4cpio": [
			"sv4cpio"
		],
		"application/x-sv4crc": [
			"sv4crc"
		],
		"application/x-t3vm-image": [
			"t3"
		],
		"application/x-tads": [
			"gam"
		],
		"application/x-tar": [
			"tar"
		],
		"application/x-tcl": [
			"tcl"
		],
		"application/x-tex": [
			"tex"
		],
		"application/x-tex-tfm": [
			"tfm"
		],
		"application/x-texinfo": [
			"texinfo",
			"texi"
		],
		"application/x-tgif": [
			"obj"
		],
		"application/x-ustar": [
			"ustar"
		],
		"application/x-wais-source": [
			"src"
		],
		"application/x-web-app-manifest+json": [
			"webapp"
		],
		"application/x-x509-ca-cert": [
			"der",
			"crt"
		],
		"application/x-xfig": [
			"fig"
		],
		"application/x-xliff+xml": [
			"xlf"
		],
		"application/x-xpinstall": [
			"xpi"
		],
		"application/x-xz": [
			"xz"
		],
		"application/x-zmachine": [
			"z1",
			"z2",
			"z3",
			"z4",
			"z5",
			"z6",
			"z7",
			"z8"
		],
		"application/xaml+xml": [
			"xaml"
		],
		"application/xcap-diff+xml": [
			"xdf"
		],
		"application/xenc+xml": [
			"xenc"
		],
		"application/xhtml+xml": [
			"xhtml",
			"xht"
		],
		"application/xml": [
			"xml",
			"xsl",
			"xsd"
		],
		"application/xml-dtd": [
			"dtd"
		],
		"application/xop+xml": [
			"xop"
		],
		"application/xproc+xml": [
			"xpl"
		],
		"application/xslt+xml": [
			"xslt"
		],
		"application/xspf+xml": [
			"xspf"
		],
		"application/xv+xml": [
			"mxml",
			"xhvml",
			"xvml",
			"xvm"
		],
		"application/yang": [
			"yang"
		],
		"application/yin+xml": [
			"yin"
		],
		"application/zip": [
			"zip"
		],
		"audio/adpcm": [
			"adp"
		],
		"audio/basic": [
			"au",
			"snd"
		],
		"audio/midi": [
			"mid",
			"midi",
			"kar",
			"rmi"
		],
		"audio/mp4": [
			"mp4a",
			"m4a"
		],
		"audio/mpeg": [
			"mpga",
			"mp2",
			"mp2a",
			"mp3",
			"m2a",
			"m3a"
		],
		"audio/ogg": [
			"oga",
			"ogg",
			"spx"
		],
		"audio/s3m": [
			"s3m"
		],
		"audio/silk": [
			"sil"
		],
		"audio/vnd.dece.audio": [
			"uva",
			"uvva"
		],
		"audio/vnd.digital-winds": [
			"eol"
		],
		"audio/vnd.dra": [
			"dra"
		],
		"audio/vnd.dts": [
			"dts"
		],
		"audio/vnd.dts.hd": [
			"dtshd"
		],
		"audio/vnd.lucent.voice": [
			"lvp"
		],
		"audio/vnd.ms-playready.media.pya": [
			"pya"
		],
		"audio/vnd.nuera.ecelp4800": [
			"ecelp4800"
		],
		"audio/vnd.nuera.ecelp7470": [
			"ecelp7470"
		],
		"audio/vnd.nuera.ecelp9600": [
			"ecelp9600"
		],
		"audio/vnd.rip": [
			"rip"
		],
		"audio/webm": [
			"weba"
		],
		"audio/x-aac": [
			"aac"
		],
		"audio/x-aiff": [
			"aif",
			"aiff",
			"aifc"
		],
		"audio/x-caf": [
			"caf"
		],
		"audio/x-flac": [
			"flac"
		],
		"audio/x-matroska": [
			"mka"
		],
		"audio/x-mpegurl": [
			"m3u"
		],
		"audio/x-ms-wax": [
			"wax"
		],
		"audio/x-ms-wma": [
			"wma"
		],
		"audio/x-pn-realaudio": [
			"ram",
			"ra"
		],
		"audio/x-pn-realaudio-plugin": [
			"rmp"
		],
		"audio/x-wav": [
			"wav"
		],
		"audio/xm": [
			"xm"
		],
		"chemical/x-cdx": [
			"cdx"
		],
		"chemical/x-cif": [
			"cif"
		],
		"chemical/x-cmdf": [
			"cmdf"
		],
		"chemical/x-cml": [
			"cml"
		],
		"chemical/x-csml": [
			"csml"
		],
		"chemical/x-xyz": [
			"xyz"
		],
		"font/opentype": [
			"otf"
		],
		"image/bmp": [
			"bmp"
		],
		"image/cgm": [
			"cgm"
		],
		"image/g3fax": [
			"g3"
		],
		"image/gif": [
			"gif"
		],
		"image/ief": [
			"ief"
		],
		"image/jpeg": [
			"jpeg",
			"jpg",
			"jpe"
		],
		"image/ktx": [
			"ktx"
		],
		"image/png": [
			"png"
		],
		"image/prs.btif": [
			"btif"
		],
		"image/sgi": [
			"sgi"
		],
		"image/svg+xml": [
			"svg",
			"svgz"
		],
		"image/tiff": [
			"tiff",
			"tif"
		],
		"image/vnd.adobe.photoshop": [
			"psd"
		],
		"image/vnd.dece.graphic": [
			"uvi",
			"uvvi",
			"uvg",
			"uvvg"
		],
		"image/vnd.djvu": [
			"djvu",
			"djv"
		],
		"image/vnd.dvb.subtitle": [
			"sub"
		],
		"image/vnd.dwg": [
			"dwg"
		],
		"image/vnd.dxf": [
			"dxf"
		],
		"image/vnd.fastbidsheet": [
			"fbs"
		],
		"image/vnd.fpx": [
			"fpx"
		],
		"image/vnd.fst": [
			"fst"
		],
		"image/vnd.fujixerox.edmics-mmr": [
			"mmr"
		],
		"image/vnd.fujixerox.edmics-rlc": [
			"rlc"
		],
		"image/vnd.ms-modi": [
			"mdi"
		],
		"image/vnd.ms-photo": [
			"wdp"
		],
		"image/vnd.net-fpx": [
			"npx"
		],
		"image/vnd.wap.wbmp": [
			"wbmp"
		],
		"image/vnd.xiff": [
			"xif"
		],
		"image/webp": [
			"webp"
		],
		"image/x-3ds": [
			"3ds"
		],
		"image/x-cmu-raster": [
			"ras"
		],
		"image/x-cmx": [
			"cmx"
		],
		"image/x-freehand": [
			"fh",
			"fhc",
			"fh4",
			"fh5",
			"fh7"
		],
		"image/x-icon": [
			"ico"
		],
		"image/x-mrsid-image": [
			"sid"
		],
		"image/x-pcx": [
			"pcx"
		],
		"image/x-pict": [
			"pic",
			"pct"
		],
		"image/x-portable-anymap": [
			"pnm"
		],
		"image/x-portable-bitmap": [
			"pbm"
		],
		"image/x-portable-graymap": [
			"pgm"
		],
		"image/x-portable-pixmap": [
			"ppm"
		],
		"image/x-rgb": [
			"rgb"
		],
		"image/x-tga": [
			"tga"
		],
		"image/x-xbitmap": [
			"xbm"
		],
		"image/x-xpixmap": [
			"xpm"
		],
		"image/x-xwindowdump": [
			"xwd"
		],
		"message/rfc822": [
			"eml",
			"mime"
		],
		"model/iges": [
			"igs",
			"iges"
		],
		"model/mesh": [
			"msh",
			"mesh",
			"silo"
		],
		"model/vnd.collada+xml": [
			"dae"
		],
		"model/vnd.dwf": [
			"dwf"
		],
		"model/vnd.gdl": [
			"gdl"
		],
		"model/vnd.gtw": [
			"gtw"
		],
		"model/vnd.mts": [
			"mts"
		],
		"model/vnd.vtu": [
			"vtu"
		],
		"model/vrml": [
			"wrl",
			"vrml"
		],
		"model/x3d+binary": [
			"x3db",
			"x3dbz"
		],
		"model/x3d+vrml": [
			"x3dv",
			"x3dvz"
		],
		"model/x3d+xml": [
			"x3d",
			"x3dz"
		],
		"text/cache-manifest": [
			"appcache",
			"manifest"
		],
		"text/calendar": [
			"ics",
			"ifb"
		],
		"text/coffeescript": [
			"coffee"
		],
		"text/css": [
			"css"
		],
		"text/csv": [
			"csv"
		],
		"text/hjson": [
			"hjson"
		],
		"text/html": [
			"html",
			"htm"
		],
		"text/jade": [
			"jade"
		],
		"text/jsx": [
			"jsx"
		],
		"text/less": [
			"less"
		],
		"text/n3": [
			"n3"
		],
		"text/plain": [
			"txt",
			"text",
			"conf",
			"def",
			"list",
			"log",
			"in",
			"ini"
		],
		"text/prs.lines.tag": [
			"dsc"
		],
		"text/richtext": [
			"rtx"
		],
		"text/sgml": [
			"sgml",
			"sgm"
		],
		"text/stylus": [
			"stylus",
			"styl"
		],
		"text/tab-separated-values": [
			"tsv"
		],
		"text/troff": [
			"t",
			"tr",
			"roff",
			"man",
			"me",
			"ms"
		],
		"text/turtle": [
			"ttl"
		],
		"text/uri-list": [
			"uri",
			"uris",
			"urls"
		],
		"text/vcard": [
			"vcard"
		],
		"text/vnd.curl": [
			"curl"
		],
		"text/vnd.curl.dcurl": [
			"dcurl"
		],
		"text/vnd.curl.mcurl": [
			"mcurl"
		],
		"text/vnd.curl.scurl": [
			"scurl"
		],
		"text/vnd.dvb.subtitle": [
			"sub"
		],
		"text/vnd.fly": [
			"fly"
		],
		"text/vnd.fmi.flexstor": [
			"flx"
		],
		"text/vnd.graphviz": [
			"gv"
		],
		"text/vnd.in3d.3dml": [
			"3dml"
		],
		"text/vnd.in3d.spot": [
			"spot"
		],
		"text/vnd.sun.j2me.app-descriptor": [
			"jad"
		],
		"text/vnd.wap.wml": [
			"wml"
		],
		"text/vnd.wap.wmlscript": [
			"wmls"
		],
		"text/vtt": [
			"vtt"
		],
		"text/x-asm": [
			"s",
			"asm"
		],
		"text/x-c": [
			"c",
			"cc",
			"cxx",
			"cpp",
			"h",
			"hh",
			"dic"
		],
		"text/x-component": [
			"htc"
		],
		"text/x-fortran": [
			"f",
			"for",
			"f77",
			"f90"
		],
		"text/x-handlebars-template": [
			"hbs"
		],
		"text/x-java-source": [
			"java"
		],
		"text/x-lua": [
			"lua"
		],
		"text/x-markdown": [
			"markdown",
			"md",
			"mkd"
		],
		"text/x-nfo": [
			"nfo"
		],
		"text/x-opml": [
			"opml"
		],
		"text/x-pascal": [
			"p",
			"pas"
		],
		"text/x-sass": [
			"sass"
		],
		"text/x-scss": [
			"scss"
		],
		"text/x-setext": [
			"etx"
		],
		"text/x-sfv": [
			"sfv"
		],
		"text/x-uuencode": [
			"uu"
		],
		"text/x-vcalendar": [
			"vcs"
		],
		"text/x-vcard": [
			"vcf"
		],
		"text/yaml": [
			"yaml",
			"yml"
		],
		"video/3gpp": [
			"3gp"
		],
		"video/3gpp2": [
			"3g2"
		],
		"video/h261": [
			"h261"
		],
		"video/h263": [
			"h263"
		],
		"video/h264": [
			"h264"
		],
		"video/jpeg": [
			"jpgv"
		],
		"video/jpm": [
			"jpm",
			"jpgm"
		],
		"video/mj2": [
			"mj2",
			"mjp2"
		],
		"video/mp2t": [
			"ts"
		],
		"video/mp4": [
			"mp4",
			"mp4v",
			"mpg4"
		],
		"video/mpeg": [
			"mpeg",
			"mpg",
			"mpe",
			"m1v",
			"m2v"
		],
		"video/ogg": [
			"ogv"
		],
		"video/quicktime": [
			"qt",
			"mov"
		],
		"video/vnd.dece.hd": [
			"uvh",
			"uvvh"
		],
		"video/vnd.dece.mobile": [
			"uvm",
			"uvvm"
		],
		"video/vnd.dece.pd": [
			"uvp",
			"uvvp"
		],
		"video/vnd.dece.sd": [
			"uvs",
			"uvvs"
		],
		"video/vnd.dece.video": [
			"uvv",
			"uvvv"
		],
		"video/vnd.dvb.file": [
			"dvb"
		],
		"video/vnd.fvt": [
			"fvt"
		],
		"video/vnd.mpegurl": [
			"mxu",
			"m4u"
		],
		"video/vnd.ms-playready.media.pyv": [
			"pyv"
		],
		"video/vnd.uvvu.mp4": [
			"uvu",
			"uvvu"
		],
		"video/vnd.vivo": [
			"viv"
		],
		"video/webm": [
			"webm"
		],
		"video/x-f4v": [
			"f4v"
		],
		"video/x-fli": [
			"fli"
		],
		"video/x-flv": [
			"flv"
		],
		"video/x-m4v": [
			"m4v"
		],
		"video/x-matroska": [
			"mkv",
			"mk3d",
			"mks"
		],
		"video/x-mng": [
			"mng"
		],
		"video/x-ms-asf": [
			"asf",
			"asx"
		],
		"video/x-ms-vob": [
			"vob"
		],
		"video/x-ms-wm": [
			"wm"
		],
		"video/x-ms-wmv": [
			"wmv"
		],
		"video/x-ms-wmx": [
			"wmx"
		],
		"video/x-ms-wvx": [
			"wvx"
		],
		"video/x-msvideo": [
			"avi"
		],
		"video/x-sgi-movie": [
			"movie"
		],
		"video/x-smv": [
			"smv"
		],
		"x-conference/x-cooltalk": [
			"ice"
		]
	};

/***/ },
/* 407 */
/***/ function(module, exports) {

	/*!
	 * range-parser
	 * Copyright(c) 2012-2014 TJ Holowaychuk
	 * Copyright(c) 2015-2016 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = rangeParser
	
	/**
	 * Parse "Range" header `str` relative to the given file `size`.
	 *
	 * @param {Number} size
	 * @param {String} str
	 * @param {Object} [options]
	 * @return {Array}
	 * @public
	 */
	
	function rangeParser (size, str, options) {
	  var index = str.indexOf('=')
	
	  if (index === -1) {
	    return -2
	  }
	
	  // split the range string
	  var arr = str.slice(index + 1).split(',')
	  var ranges = []
	
	  // add ranges type
	  ranges.type = str.slice(0, index)
	
	  // parse all ranges
	  for (var i = 0; i < arr.length; i++) {
	    var range = arr[i].split('-')
	    var start = parseInt(range[0], 10)
	    var end = parseInt(range[1], 10)
	
	    // -nnn
	    if (isNaN(start)) {
	      start = size - end
	      end = size - 1
	    // nnn-
	    } else if (isNaN(end)) {
	      end = size - 1
	    }
	
	    // limit last-byte-pos to current length
	    if (end > size - 1) {
	      end = size - 1
	    }
	
	    // invalid or unsatisifiable
	    if (isNaN(start) || isNaN(end) || start > end || start < 0) {
	      continue
	    }
	
	    // add range
	    ranges.push({
	      start: start,
	      end: end
	    })
	  }
	
	  if (ranges.length < 1) {
	    // unsatisifiable
	    return -1
	  }
	
	  return options && options.combine
	    ? combineRanges(ranges)
	    : ranges
	}
	
	/**
	 * Combine overlapping & adjacent ranges.
	 * @private
	 */
	
	function combineRanges (ranges) {
	  var ordered = ranges.map(mapWithIndex).sort(sortByRangeStart)
	
	  for (var j = 0, i = 1; i < ordered.length; i++) {
	    var range = ordered[i]
	    var current = ordered[j]
	
	    if (range.start > current.end + 1) {
	      // next range
	      ordered[++j] = range
	    } else if (range.end > current.end) {
	      // extend range
	      current.end = range.end
	      current.index = Math.min(current.index, range.index)
	    }
	  }
	
	  // trim ordered array
	  ordered.length = j + 1
	
	  // generate combined range
	  var combined = ordered.sort(sortByRangeIndex).map(mapWithoutIndex)
	
	  // copy ranges type
	  combined.type = ranges.type
	
	  return combined
	}
	
	/**
	 * Map function to add index value to ranges.
	 * @private
	 */
	
	function mapWithIndex (range, index) {
	  return {
	    start: range.start,
	    end: range.end,
	    index: index
	  }
	}
	
	/**
	 * Map function to remove index value from ranges.
	 * @private
	 */
	
	function mapWithoutIndex (range) {
	  return {
	    start: range.start,
	    end: range.end
	  }
	}
	
	/**
	 * Sort function to sort ranges by index.
	 * @private
	 */
	
	function sortByRangeIndex (a, b) {
	  return a.index - b.index
	}
	
	/**
	 * Sort function to sort ranges by start position.
	 * @private
	 */
	
	function sortByRangeStart (a, b) {
	  return a.start - b.start
	}


/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * proxy-addr
	 * Copyright(c) 2014-2016 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module exports.
	 */
	
	module.exports = proxyaddr;
	module.exports.all = alladdrs;
	module.exports.compile = compile;
	
	/**
	 * Module dependencies.
	 */
	
	var forwarded = __webpack_require__(409);
	var ipaddr = __webpack_require__(410);
	
	/**
	 * Variables.
	 */
	
	var digitre = /^[0-9]+$/;
	var isip = ipaddr.isValid;
	var parseip = ipaddr.parse;
	
	/**
	 * Pre-defined IP ranges.
	 */
	
	var ipranges = {
	  linklocal: ['169.254.0.0/16', 'fe80::/10'],
	  loopback: ['127.0.0.1/8', '::1/128'],
	  uniquelocal: ['10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16', 'fc00::/7']
	};
	
	/**
	 * Get all addresses in the request, optionally stopping
	 * at the first untrusted.
	 *
	 * @param {Object} request
	 * @param {Function|Array|String} [trust]
	 * @api public
	 */
	
	function alladdrs(req, trust) {
	  // get addresses
	  var addrs = forwarded(req);
	
	  if (!trust) {
	    // Return all addresses
	    return addrs;
	  }
	
	  if (typeof trust !== 'function') {
	    trust = compile(trust);
	  }
	
	  for (var i = 0; i < addrs.length - 1; i++) {
	    if (trust(addrs[i], i)) continue;
	
	    addrs.length = i + 1;
	  }
	
	  return addrs;
	}
	
	/**
	 * Compile argument into trust function.
	 *
	 * @param {Array|String} val
	 * @api private
	 */
	
	function compile(val) {
	  if (!val) {
	    throw new TypeError('argument is required');
	  }
	
	  var trust = typeof val === 'string'
	    ? [val]
	    : val;
	
	  if (!Array.isArray(trust)) {
	    throw new TypeError('unsupported trust argument');
	  }
	
	  for (var i = 0; i < trust.length; i++) {
	    val = trust[i];
	
	    if (!ipranges.hasOwnProperty(val)) {
	      continue;
	    }
	
	    // Splice in pre-defined range
	    val = ipranges[val];
	    trust.splice.apply(trust, [i, 1].concat(val));
	    i += val.length - 1;
	  }
	
	  return compileTrust(compileRangeSubnets(trust));
	}
	
	/**
	 * Compile `arr` elements into range subnets.
	 *
	 * @param {Array} arr
	 * @api private
	 */
	
	function compileRangeSubnets(arr) {
	  var rangeSubnets = new Array(arr.length);
	
	  for (var i = 0; i < arr.length; i++) {
	    rangeSubnets[i] = parseipNotation(arr[i]);
	  }
	
	  return rangeSubnets;
	}
	
	/**
	 * Compile range subnet array into trust function.
	 *
	 * @param {Array} rangeSubnets
	 * @api private
	 */
	
	function compileTrust(rangeSubnets) {
	  // Return optimized function based on length
	  var len = rangeSubnets.length;
	  return len === 0
	    ? trustNone
	    : len === 1
	    ? trustSingle(rangeSubnets[0])
	    : trustMulti(rangeSubnets);
	}
	
	/**
	 * Parse IP notation string into range subnet.
	 *
	 * @param {String} note
	 * @api private
	 */
	
	function parseipNotation(note) {
	  var pos = note.lastIndexOf('/');
	  var str = pos !== -1
	    ? note.substring(0, pos)
	    : note;
	
	  if (!isip(str)) {
	    throw new TypeError('invalid IP address: ' + str);
	  }
	
	  var ip = parseip(str);
	
	  if (pos === -1 && ip.kind() === 'ipv6' && ip.isIPv4MappedAddress()) {
	    // Store as IPv4
	    ip = ip.toIPv4Address();
	  }
	
	  var max = ip.kind() === 'ipv6'
	    ? 128
	    : 32;
	
	  var range = pos !== -1
	    ? note.substring(pos + 1, note.length)
	    : null;
	
	  if (range === null) {
	    range = max;
	  } else if (digitre.test(range)) {
	    range = parseInt(range, 10);
	  } else if (ip.kind() === 'ipv4' && isip(range)) {
	    range = parseNetmask(range);
	  } else {
	    range = null;
	  }
	
	  if (range <= 0 || range > max) {
	    throw new TypeError('invalid range on address: ' + note);
	  }
	
	  return [ip, range];
	}
	
	/**
	 * Parse netmask string into CIDR range.
	 *
	 * @param {String} netmask
	 * @api private
	 */
	
	function parseNetmask(netmask) {
	  var ip = parseip(netmask);
	  var kind = ip.kind();
	
	  return kind === 'ipv4'
	    ? ip.prefixLengthFromSubnetMask()
	    : null;
	}
	
	/**
	 * Determine address of proxied request.
	 *
	 * @param {Object} request
	 * @param {Function|Array|String} trust
	 * @api public
	 */
	
	function proxyaddr(req, trust) {
	  if (!req) {
	    throw new TypeError('req argument is required');
	  }
	
	  if (!trust) {
	    throw new TypeError('trust argument is required');
	  }
	
	  var addrs = alladdrs(req, trust);
	  var addr = addrs[addrs.length - 1];
	
	  return addr;
	}
	
	/**
	 * Static trust function to trust nothing.
	 *
	 * @api private
	 */
	
	function trustNone() {
	  return false;
	}
	
	/**
	 * Compile trust function for multiple subnets.
	 *
	 * @param {Array} subnets
	 * @api private
	 */
	
	function trustMulti(subnets) {
	  return function trust(addr) {
	    if (!isip(addr)) return false;
	
	    var ip = parseip(addr);
	    var ipconv;
	    var kind = ip.kind();
	
	    for (var i = 0; i < subnets.length; i++) {
	      var subnet = subnets[i];
	      var subnetip = subnet[0];
	      var subnetkind = subnetip.kind();
	      var subnetrange = subnet[1];
	      var trusted = ip;
	
	      if (kind !== subnetkind) {
	        if (subnetkind === 'ipv4' && !ip.isIPv4MappedAddress()) {
	          // Incompatible IP addresses
	          continue;
	        }
	
	        if (!ipconv) {
	          // Convert IP to match subnet IP kind
	          ipconv = subnetkind === 'ipv4'
	            ? ip.toIPv4Address()
	            : ip.toIPv4MappedAddress();
	        }
	
	        trusted = ipconv;
	      }
	
	      if (trusted.match(subnetip, subnetrange)) {
	        return true;
	      }
	    }
	
	    return false;
	  };
	}
	
	/**
	 * Compile trust function for single subnet.
	 *
	 * @param {Object} subnet
	 * @api private
	 */
	
	function trustSingle(subnet) {
	  var subnetip = subnet[0];
	  var subnetkind = subnetip.kind();
	  var subnetisipv4 = subnetkind === 'ipv4';
	  var subnetrange = subnet[1];
	
	  return function trust(addr) {
	    if (!isip(addr)) return false;
	
	    var ip = parseip(addr);
	    var kind = ip.kind();
	
	    if (kind !== subnetkind) {
	      if (subnetisipv4 && !ip.isIPv4MappedAddress()) {
	        // Incompatible IP addresses
	        return false;
	      }
	
	      // Convert IP to match subnet IP kind
	      ip = subnetisipv4
	        ? ip.toIPv4Address()
	        : ip.toIPv4MappedAddress();
	    }
	
	    return ip.match(subnetip, subnetrange);
	  };
	}


/***/ },
/* 409 */
/***/ function(module, exports) {

	/*!
	 * forwarded
	 * Copyright(c) 2014 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	/**
	 * Module exports.
	 */
	
	module.exports = forwarded
	
	/**
	 * Get all addresses in the request, using the `X-Forwarded-For` header.
	 *
	 * @param {Object} req
	 * @api public
	 */
	
	function forwarded(req) {
	  if (!req) {
	    throw new TypeError('argument req is required')
	  }
	
	  // simple header parsing
	  var proxyAddrs = (req.headers['x-forwarded-for'] || '')
	    .split(/ *, */)
	    .filter(Boolean)
	    .reverse()
	  var socketAddr = req.connection.remoteAddress
	  var addrs = [socketAddr].concat(proxyAddrs)
	
	  // return all addresses
	  return addrs
	}


/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {(function() {
	  var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root;
	
	  ipaddr = {};
	
	  root = this;
	
	  if ((typeof module !== "undefined" && module !== null) && module.exports) {
	    module.exports = ipaddr;
	  } else {
	    root['ipaddr'] = ipaddr;
	  }
	
	  matchCIDR = function(first, second, partSize, cidrBits) {
	    var part, shift;
	    if (first.length !== second.length) {
	      throw new Error("ipaddr: cannot match CIDR for objects with different lengths");
	    }
	    part = 0;
	    while (cidrBits > 0) {
	      shift = partSize - cidrBits;
	      if (shift < 0) {
	        shift = 0;
	      }
	      if (first[part] >> shift !== second[part] >> shift) {
	        return false;
	      }
	      cidrBits -= partSize;
	      part += 1;
	    }
	    return true;
	  };
	
	  ipaddr.subnetMatch = function(address, rangeList, defaultName) {
	    var rangeName, rangeSubnets, subnet, _i, _len;
	    if (defaultName == null) {
	      defaultName = 'unicast';
	    }
	    for (rangeName in rangeList) {
	      rangeSubnets = rangeList[rangeName];
	      if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {
	        rangeSubnets = [rangeSubnets];
	      }
	      for (_i = 0, _len = rangeSubnets.length; _i < _len; _i++) {
	        subnet = rangeSubnets[_i];
	        if (address.match.apply(address, subnet)) {
	          return rangeName;
	        }
	      }
	    }
	    return defaultName;
	  };
	
	  ipaddr.IPv4 = (function() {
	    function IPv4(octets) {
	      var octet, _i, _len;
	      if (octets.length !== 4) {
	        throw new Error("ipaddr: ipv4 octet count should be 4");
	      }
	      for (_i = 0, _len = octets.length; _i < _len; _i++) {
	        octet = octets[_i];
	        if (!((0 <= octet && octet <= 255))) {
	          throw new Error("ipaddr: ipv4 octet should fit in 8 bits");
	        }
	      }
	      this.octets = octets;
	    }
	
	    IPv4.prototype.kind = function() {
	      return 'ipv4';
	    };
	
	    IPv4.prototype.toString = function() {
	      return this.octets.join(".");
	    };
	
	    IPv4.prototype.toByteArray = function() {
	      return this.octets.slice(0);
	    };
	
	    IPv4.prototype.match = function(other, cidrRange) {
	      var _ref;
	      if (cidrRange === void 0) {
	        _ref = other, other = _ref[0], cidrRange = _ref[1];
	      }
	      if (other.kind() !== 'ipv4') {
	        throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");
	      }
	      return matchCIDR(this.octets, other.octets, 8, cidrRange);
	    };
	
	    IPv4.prototype.SpecialRanges = {
	      unspecified: [[new IPv4([0, 0, 0, 0]), 8]],
	      broadcast: [[new IPv4([255, 255, 255, 255]), 32]],
	      multicast: [[new IPv4([224, 0, 0, 0]), 4]],
	      linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],
	      loopback: [[new IPv4([127, 0, 0, 0]), 8]],
	      "private": [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],
	      reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]
	    };
	
	    IPv4.prototype.range = function() {
	      return ipaddr.subnetMatch(this, this.SpecialRanges);
	    };
	
	    IPv4.prototype.toIPv4MappedAddress = function() {
	      return ipaddr.IPv6.parse("::ffff:" + (this.toString()));
	    };
	
	    IPv4.prototype.prefixLengthFromSubnetMask = function() {
	      var cidr, i, octet, stop, zeros, zerotable, _i;
	      zerotable = {
	        0: 8,
	        128: 7,
	        192: 6,
	        224: 5,
	        240: 4,
	        248: 3,
	        252: 2,
	        254: 1,
	        255: 0
	      };
	      cidr = 0;
	      stop = false;
	      for (i = _i = 3; _i >= 0; i = _i += -1) {
	        octet = this.octets[i];
	        if (octet in zerotable) {
	          zeros = zerotable[octet];
	          if (stop && zeros !== 0) {
	            return null;
	          }
	          if (zeros !== 8) {
	            stop = true;
	          }
	          cidr += zeros;
	        } else {
	          return null;
	        }
	      }
	      return 32 - cidr;
	    };
	
	    return IPv4;
	
	  })();
	
	  ipv4Part = "(0?\\d+|0x[a-f0-9]+)";
	
	  ipv4Regexes = {
	    fourOctet: new RegExp("^" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$", 'i'),
	    longValue: new RegExp("^" + ipv4Part + "$", 'i')
	  };
	
	  ipaddr.IPv4.parser = function(string) {
	    var match, parseIntAuto, part, shift, value;
	    parseIntAuto = function(string) {
	      if (string[0] === "0" && string[1] !== "x") {
	        return parseInt(string, 8);
	      } else {
	        return parseInt(string);
	      }
	    };
	    if (match = string.match(ipv4Regexes.fourOctet)) {
	      return (function() {
	        var _i, _len, _ref, _results;
	        _ref = match.slice(1, 6);
	        _results = [];
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          part = _ref[_i];
	          _results.push(parseIntAuto(part));
	        }
	        return _results;
	      })();
	    } else if (match = string.match(ipv4Regexes.longValue)) {
	      value = parseIntAuto(match[1]);
	      if (value > 0xffffffff || value < 0) {
	        throw new Error("ipaddr: address outside defined range");
	      }
	      return ((function() {
	        var _i, _results;
	        _results = [];
	        for (shift = _i = 0; _i <= 24; shift = _i += 8) {
	          _results.push((value >> shift) & 0xff);
	        }
	        return _results;
	      })()).reverse();
	    } else {
	      return null;
	    }
	  };
	
	  ipaddr.IPv6 = (function() {
	    function IPv6(parts) {
	      var i, part, _i, _j, _len, _ref;
	      if (parts.length === 16) {
	        this.parts = [];
	        for (i = _i = 0; _i <= 14; i = _i += 2) {
	          this.parts.push((parts[i] << 8) | parts[i + 1]);
	        }
	      } else if (parts.length === 8) {
	        this.parts = parts;
	      } else {
	        throw new Error("ipaddr: ipv6 part count should be 8 or 16");
	      }
	      _ref = this.parts;
	      for (_j = 0, _len = _ref.length; _j < _len; _j++) {
	        part = _ref[_j];
	        if (!((0 <= part && part <= 0xffff))) {
	          throw new Error("ipaddr: ipv6 part should fit in 16 bits");
	        }
	      }
	    }
	
	    IPv6.prototype.kind = function() {
	      return 'ipv6';
	    };
	
	    IPv6.prototype.toString = function() {
	      var compactStringParts, part, pushPart, state, stringParts, _i, _len;
	      stringParts = (function() {
	        var _i, _len, _ref, _results;
	        _ref = this.parts;
	        _results = [];
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          part = _ref[_i];
	          _results.push(part.toString(16));
	        }
	        return _results;
	      }).call(this);
	      compactStringParts = [];
	      pushPart = function(part) {
	        return compactStringParts.push(part);
	      };
	      state = 0;
	      for (_i = 0, _len = stringParts.length; _i < _len; _i++) {
	        part = stringParts[_i];
	        switch (state) {
	          case 0:
	            if (part === '0') {
	              pushPart('');
	            } else {
	              pushPart(part);
	            }
	            state = 1;
	            break;
	          case 1:
	            if (part === '0') {
	              state = 2;
	            } else {
	              pushPart(part);
	            }
	            break;
	          case 2:
	            if (part !== '0') {
	              pushPart('');
	              pushPart(part);
	              state = 3;
	            }
	            break;
	          case 3:
	            pushPart(part);
	        }
	      }
	      if (state === 2) {
	        pushPart('');
	        pushPart('');
	      }
	      return compactStringParts.join(":");
	    };
	
	    IPv6.prototype.toByteArray = function() {
	      var bytes, part, _i, _len, _ref;
	      bytes = [];
	      _ref = this.parts;
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        part = _ref[_i];
	        bytes.push(part >> 8);
	        bytes.push(part & 0xff);
	      }
	      return bytes;
	    };
	
	    IPv6.prototype.toNormalizedString = function() {
	      var part;
	      return ((function() {
	        var _i, _len, _ref, _results;
	        _ref = this.parts;
	        _results = [];
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          part = _ref[_i];
	          _results.push(part.toString(16));
	        }
	        return _results;
	      }).call(this)).join(":");
	    };
	
	    IPv6.prototype.match = function(other, cidrRange) {
	      var _ref;
	      if (cidrRange === void 0) {
	        _ref = other, other = _ref[0], cidrRange = _ref[1];
	      }
	      if (other.kind() !== 'ipv6') {
	        throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");
	      }
	      return matchCIDR(this.parts, other.parts, 16, cidrRange);
	    };
	
	    IPv6.prototype.SpecialRanges = {
	      unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],
	      linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],
	      multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],
	      loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],
	      uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],
	      ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],
	      rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],
	      rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],
	      '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],
	      teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],
	      reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]
	    };
	
	    IPv6.prototype.range = function() {
	      return ipaddr.subnetMatch(this, this.SpecialRanges);
	    };
	
	    IPv6.prototype.isIPv4MappedAddress = function() {
	      return this.range() === 'ipv4Mapped';
	    };
	
	    IPv6.prototype.toIPv4Address = function() {
	      var high, low, _ref;
	      if (!this.isIPv4MappedAddress()) {
	        throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");
	      }
	      _ref = this.parts.slice(-2), high = _ref[0], low = _ref[1];
	      return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);
	    };
	
	    return IPv6;
	
	  })();
	
	  ipv6Part = "(?:[0-9a-f]+::?)+";
	
	  ipv6Regexes = {
	    "native": new RegExp("^(::)?(" + ipv6Part + ")?([0-9a-f]+)?(::)?$", 'i'),
	    transitional: new RegExp(("^((?:" + ipv6Part + ")|(?:::)(?:" + ipv6Part + ")?)") + ("" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$"), 'i')
	  };
	
	  expandIPv6 = function(string, parts) {
	    var colonCount, lastColon, part, replacement, replacementCount;
	    if (string.indexOf('::') !== string.lastIndexOf('::')) {
	      return null;
	    }
	    colonCount = 0;
	    lastColon = -1;
	    while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {
	      colonCount++;
	    }
	    if (string.substr(0, 2) === '::') {
	      colonCount--;
	    }
	    if (string.substr(-2, 2) === '::') {
	      colonCount--;
	    }
	    if (colonCount > parts) {
	      return null;
	    }
	    replacementCount = parts - colonCount;
	    replacement = ':';
	    while (replacementCount--) {
	      replacement += '0:';
	    }
	    string = string.replace('::', replacement);
	    if (string[0] === ':') {
	      string = string.slice(1);
	    }
	    if (string[string.length - 1] === ':') {
	      string = string.slice(0, -1);
	    }
	    return (function() {
	      var _i, _len, _ref, _results;
	      _ref = string.split(":");
	      _results = [];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        part = _ref[_i];
	        _results.push(parseInt(part, 16));
	      }
	      return _results;
	    })();
	  };
	
	  ipaddr.IPv6.parser = function(string) {
	    var match, octet, octets, parts, _i, _len;
	    if (string.match(ipv6Regexes['native'])) {
	      return expandIPv6(string, 8);
	    } else if (match = string.match(ipv6Regexes['transitional'])) {
	      parts = expandIPv6(match[1].slice(0, -1), 6);
	      if (parts) {
	        octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];
	        for (_i = 0, _len = octets.length; _i < _len; _i++) {
	          octet = octets[_i];
	          if (!((0 <= octet && octet <= 255))) {
	            return null;
	          }
	        }
	        parts.push(octets[0] << 8 | octets[1]);
	        parts.push(octets[2] << 8 | octets[3]);
	        return parts;
	      }
	    }
	    return null;
	  };
	
	  ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function(string) {
	    return this.parser(string) !== null;
	  };
	
	  ipaddr.IPv4.isValid = function(string) {
	    var e;
	    try {
	      new this(this.parser(string));
	      return true;
	    } catch (_error) {
	      e = _error;
	      return false;
	    }
	  };
	
	  ipaddr.IPv6.isValid = function(string) {
	    var e;
	    if (typeof string === "string" && string.indexOf(":") === -1) {
	      return false;
	    }
	    try {
	      new this(this.parser(string));
	      return true;
	    } catch (_error) {
	      e = _error;
	      return false;
	    }
	  };
	
	  ipaddr.IPv4.parse = ipaddr.IPv6.parse = function(string) {
	    var parts;
	    parts = this.parser(string);
	    if (parts === null) {
	      throw new Error("ipaddr: string is not formatted like ip address");
	    }
	    return new this(parts);
	  };
	
	  ipaddr.IPv4.parseCIDR = function(string) {
	    var maskLength, match;
	    if (match = string.match(/^(.+)\/(\d+)$/)) {
	      maskLength = parseInt(match[2]);
	      if (maskLength >= 0 && maskLength <= 32) {
	        return [this.parse(match[1]), maskLength];
	      }
	    }
	    throw new Error("ipaddr: string is not formatted like an IPv4 CIDR range");
	  };
	
	  ipaddr.IPv6.parseCIDR = function(string) {
	    var maskLength, match;
	    if (match = string.match(/^(.+)\/(\d+)$/)) {
	      maskLength = parseInt(match[2]);
	      if (maskLength >= 0 && maskLength <= 128) {
	        return [this.parse(match[1]), maskLength];
	      }
	    }
	    throw new Error("ipaddr: string is not formatted like an IPv6 CIDR range");
	  };
	
	  ipaddr.isValid = function(string) {
	    return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);
	  };
	
	  ipaddr.parse = function(string) {
	    if (ipaddr.IPv6.isValid(string)) {
	      return ipaddr.IPv6.parse(string);
	    } else if (ipaddr.IPv4.isValid(string)) {
	      return ipaddr.IPv4.parse(string);
	    } else {
	      throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format");
	    }
	  };
	
	  ipaddr.parseCIDR = function(string) {
	    var e;
	    try {
	      return ipaddr.IPv6.parseCIDR(string);
	    } catch (_error) {
	      e = _error;
	      try {
	        return ipaddr.IPv4.parseCIDR(string);
	      } catch (_error) {
	        e = _error;
	        throw new Error("ipaddr: the address has neither IPv6 nor IPv4 CIDR format");
	      }
	    }
	  };
	
	  ipaddr.fromByteArray = function(bytes) {
	    var length;
	    length = bytes.length;
	    if (length === 4) {
	      return new ipaddr.IPv4(bytes);
	    } else if (length === 16) {
	      return new ipaddr.IPv6(bytes);
	    } else {
	      throw new Error("ipaddr: the binary input is neither an IPv6 nor IPv4 address");
	    }
	  };
	
	  ipaddr.process = function(string) {
	    var addr;
	    addr = this.parse(string);
	    if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {
	      return addr.toIPv4Address();
	    } else {
	      return addr;
	    }
	  };
	
	}).call(this);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(411)(module)))

/***/ },
/* 411 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 412 */
/***/ function(module, exports) {

	module.exports = require("querystring");

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./application": 359,
		"./application.js": 359,
		"./express": 357,
		"./express.js": 357,
		"./middleware/init": 386,
		"./middleware/init.js": 386,
		"./middleware/query": 387,
		"./middleware/query.js": 387,
		"./request": 414,
		"./request.js": 414,
		"./response": 426,
		"./response.js": 426,
		"./router/index": 372,
		"./router/index.js": 372,
		"./router/layer": 375,
		"./router/layer.js": 375,
		"./router/route": 373,
		"./router/route.js": 373,
		"./utils": 393,
		"./utils.js": 393,
		"./view": 392,
		"./view.js": 392
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 413;


/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2013 Roman Shtylman
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var accepts = __webpack_require__(415);
	var deprecate = __webpack_require__(379)('express');
	var isIP = __webpack_require__(365).isIP;
	var typeis = __webpack_require__(424);
	var http = __webpack_require__(331);
	var fresh = __webpack_require__(404);
	var parseRange = __webpack_require__(407);
	var parse = __webpack_require__(385);
	var proxyaddr = __webpack_require__(408);
	
	/**
	 * Request prototype.
	 */
	
	var req = exports = module.exports = {
	  __proto__: http.IncomingMessage.prototype
	};
	
	/**
	 * Return request header.
	 *
	 * The `Referrer` header field is special-cased,
	 * both `Referrer` and `Referer` are interchangeable.
	 *
	 * Examples:
	 *
	 *     req.get('Content-Type');
	 *     // => "text/plain"
	 *
	 *     req.get('content-type');
	 *     // => "text/plain"
	 *
	 *     req.get('Something');
	 *     // => undefined
	 *
	 * Aliased as `req.header()`.
	 *
	 * @param {String} name
	 * @return {String}
	 * @public
	 */
	
	req.get =
	req.header = function header(name) {
	  if (!name) {
	    throw new TypeError('name argument is required to req.get');
	  }
	
	  if (typeof name !== 'string') {
	    throw new TypeError('name must be a string to req.get');
	  }
	
	  var lc = name.toLowerCase();
	
	  switch (lc) {
	    case 'referer':
	    case 'referrer':
	      return this.headers.referrer
	        || this.headers.referer;
	    default:
	      return this.headers[lc];
	  }
	};
	
	/**
	 * To do: update docs.
	 *
	 * Check if the given `type(s)` is acceptable, returning
	 * the best match when true, otherwise `undefined`, in which
	 * case you should respond with 406 "Not Acceptable".
	 *
	 * The `type` value may be a single MIME type string
	 * such as "application/json", an extension name
	 * such as "json", a comma-delimited list such as "json, html, text/plain",
	 * an argument list such as `"json", "html", "text/plain"`,
	 * or an array `["json", "html", "text/plain"]`. When a list
	 * or array is given, the _best_ match, if any is returned.
	 *
	 * Examples:
	 *
	 *     // Accept: text/html
	 *     req.accepts('html');
	 *     // => "html"
	 *
	 *     // Accept: text/*, application/json
	 *     req.accepts('html');
	 *     // => "html"
	 *     req.accepts('text/html');
	 *     // => "text/html"
	 *     req.accepts('json, text');
	 *     // => "json"
	 *     req.accepts('application/json');
	 *     // => "application/json"
	 *
	 *     // Accept: text/*, application/json
	 *     req.accepts('image/png');
	 *     req.accepts('png');
	 *     // => undefined
	 *
	 *     // Accept: text/*;q=.5, application/json
	 *     req.accepts(['html', 'json']);
	 *     req.accepts('html', 'json');
	 *     req.accepts('html, json');
	 *     // => "json"
	 *
	 * @param {String|Array} type(s)
	 * @return {String|Array|Boolean}
	 * @public
	 */
	
	req.accepts = function(){
	  var accept = accepts(this);
	  return accept.types.apply(accept, arguments);
	};
	
	/**
	 * Check if the given `encoding`s are accepted.
	 *
	 * @param {String} ...encoding
	 * @return {String|Array}
	 * @public
	 */
	
	req.acceptsEncodings = function(){
	  var accept = accepts(this);
	  return accept.encodings.apply(accept, arguments);
	};
	
	req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
	  'req.acceptsEncoding: Use acceptsEncodings instead');
	
	/**
	 * Check if the given `charset`s are acceptable,
	 * otherwise you should respond with 406 "Not Acceptable".
	 *
	 * @param {String} ...charset
	 * @return {String|Array}
	 * @public
	 */
	
	req.acceptsCharsets = function(){
	  var accept = accepts(this);
	  return accept.charsets.apply(accept, arguments);
	};
	
	req.acceptsCharset = deprecate.function(req.acceptsCharsets,
	  'req.acceptsCharset: Use acceptsCharsets instead');
	
	/**
	 * Check if the given `lang`s are acceptable,
	 * otherwise you should respond with 406 "Not Acceptable".
	 *
	 * @param {String} ...lang
	 * @return {String|Array}
	 * @public
	 */
	
	req.acceptsLanguages = function(){
	  var accept = accepts(this);
	  return accept.languages.apply(accept, arguments);
	};
	
	req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
	  'req.acceptsLanguage: Use acceptsLanguages instead');
	
	/**
	 * Parse Range header field, capping to the given `size`.
	 *
	 * Unspecified ranges such as "0-" require knowledge of your resource length. In
	 * the case of a byte range this is of course the total number of bytes. If the
	 * Range header field is not given `undefined` is returned, `-1` when unsatisfiable,
	 * and `-2` when syntactically invalid.
	 *
	 * When ranges are returned, the array has a "type" property which is the type of
	 * range that is required (most commonly, "bytes"). Each array element is an object
	 * with a "start" and "end" property for the portion of the range.
	 *
	 * The "combine" option can be set to `true` and overlapping & adjacent ranges
	 * will be combined into a single range.
	 *
	 * NOTE: remember that ranges are inclusive, so for example "Range: users=0-3"
	 * should respond with 4 users when available, not 3.
	 *
	 * @param {number} size
	 * @param {object} [options]
	 * @param {boolean} [options.combine=false]
	 * @return {number|array}
	 * @public
	 */
	
	req.range = function range(size, options) {
	  var range = this.get('Range');
	  if (!range) return;
	  return parseRange(size, range, options);
	};
	
	/**
	 * Return the value of param `name` when present or `defaultValue`.
	 *
	 *  - Checks route placeholders, ex: _/user/:id_
	 *  - Checks body params, ex: id=12, {"id":12}
	 *  - Checks query string params, ex: ?id=12
	 *
	 * To utilize request bodies, `req.body`
	 * should be an object. This can be done by using
	 * the `bodyParser()` middleware.
	 *
	 * @param {String} name
	 * @param {Mixed} [defaultValue]
	 * @return {String}
	 * @public
	 */
	
	req.param = function param(name, defaultValue) {
	  var params = this.params || {};
	  var body = this.body || {};
	  var query = this.query || {};
	
	  var args = arguments.length === 1
	    ? 'name'
	    : 'name, default';
	  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');
	
	  if (null != params[name] && params.hasOwnProperty(name)) return params[name];
	  if (null != body[name]) return body[name];
	  if (null != query[name]) return query[name];
	
	  return defaultValue;
	};
	
	/**
	 * Check if the incoming request contains the "Content-Type"
	 * header field, and it contains the give mime `type`.
	 *
	 * Examples:
	 *
	 *      // With Content-Type: text/html; charset=utf-8
	 *      req.is('html');
	 *      req.is('text/html');
	 *      req.is('text/*');
	 *      // => true
	 *
	 *      // When Content-Type is application/json
	 *      req.is('json');
	 *      req.is('application/json');
	 *      req.is('application/*');
	 *      // => true
	 *
	 *      req.is('html');
	 *      // => false
	 *
	 * @param {String|Array} types...
	 * @return {String|false|null}
	 * @public
	 */
	
	req.is = function is(types) {
	  var arr = types;
	
	  // support flattened arguments
	  if (!Array.isArray(types)) {
	    arr = new Array(arguments.length);
	    for (var i = 0; i < arr.length; i++) {
	      arr[i] = arguments[i];
	    }
	  }
	
	  return typeis(this, arr);
	};
	
	/**
	 * Return the protocol string "http" or "https"
	 * when requested with TLS. When the "trust proxy"
	 * setting trusts the socket address, the
	 * "X-Forwarded-Proto" header field will be trusted
	 * and used if present.
	 *
	 * If you're running behind a reverse proxy that
	 * supplies https for you this may be enabled.
	 *
	 * @return {String}
	 * @public
	 */
	
	defineGetter(req, 'protocol', function protocol(){
	  var proto = this.connection.encrypted
	    ? 'https'
	    : 'http';
	  var trust = this.app.get('trust proxy fn');
	
	  if (!trust(this.connection.remoteAddress, 0)) {
	    return proto;
	  }
	
	  // Note: X-Forwarded-Proto is normally only ever a
	  //       single value, but this is to be safe.
	  proto = this.get('X-Forwarded-Proto') || proto;
	  return proto.split(/\s*,\s*/)[0];
	});
	
	/**
	 * Short-hand for:
	 *
	 *    req.protocol === 'https'
	 *
	 * @return {Boolean}
	 * @public
	 */
	
	defineGetter(req, 'secure', function secure(){
	  return this.protocol === 'https';
	});
	
	/**
	 * Return the remote address from the trusted proxy.
	 *
	 * The is the remote address on the socket unless
	 * "trust proxy" is set.
	 *
	 * @return {String}
	 * @public
	 */
	
	defineGetter(req, 'ip', function ip(){
	  var trust = this.app.get('trust proxy fn');
	  return proxyaddr(this, trust);
	});
	
	/**
	 * When "trust proxy" is set, trusted proxy addresses + client.
	 *
	 * For example if the value were "client, proxy1, proxy2"
	 * you would receive the array `["client", "proxy1", "proxy2"]`
	 * where "proxy2" is the furthest down-stream and "proxy1" and
	 * "proxy2" were trusted.
	 *
	 * @return {Array}
	 * @public
	 */
	
	defineGetter(req, 'ips', function ips() {
	  var trust = this.app.get('trust proxy fn');
	  var addrs = proxyaddr.all(this, trust);
	  return addrs.slice(1).reverse();
	});
	
	/**
	 * Return subdomains as an array.
	 *
	 * Subdomains are the dot-separated parts of the host before the main domain of
	 * the app. By default, the domain of the app is assumed to be the last two
	 * parts of the host. This can be changed by setting "subdomain offset".
	 *
	 * For example, if the domain is "tobi.ferrets.example.com":
	 * If "subdomain offset" is not set, req.subdomains is `["ferrets", "tobi"]`.
	 * If "subdomain offset" is 3, req.subdomains is `["tobi"]`.
	 *
	 * @return {Array}
	 * @public
	 */
	
	defineGetter(req, 'subdomains', function subdomains() {
	  var hostname = this.hostname;
	
	  if (!hostname) return [];
	
	  var offset = this.app.get('subdomain offset');
	  var subdomains = !isIP(hostname)
	    ? hostname.split('.').reverse()
	    : [hostname];
	
	  return subdomains.slice(offset);
	});
	
	/**
	 * Short-hand for `url.parse(req.url).pathname`.
	 *
	 * @return {String}
	 * @public
	 */
	
	defineGetter(req, 'path', function path() {
	  return parse(this).pathname;
	});
	
	/**
	 * Parse the "Host" header field to a hostname.
	 *
	 * When the "trust proxy" setting trusts the socket
	 * address, the "X-Forwarded-Host" header field will
	 * be trusted.
	 *
	 * @return {String}
	 * @public
	 */
	
	defineGetter(req, 'hostname', function hostname(){
	  var trust = this.app.get('trust proxy fn');
	  var host = this.get('X-Forwarded-Host');
	
	  if (!host || !trust(this.connection.remoteAddress, 0)) {
	    host = this.get('Host');
	  }
	
	  if (!host) return;
	
	  // IPv6 literal support
	  var offset = host[0] === '['
	    ? host.indexOf(']') + 1
	    : 0;
	  var index = host.indexOf(':', offset);
	
	  return index !== -1
	    ? host.substring(0, index)
	    : host;
	});
	
	// TODO: change req.host to return host in next major
	
	defineGetter(req, 'host', deprecate.function(function host(){
	  return this.hostname;
	}, 'req.host: Use req.hostname instead'));
	
	/**
	 * Check if the request is fresh, aka
	 * Last-Modified and/or the ETag
	 * still match.
	 *
	 * @return {Boolean}
	 * @public
	 */
	
	defineGetter(req, 'fresh', function(){
	  var method = this.method;
	  var s = this.res.statusCode;
	
	  // GET or HEAD for weak freshness validation only
	  if ('GET' !== method && 'HEAD' !== method) return false;
	
	  // 2xx or 304 as per rfc2616 14.26
	  if ((s >= 200 && s < 300) || 304 === s) {
	    return fresh(this.headers, (this.res._headers || {}));
	  }
	
	  return false;
	});
	
	/**
	 * Check if the request is stale, aka
	 * "Last-Modified" and / or the "ETag" for the
	 * resource has changed.
	 *
	 * @return {Boolean}
	 * @public
	 */
	
	defineGetter(req, 'stale', function stale(){
	  return !this.fresh;
	});
	
	/**
	 * Check if the request was an _XMLHttpRequest_.
	 *
	 * @return {Boolean}
	 * @public
	 */
	
	defineGetter(req, 'xhr', function xhr(){
	  var val = this.get('X-Requested-With') || '';
	  return val.toLowerCase() === 'xmlhttprequest';
	});
	
	/**
	 * Helper function for creating a getter on an object.
	 *
	 * @param {Object} obj
	 * @param {String} name
	 * @param {Function} getter
	 * @private
	 */
	function defineGetter(obj, name, getter) {
	  Object.defineProperty(obj, name, {
	    configurable: true,
	    enumerable: true,
	    get: getter
	  });
	};


/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * accepts
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var Negotiator = __webpack_require__(416)
	var mime = __webpack_require__(421)
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = Accepts
	
	/**
	 * Create a new Accepts object for the given req.
	 *
	 * @param {object} req
	 * @public
	 */
	
	function Accepts(req) {
	  if (!(this instanceof Accepts))
	    return new Accepts(req)
	
	  this.headers = req.headers
	  this.negotiator = new Negotiator(req)
	}
	
	/**
	 * Check if the given `type(s)` is acceptable, returning
	 * the best match when true, otherwise `undefined`, in which
	 * case you should respond with 406 "Not Acceptable".
	 *
	 * The `type` value may be a single mime type string
	 * such as "application/json", the extension name
	 * such as "json" or an array `["json", "html", "text/plain"]`. When a list
	 * or array is given the _best_ match, if any is returned.
	 *
	 * Examples:
	 *
	 *     // Accept: text/html
	 *     this.types('html');
	 *     // => "html"
	 *
	 *     // Accept: text/*, application/json
	 *     this.types('html');
	 *     // => "html"
	 *     this.types('text/html');
	 *     // => "text/html"
	 *     this.types('json', 'text');
	 *     // => "json"
	 *     this.types('application/json');
	 *     // => "application/json"
	 *
	 *     // Accept: text/*, application/json
	 *     this.types('image/png');
	 *     this.types('png');
	 *     // => undefined
	 *
	 *     // Accept: text/*;q=.5, application/json
	 *     this.types(['html', 'json']);
	 *     this.types('html', 'json');
	 *     // => "json"
	 *
	 * @param {String|Array} types...
	 * @return {String|Array|Boolean}
	 * @public
	 */
	
	Accepts.prototype.type =
	Accepts.prototype.types = function (types_) {
	  var types = types_
	
	  // support flattened arguments
	  if (types && !Array.isArray(types)) {
	    types = new Array(arguments.length)
	    for (var i = 0; i < types.length; i++) {
	      types[i] = arguments[i]
	    }
	  }
	
	  // no types, return all requested types
	  if (!types || types.length === 0) {
	    return this.negotiator.mediaTypes()
	  }
	
	  if (!this.headers.accept) return types[0];
	  var mimes = types.map(extToMime);
	  var accepts = this.negotiator.mediaTypes(mimes.filter(validMime));
	  var first = accepts[0];
	  if (!first) return false;
	  return types[mimes.indexOf(first)];
	}
	
	/**
	 * Return accepted encodings or best fit based on `encodings`.
	 *
	 * Given `Accept-Encoding: gzip, deflate`
	 * an array sorted by quality is returned:
	 *
	 *     ['gzip', 'deflate']
	 *
	 * @param {String|Array} encodings...
	 * @return {String|Array}
	 * @public
	 */
	
	Accepts.prototype.encoding =
	Accepts.prototype.encodings = function (encodings_) {
	  var encodings = encodings_
	
	  // support flattened arguments
	  if (encodings && !Array.isArray(encodings)) {
	    encodings = new Array(arguments.length)
	    for (var i = 0; i < encodings.length; i++) {
	      encodings[i] = arguments[i]
	    }
	  }
	
	  // no encodings, return all requested encodings
	  if (!encodings || encodings.length === 0) {
	    return this.negotiator.encodings()
	  }
	
	  return this.negotiator.encodings(encodings)[0] || false
	}
	
	/**
	 * Return accepted charsets or best fit based on `charsets`.
	 *
	 * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`
	 * an array sorted by quality is returned:
	 *
	 *     ['utf-8', 'utf-7', 'iso-8859-1']
	 *
	 * @param {String|Array} charsets...
	 * @return {String|Array}
	 * @public
	 */
	
	Accepts.prototype.charset =
	Accepts.prototype.charsets = function (charsets_) {
	  var charsets = charsets_
	
	  // support flattened arguments
	  if (charsets && !Array.isArray(charsets)) {
	    charsets = new Array(arguments.length)
	    for (var i = 0; i < charsets.length; i++) {
	      charsets[i] = arguments[i]
	    }
	  }
	
	  // no charsets, return all requested charsets
	  if (!charsets || charsets.length === 0) {
	    return this.negotiator.charsets()
	  }
	
	  return this.negotiator.charsets(charsets)[0] || false
	}
	
	/**
	 * Return accepted languages or best fit based on `langs`.
	 *
	 * Given `Accept-Language: en;q=0.8, es, pt`
	 * an array sorted by quality is returned:
	 *
	 *     ['es', 'pt', 'en']
	 *
	 * @param {String|Array} langs...
	 * @return {Array|String}
	 * @public
	 */
	
	Accepts.prototype.lang =
	Accepts.prototype.langs =
	Accepts.prototype.language =
	Accepts.prototype.languages = function (languages_) {
	  var languages = languages_
	
	  // support flattened arguments
	  if (languages && !Array.isArray(languages)) {
	    languages = new Array(arguments.length)
	    for (var i = 0; i < languages.length; i++) {
	      languages[i] = arguments[i]
	    }
	  }
	
	  // no languages, return all requested languages
	  if (!languages || languages.length === 0) {
	    return this.negotiator.languages()
	  }
	
	  return this.negotiator.languages(languages)[0] || false
	}
	
	/**
	 * Convert extnames to mime.
	 *
	 * @param {String} type
	 * @return {String}
	 * @private
	 */
	
	function extToMime(type) {
	  return type.indexOf('/') === -1
	    ? mime.lookup(type)
	    : type
	}
	
	/**
	 * Check if mime is valid.
	 *
	 * @param {String} type
	 * @return {String}
	 * @private
	 */
	
	function validMime(type) {
	  return typeof type === 'string';
	}


/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * negotiator
	 * Copyright(c) 2012 Federico Romero
	 * Copyright(c) 2012-2014 Isaac Z. Schlueter
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Cached loaded submodules.
	 * @private
	 */
	
	var modules = Object.create(null);
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = Negotiator;
	module.exports.Negotiator = Negotiator;
	
	/**
	 * Create a Negotiator instance from a request.
	 * @param {object} request
	 * @public
	 */
	
	function Negotiator(request) {
	  if (!(this instanceof Negotiator)) {
	    return new Negotiator(request);
	  }
	
	  this.request = request;
	}
	
	Negotiator.prototype.charset = function charset(available) {
	  var set = this.charsets(available);
	  return set && set[0];
	};
	
	Negotiator.prototype.charsets = function charsets(available) {
	  var preferredCharsets = loadModule('charset').preferredCharsets;
	  return preferredCharsets(this.request.headers['accept-charset'], available);
	};
	
	Negotiator.prototype.encoding = function encoding(available) {
	  var set = this.encodings(available);
	  return set && set[0];
	};
	
	Negotiator.prototype.encodings = function encodings(available) {
	  var preferredEncodings = loadModule('encoding').preferredEncodings;
	  return preferredEncodings(this.request.headers['accept-encoding'], available);
	};
	
	Negotiator.prototype.language = function language(available) {
	  var set = this.languages(available);
	  return set && set[0];
	};
	
	Negotiator.prototype.languages = function languages(available) {
	  var preferredLanguages = loadModule('language').preferredLanguages;
	  return preferredLanguages(this.request.headers['accept-language'], available);
	};
	
	Negotiator.prototype.mediaType = function mediaType(available) {
	  var set = this.mediaTypes(available);
	  return set && set[0];
	};
	
	Negotiator.prototype.mediaTypes = function mediaTypes(available) {
	  var preferredMediaTypes = loadModule('mediaType').preferredMediaTypes;
	  return preferredMediaTypes(this.request.headers.accept, available);
	};
	
	// Backwards compatibility
	Negotiator.prototype.preferredCharset = Negotiator.prototype.charset;
	Negotiator.prototype.preferredCharsets = Negotiator.prototype.charsets;
	Negotiator.prototype.preferredEncoding = Negotiator.prototype.encoding;
	Negotiator.prototype.preferredEncodings = Negotiator.prototype.encodings;
	Negotiator.prototype.preferredLanguage = Negotiator.prototype.language;
	Negotiator.prototype.preferredLanguages = Negotiator.prototype.languages;
	Negotiator.prototype.preferredMediaType = Negotiator.prototype.mediaType;
	Negotiator.prototype.preferredMediaTypes = Negotiator.prototype.mediaTypes;
	
	/**
	 * Load the given module.
	 * @private
	 */
	
	function loadModule(moduleName) {
	  var module = modules[moduleName];
	
	  if (module !== undefined) {
	    return module;
	  }
	
	  // This uses a switch for static require analysis
	  switch (moduleName) {
	    case 'charset':
	      module = __webpack_require__(417);
	      break;
	    case 'encoding':
	      module = __webpack_require__(418);
	      break;
	    case 'language':
	      module = __webpack_require__(419);
	      break;
	    case 'mediaType':
	      module = __webpack_require__(420);
	      break;
	    default:
	      throw new Error('Cannot find module \'' + moduleName + '\'');
	  }
	
	  // Store to prevent invoking require()
	  modules[moduleName] = module;
	
	  return module;
	}


/***/ },
/* 417 */
/***/ function(module, exports) {

	/**
	 * negotiator
	 * Copyright(c) 2012 Isaac Z. Schlueter
	 * Copyright(c) 2014 Federico Romero
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = preferredCharsets;
	module.exports.preferredCharsets = preferredCharsets;
	
	/**
	 * Module variables.
	 * @private
	 */
	
	var simpleCharsetRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;
	
	/**
	 * Parse the Accept-Charset header.
	 * @private
	 */
	
	function parseAcceptCharset(accept) {
	  var accepts = accept.split(',');
	
	  for (var i = 0, j = 0; i < accepts.length; i++) {
	    var charset = parseCharset(accepts[i].trim(), i);
	
	    if (charset) {
	      accepts[j++] = charset;
	    }
	  }
	
	  // trim accepts
	  accepts.length = j;
	
	  return accepts;
	}
	
	/**
	 * Parse a charset from the Accept-Charset header.
	 * @private
	 */
	
	function parseCharset(str, i) {
	  var match = simpleCharsetRegExp.exec(str);
	  if (!match) return null;
	
	  var charset = match[1];
	  var q = 1;
	  if (match[2]) {
	    var params = match[2].split(';')
	    for (var i = 0; i < params.length; i ++) {
	      var p = params[i].trim().split('=');
	      if (p[0] === 'q') {
	        q = parseFloat(p[1]);
	        break;
	      }
	    }
	  }
	
	  return {
	    charset: charset,
	    q: q,
	    i: i
	  };
	}
	
	/**
	 * Get the priority of a charset.
	 * @private
	 */
	
	function getCharsetPriority(charset, accepted, index) {
	  var priority = {o: -1, q: 0, s: 0};
	
	  for (var i = 0; i < accepted.length; i++) {
	    var spec = specify(charset, accepted[i], index);
	
	    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
	      priority = spec;
	    }
	  }
	
	  return priority;
	}
	
	/**
	 * Get the specificity of the charset.
	 * @private
	 */
	
	function specify(charset, spec, index) {
	  var s = 0;
	  if(spec.charset.toLowerCase() === charset.toLowerCase()){
	    s |= 1;
	  } else if (spec.charset !== '*' ) {
	    return null
	  }
	
	  return {
	    i: index,
	    o: spec.i,
	    q: spec.q,
	    s: s
	  }
	}
	
	/**
	 * Get the preferred charsets from an Accept-Charset header.
	 * @public
	 */
	
	function preferredCharsets(accept, provided) {
	  // RFC 2616 sec 14.2: no header = *
	  var accepts = parseAcceptCharset(accept === undefined ? '*' : accept || '');
	
	  if (!provided) {
	    // sorted list of all charsets
	    return accepts
	      .filter(isQuality)
	      .sort(compareSpecs)
	      .map(getFullCharset);
	  }
	
	  var priorities = provided.map(function getPriority(type, index) {
	    return getCharsetPriority(type, accepts, index);
	  });
	
	  // sorted list of accepted charsets
	  return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {
	    return provided[priorities.indexOf(priority)];
	  });
	}
	
	/**
	 * Compare two specs.
	 * @private
	 */
	
	function compareSpecs(a, b) {
	  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
	}
	
	/**
	 * Get full charset string.
	 * @private
	 */
	
	function getFullCharset(spec) {
	  return spec.charset;
	}
	
	/**
	 * Check if a spec has any quality.
	 * @private
	 */
	
	function isQuality(spec) {
	  return spec.q > 0;
	}


/***/ },
/* 418 */
/***/ function(module, exports) {

	/**
	 * negotiator
	 * Copyright(c) 2012 Isaac Z. Schlueter
	 * Copyright(c) 2014 Federico Romero
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = preferredEncodings;
	module.exports.preferredEncodings = preferredEncodings;
	
	/**
	 * Module variables.
	 * @private
	 */
	
	var simpleEncodingRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;
	
	/**
	 * Parse the Accept-Encoding header.
	 * @private
	 */
	
	function parseAcceptEncoding(accept) {
	  var accepts = accept.split(',');
	  var hasIdentity = false;
	  var minQuality = 1;
	
	  for (var i = 0, j = 0; i < accepts.length; i++) {
	    var encoding = parseEncoding(accepts[i].trim(), i);
	
	    if (encoding) {
	      accepts[j++] = encoding;
	      hasIdentity = hasIdentity || specify('identity', encoding);
	      minQuality = Math.min(minQuality, encoding.q || 1);
	    }
	  }
	
	  if (!hasIdentity) {
	    /*
	     * If identity doesn't explicitly appear in the accept-encoding header,
	     * it's added to the list of acceptable encoding with the lowest q
	     */
	    accepts[j++] = {
	      encoding: 'identity',
	      q: minQuality,
	      i: i
	    };
	  }
	
	  // trim accepts
	  accepts.length = j;
	
	  return accepts;
	}
	
	/**
	 * Parse an encoding from the Accept-Encoding header.
	 * @private
	 */
	
	function parseEncoding(str, i) {
	  var match = simpleEncodingRegExp.exec(str);
	  if (!match) return null;
	
	  var encoding = match[1];
	  var q = 1;
	  if (match[2]) {
	    var params = match[2].split(';');
	    for (var i = 0; i < params.length; i ++) {
	      var p = params[i].trim().split('=');
	      if (p[0] === 'q') {
	        q = parseFloat(p[1]);
	        break;
	      }
	    }
	  }
	
	  return {
	    encoding: encoding,
	    q: q,
	    i: i
	  };
	}
	
	/**
	 * Get the priority of an encoding.
	 * @private
	 */
	
	function getEncodingPriority(encoding, accepted, index) {
	  var priority = {o: -1, q: 0, s: 0};
	
	  for (var i = 0; i < accepted.length; i++) {
	    var spec = specify(encoding, accepted[i], index);
	
	    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
	      priority = spec;
	    }
	  }
	
	  return priority;
	}
	
	/**
	 * Get the specificity of the encoding.
	 * @private
	 */
	
	function specify(encoding, spec, index) {
	  var s = 0;
	  if(spec.encoding.toLowerCase() === encoding.toLowerCase()){
	    s |= 1;
	  } else if (spec.encoding !== '*' ) {
	    return null
	  }
	
	  return {
	    i: index,
	    o: spec.i,
	    q: spec.q,
	    s: s
	  }
	};
	
	/**
	 * Get the preferred encodings from an Accept-Encoding header.
	 * @public
	 */
	
	function preferredEncodings(accept, provided) {
	  var accepts = parseAcceptEncoding(accept || '');
	
	  if (!provided) {
	    // sorted list of all encodings
	    return accepts
	      .filter(isQuality)
	      .sort(compareSpecs)
	      .map(getFullEncoding);
	  }
	
	  var priorities = provided.map(function getPriority(type, index) {
	    return getEncodingPriority(type, accepts, index);
	  });
	
	  // sorted list of accepted encodings
	  return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {
	    return provided[priorities.indexOf(priority)];
	  });
	}
	
	/**
	 * Compare two specs.
	 * @private
	 */
	
	function compareSpecs(a, b) {
	  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
	}
	
	/**
	 * Get full encoding string.
	 * @private
	 */
	
	function getFullEncoding(spec) {
	  return spec.encoding;
	}
	
	/**
	 * Check if a spec has any quality.
	 * @private
	 */
	
	function isQuality(spec) {
	  return spec.q > 0;
	}


/***/ },
/* 419 */
/***/ function(module, exports) {

	/**
	 * negotiator
	 * Copyright(c) 2012 Isaac Z. Schlueter
	 * Copyright(c) 2014 Federico Romero
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = preferredLanguages;
	module.exports.preferredLanguages = preferredLanguages;
	
	/**
	 * Module variables.
	 * @private
	 */
	
	var simpleLanguageRegExp = /^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/;
	
	/**
	 * Parse the Accept-Language header.
	 * @private
	 */
	
	function parseAcceptLanguage(accept) {
	  var accepts = accept.split(',');
	
	  for (var i = 0, j = 0; i < accepts.length; i++) {
	    var langauge = parseLanguage(accepts[i].trim(), i);
	
	    if (langauge) {
	      accepts[j++] = langauge;
	    }
	  }
	
	  // trim accepts
	  accepts.length = j;
	
	  return accepts;
	}
	
	/**
	 * Parse a language from the Accept-Language header.
	 * @private
	 */
	
	function parseLanguage(str, i) {
	  var match = simpleLanguageRegExp.exec(str);
	  if (!match) return null;
	
	  var prefix = match[1],
	      suffix = match[2],
	      full = prefix;
	
	  if (suffix) full += "-" + suffix;
	
	  var q = 1;
	  if (match[3]) {
	    var params = match[3].split(';')
	    for (var i = 0; i < params.length; i ++) {
	      var p = params[i].split('=');
	      if (p[0] === 'q') q = parseFloat(p[1]);
	    }
	  }
	
	  return {
	    prefix: prefix,
	    suffix: suffix,
	    q: q,
	    i: i,
	    full: full
	  };
	}
	
	/**
	 * Get the priority of a language.
	 * @private
	 */
	
	function getLanguagePriority(language, accepted, index) {
	  var priority = {o: -1, q: 0, s: 0};
	
	  for (var i = 0; i < accepted.length; i++) {
	    var spec = specify(language, accepted[i], index);
	
	    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
	      priority = spec;
	    }
	  }
	
	  return priority;
	}
	
	/**
	 * Get the specificity of the language.
	 * @private
	 */
	
	function specify(language, spec, index) {
	  var p = parseLanguage(language)
	  if (!p) return null;
	  var s = 0;
	  if(spec.full.toLowerCase() === p.full.toLowerCase()){
	    s |= 4;
	  } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {
	    s |= 2;
	  } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {
	    s |= 1;
	  } else if (spec.full !== '*' ) {
	    return null
	  }
	
	  return {
	    i: index,
	    o: spec.i,
	    q: spec.q,
	    s: s
	  }
	};
	
	/**
	 * Get the preferred languages from an Accept-Language header.
	 * @public
	 */
	
	function preferredLanguages(accept, provided) {
	  // RFC 2616 sec 14.4: no header = *
	  var accepts = parseAcceptLanguage(accept === undefined ? '*' : accept || '');
	
	  if (!provided) {
	    // sorted list of all languages
	    return accepts
	      .filter(isQuality)
	      .sort(compareSpecs)
	      .map(getFullLanguage);
	  }
	
	  var priorities = provided.map(function getPriority(type, index) {
	    return getLanguagePriority(type, accepts, index);
	  });
	
	  // sorted list of accepted languages
	  return priorities.filter(isQuality).sort(compareSpecs).map(function getLanguage(priority) {
	    return provided[priorities.indexOf(priority)];
	  });
	}
	
	/**
	 * Compare two specs.
	 * @private
	 */
	
	function compareSpecs(a, b) {
	  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
	}
	
	/**
	 * Get full language string.
	 * @private
	 */
	
	function getFullLanguage(spec) {
	  return spec.full;
	}
	
	/**
	 * Check if a spec has any quality.
	 * @private
	 */
	
	function isQuality(spec) {
	  return spec.q > 0;
	}


/***/ },
/* 420 */
/***/ function(module, exports) {

	/**
	 * negotiator
	 * Copyright(c) 2012 Isaac Z. Schlueter
	 * Copyright(c) 2014 Federico Romero
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = preferredMediaTypes;
	module.exports.preferredMediaTypes = preferredMediaTypes;
	
	/**
	 * Module variables.
	 * @private
	 */
	
	var simpleMediaTypeRegExp = /^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;
	
	/**
	 * Parse the Accept header.
	 * @private
	 */
	
	function parseAccept(accept) {
	  var accepts = splitMediaTypes(accept);
	
	  for (var i = 0, j = 0; i < accepts.length; i++) {
	    var mediaType = parseMediaType(accepts[i].trim(), i);
	
	    if (mediaType) {
	      accepts[j++] = mediaType;
	    }
	  }
	
	  // trim accepts
	  accepts.length = j;
	
	  return accepts;
	}
	
	/**
	 * Parse a media type from the Accept header.
	 * @private
	 */
	
	function parseMediaType(str, i) {
	  var match = simpleMediaTypeRegExp.exec(str);
	  if (!match) return null;
	
	  var params = Object.create(null);
	  var q = 1;
	  var subtype = match[2];
	  var type = match[1];
	
	  if (match[3]) {
	    var kvps = splitParameters(match[3]).map(splitKeyValuePair);
	
	    for (var j = 0; j < kvps.length; j++) {
	      var pair = kvps[j];
	      var key = pair[0].toLowerCase();
	      var val = pair[1];
	
	      // get the value, unwrapping quotes
	      var value = val && val[0] === '"' && val[val.length - 1] === '"'
	        ? val.substr(1, val.length - 2)
	        : val;
	
	      if (key === 'q') {
	        q = parseFloat(value);
	        break;
	      }
	
	      // store parameter
	      params[key] = value;
	    }
	  }
	
	  return {
	    type: type,
	    subtype: subtype,
	    params: params,
	    q: q,
	    i: i
	  };
	}
	
	/**
	 * Get the priority of a media type.
	 * @private
	 */
	
	function getMediaTypePriority(type, accepted, index) {
	  var priority = {o: -1, q: 0, s: 0};
	
	  for (var i = 0; i < accepted.length; i++) {
	    var spec = specify(type, accepted[i], index);
	
	    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
	      priority = spec;
	    }
	  }
	
	  return priority;
	}
	
	/**
	 * Get the specificity of the media type.
	 * @private
	 */
	
	function specify(type, spec, index) {
	  var p = parseMediaType(type);
	  var s = 0;
	
	  if (!p) {
	    return null;
	  }
	
	  if(spec.type.toLowerCase() == p.type.toLowerCase()) {
	    s |= 4
	  } else if(spec.type != '*') {
	    return null;
	  }
	
	  if(spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {
	    s |= 2
	  } else if(spec.subtype != '*') {
	    return null;
	  }
	
	  var keys = Object.keys(spec.params);
	  if (keys.length > 0) {
	    if (keys.every(function (k) {
	      return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();
	    })) {
	      s |= 1
	    } else {
	      return null
	    }
	  }
	
	  return {
	    i: index,
	    o: spec.i,
	    q: spec.q,
	    s: s,
	  }
	}
	
	/**
	 * Get the preferred media types from an Accept header.
	 * @public
	 */
	
	function preferredMediaTypes(accept, provided) {
	  // RFC 2616 sec 14.2: no header = */*
	  var accepts = parseAccept(accept === undefined ? '*/*' : accept || '');
	
	  if (!provided) {
	    // sorted list of all types
	    return accepts
	      .filter(isQuality)
	      .sort(compareSpecs)
	      .map(getFullType);
	  }
	
	  var priorities = provided.map(function getPriority(type, index) {
	    return getMediaTypePriority(type, accepts, index);
	  });
	
	  // sorted list of accepted types
	  return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {
	    return provided[priorities.indexOf(priority)];
	  });
	}
	
	/**
	 * Compare two specs.
	 * @private
	 */
	
	function compareSpecs(a, b) {
	  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
	}
	
	/**
	 * Get full type string.
	 * @private
	 */
	
	function getFullType(spec) {
	  return spec.type + '/' + spec.subtype;
	}
	
	/**
	 * Check if a spec has any quality.
	 * @private
	 */
	
	function isQuality(spec) {
	  return spec.q > 0;
	}
	
	/**
	 * Count the number of quotes in a string.
	 * @private
	 */
	
	function quoteCount(string) {
	  var count = 0;
	  var index = 0;
	
	  while ((index = string.indexOf('"', index)) !== -1) {
	    count++;
	    index++;
	  }
	
	  return count;
	}
	
	/**
	 * Split a key value pair.
	 * @private
	 */
	
	function splitKeyValuePair(str) {
	  var index = str.indexOf('=');
	  var key;
	  var val;
	
	  if (index === -1) {
	    key = str;
	  } else {
	    key = str.substr(0, index);
	    val = str.substr(index + 1);
	  }
	
	  return [key, val];
	}
	
	/**
	 * Split an Accept header into media types.
	 * @private
	 */
	
	function splitMediaTypes(accept) {
	  var accepts = accept.split(',');
	
	  for (var i = 1, j = 0; i < accepts.length; i++) {
	    if (quoteCount(accepts[j]) % 2 == 0) {
	      accepts[++j] = accepts[i];
	    } else {
	      accepts[j] += ',' + accepts[i];
	    }
	  }
	
	  // trim accepts
	  accepts.length = j + 1;
	
	  return accepts;
	}
	
	/**
	 * Split a string of parameters.
	 * @private
	 */
	
	function splitParameters(str) {
	  var parameters = str.split(';');
	
	  for (var i = 1, j = 0; i < parameters.length; i++) {
	    if (quoteCount(parameters[j]) % 2 == 0) {
	      parameters[++j] = parameters[i];
	    } else {
	      parameters[j] += ';' + parameters[i];
	    }
	  }
	
	  // trim parameters
	  parameters.length = j + 1;
	
	  for (var i = 0; i < parameters.length; i++) {
	    parameters[i] = parameters[i].trim();
	  }
	
	  return parameters;
	}


/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * mime-types
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var db = __webpack_require__(422)
	var extname = __webpack_require__(342).extname
	
	/**
	 * Module variables.
	 * @private
	 */
	
	var extractTypeRegExp = /^\s*([^;\s]*)(?:;|\s|$)/
	var textTypeRegExp = /^text\//i
	
	/**
	 * Module exports.
	 * @public
	 */
	
	exports.charset = charset
	exports.charsets = { lookup: charset }
	exports.contentType = contentType
	exports.extension = extension
	exports.extensions = Object.create(null)
	exports.lookup = lookup
	exports.types = Object.create(null)
	
	// Populate the extensions/types maps
	populateMaps(exports.extensions, exports.types)
	
	/**
	 * Get the default charset for a MIME type.
	 *
	 * @param {string} type
	 * @return {boolean|string}
	 */
	
	function charset (type) {
	  if (!type || typeof type !== 'string') {
	    return false
	  }
	
	  // TODO: use media-typer
	  var match = extractTypeRegExp.exec(type)
	  var mime = match && db[match[1].toLowerCase()]
	
	  if (mime && mime.charset) {
	    return mime.charset
	  }
	
	  // default text/* to utf-8
	  if (match && textTypeRegExp.test(match[1])) {
	    return 'UTF-8'
	  }
	
	  return false
	}
	
	/**
	 * Create a full Content-Type header given a MIME type or extension.
	 *
	 * @param {string} str
	 * @return {boolean|string}
	 */
	
	function contentType (str) {
	  // TODO: should this even be in this module?
	  if (!str || typeof str !== 'string') {
	    return false
	  }
	
	  var mime = str.indexOf('/') === -1
	    ? exports.lookup(str)
	    : str
	
	  if (!mime) {
	    return false
	  }
	
	  // TODO: use content-type or other module
	  if (mime.indexOf('charset') === -1) {
	    var charset = exports.charset(mime)
	    if (charset) mime += '; charset=' + charset.toLowerCase()
	  }
	
	  return mime
	}
	
	/**
	 * Get the default extension for a MIME type.
	 *
	 * @param {string} type
	 * @return {boolean|string}
	 */
	
	function extension (type) {
	  if (!type || typeof type !== 'string') {
	    return false
	  }
	
	  // TODO: use media-typer
	  var match = extractTypeRegExp.exec(type)
	
	  // get extensions
	  var exts = match && exports.extensions[match[1].toLowerCase()]
	
	  if (!exts || !exts.length) {
	    return false
	  }
	
	  return exts[0]
	}
	
	/**
	 * Lookup the MIME type for a file path/extension.
	 *
	 * @param {string} path
	 * @return {boolean|string}
	 */
	
	function lookup (path) {
	  if (!path || typeof path !== 'string') {
	    return false
	  }
	
	  // get the extension ("ext" or ".ext" or full path)
	  var extension = extname('x.' + path)
	    .toLowerCase()
	    .substr(1)
	
	  if (!extension) {
	    return false
	  }
	
	  return exports.types[extension] || false
	}
	
	/**
	 * Populate the extensions and types maps.
	 * @private
	 */
	
	function populateMaps (extensions, types) {
	  // source preference (least -> most)
	  var preference = ['nginx', 'apache', undefined, 'iana']
	
	  Object.keys(db).forEach(function forEachMimeType (type) {
	    var mime = db[type]
	    var exts = mime.extensions
	
	    if (!exts || !exts.length) {
	      return
	    }
	
	    // mime -> extensions
	    extensions[type] = exts
	
	    // extension -> mime
	    for (var i = 0; i < exts.length; i++) {
	      var extension = exts[i]
	
	      if (types[extension]) {
	        var from = preference.indexOf(db[types[extension]].source)
	        var to = preference.indexOf(mime.source)
	
	        if (types[extension] !== 'application/octet-stream' &&
	          from > to || (from === to && types[extension].substr(0, 12) === 'application/')) {
	          // skip the remapping
	          continue
	        }
	      }
	
	      // set the extension -> mime
	      types[extension] = type
	    }
	  })
	}


/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * mime-db
	 * Copyright(c) 2014 Jonathan Ong
	 * MIT Licensed
	 */
	
	/**
	 * Module exports.
	 */
	
	module.exports = __webpack_require__(423)


/***/ },
/* 423 */
/***/ function(module, exports) {

	module.exports = {
		"application/1d-interleaved-parityfec": {
			"source": "iana"
		},
		"application/3gpdash-qoe-report+xml": {
			"source": "iana"
		},
		"application/3gpp-ims+xml": {
			"source": "iana"
		},
		"application/a2l": {
			"source": "iana"
		},
		"application/activemessage": {
			"source": "iana"
		},
		"application/alto-costmap+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-costmapfilter+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-directory+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-endpointcost+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-endpointcostparams+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-endpointprop+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-endpointpropparams+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-error+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-networkmap+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-networkmapfilter+json": {
			"source": "iana",
			"compressible": true
		},
		"application/aml": {
			"source": "iana"
		},
		"application/andrew-inset": {
			"source": "iana",
			"extensions": [
				"ez"
			]
		},
		"application/applefile": {
			"source": "iana"
		},
		"application/applixware": {
			"source": "apache",
			"extensions": [
				"aw"
			]
		},
		"application/atf": {
			"source": "iana"
		},
		"application/atfx": {
			"source": "iana"
		},
		"application/atom+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"atom"
			]
		},
		"application/atomcat+xml": {
			"source": "iana",
			"extensions": [
				"atomcat"
			]
		},
		"application/atomdeleted+xml": {
			"source": "iana"
		},
		"application/atomicmail": {
			"source": "iana"
		},
		"application/atomsvc+xml": {
			"source": "iana",
			"extensions": [
				"atomsvc"
			]
		},
		"application/atxml": {
			"source": "iana"
		},
		"application/auth-policy+xml": {
			"source": "iana"
		},
		"application/bacnet-xdd+zip": {
			"source": "iana"
		},
		"application/batch-smtp": {
			"source": "iana"
		},
		"application/bdoc": {
			"compressible": false,
			"extensions": [
				"bdoc"
			]
		},
		"application/beep+xml": {
			"source": "iana"
		},
		"application/calendar+json": {
			"source": "iana",
			"compressible": true
		},
		"application/calendar+xml": {
			"source": "iana"
		},
		"application/call-completion": {
			"source": "iana"
		},
		"application/cals-1840": {
			"source": "iana"
		},
		"application/cbor": {
			"source": "iana"
		},
		"application/ccmp+xml": {
			"source": "iana"
		},
		"application/ccxml+xml": {
			"source": "iana",
			"extensions": [
				"ccxml"
			]
		},
		"application/cdfx+xml": {
			"source": "iana"
		},
		"application/cdmi-capability": {
			"source": "iana",
			"extensions": [
				"cdmia"
			]
		},
		"application/cdmi-container": {
			"source": "iana",
			"extensions": [
				"cdmic"
			]
		},
		"application/cdmi-domain": {
			"source": "iana",
			"extensions": [
				"cdmid"
			]
		},
		"application/cdmi-object": {
			"source": "iana",
			"extensions": [
				"cdmio"
			]
		},
		"application/cdmi-queue": {
			"source": "iana",
			"extensions": [
				"cdmiq"
			]
		},
		"application/cdni": {
			"source": "iana"
		},
		"application/cea": {
			"source": "iana"
		},
		"application/cea-2018+xml": {
			"source": "iana"
		},
		"application/cellml+xml": {
			"source": "iana"
		},
		"application/cfw": {
			"source": "iana"
		},
		"application/clue_info+xml": {
			"source": "iana"
		},
		"application/cms": {
			"source": "iana"
		},
		"application/cnrp+xml": {
			"source": "iana"
		},
		"application/coap-group+json": {
			"source": "iana",
			"compressible": true
		},
		"application/commonground": {
			"source": "iana"
		},
		"application/conference-info+xml": {
			"source": "iana"
		},
		"application/cpl+xml": {
			"source": "iana"
		},
		"application/csrattrs": {
			"source": "iana"
		},
		"application/csta+xml": {
			"source": "iana"
		},
		"application/cstadata+xml": {
			"source": "iana"
		},
		"application/csvm+json": {
			"source": "iana",
			"compressible": true
		},
		"application/cu-seeme": {
			"source": "apache",
			"extensions": [
				"cu"
			]
		},
		"application/cybercash": {
			"source": "iana"
		},
		"application/dart": {
			"compressible": true
		},
		"application/dash+xml": {
			"source": "iana",
			"extensions": [
				"mpd"
			]
		},
		"application/dashdelta": {
			"source": "iana"
		},
		"application/davmount+xml": {
			"source": "iana",
			"extensions": [
				"davmount"
			]
		},
		"application/dca-rft": {
			"source": "iana"
		},
		"application/dcd": {
			"source": "iana"
		},
		"application/dec-dx": {
			"source": "iana"
		},
		"application/dialog-info+xml": {
			"source": "iana"
		},
		"application/dicom": {
			"source": "iana"
		},
		"application/dicom+json": {
			"source": "iana",
			"compressible": true
		},
		"application/dicom+xml": {
			"source": "iana"
		},
		"application/dii": {
			"source": "iana"
		},
		"application/dit": {
			"source": "iana"
		},
		"application/dns": {
			"source": "iana"
		},
		"application/docbook+xml": {
			"source": "apache",
			"extensions": [
				"dbk"
			]
		},
		"application/dskpp+xml": {
			"source": "iana"
		},
		"application/dssc+der": {
			"source": "iana",
			"extensions": [
				"dssc"
			]
		},
		"application/dssc+xml": {
			"source": "iana",
			"extensions": [
				"xdssc"
			]
		},
		"application/dvcs": {
			"source": "iana"
		},
		"application/ecmascript": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"ecma"
			]
		},
		"application/edi-consent": {
			"source": "iana"
		},
		"application/edi-x12": {
			"source": "iana",
			"compressible": false
		},
		"application/edifact": {
			"source": "iana",
			"compressible": false
		},
		"application/efi": {
			"source": "iana"
		},
		"application/emergencycalldata.comment+xml": {
			"source": "iana"
		},
		"application/emergencycalldata.deviceinfo+xml": {
			"source": "iana"
		},
		"application/emergencycalldata.providerinfo+xml": {
			"source": "iana"
		},
		"application/emergencycalldata.serviceinfo+xml": {
			"source": "iana"
		},
		"application/emergencycalldata.subscriberinfo+xml": {
			"source": "iana"
		},
		"application/emma+xml": {
			"source": "iana",
			"extensions": [
				"emma"
			]
		},
		"application/emotionml+xml": {
			"source": "iana"
		},
		"application/encaprtp": {
			"source": "iana"
		},
		"application/epp+xml": {
			"source": "iana"
		},
		"application/epub+zip": {
			"source": "iana",
			"extensions": [
				"epub"
			]
		},
		"application/eshop": {
			"source": "iana"
		},
		"application/exi": {
			"source": "iana",
			"extensions": [
				"exi"
			]
		},
		"application/fastinfoset": {
			"source": "iana"
		},
		"application/fastsoap": {
			"source": "iana"
		},
		"application/fdt+xml": {
			"source": "iana"
		},
		"application/fits": {
			"source": "iana"
		},
		"application/font-sfnt": {
			"source": "iana"
		},
		"application/font-tdpfr": {
			"source": "iana",
			"extensions": [
				"pfr"
			]
		},
		"application/font-woff": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"woff"
			]
		},
		"application/font-woff2": {
			"compressible": false,
			"extensions": [
				"woff2"
			]
		},
		"application/framework-attributes+xml": {
			"source": "iana"
		},
		"application/geo+json": {
			"source": "iana",
			"compressible": true
		},
		"application/gml+xml": {
			"source": "apache",
			"extensions": [
				"gml"
			]
		},
		"application/gpx+xml": {
			"source": "apache",
			"extensions": [
				"gpx"
			]
		},
		"application/gxf": {
			"source": "apache",
			"extensions": [
				"gxf"
			]
		},
		"application/gzip": {
			"source": "iana",
			"compressible": false
		},
		"application/h224": {
			"source": "iana"
		},
		"application/held+xml": {
			"source": "iana"
		},
		"application/http": {
			"source": "iana"
		},
		"application/hyperstudio": {
			"source": "iana",
			"extensions": [
				"stk"
			]
		},
		"application/ibe-key-request+xml": {
			"source": "iana"
		},
		"application/ibe-pkg-reply+xml": {
			"source": "iana"
		},
		"application/ibe-pp-data": {
			"source": "iana"
		},
		"application/iges": {
			"source": "iana"
		},
		"application/im-iscomposing+xml": {
			"source": "iana"
		},
		"application/index": {
			"source": "iana"
		},
		"application/index.cmd": {
			"source": "iana"
		},
		"application/index.obj": {
			"source": "iana"
		},
		"application/index.response": {
			"source": "iana"
		},
		"application/index.vnd": {
			"source": "iana"
		},
		"application/inkml+xml": {
			"source": "iana",
			"extensions": [
				"ink",
				"inkml"
			]
		},
		"application/iotp": {
			"source": "iana"
		},
		"application/ipfix": {
			"source": "iana",
			"extensions": [
				"ipfix"
			]
		},
		"application/ipp": {
			"source": "iana"
		},
		"application/isup": {
			"source": "iana"
		},
		"application/its+xml": {
			"source": "iana"
		},
		"application/java-archive": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"jar",
				"war",
				"ear"
			]
		},
		"application/java-serialized-object": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"ser"
			]
		},
		"application/java-vm": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"class"
			]
		},
		"application/javascript": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true,
			"extensions": [
				"js"
			]
		},
		"application/jose": {
			"source": "iana"
		},
		"application/jose+json": {
			"source": "iana",
			"compressible": true
		},
		"application/jrd+json": {
			"source": "iana",
			"compressible": true
		},
		"application/json": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true,
			"extensions": [
				"json",
				"map"
			]
		},
		"application/json-patch+json": {
			"source": "iana",
			"compressible": true
		},
		"application/json-seq": {
			"source": "iana"
		},
		"application/json5": {
			"extensions": [
				"json5"
			]
		},
		"application/jsonml+json": {
			"source": "apache",
			"compressible": true,
			"extensions": [
				"jsonml"
			]
		},
		"application/jwk+json": {
			"source": "iana",
			"compressible": true
		},
		"application/jwk-set+json": {
			"source": "iana",
			"compressible": true
		},
		"application/jwt": {
			"source": "iana"
		},
		"application/kpml-request+xml": {
			"source": "iana"
		},
		"application/kpml-response+xml": {
			"source": "iana"
		},
		"application/ld+json": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"jsonld"
			]
		},
		"application/lgr+xml": {
			"source": "iana"
		},
		"application/link-format": {
			"source": "iana"
		},
		"application/load-control+xml": {
			"source": "iana"
		},
		"application/lost+xml": {
			"source": "iana",
			"extensions": [
				"lostxml"
			]
		},
		"application/lostsync+xml": {
			"source": "iana"
		},
		"application/lxf": {
			"source": "iana"
		},
		"application/mac-binhex40": {
			"source": "iana",
			"extensions": [
				"hqx"
			]
		},
		"application/mac-compactpro": {
			"source": "apache",
			"extensions": [
				"cpt"
			]
		},
		"application/macwriteii": {
			"source": "iana"
		},
		"application/mads+xml": {
			"source": "iana",
			"extensions": [
				"mads"
			]
		},
		"application/manifest+json": {
			"charset": "UTF-8",
			"compressible": true,
			"extensions": [
				"webmanifest"
			]
		},
		"application/marc": {
			"source": "iana",
			"extensions": [
				"mrc"
			]
		},
		"application/marcxml+xml": {
			"source": "iana",
			"extensions": [
				"mrcx"
			]
		},
		"application/mathematica": {
			"source": "iana",
			"extensions": [
				"ma",
				"nb",
				"mb"
			]
		},
		"application/mathml+xml": {
			"source": "iana",
			"extensions": [
				"mathml"
			]
		},
		"application/mathml-content+xml": {
			"source": "iana"
		},
		"application/mathml-presentation+xml": {
			"source": "iana"
		},
		"application/mbms-associated-procedure-description+xml": {
			"source": "iana"
		},
		"application/mbms-deregister+xml": {
			"source": "iana"
		},
		"application/mbms-envelope+xml": {
			"source": "iana"
		},
		"application/mbms-msk+xml": {
			"source": "iana"
		},
		"application/mbms-msk-response+xml": {
			"source": "iana"
		},
		"application/mbms-protection-description+xml": {
			"source": "iana"
		},
		"application/mbms-reception-report+xml": {
			"source": "iana"
		},
		"application/mbms-register+xml": {
			"source": "iana"
		},
		"application/mbms-register-response+xml": {
			"source": "iana"
		},
		"application/mbms-schedule+xml": {
			"source": "iana"
		},
		"application/mbms-user-service-description+xml": {
			"source": "iana"
		},
		"application/mbox": {
			"source": "iana",
			"extensions": [
				"mbox"
			]
		},
		"application/media-policy-dataset+xml": {
			"source": "iana"
		},
		"application/media_control+xml": {
			"source": "iana"
		},
		"application/mediaservercontrol+xml": {
			"source": "iana",
			"extensions": [
				"mscml"
			]
		},
		"application/merge-patch+json": {
			"source": "iana",
			"compressible": true
		},
		"application/metalink+xml": {
			"source": "apache",
			"extensions": [
				"metalink"
			]
		},
		"application/metalink4+xml": {
			"source": "iana",
			"extensions": [
				"meta4"
			]
		},
		"application/mets+xml": {
			"source": "iana",
			"extensions": [
				"mets"
			]
		},
		"application/mf4": {
			"source": "iana"
		},
		"application/mikey": {
			"source": "iana"
		},
		"application/mods+xml": {
			"source": "iana",
			"extensions": [
				"mods"
			]
		},
		"application/moss-keys": {
			"source": "iana"
		},
		"application/moss-signature": {
			"source": "iana"
		},
		"application/mosskey-data": {
			"source": "iana"
		},
		"application/mosskey-request": {
			"source": "iana"
		},
		"application/mp21": {
			"source": "iana",
			"extensions": [
				"m21",
				"mp21"
			]
		},
		"application/mp4": {
			"source": "iana",
			"extensions": [
				"mp4s",
				"m4p"
			]
		},
		"application/mpeg4-generic": {
			"source": "iana"
		},
		"application/mpeg4-iod": {
			"source": "iana"
		},
		"application/mpeg4-iod-xmt": {
			"source": "iana"
		},
		"application/mrb-consumer+xml": {
			"source": "iana"
		},
		"application/mrb-publish+xml": {
			"source": "iana"
		},
		"application/msc-ivr+xml": {
			"source": "iana"
		},
		"application/msc-mixer+xml": {
			"source": "iana"
		},
		"application/msword": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"doc",
				"dot"
			]
		},
		"application/mxf": {
			"source": "iana",
			"extensions": [
				"mxf"
			]
		},
		"application/nasdata": {
			"source": "iana"
		},
		"application/news-checkgroups": {
			"source": "iana"
		},
		"application/news-groupinfo": {
			"source": "iana"
		},
		"application/news-transmission": {
			"source": "iana"
		},
		"application/nlsml+xml": {
			"source": "iana"
		},
		"application/nss": {
			"source": "iana"
		},
		"application/ocsp-request": {
			"source": "iana"
		},
		"application/ocsp-response": {
			"source": "iana"
		},
		"application/octet-stream": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"bin",
				"dms",
				"lrf",
				"mar",
				"so",
				"dist",
				"distz",
				"pkg",
				"bpk",
				"dump",
				"elc",
				"deploy",
				"exe",
				"dll",
				"deb",
				"dmg",
				"iso",
				"img",
				"msi",
				"msp",
				"msm",
				"buffer"
			]
		},
		"application/oda": {
			"source": "iana",
			"extensions": [
				"oda"
			]
		},
		"application/odx": {
			"source": "iana"
		},
		"application/oebps-package+xml": {
			"source": "iana",
			"extensions": [
				"opf"
			]
		},
		"application/ogg": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"ogx"
			]
		},
		"application/omdoc+xml": {
			"source": "apache",
			"extensions": [
				"omdoc"
			]
		},
		"application/onenote": {
			"source": "apache",
			"extensions": [
				"onetoc",
				"onetoc2",
				"onetmp",
				"onepkg"
			]
		},
		"application/oxps": {
			"source": "iana",
			"extensions": [
				"oxps"
			]
		},
		"application/p2p-overlay+xml": {
			"source": "iana"
		},
		"application/parityfec": {
			"source": "iana"
		},
		"application/patch-ops-error+xml": {
			"source": "iana",
			"extensions": [
				"xer"
			]
		},
		"application/pdf": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"pdf"
			]
		},
		"application/pdx": {
			"source": "iana"
		},
		"application/pgp-encrypted": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"pgp"
			]
		},
		"application/pgp-keys": {
			"source": "iana"
		},
		"application/pgp-signature": {
			"source": "iana",
			"extensions": [
				"asc",
				"sig"
			]
		},
		"application/pics-rules": {
			"source": "apache",
			"extensions": [
				"prf"
			]
		},
		"application/pidf+xml": {
			"source": "iana"
		},
		"application/pidf-diff+xml": {
			"source": "iana"
		},
		"application/pkcs10": {
			"source": "iana",
			"extensions": [
				"p10"
			]
		},
		"application/pkcs12": {
			"source": "iana"
		},
		"application/pkcs7-mime": {
			"source": "iana",
			"extensions": [
				"p7m",
				"p7c"
			]
		},
		"application/pkcs7-signature": {
			"source": "iana",
			"extensions": [
				"p7s"
			]
		},
		"application/pkcs8": {
			"source": "iana",
			"extensions": [
				"p8"
			]
		},
		"application/pkix-attr-cert": {
			"source": "iana",
			"extensions": [
				"ac"
			]
		},
		"application/pkix-cert": {
			"source": "iana",
			"extensions": [
				"cer"
			]
		},
		"application/pkix-crl": {
			"source": "iana",
			"extensions": [
				"crl"
			]
		},
		"application/pkix-pkipath": {
			"source": "iana",
			"extensions": [
				"pkipath"
			]
		},
		"application/pkixcmp": {
			"source": "iana",
			"extensions": [
				"pki"
			]
		},
		"application/pls+xml": {
			"source": "iana",
			"extensions": [
				"pls"
			]
		},
		"application/poc-settings+xml": {
			"source": "iana"
		},
		"application/postscript": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"ai",
				"eps",
				"ps"
			]
		},
		"application/ppsp-tracker+json": {
			"source": "iana",
			"compressible": true
		},
		"application/problem+json": {
			"source": "iana",
			"compressible": true
		},
		"application/problem+xml": {
			"source": "iana"
		},
		"application/provenance+xml": {
			"source": "iana"
		},
		"application/prs.alvestrand.titrax-sheet": {
			"source": "iana"
		},
		"application/prs.cww": {
			"source": "iana",
			"extensions": [
				"cww"
			]
		},
		"application/prs.hpub+zip": {
			"source": "iana"
		},
		"application/prs.nprend": {
			"source": "iana"
		},
		"application/prs.plucker": {
			"source": "iana"
		},
		"application/prs.rdf-xml-crypt": {
			"source": "iana"
		},
		"application/prs.xsf+xml": {
			"source": "iana"
		},
		"application/pskc+xml": {
			"source": "iana",
			"extensions": [
				"pskcxml"
			]
		},
		"application/qsig": {
			"source": "iana"
		},
		"application/raptorfec": {
			"source": "iana"
		},
		"application/rdap+json": {
			"source": "iana",
			"compressible": true
		},
		"application/rdf+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"rdf"
			]
		},
		"application/reginfo+xml": {
			"source": "iana",
			"extensions": [
				"rif"
			]
		},
		"application/relax-ng-compact-syntax": {
			"source": "iana",
			"extensions": [
				"rnc"
			]
		},
		"application/remote-printing": {
			"source": "iana"
		},
		"application/reputon+json": {
			"source": "iana",
			"compressible": true
		},
		"application/resource-lists+xml": {
			"source": "iana",
			"extensions": [
				"rl"
			]
		},
		"application/resource-lists-diff+xml": {
			"source": "iana",
			"extensions": [
				"rld"
			]
		},
		"application/rfc+xml": {
			"source": "iana"
		},
		"application/riscos": {
			"source": "iana"
		},
		"application/rlmi+xml": {
			"source": "iana"
		},
		"application/rls-services+xml": {
			"source": "iana",
			"extensions": [
				"rs"
			]
		},
		"application/rpki-ghostbusters": {
			"source": "iana",
			"extensions": [
				"gbr"
			]
		},
		"application/rpki-manifest": {
			"source": "iana",
			"extensions": [
				"mft"
			]
		},
		"application/rpki-roa": {
			"source": "iana",
			"extensions": [
				"roa"
			]
		},
		"application/rpki-updown": {
			"source": "iana"
		},
		"application/rsd+xml": {
			"source": "apache",
			"extensions": [
				"rsd"
			]
		},
		"application/rss+xml": {
			"source": "apache",
			"compressible": true,
			"extensions": [
				"rss"
			]
		},
		"application/rtf": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"rtf"
			]
		},
		"application/rtploopback": {
			"source": "iana"
		},
		"application/rtx": {
			"source": "iana"
		},
		"application/samlassertion+xml": {
			"source": "iana"
		},
		"application/samlmetadata+xml": {
			"source": "iana"
		},
		"application/sbml+xml": {
			"source": "iana",
			"extensions": [
				"sbml"
			]
		},
		"application/scaip+xml": {
			"source": "iana"
		},
		"application/scim+json": {
			"source": "iana",
			"compressible": true
		},
		"application/scvp-cv-request": {
			"source": "iana",
			"extensions": [
				"scq"
			]
		},
		"application/scvp-cv-response": {
			"source": "iana",
			"extensions": [
				"scs"
			]
		},
		"application/scvp-vp-request": {
			"source": "iana",
			"extensions": [
				"spq"
			]
		},
		"application/scvp-vp-response": {
			"source": "iana",
			"extensions": [
				"spp"
			]
		},
		"application/sdp": {
			"source": "iana",
			"extensions": [
				"sdp"
			]
		},
		"application/sep+xml": {
			"source": "iana"
		},
		"application/sep-exi": {
			"source": "iana"
		},
		"application/session-info": {
			"source": "iana"
		},
		"application/set-payment": {
			"source": "iana"
		},
		"application/set-payment-initiation": {
			"source": "iana",
			"extensions": [
				"setpay"
			]
		},
		"application/set-registration": {
			"source": "iana"
		},
		"application/set-registration-initiation": {
			"source": "iana",
			"extensions": [
				"setreg"
			]
		},
		"application/sgml": {
			"source": "iana"
		},
		"application/sgml-open-catalog": {
			"source": "iana"
		},
		"application/shf+xml": {
			"source": "iana",
			"extensions": [
				"shf"
			]
		},
		"application/sieve": {
			"source": "iana"
		},
		"application/simple-filter+xml": {
			"source": "iana"
		},
		"application/simple-message-summary": {
			"source": "iana"
		},
		"application/simplesymbolcontainer": {
			"source": "iana"
		},
		"application/slate": {
			"source": "iana"
		},
		"application/smil": {
			"source": "iana"
		},
		"application/smil+xml": {
			"source": "iana",
			"extensions": [
				"smi",
				"smil"
			]
		},
		"application/smpte336m": {
			"source": "iana"
		},
		"application/soap+fastinfoset": {
			"source": "iana"
		},
		"application/soap+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/sparql-query": {
			"source": "iana",
			"extensions": [
				"rq"
			]
		},
		"application/sparql-results+xml": {
			"source": "iana",
			"extensions": [
				"srx"
			]
		},
		"application/spirits-event+xml": {
			"source": "iana"
		},
		"application/sql": {
			"source": "iana"
		},
		"application/srgs": {
			"source": "iana",
			"extensions": [
				"gram"
			]
		},
		"application/srgs+xml": {
			"source": "iana",
			"extensions": [
				"grxml"
			]
		},
		"application/sru+xml": {
			"source": "iana",
			"extensions": [
				"sru"
			]
		},
		"application/ssdl+xml": {
			"source": "apache",
			"extensions": [
				"ssdl"
			]
		},
		"application/ssml+xml": {
			"source": "iana",
			"extensions": [
				"ssml"
			]
		},
		"application/tamp-apex-update": {
			"source": "iana"
		},
		"application/tamp-apex-update-confirm": {
			"source": "iana"
		},
		"application/tamp-community-update": {
			"source": "iana"
		},
		"application/tamp-community-update-confirm": {
			"source": "iana"
		},
		"application/tamp-error": {
			"source": "iana"
		},
		"application/tamp-sequence-adjust": {
			"source": "iana"
		},
		"application/tamp-sequence-adjust-confirm": {
			"source": "iana"
		},
		"application/tamp-status-query": {
			"source": "iana"
		},
		"application/tamp-status-response": {
			"source": "iana"
		},
		"application/tamp-update": {
			"source": "iana"
		},
		"application/tamp-update-confirm": {
			"source": "iana"
		},
		"application/tar": {
			"compressible": true
		},
		"application/tei+xml": {
			"source": "iana",
			"extensions": [
				"tei",
				"teicorpus"
			]
		},
		"application/thraud+xml": {
			"source": "iana",
			"extensions": [
				"tfi"
			]
		},
		"application/timestamp-query": {
			"source": "iana"
		},
		"application/timestamp-reply": {
			"source": "iana"
		},
		"application/timestamped-data": {
			"source": "iana",
			"extensions": [
				"tsd"
			]
		},
		"application/ttml+xml": {
			"source": "iana"
		},
		"application/tve-trigger": {
			"source": "iana"
		},
		"application/ulpfec": {
			"source": "iana"
		},
		"application/urc-grpsheet+xml": {
			"source": "iana"
		},
		"application/urc-ressheet+xml": {
			"source": "iana"
		},
		"application/urc-targetdesc+xml": {
			"source": "iana"
		},
		"application/urc-uisocketdesc+xml": {
			"source": "iana"
		},
		"application/vcard+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vcard+xml": {
			"source": "iana"
		},
		"application/vemmi": {
			"source": "iana"
		},
		"application/vividence.scriptfile": {
			"source": "apache"
		},
		"application/vnd.3gpp-prose+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp-prose-pc3ch+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp.access-transfer-events+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp.bsf+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp.mid-call+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp.pic-bw-large": {
			"source": "iana",
			"extensions": [
				"plb"
			]
		},
		"application/vnd.3gpp.pic-bw-small": {
			"source": "iana",
			"extensions": [
				"psb"
			]
		},
		"application/vnd.3gpp.pic-bw-var": {
			"source": "iana",
			"extensions": [
				"pvb"
			]
		},
		"application/vnd.3gpp.sms": {
			"source": "iana"
		},
		"application/vnd.3gpp.sms+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp.srvcc-ext+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp.srvcc-info+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp.state-and-event-info+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp.ussd+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp2.bcmcsinfo+xml": {
			"source": "iana"
		},
		"application/vnd.3gpp2.sms": {
			"source": "iana"
		},
		"application/vnd.3gpp2.tcap": {
			"source": "iana",
			"extensions": [
				"tcap"
			]
		},
		"application/vnd.3lightssoftware.imagescal": {
			"source": "iana"
		},
		"application/vnd.3m.post-it-notes": {
			"source": "iana",
			"extensions": [
				"pwn"
			]
		},
		"application/vnd.accpac.simply.aso": {
			"source": "iana",
			"extensions": [
				"aso"
			]
		},
		"application/vnd.accpac.simply.imp": {
			"source": "iana",
			"extensions": [
				"imp"
			]
		},
		"application/vnd.acucobol": {
			"source": "iana",
			"extensions": [
				"acu"
			]
		},
		"application/vnd.acucorp": {
			"source": "iana",
			"extensions": [
				"atc",
				"acutc"
			]
		},
		"application/vnd.adobe.air-application-installer-package+zip": {
			"source": "apache",
			"extensions": [
				"air"
			]
		},
		"application/vnd.adobe.flash.movie": {
			"source": "iana"
		},
		"application/vnd.adobe.formscentral.fcdt": {
			"source": "iana",
			"extensions": [
				"fcdt"
			]
		},
		"application/vnd.adobe.fxp": {
			"source": "iana",
			"extensions": [
				"fxp",
				"fxpl"
			]
		},
		"application/vnd.adobe.partial-upload": {
			"source": "iana"
		},
		"application/vnd.adobe.xdp+xml": {
			"source": "iana",
			"extensions": [
				"xdp"
			]
		},
		"application/vnd.adobe.xfdf": {
			"source": "iana",
			"extensions": [
				"xfdf"
			]
		},
		"application/vnd.aether.imp": {
			"source": "iana"
		},
		"application/vnd.ah-barcode": {
			"source": "iana"
		},
		"application/vnd.ahead.space": {
			"source": "iana",
			"extensions": [
				"ahead"
			]
		},
		"application/vnd.airzip.filesecure.azf": {
			"source": "iana",
			"extensions": [
				"azf"
			]
		},
		"application/vnd.airzip.filesecure.azs": {
			"source": "iana",
			"extensions": [
				"azs"
			]
		},
		"application/vnd.amazon.ebook": {
			"source": "apache",
			"extensions": [
				"azw"
			]
		},
		"application/vnd.amazon.mobi8-ebook": {
			"source": "iana"
		},
		"application/vnd.americandynamics.acc": {
			"source": "iana",
			"extensions": [
				"acc"
			]
		},
		"application/vnd.amiga.ami": {
			"source": "iana",
			"extensions": [
				"ami"
			]
		},
		"application/vnd.amundsen.maze+xml": {
			"source": "iana"
		},
		"application/vnd.android.package-archive": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"apk"
			]
		},
		"application/vnd.anki": {
			"source": "iana"
		},
		"application/vnd.anser-web-certificate-issue-initiation": {
			"source": "iana",
			"extensions": [
				"cii"
			]
		},
		"application/vnd.anser-web-funds-transfer-initiation": {
			"source": "apache",
			"extensions": [
				"fti"
			]
		},
		"application/vnd.antix.game-component": {
			"source": "iana",
			"extensions": [
				"atx"
			]
		},
		"application/vnd.apache.thrift.binary": {
			"source": "iana"
		},
		"application/vnd.apache.thrift.compact": {
			"source": "iana"
		},
		"application/vnd.apache.thrift.json": {
			"source": "iana"
		},
		"application/vnd.api+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.apple.installer+xml": {
			"source": "iana",
			"extensions": [
				"mpkg"
			]
		},
		"application/vnd.apple.mpegurl": {
			"source": "iana",
			"extensions": [
				"m3u8"
			]
		},
		"application/vnd.apple.pkpass": {
			"compressible": false,
			"extensions": [
				"pkpass"
			]
		},
		"application/vnd.arastra.swi": {
			"source": "iana"
		},
		"application/vnd.aristanetworks.swi": {
			"source": "iana",
			"extensions": [
				"swi"
			]
		},
		"application/vnd.artsquare": {
			"source": "iana"
		},
		"application/vnd.astraea-software.iota": {
			"source": "iana",
			"extensions": [
				"iota"
			]
		},
		"application/vnd.audiograph": {
			"source": "iana",
			"extensions": [
				"aep"
			]
		},
		"application/vnd.autopackage": {
			"source": "iana"
		},
		"application/vnd.avistar+xml": {
			"source": "iana"
		},
		"application/vnd.balsamiq.bmml+xml": {
			"source": "iana"
		},
		"application/vnd.balsamiq.bmpr": {
			"source": "iana"
		},
		"application/vnd.bekitzur-stech+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.biopax.rdf+xml": {
			"source": "iana"
		},
		"application/vnd.blueice.multipass": {
			"source": "iana",
			"extensions": [
				"mpm"
			]
		},
		"application/vnd.bluetooth.ep.oob": {
			"source": "iana"
		},
		"application/vnd.bluetooth.le.oob": {
			"source": "iana"
		},
		"application/vnd.bmi": {
			"source": "iana",
			"extensions": [
				"bmi"
			]
		},
		"application/vnd.businessobjects": {
			"source": "iana",
			"extensions": [
				"rep"
			]
		},
		"application/vnd.cab-jscript": {
			"source": "iana"
		},
		"application/vnd.canon-cpdl": {
			"source": "iana"
		},
		"application/vnd.canon-lips": {
			"source": "iana"
		},
		"application/vnd.cendio.thinlinc.clientconf": {
			"source": "iana"
		},
		"application/vnd.century-systems.tcp_stream": {
			"source": "iana"
		},
		"application/vnd.chemdraw+xml": {
			"source": "iana",
			"extensions": [
				"cdxml"
			]
		},
		"application/vnd.chess-pgn": {
			"source": "iana"
		},
		"application/vnd.chipnuts.karaoke-mmd": {
			"source": "iana",
			"extensions": [
				"mmd"
			]
		},
		"application/vnd.cinderella": {
			"source": "iana",
			"extensions": [
				"cdy"
			]
		},
		"application/vnd.cirpack.isdn-ext": {
			"source": "iana"
		},
		"application/vnd.citationstyles.style+xml": {
			"source": "iana"
		},
		"application/vnd.claymore": {
			"source": "iana",
			"extensions": [
				"cla"
			]
		},
		"application/vnd.cloanto.rp9": {
			"source": "iana",
			"extensions": [
				"rp9"
			]
		},
		"application/vnd.clonk.c4group": {
			"source": "iana",
			"extensions": [
				"c4g",
				"c4d",
				"c4f",
				"c4p",
				"c4u"
			]
		},
		"application/vnd.cluetrust.cartomobile-config": {
			"source": "iana",
			"extensions": [
				"c11amc"
			]
		},
		"application/vnd.cluetrust.cartomobile-config-pkg": {
			"source": "iana",
			"extensions": [
				"c11amz"
			]
		},
		"application/vnd.coffeescript": {
			"source": "iana"
		},
		"application/vnd.collection+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.collection.doc+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.collection.next+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.comicbook+zip": {
			"source": "iana"
		},
		"application/vnd.commerce-battelle": {
			"source": "iana"
		},
		"application/vnd.commonspace": {
			"source": "iana",
			"extensions": [
				"csp"
			]
		},
		"application/vnd.contact.cmsg": {
			"source": "iana",
			"extensions": [
				"cdbcmsg"
			]
		},
		"application/vnd.coreos.ignition+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.cosmocaller": {
			"source": "iana",
			"extensions": [
				"cmc"
			]
		},
		"application/vnd.crick.clicker": {
			"source": "iana",
			"extensions": [
				"clkx"
			]
		},
		"application/vnd.crick.clicker.keyboard": {
			"source": "iana",
			"extensions": [
				"clkk"
			]
		},
		"application/vnd.crick.clicker.palette": {
			"source": "iana",
			"extensions": [
				"clkp"
			]
		},
		"application/vnd.crick.clicker.template": {
			"source": "iana",
			"extensions": [
				"clkt"
			]
		},
		"application/vnd.crick.clicker.wordbank": {
			"source": "iana",
			"extensions": [
				"clkw"
			]
		},
		"application/vnd.criticaltools.wbs+xml": {
			"source": "iana",
			"extensions": [
				"wbs"
			]
		},
		"application/vnd.ctc-posml": {
			"source": "iana",
			"extensions": [
				"pml"
			]
		},
		"application/vnd.ctct.ws+xml": {
			"source": "iana"
		},
		"application/vnd.cups-pdf": {
			"source": "iana"
		},
		"application/vnd.cups-postscript": {
			"source": "iana"
		},
		"application/vnd.cups-ppd": {
			"source": "iana",
			"extensions": [
				"ppd"
			]
		},
		"application/vnd.cups-raster": {
			"source": "iana"
		},
		"application/vnd.cups-raw": {
			"source": "iana"
		},
		"application/vnd.curl": {
			"source": "iana"
		},
		"application/vnd.curl.car": {
			"source": "apache",
			"extensions": [
				"car"
			]
		},
		"application/vnd.curl.pcurl": {
			"source": "apache",
			"extensions": [
				"pcurl"
			]
		},
		"application/vnd.cyan.dean.root+xml": {
			"source": "iana"
		},
		"application/vnd.cybank": {
			"source": "iana"
		},
		"application/vnd.d2l.coursepackage1p0+zip": {
			"source": "iana"
		},
		"application/vnd.dart": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"dart"
			]
		},
		"application/vnd.data-vision.rdz": {
			"source": "iana",
			"extensions": [
				"rdz"
			]
		},
		"application/vnd.debian.binary-package": {
			"source": "iana"
		},
		"application/vnd.dece.data": {
			"source": "iana",
			"extensions": [
				"uvf",
				"uvvf",
				"uvd",
				"uvvd"
			]
		},
		"application/vnd.dece.ttml+xml": {
			"source": "iana",
			"extensions": [
				"uvt",
				"uvvt"
			]
		},
		"application/vnd.dece.unspecified": {
			"source": "iana",
			"extensions": [
				"uvx",
				"uvvx"
			]
		},
		"application/vnd.dece.zip": {
			"source": "iana",
			"extensions": [
				"uvz",
				"uvvz"
			]
		},
		"application/vnd.denovo.fcselayout-link": {
			"source": "iana",
			"extensions": [
				"fe_launch"
			]
		},
		"application/vnd.desmume-movie": {
			"source": "iana"
		},
		"application/vnd.desmume.movie": {
			"source": "apache"
		},
		"application/vnd.dir-bi.plate-dl-nosuffix": {
			"source": "iana"
		},
		"application/vnd.dm.delegation+xml": {
			"source": "iana"
		},
		"application/vnd.dna": {
			"source": "iana",
			"extensions": [
				"dna"
			]
		},
		"application/vnd.document+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.dolby.mlp": {
			"source": "apache",
			"extensions": [
				"mlp"
			]
		},
		"application/vnd.dolby.mobile.1": {
			"source": "iana"
		},
		"application/vnd.dolby.mobile.2": {
			"source": "iana"
		},
		"application/vnd.doremir.scorecloud-binary-document": {
			"source": "iana"
		},
		"application/vnd.dpgraph": {
			"source": "iana",
			"extensions": [
				"dpg"
			]
		},
		"application/vnd.dreamfactory": {
			"source": "iana",
			"extensions": [
				"dfac"
			]
		},
		"application/vnd.drive+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ds-keypoint": {
			"source": "apache",
			"extensions": [
				"kpxx"
			]
		},
		"application/vnd.dtg.local": {
			"source": "iana"
		},
		"application/vnd.dtg.local.flash": {
			"source": "iana"
		},
		"application/vnd.dtg.local.html": {
			"source": "iana"
		},
		"application/vnd.dvb.ait": {
			"source": "iana",
			"extensions": [
				"ait"
			]
		},
		"application/vnd.dvb.dvbj": {
			"source": "iana"
		},
		"application/vnd.dvb.esgcontainer": {
			"source": "iana"
		},
		"application/vnd.dvb.ipdcdftnotifaccess": {
			"source": "iana"
		},
		"application/vnd.dvb.ipdcesgaccess": {
			"source": "iana"
		},
		"application/vnd.dvb.ipdcesgaccess2": {
			"source": "iana"
		},
		"application/vnd.dvb.ipdcesgpdd": {
			"source": "iana"
		},
		"application/vnd.dvb.ipdcroaming": {
			"source": "iana"
		},
		"application/vnd.dvb.iptv.alfec-base": {
			"source": "iana"
		},
		"application/vnd.dvb.iptv.alfec-enhancement": {
			"source": "iana"
		},
		"application/vnd.dvb.notif-aggregate-root+xml": {
			"source": "iana"
		},
		"application/vnd.dvb.notif-container+xml": {
			"source": "iana"
		},
		"application/vnd.dvb.notif-generic+xml": {
			"source": "iana"
		},
		"application/vnd.dvb.notif-ia-msglist+xml": {
			"source": "iana"
		},
		"application/vnd.dvb.notif-ia-registration-request+xml": {
			"source": "iana"
		},
		"application/vnd.dvb.notif-ia-registration-response+xml": {
			"source": "iana"
		},
		"application/vnd.dvb.notif-init+xml": {
			"source": "iana"
		},
		"application/vnd.dvb.pfr": {
			"source": "iana"
		},
		"application/vnd.dvb.service": {
			"source": "iana",
			"extensions": [
				"svc"
			]
		},
		"application/vnd.dxr": {
			"source": "iana"
		},
		"application/vnd.dynageo": {
			"source": "iana",
			"extensions": [
				"geo"
			]
		},
		"application/vnd.dzr": {
			"source": "iana"
		},
		"application/vnd.easykaraoke.cdgdownload": {
			"source": "iana"
		},
		"application/vnd.ecdis-update": {
			"source": "iana"
		},
		"application/vnd.ecowin.chart": {
			"source": "iana",
			"extensions": [
				"mag"
			]
		},
		"application/vnd.ecowin.filerequest": {
			"source": "iana"
		},
		"application/vnd.ecowin.fileupdate": {
			"source": "iana"
		},
		"application/vnd.ecowin.series": {
			"source": "iana"
		},
		"application/vnd.ecowin.seriesrequest": {
			"source": "iana"
		},
		"application/vnd.ecowin.seriesupdate": {
			"source": "iana"
		},
		"application/vnd.emclient.accessrequest+xml": {
			"source": "iana"
		},
		"application/vnd.enliven": {
			"source": "iana",
			"extensions": [
				"nml"
			]
		},
		"application/vnd.enphase.envoy": {
			"source": "iana"
		},
		"application/vnd.eprints.data+xml": {
			"source": "iana"
		},
		"application/vnd.epson.esf": {
			"source": "iana",
			"extensions": [
				"esf"
			]
		},
		"application/vnd.epson.msf": {
			"source": "iana",
			"extensions": [
				"msf"
			]
		},
		"application/vnd.epson.quickanime": {
			"source": "iana",
			"extensions": [
				"qam"
			]
		},
		"application/vnd.epson.salt": {
			"source": "iana",
			"extensions": [
				"slt"
			]
		},
		"application/vnd.epson.ssf": {
			"source": "iana",
			"extensions": [
				"ssf"
			]
		},
		"application/vnd.ericsson.quickcall": {
			"source": "iana"
		},
		"application/vnd.espass-espass+zip": {
			"source": "iana"
		},
		"application/vnd.eszigno3+xml": {
			"source": "iana",
			"extensions": [
				"es3",
				"et3"
			]
		},
		"application/vnd.etsi.aoc+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.asic-e+zip": {
			"source": "iana"
		},
		"application/vnd.etsi.asic-s+zip": {
			"source": "iana"
		},
		"application/vnd.etsi.cug+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.iptvcommand+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.iptvdiscovery+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.iptvprofile+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.iptvsad-bc+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.iptvsad-cod+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.iptvsad-npvr+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.iptvservice+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.iptvsync+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.iptvueprofile+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.mcid+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.mheg5": {
			"source": "iana"
		},
		"application/vnd.etsi.overload-control-policy-dataset+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.pstn+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.sci+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.simservs+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.timestamp-token": {
			"source": "iana"
		},
		"application/vnd.etsi.tsl+xml": {
			"source": "iana"
		},
		"application/vnd.etsi.tsl.der": {
			"source": "iana"
		},
		"application/vnd.eudora.data": {
			"source": "iana"
		},
		"application/vnd.ezpix-album": {
			"source": "iana",
			"extensions": [
				"ez2"
			]
		},
		"application/vnd.ezpix-package": {
			"source": "iana",
			"extensions": [
				"ez3"
			]
		},
		"application/vnd.f-secure.mobile": {
			"source": "iana"
		},
		"application/vnd.fastcopy-disk-image": {
			"source": "iana"
		},
		"application/vnd.fdf": {
			"source": "iana",
			"extensions": [
				"fdf"
			]
		},
		"application/vnd.fdsn.mseed": {
			"source": "iana",
			"extensions": [
				"mseed"
			]
		},
		"application/vnd.fdsn.seed": {
			"source": "iana",
			"extensions": [
				"seed",
				"dataless"
			]
		},
		"application/vnd.ffsns": {
			"source": "iana"
		},
		"application/vnd.filmit.zfc": {
			"source": "iana"
		},
		"application/vnd.fints": {
			"source": "iana"
		},
		"application/vnd.firemonkeys.cloudcell": {
			"source": "iana"
		},
		"application/vnd.flographit": {
			"source": "iana",
			"extensions": [
				"gph"
			]
		},
		"application/vnd.fluxtime.clip": {
			"source": "iana",
			"extensions": [
				"ftc"
			]
		},
		"application/vnd.font-fontforge-sfd": {
			"source": "iana"
		},
		"application/vnd.framemaker": {
			"source": "iana",
			"extensions": [
				"fm",
				"frame",
				"maker",
				"book"
			]
		},
		"application/vnd.frogans.fnc": {
			"source": "iana",
			"extensions": [
				"fnc"
			]
		},
		"application/vnd.frogans.ltf": {
			"source": "iana",
			"extensions": [
				"ltf"
			]
		},
		"application/vnd.fsc.weblaunch": {
			"source": "iana",
			"extensions": [
				"fsc"
			]
		},
		"application/vnd.fujitsu.oasys": {
			"source": "iana",
			"extensions": [
				"oas"
			]
		},
		"application/vnd.fujitsu.oasys2": {
			"source": "iana",
			"extensions": [
				"oa2"
			]
		},
		"application/vnd.fujitsu.oasys3": {
			"source": "iana",
			"extensions": [
				"oa3"
			]
		},
		"application/vnd.fujitsu.oasysgp": {
			"source": "iana",
			"extensions": [
				"fg5"
			]
		},
		"application/vnd.fujitsu.oasysprs": {
			"source": "iana",
			"extensions": [
				"bh2"
			]
		},
		"application/vnd.fujixerox.art-ex": {
			"source": "iana"
		},
		"application/vnd.fujixerox.art4": {
			"source": "iana"
		},
		"application/vnd.fujixerox.ddd": {
			"source": "iana",
			"extensions": [
				"ddd"
			]
		},
		"application/vnd.fujixerox.docuworks": {
			"source": "iana",
			"extensions": [
				"xdw"
			]
		},
		"application/vnd.fujixerox.docuworks.binder": {
			"source": "iana",
			"extensions": [
				"xbd"
			]
		},
		"application/vnd.fujixerox.docuworks.container": {
			"source": "iana"
		},
		"application/vnd.fujixerox.hbpl": {
			"source": "iana"
		},
		"application/vnd.fut-misnet": {
			"source": "iana"
		},
		"application/vnd.fuzzysheet": {
			"source": "iana",
			"extensions": [
				"fzs"
			]
		},
		"application/vnd.genomatix.tuxedo": {
			"source": "iana",
			"extensions": [
				"txd"
			]
		},
		"application/vnd.geo+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.geocube+xml": {
			"source": "iana"
		},
		"application/vnd.geogebra.file": {
			"source": "iana",
			"extensions": [
				"ggb"
			]
		},
		"application/vnd.geogebra.tool": {
			"source": "iana",
			"extensions": [
				"ggt"
			]
		},
		"application/vnd.geometry-explorer": {
			"source": "iana",
			"extensions": [
				"gex",
				"gre"
			]
		},
		"application/vnd.geonext": {
			"source": "iana",
			"extensions": [
				"gxt"
			]
		},
		"application/vnd.geoplan": {
			"source": "iana",
			"extensions": [
				"g2w"
			]
		},
		"application/vnd.geospace": {
			"source": "iana",
			"extensions": [
				"g3w"
			]
		},
		"application/vnd.gerber": {
			"source": "iana"
		},
		"application/vnd.globalplatform.card-content-mgt": {
			"source": "iana"
		},
		"application/vnd.globalplatform.card-content-mgt-response": {
			"source": "iana"
		},
		"application/vnd.gmx": {
			"source": "iana",
			"extensions": [
				"gmx"
			]
		},
		"application/vnd.google-apps.document": {
			"compressible": false,
			"extensions": [
				"gdoc"
			]
		},
		"application/vnd.google-apps.presentation": {
			"compressible": false,
			"extensions": [
				"gslides"
			]
		},
		"application/vnd.google-apps.spreadsheet": {
			"compressible": false,
			"extensions": [
				"gsheet"
			]
		},
		"application/vnd.google-earth.kml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"kml"
			]
		},
		"application/vnd.google-earth.kmz": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"kmz"
			]
		},
		"application/vnd.gov.sk.e-form+xml": {
			"source": "iana"
		},
		"application/vnd.gov.sk.e-form+zip": {
			"source": "iana"
		},
		"application/vnd.gov.sk.xmldatacontainer+xml": {
			"source": "iana"
		},
		"application/vnd.grafeq": {
			"source": "iana",
			"extensions": [
				"gqf",
				"gqs"
			]
		},
		"application/vnd.gridmp": {
			"source": "iana"
		},
		"application/vnd.groove-account": {
			"source": "iana",
			"extensions": [
				"gac"
			]
		},
		"application/vnd.groove-help": {
			"source": "iana",
			"extensions": [
				"ghf"
			]
		},
		"application/vnd.groove-identity-message": {
			"source": "iana",
			"extensions": [
				"gim"
			]
		},
		"application/vnd.groove-injector": {
			"source": "iana",
			"extensions": [
				"grv"
			]
		},
		"application/vnd.groove-tool-message": {
			"source": "iana",
			"extensions": [
				"gtm"
			]
		},
		"application/vnd.groove-tool-template": {
			"source": "iana",
			"extensions": [
				"tpl"
			]
		},
		"application/vnd.groove-vcard": {
			"source": "iana",
			"extensions": [
				"vcg"
			]
		},
		"application/vnd.hal+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.hal+xml": {
			"source": "iana",
			"extensions": [
				"hal"
			]
		},
		"application/vnd.handheld-entertainment+xml": {
			"source": "iana",
			"extensions": [
				"zmm"
			]
		},
		"application/vnd.hbci": {
			"source": "iana",
			"extensions": [
				"hbci"
			]
		},
		"application/vnd.hcl-bireports": {
			"source": "iana"
		},
		"application/vnd.hdt": {
			"source": "iana"
		},
		"application/vnd.heroku+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.hhe.lesson-player": {
			"source": "iana",
			"extensions": [
				"les"
			]
		},
		"application/vnd.hp-hpgl": {
			"source": "iana",
			"extensions": [
				"hpgl"
			]
		},
		"application/vnd.hp-hpid": {
			"source": "iana",
			"extensions": [
				"hpid"
			]
		},
		"application/vnd.hp-hps": {
			"source": "iana",
			"extensions": [
				"hps"
			]
		},
		"application/vnd.hp-jlyt": {
			"source": "iana",
			"extensions": [
				"jlt"
			]
		},
		"application/vnd.hp-pcl": {
			"source": "iana",
			"extensions": [
				"pcl"
			]
		},
		"application/vnd.hp-pclxl": {
			"source": "iana",
			"extensions": [
				"pclxl"
			]
		},
		"application/vnd.httphone": {
			"source": "iana"
		},
		"application/vnd.hydrostatix.sof-data": {
			"source": "iana",
			"extensions": [
				"sfd-hdstx"
			]
		},
		"application/vnd.hyperdrive+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.hzn-3d-crossword": {
			"source": "iana"
		},
		"application/vnd.ibm.afplinedata": {
			"source": "iana"
		},
		"application/vnd.ibm.electronic-media": {
			"source": "iana"
		},
		"application/vnd.ibm.minipay": {
			"source": "iana",
			"extensions": [
				"mpy"
			]
		},
		"application/vnd.ibm.modcap": {
			"source": "iana",
			"extensions": [
				"afp",
				"listafp",
				"list3820"
			]
		},
		"application/vnd.ibm.rights-management": {
			"source": "iana",
			"extensions": [
				"irm"
			]
		},
		"application/vnd.ibm.secure-container": {
			"source": "iana",
			"extensions": [
				"sc"
			]
		},
		"application/vnd.iccprofile": {
			"source": "iana",
			"extensions": [
				"icc",
				"icm"
			]
		},
		"application/vnd.ieee.1905": {
			"source": "iana"
		},
		"application/vnd.igloader": {
			"source": "iana",
			"extensions": [
				"igl"
			]
		},
		"application/vnd.immervision-ivp": {
			"source": "iana",
			"extensions": [
				"ivp"
			]
		},
		"application/vnd.immervision-ivu": {
			"source": "iana",
			"extensions": [
				"ivu"
			]
		},
		"application/vnd.ims.imsccv1p1": {
			"source": "iana"
		},
		"application/vnd.ims.imsccv1p2": {
			"source": "iana"
		},
		"application/vnd.ims.imsccv1p3": {
			"source": "iana"
		},
		"application/vnd.ims.lis.v2.result+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ims.lti.v2.toolconsumerprofile+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ims.lti.v2.toolproxy+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ims.lti.v2.toolproxy.id+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ims.lti.v2.toolsettings+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ims.lti.v2.toolsettings.simple+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.informedcontrol.rms+xml": {
			"source": "iana"
		},
		"application/vnd.informix-visionary": {
			"source": "iana"
		},
		"application/vnd.infotech.project": {
			"source": "iana"
		},
		"application/vnd.infotech.project+xml": {
			"source": "iana"
		},
		"application/vnd.innopath.wamp.notification": {
			"source": "iana"
		},
		"application/vnd.insors.igm": {
			"source": "iana",
			"extensions": [
				"igm"
			]
		},
		"application/vnd.intercon.formnet": {
			"source": "iana",
			"extensions": [
				"xpw",
				"xpx"
			]
		},
		"application/vnd.intergeo": {
			"source": "iana",
			"extensions": [
				"i2g"
			]
		},
		"application/vnd.intertrust.digibox": {
			"source": "iana"
		},
		"application/vnd.intertrust.nncp": {
			"source": "iana"
		},
		"application/vnd.intu.qbo": {
			"source": "iana",
			"extensions": [
				"qbo"
			]
		},
		"application/vnd.intu.qfx": {
			"source": "iana",
			"extensions": [
				"qfx"
			]
		},
		"application/vnd.iptc.g2.catalogitem+xml": {
			"source": "iana"
		},
		"application/vnd.iptc.g2.conceptitem+xml": {
			"source": "iana"
		},
		"application/vnd.iptc.g2.knowledgeitem+xml": {
			"source": "iana"
		},
		"application/vnd.iptc.g2.newsitem+xml": {
			"source": "iana"
		},
		"application/vnd.iptc.g2.newsmessage+xml": {
			"source": "iana"
		},
		"application/vnd.iptc.g2.packageitem+xml": {
			"source": "iana"
		},
		"application/vnd.iptc.g2.planningitem+xml": {
			"source": "iana"
		},
		"application/vnd.ipunplugged.rcprofile": {
			"source": "iana",
			"extensions": [
				"rcprofile"
			]
		},
		"application/vnd.irepository.package+xml": {
			"source": "iana",
			"extensions": [
				"irp"
			]
		},
		"application/vnd.is-xpr": {
			"source": "iana",
			"extensions": [
				"xpr"
			]
		},
		"application/vnd.isac.fcs": {
			"source": "iana",
			"extensions": [
				"fcs"
			]
		},
		"application/vnd.jam": {
			"source": "iana",
			"extensions": [
				"jam"
			]
		},
		"application/vnd.japannet-directory-service": {
			"source": "iana"
		},
		"application/vnd.japannet-jpnstore-wakeup": {
			"source": "iana"
		},
		"application/vnd.japannet-payment-wakeup": {
			"source": "iana"
		},
		"application/vnd.japannet-registration": {
			"source": "iana"
		},
		"application/vnd.japannet-registration-wakeup": {
			"source": "iana"
		},
		"application/vnd.japannet-setstore-wakeup": {
			"source": "iana"
		},
		"application/vnd.japannet-verification": {
			"source": "iana"
		},
		"application/vnd.japannet-verification-wakeup": {
			"source": "iana"
		},
		"application/vnd.jcp.javame.midlet-rms": {
			"source": "iana",
			"extensions": [
				"rms"
			]
		},
		"application/vnd.jisp": {
			"source": "iana",
			"extensions": [
				"jisp"
			]
		},
		"application/vnd.joost.joda-archive": {
			"source": "iana",
			"extensions": [
				"joda"
			]
		},
		"application/vnd.jsk.isdn-ngn": {
			"source": "iana"
		},
		"application/vnd.kahootz": {
			"source": "iana",
			"extensions": [
				"ktz",
				"ktr"
			]
		},
		"application/vnd.kde.karbon": {
			"source": "iana",
			"extensions": [
				"karbon"
			]
		},
		"application/vnd.kde.kchart": {
			"source": "iana",
			"extensions": [
				"chrt"
			]
		},
		"application/vnd.kde.kformula": {
			"source": "iana",
			"extensions": [
				"kfo"
			]
		},
		"application/vnd.kde.kivio": {
			"source": "iana",
			"extensions": [
				"flw"
			]
		},
		"application/vnd.kde.kontour": {
			"source": "iana",
			"extensions": [
				"kon"
			]
		},
		"application/vnd.kde.kpresenter": {
			"source": "iana",
			"extensions": [
				"kpr",
				"kpt"
			]
		},
		"application/vnd.kde.kspread": {
			"source": "iana",
			"extensions": [
				"ksp"
			]
		},
		"application/vnd.kde.kword": {
			"source": "iana",
			"extensions": [
				"kwd",
				"kwt"
			]
		},
		"application/vnd.kenameaapp": {
			"source": "iana",
			"extensions": [
				"htke"
			]
		},
		"application/vnd.kidspiration": {
			"source": "iana",
			"extensions": [
				"kia"
			]
		},
		"application/vnd.kinar": {
			"source": "iana",
			"extensions": [
				"kne",
				"knp"
			]
		},
		"application/vnd.koan": {
			"source": "iana",
			"extensions": [
				"skp",
				"skd",
				"skt",
				"skm"
			]
		},
		"application/vnd.kodak-descriptor": {
			"source": "iana",
			"extensions": [
				"sse"
			]
		},
		"application/vnd.las.las+xml": {
			"source": "iana",
			"extensions": [
				"lasxml"
			]
		},
		"application/vnd.liberty-request+xml": {
			"source": "iana"
		},
		"application/vnd.llamagraphics.life-balance.desktop": {
			"source": "iana",
			"extensions": [
				"lbd"
			]
		},
		"application/vnd.llamagraphics.life-balance.exchange+xml": {
			"source": "iana",
			"extensions": [
				"lbe"
			]
		},
		"application/vnd.lotus-1-2-3": {
			"source": "iana",
			"extensions": [
				"123"
			]
		},
		"application/vnd.lotus-approach": {
			"source": "iana",
			"extensions": [
				"apr"
			]
		},
		"application/vnd.lotus-freelance": {
			"source": "iana",
			"extensions": [
				"pre"
			]
		},
		"application/vnd.lotus-notes": {
			"source": "iana",
			"extensions": [
				"nsf"
			]
		},
		"application/vnd.lotus-organizer": {
			"source": "iana",
			"extensions": [
				"org"
			]
		},
		"application/vnd.lotus-screencam": {
			"source": "iana",
			"extensions": [
				"scm"
			]
		},
		"application/vnd.lotus-wordpro": {
			"source": "iana",
			"extensions": [
				"lwp"
			]
		},
		"application/vnd.macports.portpkg": {
			"source": "iana",
			"extensions": [
				"portpkg"
			]
		},
		"application/vnd.mapbox-vector-tile": {
			"source": "iana"
		},
		"application/vnd.marlin.drm.actiontoken+xml": {
			"source": "iana"
		},
		"application/vnd.marlin.drm.conftoken+xml": {
			"source": "iana"
		},
		"application/vnd.marlin.drm.license+xml": {
			"source": "iana"
		},
		"application/vnd.marlin.drm.mdcf": {
			"source": "iana"
		},
		"application/vnd.mason+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.maxmind.maxmind-db": {
			"source": "iana"
		},
		"application/vnd.mcd": {
			"source": "iana",
			"extensions": [
				"mcd"
			]
		},
		"application/vnd.medcalcdata": {
			"source": "iana",
			"extensions": [
				"mc1"
			]
		},
		"application/vnd.mediastation.cdkey": {
			"source": "iana",
			"extensions": [
				"cdkey"
			]
		},
		"application/vnd.meridian-slingshot": {
			"source": "iana"
		},
		"application/vnd.mfer": {
			"source": "iana",
			"extensions": [
				"mwf"
			]
		},
		"application/vnd.mfmp": {
			"source": "iana",
			"extensions": [
				"mfm"
			]
		},
		"application/vnd.micro+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.micrografx.flo": {
			"source": "iana",
			"extensions": [
				"flo"
			]
		},
		"application/vnd.micrografx.igx": {
			"source": "iana",
			"extensions": [
				"igx"
			]
		},
		"application/vnd.microsoft.portable-executable": {
			"source": "iana"
		},
		"application/vnd.miele+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.mif": {
			"source": "iana",
			"extensions": [
				"mif"
			]
		},
		"application/vnd.minisoft-hp3000-save": {
			"source": "iana"
		},
		"application/vnd.mitsubishi.misty-guard.trustweb": {
			"source": "iana"
		},
		"application/vnd.mobius.daf": {
			"source": "iana",
			"extensions": [
				"daf"
			]
		},
		"application/vnd.mobius.dis": {
			"source": "iana",
			"extensions": [
				"dis"
			]
		},
		"application/vnd.mobius.mbk": {
			"source": "iana",
			"extensions": [
				"mbk"
			]
		},
		"application/vnd.mobius.mqy": {
			"source": "iana",
			"extensions": [
				"mqy"
			]
		},
		"application/vnd.mobius.msl": {
			"source": "iana",
			"extensions": [
				"msl"
			]
		},
		"application/vnd.mobius.plc": {
			"source": "iana",
			"extensions": [
				"plc"
			]
		},
		"application/vnd.mobius.txf": {
			"source": "iana",
			"extensions": [
				"txf"
			]
		},
		"application/vnd.mophun.application": {
			"source": "iana",
			"extensions": [
				"mpn"
			]
		},
		"application/vnd.mophun.certificate": {
			"source": "iana",
			"extensions": [
				"mpc"
			]
		},
		"application/vnd.motorola.flexsuite": {
			"source": "iana"
		},
		"application/vnd.motorola.flexsuite.adsi": {
			"source": "iana"
		},
		"application/vnd.motorola.flexsuite.fis": {
			"source": "iana"
		},
		"application/vnd.motorola.flexsuite.gotap": {
			"source": "iana"
		},
		"application/vnd.motorola.flexsuite.kmr": {
			"source": "iana"
		},
		"application/vnd.motorola.flexsuite.ttc": {
			"source": "iana"
		},
		"application/vnd.motorola.flexsuite.wem": {
			"source": "iana"
		},
		"application/vnd.motorola.iprm": {
			"source": "iana"
		},
		"application/vnd.mozilla.xul+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"xul"
			]
		},
		"application/vnd.ms-3mfdocument": {
			"source": "iana"
		},
		"application/vnd.ms-artgalry": {
			"source": "iana",
			"extensions": [
				"cil"
			]
		},
		"application/vnd.ms-asf": {
			"source": "iana"
		},
		"application/vnd.ms-cab-compressed": {
			"source": "iana",
			"extensions": [
				"cab"
			]
		},
		"application/vnd.ms-color.iccprofile": {
			"source": "apache"
		},
		"application/vnd.ms-excel": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"xls",
				"xlm",
				"xla",
				"xlc",
				"xlt",
				"xlw"
			]
		},
		"application/vnd.ms-excel.addin.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"xlam"
			]
		},
		"application/vnd.ms-excel.sheet.binary.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"xlsb"
			]
		},
		"application/vnd.ms-excel.sheet.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"xlsm"
			]
		},
		"application/vnd.ms-excel.template.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"xltm"
			]
		},
		"application/vnd.ms-fontobject": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"eot"
			]
		},
		"application/vnd.ms-htmlhelp": {
			"source": "iana",
			"extensions": [
				"chm"
			]
		},
		"application/vnd.ms-ims": {
			"source": "iana",
			"extensions": [
				"ims"
			]
		},
		"application/vnd.ms-lrm": {
			"source": "iana",
			"extensions": [
				"lrm"
			]
		},
		"application/vnd.ms-office.activex+xml": {
			"source": "iana"
		},
		"application/vnd.ms-officetheme": {
			"source": "iana",
			"extensions": [
				"thmx"
			]
		},
		"application/vnd.ms-opentype": {
			"source": "apache",
			"compressible": true
		},
		"application/vnd.ms-package.obfuscated-opentype": {
			"source": "apache"
		},
		"application/vnd.ms-pki.seccat": {
			"source": "apache",
			"extensions": [
				"cat"
			]
		},
		"application/vnd.ms-pki.stl": {
			"source": "apache",
			"extensions": [
				"stl"
			]
		},
		"application/vnd.ms-playready.initiator+xml": {
			"source": "iana"
		},
		"application/vnd.ms-powerpoint": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"ppt",
				"pps",
				"pot"
			]
		},
		"application/vnd.ms-powerpoint.addin.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"ppam"
			]
		},
		"application/vnd.ms-powerpoint.presentation.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"pptm"
			]
		},
		"application/vnd.ms-powerpoint.slide.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"sldm"
			]
		},
		"application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"ppsm"
			]
		},
		"application/vnd.ms-powerpoint.template.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"potm"
			]
		},
		"application/vnd.ms-printdevicecapabilities+xml": {
			"source": "iana"
		},
		"application/vnd.ms-printing.printticket+xml": {
			"source": "apache"
		},
		"application/vnd.ms-printschematicket+xml": {
			"source": "iana"
		},
		"application/vnd.ms-project": {
			"source": "iana",
			"extensions": [
				"mpp",
				"mpt"
			]
		},
		"application/vnd.ms-tnef": {
			"source": "iana"
		},
		"application/vnd.ms-windows.devicepairing": {
			"source": "iana"
		},
		"application/vnd.ms-windows.nwprinting.oob": {
			"source": "iana"
		},
		"application/vnd.ms-windows.printerpairing": {
			"source": "iana"
		},
		"application/vnd.ms-windows.wsd.oob": {
			"source": "iana"
		},
		"application/vnd.ms-wmdrm.lic-chlg-req": {
			"source": "iana"
		},
		"application/vnd.ms-wmdrm.lic-resp": {
			"source": "iana"
		},
		"application/vnd.ms-wmdrm.meter-chlg-req": {
			"source": "iana"
		},
		"application/vnd.ms-wmdrm.meter-resp": {
			"source": "iana"
		},
		"application/vnd.ms-word.document.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"docm"
			]
		},
		"application/vnd.ms-word.template.macroenabled.12": {
			"source": "iana",
			"extensions": [
				"dotm"
			]
		},
		"application/vnd.ms-works": {
			"source": "iana",
			"extensions": [
				"wps",
				"wks",
				"wcm",
				"wdb"
			]
		},
		"application/vnd.ms-wpl": {
			"source": "iana",
			"extensions": [
				"wpl"
			]
		},
		"application/vnd.ms-xpsdocument": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"xps"
			]
		},
		"application/vnd.msa-disk-image": {
			"source": "iana"
		},
		"application/vnd.mseq": {
			"source": "iana",
			"extensions": [
				"mseq"
			]
		},
		"application/vnd.msign": {
			"source": "iana"
		},
		"application/vnd.multiad.creator": {
			"source": "iana"
		},
		"application/vnd.multiad.creator.cif": {
			"source": "iana"
		},
		"application/vnd.music-niff": {
			"source": "iana"
		},
		"application/vnd.musician": {
			"source": "iana",
			"extensions": [
				"mus"
			]
		},
		"application/vnd.muvee.style": {
			"source": "iana",
			"extensions": [
				"msty"
			]
		},
		"application/vnd.mynfc": {
			"source": "iana",
			"extensions": [
				"taglet"
			]
		},
		"application/vnd.ncd.control": {
			"source": "iana"
		},
		"application/vnd.ncd.reference": {
			"source": "iana"
		},
		"application/vnd.nearst.inv+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.nervana": {
			"source": "iana"
		},
		"application/vnd.netfpx": {
			"source": "iana"
		},
		"application/vnd.neurolanguage.nlu": {
			"source": "iana",
			"extensions": [
				"nlu"
			]
		},
		"application/vnd.nintendo.nitro.rom": {
			"source": "iana"
		},
		"application/vnd.nintendo.snes.rom": {
			"source": "iana"
		},
		"application/vnd.nitf": {
			"source": "iana",
			"extensions": [
				"ntf",
				"nitf"
			]
		},
		"application/vnd.noblenet-directory": {
			"source": "iana",
			"extensions": [
				"nnd"
			]
		},
		"application/vnd.noblenet-sealer": {
			"source": "iana",
			"extensions": [
				"nns"
			]
		},
		"application/vnd.noblenet-web": {
			"source": "iana",
			"extensions": [
				"nnw"
			]
		},
		"application/vnd.nokia.catalogs": {
			"source": "iana"
		},
		"application/vnd.nokia.conml+wbxml": {
			"source": "iana"
		},
		"application/vnd.nokia.conml+xml": {
			"source": "iana"
		},
		"application/vnd.nokia.iptv.config+xml": {
			"source": "iana"
		},
		"application/vnd.nokia.isds-radio-presets": {
			"source": "iana"
		},
		"application/vnd.nokia.landmark+wbxml": {
			"source": "iana"
		},
		"application/vnd.nokia.landmark+xml": {
			"source": "iana"
		},
		"application/vnd.nokia.landmarkcollection+xml": {
			"source": "iana"
		},
		"application/vnd.nokia.n-gage.ac+xml": {
			"source": "iana"
		},
		"application/vnd.nokia.n-gage.data": {
			"source": "iana",
			"extensions": [
				"ngdat"
			]
		},
		"application/vnd.nokia.n-gage.symbian.install": {
			"source": "iana",
			"extensions": [
				"n-gage"
			]
		},
		"application/vnd.nokia.ncd": {
			"source": "iana"
		},
		"application/vnd.nokia.pcd+wbxml": {
			"source": "iana"
		},
		"application/vnd.nokia.pcd+xml": {
			"source": "iana"
		},
		"application/vnd.nokia.radio-preset": {
			"source": "iana",
			"extensions": [
				"rpst"
			]
		},
		"application/vnd.nokia.radio-presets": {
			"source": "iana",
			"extensions": [
				"rpss"
			]
		},
		"application/vnd.novadigm.edm": {
			"source": "iana",
			"extensions": [
				"edm"
			]
		},
		"application/vnd.novadigm.edx": {
			"source": "iana",
			"extensions": [
				"edx"
			]
		},
		"application/vnd.novadigm.ext": {
			"source": "iana",
			"extensions": [
				"ext"
			]
		},
		"application/vnd.ntt-local.content-share": {
			"source": "iana"
		},
		"application/vnd.ntt-local.file-transfer": {
			"source": "iana"
		},
		"application/vnd.ntt-local.ogw_remote-access": {
			"source": "iana"
		},
		"application/vnd.ntt-local.sip-ta_remote": {
			"source": "iana"
		},
		"application/vnd.ntt-local.sip-ta_tcp_stream": {
			"source": "iana"
		},
		"application/vnd.oasis.opendocument.chart": {
			"source": "iana",
			"extensions": [
				"odc"
			]
		},
		"application/vnd.oasis.opendocument.chart-template": {
			"source": "iana",
			"extensions": [
				"otc"
			]
		},
		"application/vnd.oasis.opendocument.database": {
			"source": "iana",
			"extensions": [
				"odb"
			]
		},
		"application/vnd.oasis.opendocument.formula": {
			"source": "iana",
			"extensions": [
				"odf"
			]
		},
		"application/vnd.oasis.opendocument.formula-template": {
			"source": "iana",
			"extensions": [
				"odft"
			]
		},
		"application/vnd.oasis.opendocument.graphics": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"odg"
			]
		},
		"application/vnd.oasis.opendocument.graphics-template": {
			"source": "iana",
			"extensions": [
				"otg"
			]
		},
		"application/vnd.oasis.opendocument.image": {
			"source": "iana",
			"extensions": [
				"odi"
			]
		},
		"application/vnd.oasis.opendocument.image-template": {
			"source": "iana",
			"extensions": [
				"oti"
			]
		},
		"application/vnd.oasis.opendocument.presentation": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"odp"
			]
		},
		"application/vnd.oasis.opendocument.presentation-template": {
			"source": "iana",
			"extensions": [
				"otp"
			]
		},
		"application/vnd.oasis.opendocument.spreadsheet": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"ods"
			]
		},
		"application/vnd.oasis.opendocument.spreadsheet-template": {
			"source": "iana",
			"extensions": [
				"ots"
			]
		},
		"application/vnd.oasis.opendocument.text": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"odt"
			]
		},
		"application/vnd.oasis.opendocument.text-master": {
			"source": "iana",
			"extensions": [
				"odm"
			]
		},
		"application/vnd.oasis.opendocument.text-template": {
			"source": "iana",
			"extensions": [
				"ott"
			]
		},
		"application/vnd.oasis.opendocument.text-web": {
			"source": "iana",
			"extensions": [
				"oth"
			]
		},
		"application/vnd.obn": {
			"source": "iana"
		},
		"application/vnd.oftn.l10n+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oipf.contentaccessdownload+xml": {
			"source": "iana"
		},
		"application/vnd.oipf.contentaccessstreaming+xml": {
			"source": "iana"
		},
		"application/vnd.oipf.cspg-hexbinary": {
			"source": "iana"
		},
		"application/vnd.oipf.dae.svg+xml": {
			"source": "iana"
		},
		"application/vnd.oipf.dae.xhtml+xml": {
			"source": "iana"
		},
		"application/vnd.oipf.mippvcontrolmessage+xml": {
			"source": "iana"
		},
		"application/vnd.oipf.pae.gem": {
			"source": "iana"
		},
		"application/vnd.oipf.spdiscovery+xml": {
			"source": "iana"
		},
		"application/vnd.oipf.spdlist+xml": {
			"source": "iana"
		},
		"application/vnd.oipf.ueprofile+xml": {
			"source": "iana"
		},
		"application/vnd.oipf.userprofile+xml": {
			"source": "iana"
		},
		"application/vnd.olpc-sugar": {
			"source": "iana",
			"extensions": [
				"xo"
			]
		},
		"application/vnd.oma-scws-config": {
			"source": "iana"
		},
		"application/vnd.oma-scws-http-request": {
			"source": "iana"
		},
		"application/vnd.oma-scws-http-response": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.associated-procedure-parameter+xml": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.drm-trigger+xml": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.imd+xml": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.ltkm": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.notification+xml": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.provisioningtrigger": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.sgboot": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.sgdd+xml": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.sgdu": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.simple-symbol-container": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.smartcard-trigger+xml": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.sprov+xml": {
			"source": "iana"
		},
		"application/vnd.oma.bcast.stkm": {
			"source": "iana"
		},
		"application/vnd.oma.cab-address-book+xml": {
			"source": "iana"
		},
		"application/vnd.oma.cab-feature-handler+xml": {
			"source": "iana"
		},
		"application/vnd.oma.cab-pcc+xml": {
			"source": "iana"
		},
		"application/vnd.oma.cab-subs-invite+xml": {
			"source": "iana"
		},
		"application/vnd.oma.cab-user-prefs+xml": {
			"source": "iana"
		},
		"application/vnd.oma.dcd": {
			"source": "iana"
		},
		"application/vnd.oma.dcdc": {
			"source": "iana"
		},
		"application/vnd.oma.dd2+xml": {
			"source": "iana",
			"extensions": [
				"dd2"
			]
		},
		"application/vnd.oma.drm.risd+xml": {
			"source": "iana"
		},
		"application/vnd.oma.group-usage-list+xml": {
			"source": "iana"
		},
		"application/vnd.oma.lwm2m+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.lwm2m+tlv": {
			"source": "iana"
		},
		"application/vnd.oma.pal+xml": {
			"source": "iana"
		},
		"application/vnd.oma.poc.detailed-progress-report+xml": {
			"source": "iana"
		},
		"application/vnd.oma.poc.final-report+xml": {
			"source": "iana"
		},
		"application/vnd.oma.poc.groups+xml": {
			"source": "iana"
		},
		"application/vnd.oma.poc.invocation-descriptor+xml": {
			"source": "iana"
		},
		"application/vnd.oma.poc.optimized-progress-report+xml": {
			"source": "iana"
		},
		"application/vnd.oma.push": {
			"source": "iana"
		},
		"application/vnd.oma.scidm.messages+xml": {
			"source": "iana"
		},
		"application/vnd.oma.xcap-directory+xml": {
			"source": "iana"
		},
		"application/vnd.omads-email+xml": {
			"source": "iana"
		},
		"application/vnd.omads-file+xml": {
			"source": "iana"
		},
		"application/vnd.omads-folder+xml": {
			"source": "iana"
		},
		"application/vnd.omaloc-supl-init": {
			"source": "iana"
		},
		"application/vnd.onepager": {
			"source": "iana"
		},
		"application/vnd.openblox.game+xml": {
			"source": "iana"
		},
		"application/vnd.openblox.game-binary": {
			"source": "iana"
		},
		"application/vnd.openeye.oeb": {
			"source": "iana"
		},
		"application/vnd.openofficeorg.extension": {
			"source": "apache",
			"extensions": [
				"oxt"
			]
		},
		"application/vnd.openstreetmap.data+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.custom-properties+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.drawing+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.extended-properties+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml-template": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.presentation": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"pptx"
			]
		},
		"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slide": {
			"source": "iana",
			"extensions": [
				"sldx"
			]
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
			"source": "iana",
			"extensions": [
				"ppsx"
			]
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.template": {
			"source": "apache",
			"extensions": [
				"potx"
			]
		},
		"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml-template": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"xlsx"
			]
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
			"source": "apache",
			"extensions": [
				"xltx"
			]
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.theme+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.themeoverride+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.vmldrawing": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml-template": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"docx"
			]
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
			"source": "apache",
			"extensions": [
				"dotx"
			]
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-package.core-properties+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
			"source": "iana"
		},
		"application/vnd.openxmlformats-package.relationships+xml": {
			"source": "iana"
		},
		"application/vnd.oracle.resource+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.orange.indata": {
			"source": "iana"
		},
		"application/vnd.osa.netdeploy": {
			"source": "iana"
		},
		"application/vnd.osgeo.mapguide.package": {
			"source": "iana",
			"extensions": [
				"mgp"
			]
		},
		"application/vnd.osgi.bundle": {
			"source": "iana"
		},
		"application/vnd.osgi.dp": {
			"source": "iana",
			"extensions": [
				"dp"
			]
		},
		"application/vnd.osgi.subsystem": {
			"source": "iana",
			"extensions": [
				"esa"
			]
		},
		"application/vnd.otps.ct-kip+xml": {
			"source": "iana"
		},
		"application/vnd.oxli.countgraph": {
			"source": "iana"
		},
		"application/vnd.pagerduty+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.palm": {
			"source": "iana",
			"extensions": [
				"pdb",
				"pqa",
				"oprc"
			]
		},
		"application/vnd.panoply": {
			"source": "iana"
		},
		"application/vnd.paos+xml": {
			"source": "iana"
		},
		"application/vnd.paos.xml": {
			"source": "apache"
		},
		"application/vnd.pawaafile": {
			"source": "iana",
			"extensions": [
				"paw"
			]
		},
		"application/vnd.pcos": {
			"source": "iana"
		},
		"application/vnd.pg.format": {
			"source": "iana",
			"extensions": [
				"str"
			]
		},
		"application/vnd.pg.osasli": {
			"source": "iana",
			"extensions": [
				"ei6"
			]
		},
		"application/vnd.piaccess.application-licence": {
			"source": "iana"
		},
		"application/vnd.picsel": {
			"source": "iana",
			"extensions": [
				"efif"
			]
		},
		"application/vnd.pmi.widget": {
			"source": "iana",
			"extensions": [
				"wg"
			]
		},
		"application/vnd.poc.group-advertisement+xml": {
			"source": "iana"
		},
		"application/vnd.pocketlearn": {
			"source": "iana",
			"extensions": [
				"plf"
			]
		},
		"application/vnd.powerbuilder6": {
			"source": "iana",
			"extensions": [
				"pbd"
			]
		},
		"application/vnd.powerbuilder6-s": {
			"source": "iana"
		},
		"application/vnd.powerbuilder7": {
			"source": "iana"
		},
		"application/vnd.powerbuilder7-s": {
			"source": "iana"
		},
		"application/vnd.powerbuilder75": {
			"source": "iana"
		},
		"application/vnd.powerbuilder75-s": {
			"source": "iana"
		},
		"application/vnd.preminet": {
			"source": "iana"
		},
		"application/vnd.previewsystems.box": {
			"source": "iana",
			"extensions": [
				"box"
			]
		},
		"application/vnd.proteus.magazine": {
			"source": "iana",
			"extensions": [
				"mgz"
			]
		},
		"application/vnd.publishare-delta-tree": {
			"source": "iana",
			"extensions": [
				"qps"
			]
		},
		"application/vnd.pvi.ptid1": {
			"source": "iana",
			"extensions": [
				"ptid"
			]
		},
		"application/vnd.pwg-multiplexed": {
			"source": "iana"
		},
		"application/vnd.pwg-xhtml-print+xml": {
			"source": "iana"
		},
		"application/vnd.qualcomm.brew-app-res": {
			"source": "iana"
		},
		"application/vnd.quarantainenet": {
			"source": "iana"
		},
		"application/vnd.quark.quarkxpress": {
			"source": "iana",
			"extensions": [
				"qxd",
				"qxt",
				"qwd",
				"qwt",
				"qxl",
				"qxb"
			]
		},
		"application/vnd.quobject-quoxdocument": {
			"source": "iana"
		},
		"application/vnd.radisys.moml+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-audit+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-audit-conf+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-audit-conn+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-audit-dialog+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-audit-stream+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-conf+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-dialog+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-dialog-base+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-dialog-fax-detect+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-dialog-group+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-dialog-speech+xml": {
			"source": "iana"
		},
		"application/vnd.radisys.msml-dialog-transform+xml": {
			"source": "iana"
		},
		"application/vnd.rainstor.data": {
			"source": "iana"
		},
		"application/vnd.rapid": {
			"source": "iana"
		},
		"application/vnd.rar": {
			"source": "iana"
		},
		"application/vnd.realvnc.bed": {
			"source": "iana",
			"extensions": [
				"bed"
			]
		},
		"application/vnd.recordare.musicxml": {
			"source": "iana",
			"extensions": [
				"mxl"
			]
		},
		"application/vnd.recordare.musicxml+xml": {
			"source": "iana",
			"extensions": [
				"musicxml"
			]
		},
		"application/vnd.renlearn.rlprint": {
			"source": "iana"
		},
		"application/vnd.rig.cryptonote": {
			"source": "iana",
			"extensions": [
				"cryptonote"
			]
		},
		"application/vnd.rim.cod": {
			"source": "apache",
			"extensions": [
				"cod"
			]
		},
		"application/vnd.rn-realmedia": {
			"source": "apache",
			"extensions": [
				"rm"
			]
		},
		"application/vnd.rn-realmedia-vbr": {
			"source": "apache",
			"extensions": [
				"rmvb"
			]
		},
		"application/vnd.route66.link66+xml": {
			"source": "iana",
			"extensions": [
				"link66"
			]
		},
		"application/vnd.rs-274x": {
			"source": "iana"
		},
		"application/vnd.ruckus.download": {
			"source": "iana"
		},
		"application/vnd.s3sms": {
			"source": "iana"
		},
		"application/vnd.sailingtracker.track": {
			"source": "iana",
			"extensions": [
				"st"
			]
		},
		"application/vnd.sbm.cid": {
			"source": "iana"
		},
		"application/vnd.sbm.mid2": {
			"source": "iana"
		},
		"application/vnd.scribus": {
			"source": "iana"
		},
		"application/vnd.sealed.3df": {
			"source": "iana"
		},
		"application/vnd.sealed.csf": {
			"source": "iana"
		},
		"application/vnd.sealed.doc": {
			"source": "iana"
		},
		"application/vnd.sealed.eml": {
			"source": "iana"
		},
		"application/vnd.sealed.mht": {
			"source": "iana"
		},
		"application/vnd.sealed.net": {
			"source": "iana"
		},
		"application/vnd.sealed.ppt": {
			"source": "iana"
		},
		"application/vnd.sealed.tiff": {
			"source": "iana"
		},
		"application/vnd.sealed.xls": {
			"source": "iana"
		},
		"application/vnd.sealedmedia.softseal.html": {
			"source": "iana"
		},
		"application/vnd.sealedmedia.softseal.pdf": {
			"source": "iana"
		},
		"application/vnd.seemail": {
			"source": "iana",
			"extensions": [
				"see"
			]
		},
		"application/vnd.sema": {
			"source": "iana",
			"extensions": [
				"sema"
			]
		},
		"application/vnd.semd": {
			"source": "iana",
			"extensions": [
				"semd"
			]
		},
		"application/vnd.semf": {
			"source": "iana",
			"extensions": [
				"semf"
			]
		},
		"application/vnd.shana.informed.formdata": {
			"source": "iana",
			"extensions": [
				"ifm"
			]
		},
		"application/vnd.shana.informed.formtemplate": {
			"source": "iana",
			"extensions": [
				"itp"
			]
		},
		"application/vnd.shana.informed.interchange": {
			"source": "iana",
			"extensions": [
				"iif"
			]
		},
		"application/vnd.shana.informed.package": {
			"source": "iana",
			"extensions": [
				"ipk"
			]
		},
		"application/vnd.simtech-mindmapper": {
			"source": "iana",
			"extensions": [
				"twd",
				"twds"
			]
		},
		"application/vnd.siren+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.smaf": {
			"source": "iana",
			"extensions": [
				"mmf"
			]
		},
		"application/vnd.smart.notebook": {
			"source": "iana"
		},
		"application/vnd.smart.teacher": {
			"source": "iana",
			"extensions": [
				"teacher"
			]
		},
		"application/vnd.software602.filler.form+xml": {
			"source": "iana"
		},
		"application/vnd.software602.filler.form-xml-zip": {
			"source": "iana"
		},
		"application/vnd.solent.sdkm+xml": {
			"source": "iana",
			"extensions": [
				"sdkm",
				"sdkd"
			]
		},
		"application/vnd.spotfire.dxp": {
			"source": "iana",
			"extensions": [
				"dxp"
			]
		},
		"application/vnd.spotfire.sfs": {
			"source": "iana",
			"extensions": [
				"sfs"
			]
		},
		"application/vnd.sss-cod": {
			"source": "iana"
		},
		"application/vnd.sss-dtf": {
			"source": "iana"
		},
		"application/vnd.sss-ntf": {
			"source": "iana"
		},
		"application/vnd.stardivision.calc": {
			"source": "apache",
			"extensions": [
				"sdc"
			]
		},
		"application/vnd.stardivision.draw": {
			"source": "apache",
			"extensions": [
				"sda"
			]
		},
		"application/vnd.stardivision.impress": {
			"source": "apache",
			"extensions": [
				"sdd"
			]
		},
		"application/vnd.stardivision.math": {
			"source": "apache",
			"extensions": [
				"smf"
			]
		},
		"application/vnd.stardivision.writer": {
			"source": "apache",
			"extensions": [
				"sdw",
				"vor"
			]
		},
		"application/vnd.stardivision.writer-global": {
			"source": "apache",
			"extensions": [
				"sgl"
			]
		},
		"application/vnd.stepmania.package": {
			"source": "iana",
			"extensions": [
				"smzip"
			]
		},
		"application/vnd.stepmania.stepchart": {
			"source": "iana",
			"extensions": [
				"sm"
			]
		},
		"application/vnd.street-stream": {
			"source": "iana"
		},
		"application/vnd.sun.wadl+xml": {
			"source": "iana"
		},
		"application/vnd.sun.xml.calc": {
			"source": "apache",
			"extensions": [
				"sxc"
			]
		},
		"application/vnd.sun.xml.calc.template": {
			"source": "apache",
			"extensions": [
				"stc"
			]
		},
		"application/vnd.sun.xml.draw": {
			"source": "apache",
			"extensions": [
				"sxd"
			]
		},
		"application/vnd.sun.xml.draw.template": {
			"source": "apache",
			"extensions": [
				"std"
			]
		},
		"application/vnd.sun.xml.impress": {
			"source": "apache",
			"extensions": [
				"sxi"
			]
		},
		"application/vnd.sun.xml.impress.template": {
			"source": "apache",
			"extensions": [
				"sti"
			]
		},
		"application/vnd.sun.xml.math": {
			"source": "apache",
			"extensions": [
				"sxm"
			]
		},
		"application/vnd.sun.xml.writer": {
			"source": "apache",
			"extensions": [
				"sxw"
			]
		},
		"application/vnd.sun.xml.writer.global": {
			"source": "apache",
			"extensions": [
				"sxg"
			]
		},
		"application/vnd.sun.xml.writer.template": {
			"source": "apache",
			"extensions": [
				"stw"
			]
		},
		"application/vnd.sus-calendar": {
			"source": "iana",
			"extensions": [
				"sus",
				"susp"
			]
		},
		"application/vnd.svd": {
			"source": "iana",
			"extensions": [
				"svd"
			]
		},
		"application/vnd.swiftview-ics": {
			"source": "iana"
		},
		"application/vnd.symbian.install": {
			"source": "apache",
			"extensions": [
				"sis",
				"sisx"
			]
		},
		"application/vnd.syncml+xml": {
			"source": "iana",
			"extensions": [
				"xsm"
			]
		},
		"application/vnd.syncml.dm+wbxml": {
			"source": "iana",
			"extensions": [
				"bdm"
			]
		},
		"application/vnd.syncml.dm+xml": {
			"source": "iana",
			"extensions": [
				"xdm"
			]
		},
		"application/vnd.syncml.dm.notification": {
			"source": "iana"
		},
		"application/vnd.syncml.dmddf+wbxml": {
			"source": "iana"
		},
		"application/vnd.syncml.dmddf+xml": {
			"source": "iana"
		},
		"application/vnd.syncml.dmtnds+wbxml": {
			"source": "iana"
		},
		"application/vnd.syncml.dmtnds+xml": {
			"source": "iana"
		},
		"application/vnd.syncml.ds.notification": {
			"source": "iana"
		},
		"application/vnd.tao.intent-module-archive": {
			"source": "iana",
			"extensions": [
				"tao"
			]
		},
		"application/vnd.tcpdump.pcap": {
			"source": "iana",
			"extensions": [
				"pcap",
				"cap",
				"dmp"
			]
		},
		"application/vnd.tmd.mediaflex.api+xml": {
			"source": "iana"
		},
		"application/vnd.tml": {
			"source": "iana"
		},
		"application/vnd.tmobile-livetv": {
			"source": "iana",
			"extensions": [
				"tmo"
			]
		},
		"application/vnd.tri.onesource": {
			"source": "iana"
		},
		"application/vnd.trid.tpt": {
			"source": "iana",
			"extensions": [
				"tpt"
			]
		},
		"application/vnd.triscape.mxs": {
			"source": "iana",
			"extensions": [
				"mxs"
			]
		},
		"application/vnd.trueapp": {
			"source": "iana",
			"extensions": [
				"tra"
			]
		},
		"application/vnd.truedoc": {
			"source": "iana"
		},
		"application/vnd.ubisoft.webplayer": {
			"source": "iana"
		},
		"application/vnd.ufdl": {
			"source": "iana",
			"extensions": [
				"ufd",
				"ufdl"
			]
		},
		"application/vnd.uiq.theme": {
			"source": "iana",
			"extensions": [
				"utz"
			]
		},
		"application/vnd.umajin": {
			"source": "iana",
			"extensions": [
				"umj"
			]
		},
		"application/vnd.unity": {
			"source": "iana",
			"extensions": [
				"unityweb"
			]
		},
		"application/vnd.uoml+xml": {
			"source": "iana",
			"extensions": [
				"uoml"
			]
		},
		"application/vnd.uplanet.alert": {
			"source": "iana"
		},
		"application/vnd.uplanet.alert-wbxml": {
			"source": "iana"
		},
		"application/vnd.uplanet.bearer-choice": {
			"source": "iana"
		},
		"application/vnd.uplanet.bearer-choice-wbxml": {
			"source": "iana"
		},
		"application/vnd.uplanet.cacheop": {
			"source": "iana"
		},
		"application/vnd.uplanet.cacheop-wbxml": {
			"source": "iana"
		},
		"application/vnd.uplanet.channel": {
			"source": "iana"
		},
		"application/vnd.uplanet.channel-wbxml": {
			"source": "iana"
		},
		"application/vnd.uplanet.list": {
			"source": "iana"
		},
		"application/vnd.uplanet.list-wbxml": {
			"source": "iana"
		},
		"application/vnd.uplanet.listcmd": {
			"source": "iana"
		},
		"application/vnd.uplanet.listcmd-wbxml": {
			"source": "iana"
		},
		"application/vnd.uplanet.signal": {
			"source": "iana"
		},
		"application/vnd.uri-map": {
			"source": "iana"
		},
		"application/vnd.valve.source.material": {
			"source": "iana"
		},
		"application/vnd.vcx": {
			"source": "iana",
			"extensions": [
				"vcx"
			]
		},
		"application/vnd.vd-study": {
			"source": "iana"
		},
		"application/vnd.vectorworks": {
			"source": "iana"
		},
		"application/vnd.vel+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.verimatrix.vcas": {
			"source": "iana"
		},
		"application/vnd.vidsoft.vidconference": {
			"source": "iana"
		},
		"application/vnd.visio": {
			"source": "iana",
			"extensions": [
				"vsd",
				"vst",
				"vss",
				"vsw"
			]
		},
		"application/vnd.visionary": {
			"source": "iana",
			"extensions": [
				"vis"
			]
		},
		"application/vnd.vividence.scriptfile": {
			"source": "iana"
		},
		"application/vnd.vsf": {
			"source": "iana",
			"extensions": [
				"vsf"
			]
		},
		"application/vnd.wap.sic": {
			"source": "iana"
		},
		"application/vnd.wap.slc": {
			"source": "iana"
		},
		"application/vnd.wap.wbxml": {
			"source": "iana",
			"extensions": [
				"wbxml"
			]
		},
		"application/vnd.wap.wmlc": {
			"source": "iana",
			"extensions": [
				"wmlc"
			]
		},
		"application/vnd.wap.wmlscriptc": {
			"source": "iana",
			"extensions": [
				"wmlsc"
			]
		},
		"application/vnd.webturbo": {
			"source": "iana",
			"extensions": [
				"wtb"
			]
		},
		"application/vnd.wfa.p2p": {
			"source": "iana"
		},
		"application/vnd.wfa.wsc": {
			"source": "iana"
		},
		"application/vnd.windows.devicepairing": {
			"source": "iana"
		},
		"application/vnd.wmc": {
			"source": "iana"
		},
		"application/vnd.wmf.bootstrap": {
			"source": "iana"
		},
		"application/vnd.wolfram.mathematica": {
			"source": "iana"
		},
		"application/vnd.wolfram.mathematica.package": {
			"source": "iana"
		},
		"application/vnd.wolfram.player": {
			"source": "iana",
			"extensions": [
				"nbp"
			]
		},
		"application/vnd.wordperfect": {
			"source": "iana",
			"extensions": [
				"wpd"
			]
		},
		"application/vnd.wqd": {
			"source": "iana",
			"extensions": [
				"wqd"
			]
		},
		"application/vnd.wrq-hp3000-labelled": {
			"source": "iana"
		},
		"application/vnd.wt.stf": {
			"source": "iana",
			"extensions": [
				"stf"
			]
		},
		"application/vnd.wv.csp+wbxml": {
			"source": "iana"
		},
		"application/vnd.wv.csp+xml": {
			"source": "iana"
		},
		"application/vnd.wv.ssp+xml": {
			"source": "iana"
		},
		"application/vnd.xacml+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.xara": {
			"source": "iana",
			"extensions": [
				"xar"
			]
		},
		"application/vnd.xfdl": {
			"source": "iana",
			"extensions": [
				"xfdl"
			]
		},
		"application/vnd.xfdl.webform": {
			"source": "iana"
		},
		"application/vnd.xmi+xml": {
			"source": "iana"
		},
		"application/vnd.xmpie.cpkg": {
			"source": "iana"
		},
		"application/vnd.xmpie.dpkg": {
			"source": "iana"
		},
		"application/vnd.xmpie.plan": {
			"source": "iana"
		},
		"application/vnd.xmpie.ppkg": {
			"source": "iana"
		},
		"application/vnd.xmpie.xlim": {
			"source": "iana"
		},
		"application/vnd.yamaha.hv-dic": {
			"source": "iana",
			"extensions": [
				"hvd"
			]
		},
		"application/vnd.yamaha.hv-script": {
			"source": "iana",
			"extensions": [
				"hvs"
			]
		},
		"application/vnd.yamaha.hv-voice": {
			"source": "iana",
			"extensions": [
				"hvp"
			]
		},
		"application/vnd.yamaha.openscoreformat": {
			"source": "iana",
			"extensions": [
				"osf"
			]
		},
		"application/vnd.yamaha.openscoreformat.osfpvg+xml": {
			"source": "iana",
			"extensions": [
				"osfpvg"
			]
		},
		"application/vnd.yamaha.remote-setup": {
			"source": "iana"
		},
		"application/vnd.yamaha.smaf-audio": {
			"source": "iana",
			"extensions": [
				"saf"
			]
		},
		"application/vnd.yamaha.smaf-phrase": {
			"source": "iana",
			"extensions": [
				"spf"
			]
		},
		"application/vnd.yamaha.through-ngn": {
			"source": "iana"
		},
		"application/vnd.yamaha.tunnel-udpencap": {
			"source": "iana"
		},
		"application/vnd.yaoweme": {
			"source": "iana"
		},
		"application/vnd.yellowriver-custom-menu": {
			"source": "iana",
			"extensions": [
				"cmp"
			]
		},
		"application/vnd.zul": {
			"source": "iana",
			"extensions": [
				"zir",
				"zirz"
			]
		},
		"application/vnd.zzazz.deck+xml": {
			"source": "iana",
			"extensions": [
				"zaz"
			]
		},
		"application/voicexml+xml": {
			"source": "iana",
			"extensions": [
				"vxml"
			]
		},
		"application/vq-rtcpxr": {
			"source": "iana"
		},
		"application/watcherinfo+xml": {
			"source": "iana"
		},
		"application/whoispp-query": {
			"source": "iana"
		},
		"application/whoispp-response": {
			"source": "iana"
		},
		"application/widget": {
			"source": "iana",
			"extensions": [
				"wgt"
			]
		},
		"application/winhlp": {
			"source": "apache",
			"extensions": [
				"hlp"
			]
		},
		"application/wita": {
			"source": "iana"
		},
		"application/wordperfect5.1": {
			"source": "iana"
		},
		"application/wsdl+xml": {
			"source": "iana",
			"extensions": [
				"wsdl"
			]
		},
		"application/wspolicy+xml": {
			"source": "iana",
			"extensions": [
				"wspolicy"
			]
		},
		"application/x-7z-compressed": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"7z"
			]
		},
		"application/x-abiword": {
			"source": "apache",
			"extensions": [
				"abw"
			]
		},
		"application/x-ace-compressed": {
			"source": "apache",
			"extensions": [
				"ace"
			]
		},
		"application/x-amf": {
			"source": "apache"
		},
		"application/x-apple-diskimage": {
			"source": "apache",
			"extensions": [
				"dmg"
			]
		},
		"application/x-authorware-bin": {
			"source": "apache",
			"extensions": [
				"aab",
				"x32",
				"u32",
				"vox"
			]
		},
		"application/x-authorware-map": {
			"source": "apache",
			"extensions": [
				"aam"
			]
		},
		"application/x-authorware-seg": {
			"source": "apache",
			"extensions": [
				"aas"
			]
		},
		"application/x-bcpio": {
			"source": "apache",
			"extensions": [
				"bcpio"
			]
		},
		"application/x-bdoc": {
			"compressible": false,
			"extensions": [
				"bdoc"
			]
		},
		"application/x-bittorrent": {
			"source": "apache",
			"extensions": [
				"torrent"
			]
		},
		"application/x-blorb": {
			"source": "apache",
			"extensions": [
				"blb",
				"blorb"
			]
		},
		"application/x-bzip": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"bz"
			]
		},
		"application/x-bzip2": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"bz2",
				"boz"
			]
		},
		"application/x-cbr": {
			"source": "apache",
			"extensions": [
				"cbr",
				"cba",
				"cbt",
				"cbz",
				"cb7"
			]
		},
		"application/x-cdlink": {
			"source": "apache",
			"extensions": [
				"vcd"
			]
		},
		"application/x-cfs-compressed": {
			"source": "apache",
			"extensions": [
				"cfs"
			]
		},
		"application/x-chat": {
			"source": "apache",
			"extensions": [
				"chat"
			]
		},
		"application/x-chess-pgn": {
			"source": "apache",
			"extensions": [
				"pgn"
			]
		},
		"application/x-chrome-extension": {
			"extensions": [
				"crx"
			]
		},
		"application/x-cocoa": {
			"source": "nginx",
			"extensions": [
				"cco"
			]
		},
		"application/x-compress": {
			"source": "apache"
		},
		"application/x-conference": {
			"source": "apache",
			"extensions": [
				"nsc"
			]
		},
		"application/x-cpio": {
			"source": "apache",
			"extensions": [
				"cpio"
			]
		},
		"application/x-csh": {
			"source": "apache",
			"extensions": [
				"csh"
			]
		},
		"application/x-deb": {
			"compressible": false
		},
		"application/x-debian-package": {
			"source": "apache",
			"extensions": [
				"deb",
				"udeb"
			]
		},
		"application/x-dgc-compressed": {
			"source": "apache",
			"extensions": [
				"dgc"
			]
		},
		"application/x-director": {
			"source": "apache",
			"extensions": [
				"dir",
				"dcr",
				"dxr",
				"cst",
				"cct",
				"cxt",
				"w3d",
				"fgd",
				"swa"
			]
		},
		"application/x-doom": {
			"source": "apache",
			"extensions": [
				"wad"
			]
		},
		"application/x-dtbncx+xml": {
			"source": "apache",
			"extensions": [
				"ncx"
			]
		},
		"application/x-dtbook+xml": {
			"source": "apache",
			"extensions": [
				"dtb"
			]
		},
		"application/x-dtbresource+xml": {
			"source": "apache",
			"extensions": [
				"res"
			]
		},
		"application/x-dvi": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"dvi"
			]
		},
		"application/x-envoy": {
			"source": "apache",
			"extensions": [
				"evy"
			]
		},
		"application/x-eva": {
			"source": "apache",
			"extensions": [
				"eva"
			]
		},
		"application/x-font-bdf": {
			"source": "apache",
			"extensions": [
				"bdf"
			]
		},
		"application/x-font-dos": {
			"source": "apache"
		},
		"application/x-font-framemaker": {
			"source": "apache"
		},
		"application/x-font-ghostscript": {
			"source": "apache",
			"extensions": [
				"gsf"
			]
		},
		"application/x-font-libgrx": {
			"source": "apache"
		},
		"application/x-font-linux-psf": {
			"source": "apache",
			"extensions": [
				"psf"
			]
		},
		"application/x-font-otf": {
			"source": "apache",
			"compressible": true,
			"extensions": [
				"otf"
			]
		},
		"application/x-font-pcf": {
			"source": "apache",
			"extensions": [
				"pcf"
			]
		},
		"application/x-font-snf": {
			"source": "apache",
			"extensions": [
				"snf"
			]
		},
		"application/x-font-speedo": {
			"source": "apache"
		},
		"application/x-font-sunos-news": {
			"source": "apache"
		},
		"application/x-font-ttf": {
			"source": "apache",
			"compressible": true,
			"extensions": [
				"ttf",
				"ttc"
			]
		},
		"application/x-font-type1": {
			"source": "apache",
			"extensions": [
				"pfa",
				"pfb",
				"pfm",
				"afm"
			]
		},
		"application/x-font-vfont": {
			"source": "apache"
		},
		"application/x-freearc": {
			"source": "apache",
			"extensions": [
				"arc"
			]
		},
		"application/x-futuresplash": {
			"source": "apache",
			"extensions": [
				"spl"
			]
		},
		"application/x-gca-compressed": {
			"source": "apache",
			"extensions": [
				"gca"
			]
		},
		"application/x-glulx": {
			"source": "apache",
			"extensions": [
				"ulx"
			]
		},
		"application/x-gnumeric": {
			"source": "apache",
			"extensions": [
				"gnumeric"
			]
		},
		"application/x-gramps-xml": {
			"source": "apache",
			"extensions": [
				"gramps"
			]
		},
		"application/x-gtar": {
			"source": "apache",
			"extensions": [
				"gtar"
			]
		},
		"application/x-gzip": {
			"source": "apache"
		},
		"application/x-hdf": {
			"source": "apache",
			"extensions": [
				"hdf"
			]
		},
		"application/x-httpd-php": {
			"compressible": true,
			"extensions": [
				"php"
			]
		},
		"application/x-install-instructions": {
			"source": "apache",
			"extensions": [
				"install"
			]
		},
		"application/x-iso9660-image": {
			"source": "apache",
			"extensions": [
				"iso"
			]
		},
		"application/x-java-archive-diff": {
			"source": "nginx",
			"extensions": [
				"jardiff"
			]
		},
		"application/x-java-jnlp-file": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"jnlp"
			]
		},
		"application/x-javascript": {
			"compressible": true
		},
		"application/x-latex": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"latex"
			]
		},
		"application/x-lua-bytecode": {
			"extensions": [
				"luac"
			]
		},
		"application/x-lzh-compressed": {
			"source": "apache",
			"extensions": [
				"lzh",
				"lha"
			]
		},
		"application/x-makeself": {
			"source": "nginx",
			"extensions": [
				"run"
			]
		},
		"application/x-mie": {
			"source": "apache",
			"extensions": [
				"mie"
			]
		},
		"application/x-mobipocket-ebook": {
			"source": "apache",
			"extensions": [
				"prc",
				"mobi"
			]
		},
		"application/x-mpegurl": {
			"compressible": false
		},
		"application/x-ms-application": {
			"source": "apache",
			"extensions": [
				"application"
			]
		},
		"application/x-ms-shortcut": {
			"source": "apache",
			"extensions": [
				"lnk"
			]
		},
		"application/x-ms-wmd": {
			"source": "apache",
			"extensions": [
				"wmd"
			]
		},
		"application/x-ms-wmz": {
			"source": "apache",
			"extensions": [
				"wmz"
			]
		},
		"application/x-ms-xbap": {
			"source": "apache",
			"extensions": [
				"xbap"
			]
		},
		"application/x-msaccess": {
			"source": "apache",
			"extensions": [
				"mdb"
			]
		},
		"application/x-msbinder": {
			"source": "apache",
			"extensions": [
				"obd"
			]
		},
		"application/x-mscardfile": {
			"source": "apache",
			"extensions": [
				"crd"
			]
		},
		"application/x-msclip": {
			"source": "apache",
			"extensions": [
				"clp"
			]
		},
		"application/x-msdos-program": {
			"extensions": [
				"exe"
			]
		},
		"application/x-msdownload": {
			"source": "apache",
			"extensions": [
				"exe",
				"dll",
				"com",
				"bat",
				"msi"
			]
		},
		"application/x-msmediaview": {
			"source": "apache",
			"extensions": [
				"mvb",
				"m13",
				"m14"
			]
		},
		"application/x-msmetafile": {
			"source": "apache",
			"extensions": [
				"wmf",
				"wmz",
				"emf",
				"emz"
			]
		},
		"application/x-msmoney": {
			"source": "apache",
			"extensions": [
				"mny"
			]
		},
		"application/x-mspublisher": {
			"source": "apache",
			"extensions": [
				"pub"
			]
		},
		"application/x-msschedule": {
			"source": "apache",
			"extensions": [
				"scd"
			]
		},
		"application/x-msterminal": {
			"source": "apache",
			"extensions": [
				"trm"
			]
		},
		"application/x-mswrite": {
			"source": "apache",
			"extensions": [
				"wri"
			]
		},
		"application/x-netcdf": {
			"source": "apache",
			"extensions": [
				"nc",
				"cdf"
			]
		},
		"application/x-ns-proxy-autoconfig": {
			"compressible": true,
			"extensions": [
				"pac"
			]
		},
		"application/x-nzb": {
			"source": "apache",
			"extensions": [
				"nzb"
			]
		},
		"application/x-perl": {
			"source": "nginx",
			"extensions": [
				"pl",
				"pm"
			]
		},
		"application/x-pilot": {
			"source": "nginx",
			"extensions": [
				"prc",
				"pdb"
			]
		},
		"application/x-pkcs12": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"p12",
				"pfx"
			]
		},
		"application/x-pkcs7-certificates": {
			"source": "apache",
			"extensions": [
				"p7b",
				"spc"
			]
		},
		"application/x-pkcs7-certreqresp": {
			"source": "apache",
			"extensions": [
				"p7r"
			]
		},
		"application/x-rar-compressed": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"rar"
			]
		},
		"application/x-redhat-package-manager": {
			"source": "nginx",
			"extensions": [
				"rpm"
			]
		},
		"application/x-research-info-systems": {
			"source": "apache",
			"extensions": [
				"ris"
			]
		},
		"application/x-sea": {
			"source": "nginx",
			"extensions": [
				"sea"
			]
		},
		"application/x-sh": {
			"source": "apache",
			"compressible": true,
			"extensions": [
				"sh"
			]
		},
		"application/x-shar": {
			"source": "apache",
			"extensions": [
				"shar"
			]
		},
		"application/x-shockwave-flash": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"swf"
			]
		},
		"application/x-silverlight-app": {
			"source": "apache",
			"extensions": [
				"xap"
			]
		},
		"application/x-sql": {
			"source": "apache",
			"extensions": [
				"sql"
			]
		},
		"application/x-stuffit": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"sit"
			]
		},
		"application/x-stuffitx": {
			"source": "apache",
			"extensions": [
				"sitx"
			]
		},
		"application/x-subrip": {
			"source": "apache",
			"extensions": [
				"srt"
			]
		},
		"application/x-sv4cpio": {
			"source": "apache",
			"extensions": [
				"sv4cpio"
			]
		},
		"application/x-sv4crc": {
			"source": "apache",
			"extensions": [
				"sv4crc"
			]
		},
		"application/x-t3vm-image": {
			"source": "apache",
			"extensions": [
				"t3"
			]
		},
		"application/x-tads": {
			"source": "apache",
			"extensions": [
				"gam"
			]
		},
		"application/x-tar": {
			"source": "apache",
			"compressible": true,
			"extensions": [
				"tar"
			]
		},
		"application/x-tcl": {
			"source": "apache",
			"extensions": [
				"tcl",
				"tk"
			]
		},
		"application/x-tex": {
			"source": "apache",
			"extensions": [
				"tex"
			]
		},
		"application/x-tex-tfm": {
			"source": "apache",
			"extensions": [
				"tfm"
			]
		},
		"application/x-texinfo": {
			"source": "apache",
			"extensions": [
				"texinfo",
				"texi"
			]
		},
		"application/x-tgif": {
			"source": "apache",
			"extensions": [
				"obj"
			]
		},
		"application/x-ustar": {
			"source": "apache",
			"extensions": [
				"ustar"
			]
		},
		"application/x-wais-source": {
			"source": "apache",
			"extensions": [
				"src"
			]
		},
		"application/x-web-app-manifest+json": {
			"compressible": true,
			"extensions": [
				"webapp"
			]
		},
		"application/x-www-form-urlencoded": {
			"source": "iana",
			"compressible": true
		},
		"application/x-x509-ca-cert": {
			"source": "apache",
			"extensions": [
				"der",
				"crt",
				"pem"
			]
		},
		"application/x-xfig": {
			"source": "apache",
			"extensions": [
				"fig"
			]
		},
		"application/x-xliff+xml": {
			"source": "apache",
			"extensions": [
				"xlf"
			]
		},
		"application/x-xpinstall": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"xpi"
			]
		},
		"application/x-xz": {
			"source": "apache",
			"extensions": [
				"xz"
			]
		},
		"application/x-zmachine": {
			"source": "apache",
			"extensions": [
				"z1",
				"z2",
				"z3",
				"z4",
				"z5",
				"z6",
				"z7",
				"z8"
			]
		},
		"application/x400-bp": {
			"source": "iana"
		},
		"application/xacml+xml": {
			"source": "iana"
		},
		"application/xaml+xml": {
			"source": "apache",
			"extensions": [
				"xaml"
			]
		},
		"application/xcap-att+xml": {
			"source": "iana"
		},
		"application/xcap-caps+xml": {
			"source": "iana"
		},
		"application/xcap-diff+xml": {
			"source": "iana",
			"extensions": [
				"xdf"
			]
		},
		"application/xcap-el+xml": {
			"source": "iana"
		},
		"application/xcap-error+xml": {
			"source": "iana"
		},
		"application/xcap-ns+xml": {
			"source": "iana"
		},
		"application/xcon-conference-info+xml": {
			"source": "iana"
		},
		"application/xcon-conference-info-diff+xml": {
			"source": "iana"
		},
		"application/xenc+xml": {
			"source": "iana",
			"extensions": [
				"xenc"
			]
		},
		"application/xhtml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"xhtml",
				"xht"
			]
		},
		"application/xhtml-voice+xml": {
			"source": "apache"
		},
		"application/xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"xml",
				"xsl",
				"xsd",
				"rng"
			]
		},
		"application/xml-dtd": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"dtd"
			]
		},
		"application/xml-external-parsed-entity": {
			"source": "iana"
		},
		"application/xml-patch+xml": {
			"source": "iana"
		},
		"application/xmpp+xml": {
			"source": "iana"
		},
		"application/xop+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"xop"
			]
		},
		"application/xproc+xml": {
			"source": "apache",
			"extensions": [
				"xpl"
			]
		},
		"application/xslt+xml": {
			"source": "iana",
			"extensions": [
				"xslt"
			]
		},
		"application/xspf+xml": {
			"source": "apache",
			"extensions": [
				"xspf"
			]
		},
		"application/xv+xml": {
			"source": "iana",
			"extensions": [
				"mxml",
				"xhvml",
				"xvml",
				"xvm"
			]
		},
		"application/yang": {
			"source": "iana",
			"extensions": [
				"yang"
			]
		},
		"application/yang-data+json": {
			"source": "iana",
			"compressible": true
		},
		"application/yang-data+xml": {
			"source": "iana"
		},
		"application/yin+xml": {
			"source": "iana",
			"extensions": [
				"yin"
			]
		},
		"application/zip": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"zip"
			]
		},
		"application/zlib": {
			"source": "iana"
		},
		"audio/1d-interleaved-parityfec": {
			"source": "iana"
		},
		"audio/32kadpcm": {
			"source": "iana"
		},
		"audio/3gpp": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"3gpp"
			]
		},
		"audio/3gpp2": {
			"source": "iana"
		},
		"audio/ac3": {
			"source": "iana"
		},
		"audio/adpcm": {
			"source": "apache",
			"extensions": [
				"adp"
			]
		},
		"audio/amr": {
			"source": "iana"
		},
		"audio/amr-wb": {
			"source": "iana"
		},
		"audio/amr-wb+": {
			"source": "iana"
		},
		"audio/aptx": {
			"source": "iana"
		},
		"audio/asc": {
			"source": "iana"
		},
		"audio/atrac-advanced-lossless": {
			"source": "iana"
		},
		"audio/atrac-x": {
			"source": "iana"
		},
		"audio/atrac3": {
			"source": "iana"
		},
		"audio/basic": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"au",
				"snd"
			]
		},
		"audio/bv16": {
			"source": "iana"
		},
		"audio/bv32": {
			"source": "iana"
		},
		"audio/clearmode": {
			"source": "iana"
		},
		"audio/cn": {
			"source": "iana"
		},
		"audio/dat12": {
			"source": "iana"
		},
		"audio/dls": {
			"source": "iana"
		},
		"audio/dsr-es201108": {
			"source": "iana"
		},
		"audio/dsr-es202050": {
			"source": "iana"
		},
		"audio/dsr-es202211": {
			"source": "iana"
		},
		"audio/dsr-es202212": {
			"source": "iana"
		},
		"audio/dv": {
			"source": "iana"
		},
		"audio/dvi4": {
			"source": "iana"
		},
		"audio/eac3": {
			"source": "iana"
		},
		"audio/encaprtp": {
			"source": "iana"
		},
		"audio/evrc": {
			"source": "iana"
		},
		"audio/evrc-qcp": {
			"source": "iana"
		},
		"audio/evrc0": {
			"source": "iana"
		},
		"audio/evrc1": {
			"source": "iana"
		},
		"audio/evrcb": {
			"source": "iana"
		},
		"audio/evrcb0": {
			"source": "iana"
		},
		"audio/evrcb1": {
			"source": "iana"
		},
		"audio/evrcnw": {
			"source": "iana"
		},
		"audio/evrcnw0": {
			"source": "iana"
		},
		"audio/evrcnw1": {
			"source": "iana"
		},
		"audio/evrcwb": {
			"source": "iana"
		},
		"audio/evrcwb0": {
			"source": "iana"
		},
		"audio/evrcwb1": {
			"source": "iana"
		},
		"audio/evs": {
			"source": "iana"
		},
		"audio/fwdred": {
			"source": "iana"
		},
		"audio/g711-0": {
			"source": "iana"
		},
		"audio/g719": {
			"source": "iana"
		},
		"audio/g722": {
			"source": "iana"
		},
		"audio/g7221": {
			"source": "iana"
		},
		"audio/g723": {
			"source": "iana"
		},
		"audio/g726-16": {
			"source": "iana"
		},
		"audio/g726-24": {
			"source": "iana"
		},
		"audio/g726-32": {
			"source": "iana"
		},
		"audio/g726-40": {
			"source": "iana"
		},
		"audio/g728": {
			"source": "iana"
		},
		"audio/g729": {
			"source": "iana"
		},
		"audio/g7291": {
			"source": "iana"
		},
		"audio/g729d": {
			"source": "iana"
		},
		"audio/g729e": {
			"source": "iana"
		},
		"audio/gsm": {
			"source": "iana"
		},
		"audio/gsm-efr": {
			"source": "iana"
		},
		"audio/gsm-hr-08": {
			"source": "iana"
		},
		"audio/ilbc": {
			"source": "iana"
		},
		"audio/ip-mr_v2.5": {
			"source": "iana"
		},
		"audio/isac": {
			"source": "apache"
		},
		"audio/l16": {
			"source": "iana"
		},
		"audio/l20": {
			"source": "iana"
		},
		"audio/l24": {
			"source": "iana",
			"compressible": false
		},
		"audio/l8": {
			"source": "iana"
		},
		"audio/lpc": {
			"source": "iana"
		},
		"audio/midi": {
			"source": "apache",
			"extensions": [
				"mid",
				"midi",
				"kar",
				"rmi"
			]
		},
		"audio/mobile-xmf": {
			"source": "iana"
		},
		"audio/mp3": {
			"compressible": false,
			"extensions": [
				"mp3"
			]
		},
		"audio/mp4": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"m4a",
				"mp4a"
			]
		},
		"audio/mp4a-latm": {
			"source": "iana"
		},
		"audio/mpa": {
			"source": "iana"
		},
		"audio/mpa-robust": {
			"source": "iana"
		},
		"audio/mpeg": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"mpga",
				"mp2",
				"mp2a",
				"mp3",
				"m2a",
				"m3a"
			]
		},
		"audio/mpeg4-generic": {
			"source": "iana"
		},
		"audio/musepack": {
			"source": "apache"
		},
		"audio/ogg": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"oga",
				"ogg",
				"spx"
			]
		},
		"audio/opus": {
			"source": "iana"
		},
		"audio/parityfec": {
			"source": "iana"
		},
		"audio/pcma": {
			"source": "iana"
		},
		"audio/pcma-wb": {
			"source": "iana"
		},
		"audio/pcmu": {
			"source": "iana"
		},
		"audio/pcmu-wb": {
			"source": "iana"
		},
		"audio/prs.sid": {
			"source": "iana"
		},
		"audio/qcelp": {
			"source": "iana"
		},
		"audio/raptorfec": {
			"source": "iana"
		},
		"audio/red": {
			"source": "iana"
		},
		"audio/rtp-enc-aescm128": {
			"source": "iana"
		},
		"audio/rtp-midi": {
			"source": "iana"
		},
		"audio/rtploopback": {
			"source": "iana"
		},
		"audio/rtx": {
			"source": "iana"
		},
		"audio/s3m": {
			"source": "apache",
			"extensions": [
				"s3m"
			]
		},
		"audio/silk": {
			"source": "apache",
			"extensions": [
				"sil"
			]
		},
		"audio/smv": {
			"source": "iana"
		},
		"audio/smv-qcp": {
			"source": "iana"
		},
		"audio/smv0": {
			"source": "iana"
		},
		"audio/sp-midi": {
			"source": "iana"
		},
		"audio/speex": {
			"source": "iana"
		},
		"audio/t140c": {
			"source": "iana"
		},
		"audio/t38": {
			"source": "iana"
		},
		"audio/telephone-event": {
			"source": "iana"
		},
		"audio/tone": {
			"source": "iana"
		},
		"audio/uemclip": {
			"source": "iana"
		},
		"audio/ulpfec": {
			"source": "iana"
		},
		"audio/vdvi": {
			"source": "iana"
		},
		"audio/vmr-wb": {
			"source": "iana"
		},
		"audio/vnd.3gpp.iufp": {
			"source": "iana"
		},
		"audio/vnd.4sb": {
			"source": "iana"
		},
		"audio/vnd.audiokoz": {
			"source": "iana"
		},
		"audio/vnd.celp": {
			"source": "iana"
		},
		"audio/vnd.cisco.nse": {
			"source": "iana"
		},
		"audio/vnd.cmles.radio-events": {
			"source": "iana"
		},
		"audio/vnd.cns.anp1": {
			"source": "iana"
		},
		"audio/vnd.cns.inf1": {
			"source": "iana"
		},
		"audio/vnd.dece.audio": {
			"source": "iana",
			"extensions": [
				"uva",
				"uvva"
			]
		},
		"audio/vnd.digital-winds": {
			"source": "iana",
			"extensions": [
				"eol"
			]
		},
		"audio/vnd.dlna.adts": {
			"source": "iana"
		},
		"audio/vnd.dolby.heaac.1": {
			"source": "iana"
		},
		"audio/vnd.dolby.heaac.2": {
			"source": "iana"
		},
		"audio/vnd.dolby.mlp": {
			"source": "iana"
		},
		"audio/vnd.dolby.mps": {
			"source": "iana"
		},
		"audio/vnd.dolby.pl2": {
			"source": "iana"
		},
		"audio/vnd.dolby.pl2x": {
			"source": "iana"
		},
		"audio/vnd.dolby.pl2z": {
			"source": "iana"
		},
		"audio/vnd.dolby.pulse.1": {
			"source": "iana"
		},
		"audio/vnd.dra": {
			"source": "iana",
			"extensions": [
				"dra"
			]
		},
		"audio/vnd.dts": {
			"source": "iana",
			"extensions": [
				"dts"
			]
		},
		"audio/vnd.dts.hd": {
			"source": "iana",
			"extensions": [
				"dtshd"
			]
		},
		"audio/vnd.dvb.file": {
			"source": "iana"
		},
		"audio/vnd.everad.plj": {
			"source": "iana"
		},
		"audio/vnd.hns.audio": {
			"source": "iana"
		},
		"audio/vnd.lucent.voice": {
			"source": "iana",
			"extensions": [
				"lvp"
			]
		},
		"audio/vnd.ms-playready.media.pya": {
			"source": "iana",
			"extensions": [
				"pya"
			]
		},
		"audio/vnd.nokia.mobile-xmf": {
			"source": "iana"
		},
		"audio/vnd.nortel.vbk": {
			"source": "iana"
		},
		"audio/vnd.nuera.ecelp4800": {
			"source": "iana",
			"extensions": [
				"ecelp4800"
			]
		},
		"audio/vnd.nuera.ecelp7470": {
			"source": "iana",
			"extensions": [
				"ecelp7470"
			]
		},
		"audio/vnd.nuera.ecelp9600": {
			"source": "iana",
			"extensions": [
				"ecelp9600"
			]
		},
		"audio/vnd.octel.sbc": {
			"source": "iana"
		},
		"audio/vnd.qcelp": {
			"source": "iana"
		},
		"audio/vnd.rhetorex.32kadpcm": {
			"source": "iana"
		},
		"audio/vnd.rip": {
			"source": "iana",
			"extensions": [
				"rip"
			]
		},
		"audio/vnd.rn-realaudio": {
			"compressible": false
		},
		"audio/vnd.sealedmedia.softseal.mpeg": {
			"source": "iana"
		},
		"audio/vnd.vmx.cvsd": {
			"source": "iana"
		},
		"audio/vnd.wave": {
			"compressible": false
		},
		"audio/vorbis": {
			"source": "iana",
			"compressible": false
		},
		"audio/vorbis-config": {
			"source": "iana"
		},
		"audio/wav": {
			"compressible": false,
			"extensions": [
				"wav"
			]
		},
		"audio/wave": {
			"compressible": false,
			"extensions": [
				"wav"
			]
		},
		"audio/webm": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"weba"
			]
		},
		"audio/x-aac": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"aac"
			]
		},
		"audio/x-aiff": {
			"source": "apache",
			"extensions": [
				"aif",
				"aiff",
				"aifc"
			]
		},
		"audio/x-caf": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"caf"
			]
		},
		"audio/x-flac": {
			"source": "apache",
			"extensions": [
				"flac"
			]
		},
		"audio/x-m4a": {
			"source": "nginx",
			"extensions": [
				"m4a"
			]
		},
		"audio/x-matroska": {
			"source": "apache",
			"extensions": [
				"mka"
			]
		},
		"audio/x-mpegurl": {
			"source": "apache",
			"extensions": [
				"m3u"
			]
		},
		"audio/x-ms-wax": {
			"source": "apache",
			"extensions": [
				"wax"
			]
		},
		"audio/x-ms-wma": {
			"source": "apache",
			"extensions": [
				"wma"
			]
		},
		"audio/x-pn-realaudio": {
			"source": "apache",
			"extensions": [
				"ram",
				"ra"
			]
		},
		"audio/x-pn-realaudio-plugin": {
			"source": "apache",
			"extensions": [
				"rmp"
			]
		},
		"audio/x-realaudio": {
			"source": "nginx",
			"extensions": [
				"ra"
			]
		},
		"audio/x-tta": {
			"source": "apache"
		},
		"audio/x-wav": {
			"source": "apache",
			"extensions": [
				"wav"
			]
		},
		"audio/xm": {
			"source": "apache",
			"extensions": [
				"xm"
			]
		},
		"chemical/x-cdx": {
			"source": "apache",
			"extensions": [
				"cdx"
			]
		},
		"chemical/x-cif": {
			"source": "apache",
			"extensions": [
				"cif"
			]
		},
		"chemical/x-cmdf": {
			"source": "apache",
			"extensions": [
				"cmdf"
			]
		},
		"chemical/x-cml": {
			"source": "apache",
			"extensions": [
				"cml"
			]
		},
		"chemical/x-csml": {
			"source": "apache",
			"extensions": [
				"csml"
			]
		},
		"chemical/x-pdb": {
			"source": "apache"
		},
		"chemical/x-xyz": {
			"source": "apache",
			"extensions": [
				"xyz"
			]
		},
		"font/opentype": {
			"compressible": true,
			"extensions": [
				"otf"
			]
		},
		"image/bmp": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"bmp"
			]
		},
		"image/cgm": {
			"source": "iana",
			"extensions": [
				"cgm"
			]
		},
		"image/dicom-rle": {
			"source": "iana"
		},
		"image/emf": {
			"source": "iana"
		},
		"image/fits": {
			"source": "iana"
		},
		"image/g3fax": {
			"source": "iana",
			"extensions": [
				"g3"
			]
		},
		"image/gif": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"gif"
			]
		},
		"image/ief": {
			"source": "iana",
			"extensions": [
				"ief"
			]
		},
		"image/jls": {
			"source": "iana"
		},
		"image/jp2": {
			"source": "iana"
		},
		"image/jpeg": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"jpeg",
				"jpg",
				"jpe"
			]
		},
		"image/jpm": {
			"source": "iana"
		},
		"image/jpx": {
			"source": "iana"
		},
		"image/ktx": {
			"source": "iana",
			"extensions": [
				"ktx"
			]
		},
		"image/naplps": {
			"source": "iana"
		},
		"image/pjpeg": {
			"compressible": false
		},
		"image/png": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"png"
			]
		},
		"image/prs.btif": {
			"source": "iana",
			"extensions": [
				"btif"
			]
		},
		"image/prs.pti": {
			"source": "iana"
		},
		"image/pwg-raster": {
			"source": "iana"
		},
		"image/sgi": {
			"source": "apache",
			"extensions": [
				"sgi"
			]
		},
		"image/svg+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"svg",
				"svgz"
			]
		},
		"image/t38": {
			"source": "iana"
		},
		"image/tiff": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"tiff",
				"tif"
			]
		},
		"image/tiff-fx": {
			"source": "iana"
		},
		"image/vnd.adobe.photoshop": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"psd"
			]
		},
		"image/vnd.airzip.accelerator.azv": {
			"source": "iana"
		},
		"image/vnd.cns.inf2": {
			"source": "iana"
		},
		"image/vnd.dece.graphic": {
			"source": "iana",
			"extensions": [
				"uvi",
				"uvvi",
				"uvg",
				"uvvg"
			]
		},
		"image/vnd.djvu": {
			"source": "iana",
			"extensions": [
				"djvu",
				"djv"
			]
		},
		"image/vnd.dvb.subtitle": {
			"source": "iana",
			"extensions": [
				"sub"
			]
		},
		"image/vnd.dwg": {
			"source": "iana",
			"extensions": [
				"dwg"
			]
		},
		"image/vnd.dxf": {
			"source": "iana",
			"extensions": [
				"dxf"
			]
		},
		"image/vnd.fastbidsheet": {
			"source": "iana",
			"extensions": [
				"fbs"
			]
		},
		"image/vnd.fpx": {
			"source": "iana",
			"extensions": [
				"fpx"
			]
		},
		"image/vnd.fst": {
			"source": "iana",
			"extensions": [
				"fst"
			]
		},
		"image/vnd.fujixerox.edmics-mmr": {
			"source": "iana",
			"extensions": [
				"mmr"
			]
		},
		"image/vnd.fujixerox.edmics-rlc": {
			"source": "iana",
			"extensions": [
				"rlc"
			]
		},
		"image/vnd.globalgraphics.pgb": {
			"source": "iana"
		},
		"image/vnd.microsoft.icon": {
			"source": "iana"
		},
		"image/vnd.mix": {
			"source": "iana"
		},
		"image/vnd.mozilla.apng": {
			"source": "iana"
		},
		"image/vnd.ms-modi": {
			"source": "iana",
			"extensions": [
				"mdi"
			]
		},
		"image/vnd.ms-photo": {
			"source": "apache",
			"extensions": [
				"wdp"
			]
		},
		"image/vnd.net-fpx": {
			"source": "iana",
			"extensions": [
				"npx"
			]
		},
		"image/vnd.radiance": {
			"source": "iana"
		},
		"image/vnd.sealed.png": {
			"source": "iana"
		},
		"image/vnd.sealedmedia.softseal.gif": {
			"source": "iana"
		},
		"image/vnd.sealedmedia.softseal.jpg": {
			"source": "iana"
		},
		"image/vnd.svf": {
			"source": "iana"
		},
		"image/vnd.tencent.tap": {
			"source": "iana"
		},
		"image/vnd.valve.source.texture": {
			"source": "iana"
		},
		"image/vnd.wap.wbmp": {
			"source": "iana",
			"extensions": [
				"wbmp"
			]
		},
		"image/vnd.xiff": {
			"source": "iana",
			"extensions": [
				"xif"
			]
		},
		"image/vnd.zbrush.pcx": {
			"source": "iana"
		},
		"image/webp": {
			"source": "apache",
			"extensions": [
				"webp"
			]
		},
		"image/wmf": {
			"source": "iana"
		},
		"image/x-3ds": {
			"source": "apache",
			"extensions": [
				"3ds"
			]
		},
		"image/x-cmu-raster": {
			"source": "apache",
			"extensions": [
				"ras"
			]
		},
		"image/x-cmx": {
			"source": "apache",
			"extensions": [
				"cmx"
			]
		},
		"image/x-freehand": {
			"source": "apache",
			"extensions": [
				"fh",
				"fhc",
				"fh4",
				"fh5",
				"fh7"
			]
		},
		"image/x-icon": {
			"source": "apache",
			"compressible": true,
			"extensions": [
				"ico"
			]
		},
		"image/x-jng": {
			"source": "nginx",
			"extensions": [
				"jng"
			]
		},
		"image/x-mrsid-image": {
			"source": "apache",
			"extensions": [
				"sid"
			]
		},
		"image/x-ms-bmp": {
			"source": "nginx",
			"compressible": true,
			"extensions": [
				"bmp"
			]
		},
		"image/x-pcx": {
			"source": "apache",
			"extensions": [
				"pcx"
			]
		},
		"image/x-pict": {
			"source": "apache",
			"extensions": [
				"pic",
				"pct"
			]
		},
		"image/x-portable-anymap": {
			"source": "apache",
			"extensions": [
				"pnm"
			]
		},
		"image/x-portable-bitmap": {
			"source": "apache",
			"extensions": [
				"pbm"
			]
		},
		"image/x-portable-graymap": {
			"source": "apache",
			"extensions": [
				"pgm"
			]
		},
		"image/x-portable-pixmap": {
			"source": "apache",
			"extensions": [
				"ppm"
			]
		},
		"image/x-rgb": {
			"source": "apache",
			"extensions": [
				"rgb"
			]
		},
		"image/x-tga": {
			"source": "apache",
			"extensions": [
				"tga"
			]
		},
		"image/x-xbitmap": {
			"source": "apache",
			"extensions": [
				"xbm"
			]
		},
		"image/x-xcf": {
			"compressible": false
		},
		"image/x-xpixmap": {
			"source": "apache",
			"extensions": [
				"xpm"
			]
		},
		"image/x-xwindowdump": {
			"source": "apache",
			"extensions": [
				"xwd"
			]
		},
		"message/cpim": {
			"source": "iana"
		},
		"message/delivery-status": {
			"source": "iana"
		},
		"message/disposition-notification": {
			"source": "iana"
		},
		"message/external-body": {
			"source": "iana"
		},
		"message/feedback-report": {
			"source": "iana"
		},
		"message/global": {
			"source": "iana"
		},
		"message/global-delivery-status": {
			"source": "iana"
		},
		"message/global-disposition-notification": {
			"source": "iana"
		},
		"message/global-headers": {
			"source": "iana"
		},
		"message/http": {
			"source": "iana",
			"compressible": false
		},
		"message/imdn+xml": {
			"source": "iana",
			"compressible": true
		},
		"message/news": {
			"source": "iana"
		},
		"message/partial": {
			"source": "iana",
			"compressible": false
		},
		"message/rfc822": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"eml",
				"mime"
			]
		},
		"message/s-http": {
			"source": "iana"
		},
		"message/sip": {
			"source": "iana"
		},
		"message/sipfrag": {
			"source": "iana"
		},
		"message/tracking-status": {
			"source": "iana"
		},
		"message/vnd.si.simp": {
			"source": "iana"
		},
		"message/vnd.wfa.wsc": {
			"source": "iana"
		},
		"model/gltf+json": {
			"source": "iana",
			"compressible": true
		},
		"model/iges": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"igs",
				"iges"
			]
		},
		"model/mesh": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"msh",
				"mesh",
				"silo"
			]
		},
		"model/vnd.collada+xml": {
			"source": "iana",
			"extensions": [
				"dae"
			]
		},
		"model/vnd.dwf": {
			"source": "iana",
			"extensions": [
				"dwf"
			]
		},
		"model/vnd.flatland.3dml": {
			"source": "iana"
		},
		"model/vnd.gdl": {
			"source": "iana",
			"extensions": [
				"gdl"
			]
		},
		"model/vnd.gs-gdl": {
			"source": "apache"
		},
		"model/vnd.gs.gdl": {
			"source": "iana"
		},
		"model/vnd.gtw": {
			"source": "iana",
			"extensions": [
				"gtw"
			]
		},
		"model/vnd.moml+xml": {
			"source": "iana"
		},
		"model/vnd.mts": {
			"source": "iana",
			"extensions": [
				"mts"
			]
		},
		"model/vnd.opengex": {
			"source": "iana"
		},
		"model/vnd.parasolid.transmit.binary": {
			"source": "iana"
		},
		"model/vnd.parasolid.transmit.text": {
			"source": "iana"
		},
		"model/vnd.rosette.annotated-data-model": {
			"source": "iana"
		},
		"model/vnd.valve.source.compiled-map": {
			"source": "iana"
		},
		"model/vnd.vtu": {
			"source": "iana",
			"extensions": [
				"vtu"
			]
		},
		"model/vrml": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"wrl",
				"vrml"
			]
		},
		"model/x3d+binary": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"x3db",
				"x3dbz"
			]
		},
		"model/x3d+fastinfoset": {
			"source": "iana"
		},
		"model/x3d+vrml": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"x3dv",
				"x3dvz"
			]
		},
		"model/x3d+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"x3d",
				"x3dz"
			]
		},
		"model/x3d-vrml": {
			"source": "iana"
		},
		"multipart/alternative": {
			"source": "iana",
			"compressible": false
		},
		"multipart/appledouble": {
			"source": "iana"
		},
		"multipart/byteranges": {
			"source": "iana"
		},
		"multipart/digest": {
			"source": "iana"
		},
		"multipart/encrypted": {
			"source": "iana",
			"compressible": false
		},
		"multipart/form-data": {
			"source": "iana",
			"compressible": false
		},
		"multipart/header-set": {
			"source": "iana"
		},
		"multipart/mixed": {
			"source": "iana",
			"compressible": false
		},
		"multipart/parallel": {
			"source": "iana"
		},
		"multipart/related": {
			"source": "iana",
			"compressible": false
		},
		"multipart/report": {
			"source": "iana"
		},
		"multipart/signed": {
			"source": "iana",
			"compressible": false
		},
		"multipart/voice-message": {
			"source": "iana"
		},
		"multipart/x-mixed-replace": {
			"source": "iana"
		},
		"text/1d-interleaved-parityfec": {
			"source": "iana"
		},
		"text/cache-manifest": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"appcache",
				"manifest"
			]
		},
		"text/calendar": {
			"source": "iana",
			"extensions": [
				"ics",
				"ifb"
			]
		},
		"text/calender": {
			"compressible": true
		},
		"text/cmd": {
			"compressible": true
		},
		"text/coffeescript": {
			"extensions": [
				"coffee",
				"litcoffee"
			]
		},
		"text/css": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"css"
			]
		},
		"text/csv": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"csv"
			]
		},
		"text/csv-schema": {
			"source": "iana"
		},
		"text/directory": {
			"source": "iana"
		},
		"text/dns": {
			"source": "iana"
		},
		"text/ecmascript": {
			"source": "iana"
		},
		"text/encaprtp": {
			"source": "iana"
		},
		"text/enriched": {
			"source": "iana"
		},
		"text/fwdred": {
			"source": "iana"
		},
		"text/grammar-ref-list": {
			"source": "iana"
		},
		"text/hjson": {
			"extensions": [
				"hjson"
			]
		},
		"text/html": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"html",
				"htm",
				"shtml"
			]
		},
		"text/jade": {
			"extensions": [
				"jade"
			]
		},
		"text/javascript": {
			"source": "iana",
			"compressible": true
		},
		"text/jcr-cnd": {
			"source": "iana"
		},
		"text/jsx": {
			"compressible": true,
			"extensions": [
				"jsx"
			]
		},
		"text/less": {
			"extensions": [
				"less"
			]
		},
		"text/markdown": {
			"source": "iana"
		},
		"text/mathml": {
			"source": "nginx",
			"extensions": [
				"mml"
			]
		},
		"text/mizar": {
			"source": "iana"
		},
		"text/n3": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"n3"
			]
		},
		"text/parameters": {
			"source": "iana"
		},
		"text/parityfec": {
			"source": "iana"
		},
		"text/plain": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"txt",
				"text",
				"conf",
				"def",
				"list",
				"log",
				"in",
				"ini"
			]
		},
		"text/provenance-notation": {
			"source": "iana"
		},
		"text/prs.fallenstein.rst": {
			"source": "iana"
		},
		"text/prs.lines.tag": {
			"source": "iana",
			"extensions": [
				"dsc"
			]
		},
		"text/prs.prop.logic": {
			"source": "iana"
		},
		"text/raptorfec": {
			"source": "iana"
		},
		"text/red": {
			"source": "iana"
		},
		"text/rfc822-headers": {
			"source": "iana"
		},
		"text/richtext": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"rtx"
			]
		},
		"text/rtf": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"rtf"
			]
		},
		"text/rtp-enc-aescm128": {
			"source": "iana"
		},
		"text/rtploopback": {
			"source": "iana"
		},
		"text/rtx": {
			"source": "iana"
		},
		"text/sgml": {
			"source": "iana",
			"extensions": [
				"sgml",
				"sgm"
			]
		},
		"text/slim": {
			"extensions": [
				"slim",
				"slm"
			]
		},
		"text/stylus": {
			"extensions": [
				"stylus",
				"styl"
			]
		},
		"text/t140": {
			"source": "iana"
		},
		"text/tab-separated-values": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"tsv"
			]
		},
		"text/troff": {
			"source": "iana",
			"extensions": [
				"t",
				"tr",
				"roff",
				"man",
				"me",
				"ms"
			]
		},
		"text/turtle": {
			"source": "iana",
			"extensions": [
				"ttl"
			]
		},
		"text/ulpfec": {
			"source": "iana"
		},
		"text/uri-list": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"uri",
				"uris",
				"urls"
			]
		},
		"text/vcard": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"vcard"
			]
		},
		"text/vnd.a": {
			"source": "iana"
		},
		"text/vnd.abc": {
			"source": "iana"
		},
		"text/vnd.ascii-art": {
			"source": "iana"
		},
		"text/vnd.curl": {
			"source": "iana",
			"extensions": [
				"curl"
			]
		},
		"text/vnd.curl.dcurl": {
			"source": "apache",
			"extensions": [
				"dcurl"
			]
		},
		"text/vnd.curl.mcurl": {
			"source": "apache",
			"extensions": [
				"mcurl"
			]
		},
		"text/vnd.curl.scurl": {
			"source": "apache",
			"extensions": [
				"scurl"
			]
		},
		"text/vnd.debian.copyright": {
			"source": "iana"
		},
		"text/vnd.dmclientscript": {
			"source": "iana"
		},
		"text/vnd.dvb.subtitle": {
			"source": "iana",
			"extensions": [
				"sub"
			]
		},
		"text/vnd.esmertec.theme-descriptor": {
			"source": "iana"
		},
		"text/vnd.fly": {
			"source": "iana",
			"extensions": [
				"fly"
			]
		},
		"text/vnd.fmi.flexstor": {
			"source": "iana",
			"extensions": [
				"flx"
			]
		},
		"text/vnd.graphviz": {
			"source": "iana",
			"extensions": [
				"gv"
			]
		},
		"text/vnd.in3d.3dml": {
			"source": "iana",
			"extensions": [
				"3dml"
			]
		},
		"text/vnd.in3d.spot": {
			"source": "iana",
			"extensions": [
				"spot"
			]
		},
		"text/vnd.iptc.newsml": {
			"source": "iana"
		},
		"text/vnd.iptc.nitf": {
			"source": "iana"
		},
		"text/vnd.latex-z": {
			"source": "iana"
		},
		"text/vnd.motorola.reflex": {
			"source": "iana"
		},
		"text/vnd.ms-mediapackage": {
			"source": "iana"
		},
		"text/vnd.net2phone.commcenter.command": {
			"source": "iana"
		},
		"text/vnd.radisys.msml-basic-layout": {
			"source": "iana"
		},
		"text/vnd.si.uricatalogue": {
			"source": "iana"
		},
		"text/vnd.sun.j2me.app-descriptor": {
			"source": "iana",
			"extensions": [
				"jad"
			]
		},
		"text/vnd.trolltech.linguist": {
			"source": "iana"
		},
		"text/vnd.wap.si": {
			"source": "iana"
		},
		"text/vnd.wap.sl": {
			"source": "iana"
		},
		"text/vnd.wap.wml": {
			"source": "iana",
			"extensions": [
				"wml"
			]
		},
		"text/vnd.wap.wmlscript": {
			"source": "iana",
			"extensions": [
				"wmls"
			]
		},
		"text/vtt": {
			"charset": "UTF-8",
			"compressible": true,
			"extensions": [
				"vtt"
			]
		},
		"text/x-asm": {
			"source": "apache",
			"extensions": [
				"s",
				"asm"
			]
		},
		"text/x-c": {
			"source": "apache",
			"extensions": [
				"c",
				"cc",
				"cxx",
				"cpp",
				"h",
				"hh",
				"dic"
			]
		},
		"text/x-component": {
			"source": "nginx",
			"extensions": [
				"htc"
			]
		},
		"text/x-fortran": {
			"source": "apache",
			"extensions": [
				"f",
				"for",
				"f77",
				"f90"
			]
		},
		"text/x-gwt-rpc": {
			"compressible": true
		},
		"text/x-handlebars-template": {
			"extensions": [
				"hbs"
			]
		},
		"text/x-java-source": {
			"source": "apache",
			"extensions": [
				"java"
			]
		},
		"text/x-jquery-tmpl": {
			"compressible": true
		},
		"text/x-lua": {
			"extensions": [
				"lua"
			]
		},
		"text/x-markdown": {
			"compressible": true,
			"extensions": [
				"markdown",
				"md",
				"mkd"
			]
		},
		"text/x-nfo": {
			"source": "apache",
			"extensions": [
				"nfo"
			]
		},
		"text/x-opml": {
			"source": "apache",
			"extensions": [
				"opml"
			]
		},
		"text/x-pascal": {
			"source": "apache",
			"extensions": [
				"p",
				"pas"
			]
		},
		"text/x-processing": {
			"compressible": true,
			"extensions": [
				"pde"
			]
		},
		"text/x-sass": {
			"extensions": [
				"sass"
			]
		},
		"text/x-scss": {
			"extensions": [
				"scss"
			]
		},
		"text/x-setext": {
			"source": "apache",
			"extensions": [
				"etx"
			]
		},
		"text/x-sfv": {
			"source": "apache",
			"extensions": [
				"sfv"
			]
		},
		"text/x-suse-ymp": {
			"compressible": true,
			"extensions": [
				"ymp"
			]
		},
		"text/x-uuencode": {
			"source": "apache",
			"extensions": [
				"uu"
			]
		},
		"text/x-vcalendar": {
			"source": "apache",
			"extensions": [
				"vcs"
			]
		},
		"text/x-vcard": {
			"source": "apache",
			"extensions": [
				"vcf"
			]
		},
		"text/xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"xml"
			]
		},
		"text/xml-external-parsed-entity": {
			"source": "iana"
		},
		"text/yaml": {
			"extensions": [
				"yaml",
				"yml"
			]
		},
		"video/1d-interleaved-parityfec": {
			"source": "apache"
		},
		"video/3gpp": {
			"source": "apache",
			"extensions": [
				"3gp",
				"3gpp"
			]
		},
		"video/3gpp-tt": {
			"source": "apache"
		},
		"video/3gpp2": {
			"source": "apache",
			"extensions": [
				"3g2"
			]
		},
		"video/bmpeg": {
			"source": "apache"
		},
		"video/bt656": {
			"source": "apache"
		},
		"video/celb": {
			"source": "apache"
		},
		"video/dv": {
			"source": "apache"
		},
		"video/encaprtp": {
			"source": "apache"
		},
		"video/h261": {
			"source": "apache",
			"extensions": [
				"h261"
			]
		},
		"video/h263": {
			"source": "apache",
			"extensions": [
				"h263"
			]
		},
		"video/h263-1998": {
			"source": "apache"
		},
		"video/h263-2000": {
			"source": "apache"
		},
		"video/h264": {
			"source": "apache",
			"extensions": [
				"h264"
			]
		},
		"video/h264-rcdo": {
			"source": "apache"
		},
		"video/h264-svc": {
			"source": "apache"
		},
		"video/h265": {
			"source": "apache"
		},
		"video/iso.segment": {
			"source": "apache"
		},
		"video/jpeg": {
			"source": "apache",
			"extensions": [
				"jpgv"
			]
		},
		"video/jpeg2000": {
			"source": "apache"
		},
		"video/jpm": {
			"source": "apache",
			"extensions": [
				"jpm",
				"jpgm"
			]
		},
		"video/mj2": {
			"source": "apache",
			"extensions": [
				"mj2",
				"mjp2"
			]
		},
		"video/mp1s": {
			"source": "apache"
		},
		"video/mp2p": {
			"source": "apache"
		},
		"video/mp2t": {
			"source": "apache",
			"extensions": [
				"ts"
			]
		},
		"video/mp4": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"mp4",
				"mp4v",
				"mpg4"
			]
		},
		"video/mp4v-es": {
			"source": "apache"
		},
		"video/mpeg": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"mpeg",
				"mpg",
				"mpe",
				"m1v",
				"m2v"
			]
		},
		"video/mpeg4-generic": {
			"source": "apache"
		},
		"video/mpv": {
			"source": "apache"
		},
		"video/nv": {
			"source": "apache"
		},
		"video/ogg": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"ogv"
			]
		},
		"video/parityfec": {
			"source": "apache"
		},
		"video/pointer": {
			"source": "apache"
		},
		"video/quicktime": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"qt",
				"mov"
			]
		},
		"video/raptorfec": {
			"source": "apache"
		},
		"video/raw": {
			"source": "apache"
		},
		"video/rtp-enc-aescm128": {
			"source": "apache"
		},
		"video/rtploopback": {
			"source": "apache"
		},
		"video/rtx": {
			"source": "apache"
		},
		"video/smpte292m": {
			"source": "apache"
		},
		"video/ulpfec": {
			"source": "apache"
		},
		"video/vc1": {
			"source": "apache"
		},
		"video/vnd.cctv": {
			"source": "apache"
		},
		"video/vnd.dece.hd": {
			"source": "apache",
			"extensions": [
				"uvh",
				"uvvh"
			]
		},
		"video/vnd.dece.mobile": {
			"source": "apache",
			"extensions": [
				"uvm",
				"uvvm"
			]
		},
		"video/vnd.dece.mp4": {
			"source": "apache"
		},
		"video/vnd.dece.pd": {
			"source": "apache",
			"extensions": [
				"uvp",
				"uvvp"
			]
		},
		"video/vnd.dece.sd": {
			"source": "apache",
			"extensions": [
				"uvs",
				"uvvs"
			]
		},
		"video/vnd.dece.video": {
			"source": "apache",
			"extensions": [
				"uvv",
				"uvvv"
			]
		},
		"video/vnd.directv.mpeg": {
			"source": "apache"
		},
		"video/vnd.directv.mpeg-tts": {
			"source": "apache"
		},
		"video/vnd.dlna.mpeg-tts": {
			"source": "apache"
		},
		"video/vnd.dvb.file": {
			"source": "apache",
			"extensions": [
				"dvb"
			]
		},
		"video/vnd.fvt": {
			"source": "apache",
			"extensions": [
				"fvt"
			]
		},
		"video/vnd.hns.video": {
			"source": "apache"
		},
		"video/vnd.iptvforum.1dparityfec-1010": {
			"source": "apache"
		},
		"video/vnd.iptvforum.1dparityfec-2005": {
			"source": "apache"
		},
		"video/vnd.iptvforum.2dparityfec-1010": {
			"source": "apache"
		},
		"video/vnd.iptvforum.2dparityfec-2005": {
			"source": "apache"
		},
		"video/vnd.iptvforum.ttsavc": {
			"source": "apache"
		},
		"video/vnd.iptvforum.ttsmpeg2": {
			"source": "apache"
		},
		"video/vnd.motorola.video": {
			"source": "apache"
		},
		"video/vnd.motorola.videop": {
			"source": "apache"
		},
		"video/vnd.mpegurl": {
			"source": "apache",
			"extensions": [
				"mxu",
				"m4u"
			]
		},
		"video/vnd.ms-playready.media.pyv": {
			"source": "apache",
			"extensions": [
				"pyv"
			]
		},
		"video/vnd.nokia.interleaved-multimedia": {
			"source": "apache"
		},
		"video/vnd.nokia.videovoip": {
			"source": "apache"
		},
		"video/vnd.objectvideo": {
			"source": "apache"
		},
		"video/vnd.radgamettools.bink": {
			"source": "apache"
		},
		"video/vnd.radgamettools.smacker": {
			"source": "apache"
		},
		"video/vnd.sealed.mpeg1": {
			"source": "apache"
		},
		"video/vnd.sealed.mpeg4": {
			"source": "apache"
		},
		"video/vnd.sealed.swf": {
			"source": "apache"
		},
		"video/vnd.sealedmedia.softseal.mov": {
			"source": "apache"
		},
		"video/vnd.uvvu.mp4": {
			"source": "apache",
			"extensions": [
				"uvu",
				"uvvu"
			]
		},
		"video/vnd.vivo": {
			"source": "apache",
			"extensions": [
				"viv"
			]
		},
		"video/vp8": {
			"source": "apache"
		},
		"video/webm": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"webm"
			]
		},
		"video/x-f4v": {
			"source": "apache",
			"extensions": [
				"f4v"
			]
		},
		"video/x-fli": {
			"source": "apache",
			"extensions": [
				"fli"
			]
		},
		"video/x-flv": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"flv"
			]
		},
		"video/x-m4v": {
			"source": "apache",
			"extensions": [
				"m4v"
			]
		},
		"video/x-matroska": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"mkv",
				"mk3d",
				"mks"
			]
		},
		"video/x-mng": {
			"source": "apache",
			"extensions": [
				"mng"
			]
		},
		"video/x-ms-asf": {
			"source": "apache",
			"extensions": [
				"asf",
				"asx"
			]
		},
		"video/x-ms-vob": {
			"source": "apache",
			"extensions": [
				"vob"
			]
		},
		"video/x-ms-wm": {
			"source": "apache",
			"extensions": [
				"wm"
			]
		},
		"video/x-ms-wmv": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"wmv"
			]
		},
		"video/x-ms-wmx": {
			"source": "apache",
			"extensions": [
				"wmx"
			]
		},
		"video/x-ms-wvx": {
			"source": "apache",
			"extensions": [
				"wvx"
			]
		},
		"video/x-msvideo": {
			"source": "apache",
			"extensions": [
				"avi"
			]
		},
		"video/x-sgi-movie": {
			"source": "apache",
			"extensions": [
				"movie"
			]
		},
		"video/x-smv": {
			"source": "apache",
			"extensions": [
				"smv"
			]
		},
		"x-conference/x-cooltalk": {
			"source": "apache",
			"extensions": [
				"ice"
			]
		},
		"x-shader/x-fragment": {
			"compressible": true
		},
		"x-shader/x-vertex": {
			"compressible": true
		}
	};

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * type-is
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var typer = __webpack_require__(425)
	var mime = __webpack_require__(421)
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = typeofrequest
	module.exports.is = typeis
	module.exports.hasBody = hasbody
	module.exports.normalize = normalize
	module.exports.match = mimeMatch
	
	/**
	 * Compare a `value` content-type with `types`.
	 * Each `type` can be an extension like `html`,
	 * a special shortcut like `multipart` or `urlencoded`,
	 * or a mime type.
	 *
	 * If no types match, `false` is returned.
	 * Otherwise, the first `type` that matches is returned.
	 *
	 * @param {String} value
	 * @param {Array} types
	 * @public
	 */
	
	function typeis (value, types_) {
	  var i
	  var types = types_
	
	  // remove parameters and normalize
	  var val = tryNormalizeType(value)
	
	  // no type or invalid
	  if (!val) {
	    return false
	  }
	
	  // support flattened arguments
	  if (types && !Array.isArray(types)) {
	    types = new Array(arguments.length - 1)
	    for (i = 0; i < types.length; i++) {
	      types[i] = arguments[i + 1]
	    }
	  }
	
	  // no types, return the content type
	  if (!types || !types.length) {
	    return val
	  }
	
	  var type
	  for (i = 0; i < types.length; i++) {
	    if (mimeMatch(normalize(type = types[i]), val)) {
	      return type[0] === '+' || type.indexOf('*') !== -1
	        ? val
	        : type
	    }
	  }
	
	  // no matches
	  return false
	}
	
	/**
	 * Check if a request has a request body.
	 * A request with a body __must__ either have `transfer-encoding`
	 * or `content-length` headers set.
	 * http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3
	 *
	 * @param {Object} request
	 * @return {Boolean}
	 * @public
	 */
	
	function hasbody (req) {
	  return req.headers['transfer-encoding'] !== undefined ||
	    !isNaN(req.headers['content-length'])
	}
	
	/**
	 * Check if the incoming request contains the "Content-Type"
	 * header field, and it contains any of the give mime `type`s.
	 * If there is no request body, `null` is returned.
	 * If there is no content type, `false` is returned.
	 * Otherwise, it returns the first `type` that matches.
	 *
	 * Examples:
	 *
	 *     // With Content-Type: text/html; charset=utf-8
	 *     this.is('html'); // => 'html'
	 *     this.is('text/html'); // => 'text/html'
	 *     this.is('text/*', 'application/json'); // => 'text/html'
	 *
	 *     // When Content-Type is application/json
	 *     this.is('json', 'urlencoded'); // => 'json'
	 *     this.is('application/json'); // => 'application/json'
	 *     this.is('html', 'application/*'); // => 'application/json'
	 *
	 *     this.is('html'); // => false
	 *
	 * @param {String|Array} types...
	 * @return {String|false|null}
	 * @public
	 */
	
	function typeofrequest (req, types_) {
	  var types = types_
	
	  // no body
	  if (!hasbody(req)) {
	    return null
	  }
	
	  // support flattened arguments
	  if (arguments.length > 2) {
	    types = new Array(arguments.length - 1)
	    for (var i = 0; i < types.length; i++) {
	      types[i] = arguments[i + 1]
	    }
	  }
	
	  // request content type
	  var value = req.headers['content-type']
	
	  return typeis(value, types)
	}
	
	/**
	 * Normalize a mime type.
	 * If it's a shorthand, expand it to a valid mime type.
	 *
	 * In general, you probably want:
	 *
	 *   var type = is(req, ['urlencoded', 'json', 'multipart']);
	 *
	 * Then use the appropriate body parsers.
	 * These three are the most common request body types
	 * and are thus ensured to work.
	 *
	 * @param {String} type
	 * @private
	 */
	
	function normalize (type) {
	  if (typeof type !== 'string') {
	    // invalid type
	    return false
	  }
	
	  switch (type) {
	    case 'urlencoded':
	      return 'application/x-www-form-urlencoded'
	    case 'multipart':
	      return 'multipart/*'
	  }
	
	  if (type[0] === '+') {
	    // "+json" -> "*/*+json" expando
	    return '*/*' + type
	  }
	
	  return type.indexOf('/') === -1
	    ? mime.lookup(type)
	    : type
	}
	
	/**
	 * Check if `expected` mime type
	 * matches `actual` mime type with
	 * wildcard and +suffix support.
	 *
	 * @param {String} expected
	 * @param {String} actual
	 * @return {Boolean}
	 * @private
	 */
	
	function mimeMatch (expected, actual) {
	  // invalid type
	  if (expected === false) {
	    return false
	  }
	
	  // split types
	  var actualParts = actual.split('/')
	  var expectedParts = expected.split('/')
	
	  // invalid format
	  if (actualParts.length !== 2 || expectedParts.length !== 2) {
	    return false
	  }
	
	  // validate type
	  if (expectedParts[0] !== '*' && expectedParts[0] !== actualParts[0]) {
	    return false
	  }
	
	  // validate suffix wildcard
	  if (expectedParts[1].substr(0, 2) === '*+') {
	    return expectedParts[1].length <= actualParts[1].length + 1 &&
	      expectedParts[1].substr(1) === actualParts[1].substr(1 - expectedParts[1].length)
	  }
	
	  // validate subtype
	  if (expectedParts[1] !== '*' && expectedParts[1] !== actualParts[1]) {
	    return false
	  }
	
	  return true
	}
	
	/**
	 * Normalize a type and remove parameters.
	 *
	 * @param {string} value
	 * @return {string}
	 * @private
	 */
	
	function normalizeType (value) {
	  // parse the type
	  var type = typer.parse(value)
	
	  // remove the parameters
	  type.parameters = undefined
	
	  // reformat it
	  return typer.format(type)
	}
	
	/**
	 * Try to normalize a type and remove parameters.
	 *
	 * @param {string} value
	 * @return {string}
	 * @private
	 */
	
	function tryNormalizeType (value) {
	  try {
	    return normalizeType(value)
	  } catch (err) {
	    return null
	  }
	}


/***/ },
/* 425 */
/***/ function(module, exports) {

	/*!
	 * media-typer
	 * Copyright(c) 2014 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	/**
	 * RegExp to match *( ";" parameter ) in RFC 2616 sec 3.7
	 *
	 * parameter     = token "=" ( token | quoted-string )
	 * token         = 1*<any CHAR except CTLs or separators>
	 * separators    = "(" | ")" | "<" | ">" | "@"
	 *               | "," | ";" | ":" | "\" | <">
	 *               | "/" | "[" | "]" | "?" | "="
	 *               | "{" | "}" | SP | HT
	 * quoted-string = ( <"> *(qdtext | quoted-pair ) <"> )
	 * qdtext        = <any TEXT except <">>
	 * quoted-pair   = "\" CHAR
	 * CHAR          = <any US-ASCII character (octets 0 - 127)>
	 * TEXT          = <any OCTET except CTLs, but including LWS>
	 * LWS           = [CRLF] 1*( SP | HT )
	 * CRLF          = CR LF
	 * CR            = <US-ASCII CR, carriage return (13)>
	 * LF            = <US-ASCII LF, linefeed (10)>
	 * SP            = <US-ASCII SP, space (32)>
	 * SHT           = <US-ASCII HT, horizontal-tab (9)>
	 * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>
	 * OCTET         = <any 8-bit sequence of data>
	 */
	var paramRegExp = /; *([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *= *("(?:[ !\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u0020-\u007e])*"|[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) */g;
	var textRegExp = /^[\u0020-\u007e\u0080-\u00ff]+$/
	var tokenRegExp = /^[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+$/
	
	/**
	 * RegExp to match quoted-pair in RFC 2616
	 *
	 * quoted-pair = "\" CHAR
	 * CHAR        = <any US-ASCII character (octets 0 - 127)>
	 */
	var qescRegExp = /\\([\u0000-\u007f])/g;
	
	/**
	 * RegExp to match chars that must be quoted-pair in RFC 2616
	 */
	var quoteRegExp = /([\\"])/g;
	
	/**
	 * RegExp to match type in RFC 6838
	 *
	 * type-name = restricted-name
	 * subtype-name = restricted-name
	 * restricted-name = restricted-name-first *126restricted-name-chars
	 * restricted-name-first  = ALPHA / DIGIT
	 * restricted-name-chars  = ALPHA / DIGIT / "!" / "#" /
	 *                          "$" / "&" / "-" / "^" / "_"
	 * restricted-name-chars =/ "." ; Characters before first dot always
	 *                              ; specify a facet name
	 * restricted-name-chars =/ "+" ; Characters after last plus always
	 *                              ; specify a structured syntax suffix
	 * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z
	 * DIGIT =  %x30-39             ; 0-9
	 */
	var subtypeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/
	var typeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/
	var typeRegExp = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;
	
	/**
	 * Module exports.
	 */
	
	exports.format = format
	exports.parse = parse
	
	/**
	 * Format object to media type.
	 *
	 * @param {object} obj
	 * @return {string}
	 * @api public
	 */
	
	function format(obj) {
	  if (!obj || typeof obj !== 'object') {
	    throw new TypeError('argument obj is required')
	  }
	
	  var parameters = obj.parameters
	  var subtype = obj.subtype
	  var suffix = obj.suffix
	  var type = obj.type
	
	  if (!type || !typeNameRegExp.test(type)) {
	    throw new TypeError('invalid type')
	  }
	
	  if (!subtype || !subtypeNameRegExp.test(subtype)) {
	    throw new TypeError('invalid subtype')
	  }
	
	  // format as type/subtype
	  var string = type + '/' + subtype
	
	  // append +suffix
	  if (suffix) {
	    if (!typeNameRegExp.test(suffix)) {
	      throw new TypeError('invalid suffix')
	    }
	
	    string += '+' + suffix
	  }
	
	  // append parameters
	  if (parameters && typeof parameters === 'object') {
	    var param
	    var params = Object.keys(parameters).sort()
	
	    for (var i = 0; i < params.length; i++) {
	      param = params[i]
	
	      if (!tokenRegExp.test(param)) {
	        throw new TypeError('invalid parameter name')
	      }
	
	      string += '; ' + param + '=' + qstring(parameters[param])
	    }
	  }
	
	  return string
	}
	
	/**
	 * Parse media type to object.
	 *
	 * @param {string|object} string
	 * @return {Object}
	 * @api public
	 */
	
	function parse(string) {
	  if (!string) {
	    throw new TypeError('argument string is required')
	  }
	
	  // support req/res-like objects as argument
	  if (typeof string === 'object') {
	    string = getcontenttype(string)
	  }
	
	  if (typeof string !== 'string') {
	    throw new TypeError('argument string is required to be a string')
	  }
	
	  var index = string.indexOf(';')
	  var type = index !== -1
	    ? string.substr(0, index)
	    : string
	
	  var key
	  var match
	  var obj = splitType(type)
	  var params = {}
	  var value
	
	  paramRegExp.lastIndex = index
	
	  while (match = paramRegExp.exec(string)) {
	    if (match.index !== index) {
	      throw new TypeError('invalid parameter format')
	    }
	
	    index += match[0].length
	    key = match[1].toLowerCase()
	    value = match[2]
	
	    if (value[0] === '"') {
	      // remove quotes and escapes
	      value = value
	        .substr(1, value.length - 2)
	        .replace(qescRegExp, '$1')
	    }
	
	    params[key] = value
	  }
	
	  if (index !== -1 && index !== string.length) {
	    throw new TypeError('invalid parameter format')
	  }
	
	  obj.parameters = params
	
	  return obj
	}
	
	/**
	 * Get content-type from req/res objects.
	 *
	 * @param {object}
	 * @return {Object}
	 * @api private
	 */
	
	function getcontenttype(obj) {
	  if (typeof obj.getHeader === 'function') {
	    // res-like
	    return obj.getHeader('content-type')
	  }
	
	  if (typeof obj.headers === 'object') {
	    // req-like
	    return obj.headers && obj.headers['content-type']
	  }
	}
	
	/**
	 * Quote a string if necessary.
	 *
	 * @param {string} val
	 * @return {string}
	 * @api private
	 */
	
	function qstring(val) {
	  var str = String(val)
	
	  // no need to quote tokens
	  if (tokenRegExp.test(str)) {
	    return str
	  }
	
	  if (str.length > 0 && !textRegExp.test(str)) {
	    throw new TypeError('invalid parameter value')
	  }
	
	  return '"' + str.replace(quoteRegExp, '\\$1') + '"'
	}
	
	/**
	 * Simply "type/subtype+siffx" into parts.
	 *
	 * @param {string} string
	 * @return {Object}
	 * @api private
	 */
	
	function splitType(string) {
	  var match = typeRegExp.exec(string.toLowerCase())
	
	  if (!match) {
	    throw new TypeError('invalid media type')
	  }
	
	  var type = match[1]
	  var subtype = match[2]
	  var suffix
	
	  // suffix after last +
	  var index = subtype.lastIndexOf('+')
	  if (index !== -1) {
	    suffix = subtype.substr(index + 1)
	    subtype = subtype.substr(0, index)
	  }
	
	  var obj = {
	    type: type,
	    subtype: subtype,
	    suffix: suffix
	  }
	
	  return obj
	}


/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * express
	 * Copyright(c) 2009-2013 TJ Holowaychuk
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var contentDisposition = __webpack_require__(394);
	var deprecate = __webpack_require__(379)('express');
	var encodeUrl = __webpack_require__(402);
	var escapeHtml = __webpack_require__(366);
	var http = __webpack_require__(331);
	var isAbsolute = __webpack_require__(393).isAbsolute;
	var onFinished = __webpack_require__(367);
	var path = __webpack_require__(342);
	var merge = __webpack_require__(378);
	var sign = __webpack_require__(427).sign;
	var normalizeType = __webpack_require__(393).normalizeType;
	var normalizeTypes = __webpack_require__(393).normalizeTypes;
	var setCharset = __webpack_require__(393).setCharset;
	var statusCodes = http.STATUS_CODES;
	var cookie = __webpack_require__(428);
	var send = __webpack_require__(396);
	var extname = path.extname;
	var mime = send.mime;
	var resolve = path.resolve;
	var vary = __webpack_require__(429);
	
	/**
	 * Response prototype.
	 */
	
	var res = module.exports = {
	  __proto__: http.ServerResponse.prototype
	};
	
	/**
	 * Module variables.
	 * @private
	 */
	
	var charsetRegExp = /;\s*charset\s*=/;
	
	/**
	 * Set status `code`.
	 *
	 * @param {Number} code
	 * @return {ServerResponse}
	 * @public
	 */
	
	res.status = function status(code) {
	  this.statusCode = code;
	  return this;
	};
	
	/**
	 * Set Link header field with the given `links`.
	 *
	 * Examples:
	 *
	 *    res.links({
	 *      next: 'http://api.example.com/users?page=2',
	 *      last: 'http://api.example.com/users?page=5'
	 *    });
	 *
	 * @param {Object} links
	 * @return {ServerResponse}
	 * @public
	 */
	
	res.links = function(links){
	  var link = this.get('Link') || '';
	  if (link) link += ', ';
	  return this.set('Link', link + Object.keys(links).map(function(rel){
	    return '<' + links[rel] + '>; rel="' + rel + '"';
	  }).join(', '));
	};
	
	/**
	 * Send a response.
	 *
	 * Examples:
	 *
	 *     res.send(new Buffer('wahoo'));
	 *     res.send({ some: 'json' });
	 *     res.send('<p>some html</p>');
	 *
	 * @param {string|number|boolean|object|Buffer} body
	 * @public
	 */
	
	res.send = function send(body) {
	  var chunk = body;
	  var encoding;
	  var len;
	  var req = this.req;
	  var type;
	
	  // settings
	  var app = this.app;
	
	  // allow status / body
	  if (arguments.length === 2) {
	    // res.send(body, status) backwards compat
	    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
	      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
	      this.statusCode = arguments[1];
	    } else {
	      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
	      this.statusCode = arguments[0];
	      chunk = arguments[1];
	    }
	  }
	
	  // disambiguate res.send(status) and res.send(status, num)
	  if (typeof chunk === 'number' && arguments.length === 1) {
	    // res.send(status) will set status message as text string
	    if (!this.get('Content-Type')) {
	      this.type('txt');
	    }
	
	    deprecate('res.send(status): Use res.sendStatus(status) instead');
	    this.statusCode = chunk;
	    chunk = statusCodes[chunk];
	  }
	
	  switch (typeof chunk) {
	    // string defaulting to html
	    case 'string':
	      if (!this.get('Content-Type')) {
	        this.type('html');
	      }
	      break;
	    case 'boolean':
	    case 'number':
	    case 'object':
	      if (chunk === null) {
	        chunk = '';
	      } else if (Buffer.isBuffer(chunk)) {
	        if (!this.get('Content-Type')) {
	          this.type('bin');
	        }
	      } else {
	        return this.json(chunk);
	      }
	      break;
	  }
	
	  // write strings in utf-8
	  if (typeof chunk === 'string') {
	    encoding = 'utf8';
	    type = this.get('Content-Type');
	
	    // reflect this in content-type
	    if (typeof type === 'string') {
	      this.set('Content-Type', setCharset(type, 'utf-8'));
	    }
	  }
	
	  // populate Content-Length
	  if (chunk !== undefined) {
	    if (!Buffer.isBuffer(chunk)) {
	      // convert chunk to Buffer; saves later double conversions
	      chunk = new Buffer(chunk, encoding);
	      encoding = undefined;
	    }
	
	    len = chunk.length;
	    this.set('Content-Length', len);
	  }
	
	  // populate ETag
	  var etag;
	  var generateETag = len !== undefined && app.get('etag fn');
	  if (typeof generateETag === 'function' && !this.get('ETag')) {
	    if ((etag = generateETag(chunk, encoding))) {
	      this.set('ETag', etag);
	    }
	  }
	
	  // freshness
	  if (req.fresh) this.statusCode = 304;
	
	  // strip irrelevant headers
	  if (204 === this.statusCode || 304 === this.statusCode) {
	    this.removeHeader('Content-Type');
	    this.removeHeader('Content-Length');
	    this.removeHeader('Transfer-Encoding');
	    chunk = '';
	  }
	
	  if (req.method === 'HEAD') {
	    // skip body for HEAD
	    this.end();
	  } else {
	    // respond
	    this.end(chunk, encoding);
	  }
	
	  return this;
	};
	
	/**
	 * Send JSON response.
	 *
	 * Examples:
	 *
	 *     res.json(null);
	 *     res.json({ user: 'tj' });
	 *
	 * @param {string|number|boolean|object} obj
	 * @public
	 */
	
	res.json = function json(obj) {
	  var val = obj;
	
	  // allow status / body
	  if (arguments.length === 2) {
	    // res.json(body, status) backwards compat
	    if (typeof arguments[1] === 'number') {
	      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
	      this.statusCode = arguments[1];
	    } else {
	      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
	      this.statusCode = arguments[0];
	      val = arguments[1];
	    }
	  }
	
	  // settings
	  var app = this.app;
	  var replacer = app.get('json replacer');
	  var spaces = app.get('json spaces');
	  var body = stringify(val, replacer, spaces);
	
	  // content-type
	  if (!this.get('Content-Type')) {
	    this.set('Content-Type', 'application/json');
	  }
	
	  return this.send(body);
	};
	
	/**
	 * Send JSON response with JSONP callback support.
	 *
	 * Examples:
	 *
	 *     res.jsonp(null);
	 *     res.jsonp({ user: 'tj' });
	 *
	 * @param {string|number|boolean|object} obj
	 * @public
	 */
	
	res.jsonp = function jsonp(obj) {
	  var val = obj;
	
	  // allow status / body
	  if (arguments.length === 2) {
	    // res.json(body, status) backwards compat
	    if (typeof arguments[1] === 'number') {
	      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
	      this.statusCode = arguments[1];
	    } else {
	      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
	      this.statusCode = arguments[0];
	      val = arguments[1];
	    }
	  }
	
	  // settings
	  var app = this.app;
	  var replacer = app.get('json replacer');
	  var spaces = app.get('json spaces');
	  var body = stringify(val, replacer, spaces);
	  var callback = this.req.query[app.get('jsonp callback name')];
	
	  // content-type
	  if (!this.get('Content-Type')) {
	    this.set('X-Content-Type-Options', 'nosniff');
	    this.set('Content-Type', 'application/json');
	  }
	
	  // fixup callback
	  if (Array.isArray(callback)) {
	    callback = callback[0];
	  }
	
	  // jsonp
	  if (typeof callback === 'string' && callback.length !== 0) {
	    this.charset = 'utf-8';
	    this.set('X-Content-Type-Options', 'nosniff');
	    this.set('Content-Type', 'text/javascript');
	
	    // restrict callback charset
	    callback = callback.replace(/[^\[\]\w$.]/g, '');
	
	    // replace chars not allowed in JavaScript that are in JSON
	    body = body
	      .replace(/\u2028/g, '\\u2028')
	      .replace(/\u2029/g, '\\u2029');
	
	    // the /**/ is a specific security mitigation for "Rosetta Flash JSONP abuse"
	    // the typeof check is just to reduce client error noise
	    body = '/**/ typeof ' + callback + ' === \'function\' && ' + callback + '(' + body + ');';
	  }
	
	  return this.send(body);
	};
	
	/**
	 * Send given HTTP status code.
	 *
	 * Sets the response status to `statusCode` and the body of the
	 * response to the standard description from node's http.STATUS_CODES
	 * or the statusCode number if no description.
	 *
	 * Examples:
	 *
	 *     res.sendStatus(200);
	 *
	 * @param {number} statusCode
	 * @public
	 */
	
	res.sendStatus = function sendStatus(statusCode) {
	  var body = statusCodes[statusCode] || String(statusCode);
	
	  this.statusCode = statusCode;
	  this.type('txt');
	
	  return this.send(body);
	};
	
	/**
	 * Transfer the file at the given `path`.
	 *
	 * Automatically sets the _Content-Type_ response header field.
	 * The callback `callback(err)` is invoked when the transfer is complete
	 * or when an error occurs. Be sure to check `res.sentHeader`
	 * if you wish to attempt responding, as the header and some data
	 * may have already been transferred.
	 *
	 * Options:
	 *
	 *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
	 *   - `root`     root directory for relative filenames
	 *   - `headers`  object of headers to serve with file
	 *   - `dotfiles` serve dotfiles, defaulting to false; can be `"allow"` to send them
	 *
	 * Other options are passed along to `send`.
	 *
	 * Examples:
	 *
	 *  The following example illustrates how `res.sendFile()` may
	 *  be used as an alternative for the `static()` middleware for
	 *  dynamic situations. The code backing `res.sendFile()` is actually
	 *  the same code, so HTTP cache support etc is identical.
	 *
	 *     app.get('/user/:uid/photos/:file', function(req, res){
	 *       var uid = req.params.uid
	 *         , file = req.params.file;
	 *
	 *       req.user.mayViewFilesFrom(uid, function(yes){
	 *         if (yes) {
	 *           res.sendFile('/uploads/' + uid + '/' + file);
	 *         } else {
	 *           res.send(403, 'Sorry! you cant see that.');
	 *         }
	 *       });
	 *     });
	 *
	 * @public
	 */
	
	res.sendFile = function sendFile(path, options, callback) {
	  var done = callback;
	  var req = this.req;
	  var res = this;
	  var next = req.next;
	  var opts = options || {};
	
	  if (!path) {
	    throw new TypeError('path argument is required to res.sendFile');
	  }
	
	  // support function as second arg
	  if (typeof options === 'function') {
	    done = options;
	    opts = {};
	  }
	
	  if (!opts.root && !isAbsolute(path)) {
	    throw new TypeError('path must be absolute or specify root to res.sendFile');
	  }
	
	  // create file stream
	  var pathname = encodeURI(path);
	  var file = send(req, pathname, opts);
	
	  // transfer
	  sendfile(res, file, opts, function (err) {
	    if (done) return done(err);
	    if (err && err.code === 'EISDIR') return next();
	
	    // next() all but write errors
	    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
	      next(err);
	    }
	  });
	};
	
	/**
	 * Transfer the file at the given `path`.
	 *
	 * Automatically sets the _Content-Type_ response header field.
	 * The callback `callback(err)` is invoked when the transfer is complete
	 * or when an error occurs. Be sure to check `res.sentHeader`
	 * if you wish to attempt responding, as the header and some data
	 * may have already been transferred.
	 *
	 * Options:
	 *
	 *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
	 *   - `root`     root directory for relative filenames
	 *   - `headers`  object of headers to serve with file
	 *   - `dotfiles` serve dotfiles, defaulting to false; can be `"allow"` to send them
	 *
	 * Other options are passed along to `send`.
	 *
	 * Examples:
	 *
	 *  The following example illustrates how `res.sendfile()` may
	 *  be used as an alternative for the `static()` middleware for
	 *  dynamic situations. The code backing `res.sendfile()` is actually
	 *  the same code, so HTTP cache support etc is identical.
	 *
	 *     app.get('/user/:uid/photos/:file', function(req, res){
	 *       var uid = req.params.uid
	 *         , file = req.params.file;
	 *
	 *       req.user.mayViewFilesFrom(uid, function(yes){
	 *         if (yes) {
	 *           res.sendfile('/uploads/' + uid + '/' + file);
	 *         } else {
	 *           res.send(403, 'Sorry! you cant see that.');
	 *         }
	 *       });
	 *     });
	 *
	 * @public
	 */
	
	res.sendfile = function (path, options, callback) {
	  var done = callback;
	  var req = this.req;
	  var res = this;
	  var next = req.next;
	  var opts = options || {};
	
	  // support function as second arg
	  if (typeof options === 'function') {
	    done = options;
	    opts = {};
	  }
	
	  // create file stream
	  var file = send(req, path, opts);
	
	  // transfer
	  sendfile(res, file, opts, function (err) {
	    if (done) return done(err);
	    if (err && err.code === 'EISDIR') return next();
	
	    // next() all but write errors
	    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
	      next(err);
	    }
	  });
	};
	
	res.sendfile = deprecate.function(res.sendfile,
	  'res.sendfile: Use res.sendFile instead');
	
	/**
	 * Transfer the file at the given `path` as an attachment.
	 *
	 * Optionally providing an alternate attachment `filename`,
	 * and optional callback `callback(err)`. The callback is invoked
	 * when the data transfer is complete, or when an error has
	 * ocurred. Be sure to check `res.headersSent` if you plan to respond.
	 *
	 * This method uses `res.sendfile()`.
	 *
	 * @public
	 */
	
	res.download = function download(path, filename, callback) {
	  var done = callback;
	  var name = filename;
	
	  // support function as second arg
	  if (typeof filename === 'function') {
	    done = filename;
	    name = null;
	  }
	
	  // set Content-Disposition when file is sent
	  var headers = {
	    'Content-Disposition': contentDisposition(name || path)
	  };
	
	  // Resolve the full path for sendFile
	  var fullPath = resolve(path);
	
	  return this.sendFile(fullPath, { headers: headers }, done);
	};
	
	/**
	 * Set _Content-Type_ response header with `type` through `mime.lookup()`
	 * when it does not contain "/", or set the Content-Type to `type` otherwise.
	 *
	 * Examples:
	 *
	 *     res.type('.html');
	 *     res.type('html');
	 *     res.type('json');
	 *     res.type('application/json');
	 *     res.type('png');
	 *
	 * @param {String} type
	 * @return {ServerResponse} for chaining
	 * @public
	 */
	
	res.contentType =
	res.type = function contentType(type) {
	  var ct = type.indexOf('/') === -1
	    ? mime.lookup(type)
	    : type;
	
	  return this.set('Content-Type', ct);
	};
	
	/**
	 * Respond to the Acceptable formats using an `obj`
	 * of mime-type callbacks.
	 *
	 * This method uses `req.accepted`, an array of
	 * acceptable types ordered by their quality values.
	 * When "Accept" is not present the _first_ callback
	 * is invoked, otherwise the first match is used. When
	 * no match is performed the server responds with
	 * 406 "Not Acceptable".
	 *
	 * Content-Type is set for you, however if you choose
	 * you may alter this within the callback using `res.type()`
	 * or `res.set('Content-Type', ...)`.
	 *
	 *    res.format({
	 *      'text/plain': function(){
	 *        res.send('hey');
	 *      },
	 *
	 *      'text/html': function(){
	 *        res.send('<p>hey</p>');
	 *      },
	 *
	 *      'appliation/json': function(){
	 *        res.send({ message: 'hey' });
	 *      }
	 *    });
	 *
	 * In addition to canonicalized MIME types you may
	 * also use extnames mapped to these types:
	 *
	 *    res.format({
	 *      text: function(){
	 *        res.send('hey');
	 *      },
	 *
	 *      html: function(){
	 *        res.send('<p>hey</p>');
	 *      },
	 *
	 *      json: function(){
	 *        res.send({ message: 'hey' });
	 *      }
	 *    });
	 *
	 * By default Express passes an `Error`
	 * with a `.status` of 406 to `next(err)`
	 * if a match is not made. If you provide
	 * a `.default` callback it will be invoked
	 * instead.
	 *
	 * @param {Object} obj
	 * @return {ServerResponse} for chaining
	 * @public
	 */
	
	res.format = function(obj){
	  var req = this.req;
	  var next = req.next;
	
	  var fn = obj.default;
	  if (fn) delete obj.default;
	  var keys = Object.keys(obj);
	
	  var key = keys.length > 0
	    ? req.accepts(keys)
	    : false;
	
	  this.vary("Accept");
	
	  if (key) {
	    this.set('Content-Type', normalizeType(key).value);
	    obj[key](req, this, next);
	  } else if (fn) {
	    fn();
	  } else {
	    var err = new Error('Not Acceptable');
	    err.status = err.statusCode = 406;
	    err.types = normalizeTypes(keys).map(function(o){ return o.value });
	    next(err);
	  }
	
	  return this;
	};
	
	/**
	 * Set _Content-Disposition_ header to _attachment_ with optional `filename`.
	 *
	 * @param {String} filename
	 * @return {ServerResponse}
	 * @public
	 */
	
	res.attachment = function attachment(filename) {
	  if (filename) {
	    this.type(extname(filename));
	  }
	
	  this.set('Content-Disposition', contentDisposition(filename));
	
	  return this;
	};
	
	/**
	 * Append additional header `field` with value `val`.
	 *
	 * Example:
	 *
	 *    res.append('Link', ['<http://localhost/>', '<http://localhost:3000/>']);
	 *    res.append('Set-Cookie', 'foo=bar; Path=/; HttpOnly');
	 *    res.append('Warning', '199 Miscellaneous warning');
	 *
	 * @param {String} field
	 * @param {String|Array} val
	 * @return {ServerResponse} for chaining
	 * @public
	 */
	
	res.append = function append(field, val) {
	  var prev = this.get(field);
	  var value = val;
	
	  if (prev) {
	    // concat the new and prev vals
	    value = Array.isArray(prev) ? prev.concat(val)
	      : Array.isArray(val) ? [prev].concat(val)
	      : [prev, val];
	  }
	
	  return this.set(field, value);
	};
	
	/**
	 * Set header `field` to `val`, or pass
	 * an object of header fields.
	 *
	 * Examples:
	 *
	 *    res.set('Foo', ['bar', 'baz']);
	 *    res.set('Accept', 'application/json');
	 *    res.set({ Accept: 'text/plain', 'X-API-Key': 'tobi' });
	 *
	 * Aliased as `res.header()`.
	 *
	 * @param {String|Object} field
	 * @param {String|Array} val
	 * @return {ServerResponse} for chaining
	 * @public
	 */
	
	res.set =
	res.header = function header(field, val) {
	  if (arguments.length === 2) {
	    var value = Array.isArray(val)
	      ? val.map(String)
	      : String(val);
	
	    // add charset to content-type
	    if (field.toLowerCase() === 'content-type' && !charsetRegExp.test(value)) {
	      var charset = mime.charsets.lookup(value.split(';')[0]);
	      if (charset) value += '; charset=' + charset.toLowerCase();
	    }
	
	    this.setHeader(field, value);
	  } else {
	    for (var key in field) {
	      this.set(key, field[key]);
	    }
	  }
	  return this;
	};
	
	/**
	 * Get value for header `field`.
	 *
	 * @param {String} field
	 * @return {String}
	 * @public
	 */
	
	res.get = function(field){
	  return this.getHeader(field);
	};
	
	/**
	 * Clear cookie `name`.
	 *
	 * @param {String} name
	 * @param {Object} [options]
	 * @return {ServerResponse} for chaining
	 * @public
	 */
	
	res.clearCookie = function clearCookie(name, options) {
	  var opts = merge({ expires: new Date(1), path: '/' }, options);
	
	  return this.cookie(name, '', opts);
	};
	
	/**
	 * Set cookie `name` to `value`, with the given `options`.
	 *
	 * Options:
	 *
	 *    - `maxAge`   max-age in milliseconds, converted to `expires`
	 *    - `signed`   sign the cookie
	 *    - `path`     defaults to "/"
	 *
	 * Examples:
	 *
	 *    // "Remember Me" for 15 minutes
	 *    res.cookie('rememberme', '1', { expires: new Date(Date.now() + 900000), httpOnly: true });
	 *
	 *    // save as above
	 *    res.cookie('rememberme', '1', { maxAge: 900000, httpOnly: true })
	 *
	 * @param {String} name
	 * @param {String|Object} value
	 * @param {Options} options
	 * @return {ServerResponse} for chaining
	 * @public
	 */
	
	res.cookie = function (name, value, options) {
	  var opts = merge({}, options);
	  var secret = this.req.secret;
	  var signed = opts.signed;
	
	  if (signed && !secret) {
	    throw new Error('cookieParser("secret") required for signed cookies');
	  }
	
	  var val = typeof value === 'object'
	    ? 'j:' + JSON.stringify(value)
	    : String(value);
	
	  if (signed) {
	    val = 's:' + sign(val, secret);
	  }
	
	  if ('maxAge' in opts) {
	    opts.expires = new Date(Date.now() + opts.maxAge);
	    opts.maxAge /= 1000;
	  }
	
	  if (opts.path == null) {
	    opts.path = '/';
	  }
	
	  this.append('Set-Cookie', cookie.serialize(name, String(val), opts));
	
	  return this;
	};
	
	/**
	 * Set the location header to `url`.
	 *
	 * The given `url` can also be "back", which redirects
	 * to the _Referrer_ or _Referer_ headers or "/".
	 *
	 * Examples:
	 *
	 *    res.location('/foo/bar').;
	 *    res.location('http://example.com');
	 *    res.location('../login');
	 *
	 * @param {String} url
	 * @return {ServerResponse} for chaining
	 * @public
	 */
	
	res.location = function location(url) {
	  var loc = url;
	
	  // "back" is an alias for the referrer
	  if (url === 'back') {
	    loc = this.req.get('Referrer') || '/';
	  }
	
	  // set location
	  return this.set('Location', encodeUrl(loc));
	};
	
	/**
	 * Redirect to the given `url` with optional response `status`
	 * defaulting to 302.
	 *
	 * The resulting `url` is determined by `res.location()`, so
	 * it will play nicely with mounted apps, relative paths,
	 * `"back"` etc.
	 *
	 * Examples:
	 *
	 *    res.redirect('/foo/bar');
	 *    res.redirect('http://example.com');
	 *    res.redirect(301, 'http://example.com');
	 *    res.redirect('../login'); // /blog/post/1 -> /blog/login
	 *
	 * @public
	 */
	
	res.redirect = function redirect(url) {
	  var address = url;
	  var body;
	  var status = 302;
	
	  // allow status / url
	  if (arguments.length === 2) {
	    if (typeof arguments[0] === 'number') {
	      status = arguments[0];
	      address = arguments[1];
	    } else {
	      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
	      status = arguments[1];
	    }
	  }
	
	  // Set location header
	  address = this.location(address).get('Location');
	
	  // Support text/{plain,html} by default
	  this.format({
	    text: function(){
	      body = statusCodes[status] + '. Redirecting to ' + address;
	    },
	
	    html: function(){
	      var u = escapeHtml(address);
	      body = '<p>' + statusCodes[status] + '. Redirecting to <a href="' + u + '">' + u + '</a></p>';
	    },
	
	    default: function(){
	      body = '';
	    }
	  });
	
	  // Respond
	  this.statusCode = status;
	  this.set('Content-Length', Buffer.byteLength(body));
	
	  if (this.req.method === 'HEAD') {
	    this.end();
	  } else {
	    this.end(body);
	  }
	};
	
	/**
	 * Add `field` to Vary. If already present in the Vary set, then
	 * this call is simply ignored.
	 *
	 * @param {Array|String} field
	 * @return {ServerResponse} for chaining
	 * @public
	 */
	
	res.vary = function(field){
	  // checks for back-compat
	  if (!field || (Array.isArray(field) && !field.length)) {
	    deprecate('res.vary(): Provide a field name');
	    return this;
	  }
	
	  vary(this, field);
	
	  return this;
	};
	
	/**
	 * Render `view` with the given `options` and optional callback `fn`.
	 * When a callback function is given a response will _not_ be made
	 * automatically, otherwise a response of _200_ and _text/html_ is given.
	 *
	 * Options:
	 *
	 *  - `cache`     boolean hinting to the engine it should cache
	 *  - `filename`  filename of the view being rendered
	 *
	 * @public
	 */
	
	res.render = function render(view, options, callback) {
	  var app = this.req.app;
	  var done = callback;
	  var opts = options || {};
	  var req = this.req;
	  var self = this;
	
	  // support callback function as second arg
	  if (typeof options === 'function') {
	    done = options;
	    opts = {};
	  }
	
	  // merge res.locals
	  opts._locals = self.locals;
	
	  // default callback to respond
	  done = done || function (err, str) {
	    if (err) return req.next(err);
	    self.send(str);
	  };
	
	  // render
	  app.render(view, opts, done);
	};
	
	// pipe the send file stream
	function sendfile(res, file, options, callback) {
	  var done = false;
	  var streaming;
	
	  // request aborted
	  function onaborted() {
	    if (done) return;
	    done = true;
	
	    var err = new Error('Request aborted');
	    err.code = 'ECONNABORTED';
	    callback(err);
	  }
	
	  // directory
	  function ondirectory() {
	    if (done) return;
	    done = true;
	
	    var err = new Error('EISDIR, read');
	    err.code = 'EISDIR';
	    callback(err);
	  }
	
	  // errors
	  function onerror(err) {
	    if (done) return;
	    done = true;
	    callback(err);
	  }
	
	  // ended
	  function onend() {
	    if (done) return;
	    done = true;
	    callback();
	  }
	
	  // file
	  function onfile() {
	    streaming = false;
	  }
	
	  // finished
	  function onfinish(err) {
	    if (err && err.code === 'ECONNRESET') return onaborted();
	    if (err) return onerror(err);
	    if (done) return;
	
	    setImmediate(function () {
	      if (streaming !== false && !done) {
	        onaborted();
	        return;
	      }
	
	      if (done) return;
	      done = true;
	      callback();
	    });
	  }
	
	  // streaming
	  function onstream() {
	    streaming = true;
	  }
	
	  file.on('directory', ondirectory);
	  file.on('end', onend);
	  file.on('error', onerror);
	  file.on('file', onfile);
	  file.on('stream', onstream);
	  onFinished(res, onfinish);
	
	  if (options.headers) {
	    // set headers on successful transfer
	    file.on('headers', function headers(res) {
	      var obj = options.headers;
	      var keys = Object.keys(obj);
	
	      for (var i = 0; i < keys.length; i++) {
	        var k = keys[i];
	        res.setHeader(k, obj[k]);
	      }
	    });
	  }
	
	  // pipe
	  file.pipe(res);
	}
	
	/**
	 * Stringify JSON, like JSON.stringify, but v8 optimized.
	 * @private
	 */
	
	function stringify(value, replacer, spaces) {
	  // v8 checks arguments.length for optimizing simple call
	  // https://bugs.chromium.org/p/v8/issues/detail?id=4730
	  return replacer || spaces
	    ? JSON.stringify(value, replacer, spaces)
	    : JSON.stringify(value);
	}


/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */
	
	var crypto = __webpack_require__(263);
	
	/**
	 * Sign the given `val` with `secret`.
	 *
	 * @param {String} val
	 * @param {String} secret
	 * @return {String}
	 * @api private
	 */
	
	exports.sign = function(val, secret){
	  if ('string' != typeof val) throw new TypeError("Cookie value must be provided as a string.");
	  if ('string' != typeof secret) throw new TypeError("Secret string must be provided.");
	  return val + '.' + crypto
	    .createHmac('sha256', secret)
	    .update(val)
	    .digest('base64')
	    .replace(/\=+$/, '');
	};
	
	/**
	 * Unsign and decode the given `val` with `secret`,
	 * returning `false` if the signature is invalid.
	 *
	 * @param {String} val
	 * @param {String} secret
	 * @return {String|Boolean}
	 * @api private
	 */
	
	exports.unsign = function(val, secret){
	  if ('string' != typeof val) throw new TypeError("Signed cookie string must be provided.");
	  if ('string' != typeof secret) throw new TypeError("Secret string must be provided.");
	  var str = val.slice(0, val.lastIndexOf('.'))
	    , mac = exports.sign(str, secret);
	  
	  return sha1(mac) == sha1(val) ? str : false;
	};
	
	/**
	 * Private
	 */
	
	function sha1(str){
	  return crypto.createHash('sha1').update(str).digest('hex');
	}


/***/ },
/* 428 */
/***/ function(module, exports) {

	/*!
	 * cookie
	 * Copyright(c) 2012-2014 Roman Shtylman
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Module exports.
	 * @public
	 */
	
	exports.parse = parse;
	exports.serialize = serialize;
	
	/**
	 * Module variables.
	 * @private
	 */
	
	var decode = decodeURIComponent;
	var encode = encodeURIComponent;
	var pairSplitRegExp = /; */;
	
	/**
	 * RegExp to match field-content in RFC 7230 sec 3.2
	 *
	 * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
	 * field-vchar   = VCHAR / obs-text
	 * obs-text      = %x80-FF
	 */
	
	var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
	
	/**
	 * Parse a cookie header.
	 *
	 * Parse the given cookie header string into an object
	 * The object has the various cookies as keys(names) => values
	 *
	 * @param {string} str
	 * @param {object} [options]
	 * @return {object}
	 * @public
	 */
	
	function parse(str, options) {
	  if (typeof str !== 'string') {
	    throw new TypeError('argument str must be a string');
	  }
	
	  var obj = {}
	  var opt = options || {};
	  var pairs = str.split(pairSplitRegExp);
	  var dec = opt.decode || decode;
	
	  for (var i = 0; i < pairs.length; i++) {
	    var pair = pairs[i];
	    var eq_idx = pair.indexOf('=');
	
	    // skip things that don't look like key=value
	    if (eq_idx < 0) {
	      continue;
	    }
	
	    var key = pair.substr(0, eq_idx).trim()
	    var val = pair.substr(++eq_idx, pair.length).trim();
	
	    // quoted values
	    if ('"' == val[0]) {
	      val = val.slice(1, -1);
	    }
	
	    // only assign once
	    if (undefined == obj[key]) {
	      obj[key] = tryDecode(val, dec);
	    }
	  }
	
	  return obj;
	}
	
	/**
	 * Serialize data into a cookie header.
	 *
	 * Serialize the a name value pair into a cookie string suitable for
	 * http headers. An optional options object specified cookie parameters.
	 *
	 * serialize('foo', 'bar', { httpOnly: true })
	 *   => "foo=bar; httpOnly"
	 *
	 * @param {string} name
	 * @param {string} val
	 * @param {object} [options]
	 * @return {string}
	 * @public
	 */
	
	function serialize(name, val, options) {
	  var opt = options || {};
	  var enc = opt.encode || encode;
	
	  if (typeof enc !== 'function') {
	    throw new TypeError('option encode is invalid');
	  }
	
	  if (!fieldContentRegExp.test(name)) {
	    throw new TypeError('argument name is invalid');
	  }
	
	  var value = enc(val);
	
	  if (value && !fieldContentRegExp.test(value)) {
	    throw new TypeError('argument val is invalid');
	  }
	
	  var str = name + '=' + value;
	
	  if (null != opt.maxAge) {
	    var maxAge = opt.maxAge - 0;
	    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');
	    str += '; Max-Age=' + Math.floor(maxAge);
	  }
	
	  if (opt.domain) {
	    if (!fieldContentRegExp.test(opt.domain)) {
	      throw new TypeError('option domain is invalid');
	    }
	
	    str += '; Domain=' + opt.domain;
	  }
	
	  if (opt.path) {
	    if (!fieldContentRegExp.test(opt.path)) {
	      throw new TypeError('option path is invalid');
	    }
	
	    str += '; Path=' + opt.path;
	  }
	
	  if (opt.expires) {
	    if (typeof opt.expires.toUTCString !== 'function') {
	      throw new TypeError('option expires is invalid');
	    }
	
	    str += '; Expires=' + opt.expires.toUTCString();
	  }
	
	  if (opt.httpOnly) {
	    str += '; HttpOnly';
	  }
	
	  if (opt.secure) {
	    str += '; Secure';
	  }
	
	  if (opt.sameSite) {
	    var sameSite = typeof opt.sameSite === 'string'
	      ? opt.sameSite.toLowerCase() : opt.sameSite;
	
	    switch (sameSite) {
	      case true:
	        str += '; SameSite=Strict';
	        break;
	      case 'lax':
	        str += '; SameSite=Lax';
	        break;
	      case 'strict':
	        str += '; SameSite=Strict';
	        break;
	      default:
	        throw new TypeError('option sameSite is invalid');
	    }
	  }
	
	  return str;
	}
	
	/**
	 * Try decoding a string using a decoding function.
	 *
	 * @param {string} str
	 * @param {function} decode
	 * @private
	 */
	
	function tryDecode(str, decode) {
	  try {
	    return decode(str);
	  } catch (e) {
	    return str;
	  }
	}


/***/ },
/* 429 */
/***/ function(module, exports) {

	/*!
	 * vary
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Module exports.
	 */
	
	module.exports = vary;
	module.exports.append = append;
	
	/**
	 * RegExp to match field-name in RFC 7230 sec 3.2
	 *
	 * field-name    = token
	 * token         = 1*tchar
	 * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
	 *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
	 *               / DIGIT / ALPHA
	 *               ; any VCHAR, except delimiters
	 */
	
	var fieldNameRegExp = /^[!#$%&'\*\+\-\.\^_`\|~0-9A-Za-z]+$/
	
	/**
	 * Append a field to a vary header.
	 *
	 * @param {String} header
	 * @param {String|Array} field
	 * @return {String}
	 * @api public
	 */
	
	function append(header, field) {
	  if (typeof header !== 'string') {
	    throw new TypeError('header argument is required');
	  }
	
	  if (!field) {
	    throw new TypeError('field argument is required');
	  }
	
	  // get fields array
	  var fields = !Array.isArray(field)
	    ? parse(String(field))
	    : field;
	
	  // assert on invalid field names
	  for (var i = 0; i < fields.length; i++) {
	    if (!fieldNameRegExp.test(fields[i])) {
	      throw new TypeError('field argument contains an invalid header name');
	    }
	  }
	
	  // existing, unspecified vary
	  if (header === '*') {
	    return header;
	  }
	
	  // enumerate current values
	  var val = header;
	  var vals = parse(header.toLowerCase());
	
	  // unspecified vary
	  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {
	    return '*';
	  }
	
	  for (var i = 0; i < fields.length; i++) {
	    var fld = fields[i].toLowerCase();
	
	    // append value (case-preserving)
	    if (vals.indexOf(fld) === -1) {
	      vals.push(fld);
	      val = val
	        ? val + ', ' + fields[i]
	        : fields[i];
	    }
	  }
	
	  return val;
	}
	
	/**
	 * Parse a vary header into an array.
	 *
	 * @param {String} header
	 * @return {Array}
	 * @api private
	 */
	
	function parse(header) {
	  return header.trim().split(/ *, */);
	}
	
	/**
	 * Mark that a request is varied on a header field.
	 *
	 * @param {Object} res
	 * @param {String|Array} field
	 * @api public
	 */
	
	function vary(res, field) {
	  if (!res || !res.getHeader || !res.setHeader) {
	    // quack quack
	    throw new TypeError('res argument is required');
	  }
	
	  // get existing header
	  var val = res.getHeader('Vary') || ''
	  var header = Array.isArray(val)
	    ? val.join(', ')
	    : String(val);
	
	  // set new header
	  if ((val = append(header, field))) {
	    res.setHeader('Vary', val);
	  }
	}


/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * serve-static
	 * Copyright(c) 2010 Sencha Inc.
	 * Copyright(c) 2011 TJ Holowaychuk
	 * Copyright(c) 2014-2016 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict'
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var encodeUrl = __webpack_require__(402)
	var escapeHtml = __webpack_require__(366)
	var parseUrl = __webpack_require__(385)
	var resolve = __webpack_require__(342).resolve
	var send = __webpack_require__(396)
	var url = __webpack_require__(333)
	
	/**
	 * Module exports.
	 * @public
	 */
	
	module.exports = serveStatic
	module.exports.mime = send.mime
	
	/**
	 * @param {string} root
	 * @param {object} [options]
	 * @return {function}
	 * @public
	 */
	
	function serveStatic (root, options) {
	  if (!root) {
	    throw new TypeError('root path required')
	  }
	
	  if (typeof root !== 'string') {
	    throw new TypeError('root path must be a string')
	  }
	
	  // copy options object
	  var opts = Object.create(options || null)
	
	  // fall-though
	  var fallthrough = opts.fallthrough !== false
	
	  // default redirect
	  var redirect = opts.redirect !== false
	
	  // headers listener
	  var setHeaders = opts.setHeaders
	
	  if (setHeaders && typeof setHeaders !== 'function') {
	    throw new TypeError('option setHeaders must be function')
	  }
	
	  // setup options for send
	  opts.maxage = opts.maxage || opts.maxAge || 0
	  opts.root = resolve(root)
	
	  // construct directory listener
	  var onDirectory = redirect
	    ? createRedirectDirectoryListener()
	    : createNotFoundDirectoryListener()
	
	  return function serveStatic (req, res, next) {
	    if (req.method !== 'GET' && req.method !== 'HEAD') {
	      if (fallthrough) {
	        return next()
	      }
	
	      // method not allowed
	      res.statusCode = 405
	      res.setHeader('Allow', 'GET, HEAD')
	      res.setHeader('Content-Length', '0')
	      res.end()
	      return
	    }
	
	    var forwardError = !fallthrough
	    var originalUrl = parseUrl.original(req)
	    var path = parseUrl(req).pathname
	
	    // make sure redirect occurs at mount
	    if (path === '/' && originalUrl.pathname.substr(-1) !== '/') {
	      path = ''
	    }
	
	    // create send stream
	    var stream = send(req, path, opts)
	
	    // add directory handler
	    stream.on('directory', onDirectory)
	
	    // add headers listener
	    if (setHeaders) {
	      stream.on('headers', setHeaders)
	    }
	
	    // add file listener for fallthrough
	    if (fallthrough) {
	      stream.on('file', function onFile () {
	        // once file is determined, always forward error
	        forwardError = true
	      })
	    }
	
	    // forward errors
	    stream.on('error', function error (err) {
	      if (forwardError || !(err.statusCode < 500)) {
	        next(err)
	        return
	      }
	
	      next()
	    })
	
	    // pipe
	    stream.pipe(res)
	  }
	}
	
	/**
	 * Collapse all leading slashes into a single slash
	 * @private
	 */
	function collapseLeadingSlashes (str) {
	  for (var i = 0; i < str.length; i++) {
	    if (str[i] !== '/') {
	      break
	    }
	  }
	
	  return i > 1
	    ? '/' + str.substr(i)
	    : str
	}
	
	/**
	 * Create a directory listener that just 404s.
	 * @private
	 */
	
	function createNotFoundDirectoryListener () {
	  return function notFound () {
	    this.error(404)
	  }
	}
	
	/**
	 * Create a directory listener that performs a redirect.
	 * @private
	 */
	
	function createRedirectDirectoryListener () {
	  return function redirect () {
	    if (this.hasTrailingSlash()) {
	      this.error(404)
	      return
	    }
	
	    // get original URL
	    var originalUrl = parseUrl.original(this.req)
	
	    // append trailing slash
	    originalUrl.path = null
	    originalUrl.pathname = collapseLeadingSlashes(originalUrl.pathname + '/')
	
	    // reformat the URL
	    var loc = encodeUrl(url.format(originalUrl))
	    var msg = 'Redirecting to <a href="' + escapeHtml(loc) + '">' + escapeHtml(loc) + '</a>\n'
	    var res = this.res
	
	    // send redirect response
	    res.statusCode = 301
	    res.setHeader('Content-Type', 'text/html; charset=UTF-8')
	    res.setHeader('Content-Length', Buffer.byteLength(msg))
	    res.setHeader('X-Content-Type-Options', 'nosniff')
	    res.setHeader('Location', loc)
	    res.end(msg)
	  }
	}


/***/ }
/******/ ]);
//# sourceMappingURL=server.js.map